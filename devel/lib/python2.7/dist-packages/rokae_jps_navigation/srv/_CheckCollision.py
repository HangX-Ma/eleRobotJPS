# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/CheckCollisionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CheckCollisionRequest(genpy.Message):
  _md5sum = "9bd89d9349701f68069b0f63564cad46"
  _type = "rokae_jps_navigation/CheckCollisionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose path_pose
float32[] prev_joints
bool ifVerbose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['path_pose','prev_joints','ifVerbose']
  _slot_types = ['geometry_msgs/Pose','float32[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_pose,prev_joints,ifVerbose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckCollisionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path_pose is None:
        self.path_pose = geometry_msgs.msg.Pose()
      if self.prev_joints is None:
        self.prev_joints = []
      if self.ifVerbose is None:
        self.ifVerbose = False
    else:
      self.path_pose = geometry_msgs.msg.Pose()
      self.prev_joints = []
      self.ifVerbose = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.path_pose.position.x, _x.path_pose.position.y, _x.path_pose.position.z, _x.path_pose.orientation.x, _x.path_pose.orientation.y, _x.path_pose.orientation.z, _x.path_pose.orientation.w))
      length = len(self.prev_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.prev_joints))
      _x = self.ifVerbose
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path_pose is None:
        self.path_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.path_pose.position.x, _x.path_pose.position.y, _x.path_pose.position.z, _x.path_pose.orientation.x, _x.path_pose.orientation.y, _x.path_pose.orientation.z, _x.path_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.prev_joints = s.unpack(str[start:end])
      start = end
      end += 1
      (self.ifVerbose,) = _get_struct_B().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.path_pose.position.x, _x.path_pose.position.y, _x.path_pose.position.z, _x.path_pose.orientation.x, _x.path_pose.orientation.y, _x.path_pose.orientation.z, _x.path_pose.orientation.w))
      length = len(self.prev_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.prev_joints.tostring())
      _x = self.ifVerbose
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path_pose is None:
        self.path_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.path_pose.position.x, _x.path_pose.position.y, _x.path_pose.position.z, _x.path_pose.orientation.x, _x.path_pose.orientation.y, _x.path_pose.orientation.z, _x.path_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.prev_joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.ifVerbose,) = _get_struct_B().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/CheckCollisionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CheckCollisionResponse(genpy.Message):
  _md5sum = "249a06f30727d2046b37e953d9335a81"
  _type = "rokae_jps_navigation/CheckCollisionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool isCollide
bool getSolution
float32[] curr_joints
"""
  __slots__ = ['isCollide','getSolution','curr_joints']
  _slot_types = ['bool','bool','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       isCollide,getSolution,curr_joints

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CheckCollisionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.isCollide is None:
        self.isCollide = False
      if self.getSolution is None:
        self.getSolution = False
      if self.curr_joints is None:
        self.curr_joints = []
    else:
      self.isCollide = False
      self.getSolution = False
      self.curr_joints = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.isCollide, _x.getSolution))
      length = len(self.curr_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.curr_joints))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.isCollide, _x.getSolution,) = _get_struct_2B().unpack(str[start:end])
      self.isCollide = bool(self.isCollide)
      self.getSolution = bool(self.getSolution)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.curr_joints = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.isCollide, _x.getSolution))
      length = len(self.curr_joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.curr_joints.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.isCollide, _x.getSolution,) = _get_struct_2B().unpack(str[start:end])
      self.isCollide = bool(self.isCollide)
      self.getSolution = bool(self.getSolution)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.curr_joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class CheckCollision(object):
  _type          = 'rokae_jps_navigation/CheckCollision'
  _md5sum = '9553736970fcba3d957b6a5220bb6872'
  _request_class  = CheckCollisionRequest
  _response_class = CheckCollisionResponse
