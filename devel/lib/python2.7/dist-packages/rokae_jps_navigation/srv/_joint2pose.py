# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/joint2poseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class joint2poseRequest(genpy.Message):
  _md5sum = "9ed341ddbb4f864aa1eec399727b045c"
  _type = "rokae_jps_navigation/joint2poseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 joint0
float64 joint1
float64 joint2
float64 joint3
float64 joint4
float64 joint5
bool ifVerbose
"""
  __slots__ = ['joint0','joint1','joint2','joint3','joint4','joint5','ifVerbose']
  _slot_types = ['float64','float64','float64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint0,joint1,joint2,joint3,joint4,joint5,ifVerbose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joint2poseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint0 is None:
        self.joint0 = 0.
      if self.joint1 is None:
        self.joint1 = 0.
      if self.joint2 is None:
        self.joint2 = 0.
      if self.joint3 is None:
        self.joint3 = 0.
      if self.joint4 is None:
        self.joint4 = 0.
      if self.joint5 is None:
        self.joint5 = 0.
      if self.ifVerbose is None:
        self.ifVerbose = False
    else:
      self.joint0 = 0.
      self.joint1 = 0.
      self.joint2 = 0.
      self.joint3 = 0.
      self.joint4 = 0.
      self.joint5 = 0.
      self.ifVerbose = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6dB().pack(_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.ifVerbose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.ifVerbose,) = _get_struct_6dB().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6dB().pack(_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.ifVerbose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 49
      (_x.joint0, _x.joint1, _x.joint2, _x.joint3, _x.joint4, _x.joint5, _x.ifVerbose,) = _get_struct_6dB().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6dB = None
def _get_struct_6dB():
    global _struct_6dB
    if _struct_6dB is None:
        _struct_6dB = struct.Struct("<6dB")
    return _struct_6dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/joint2poseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class joint2poseResponse(genpy.Message):
  _md5sum = "222653e911ec2723bf153c3e2c46d638"
  _type = "rokae_jps_navigation/joint2poseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose re_pose


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['re_pose']
  _slot_types = ['geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       re_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joint2poseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.re_pose is None:
        self.re_pose = geometry_msgs.msg.Pose()
    else:
      self.re_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.re_pose.position.x, _x.re_pose.position.y, _x.re_pose.position.z, _x.re_pose.orientation.x, _x.re_pose.orientation.y, _x.re_pose.orientation.z, _x.re_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.re_pose is None:
        self.re_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.re_pose.position.x, _x.re_pose.position.y, _x.re_pose.position.z, _x.re_pose.orientation.x, _x.re_pose.orientation.y, _x.re_pose.orientation.z, _x.re_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.re_pose.position.x, _x.re_pose.position.y, _x.re_pose.position.z, _x.re_pose.orientation.x, _x.re_pose.orientation.y, _x.re_pose.orientation.z, _x.re_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.re_pose is None:
        self.re_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.re_pose.position.x, _x.re_pose.position.y, _x.re_pose.position.z, _x.re_pose.orientation.x, _x.re_pose.orientation.y, _x.re_pose.orientation.z, _x.re_pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
class joint2pose(object):
  _type          = 'rokae_jps_navigation/joint2pose'
  _md5sum = '8e3735eb3bfe1ca9ba91861cd4e5d3f8'
  _request_class  = joint2poseRequest
  _response_class = joint2poseResponse
