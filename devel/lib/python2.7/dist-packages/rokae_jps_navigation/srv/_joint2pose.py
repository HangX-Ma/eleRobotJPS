# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/joint2poseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class joint2poseRequest(genpy.Message):
  _md5sum = "5999e34ffaace7b38734bfad5de479e9"
  _type = "rokae_jps_navigation/joint2poseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Float32 joint0
std_msgs/Float32 joint1
std_msgs/Float32 joint2
std_msgs/Float32 joint3
std_msgs/Float32 joint4
std_msgs/Float32 joint5
bool ifVerbose

================================================================================
MSG: std_msgs/Float32
float32 data"""
  __slots__ = ['joint0','joint1','joint2','joint3','joint4','joint5','ifVerbose']
  _slot_types = ['std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','std_msgs/Float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joint0,joint1,joint2,joint3,joint4,joint5,ifVerbose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joint2poseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.joint0 is None:
        self.joint0 = std_msgs.msg.Float32()
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
      if self.joint5 is None:
        self.joint5 = std_msgs.msg.Float32()
      if self.ifVerbose is None:
        self.ifVerbose = False
    else:
      self.joint0 = std_msgs.msg.Float32()
      self.joint1 = std_msgs.msg.Float32()
      self.joint2 = std_msgs.msg.Float32()
      self.joint3 = std_msgs.msg.Float32()
      self.joint4 = std_msgs.msg.Float32()
      self.joint5 = std_msgs.msg.Float32()
      self.ifVerbose = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fB().pack(_x.joint0.data, _x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data, _x.joint5.data, _x.ifVerbose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint0 is None:
        self.joint0 = std_msgs.msg.Float32()
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
      if self.joint5 is None:
        self.joint5 = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.joint0.data, _x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data, _x.joint5.data, _x.ifVerbose,) = _get_struct_6fB().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fB().pack(_x.joint0.data, _x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data, _x.joint5.data, _x.ifVerbose))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.joint0 is None:
        self.joint0 = std_msgs.msg.Float32()
      if self.joint1 is None:
        self.joint1 = std_msgs.msg.Float32()
      if self.joint2 is None:
        self.joint2 = std_msgs.msg.Float32()
      if self.joint3 is None:
        self.joint3 = std_msgs.msg.Float32()
      if self.joint4 is None:
        self.joint4 = std_msgs.msg.Float32()
      if self.joint5 is None:
        self.joint5 = std_msgs.msg.Float32()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.joint0.data, _x.joint1.data, _x.joint2.data, _x.joint3.data, _x.joint4.data, _x.joint5.data, _x.ifVerbose,) = _get_struct_6fB().unpack(str[start:end])
      self.ifVerbose = bool(self.ifVerbose)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fB = None
def _get_struct_6fB():
    global _struct_6fB
    if _struct_6fB is None:
        _struct_6fB = struct.Struct("<6fB")
    return _struct_6fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rokae_jps_navigation/joint2poseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class joint2poseResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "rokae_jps_navigation/joint2poseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(joint2poseResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class joint2pose(object):
  _type          = 'rokae_jps_navigation/joint2pose'
  _md5sum = '5999e34ffaace7b38734bfad5de479e9'
  _request_class  = joint2poseRequest
  _response_class = joint2poseResponse
