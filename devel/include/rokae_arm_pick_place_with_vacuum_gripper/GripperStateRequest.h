// Generated by gencpp from file rokae_arm_pick_place_with_vacuum_gripper/GripperStateRequest.msg
// DO NOT EDIT!


#ifndef ROKAE_ARM_PICK_PLACE_WITH_VACUUM_GRIPPER_MESSAGE_GRIPPERSTATEREQUEST_H
#define ROKAE_ARM_PICK_PLACE_WITH_VACUUM_GRIPPER_MESSAGE_GRIPPERSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_arm_pick_place_with_vacuum_gripper
{
template <class ContainerAllocator>
struct GripperStateRequest_
{
  typedef GripperStateRequest_<ContainerAllocator> Type;

  GripperStateRequest_()
    : switch_state(false)  {
    }
  GripperStateRequest_(const ContainerAllocator& _alloc)
    : switch_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _switch_state_type;
  _switch_state_type switch_state;





  typedef boost::shared_ptr< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperStateRequest_

typedef ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<std::allocator<void> > GripperStateRequest;

typedef boost::shared_ptr< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest > GripperStateRequestPtr;
typedef boost::shared_ptr< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest const> GripperStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator1> & lhs, const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.switch_state == rhs.switch_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator1> & lhs, const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_arm_pick_place_with_vacuum_gripper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d03b6a3cc8309347b5a0df1aa787995";
  }

  static const char* value(const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d03b6a3cc830934ULL;
  static const uint64_t static_value2 = 0x7b5a0df1aa787995ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_arm_pick_place_with_vacuum_gripper/GripperStateRequest";
  }

  static const char* value(const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# content of GripperState.srv\n"
"\n"
"#request fields\n"
"bool switch_state\n"
;
  }

  static const char* value(const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.switch_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_arm_pick_place_with_vacuum_gripper::GripperStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "switch_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switch_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_ARM_PICK_PLACE_WITH_VACUUM_GRIPPER_MESSAGE_GRIPPERSTATEREQUEST_H
