// Generated by gencpp from file rokae_arm_toppra/ToppRa_srvRequest.msg
// DO NOT EDIT!


#ifndef ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVREQUEST_H
#define ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_arm_toppra
{
template <class ContainerAllocator>
struct ToppRa_srvRequest_
{
  typedef ToppRa_srvRequest_<ContainerAllocator> Type;

  ToppRa_srvRequest_()
    : joint_configs_on_way()
    , ifSave(false)  {
    }
  ToppRa_srvRequest_(const ContainerAllocator& _alloc)
    : joint_configs_on_way(_alloc)
    , ifSave(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_configs_on_way_type;
  _joint_configs_on_way_type joint_configs_on_way;

   typedef uint8_t _ifSave_type;
  _ifSave_type ifSave;





  typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ToppRa_srvRequest_

typedef ::rokae_arm_toppra::ToppRa_srvRequest_<std::allocator<void> > ToppRa_srvRequest;

typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvRequest > ToppRa_srvRequestPtr;
typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvRequest const> ToppRa_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator1> & lhs, const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_configs_on_way == rhs.joint_configs_on_way &&
    lhs.ifSave == rhs.ifSave;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator1> & lhs, const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_arm_toppra

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0311a789c31d9f89e270b2ec1d7d51f7";
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0311a789c31d9f89ULL;
  static const uint64_t static_value2 = 0xe270b2ec1d7d51f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_arm_toppra/ToppRa_srvRequest";
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] joint_configs_on_way \n"
"bool ifSave\n"
;
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_configs_on_way);
      stream.next(m.ifSave);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToppRa_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_arm_toppra::ToppRa_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_configs_on_way[]" << std::endl;
    for (size_t i = 0; i < v.joint_configs_on_way.size(); ++i)
    {
      s << indent << "  joint_configs_on_way[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_configs_on_way[i]);
    }
    s << indent << "ifSave: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ifSave);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVREQUEST_H
