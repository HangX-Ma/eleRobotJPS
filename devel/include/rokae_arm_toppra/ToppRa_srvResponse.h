// Generated by gencpp from file rokae_arm_toppra/ToppRa_srvResponse.msg
// DO NOT EDIT!


#ifndef ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVRESPONSE_H
#define ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_arm_toppra
{
template <class ContainerAllocator>
struct ToppRa_srvResponse_
{
  typedef ToppRa_srvResponse_<ContainerAllocator> Type;

  ToppRa_srvResponse_()
    : pos()
    , vel()
    , acc()
    , t()  {
    }
  ToppRa_srvResponse_(const ContainerAllocator& _alloc)
    : pos(_alloc)
    , vel(_alloc)
    , acc(_alloc)
    , t(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pos_type;
  _pos_type pos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _vel_type;
  _vel_type vel;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acc_type;
  _acc_type acc;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ToppRa_srvResponse_

typedef ::rokae_arm_toppra::ToppRa_srvResponse_<std::allocator<void> > ToppRa_srvResponse;

typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvResponse > ToppRa_srvResponsePtr;
typedef boost::shared_ptr< ::rokae_arm_toppra::ToppRa_srvResponse const> ToppRa_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator1> & lhs, const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.t == rhs.t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator1> & lhs, const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_arm_toppra

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "526eca1870e2912cc295f3206d28830b";
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x526eca1870e2912cULL;
  static const uint64_t static_value2 = 0xc295f3206d28830bULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_arm_toppra/ToppRa_srvResponse";
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] pos\n"
"float64[] vel\n"
"float64[] acc\n"
"float64[] t\n"
;
  }

  static const char* value(const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToppRa_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_arm_toppra::ToppRa_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "t[]" << std::endl;
    for (size_t i = 0; i < v.t.size(); ++i)
    {
      s << indent << "  t[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.t[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_ARM_TOPPRA_MESSAGE_TOPPRA_SRVRESPONSE_H
