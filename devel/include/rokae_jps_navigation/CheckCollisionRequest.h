// Generated by gencpp from file rokae_jps_navigation/CheckCollisionRequest.msg
// DO NOT EDIT!


#ifndef ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONREQUEST_H
#define ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace rokae_jps_navigation
{
template <class ContainerAllocator>
struct CheckCollisionRequest_
{
  typedef CheckCollisionRequest_<ContainerAllocator> Type;

  CheckCollisionRequest_()
    : path_pose()
    , prev_joints()
    , ifVerbose(false)  {
    }
  CheckCollisionRequest_(const ContainerAllocator& _alloc)
    : path_pose(_alloc)
    , prev_joints(_alloc)
    , ifVerbose(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _path_pose_type;
  _path_pose_type path_pose;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _prev_joints_type;
  _prev_joints_type prev_joints;

   typedef uint8_t _ifVerbose_type;
  _ifVerbose_type ifVerbose;





  typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CheckCollisionRequest_

typedef ::rokae_jps_navigation::CheckCollisionRequest_<std::allocator<void> > CheckCollisionRequest;

typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionRequest > CheckCollisionRequestPtr;
typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionRequest const> CheckCollisionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.path_pose == rhs.path_pose &&
    lhs.prev_joints == rhs.prev_joints &&
    lhs.ifVerbose == rhs.ifVerbose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_jps_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bd89d9349701f68069b0f63564cad46";
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bd89d9349701f68ULL;
  static const uint64_t static_value2 = 0x069b0f63564cad46ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_jps_navigation/CheckCollisionRequest";
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose path_pose\n"
"float32[] prev_joints\n"
"bool ifVerbose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_pose);
      stream.next(m.prev_joints);
      stream.next(m.ifVerbose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckCollisionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_jps_navigation::CheckCollisionRequest_<ContainerAllocator>& v)
  {
    s << indent << "path_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.path_pose);
    s << indent << "prev_joints[]" << std::endl;
    for (size_t i = 0; i < v.prev_joints.size(); ++i)
    {
      s << indent << "  prev_joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.prev_joints[i]);
    }
    s << indent << "ifVerbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ifVerbose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONREQUEST_H
