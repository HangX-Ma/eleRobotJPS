// Generated by gencpp from file rokae_jps_navigation/GotoRequest.msg
// DO NOT EDIT!


#ifndef ROKAE_JPS_NAVIGATION_MESSAGE_GOTOREQUEST_H
#define ROKAE_JPS_NAVIGATION_MESSAGE_GOTOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace rokae_jps_navigation
{
template <class ContainerAllocator>
struct GotoRequest_
{
  typedef GotoRequest_<ContainerAllocator> Type;

  GotoRequest_()
    : goal_pose()
    , ifback(false)  {
    }
  GotoRequest_(const ContainerAllocator& _alloc)
    : goal_pose(_alloc)
    , ifback(false)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef uint8_t _ifback_type;
  _ifback_type ifback;





  typedef boost::shared_ptr< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GotoRequest_

typedef ::rokae_jps_navigation::GotoRequest_<std::allocator<void> > GotoRequest;

typedef boost::shared_ptr< ::rokae_jps_navigation::GotoRequest > GotoRequestPtr;
typedef boost::shared_ptr< ::rokae_jps_navigation::GotoRequest const> GotoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_pose == rhs.goal_pose &&
    lhs.ifback == rhs.ifback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_jps_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62c5f8fdc5b9c61ae6bc9f992786c85d";
  }

  static const char* value(const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62c5f8fdc5b9c61aULL;
  static const uint64_t static_value2 = 0xe6bc9f992786c85dULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_jps_navigation/GotoRequest";
  }

  static const char* value(const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] goal_pose\n"
"bool ifback\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pose);
      stream.next(m.ifback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GotoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_jps_navigation::GotoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_jps_navigation::GotoRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_pose[]" << std::endl;
    for (size_t i = 0; i < v.goal_pose.size(); ++i)
    {
      s << indent << "  goal_pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.goal_pose[i]);
    }
    s << indent << "ifback: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ifback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_JPS_NAVIGATION_MESSAGE_GOTOREQUEST_H
