// Generated by gencpp from file rokae_jps_navigation/CheckCollisionResponse.msg
// DO NOT EDIT!


#ifndef ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONRESPONSE_H
#define ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_jps_navigation
{
template <class ContainerAllocator>
struct CheckCollisionResponse_
{
  typedef CheckCollisionResponse_<ContainerAllocator> Type;

  CheckCollisionResponse_()
    : isCollide(false)
    , getSolution(false)
    , curr_joints()  {
    }
  CheckCollisionResponse_(const ContainerAllocator& _alloc)
    : isCollide(false)
    , getSolution(false)
    , curr_joints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _isCollide_type;
  _isCollide_type isCollide;

   typedef uint8_t _getSolution_type;
  _getSolution_type getSolution;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _curr_joints_type;
  _curr_joints_type curr_joints;





  typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CheckCollisionResponse_

typedef ::rokae_jps_navigation::CheckCollisionResponse_<std::allocator<void> > CheckCollisionResponse;

typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionResponse > CheckCollisionResponsePtr;
typedef boost::shared_ptr< ::rokae_jps_navigation::CheckCollisionResponse const> CheckCollisionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.isCollide == rhs.isCollide &&
    lhs.getSolution == rhs.getSolution &&
    lhs.curr_joints == rhs.curr_joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_jps_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "249a06f30727d2046b37e953d9335a81";
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x249a06f30727d204ULL;
  static const uint64_t static_value2 = 0x6b37e953d9335a81ULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_jps_navigation/CheckCollisionResponse";
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isCollide\n"
"bool getSolution\n"
"float32[] curr_joints\n"
;
  }

  static const char* value(const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isCollide);
      stream.next(m.getSolution);
      stream.next(m.curr_joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CheckCollisionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_jps_navigation::CheckCollisionResponse_<ContainerAllocator>& v)
  {
    s << indent << "isCollide: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCollide);
    s << indent << "getSolution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.getSolution);
    s << indent << "curr_joints[]" << std::endl;
    for (size_t i = 0; i < v.curr_joints.size(); ++i)
    {
      s << indent << "  curr_joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.curr_joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_JPS_NAVIGATION_MESSAGE_CHECKCOLLISIONRESPONSE_H
