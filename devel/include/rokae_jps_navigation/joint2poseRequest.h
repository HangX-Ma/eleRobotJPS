// Generated by gencpp from file rokae_jps_navigation/joint2poseRequest.msg
// DO NOT EDIT!


#ifndef ROKAE_JPS_NAVIGATION_MESSAGE_JOINT2POSEREQUEST_H
#define ROKAE_JPS_NAVIGATION_MESSAGE_JOINT2POSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rokae_jps_navigation
{
template <class ContainerAllocator>
struct joint2poseRequest_
{
  typedef joint2poseRequest_<ContainerAllocator> Type;

  joint2poseRequest_()
    : joint0(0.0)
    , joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , ifVerbose(false)  {
    }
  joint2poseRequest_(const ContainerAllocator& _alloc)
    : joint0(0.0)
    , joint1(0.0)
    , joint2(0.0)
    , joint3(0.0)
    , joint4(0.0)
    , joint5(0.0)
    , ifVerbose(false)  {
  (void)_alloc;
    }



   typedef double _joint0_type;
  _joint0_type joint0;

   typedef double _joint1_type;
  _joint1_type joint1;

   typedef double _joint2_type;
  _joint2_type joint2;

   typedef double _joint3_type;
  _joint3_type joint3;

   typedef double _joint4_type;
  _joint4_type joint4;

   typedef double _joint5_type;
  _joint5_type joint5;

   typedef uint8_t _ifVerbose_type;
  _ifVerbose_type ifVerbose;





  typedef boost::shared_ptr< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct joint2poseRequest_

typedef ::rokae_jps_navigation::joint2poseRequest_<std::allocator<void> > joint2poseRequest;

typedef boost::shared_ptr< ::rokae_jps_navigation::joint2poseRequest > joint2poseRequestPtr;
typedef boost::shared_ptr< ::rokae_jps_navigation::joint2poseRequest const> joint2poseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint0 == rhs.joint0 &&
    lhs.joint1 == rhs.joint1 &&
    lhs.joint2 == rhs.joint2 &&
    lhs.joint3 == rhs.joint3 &&
    lhs.joint4 == rhs.joint4 &&
    lhs.joint5 == rhs.joint5 &&
    lhs.ifVerbose == rhs.ifVerbose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator1> & lhs, const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rokae_jps_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ed341ddbb4f864aa1eec399727b045c";
  }

  static const char* value(const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ed341ddbb4f864aULL;
  static const uint64_t static_value2 = 0xa1eec399727b045cULL;
};

template<class ContainerAllocator>
struct DataType< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rokae_jps_navigation/joint2poseRequest";
  }

  static const char* value(const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 joint0\n"
"float64 joint1\n"
"float64 joint2\n"
"float64 joint3\n"
"float64 joint4\n"
"float64 joint5\n"
"bool ifVerbose\n"
;
  }

  static const char* value(const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint0);
      stream.next(m.joint1);
      stream.next(m.joint2);
      stream.next(m.joint3);
      stream.next(m.joint4);
      stream.next(m.joint5);
      stream.next(m.ifVerbose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint2poseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rokae_jps_navigation::joint2poseRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint0: ";
    Printer<double>::stream(s, indent + "  ", v.joint0);
    s << indent << "joint1: ";
    Printer<double>::stream(s, indent + "  ", v.joint1);
    s << indent << "joint2: ";
    Printer<double>::stream(s, indent + "  ", v.joint2);
    s << indent << "joint3: ";
    Printer<double>::stream(s, indent + "  ", v.joint3);
    s << indent << "joint4: ";
    Printer<double>::stream(s, indent + "  ", v.joint4);
    s << indent << "joint5: ";
    Printer<double>::stream(s, indent + "  ", v.joint5);
    s << indent << "ifVerbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ifVerbose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROKAE_JPS_NAVIGATION_MESSAGE_JOINT2POSEREQUEST_H
