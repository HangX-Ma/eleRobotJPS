/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-04-05 11:19:30.299202
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.095)*x2);
x13=((1.0)*x5);
x14=((0.095)*x4);
x15=((1.0)*x0);
x16=((0.13)*x5);
x17=((0.24)*x2);
x18=((0.13)*x11);
x19=((1.0)*x2);
x20=((1.0)*x4);
x21=((0.13)*x6);
x22=((0.24)*x4);
x23=((1.0)*x11);
x24=((1.0)*x6);
x25=(x10*x9);
x26=(x1*x10);
x27=((-1.0)*x5);
x28=(x10*x3);
x29=(x0*x3);
x30=(x0*x1);
x31=((-1.0)*x6);
x32=(x20*x3);
x33=(x1*x15*x2);
x34=(x19*x26);
x35=((((-1.0)*x32))+((x1*x19)));
x36=(((x19*x3))+((x1*x20)));
x37=((-1.0)*x36);
x38=(((x29*x4))+(((-1.0)*x33)));
x39=((((-1.0)*x34))+((x28*x4)));
x40=(x37*x6);
IkReal x49=((1.0)*x15);
x41=((((-1.0)*x2*x3*x49))+(((-1.0)*x1*x4*x49)));
x42=((((-1.0)*x19*x28))+(((-1.0)*x20*x26)));
x43=(((x35*x6))+((x36*x5)));
x44=(((x5*((x33+(((-1.0)*x15*x3*x4))))))+((x41*x6)));
x45=(((x5*((x34+(((-1.0)*x20*x28))))))+((x42*x6)));
x46=((((-1.0)*x24*x38))+(((-1.0)*x13*x41)));
x47=((((-1.0)*x24*x39))+(((-1.0)*x13*x42)));
x48=(x11*x47);
eerot[0]=(((x7*(((((-1.0)*x25))+((x11*((((x27*x41))+((x31*x38))))))))))+((x44*x8)));
eerot[1]=(((x8*(((((1.0)*x25))+(((-1.0)*x23*x46))))))+((x44*x7)));
eerot[2]=(((x46*x9))+((x10*x11)));
eetrans[0]=((((0.265)*x30))+((x6*((((x14*x30))+((x12*x29))))))+(((-0.11)*x10))+((x5*(((((-1.0)*x12*x30))+((x14*x29))))))+((x22*x30))+((x9*(((((-1.0)*x16*x41))+(((-1.0)*x21*x38))))))+((x17*x29))+((x10*x18)));
eerot[3]=(((x45*x8))+((x7*((((x0*x9))+x48)))));
eerot[4]=(((x45*x7))+((x8*(((((-1.0)*x15*x9))+(((-1.0)*x23*x47)))))));
eerot[5]=(((x47*x9))+(((-1.0)*x11*x15)));
eetrans[1]=(((x22*x26))+((x5*(((((-1.0)*x12*x26))+((x14*x28))))))+(((-1.0)*x0*x18))+((x17*x28))+((x9*(((((-1.0)*x16*x42))+(((-1.0)*x21*x39))))))+(((0.265)*x26))+((x6*((((x14*x26))+((x12*x28))))))+(((0.11)*x0)));
eerot[6]=(((x43*x8))+((x11*x7*((((x27*x35))+((x31*x37)))))));
eerot[7]=(((x11*x8*((((x35*x5))+x40))))+((x43*x7)));
eerot[8]=(x9*(((((-1.0)*x24*x37))+(((-1.0)*x13*x35)))));
IkReal x50=((1.0)*x12);
IkReal x51=((1.0)*x1);
eetrans[2]=((0.11)+((x9*(((((-1.0)*x16*x35))+(((-1.0)*x21*x37))))))+(((0.265)*x3))+(((-1.0)*x17*x51))+((x22*x3))+((x6*(((((-1.0)*x1*x50))+((x14*x3))))))+((x5*(((((-1.0)*x14*x51))+(((-1.0)*x3*x50)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.13)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.13)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.11)+(((-0.13)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.19)*npx);
IkReal x56=((0.19)*npy);
IkReal x57=((0.095)*r20);
IkReal x58=((0.095)*r22);
IkReal x59=((-0.095)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.095)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*rxp2_2);
IkReal x66=((-1.0)*npx);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x65;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-0.095)*r22);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x65;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x58;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=((-1.0)*npy);
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=r21;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=rxp1_2;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=npy;
matrixinvcoeffs[122]=x63;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x64;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npx;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=x60;
matrixinvcoeffs[140]=x57;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x61;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x66;
matrixinvcoeffs[154]=r20;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x57;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp0_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=((-1.0)*r22);
matrixinvcoeffs[172]=x58;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x65;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=((-1.0)*npz);
matrixinvcoeffs[186]=r22;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x58;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=r21;
matrixinvcoeffs[197]=npy;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x64;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=r21;
matrixinvcoeffs[215]=npy;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x64;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((0.095)*r21);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x60;
matrixinvcoeffs[229]=x66;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp0_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x57;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x60;
matrixinvcoeffs[247]=x66;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp0_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_10=matrixinvcoeffs[165], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_10=matrixinvcoeffs[173], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_10=matrixinvcoeffs[175], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pz*pz;
IkReal x68=pp*pp;
IkReal x69=(gclwh8_8*rxp0_2);
IkReal x70=(gclwh8_8*r20);
IkReal x71=(gclwh13_13*r21);
IkReal x72=((0.1007)*rxp1_2);
IkReal x73=((0.0209)*rxp2_2);
IkReal x74=(npy*pz);
IkReal x75=((4.0)*gclwh12_11);
IkReal x76=(pp*r20);
IkReal x77=(gclwh6_14*r21);
IkReal x78=((0.00911525)*r20);
IkReal x79=(gclwh5_0*r22);
IkReal x80=((0.009025)*pz);
IkReal x81=(npx*pz);
IkReal x82=((0.0912)*rxp1_2);
IkReal x83=((0.38)*rxp0_2);
IkReal x84=(gclwh9_9*rxp0_2);
IkReal x85=(gclwh11_0*rxp2_2);
IkReal x86=(npz*pz);
IkReal x87=((0.22)*gclwh10_14);
IkReal x88=((2.0)*gclwh4_11);
IkReal x89=(gclwh11_10*r22);
IkReal x90=((0.19)*rxp0_2);
IkReal x91=((0.01805)*r20);
IkReal x92=((2.0)*pp);
IkReal x93=(pp*r22);
IkReal x94=(gclwh14_2*r20);
IkReal x95=((0.19)*rxp2_2);
IkReal x96=((2.0)*gclwh15_10);
IkReal x97=(gclwh12_11*r21);
IkReal x98=((1.0)*pz);
IkReal x99=((4.0)*gclwh14_11);
IkReal x100=(gclwh9_0*rxp0_2);
IkReal x101=(gclwh12_2*r21);
IkReal x102=((0.0209)*rxp1_2);
IkReal x103=((0.505)*pp);
IkReal x104=((0.0912)*rxp0_2);
IkReal x105=((0.38)*rxp2_2);
IkReal x106=((0.1919)*rxp2_2);
IkReal x107=((0.19)*rxp1_2);
IkReal x108=((0.1007)*rxp2_2);
IkReal x109=((0.01805)*r22);
IkReal x110=((0.0912)*rxp2_2);
IkReal x111=((0.00478325)*r21);
IkReal x112=(gclwh6_12*rxp1_2);
IkReal x113=((0.38)*rxp1_2);
IkReal x114=(gclwh12_12*r21);
IkReal x115=(pp*r21);
IkReal x116=((0.004332)*r22);
IkReal x117=(gclwh13_0*r21);
IkReal x118=((0.0209)*rxp0_2);
IkReal x119=(gclwh4_11*r22);
IkReal x120=((0.00099275)*r21);
IkReal x121=(gclwh5_1*r22);
IkReal x122=(gclwh9_15*r20);
IkReal x123=(gclwh7_0*rxp1_2);
IkReal x124=((0.049039)*rxp2_2);
IkReal x125=((0.025)*pp);
IkReal x126=((0.00099275)*r20);
IkReal x127=(gclwh6_2*rxp1_2);
IkReal x128=((0.009025)*r20);
IkReal x129=((0.0418)*rxp2_2);
IkReal x130=(gclwh8_2*rxp0_2);
IkReal x131=((0.00099275)*r22);
IkReal x132=(gclwh14_12*r20);
IkReal x133=(gclwh9_1*rxp0_2);
IkReal x134=(gclwh4_12*r22);
IkReal x135=((0.00478325)*r22);
IkReal x136=(gclwh10_2*rxp2_2);
IkReal x137=(gclwh13_10*r21);
IkReal x138=((0.22)*gclwh7_15);
IkReal x139=(gclwh6_11*r21);
IkReal x140=((0.22)*gclwh11_15);
IkReal x141=(gclwh5_10*r22);
IkReal x142=(gclwh10_8*rxp2_2);
IkReal x143=(gclwh15_0*r20);
IkReal x144=((4.0)*gclwh4_11);
IkReal x145=((0.000703)*rxp1_2);
IkReal x146=(gclwh4_3*r22);
IkReal x147=(gclwh11_9*rxp2_2);
IkReal x148=((0.22)*gclwh8_14);
IkReal x149=((0.004332)*r21);
IkReal x150=((0.48)*pp);
IkReal x151=((0.000703)*rxp2_2);
IkReal x152=(gclwh4_2*r22);
IkReal x153=((0.0019855)*r22);
IkReal x154=(gclwh6_14*rxp1_2);
IkReal x155=(gclwh8_12*rxp0_2);
IkReal x156=((1.01)*pp);
IkReal x157=(gclwh8_14*rxp0_2);
IkReal x158=((0.22)*gclwh9_15);
IkReal x159=(gclwh8_3*rxp0_2);
IkReal x160=(gclwh7_10*r21);
IkReal x161=((0.004332)*r20);
IkReal x162=(gclwh6_8*rxp1_2);
IkReal x163=(gclwh7_9*rxp1_2);
IkReal x164=((0.049039)*rxp1_2);
IkReal x165=((2.0)*gclwh14_11);
IkReal x166=(gclwh10_14*x73);
IkReal x167=(gclwh10_5*x73);
IkReal x168=(gclwh4_5*x131);
IkReal x169=(gclwh8_14*x118);
IkReal x170=(gclwh12_5*x120);
IkReal x171=(gclwh8_5*x118);
IkReal x172=(gclwh6_5*x102);
IkReal x173=(gclwh6_14*x102);
IkReal x174=(gclwh14_5*x126);
IkReal x175=(gclwh6_11*x107);
IkReal x176=(gclwh14_11*x128);
IkReal x177=((0.009025)*x119);
IkReal x178=(gclwh10_11*x95);
IkReal x179=(gclwh8_11*x90);
IkReal x180=((0.009025)*x97);
IkReal x181=(gclwh9_10*x90);
IkReal x182=((0.009025)*x137);
IkReal x183=(gclwh11_10*x95);
IkReal x184=((0.009025)*x141);
IkReal x185=(gclwh7_10*x107);
IkReal x186=(gclwh15_10*x128);
IkReal x187=(gclwh9_15*x118);
IkReal x188=(gclwh11_7*x73);
IkReal x189=(gclwh11_15*x73);
IkReal x190=(gclwh9_7*x118);
IkReal x191=(gclwh13_7*x120);
IkReal x192=(gclwh5_7*x131);
IkReal x193=(gclwh7_15*x102);
IkReal x194=(gclwh7_7*x102);
IkReal x195=(gclwh15_7*x126);
IkReal x196=(gclwh10_14*x131);
IkReal x197=(gclwh14_5*x118);
IkReal x198=(gclwh8_14*x126);
IkReal x199=(gclwh8_5*x126);
IkReal x200=(gclwh10_5*x131);
IkReal x201=((0.00099275)*x77);
IkReal x202=(gclwh4_5*x73);
IkReal x203=(gclwh12_5*x102);
IkReal x204=(gclwh6_5*x120);
IkReal x205=(gclwh7_7*x120);
IkReal x206=(gclwh7_15*x120);
IkReal x207=(gclwh5_7*x73);
IkReal x208=(gclwh13_7*x102);
IkReal x209=(gclwh15_7*x118);
IkReal x210=(gclwh9_7*x126);
IkReal x211=(gclwh11_7*x131);
IkReal x212=((0.00099275)*x122);
IkReal x213=(gclwh11_15*x131);
IkReal x214=(gclwh10_11*x105);
IkReal x215=((0.01805)*x97);
IkReal x216=(gclwh8_11*x83);
IkReal x217=(gclwh4_11*x109);
IkReal x218=(gclwh6_11*x113);
IkReal x219=(gclwh14_11*x91);
IkReal x220=((0.0418)*x154);
IkReal x221=((0.01805)*x137);
IkReal x222=(gclwh9_10*x83);
IkReal x223=(gclwh11_10*x105);
IkReal x224=(gclwh5_10*x109);
IkReal x225=(gclwh7_10*x113);
IkReal x226=(gclwh15_10*x91);
IkReal x227=((0.48)*x93);
IkReal x228=(gclwh13_0*x115);
IkReal x229=((0.11)*gclwh4_5*x93);
IkReal x230=((0.11)*gclwh12_5*x115);
IkReal x231=((0.22)*gclwh14_5*x81);
IkReal x232=((0.22)*gclwh4_5*x86);
IkReal x233=((0.11)*gclwh14_5*x76);
IkReal x234=((0.22)*gclwh12_5*x74);
IkReal x235=(gclwh14_2*pz*x76);
IkReal x236=(gclwh10_3*pp*x95);
IkReal x237=(x86*x88);
IkReal x238=(gclwh8_3*pp*x90);
IkReal x239=(x146*x68);
IkReal x240=(x80*x94);
IkReal x241=(gclwh6_2*pz*x107);
IkReal x242=((2.0)*gclwh12_11*x74);
IkReal x243=(gclwh8_2*pz*x90);
IkReal x244=(x165*x81);
IkReal x245=(gclwh6_3*pp*x107);
IkReal x246=(gclwh10_2*pz*x95);
IkReal x247=(x101*x80);
IkReal x248=(x152*x80);
IkReal x249=(gclwh15_0*pz*x76);
IkReal x250=(gclwh9_1*pp*x90);
IkReal x251=(gclwh7_0*pz*x107);
IkReal x252=(gclwh11_1*pp*x95);
IkReal x253=(x81*x96);
IkReal x254=(x143*x80);
IkReal x255=(x121*x68);
IkReal x256=((0.19)*pz*x85);
IkReal x257=(gclwh9_0*pz*x90);
IkReal x258=(x117*x80);
IkReal x259=(x79*x80);
IkReal x260=((2.0)*gclwh5_10*x86);
IkReal x261=((2.0)*gclwh13_10*x74);
IkReal x262=(gclwh7_1*pp*x107);
IkReal x263=((0.11)*gclwh5_7*x93);
IkReal x264=((0.11)*gclwh13_7*x115);
IkReal x265=((0.22)*gclwh15_7*x81);
IkReal x266=((0.22)*gclwh5_7*x86);
IkReal x267=((0.22)*gclwh13_7*x74);
IkReal x268=((0.11)*gclwh15_7*x76);
IkReal x269=((0.11)*gclwh8_14*x76);
IkReal x270=((0.11)*gclwh10_5*x93);
IkReal x271=((0.22)*gclwh6_5*x74);
IkReal x272=((0.22)*gclwh6_14*x74);
IkReal x273=((0.11)*gclwh10_14*x93);
IkReal x274=((0.11)*gclwh8_5*x76);
IkReal x275=((0.11)*gclwh6_5*x115);
IkReal x276=((0.22)*gclwh8_5*x81);
IkReal x277=(x148*x81);
IkReal x278=((0.22)*gclwh10_5*x86);
IkReal x279=(x86*x87);
IkReal x280=((0.11)*pp*x77);
IkReal x281=((0.11)*gclwh7_15*x115);
IkReal x282=((0.11)*gclwh7_7*x115);
IkReal x283=(x140*x86);
IkReal x284=((0.22)*gclwh9_7*x81);
IkReal x285=(x158*x81);
IkReal x286=((0.22)*gclwh11_7*x86);
IkReal x287=(x138*x74);
IkReal x288=((0.22)*gclwh7_7*x74);
IkReal x289=((0.11)*gclwh11_7*x93);
IkReal x290=((0.11)*gclwh9_7*x76);
IkReal x291=((0.11)*gclwh9_15*x76);
IkReal x292=((0.11)*gclwh11_15*x93);
IkReal x293=(x88*x93);
IkReal x294=(x92*x97);
IkReal x295=(x81*x99);
IkReal x296=(x165*x76);
IkReal x297=(x74*x75);
IkReal x298=(x144*x86);
IkReal x299=(x137*x92);
IkReal x300=((4.0)*gclwh15_10*x81);
IkReal x301=(x141*x92);
IkReal x302=(x76*x96);
IkReal x303=((4.0)*gclwh5_10*x86);
IkReal x304=((4.0)*gclwh13_10*x74);
IkReal x305=((2.0)*npz*x67);
IkReal x306=((2.0)*npx*x67);
IkReal x307=((2.0)*npy*x67);
IkReal x308=(gclwh12_2*x307);
IkReal x309=(gclwh4_2*x305);
IkReal x310=(gclwh4_3*x86*x92);
IkReal x311=(pp*x101*x98);
IkReal x312=(gclwh4_2*x93*x98);
IkReal x313=(gclwh14_2*x306);
IkReal x314=(gclwh5_0*x305);
IkReal x315=(gclwh13_0*x307);
IkReal x316=(gclwh5_1*x86*x92);
IkReal x317=(pp*x79*x98);
IkReal x318=(gclwh15_0*x306);
IkReal x319=(x228*x98);
IkReal x320=(((gclwh10_14*x129))+(((0.0418)*x157)));
IkReal x321=(x169+x166);
IkReal x322=(x187+x189);
IkReal x323=(x320+(((-1.0)*x220)));
IkReal x324=((((-1.0)*gclwh11_15*x129))+(((-0.0418)*gclwh9_15*rxp0_2))+(((0.0418)*gclwh7_15*rxp1_2)));
IkReal x325=(x175+x176+x237+x242);
IkReal x326=(x185+x186+x261+x260);
IkReal x327=(x201+x277+x279+x280);
IkReal x328=(x206+x285+x283+x281);
IkReal x329=(x179+x178+x177+x180+x244);
IkReal x330=(x184+x181+x182+x183+x253);
IkReal x331=(x172+x174+x232+x233+x234);
IkReal x332=(x304+x302+x303+x225+x226);
IkReal x333=(x212+x213+x291+x292+x287);
IkReal x334=(x198+x196+x269+x272+x273);
IkReal x335=(x195+x194+x267+x266+x268);
IkReal x336=(x218+x219+x298+x296+x297);
IkReal x337=(x199+x197+x200+x274+x270+x271);
IkReal x338=(x204+x203+x202+x276+x275+x278);
IkReal x339=(x207+x205+x208+x286+x284+x282);
IkReal x340=(x210+x211+x209+x290+x289+x288);
IkReal x341=(x214+x215+x216+x217+x293+x294+x295);
IkReal x342=(x192+x191+x190+x188+x265+x264+x263);
IkReal x343=(x171+x170+x168+x167+x229+x230+x231);
IkReal x344=(x300+x301+x221+x223+x222+x224+x299);
IkReal x345=(x308+x309+x238+x239+x236+x235+x241+x240);
IkReal x346=(x315+x314+x254+x255+x250+x251+x252+x249);
IkReal x347=(x311+x310+x313+x312+x243+x247+x246+x245+x248);
IkReal x348=(x319+x318+x317+x316+x258+x259+x256+x257+x262);
op[0]=((0.1111)+(((-1.0)*x321))+x173+x343+(((-1.0)*x331)));
op[1]=((((-0.0779)*x142))+(((-1.01)*gclwh4_2*x86))+(((0.0779)*x162))+((gclwh6_3*x164))+(((0.505)*gclwh4_2*x93))+(((-0.09595)*x127))+(((0.004557625)*x101))+(((-1.01)*gclwh12_2*x74))+((pp*x97))+(((1.01)*gclwh14_2*x81))+(((-1.0)*x325))+(((-0.0779)*x69))+(((-1.0)*gclwh10_3*x124))+x329+x345+((gclwh4_11*x93))+(((-0.049039)*x159))+(((-0.249075)*gclwh4_3*x93))+(((0.004557625)*x152))+(((-0.505)*gclwh14_2*x76))+(((-0.004557625)*x94))+(((0.09595)*x130))+(((0.09595)*x136))+(((-1.0)*x347))+(((0.5162)*gclwh4_3*x86))+(((-0.0023293525)*x146))+((x101*x103))+(((-1.0)*gclwh14_11*x76)));
op[2]=((((0.96)*gclwh14_12*x81))+((gclwh4_12*x227))+((gclwh8_12*x104))+(((-0.1007)*x69))+((gclwh10_12*x110))+(((0.004332)*x114))+x341+(((-0.96)*gclwh4_12*x86))+(((-1.0)*gclwh10_8*x108))+(((-0.96)*gclwh12_12*x74))+((gclwh4_12*x116))+(((-1.0)*x336))+(((-0.48)*gclwh14_12*x76))+((gclwh6_8*x72))+((x114*x150))+(((-1.0)*gclwh6_12*x82))+(((-0.004332)*x132)));
op[3]=x323;
op[4]=((0.0055)+(((-1.0)*x173))+x321+x343+(((-1.0)*x331)));
op[5]=(((x101*x125))+(((0.0228)*x142))+(((-1.0)*pp*x97))+(((-1.0)*gclwh4_11*x93))+(((0.0228)*x69))+(((-1.0)*x329))+((gclwh6_3*x145))+(((-0.000225625)*x94))+(((-0.0228)*x162))+x325+x345+(((0.00475)*x130))+(((0.00475)*x136))+(((-0.000703)*x159))+((gclwh14_11*x76))+(((0.000225625)*x152))+(((-0.025)*gclwh14_2*x76))+(((-0.00475)*x127))+(((0.0074)*gclwh4_3*x86))+(((-3.33925e-5)*x146))+(((0.005325)*gclwh4_3*x93))+(((0.025)*gclwh4_2*x93))+(((-1.0)*x347))+(((-1.0)*gclwh10_3*x151))+(((-0.05)*gclwh12_2*x74))+(((0.000225625)*x101))+(((-0.05)*gclwh4_2*x86))+(((0.05)*gclwh14_2*x81)));
op[6]=((((-0.114)*x163))+(((0.114)*x84))+(((-0.505)*gclwh15_0*x76))+(((-1.0)*gclwh5_10*x93))+(((-1.0)*gclwh13_10*x115))+(((-0.09595)*x123))+(((0.004557625)*x117))+((x103*x117))+(((0.114)*x147))+(((1.01)*gclwh15_0*x81))+x326+x346+(((0.09595)*x85))+(((-0.249075)*gclwh5_1*x93))+(((0.5162)*gclwh5_1*x86))+(((-1.0)*x330))+(((-0.0023293525)*x121))+((gclwh15_10*x76))+(((-1.0)*x348))+(((0.09595)*x100))+(((-0.004557625)*x143))+(((-1.0)*gclwh11_1*x124))+((gclwh7_1*x164))+(((-1.01)*gclwh5_0*x86))+((x103*x79))+(((0.004557625)*x79))+(((-0.049039)*x133))+(((-1.01)*gclwh13_0*x74)));
op[7]=((0.1111)+(((-1.0)*x322))+x193+x342+(((-1.0)*x335)));
op[8]=x324;
op[9]=(((gclwh7_9*x72))+(((-1.0)*gclwh15_13*x161))+(((-0.96)*gclwh5_13*x86))+(((-0.96)*gclwh13_13*x74))+((gclwh5_13*x116))+(((0.004332)*x71))+((gclwh9_13*x104))+(((-0.48)*gclwh15_13*x76))+x344+((x150*x71))+(((-1.0)*gclwh7_13*x82))+((gclwh5_13*x227))+(((-1.0)*x332))+(((-0.1007)*x84))+(((0.96)*gclwh15_13*x81))+(((-1.0)*gclwh11_9*x108))+((gclwh11_13*x110)));
op[10]=(((gclwh5_10*x93))+(((-3.33925e-5)*x121))+(((0.0074)*gclwh5_1*x86))+(((-1.0)*gclwh11_1*x151))+(((-1.0)*x326))+(((-0.05)*gclwh5_0*x86))+x330+x346+((gclwh13_10*x115))+(((0.0133)*x84))+(((-0.000225625)*x143))+((x125*x79))+(((-0.00475)*x123))+(((-0.0133)*x163))+(((0.025)*x228))+(((-0.05)*gclwh13_0*x74))+(((0.00475)*x100))+(((0.005325)*gclwh5_1*x93))+(((0.000225625)*x79))+(((-1.0)*x348))+(((-0.025)*gclwh15_0*x76))+(((0.0133)*x147))+(((0.000225625)*x117))+(((-1.0)*gclwh15_10*x76))+(((0.05)*gclwh15_0*x81))+(((-0.000703)*x133))+(((0.00475)*x85))+((gclwh7_1*x145)));
op[11]=((0.0055)+(((-1.0)*x193))+x322+x342+(((-1.0)*x335)));
op[12]=(x337+x327+(((-1.0)*x338))+(((-1.0)*x334)));
op[13]=((-0.242925)+(((0.82)*gclwh10_8*npz*pz))+(((-1.01)*gclwh8_2*npx*pz))+(((-0.41)*gclwh8_8*pp*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.09595)*gclwh14_2*rxp0_2))+(((0.5162)*gclwh8_3*npx*pz))+(((0.505)*gclwh3_2*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((-0.0023293525)*gclwh8_3*r20))+(((0.19)*pz))+(((0.249075)*gclwh6_3*pp*r21))+(((-1.01)*gclwh1_2*npx*pz))+(((-2.0)*gclwh8_11*npx*pz))+(((0.004557625)*gclwh8_2*r20))+(((-0.82)*gclwh6_8*npy*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.267125)*gclwh3_3*pp*r21))+(((0.41)*gclwh6_8*pp*r21))+(((0.82)*gclwh8_8*npx*pz))+((gclwh6_2*pp*pz*r21))+(((0.505)*gclwh10_2*pp*r22))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.004557625)*gclwh3_2*r21))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((2.0)*gclwh6_11*npy*pz))+(((-0.004557625)*gclwh1_2*r20))+(((0.505)*gclwh8_2*pp*r20))+(((0.009025)*gclwh3_2*pz*r21))+((gclwh8_11*pp*r20))+(((-0.0023293525)*gclwh10_3*r22))+(((-0.249075)*gclwh10_3*pp*r22))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((0.5162)*gclwh1_3*npx*pz))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.19)*gclwh14_11*rxp0_2))+((gclwh10_3*r22*(pp*pp)))+(((-0.5162)*gclwh6_3*npy*pz))+((gclwh3_3*r21*(pp*pp)))+(((-0.09595)*gclwh4_2*rxp2_2))+((gclwh1_3*r20*(pp*pp)))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((-0.267125)*gclwh1_3*pp*r20))+(((0.0023293525)*gclwh1_3*r20))+(((0.5162)*gclwh3_3*npy*pz))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((-1.01)*gclwh3_2*npy*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.505)*gclwh1_2*pp*r20))+(((-1.01)*gclwh10_2*npz*pz))+(((-0.249075)*gclwh8_3*pp*r20))+(((0.049039)*gclwh4_3*rxp2_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-2.0)*gclwh10_11*npz*pz))+(((0.0023293525)*gclwh6_3*r21))+(((0.009025)*gclwh10_11*r22))+(((-0.00370025)*gclwh10_8*r22))+(((-0.41)*gclwh10_8*pp*r22))+(((0.0023293525)*gclwh3_3*r21))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((-0.009025)*gclwh10_2*pz*r22))+(((-0.505)*gclwh6_2*pp*r21))+(((-0.004557625)*gclwh6_2*r21))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((0.5162)*gclwh10_3*npz*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+(((-0.00370025)*gclwh8_8*r20))+(((-0.09595)*gclwh12_2*rxp1_2))+((gclwh10_11*pp*r22))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.004557625)*gclwh10_2*r22))+(((0.00370025)*gclwh6_8*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((1.01)*gclwh6_2*npy*pz))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp))));
op[14]=((-0.00105)+(((1.06)*gclwh10_8*x86))+(((-1.0)*gclwh6_12*x149))+((gclwh10_11*r22*x92))+(((4.0)*gclwh6_11*x74))+(((-0.00478325)*x70))+(((-1.0)*gclwh4_11*x105))+((gclwh10_12*x116))+(((-4.0)*gclwh8_11*x81))+(((2.0)*gclwh8_11*x76))+(((-0.48)*gclwh6_12*x115))+(((-1.0)*gclwh12_11*x113))+((gclwh10_11*x109))+(((-1.0)*x139*x92))+(((-1.0)*gclwh4_12*x110))+((gclwh6_8*x111))+(((0.53)*gclwh6_8*x115))+(((-4.0)*gclwh10_11*x86))+(((-0.53)*gclwh10_8*x93))+((gclwh14_11*x83))+(((-1.0)*gclwh12_12*x82))+((gclwh10_12*x227))+(((-0.53)*pp*x70))+((gclwh8_12*x161))+(((-1.06)*gclwh6_8*x74))+(((1.06)*gclwh8_8*x81))+(((-0.01805)*x139))+((gclwh8_11*x91))+(((-0.96)*gclwh10_12*x86))+((gclwh14_12*x104))+(((-1.0)*gclwh10_8*x135))+(((0.48)*gclwh8_12*x76))+(((-0.96)*gclwh8_12*x81))+(((0.96)*gclwh6_12*x74)));
op[15]=(((x87*x93))+((gclwh10_14*x153))+(((0.0019855)*gclwh8_14*r20))+(((-0.44)*gclwh8_14*x81))+(((-0.44)*gclwh10_14*x86))+(((-0.0019855)*x77))+(((0.44)*gclwh6_14*x74))+(((-0.22)*pp*x77))+((x148*x76)));
op[16]=((((-1.0)*x327))+x337+x334+(((-1.0)*x338)));
op[17]=((-0.011475)+(((-0.24)*gclwh10_8*npz*pz))+(((0.001083)*gclwh10_8*r22))+(((-0.19)*gclwh14_11*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((-0.05)*gclwh10_2*npz*pz))+(((-3.33925e-5)*gclwh10_3*r22))+(((-0.05)*gclwh3_2*npy*pz))+(((-0.12)*gclwh6_8*pp*r21))+(((-0.00475)*gclwh4_2*rxp2_2))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.19)*gclwh4_11*rxp2_2))+(((0.000703)*gclwh4_3*rxp2_2))+(((-1.0)*gclwh8_11*pp*r20))+(((-3.33925e-5)*gclwh8_3*r20))+(((0.000225625)*gclwh10_2*r22))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.00475)*gclwh14_2*rxp0_2))+(((0.001083)*gclwh8_8*r20))+((gclwh6_2*pp*pz*r21))+(((0.0074)*gclwh10_3*npz*pz))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.001083)*gclwh6_8*r21))+(((-0.009025)*gclwh8_11*r20))+(((0.025)*gclwh10_2*pp*r22))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((-0.05)*gclwh1_2*npx*pz))+(((0.005325)*gclwh10_3*pp*r22))+(((0.009025)*gclwh3_2*pz*r21))+(((-0.0074)*gclwh6_3*npy*pz))+(((0.0074)*gclwh1_3*npx*pz))+(((0.24)*gclwh6_8*npy*pz))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.005325)*gclwh6_3*pp*r21))+(((-0.000225625)*gclwh3_2*r21))+(((2.0)*gclwh10_11*npz*pz))+(((0.12)*gclwh10_8*pp*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.0074)*gclwh8_3*npx*pz))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((0.12)*gclwh8_8*pp*r20))+(((3.33925e-5)*gclwh3_3*r21))+(((0.025)*gclwh3_2*pp*r21))+(((-0.000225625)*gclwh6_2*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.005325)*gclwh8_3*pp*r20))+(((-0.012725)*gclwh3_3*pp*r21))+(((0.000225625)*gclwh8_2*r20))+(((0.19)*gclwh12_11*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.025)*gclwh6_2*pp*r21))+(((-2.0)*gclwh6_11*npy*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.00475)*gclwh12_2*rxp1_2))+(((-0.000225625)*gclwh1_2*r20))+(((0.0074)*gclwh3_3*npy*pz))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.009025)*gclwh10_2*pz*r22))+(((0.05)*gclwh6_2*npy*pz))+(((3.33925e-5)*gclwh6_3*r21))+(((-0.012725)*gclwh1_3*pp*r20))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((3.33925e-5)*gclwh1_3*r20))+(((0.009025)*gclwh6_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.025)*gclwh8_2*pp*r20))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.009025)*gclwh6_11*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((-0.05)*gclwh8_2*npx*pz))+((gclwh8_3*r20*(pp*pp)))+(((-0.24)*gclwh8_8*npx*pz))+(((0.025)*gclwh1_2*pp*r20)));
op[18]=((0.242925)+(((0.19)*gclwh15_0*pz*rxp0_2))+(((1.2)*gclwh11_9*npz*pz))+(((-0.005415)*gclwh11_9*r22))+(((-1.01)*gclwh0_0*npx*pz))+(((-0.19)*gclwh5_10*rxp2_2))+(((-0.09595)*gclwh15_0*rxp0_2))+(((0.009025)*gclwh11_10*r22))+(((0.19)*pz))+(((1.01)*gclwh11_0*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.505)*gclwh7_0*pp*r21))+(((0.005415)*gclwh7_9*r21))+(((-2.0)*gclwh11_10*npz*pz))+(((0.249075)*gclwh11_1*pp*r22))+(((0.5162)*gclwh0_1*npx*pz))+((gclwh7_1*r21*(pp*pp)))+(((0.09595)*gclwh5_0*rxp2_2))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.0023293525)*gclwh2_1*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.505)*gclwh11_0*pp*r22))+(((-1.2)*gclwh7_9*npy*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.004557625)*gclwh9_0*r20))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0023293525)*gclwh7_1*r21))+(((-1.0)*gclwh7_10*pp*r21))+(((-0.6)*gclwh11_9*pp*r22))+(((-0.5162)*gclwh9_1*npx*pz))+(((0.009025)*gclwh0_0*pz*r20))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((0.505)*gclwh2_0*pp*r21))+(((-0.005415)*gclwh9_9*r20))+(((-0.267125)*gclwh2_1*pp*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.6)*gclwh9_9*pp*r20))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.267125)*gclwh0_1*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.004557625)*gclwh7_0*r21))+(((0.5162)*gclwh7_1*npy*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-1.01)*gclwh7_0*npy*pz))+(((0.0023293525)*gclwh11_1*r22))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((-0.505)*gclwh9_0*pp*r20))+(((-0.249075)*gclwh7_1*pp*r21))+(((0.0023293525)*gclwh0_1*r20))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((0.5162)*gclwh2_1*npy*pz))+(((0.09595)*gclwh13_0*rxp1_2))+(((-0.004557625)*gclwh0_0*r20))+(((0.0023293525)*gclwh9_1*r20))+(((0.19)*gclwh15_10*rxp0_2))+(((-0.009025)*gclwh7_10*r21))+(((1.01)*gclwh9_0*npx*pz))+(((1.2)*gclwh9_9*npx*pz))+(((2.0)*gclwh7_10*npy*pz))+(((-0.5162)*gclwh11_1*npz*pz))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-1.01)*gclwh2_0*npy*pz))+(((0.19)*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.004557625)*gclwh11_0*r22))+(((-2.0)*gclwh9_10*npx*pz))+(((0.6)*gclwh7_9*pp*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.004557625)*gclwh2_0*r21))+((gclwh0_1*r20*(pp*pp)))+(((-0.049039)*gclwh5_1*rxp2_2))+((gclwh9_0*pp*pz*r20))+(((0.249075)*gclwh9_1*pp*r20))+(((0.505)*gclwh0_0*pp*r20)));
op[19]=((((-1.0)*x328))+x339+x333+(((-1.0)*x340)));
op[20]=(((x158*x76))+(((-1.0)*x115*x138))+(((0.0019855)*x122))+(((-0.44)*gclwh9_15*x81))+((gclwh11_15*x153))+(((0.44)*gclwh7_15*x74))+((x140*x93))+(((-0.0019855)*gclwh7_15*r21))+(((-0.44)*gclwh11_15*x86)));
op[21]=((-0.00105)+(((0.96)*gclwh9_13*x81))+(((-1.0)*gclwh7_9*x111))+(((-1.06)*gclwh9_9*x81))+(((-1.0)*gclwh15_10*x83))+((x160*x92))+(((0.96)*gclwh11_13*x86))+(((-0.01805)*x89))+(((-1.0)*gclwh9_10*x91))+(((-4.0)*gclwh7_10*x74))+(((-1.0)*gclwh11_13*x116))+((gclwh5_13*x110))+(((-1.0)*gclwh15_13*x104))+(((-1.0)*gclwh9_13*x161))+((gclwh7_13*x149))+((gclwh5_10*x105))+((gclwh11_9*x135))+(((0.48)*gclwh7_13*x115))+(((4.0)*gclwh11_10*x86))+(((-0.48)*gclwh9_13*x76))+(((1.06)*gclwh7_9*x74))+(((-0.53)*gclwh7_9*x115))+((gclwh13_10*x113))+(((-1.0)*gclwh11_13*x227))+(((0.53)*gclwh9_9*x76))+(((-1.06)*gclwh11_9*x86))+(((-2.0)*gclwh9_10*x76))+((gclwh13_13*x82))+(((0.01805)*x160))+(((4.0)*gclwh9_10*x81))+(((0.00478325)*gclwh9_9*r20))+(((0.53)*gclwh11_9*x93))+(((-1.0)*x89*x92))+(((-0.96)*gclwh7_13*x74)));
op[22]=((0.011475)+(((0.0074)*gclwh2_1*npy*pz))+(((-0.00063175)*gclwh11_9*r22))+(((0.19)*gclwh5_10*rxp2_2))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((-0.05)*gclwh2_0*npy*pz))+(((-0.000225625)*gclwh9_0*r20))+(((-3.33925e-5)*gclwh7_1*r21))+(((2.0)*gclwh11_10*npz*pz))+(((-0.005325)*gclwh11_1*pp*r22))+(((0.14)*gclwh9_9*npx*pz))+(((0.0074)*gclwh7_1*npy*pz))+(((0.19)*pz))+(((2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.05)*gclwh11_0*npz*pz))+(((0.07)*gclwh7_9*pp*r21))+((gclwh7_1*r21*(pp*pp)))+(((3.33925e-5)*gclwh9_1*r20))+(((-2.0)*gclwh7_10*npy*pz))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.025)*gclwh7_0*pp*r21))+(((-0.012725)*gclwh0_1*pp*r20))+(((0.005325)*gclwh7_1*pp*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((3.33925e-5)*gclwh2_1*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((-0.07)*gclwh9_9*pp*r20))+(((0.025)*gclwh0_0*pp*r20))+(((0.009025)*gclwh7_10*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.009025)*gclwh11_10*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.025)*gclwh9_0*pp*r20))+(((-0.14)*gclwh7_9*npy*pz))+((gclwh7_10*pp*r21))+(((3.33925e-5)*gclwh0_1*r20))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.05)*gclwh0_0*npx*pz))+(((0.009025)*gclwh11_0*pz*r22))+(((-0.0074)*gclwh9_1*npx*pz))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.012725)*gclwh2_1*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.005325)*gclwh9_1*pp*r20))+(((-0.000225625)*gclwh0_0*r20))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.19)*gclwh15_10*rxp0_2))+(((0.00475)*gclwh5_0*rxp2_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.07)*gclwh11_9*pp*r22))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((-0.00475)*gclwh15_0*rxp0_2))+(((0.009025)*gclwh2_0*pz*r21))+(((0.0074)*gclwh0_1*npx*pz))+((gclwh2_1*r21*(pp*pp)))+(((-0.000225625)*gclwh11_0*r22))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.05)*gclwh9_0*npx*pz))+(((-0.05)*gclwh7_0*npy*pz))+(((-0.00063175)*gclwh9_9*r20))+(((0.025)*gclwh2_0*pp*r21))+(((0.19)*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.14)*gclwh11_9*npz*pz))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.000225625)*gclwh7_0*r21))+(((-0.025)*gclwh11_0*pp*r22))+(((0.19)*gclwh13_10*rxp1_2))+(((0.00063175)*gclwh7_9*r21))+(((-0.000225625)*gclwh2_0*r21))+(((0.00475)*gclwh13_0*rxp1_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.0074)*gclwh11_1*npz*pz))+((gclwh0_1*r20*(pp*pp)))+(((-0.000703)*gclwh5_1*rxp2_2))+((gclwh9_0*pp*pz*r20))+(((3.33925e-5)*gclwh11_1*r22)));
op[23]=(x339+x328+(((-1.0)*x333))+(((-1.0)*x340)));
op[24]=((((0.00911525)*x134))+(((-0.1919)*x112))+(((-1.01)*gclwh14_12*x76))+((gclwh10_12*x106))+(((-1.0)*gclwh14_12*x78))+(((0.1919)*x155))+x341+(((2.02)*gclwh14_12*x81))+(((1.01)*gclwh4_12*x93))+(((-1.0)*x336))+(((-2.02)*gclwh12_12*x74))+(((-2.02)*gclwh4_12*x86))+(((0.00911525)*x114))+((x114*x156)));
op[25]=x323;
op[26]=((-0.2112)+(((0.0836)*x157))+(((-0.0836)*x154))+(((0.0836)*gclwh10_14*rxp2_2)));
op[27]=((((0.96)*gclwh14_2*x76))+(((0.008664)*x94))+(((-0.76)*gclwh10_11*rxp2_2))+(((-1.0)*x144*x93))+(((-0.0361)*x119))+(((0.76)*gclwh6_11*rxp1_2))+(((-0.96)*gclwh4_2*x93))+(((8.0)*gclwh4_11*x86))+(((-0.0361)*x97))+(((1.92)*gclwh4_2*x86))+(((8.0)*gclwh12_11*x74))+(((0.0361)*gclwh14_11*r20))+((x76*x99))+(((-0.96)*pp*x101))+(((-0.008664)*x152))+(((-1.92)*gclwh14_2*x81))+(((-8.0)*gclwh14_11*x81))+(((-1.0)*x115*x75))+(((1.92)*gclwh12_2*x74))+(((-0.1824)*x130))+(((-0.1824)*x136))+(((0.1824)*x127))+(((-0.76)*gclwh8_11*rxp0_2))+(((-0.008664)*x101)));
op[28]=((((0.05)*gclwh4_12*x93))+(((0.1)*gclwh14_12*x81))+(((0.00045125)*x134))+(((0.00045125)*x114))+(((-0.05)*gclwh14_12*x76))+(((0.05)*pp*x114))+x336+(((0.0095)*x155))+(((-0.0095)*x112))+(((-0.00045125)*x132))+(((0.0095)*gclwh10_12*rxp2_2))+(((-1.0)*x341))+(((-0.1)*gclwh4_12*x86))+(((-0.1)*gclwh12_12*x74)));
op[29]=((((-1.0)*x320))+x220);
op[30]=x324;
op[31]=((((0.1919)*gclwh9_13*rxp0_2))+(((0.00911525)*gclwh5_13*r22))+(((-1.0)*gclwh15_13*x78))+(((-1.01)*gclwh15_13*x76))+(((-0.1919)*gclwh7_13*rxp1_2))+x344+((x156*x71))+(((-2.02)*gclwh13_13*x74))+(((2.02)*gclwh15_13*x81))+(((-1.0)*x332))+(((0.00911525)*x71))+((gclwh11_13*x106))+(((-2.02)*gclwh5_13*x86))+(((1.01)*gclwh5_13*x93)));
IkReal x349=pz*pz;
IkReal x350=pp*pp;
IkReal x351=(npx*pz);
IkReal x352=(gclwh8_8*rxp0_2);
IkReal x353=(gclwh8_8*r20);
IkReal x354=(gclwh13_13*r21);
IkReal x355=(pp*r20);
IkReal x356=((0.0209)*rxp2_2);
IkReal x357=(npy*pz);
IkReal x358=(gclwh14_12*rxp0_2);
IkReal x359=(gclwh6_14*r21);
IkReal x360=((0.009025)*pz);
IkReal x361=(gclwh5_0*r22);
IkReal x362=((0.44)*gclwh8_14);
IkReal x363=(gclwh5_10*rxp2_2);
IkReal x364=((0.38)*rxp0_2);
IkReal x365=((0.1919)*rxp1_2);
IkReal x366=(pp*r22);
IkReal x367=(npz*pz);
IkReal x368=(gclwh9_9*rxp0_2);
IkReal x369=(gclwh11_0*rxp2_2);
IkReal x370=((0.76)*rxp1_2);
IkReal x371=((0.22)*gclwh10_14);
IkReal x372=(gclwh9_1*rxp0_2);
IkReal x373=((2.0)*gclwh4_11);
IkReal x374=((0.01805)*r22);
IkReal x375=(gclwh5_10*r22);
IkReal x376=((0.44)*gclwh9_15);
IkReal x377=(gclwh9_10*r20);
IkReal x378=(gclwh14_2*r20);
IkReal x379=((0.19)*rxp2_2);
IkReal x380=((0.00045125)*r22);
IkReal x381=((2.0)*gclwh15_10);
IkReal x382=(gclwh12_11*r21);
IkReal x383=((0.1824)*rxp2_2);
IkReal x384=(gclwh9_13*rxp0_2);
IkReal x385=((1.0)*pz);
IkReal x386=(gclwh9_0*rxp0_2);
IkReal x387=(gclwh12_2*r21);
IkReal x388=((0.1919)*rxp2_2);
IkReal x389=((0.0209)*rxp1_2);
IkReal x390=((2.0)*gclwh13_10);
IkReal x391=((0.0361)*r21);
IkReal x392=((0.505)*pp);
IkReal x393=(pp*r21);
IkReal x394=((0.44)*gclwh7_15);
IkReal x395=((0.008664)*r22);
IkReal x396=(gclwh7_15*rxp1_2);
IkReal x397=((0.00911525)*r21);
IkReal x398=((0.19)*rxp1_2);
IkReal x399=((0.1007)*rxp2_2);
IkReal x400=(gclwh11_13*rxp2_2);
IkReal x401=((2.0)*pp);
IkReal x402=((4.0)*gclwh11_10);
IkReal x403=((0.38)*rxp1_2);
IkReal x404=((0.008664)*r21);
IkReal x405=((4.0)*gclwh15_10);
IkReal x406=(gclwh7_9*rxp1_2);
IkReal x407=(gclwh13_0*r21);
IkReal x408=(gclwh10_14*r22);
IkReal x409=((0.0209)*rxp0_2);
IkReal x410=(gclwh5_1*r22);
IkReal x411=((4.0)*gclwh8_11);
IkReal x412=(gclwh7_0*rxp1_2);
IkReal x413=(gclwh9_15*r20);
IkReal x414=(gclwh15_10*r20);
IkReal x415=((0.025)*pp);
IkReal x416=((0.004332)*r21);
IkReal x417=((4.0)*gclwh9_10);
IkReal x418=(gclwh7_15*r21);
IkReal x419=((0.1824)*rxp0_2);
IkReal x420=(gclwh6_2*rxp1_2);
IkReal x421=((0.76)*rxp0_2);
IkReal x422=((0.00099275)*r22);
IkReal x423=(gclwh11_15*rxp2_2);
IkReal x424=((4.0)*gclwh7_10);
IkReal x425=((0.00045125)*r20);
IkReal x426=((0.00099275)*r20);
IkReal x427=((0.19)*rxp0_2);
IkReal x428=(gclwh12_12*rxp1_2);
IkReal x429=(gclwh15_0*r20);
IkReal x430=(gclwh10_2*rxp2_2);
IkReal x431=((0.049039)*rxp2_2);
IkReal x432=(gclwh13_10*r21);
IkReal x433=((0.01805)*r20);
IkReal x434=(gclwh10_8*rxp2_2);
IkReal x435=((4.0)*gclwh10_11);
IkReal x436=((0.004332)*r20);
IkReal x437=((0.0361)*r22);
IkReal x438=((0.000703)*rxp1_2);
IkReal x439=((0.008664)*r20);
IkReal x440=((0.19)*pz);
IkReal x441=((0.01805)*r21);
IkReal x442=((0.22)*gclwh8_14);
IkReal x443=((0.38)*rxp2_2);
IkReal x444=((0.44)*gclwh11_15);
IkReal x445=((0.00099275)*r21);
IkReal x446=(gclwh9_15*rxp0_2);
IkReal x447=(gclwh4_3*r22);
IkReal x448=((0.000703)*rxp2_2);
IkReal x449=(gclwh4_2*r22);
IkReal x450=(gclwh15_13*rxp0_2);
IkReal x451=((4.0)*gclwh5_10);
IkReal x452=((2.0)*gclwh5_10);
IkReal x453=((4.0)*gclwh13_10);
IkReal x454=((0.00045125)*r21);
IkReal x455=(gclwh11_15*r22);
IkReal x456=((4.0)*gclwh6_11);
IkReal x457=(gclwh8_3*rxp0_2);
IkReal x458=(gclwh7_13*rxp1_2);
IkReal x459=((0.004332)*r22);
IkReal x460=((0.76)*rxp2_2);
IkReal x461=((0.0095)*rxp2_2);
IkReal x462=((0.00911525)*r22);
IkReal x463=((0.00911525)*r20);
IkReal x464=(gclwh6_8*rxp1_2);
IkReal x465=((0.44)*gclwh10_14);
IkReal x466=(gclwh8_14*r20);
IkReal x467=(gclwh11_9*rxp2_2);
IkReal x468=((0.1824)*rxp1_2);
IkReal x469=((0.049039)*rxp1_2);
IkReal x470=((2.0)*gclwh14_11);
IkReal x471=(gclwh8_2*rxp0_2);
IkReal x472=((0.0912)*rxp2_2);
IkReal x473=(gclwh4_11*x443);
IkReal x474=(gclwh6_11*x441);
IkReal x475=(gclwh12_11*x403);
IkReal x476=(gclwh10_11*x374);
IkReal x477=(gclwh14_11*x364);
IkReal x478=(gclwh8_11*x433);
IkReal x479=(gclwh11_10*x374);
IkReal x480=((0.01805)*x377);
IkReal x481=(gclwh15_10*x364);
IkReal x482=((0.38)*x363);
IkReal x483=(gclwh13_10*x403);
IkReal x484=(gclwh7_10*x441);
IkReal x485=(gclwh10_5*x356);
IkReal x486=(gclwh6_14*x389);
IkReal x487=(gclwh4_5*x422);
IkReal x488=(gclwh12_5*x445);
IkReal x489=(gclwh8_5*x409);
IkReal x490=(gclwh10_14*x356);
IkReal x491=(gclwh6_5*x389);
IkReal x492=(gclwh8_14*x409);
IkReal x493=(gclwh14_5*x426);
IkReal x494=((0.009025)*gclwh4_11*r22);
IkReal x495=(gclwh10_11*x379);
IkReal x496=(gclwh8_11*x427);
IkReal x497=((0.009025)*x382);
IkReal x498=(gclwh6_11*x398);
IkReal x499=((0.009025)*gclwh14_11*r20);
IkReal x500=(gclwh7_10*x403);
IkReal x501=((0.01805)*x414);
IkReal x502=((0.01805)*x432);
IkReal x503=(gclwh9_10*x364);
IkReal x504=(gclwh11_10*x443);
IkReal x505=(gclwh5_10*x374);
IkReal x506=(gclwh7_10*x398);
IkReal x507=((0.009025)*x414);
IkReal x508=(gclwh9_10*x427);
IkReal x509=((0.009025)*x432);
IkReal x510=(gclwh11_10*x379);
IkReal x511=((0.009025)*x375);
IkReal x512=(gclwh11_7*x356);
IkReal x513=(gclwh7_15*x389);
IkReal x514=(gclwh9_7*x409);
IkReal x515=(gclwh13_7*x445);
IkReal x516=(gclwh5_7*x422);
IkReal x517=(gclwh9_15*x409);
IkReal x518=(gclwh11_15*x356);
IkReal x519=(gclwh7_7*x389);
IkReal x520=(gclwh15_7*x426);
IkReal x521=((0.00099275)*x359);
IkReal x522=(gclwh14_5*x409);
IkReal x523=(gclwh8_5*x426);
IkReal x524=(gclwh10_5*x422);
IkReal x525=((0.00099275)*x408);
IkReal x526=(gclwh4_5*x356);
IkReal x527=(gclwh12_5*x389);
IkReal x528=(gclwh8_14*x426);
IkReal x529=(gclwh6_5*x445);
IkReal x530=(gclwh13_0*x393);
IkReal x531=((2.0)*x349);
IkReal x532=(x351*x411);
IkReal x533=((2.0)*gclwh6_11*x393);
IkReal x534=(x367*x435);
IkReal x535=((2.0)*gclwh8_11*x355);
IkReal x536=((2.0)*gclwh10_11*x366);
IkReal x537=(x357*x456);
IkReal x538=((2.0)*gclwh11_10*x366);
IkReal x539=(x357*x424);
IkReal x540=((2.0)*gclwh9_10*x355);
IkReal x541=((2.0)*gclwh7_10*x393);
IkReal x542=(x351*x417);
IkReal x543=(x367*x402);
IkReal x544=((0.11)*gclwh4_5*x366);
IkReal x545=((0.11)*gclwh12_5*x393);
IkReal x546=((0.22)*gclwh14_5*x351);
IkReal x547=((0.22)*gclwh4_5*x367);
IkReal x548=((0.11)*gclwh14_5*x355);
IkReal x549=((0.22)*gclwh12_5*x357);
IkReal x550=(gclwh14_2*pz*x355);
IkReal x551=(gclwh10_3*pp*x379);
IkReal x552=(x351*x470);
IkReal x553=(gclwh8_3*pp*x427);
IkReal x554=(x350*x447);
IkReal x555=(x360*x378);
IkReal x556=(gclwh6_2*pz*x398);
IkReal x557=(gclwh8_2*pz*x427);
IkReal x558=(x367*x373);
IkReal x559=(gclwh6_3*pp*x398);
IkReal x560=(gclwh10_2*pz*x379);
IkReal x561=(x360*x387);
IkReal x562=(x360*x449);
IkReal x563=((2.0)*gclwh12_11*x357);
IkReal x564=(x355*x381);
IkReal x565=(x367*x451);
IkReal x566=(x357*x453);
IkReal x567=(x390*x393);
IkReal x568=(x351*x405);
IkReal x569=(x366*x452);
IkReal x570=(gclwh15_0*pz*x355);
IkReal x571=((0.19)*pp*x372);
IkReal x572=(gclwh7_0*pz*x398);
IkReal x573=(gclwh11_1*pp*x379);
IkReal x574=(x360*x429);
IkReal x575=(x367*x452);
IkReal x576=(x357*x390);
IkReal x577=(x350*x410);
IkReal x578=(x369*x440);
IkReal x579=(x386*x440);
IkReal x580=(x360*x407);
IkReal x581=(x360*x361);
IkReal x582=(x351*x381);
IkReal x583=(gclwh7_1*pp*x398);
IkReal x584=((0.11)*gclwh5_7*x366);
IkReal x585=((0.11)*gclwh13_7*x393);
IkReal x586=((0.22)*gclwh15_7*x351);
IkReal x587=((0.22)*gclwh5_7*x367);
IkReal x588=((0.22)*gclwh13_7*x357);
IkReal x589=((0.11)*gclwh15_7*x355);
IkReal x590=((0.11)*gclwh10_5*x366);
IkReal x591=((0.22)*gclwh6_5*x357);
IkReal x592=(x351*x442);
IkReal x593=(x367*x371);
IkReal x594=((0.11)*pp*x359);
IkReal x595=((0.11)*gclwh8_5*x355);
IkReal x596=((0.11)*gclwh8_14*x355);
IkReal x597=((0.11)*gclwh6_5*x393);
IkReal x598=((0.22)*gclwh8_5*x351);
IkReal x599=((0.22)*gclwh6_14*x357);
IkReal x600=((0.11)*gclwh10_14*x366);
IkReal x601=((0.22)*gclwh10_5*x367);
IkReal x602=(npz*x531);
IkReal x603=(gclwh12_2*npy*x531);
IkReal x604=(gclwh4_2*x602);
IkReal x605=(gclwh4_3*x367*x401);
IkReal x606=(pp*x385*x387);
IkReal x607=(gclwh4_2*x366*x385);
IkReal x608=(gclwh14_2*npx*x531);
IkReal x609=(gclwh5_0*x602);
IkReal x610=(gclwh13_0*npy*x531);
IkReal x611=(gclwh5_1*x367*x401);
IkReal x612=(pp*x361*x385);
IkReal x613=(gclwh15_0*npx*x531);
IkReal x614=(x385*x530);
IkReal x615=(x492+x490);
IkReal x616=(x518+x517);
IkReal x617=((((0.0418)*x446))+(((0.0418)*x423))+(((-0.0418)*x396)));
IkReal x618=(x506+x507+x575+x576);
IkReal x619=(x498+x499+x558+x563);
IkReal x620=((((0.0019855)*x359))+((x367*x465))+(((0.22)*pp*x359))+((x351*x362)));
IkReal x621=(((x351*x376))+(((0.0019855)*x418))+((x367*x444))+(((0.22)*gclwh7_15*x393)));
IkReal x622=(x521+x594+x593+x592);
IkReal x623=(x496+x497+x494+x495+x552);
IkReal x624=(x508+x509+x511+x510+x582);
IkReal x625=((((0.0019855)*x408))+((x366*x371))+((x355*x442))+(((0.0019855)*x466))+(((0.44)*gclwh6_14*x357)));
IkReal x626=((((0.22)*gclwh9_15*x355))+(((0.0019855)*x413))+(((0.0019855)*x455))+((x357*x394))+(((0.22)*gclwh11_15*x366)));
IkReal x627=(x493+x491+x547+x548+x549);
IkReal x628=(x525+x528+x596+x599+x600);
IkReal x629=(x500+x501+x566+x564+x565);
IkReal x630=(x520+x519+x587+x588+x589);
IkReal x631=(x474+x475+x473+x533+x532+x534);
IkReal x632=(x481+x480+x479+x540+x539+x538);
IkReal x633=(x522+x523+x524+x595+x591+x590);
IkReal x634=(x526+x527+x529+x597+x598+x601);
IkReal x635=(x476+x477+x478+x535+x537+x536);
IkReal x636=(x483+x482+x484+x541+x542+x543);
IkReal x637=(x502+x503+x504+x505+x568+x569+x567);
IkReal x638=(x516+x515+x514+x512+x584+x585+x586);
IkReal x639=(x489+x488+x485+x487+x544+x545+x546);
IkReal x640=((((-1.0)*x625))+x620);
IkReal x641=(x553+x551+x550+x556+x555+x554+x603+x604);
IkReal x642=(x574+x577+x571+x570+x573+x572+x609+x610);
IkReal x643=(x559+x557+x562+x560+x561+x607+x606+x605+x608);
IkReal x644=(x579+x578+x580+x581+x583+x614+x611+x612+x613);
op[32]=((((0.008664)*x429))+(((-0.96)*pp*x361))+(((-1.0)*gclwh7_10*x370))+((gclwh13_10*x391))+(((-8.0)*gclwh5_10*x367))+((x366*x451))+(((-1.92)*gclwh15_0*x351))+(((0.1824)*x412))+(((8.0)*gclwh15_10*x351))+((gclwh11_10*x460))+(((-1.0)*x355*x405))+(((-1.0)*gclwh13_0*x404))+(((0.96)*gclwh15_0*x355))+(((-0.1824)*x369))+(((-8.0)*gclwh13_10*x357))+((gclwh9_10*x421))+(((1.92)*gclwh13_0*x357))+(((1.92)*gclwh5_0*x367))+(((-0.96)*x530))+(((-0.008664)*x361))+(((-0.0361)*x414))+(((-0.1824)*x386))+(((0.0361)*x375))+((x393*x453)));
op[33]=((-0.2112)+(((-0.0836)*x396))+(((0.0836)*x446))+(((0.0836)*x423)));
op[34]=x617;
op[35]=((((0.0095)*x384))+(((0.1)*gclwh15_13*x351))+((gclwh5_13*x380))+(((-0.1)*gclwh13_13*x357))+(((-0.05)*gclwh15_13*x355))+(((-1.0)*x637))+(((-0.1)*gclwh5_13*x367))+(((0.05)*pp*x354))+(((0.0095)*x400))+(((-1.0)*gclwh15_13*x425))+(((-0.0095)*x458))+(((0.00045125)*x354))+x629+(((0.05)*gclwh5_13*x366)));
op[36]=((0.53425)+(((2.02)*gclwh6_12*x357))+(((1.01)*gclwh8_12*x355))+(((-2.02)*gclwh8_12*x351))+(((0.1919)*x358))+(((-1.0)*x631))+(((-1.0)*gclwh4_12*x388))+(((1.01)*gclwh10_12*x366))+(((-1.0)*gclwh12_12*x365))+(((-1.01)*gclwh6_12*x393))+x635+(((-2.02)*gclwh10_12*x367))+((gclwh8_12*x463))+(((-1.0)*gclwh6_12*x397))+((gclwh10_12*x462)));
op[37]=((((-1.0)*x620))+x625);
op[38]=((((0.003971)*x466))+(((-0.44)*pp*x359))+(((-0.003971)*x359))+((x366*x465))+(((0.003971)*x408))+((x355*x362))+(((0.88)*gclwh6_14*x357))+(((-0.88)*gclwh8_14*x351))+(((-0.88)*gclwh10_14*x367)));
op[39]=((-0.0989)+(((-1.0)*gclwh14_11*x421))+(((-1.0)*gclwh10_2*x395))+(((-1.0)*gclwh14_2*x419))+(((-1.0)*gclwh8_2*x439))+((gclwh12_11*x370))+(((0.96)*gclwh6_2*x393))+(((-0.96)*gclwh10_2*x366))+(((-1.92)*gclwh6_2*x357))+((gclwh12_2*x468))+((gclwh4_2*x383))+(((1.92)*gclwh1_2*x351))+(((1.92)*gclwh10_2*x367))+(((-1.0)*gclwh10_11*x437))+(((-0.0361)*gclwh8_11*r20))+(((-0.96)*gclwh1_2*x355))+(((1.92)*gclwh3_2*x357))+(((-0.96)*gclwh8_2*x355))+(((-8.0)*gclwh6_11*x357))+((gclwh1_2*x439))+(((-1.0)*x355*x411))+((gclwh6_11*x391))+(((-0.96)*gclwh3_2*x393))+((gclwh4_11*x460))+((gclwh3_2*x404))+(((8.0)*gclwh10_11*x367))+((gclwh6_2*x404))+(((1.92)*gclwh8_2*x351))+(((-1.0)*x366*x435))+(((8.0)*gclwh8_11*x351))+((x393*x456)));
op[40]=((-0.02545)+(((0.0095)*x358))+(((-0.1)*gclwh8_12*x351))+((gclwh10_12*x380))+(((0.1)*gclwh6_12*x357))+(((-0.1)*gclwh10_12*x367))+(((-1.0)*x635))+(((-0.05)*gclwh6_12*x393))+(((0.05)*gclwh10_12*x366))+((gclwh8_12*x425))+(((-1.0)*gclwh6_12*x454))+(((0.05)*gclwh8_12*x355))+x631+(((-1.0)*gclwh4_12*x461))+(((-0.0095)*x428)));
op[41]=x640;
op[42]=((((-1.0)*x621))+x626);
op[43]=((0.53425)+(((2.02)*gclwh9_13*x351))+(((-0.1919)*x450))+((gclwh5_13*x388))+((gclwh13_13*x365))+(((1.01)*gclwh7_13*x393))+(((-1.0)*gclwh9_13*x463))+(((-1.01)*gclwh9_13*x355))+(((-1.0)*x632))+(((-2.02)*gclwh7_13*x357))+(((-1.0)*gclwh11_13*x462))+x636+((gclwh7_13*x397))+(((2.02)*gclwh11_13*x367))+(((-1.01)*gclwh11_13*x366)));
op[44]=((0.0989)+(((1.92)*gclwh0_0*x351))+(((-1.92)*gclwh9_0*x351))+(((-1.0)*x366*x402))+(((-1.0)*gclwh13_0*x468))+((gclwh13_10*x370))+(((0.96)*gclwh11_0*x366))+((gclwh9_0*x439))+(((-0.96)*gclwh2_0*x393))+((gclwh11_0*x395))+(((0.96)*gclwh9_0*x355))+(((-0.0361)*x377))+(((1.92)*gclwh2_0*x357))+(((1.92)*gclwh7_0*x357))+((gclwh15_0*x419))+(((-8.0)*gclwh7_10*x357))+(((-1.0)*x355*x417))+((x393*x424))+(((-1.0)*gclwh11_10*x437))+((gclwh0_0*x439))+(((8.0)*gclwh9_10*x351))+(((-1.0)*gclwh5_0*x383))+(((-1.0)*gclwh7_0*x404))+(((-1.0)*gclwh15_10*x421))+(((-0.96)*gclwh7_0*x393))+(((-1.92)*gclwh11_0*x367))+((gclwh7_10*x391))+(((0.76)*x363))+((gclwh2_0*x404))+(((-0.96)*gclwh0_0*x355))+(((8.0)*gclwh11_10*x367)));
op[45]=((((-1.0)*x366*x444))+(((-0.003971)*x455))+(((-0.88)*gclwh7_15*x357))+(((-1.0)*x355*x376))+(((0.003971)*x418))+(((0.88)*gclwh11_15*x367))+(((0.88)*gclwh9_15*x351))+(((-0.003971)*x413))+((x393*x394)));
op[46]=((((-1.0)*x626))+x621);
op[47]=((-0.02545)+(((-1.0)*gclwh9_13*x425))+(((-0.05)*gclwh11_13*x366))+(((0.1)*gclwh11_13*x367))+(((-1.0)*gclwh11_13*x380))+((gclwh5_13*x461))+(((0.1)*gclwh9_13*x351))+(((-1.0)*x636))+((gclwh7_13*x454))+(((0.0095)*gclwh13_13*rxp1_2))+(((-0.0095)*x450))+(((-0.05)*gclwh9_13*x355))+x632+(((0.05)*gclwh7_13*x393))+(((-0.1)*gclwh7_13*x357)));
op[48]=((-0.1111)+(((-1.0)*x486))+(((-1.0)*x627))+x615+x639);
op[49]=((((-1.0)*x387*x392))+(((-1.0)*pp*x382))+(((-0.0779)*x352))+(((-0.09595)*x471))+(((0.5162)*gclwh4_3*x367))+(((-0.505)*gclwh4_2*x366))+(((-0.0779)*x434))+(((-1.0)*gclwh4_11*x366))+(((-0.004557625)*x387))+((gclwh14_11*x355))+(((0.004557625)*x378))+(((-0.049039)*x457))+(((-1.01)*gclwh14_2*x351))+(((-1.0)*x623))+(((1.01)*gclwh12_2*x357))+(((-0.0023293525)*x447))+(((-1.0)*gclwh10_3*x431))+(((1.01)*gclwh4_2*x367))+(((-1.0)*x643))+(((0.505)*gclwh14_2*x355))+(((-0.249075)*gclwh4_3*x366))+x641+x619+(((-0.004557625)*x449))+(((0.09595)*x420))+(((-0.09595)*x430))+((gclwh6_3*x469))+(((0.0779)*x464)));
op[50]=((((0.0912)*gclwh6_12*rxp1_2))+(((0.96)*gclwh12_12*x357))+((gclwh6_11*x403))+(((-0.48)*gclwh4_12*x366))+((gclwh14_12*x436))+(((-0.48)*gclwh12_12*x393))+(((-1.0)*gclwh10_8*x399))+(((-4.0)*gclwh14_11*x351))+(((-1.0)*gclwh12_12*x416))+(((0.96)*gclwh4_12*x367))+(((-1.0)*x366*x373))+(((4.0)*gclwh4_11*x367))+(((-1.0)*gclwh10_11*x443))+((gclwh14_11*x433))+(((-0.0912)*gclwh8_12*rxp0_2))+(((4.0)*gclwh12_11*x357))+(((-0.1007)*x352))+(((-1.0)*gclwh4_12*x459))+(((-1.0)*gclwh8_11*x364))+((x355*x470))+(((-0.01805)*x382))+(((0.1007)*x464))+(((-0.96)*gclwh14_12*x351))+(((-1.0)*x382*x401))+(((-1.0)*gclwh10_12*x472))+(((-1.0)*gclwh4_11*x374))+(((0.48)*gclwh14_12*x355)));
op[51]=((((-0.0418)*gclwh10_14*rxp2_2))+(((-0.0418)*gclwh8_14*rxp0_2))+(((0.0418)*gclwh6_14*rxp1_2)));
op[52]=((-0.0055)+(((-1.0)*x627))+x486+(((-1.0)*x615))+x639);
op[53]=((((-0.000703)*x457))+(((0.05)*gclwh4_2*x367))+(((-1.0)*gclwh14_11*x355))+(((-0.05)*gclwh14_2*x351))+(((-0.00475)*x430))+(((0.00475)*x420))+((pp*x382))+(((-1.0)*gclwh10_3*x448))+(((-0.025)*gclwh4_2*x366))+(((-0.000225625)*x387))+(((0.025)*gclwh14_2*x355))+(((-1.0)*x643))+(((0.0074)*gclwh4_3*x367))+(((0.0228)*x434))+(((-1.0)*x387*x415))+(((-0.00475)*x471))+(((-0.0228)*x464))+(((0.05)*gclwh12_2*x357))+(((-1.0)*x619))+x641+x623+(((0.005325)*gclwh4_3*x366))+((gclwh6_3*x438))+(((-3.33925e-5)*x447))+(((0.000225625)*x378))+(((0.0228)*x352))+(((-0.000225625)*x449))+((gclwh4_11*x366)));
op[54]=((((-1.0)*x392*x407))+(((0.09595)*x412))+(((-1.0)*x361*x392))+(((0.004557625)*x429))+((gclwh13_10*x393))+(((-0.114)*x406))+(((0.505)*gclwh15_0*x355))+(((-1.01)*gclwh15_0*x351))+((gclwh7_1*x469))+(((0.114)*x467))+(((-0.09595)*x386))+(((-0.0023293525)*x410))+(((-0.049039)*x372))+(((-1.0)*x644))+((gclwh5_10*x366))+(((0.114)*x368))+(((-0.09595)*x369))+(((-0.249075)*gclwh5_1*x366))+(((-1.0)*x618))+(((-1.0)*gclwh11_1*x431))+(((-0.004557625)*x361))+x642+x624+(((0.5162)*gclwh5_1*x367))+(((-0.004557625)*x407))+(((1.01)*gclwh13_0*x357))+(((1.01)*gclwh5_0*x367))+(((-1.0)*gclwh15_10*x355)));
op[55]=((-0.1111)+(((-1.0)*x630))+x616+x638+(((-1.0)*x513)));
op[56]=x617;
op[57]=((((0.96)*gclwh13_13*x357))+(((0.1007)*x406))+(((-0.1007)*x368))+(((-1.0)*gclwh11_9*x399))+(((-1.0)*x637))+(((0.96)*gclwh5_13*x367))+((gclwh15_13*x436))+(((0.48)*gclwh15_13*x355))+(((0.0912)*x458))+(((-1.0)*gclwh5_13*x459))+(((-0.96)*gclwh15_13*x351))+(((-0.004332)*x354))+(((-0.0912)*x384))+(((-0.48)*gclwh5_13*x366))+x629+(((-0.0912)*x400))+(((-0.48)*pp*x354)));
op[58]=((((0.05)*gclwh5_0*x367))+(((0.0133)*x368))+(((0.0074)*gclwh5_1*x367))+(((-1.0)*gclwh5_10*x366))+(((0.025)*gclwh15_0*x355))+(((-0.000225625)*x361))+(((0.0133)*x467))+(((-1.0)*x624))+(((-0.000703)*x372))+((gclwh7_1*x438))+(((-0.05)*gclwh15_0*x351))+(((-1.0)*x644))+(((-3.33925e-5)*x410))+(((-0.000225625)*x407))+(((-0.00475)*x386))+(((0.000225625)*x429))+(((-0.0133)*x406))+(((0.05)*gclwh13_0*x357))+x642+x618+(((-1.0)*gclwh13_10*x393))+(((0.00475)*x412))+(((0.005325)*gclwh5_1*x366))+(((-1.0)*gclwh11_1*x448))+((gclwh15_10*x355))+(((-0.025)*x530))+(((-0.00475)*x369))+(((-1.0)*x361*x415)));
op[59]=((-0.0055)+(((-1.0)*x630))+x513+(((-1.0)*x616))+x638);
op[60]=((((-1.0)*x622))+(((-1.0)*x634))+x628+x633);
op[61]=((0.242925)+(((0.82)*gclwh10_8*npz*pz))+(((0.505)*gclwh6_2*pp*r21))+(((-0.41)*gclwh8_8*pp*r20))+(((-0.19)*gclwh14_11*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((0.5162)*gclwh8_3*npx*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((-0.0023293525)*gclwh8_3*r20))+(((0.19)*pz))+(((0.249075)*gclwh6_3*pp*r21))+(((0.19)*gclwh4_11*rxp2_2))+(((-1.0)*gclwh8_11*pp*r20))+(((-0.82)*gclwh6_8*npy*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.267125)*gclwh3_3*pp*r21))+(((0.41)*gclwh6_8*pp*r21))+(((0.82)*gclwh8_8*npx*pz))+(((0.09595)*gclwh12_2*rxp1_2))+((gclwh6_2*pp*pz*r21))+(((2.0)*gclwh6_3*npy*pp*pz))+(((1.01)*gclwh8_2*npx*pz))+(((1.01)*gclwh10_2*npz*pz))+(((-0.009025)*gclwh8_11*r20))+(((-0.004557625)*gclwh8_2*r20))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.004557625)*gclwh3_2*r21))+(((-0.505)*gclwh8_2*pp*r20))+(((0.009025)*gclwh3_2*pz*r21))+(((-0.0023293525)*gclwh10_3*r22))+(((-0.249075)*gclwh10_3*pp*r22))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((0.5162)*gclwh1_3*npx*pz))+(((2.0)*gclwh10_11*npz*pz))+(((-0.19)*gclwh14_2*pz*rxp0_2))+((gclwh10_3*r22*(pp*pp)))+(((-0.5162)*gclwh6_3*npy*pz))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((1.01)*gclwh1_2*npx*pz))+(((-0.267125)*gclwh1_3*pp*r20))+(((0.0023293525)*gclwh1_3*r20))+(((0.5162)*gclwh3_3*npy*pz))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((-0.505)*gclwh1_2*pp*r20))+(((-0.249075)*gclwh8_3*pp*r20))+(((0.19)*gclwh12_11*rxp1_2))+(((0.049039)*gclwh4_3*rxp2_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.0023293525)*gclwh6_3*r21))+(((-1.01)*gclwh6_2*npy*pz))+(((-0.505)*gclwh10_2*pp*r22))+(((1.01)*gclwh3_2*npy*pz))+(((-0.00370025)*gclwh10_8*r22))+(((-2.0)*gclwh6_11*npy*pz))+(((-0.41)*gclwh10_8*pp*r22))+(((0.0023293525)*gclwh3_3*r21))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.09595)*gclwh14_2*rxp0_2))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.009025)*gclwh10_2*pz*r22))+(((-0.004557625)*gclwh10_2*r22))+(((0.09595)*gclwh4_2*rxp2_2))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((0.004557625)*gclwh1_2*r20))+(((0.5162)*gclwh10_3*npz*pz))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.505)*gclwh3_2*pp*r21))+(((0.009025)*gclwh6_2*pz*r21))+(((-0.00370025)*gclwh8_8*r20))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.004557625)*gclwh6_2*r21))+(((0.00370025)*gclwh6_8*r21))+(((0.009025)*gclwh6_11*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp))));
op[62]=((0.00105)+(((-0.96)*gclwh6_12*x357))+(((-1.0)*gclwh8_12*x436))+(((-0.00478325)*gclwh10_8*r22))+(((-0.48)*gclwh10_12*x366))+((gclwh4_12*x472))+(((0.96)*gclwh10_12*x367))+(((-0.53)*gclwh10_8*x366))+(((-0.0912)*x358))+(((0.00478325)*gclwh6_8*r21))+(((-0.53)*pp*x353))+(((1.06)*gclwh8_8*x351))+(((-1.0)*x635))+((gclwh6_12*x416))+(((0.96)*gclwh8_12*x351))+(((-0.48)*gclwh8_12*x355))+(((1.06)*gclwh10_8*x367))+(((-1.06)*gclwh6_8*x357))+(((0.48)*gclwh6_12*x393))+x631+(((0.53)*gclwh6_8*x393))+(((-1.0)*gclwh10_12*x459))+(((-0.00478325)*x353))+(((0.0912)*x428)));
op[63]=x640;
op[64]=((((-1.0)*x628))+(((-1.0)*x634))+x622+x633);
op[65]=((0.011475)+(((-0.24)*gclwh10_8*npz*pz))+(((0.001083)*gclwh10_8*r22))+(((0.00475)*gclwh12_2*rxp1_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-3.33925e-5)*gclwh10_3*r22))+(((-0.12)*gclwh6_8*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.025)*gclwh6_2*pp*r21))+(((0.000703)*gclwh4_3*rxp2_2))+(((-2.0)*gclwh8_11*npx*pz))+(((-3.33925e-5)*gclwh8_3*r20))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.001083)*gclwh8_8*r20))+(((-0.000225625)*gclwh10_2*r22))+((gclwh6_2*pp*pz*r21))+(((0.0074)*gclwh10_3*npz*pz))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.001083)*gclwh6_8*r21))+(((-0.000225625)*gclwh8_2*r20))+(((-0.05)*gclwh6_2*npy*pz))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((-0.025)*gclwh8_2*pp*r20))+(((2.0)*gclwh6_11*npy*pz))+(((0.005325)*gclwh10_3*pp*r22))+(((0.009025)*gclwh3_2*pz*r21))+(((-0.0074)*gclwh6_3*npy*pz))+(((0.0074)*gclwh1_3*npx*pz))+((gclwh8_11*pp*r20))+(((0.24)*gclwh6_8*npy*pz))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.005325)*gclwh6_3*pp*r21))+(((0.12)*gclwh10_8*pp*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.0074)*gclwh8_3*npx*pz))+(((0.05)*gclwh3_2*npy*pz))+(((0.19)*gclwh14_11*rxp0_2))+(((-0.025)*gclwh10_2*pp*r22))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((0.12)*gclwh8_8*pp*r20))+(((0.05)*gclwh8_2*npx*pz))+(((3.33925e-5)*gclwh3_3*r21))+(((0.000225625)*gclwh3_2*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.000225625)*gclwh6_2*r21))+(((0.005325)*gclwh8_3*pp*r20))+(((0.05)*gclwh10_2*npz*pz))+(((-0.012725)*gclwh3_3*pp*r21))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.025)*gclwh1_2*pp*r20))+(((-2.0)*gclwh10_11*npz*pz))+(((0.009025)*gclwh10_11*r22))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((0.0074)*gclwh3_3*npy*pz))+(((-0.00475)*gclwh14_2*rxp0_2))+(((-0.009025)*gclwh10_2*pz*r22))+(((3.33925e-5)*gclwh6_3*r21))+(((-0.012725)*gclwh1_3*pp*r20))+(((-0.025)*gclwh3_2*pp*r21))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.00475)*gclwh4_2*rxp2_2))+(((3.33925e-5)*gclwh1_3*r20))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+((gclwh10_11*pp*r22))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.05)*gclwh1_2*npx*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp)))+(((-0.24)*gclwh8_8*npx*pz))+(((0.000225625)*gclwh1_2*r20)));
op[66]=((-0.242925)+(((0.19)*gclwh5_10*rxp2_2))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((1.2)*gclwh11_9*npz*pz))+(((-0.005415)*gclwh11_9*r22))+(((1.01)*gclwh0_0*npx*pz))+(((2.0)*gclwh11_10*npz*pz))+(((0.19)*pz))+(((2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.09595)*gclwh5_0*rxp2_2))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.505)*gclwh11_0*pp*r22))+(((0.005415)*gclwh7_9*r21))+(((0.249075)*gclwh11_1*pp*r22))+(((0.5162)*gclwh0_1*npx*pz))+((gclwh7_1*r21*(pp*pp)))+(((0.004557625)*gclwh0_0*r20))+(((-2.0)*gclwh7_10*npy*pz))+(((-0.09595)*gclwh13_0*rxp1_2))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.0023293525)*gclwh2_1*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((-1.2)*gclwh7_9*npy*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((0.009025)*gclwh7_10*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0023293525)*gclwh7_1*r21))+(((1.01)*gclwh7_0*npy*pz))+(((-0.6)*gclwh11_9*pp*r22))+(((-0.5162)*gclwh9_1*npx*pz))+(((0.004557625)*gclwh9_0*r20))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.009025)*gclwh11_10*r22))+(((-0.004557625)*gclwh7_0*r21))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.005415)*gclwh9_9*r20))+(((-0.267125)*gclwh2_1*pp*r21))+((gclwh7_10*pp*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.6)*gclwh9_9*pp*r20))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.267125)*gclwh0_1*pp*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.505)*gclwh9_0*pp*r20))+(((0.5162)*gclwh7_1*npy*pz))+(((-0.505)*gclwh0_0*pp*r20))+(((-1.01)*gclwh11_0*npz*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.0023293525)*gclwh11_1*r22))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.19)*gclwh15_10*rxp0_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((-1.01)*gclwh9_0*npx*pz))+(((-0.249075)*gclwh7_1*pp*r21))+(((1.01)*gclwh2_0*npy*pz))+(((0.0023293525)*gclwh0_1*r20))+((gclwh2_1*r21*(pp*pp)))+(((0.5162)*gclwh2_1*npy*pz))+(((0.0023293525)*gclwh9_1*r20))+(((0.09595)*gclwh15_0*rxp0_2))+(((1.2)*gclwh9_9*npx*pz))+(((-0.505)*gclwh7_0*pp*r21))+(((-0.5162)*gclwh11_1*npz*pz))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.505)*gclwh2_0*pp*r21))+(((0.004557625)*gclwh11_0*r22))+(((0.19)*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.004557625)*gclwh2_0*r21))+(((0.19)*gclwh13_10*rxp1_2))+(((0.6)*gclwh7_9*pp*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+(((-0.049039)*gclwh5_1*rxp2_2))+((gclwh9_0*pp*pz*r20))+(((0.249075)*gclwh9_1*pp*r20)));
IkReal x645=((0.11)*pp);
IkReal x646=(gclwh11_7*r22);
IkReal x647=(gclwh11_9*r22);
IkReal x648=(npx*pz);
IkReal x649=(gclwh9_10*r20);
IkReal x650=(gclwh7_7*r21);
IkReal x651=(gclwh9_15*r20);
IkReal x652=((0.22)*pp);
IkReal x653=(pp*r21);
IkReal x654=(npy*pz);
IkReal x655=(gclwh7_15*r21);
IkReal x656=(gclwh9_7*r20);
IkReal x657=(gclwh11_13*r22);
IkReal x658=(gclwh11_15*r22);
IkReal x659=(gclwh9_13*r20);
IkReal x660=(npz*pz);
IkReal x661=(gclwh11_10*r22);
IkReal x662=((2.0)*pp);
IkReal x663=((0.48)*pp);
IkReal x664=(gclwh9_9*r20);
IkReal x665=((0.53)*pp);
IkReal x666=((0.00099275)*x650);
IkReal x667=((0.0209)*gclwh5_7*rxp2_2);
IkReal x668=((0.0209)*gclwh13_7*rxp1_2);
IkReal x669=((0.00099275)*x651);
IkReal x670=((0.00099275)*x658);
IkReal x671=((0.0209)*gclwh15_7*rxp0_2);
IkReal x672=((0.00099275)*x655);
IkReal x673=((0.00099275)*x656);
IkReal x674=((0.00099275)*x646);
IkReal x675=(gclwh11_15*x660);
IkReal x676=((0.22)*gclwh7_15*x654);
IkReal x677=(x645*x650);
IkReal x678=((0.22)*gclwh9_7*x648);
IkReal x679=(x645*x651);
IkReal x680=(x645*x658);
IkReal x681=((0.22)*gclwh11_7*x660);
IkReal x682=(x645*x655);
IkReal x683=((0.22)*gclwh7_7*x654);
IkReal x684=(x645*x646);
IkReal x685=(x645*x656);
IkReal x686=((0.22)*x675);
IkReal x687=((0.22)*gclwh9_15*x648);
IkReal x688=(x672+x682+x687+x686);
IkReal x689=(x669+x679+x670+x676+x680);
IkReal x690=(x668+x667+x666+x678+x677+x681);
IkReal x691=(x673+x671+x674+x683+x685+x684);
op[67]=((((-1.0)*x689))+x688+x690+(((-1.0)*x691)));
op[68]=((((-1.0)*x651*x652))+((x652*x655))+(((-0.0019855)*x658))+(((-0.0019855)*x651))+(((-0.44)*gclwh7_15*x654))+(((0.0019855)*x655))+(((0.44)*x675))+(((0.44)*gclwh9_15*x648))+(((-1.0)*x652*x658)));
op[69]=((0.00105)+(((-0.48)*gclwh7_13*x653))+(((0.0912)*gclwh15_13*rxp0_2))+(((0.004332)*x659))+(((0.004332)*x657))+(((-0.004332)*gclwh7_13*r21))+(((-0.53)*gclwh7_9*x653))+((x649*x662))+(((-1.06)*gclwh11_9*x660))+((x664*x665))+(((-0.38)*gclwh5_10*rxp2_2))+(((-0.96)*gclwh11_13*x660))+((x657*x663))+(((0.00478325)*x647))+(((-0.38)*gclwh13_10*rxp1_2))+(((1.06)*gclwh7_9*x654))+(((-0.01805)*gclwh7_10*r21))+(((-1.06)*gclwh9_9*x648))+(((-0.0912)*gclwh5_13*rxp2_2))+(((-0.96)*gclwh9_13*x648))+(((-4.0)*gclwh11_10*x660))+(((0.00478325)*x664))+(((0.01805)*x649))+(((-4.0)*gclwh9_10*x648))+(((-0.0912)*gclwh13_13*rxp1_2))+((x661*x662))+(((0.38)*gclwh15_10*rxp0_2))+((x659*x663))+(((-2.0)*gclwh7_10*x653))+(((-0.00478325)*gclwh7_9*r21))+((x647*x665))+(((0.01805)*x661))+(((4.0)*gclwh7_10*x654))+(((0.96)*gclwh7_13*x654)));
op[70]=((-0.011475)+(((0.0074)*gclwh2_1*npy*pz))+(((0.000225625)*gclwh11_0*r22))+(((-0.00063175)*gclwh11_9*r22))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((-3.33925e-5)*gclwh7_1*r21))+(((-0.19)*gclwh5_10*rxp2_2))+(((-0.005325)*gclwh11_1*pp*r22))+(((0.14)*gclwh9_9*npx*pz))+(((-0.00475)*gclwh13_0*rxp1_2))+(((0.0074)*gclwh7_1*npy*pz))+(((0.009025)*gclwh11_10*r22))+(((0.19)*pz))+(((0.025)*gclwh11_0*pp*r22))+(((0.00475)*gclwh15_0*rxp0_2))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-2.0)*gclwh11_10*npz*pz))+(((0.07)*gclwh7_9*pp*r21))+((gclwh7_1*r21*(pp*pp)))+(((3.33925e-5)*gclwh9_1*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-0.012725)*gclwh0_1*pp*r20))+(((0.005325)*gclwh7_1*pp*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.025)*gclwh2_0*pp*r21))+(((3.33925e-5)*gclwh2_1*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((-0.07)*gclwh9_9*pp*r20))+(((-0.00475)*gclwh5_0*rxp2_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-1.0)*gclwh7_10*pp*r21))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.025)*gclwh0_0*pp*r20))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((0.05)*gclwh2_0*npy*pz))+(((-0.05)*gclwh11_0*npz*pz))+(((-0.14)*gclwh7_9*npy*pz))+(((3.33925e-5)*gclwh0_1*r20))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.000225625)*gclwh9_0*r20))+(((0.009025)*gclwh11_0*pz*r22))+(((-0.0074)*gclwh9_1*npx*pz))+((gclwh11_0*pp*pz*r22))+(((0.000225625)*gclwh0_0*r20))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.012725)*gclwh2_1*pp*r21))+(((0.05)*gclwh0_0*npx*pz))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.05)*gclwh9_0*npx*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.005325)*gclwh9_1*pp*r20))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.07)*gclwh11_9*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((0.0074)*gclwh0_1*npx*pz))+(((0.025)*gclwh9_0*pp*r20))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((0.19)*gclwh15_10*rxp0_2))+(((0.000225625)*gclwh2_0*r21))+(((0.05)*gclwh7_0*npy*pz))+(((-0.009025)*gclwh7_10*r21))+(((2.0)*gclwh7_10*npy*pz))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.025)*gclwh7_0*pp*r21))+(((-0.00063175)*gclwh9_9*r20))+(((0.19)*gclwh5_1*pp*rxp2_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.14)*gclwh11_9*npz*pz))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.00063175)*gclwh7_9*r21))+(((-2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.0074)*gclwh11_1*npz*pz))+((gclwh0_1*r20*(pp*pp)))+(((-0.000225625)*gclwh7_0*r21))+(((-0.000703)*gclwh5_1*rxp2_2))+((gclwh9_0*pp*pz*r20))+(((3.33925e-5)*gclwh11_1*r22)));
op[71]=((((-1.0)*x688))+x689+x690+(((-1.0)*x691)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x692=htj1*htj1;
CheckValue<IkReal> x693=IKPowWithIntegerCheck(((1.0)+x692),-1);
if(!x693.valid){
continue;
}
cj1array[numsolutions]=((x693.value)*(((1.0)+(((-1.0)*x692)))));
CheckValue<IkReal> x694=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x694.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x694.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x695=htj2*htj2;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(((1.0)+x695),-1);
if(!x696.valid){
continue;
}
cj2array[numsolutions]=((x696.value)*(((1.0)+(((-1.0)*x695)))));
CheckValue<IkReal> x697=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x697.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x697.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x698=htj3*htj3;
CheckValue<IkReal> x699=IKPowWithIntegerCheck(((1.0)+x698),-1);
if(!x699.valid){
continue;
}
cj3array[numsolutions]=((x699.value)*(((1.0)+(((-1.0)*x698)))));
CheckValue<IkReal> x700=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x700.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x700.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x701=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x701);
rxp1_0=(pz*r11);
rxp1_1=(r01*x701);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x702=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x702);
rxp1_0=(pz*r11);
rxp1_1=(r01*x702);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x703=IKPowWithIntegerCheck(cj3,-1);
if(!x703.valid){
continue;
}
CheckValue<IkReal> x704=IKPowWithIntegerCheck(r22,-1);
if(!x704.valid){
continue;
}
cj4array[0]=((-1.0)*(x703.value)*(x704.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x705=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x705);
rxp1_0=(pz*r11);
rxp1_1=(r01*x705);
IkReal x706=((4.0)*r00);
IkReal x707=(cj3*sj4);
IkReal x708=((4.0)*sj3);
IkReal x709=((8.0)*r01);
IkReal x710=(sj1*sj2);
IkReal x711=(r02*sj4);
IkReal x712=((4.0)*r10);
IkReal x713=((16.0)*r11);
IkReal x714=(r12*sj4);
IkReal x715=((16.0)*sj3);
IkReal x716=(cj3*cj4);
IkReal x717=((16.0)*r01);
IkReal x718=((8.0)*sj3);
IkReal x719=((8.0)*r11);
IkReal x720=(r01*x708);
IkReal x721=(r11*x708);
IkReal x722=(cj1*cj2*cj4);
IkReal x723=((4.0)*cj1*cj2);
IkReal x724=((12.0)*cj1*cj2);
IkReal x725=((12.0)*r02*x716);
IkReal x726=(x706*x707);
IkReal x727=(x707*x712);
IkReal x728=((12.0)*r12*x716);
IkReal x729=(cj4*r01*x710);
IkReal x730=(cj4*x710*x712);
IkReal x731=(x714*x724);
IkReal x732=((12.0)*x710*x714);
IkReal x733=(x712*x722);
IkReal x734=(x706*x722);
IkReal x735=(cj4*x706*x710);
IkReal x736=((12.0)*x710*x711);
IkReal x737=(x711*x724);
IkReal x738=(x737+x728);
IkReal x739=(x732+x725);
IkReal x740=(x735+x721+x727);
IkReal x741=(x733+x720+x726);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x730))+(((-1.0)*x739))+x731+x741)))))+(((0.5)*(IKabs(((((-1.0)*x739))+x731+x730+(((-1.0)*x741)))))))+(IKabs((((cj4*x709*x710))+(((-1.0)*x709*x722))+((x707*x719))+(((-1.0)*r10*x718)))))+(IKabs(((((-1.0)*cj4*x710*x719))+((x707*x709))+((x719*x722))+(((-1.0)*r00*x718)))))+(((0.5)*(IKabs(((((-1.0)*x738))+x736+x734+(((-1.0)*x740)))))))+(((0.5)*(IKabs(((((-4.0)*x710*x714))+(((-1.0)*x730))+x741+(((-4.0)*r02*x716))+((x714*x723)))))))+(((0.5)*(IKabs((((x707*x713))+(((-1.0)*x717*x722))+((cj4*x710*x717))+(((-1.0)*r10*x715)))))))+(((0.5)*(IKabs((((x713*x722))+(((-1.0)*cj4*x710*x713))+((x707*x717))+(((-1.0)*r00*x715)))))))+(((0.5)*(IKabs(((((-1.0)*x734))+(((-1.0)*x738))+x736+x740)))))+(((0.5)*(IKabs(((((-4.0)*r12*x716))+(((-1.0)*x734))+(((4.0)*x710*x711))+x740+(((-1.0)*x711*x723))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x742=(cj1*cj2);
IkReal x743=(sj1*sj2);
IkReal x744=(r10*sj3);
IkReal x745=((4.0)*r11*sj3);
IkReal x746=(cj3*cj4*r12);
IkReal x747=((4.0)*r02*sj4);
IkReal x748=((16.0)*cj4*r01);
IkReal x749=((12.0)*r02*sj4);
IkReal x750=(cj3*r11*sj4);
IkReal x751=((8.0)*cj4*r01);
IkReal x752=((4.0)*cj4*r00);
IkReal x753=((4.0)*cj3*r10*sj4);
IkReal x754=((12.0)*x746);
IkReal x755=((4.0)*x746);
IkReal x756=(x743*x752);
IkReal x757=(x742*x752);
IkReal x758=(x743*x749);
IkReal x759=(x742*x749);
IkReal x760=(x743*x747);
IkReal x761=(x742*x747);
IkReal x762=(x754+x759);
IkReal x763=(x755+x761);
IkReal x764=(x756+x753+x745);
IkReal x765=((((-1.0)*x742*x751))+(((8.0)*x750))+((x743*x751))+(((-8.0)*x744)));
op[0]=((((-1.0)*x763))+x764+x760+(((-1.0)*x757)));
op[1]=x765;
op[2]=((((-1.0)*x762))+x758+x764+(((-1.0)*x757)));
op[3]=((((-16.0)*x744))+(((-1.0)*x742*x748))+((x743*x748))+(((16.0)*x750)));
op[4]=((((-1.0)*x764))+(((-1.0)*x762))+x757+x758);
op[5]=x765;
op[6]=((((-1.0)*x764))+(((-1.0)*x763))+x757+x760);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x766=(sj1*sj2);
IkReal x767=(r12*sj4);
IkReal x768=(cj1*cj2);
IkReal x769=(cj4*r11);
IkReal x770=(r00*sj3);
IkReal x771=(cj3*sj4);
IkReal x772=((4.0)*r01*sj3);
IkReal x773=((4.0)*cj4*r10);
IkReal x774=(cj3*cj4*r02);
IkReal x775=((4.0)*r00*x771);
IkReal x776=((12.0)*x774);
IkReal x777=((4.0)*x774);
IkReal x778=(x766*x773);
IkReal x779=((4.0)*x767*x768);
IkReal x780=(x768*x773);
IkReal x781=((12.0)*x767*x768);
IkReal x782=((12.0)*x766*x767);
IkReal x783=((4.0)*x766*x767);
IkReal x784=(x777+x783);
IkReal x785=(x776+x782);
IkReal x786=(x772+x775+x780);
IkReal x787=((((8.0)*r01*x771))+(((-8.0)*x770))+(((8.0)*x768*x769))+(((-8.0)*x766*x769)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x786))+(((-1.0)*x785))+x778+x781))))+(((-1.0)*x784))+(((-1.0)*x786))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x785))+x781+x786+(((-1.0)*x778))))))+((x787*(htj5*htj5*htj5*htj5*htj5)))+x779+x778+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x784))+x779+x786+(((-1.0)*x778))))))+((htj5*x787))+(((htj5*htj5*htj5)*(((((-16.0)*x770))+(((16.0)*x768*x769))+(((-16.0)*x766*x769))+(((16.0)*r01*x771)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x788=(cj4*cj5);
IkReal x789=(cj4*sj5);
if( IKabs((((r01*x789))+(((-1.0)*r00*x788))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x788))+(((-1.0)*r12*sj4))+(((-1.0)*r11*x789)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x789))+(((-1.0)*r00*x788))+((r02*sj4))))+IKsqr((((r10*x788))+(((-1.0)*r12*sj4))+(((-1.0)*r11*x789))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x789))+(((-1.0)*r00*x788))+((r02*sj4))), (((r10*x788))+(((-1.0)*r12*sj4))+(((-1.0)*r11*x789))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x790=IKcos(j0);
IkReal x791=IKsin(j0);
IkReal x792=(cj3*cj4);
IkReal x793=((1.0)*sj2);
IkReal x794=(cj5*r01);
IkReal x795=(cj1*cj2);
IkReal x796=((0.24)*cj2);
IkReal x797=(sj3*sj4);
IkReal x798=(r01*sj5);
IkReal x799=(cj5*r11);
IkReal x800=(r00*sj5);
IkReal x801=(r11*sj5);
IkReal x802=(cj3*r10);
IkReal x803=(cj5*sj4);
IkReal x804=(r10*sj5);
IkReal x805=(sj1*x791);
IkReal x806=((1.0)*cj4*sj3);
IkReal x807=((1.0)*cj5*r00);
IkReal x808=(sj1*x790);
IkReal x809=((1.0)*cj3*sj4);
IkReal x810=((1.0)*cj5*r10);
IkReal x811=(cj1*sj2*x790);
IkReal x812=(cj1*sj2*x791);
evalcond[0]=(((cj4*x801))+(((-1.0)*cj4*x810))+((r12*sj4))+x790);
evalcond[1]=((((-1.0)*cj4*x807))+((r02*sj4))+((cj4*x798))+(((-1.0)*x791)));
evalcond[2]=((((0.24)*x811))+(((-0.11)*x791))+(((-1.0)*px))+(((0.265)*x808))+(((-0.095)*x800))+(((-0.095)*x794))+((x796*x808)));
evalcond[3]=((((0.24)*x812))+(((-1.0)*py))+(((0.265)*x805))+(((-0.095)*x804))+(((0.11)*x790))+(((-0.095)*x799))+((x796*x805)));
evalcond[4]=((((-1.0)*x797*x807))+(((-1.0)*r02*x806))+((cj2*x808))+((cj3*x800))+x811+((cj3*x794))+((x797*x798)));
evalcond[5]=(((sj3*x800))+((cj3*r00*x803))+(((-1.0)*x798*x809))+((x790*x795))+(((-1.0)*x793*x808))+((r02*x792))+((sj3*x794)));
evalcond[6]=((((-1.0)*r12*x806))+((x797*x801))+((cj2*x805))+x812+((cj3*x799))+((sj5*x802))+(((-1.0)*x797*x810)));
evalcond[7]=(((sj3*x804))+(((-1.0)*x793*x805))+(((-1.0)*x801*x809))+((x802*x803))+((r12*x792))+((x791*x795))+((sj3*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x813=IKPowWithIntegerCheck(r22,-1);
if(!x813.valid){
continue;
}
CheckValue<IkReal> x814=IKPowWithIntegerCheck(sj3,-1);
if(!x814.valid){
continue;
}
cj4array[0]=((x813.value)*(x814.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x815=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x815);
rxp1_0=(pz*r11);
rxp1_1=(r01*x815);
IkReal x816=((4.0)*r00);
IkReal x817=(cj3*sj4);
IkReal x818=((4.0)*sj3);
IkReal x819=((8.0)*r01);
IkReal x820=(sj1*sj2);
IkReal x821=(r02*sj4);
IkReal x822=((4.0)*r10);
IkReal x823=((16.0)*r11);
IkReal x824=(r12*sj4);
IkReal x825=((16.0)*sj3);
IkReal x826=(cj3*cj4);
IkReal x827=((16.0)*r01);
IkReal x828=((8.0)*sj3);
IkReal x829=((8.0)*r11);
IkReal x830=(r01*x818);
IkReal x831=(r11*x818);
IkReal x832=(cj1*cj2*cj4);
IkReal x833=((4.0)*cj1*cj2);
IkReal x834=((12.0)*cj1*cj2);
IkReal x835=((12.0)*r02*x826);
IkReal x836=(x816*x817);
IkReal x837=(x817*x822);
IkReal x838=((12.0)*r12*x826);
IkReal x839=(cj4*r01*x820);
IkReal x840=(cj4*x820*x822);
IkReal x841=(x824*x834);
IkReal x842=((12.0)*x820*x824);
IkReal x843=(x822*x832);
IkReal x844=(x816*x832);
IkReal x845=(cj4*x816*x820);
IkReal x846=((12.0)*x820*x821);
IkReal x847=(x821*x834);
IkReal x848=(x838+x847);
IkReal x849=(x835+x842);
IkReal x850=(x837+x831+x845);
IkReal x851=(x836+x830+x843);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x844))+(((-1.0)*x848))+x850+x846)))))+(((0.5)*(IKabs(((((-1.0)*x821*x833))+(((4.0)*x820*x821))+(((-1.0)*x844))+x850+(((-4.0)*r12*x826)))))))+(((0.5)*(IKabs((((x817*x827))+((x823*x832))+(((-1.0)*r00*x825))+(((-1.0)*cj4*x820*x823)))))))+(((0.5)*(IKabs(((((-1.0)*x851))+(((-1.0)*x849))+x841+x840)))))+(((0.5)*(IKabs(((((-4.0)*r02*x826))+((x824*x833))+(((-1.0)*x840))+(((-4.0)*x820*x824))+x851)))))+(((0.5)*(IKabs(((((-1.0)*x850))+(((-1.0)*x848))+x844+x846)))))+(((0.5)*(IKabs(((((-1.0)*x827*x832))+((x817*x823))+(((-1.0)*r10*x825))+((cj4*x820*x827)))))))+(IKabs((((x817*x829))+(((-1.0)*x819*x832))+(((-1.0)*r10*x828))+((cj4*x819*x820)))))+(IKabs((((x829*x832))+((x817*x819))+(((-1.0)*r00*x828))+(((-1.0)*cj4*x820*x829)))))+(((0.5)*(IKabs(((((-1.0)*x840))+(((-1.0)*x849))+x851+x841))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x852=(cj1*cj2);
IkReal x853=(sj1*sj2);
IkReal x854=(r10*sj3);
IkReal x855=((4.0)*r11*sj3);
IkReal x856=(cj3*cj4*r12);
IkReal x857=((4.0)*r02*sj4);
IkReal x858=((16.0)*cj4*r01);
IkReal x859=((12.0)*r02*sj4);
IkReal x860=(cj3*r11*sj4);
IkReal x861=((8.0)*cj4*r01);
IkReal x862=((4.0)*cj4*r00);
IkReal x863=((4.0)*cj3*r10*sj4);
IkReal x864=((12.0)*x856);
IkReal x865=((4.0)*x856);
IkReal x866=(x853*x862);
IkReal x867=(x852*x862);
IkReal x868=(x853*x859);
IkReal x869=(x852*x859);
IkReal x870=(x853*x857);
IkReal x871=(x852*x857);
IkReal x872=(x869+x864);
IkReal x873=(x865+x871);
IkReal x874=(x855+x866+x863);
IkReal x875=((((-8.0)*x854))+(((-1.0)*x852*x861))+((x853*x861))+(((8.0)*x860)));
op[0]=((((-1.0)*x867))+x870+x874+(((-1.0)*x873)));
op[1]=x875;
op[2]=((((-1.0)*x867))+x868+x874+(((-1.0)*x872)));
op[3]=((((-16.0)*x854))+(((-1.0)*x852*x858))+(((16.0)*x860))+((x853*x858)));
op[4]=(x868+x867+(((-1.0)*x872))+(((-1.0)*x874)));
op[5]=x875;
op[6]=(x867+x870+(((-1.0)*x874))+(((-1.0)*x873)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x876=(sj1*sj2);
IkReal x877=(r12*sj4);
IkReal x878=(cj1*cj2);
IkReal x879=(cj4*r11);
IkReal x880=(r00*sj3);
IkReal x881=(cj3*sj4);
IkReal x882=((4.0)*r01*sj3);
IkReal x883=((4.0)*cj4*r10);
IkReal x884=(cj3*cj4*r02);
IkReal x885=((4.0)*r00*x881);
IkReal x886=((12.0)*x884);
IkReal x887=((4.0)*x884);
IkReal x888=(x876*x883);
IkReal x889=((4.0)*x877*x878);
IkReal x890=(x878*x883);
IkReal x891=((12.0)*x877*x878);
IkReal x892=((12.0)*x876*x877);
IkReal x893=((4.0)*x876*x877);
IkReal x894=(x887+x893);
IkReal x895=(x886+x892);
IkReal x896=(x885+x882+x890);
IkReal x897=((((-8.0)*x880))+(((8.0)*r01*x881))+(((8.0)*x878*x879))+(((-8.0)*x876*x879)));
j5evalpoly[0]=(((x897*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x894))+(((-1.0)*x896))+(((htj5*htj5)*(((((-1.0)*x895))+(((-1.0)*x896))+x888+x891))))+((htj5*x897))+x889+x888+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x894))+(((-1.0)*x888))+x889+x896))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x895))+(((-1.0)*x888))+x896+x891))))+(((htj5*htj5*htj5)*(((((16.0)*x878*x879))+(((-16.0)*x880))+(((16.0)*r01*x881))+(((-16.0)*x876*x879)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x898=(cj4*cj5);
IkReal x899=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x898))+((r01*x899))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x899))+((r10*x898))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x898))+((r01*x899))+((r02*sj4))))+IKsqr(((((-1.0)*r11*x899))+((r10*x898))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x898))+((r01*x899))+((r02*sj4))), ((((-1.0)*r11*x899))+((r10*x898))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x900=IKcos(j0);
IkReal x901=IKsin(j0);
IkReal x902=(cj3*cj4);
IkReal x903=((1.0)*sj2);
IkReal x904=(cj5*r01);
IkReal x905=(cj1*cj2);
IkReal x906=((0.24)*cj2);
IkReal x907=(sj3*sj4);
IkReal x908=(r01*sj5);
IkReal x909=(cj5*r11);
IkReal x910=(r00*sj5);
IkReal x911=(r11*sj5);
IkReal x912=(cj3*r10);
IkReal x913=(cj5*sj4);
IkReal x914=(r10*sj5);
IkReal x915=(sj1*x901);
IkReal x916=((1.0)*cj4*sj3);
IkReal x917=((1.0)*cj5*r00);
IkReal x918=(sj1*x900);
IkReal x919=((1.0)*cj3*sj4);
IkReal x920=((1.0)*cj5*r10);
IkReal x921=(cj1*sj2*x900);
IkReal x922=(cj1*sj2*x901);
evalcond[0]=(((r12*sj4))+(((-1.0)*cj4*x920))+((cj4*x911))+x900);
evalcond[1]=(((r02*sj4))+(((-1.0)*cj4*x917))+((cj4*x908))+(((-1.0)*x901)));
evalcond[2]=((((-0.11)*x901))+(((-0.095)*x910))+(((0.24)*x921))+(((-1.0)*px))+((x906*x918))+(((-0.095)*x904))+(((0.265)*x918)));
evalcond[3]=((((-0.095)*x914))+(((0.24)*x922))+(((-1.0)*py))+((x906*x915))+(((-0.095)*x909))+(((0.265)*x915))+(((0.11)*x900)));
evalcond[4]=(((cj3*x904))+((x907*x908))+((cj2*x918))+(((-1.0)*r02*x916))+((cj3*x910))+(((-1.0)*x907*x917))+x921);
evalcond[5]=((((-1.0)*x908*x919))+((sj3*x904))+((cj3*r00*x913))+((r02*x902))+((sj3*x910))+((x900*x905))+(((-1.0)*x903*x918)));
evalcond[6]=(((sj5*x912))+((cj3*x909))+((cj2*x915))+((x907*x911))+(((-1.0)*r12*x916))+(((-1.0)*x907*x920))+x922);
evalcond[7]=(((sj3*x909))+((x901*x905))+((sj3*x914))+((r12*x902))+((x912*x913))+(((-1.0)*x911*x919))+(((-1.0)*x903*x915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x923=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x923);
rxp1_0=(pz*r11);
rxp1_1=(r01*x923);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x924=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x924);
rxp1_0=(pz*r11);
rxp1_1=(r01*x924);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x925=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x925);
rxp1_0=(pz*r11);
rxp1_1=(r01*x925);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(r22,-1);
if(!x926.valid){
continue;
}
cj4array[0]=((x926.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x929 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x929.valid){
continue;
}
IkReal x928=x929.value;
j5array[0]=((-1.0)*x928);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x928)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x930=(cj4*cj5);
IkReal x931=(cj4*sj5);
if( IKabs((((r01*x931))+(((-1.0)*r00*x930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x930))+(((-1.0)*r11*x931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x931))+(((-1.0)*r00*x930))))+IKsqr((((r10*x930))+(((-1.0)*r11*x931))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x931))+(((-1.0)*r00*x930))), (((r10*x930))+(((-1.0)*r11*x931))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x932=IKcos(j0);
IkReal x933=IKsin(j0);
IkReal x934=(cj5*r01);
IkReal x935=((1.0)*sj2);
IkReal x936=(cj1*cj2);
IkReal x937=(r00*sj5);
IkReal x938=(cj5*r11);
IkReal x939=(cj4*sj5);
IkReal x940=(r10*sj5);
IkReal x941=(sj1*x933);
IkReal x942=((1.0)*cj4*cj5);
IkReal x943=(sj1*x932);
evalcond[0]=(((r11*x939))+(((-1.0)*r10*x942))+x932);
evalcond[1]=((((-1.0)*r00*x942))+(((-1.0)*x933))+((r01*x939)));
evalcond[2]=(x934+x937+(((-1.0)*x935*x943))+((x932*x936)));
evalcond[3]=(x938+x940+(((-1.0)*x935*x941))+((x933*x936)));
evalcond[4]=((((-1.0)*px))+(((0.265)*x943))+(((-0.095)*x934))+(((-0.095)*x937))+(((-0.11)*x933)));
evalcond[5]=((((0.11)*x932))+(((-1.0)*py))+(((-0.095)*x940))+(((0.265)*x941))+(((-0.095)*x938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x944=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x944);
rxp1_0=(pz*r11);
rxp1_1=(r01*x944);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x945=IKPowWithIntegerCheck(r22,-1);
if(!x945.valid){
continue;
}
cj4array[0]=((-1.0)*(x945.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x946=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x946);
rxp1_0=(pz*r11);
rxp1_1=(r01*x946);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
IkReal x947=x948.value;
j5array[0]=((-1.0)*x947);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x947)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x949=(cj4*cj5);
IkReal x950=(cj4*sj5);
if( IKabs((((r01*x950))+(((-1.0)*r00*x949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x950))+((r10*x949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x950))+(((-1.0)*r00*x949))))+IKsqr(((((-1.0)*r11*x950))+((r10*x949))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x950))+(((-1.0)*r00*x949))), ((((-1.0)*r11*x950))+((r10*x949))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x951=IKcos(j0);
IkReal x952=IKsin(j0);
IkReal x953=((1.0)*sj2);
IkReal x954=(cj1*cj2);
IkReal x955=((1.0)*cj5);
IkReal x956=(r00*sj5);
IkReal x957=((0.095)*cj5);
IkReal x958=(r10*sj5);
IkReal x959=(cj4*sj5);
IkReal x960=(sj1*x952);
IkReal x961=(sj1*x951);
evalcond[0]=((((-1.0)*cj4*r10*x955))+((r11*x959))+x951);
evalcond[1]=((((-1.0)*cj4*r00*x955))+(((-1.0)*x952))+((r01*x959)));
evalcond[2]=(((x951*x954))+(((-1.0)*r01*x955))+(((-1.0)*x956))+(((-1.0)*x953*x961)));
evalcond[3]=(((x952*x954))+(((-1.0)*x958))+(((-1.0)*x953*x960))+(((-1.0)*r11*x955)));
evalcond[4]=((((0.265)*x961))+(((-0.095)*x956))+(((-1.0)*r01*x957))+(((-1.0)*px))+(((-0.11)*x952)));
evalcond[5]=((((0.265)*x960))+(((-0.095)*x958))+(((0.11)*x951))+(((-1.0)*py))+(((-1.0)*r11*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x962=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x962);
rxp1_0=(pz*r11);
rxp1_1=(r01*x962);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x963=IKPowWithIntegerCheck(r22,-1);
if(!x963.valid){
continue;
}
cj4array[0]=((-1.0)*(x963.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x964=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x964);
rxp1_0=(pz*r11);
rxp1_1=(r01*x964);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x966 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x966.valid){
continue;
}
IkReal x965=x966.value;
j5array[0]=((-1.0)*x965);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x965)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x967=(cj4*cj5);
IkReal x968=(cj4*sj5);
if( IKabs((((r01*x968))+(((-1.0)*r00*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x968))+((r10*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x968))+(((-1.0)*r00*x967))))+IKsqr(((((-1.0)*r11*x968))+((r10*x967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x968))+(((-1.0)*r00*x967))), ((((-1.0)*r11*x968))+((r10*x967))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x969=IKcos(j0);
IkReal x970=IKsin(j0);
IkReal x971=(r00*sj5);
IkReal x972=(cj5*r01);
IkReal x973=((0.24)*cj2);
IkReal x974=(cj5*r11);
IkReal x975=(cj1*sj2);
IkReal x976=(cj4*sj5);
IkReal x977=(r10*sj5);
IkReal x978=(sj1*x970);
IkReal x979=((1.0)*cj4*cj5);
IkReal x980=(sj1*x969);
evalcond[0]=(((r11*x976))+x969+(((-1.0)*r10*x979)));
evalcond[1]=((((-1.0)*x970))+(((-1.0)*r00*x979))+((r01*x976)));
evalcond[2]=(((x969*x975))+((cj2*x980))+x971+x972);
evalcond[3]=(((cj2*x978))+((x970*x975))+x974+x977);
evalcond[4]=((((-0.095)*x971))+(((-0.095)*x972))+(((0.24)*x969*x975))+((x973*x980))+(((-1.0)*px))+(((-0.11)*x970))+(((0.265)*x980)));
evalcond[5]=((((-0.095)*x974))+(((-0.095)*x977))+(((0.24)*x970*x975))+(((0.11)*x969))+((x973*x978))+(((-1.0)*py))+(((0.265)*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x981=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(r22,-1);
if(!x982.valid){
continue;
}
cj4array[0]=((x982.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x983=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
IkReal x984=x985.value;
j5array[0]=((-1.0)*x984);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x984)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x986=(cj4*cj5);
IkReal x987=(cj4*sj5);
if( IKabs((((r01*x987))+(((-1.0)*r00*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x987))+((r10*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x987))+(((-1.0)*r00*x986))))+IKsqr(((((-1.0)*r11*x987))+((r10*x986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x987))+(((-1.0)*r00*x986))), ((((-1.0)*r11*x987))+((r10*x986))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x988=IKcos(j0);
IkReal x989=IKsin(j0);
IkReal x990=(r00*sj5);
IkReal x991=((0.24)*cj2);
IkReal x992=((1.0)*cj5);
IkReal x993=((0.095)*cj5);
IkReal x994=(r10*sj5);
IkReal x995=(cj4*sj5);
IkReal x996=(sj1*x989);
IkReal x997=(sj1*x988);
IkReal x998=(cj1*sj2*x988);
IkReal x999=(cj1*sj2*x989);
evalcond[0]=((((-1.0)*cj4*r10*x992))+x988+((r11*x995)));
evalcond[1]=((((-1.0)*x989))+((r01*x995))+(((-1.0)*cj4*r00*x992)));
evalcond[2]=((((-1.0)*x990))+(((-1.0)*r01*x992))+x998+((cj2*x997)));
evalcond[3]=((((-1.0)*x994))+(((-1.0)*r11*x992))+x999+((cj2*x996)));
evalcond[4]=(((x991*x997))+(((0.265)*x997))+(((-0.095)*x990))+(((-0.11)*x989))+(((-1.0)*px))+(((-1.0)*r01*x993))+(((0.24)*x998)));
evalcond[5]=(((x991*x996))+(((0.11)*x988))+(((-1.0)*r11*x993))+(((0.265)*x996))+(((-0.095)*x994))+(((-1.0)*py))+(((0.24)*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1000=IKPowWithIntegerCheck(cj3,-1);
if(!x1000.valid){
continue;
}
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(r22,-1);
if(!x1001.valid){
continue;
}
cj4array[0]=((-1.0)*(x1000.value)*(x1001.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1002=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1002);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1002);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1003=((0.38)*r11);
IkReal x1004=((0.38)*r01);
IkReal x1005=((12.0)*px);
IkReal x1006=((12.0)*py);
IkReal x1007=((1.92)*r01);
IkReal x1008=((0.96)*r00);
IkReal x1009=((0.44)*cj4);
IkReal x1010=((0.88)*cj4);
IkReal x1011=((3.84)*cj2);
IkReal x1012=((1.76)*cj4);
IkReal x1013=(cj4*sj1);
IkReal x1014=((0.96)*r10);
IkReal x1015=(r10*x1009);
IkReal x1016=(r00*x1009);
IkReal x1017=(cj1*cj4*sj2);
IkReal x1018=(r01*x1013);
IkReal x1019=(r11*x1013);
IkReal x1020=((1.06)*r00*x1013);
IkReal x1021=((1.06)*r10*x1013);
IkReal x1022=(x1008*x1017);
IkReal x1023=(cj2*x1008*x1013);
IkReal x1024=(x1014*x1017);
IkReal x1025=(cj2*x1013*x1014);
IkReal x1026=(x1003+x1020+x1023+x1022);
IkReal x1027=(x1016+x1025+x1024+x1021);
j5eval[0]=((((0.5)*(IKabs((x1026+(((-1.0)*x1015))+(((-4.0)*py)))))))+(((0.5)*(IKabs(((((-1.52)*r10))+(((3.84)*r01*x1017))+(((-1.0)*r11*x1012))+(((4.24)*x1018))+((x1011*x1018)))))))+(((0.5)*(IKabs((x1015+(((-1.0)*x1006))+(((-1.0)*x1026)))))))+(((0.5)*(IKabs((x1004+(((-1.0)*x1005))+(((-1.0)*x1027)))))))+(IKabs(((((2.12)*x1018))+((cj2*x1007*x1013))+(((-1.0)*r11*x1010))+((x1007*x1017))+(((-0.76)*r10)))))+(((0.5)*(IKabs(((((-1.0)*x1011*x1019))+(((-1.52)*r00))+(((-4.24)*x1019))+(((-1.0)*r01*x1012))+(((-3.84)*r11*x1017)))))))+(((0.5)*(IKabs((x1027+(((-1.0)*x1004))+(((-1.0)*x1005)))))))+(((0.5)*(IKabs((x1004+(((-1.0)*x1027))+(((-4.0)*px)))))))+(((0.5)*(IKabs((x1026+(((-1.0)*x1006))+(((-1.0)*x1015)))))))+(IKabs(((((-1.92)*cj2*x1019))+(((-2.12)*x1019))+(((-1.92)*r11*x1017))+(((-1.0)*r01*x1010))+(((-0.76)*r00))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1028=((12.0)*py);
IkReal x1029=((0.38)*r11);
IkReal x1030=((4.0)*py);
IkReal x1031=(cj4*r01);
IkReal x1032=(cj1*sj2);
IkReal x1033=(cj2*sj1);
IkReal x1034=(cj4*r00);
IkReal x1035=(cj4*r11);
IkReal x1036=((0.44)*cj4*r10);
IkReal x1037=((1.06)*sj1*x1034);
IkReal x1038=((0.96)*x1032*x1034);
IkReal x1039=((0.96)*x1033*x1034);
IkReal x1040=(x1038+x1039+x1037+x1029);
IkReal x1041=((((1.92)*x1031*x1032))+(((1.92)*x1031*x1033))+(((2.12)*sj1*x1031))+(((-0.88)*x1035))+(((-0.76)*r10)));
op[0]=((((-1.0)*x1036))+(((-1.0)*x1030))+x1040);
op[1]=x1041;
op[2]=((((-1.0)*x1036))+x1040+(((-1.0)*x1028)));
op[3]=((((4.24)*sj1*x1031))+(((-1.52)*r10))+(((-1.76)*x1035))+(((3.84)*x1031*x1032))+(((3.84)*x1031*x1033)));
op[4]=(x1036+(((-1.0)*x1028))+(((-1.0)*x1040)));
op[5]=x1041;
op[6]=((((-1.0)*x1030))+x1036+(((-1.0)*x1040)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1042=((0.38)*r01);
IkReal x1043=((12.0)*px);
IkReal x1044=((4.0)*px);
IkReal x1045=(cj4*r01);
IkReal x1046=((0.44)*cj4*r00);
IkReal x1047=(cj4*r11*sj1);
IkReal x1048=(cj1*cj4*sj2);
IkReal x1049=(cj4*r10*sj1);
IkReal x1050=((1.06)*x1049);
IkReal x1051=((0.96)*r10*x1048);
IkReal x1052=((0.96)*cj2*x1049);
IkReal x1053=(x1050+x1051+x1052+x1046);
IkReal x1054=((((-1.92)*cj2*x1047))+(((-2.12)*x1047))+(((-0.88)*x1045))+(((-1.92)*r11*x1048))+(((-0.76)*r00)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x1053))+x1042+(((-1.0)*x1043))))))+x1053+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1053))+x1042+(((-1.0)*x1044))))))+((htj5*x1054))+(((htj5*htj5*htj5)*(((((-1.52)*r00))+(((-4.24)*x1047))+(((-1.76)*x1045))+(((-3.84)*r11*x1048))+(((-3.84)*cj2*x1047))))))+(((htj5*htj5)*((x1053+(((-1.0)*x1042))+(((-1.0)*x1043))))))+(((-1.0)*x1044))+(((-1.0)*x1042))+((x1054*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1055=(cj4*cj5);
IkReal x1056=(cj4*sj5);
if( IKabs((((r01*x1056))+(((-1.0)*r00*x1055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1056))+((r10*x1055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1056))+(((-1.0)*r00*x1055))))+IKsqr(((((-1.0)*r11*x1056))+((r10*x1055))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1056))+(((-1.0)*r00*x1055))), ((((-1.0)*r11*x1056))+((r10*x1055))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1057=IKcos(j0);
IkReal x1058=IKsin(j0);
IkReal x1059=(r00*sj5);
IkReal x1060=((1.0)*sj2);
IkReal x1061=(cj5*r01);
IkReal x1062=(cj1*cj2);
IkReal x1063=((0.24)*cj2);
IkReal x1064=(sj3*sj4);
IkReal x1065=(r01*sj5);
IkReal x1066=(cj5*r11);
IkReal x1067=(r11*sj5);
IkReal x1068=(cj3*r10);
IkReal x1069=(cj5*sj4);
IkReal x1070=(r10*sj5);
IkReal x1071=(cj1*sj2);
IkReal x1072=(sj1*x1058);
IkReal x1073=((1.0)*cj5*r00);
IkReal x1074=(sj1*x1057);
IkReal x1075=((1.0)*cj3*sj4);
IkReal x1076=((1.0)*cj5*r10);
evalcond[0]=(x1057+(((-1.0)*cj4*x1076))+((cj4*x1067)));
evalcond[1]=((((-1.0)*cj4*x1073))+(((-1.0)*x1058))+((cj4*x1065)));
evalcond[2]=(((cj2*x1074))+((cj3*x1061))+((cj3*x1059))+((x1057*x1071))+(((-1.0)*x1064*x1073))+((x1064*x1065)));
evalcond[3]=(((x1058*x1071))+((sj5*x1068))+((cj2*x1072))+((cj3*x1066))+(((-1.0)*x1064*x1076))+((x1064*x1067)));
evalcond[4]=(((sj3*x1061))+((sj3*x1059))+((x1057*x1062))+(((-1.0)*x1065*x1075))+((cj3*r00*x1069))+(((-1.0)*x1060*x1074)));
evalcond[5]=(((x1068*x1069))+((sj3*x1070))+((sj3*x1066))+(((-1.0)*x1067*x1075))+((x1058*x1062))+(((-1.0)*x1060*x1072)));
evalcond[6]=((((0.265)*x1074))+(((-1.0)*px))+((x1063*x1074))+(((-0.11)*x1058))+(((-0.095)*x1059))+(((-0.095)*x1061))+(((0.24)*x1057*x1071)));
evalcond[7]=((((0.11)*x1057))+(((0.265)*x1072))+(((0.24)*x1058*x1071))+(((-1.0)*py))+((x1063*x1072))+(((-0.095)*x1066))+(((-0.095)*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(r22,-1);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078=IKPowWithIntegerCheck(sj3,-1);
if(!x1078.valid){
continue;
}
cj4array[0]=((x1077.value)*(x1078.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1079=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1079);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1079);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1080=((0.38)*r11);
IkReal x1081=((0.38)*r01);
IkReal x1082=((12.0)*px);
IkReal x1083=((12.0)*py);
IkReal x1084=((1.92)*r01);
IkReal x1085=((0.96)*r00);
IkReal x1086=((0.44)*cj4);
IkReal x1087=((0.88)*cj4);
IkReal x1088=((3.84)*cj2);
IkReal x1089=((1.76)*cj4);
IkReal x1090=(cj4*sj1);
IkReal x1091=((0.96)*r10);
IkReal x1092=(r10*x1086);
IkReal x1093=(r00*x1086);
IkReal x1094=(cj1*cj4*sj2);
IkReal x1095=(r01*x1090);
IkReal x1096=(r11*x1090);
IkReal x1097=((1.06)*r00*x1090);
IkReal x1098=((1.06)*r10*x1090);
IkReal x1099=(x1085*x1094);
IkReal x1100=(cj2*x1085*x1090);
IkReal x1101=(x1091*x1094);
IkReal x1102=(cj2*x1090*x1091);
IkReal x1103=(x1100+x1097+x1099+x1080);
IkReal x1104=(x1102+x1101+x1093+x1098);
j5eval[0]=((((0.5)*(IKabs((x1103+(((-1.0)*x1092))+(((-4.0)*py)))))))+(((0.5)*(IKabs((x1104+(((-1.0)*x1081))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs(((((-4.24)*x1096))+(((-1.0)*x1088*x1096))+(((-1.52)*r00))+(((-1.0)*r01*x1089))+(((-3.84)*r11*x1094)))))))+(IKabs(((((-1.92)*r11*x1094))+(((-2.12)*x1096))+(((-1.92)*cj2*x1096))+(((-1.0)*r01*x1087))+(((-0.76)*r00)))))+(((0.5)*(IKabs((x1081+(((-1.0)*x1104))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1103+(((-1.0)*x1092))+(((-1.0)*x1083)))))))+(((0.5)*(IKabs((x1092+(((-1.0)*x1103))+(((-1.0)*x1083)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x1089))+((x1088*x1095))+(((-1.52)*r10))+(((4.24)*x1095))+(((3.84)*r01*x1094)))))))+(IKabs(((((-1.0)*r11*x1087))+((x1084*x1094))+((cj2*x1084*x1090))+(((2.12)*x1095))+(((-0.76)*r10)))))+(((0.5)*(IKabs((x1081+(((-1.0)*x1104))+(((-4.0)*px))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1105=((12.0)*py);
IkReal x1106=((0.38)*r11);
IkReal x1107=((4.0)*py);
IkReal x1108=(cj4*r01);
IkReal x1109=(cj1*sj2);
IkReal x1110=(cj2*sj1);
IkReal x1111=(cj4*r00);
IkReal x1112=(cj4*r11);
IkReal x1113=((0.44)*cj4*r10);
IkReal x1114=((1.06)*sj1*x1111);
IkReal x1115=((0.96)*x1109*x1111);
IkReal x1116=((0.96)*x1110*x1111);
IkReal x1117=(x1106+x1115+x1114+x1116);
IkReal x1118=((((1.92)*x1108*x1110))+(((1.92)*x1108*x1109))+(((-0.88)*x1112))+(((-0.76)*r10))+(((2.12)*sj1*x1108)));
op[0]=(x1117+(((-1.0)*x1107))+(((-1.0)*x1113)));
op[1]=x1118;
op[2]=(x1117+(((-1.0)*x1105))+(((-1.0)*x1113)));
op[3]=((((-1.76)*x1112))+(((-1.52)*r10))+(((3.84)*x1108*x1110))+(((3.84)*x1108*x1109))+(((4.24)*sj1*x1108)));
op[4]=(x1113+(((-1.0)*x1105))+(((-1.0)*x1117)));
op[5]=x1118;
op[6]=(x1113+(((-1.0)*x1107))+(((-1.0)*x1117)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1119=((0.38)*r01);
IkReal x1120=((12.0)*px);
IkReal x1121=((4.0)*px);
IkReal x1122=(cj4*r01);
IkReal x1123=((0.44)*cj4*r00);
IkReal x1124=(cj4*r11*sj1);
IkReal x1125=(cj1*cj4*sj2);
IkReal x1126=(cj4*r10*sj1);
IkReal x1127=((1.06)*x1126);
IkReal x1128=((0.96)*r10*x1125);
IkReal x1129=((0.96)*cj2*x1126);
IkReal x1130=(x1128+x1129+x1123+x1127);
IkReal x1131=((((-1.92)*r11*x1125))+(((-2.12)*x1124))+(((-0.88)*x1122))+(((-0.76)*r00))+(((-1.92)*cj2*x1124)));
j5evalpoly[0]=(x1130+(((htj5*htj5*htj5*htj5)*((x1119+(((-1.0)*x1130))+(((-1.0)*x1120))))))+(((htj5*htj5)*((x1130+(((-1.0)*x1120))+(((-1.0)*x1119))))))+(((-1.0)*x1121))+((x1131*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-3.84)*cj2*x1124))+(((-1.52)*r00))+(((-4.24)*x1124))+(((-3.84)*r11*x1125))+(((-1.76)*x1122))))))+(((-1.0)*x1119))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1119+(((-1.0)*x1130))+(((-1.0)*x1121))))))+((htj5*x1131)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1132=(cj4*cj5);
IkReal x1133=(cj4*sj5);
if( IKabs((((r01*x1133))+(((-1.0)*r00*x1132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1133))+((r10*x1132)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1133))+(((-1.0)*r00*x1132))))+IKsqr(((((-1.0)*r11*x1133))+((r10*x1132))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1133))+(((-1.0)*r00*x1132))), ((((-1.0)*r11*x1133))+((r10*x1132))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1134=IKcos(j0);
IkReal x1135=IKsin(j0);
IkReal x1136=(r00*sj5);
IkReal x1137=((1.0)*sj2);
IkReal x1138=(cj5*r01);
IkReal x1139=(cj1*cj2);
IkReal x1140=((0.24)*cj2);
IkReal x1141=(sj3*sj4);
IkReal x1142=(r01*sj5);
IkReal x1143=(cj5*r11);
IkReal x1144=(r11*sj5);
IkReal x1145=(cj3*r10);
IkReal x1146=(cj5*sj4);
IkReal x1147=(r10*sj5);
IkReal x1148=(cj1*sj2);
IkReal x1149=(sj1*x1135);
IkReal x1150=((1.0)*cj5*r00);
IkReal x1151=(sj1*x1134);
IkReal x1152=((1.0)*cj3*sj4);
IkReal x1153=((1.0)*cj5*r10);
evalcond[0]=(x1134+(((-1.0)*cj4*x1153))+((cj4*x1144)));
evalcond[1]=((((-1.0)*cj4*x1150))+(((-1.0)*x1135))+((cj4*x1142)));
evalcond[2]=((((-1.0)*x1141*x1150))+((cj3*x1138))+((cj3*x1136))+((cj2*x1151))+((x1134*x1148))+((x1141*x1142)));
evalcond[3]=((((-1.0)*x1141*x1153))+((x1141*x1144))+((cj2*x1149))+((sj5*x1145))+((cj3*x1143))+((x1135*x1148)));
evalcond[4]=(((cj3*r00*x1146))+((x1134*x1139))+((sj3*x1136))+((sj3*x1138))+(((-1.0)*x1137*x1151))+(((-1.0)*x1142*x1152)));
evalcond[5]=(((x1145*x1146))+(((-1.0)*x1144*x1152))+(((-1.0)*x1137*x1149))+((x1135*x1139))+((sj3*x1143))+((sj3*x1147)));
evalcond[6]=(((x1140*x1151))+(((0.24)*x1134*x1148))+(((-0.11)*x1135))+(((-1.0)*px))+(((0.265)*x1151))+(((-0.095)*x1138))+(((-0.095)*x1136)));
evalcond[7]=(((x1140*x1149))+(((-0.095)*x1143))+(((-0.095)*x1147))+(((0.24)*x1135*x1148))+(((-1.0)*py))+(((0.265)*x1149))+(((0.11)*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1156 = IKatan2WithCheck(IkReal(((-0.095)*r21)),IkReal(((-0.095)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1156.valid){
continue;
}
IkReal x1154=((1.0)*(x1156.value));
if((((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20)))))),-1);
if(!x1157.valid){
continue;
}
if( (((x1157.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1157.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1155=IKasin(((x1157.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2))))));
j5array[0]=((((-1.0)*x1154))+(((-1.0)*x1155)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1155+(((-1.0)*x1154)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1158=cj5*cj5;
IkReal x1159=r21*r21;
IkReal x1160=(cj3*x1158);
IkReal x1161=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*x1159))+(((-1.0)*x1159*x1160))+((cj3*(r22*r22)))+((x1160*(r20*r20))));
j4eval[0]=x1161;
j4eval[1]=IKsign(x1161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1162=r21*r21;
IkReal x1163=cj5*cj5;
IkReal x1164=((1.0)*sj3);
IkReal x1165=(sj3*x1163);
IkReal x1166=((((-1.0)*x1164*(r22*r22)))+(((-1.0)*x1162*x1164))+((x1162*x1165))+(((-1.0)*x1163*x1164*(r20*r20)))+(((2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1166;
j4eval[1]=IKsign(x1166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1167=cj1*cj1;
IkReal x1168=cj2*cj2;
IkReal x1169=(cj1*sj1*sj2);
IkReal x1170=(cj2*x1167);
IkReal x1171=(cj2*x1169);
IkReal x1172=(x1167*x1168);
j0eval[0]=((6.52079207920792)+(((-10.0752475247525)*x1170))+(((10.0752475247525)*cj2))+(((9.12475247524752)*x1171))+(((10.0752475247525)*x1169))+(((-9.12475247524752)*x1172))+(((-1.0)*x1167))+(((4.56237623762376)*x1168)));
j0eval[1]=IKsign(((823.25)+(((-126.25)*x1167))+(((-1272.0)*x1170))+(((1272.0)*x1169))+(((-1152.0)*x1172))+(((576.0)*x1168))+(((1272.0)*cj2))+(((1152.0)*x1171))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1173=((1.0)*cj5);
IkReal x1174=((1.0)*sj5);
IkReal x1175=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1175;
j0eval[1]=((IKabs(((((-1.0)*r11*x1173))+(((-1.0)*r10*x1174)))))+(IKabs(((((-1.0)*r01*x1173))+(((-1.0)*r00*x1174))))));
j0eval[2]=IKsign(x1175);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1176=cj5*cj5;
IkReal x1177=r21*r21;
IkReal x1178=(cj1*sj2);
IkReal x1179=(cj5*r20);
IkReal x1180=(r21*sj5);
IkReal x1181=(cj2*sj1);
IkReal x1182=(((x1176*(r20*r20)))+x1177+(r22*r22)+(((-2.0)*x1179*x1180))+(((-1.0)*x1176*x1177)));
j4eval[0]=x1182;
j4eval[1]=IKsign(x1182);
j4eval[2]=((IKabs((((r22*x1181))+((r22*x1178)))))+(IKabs((((x1179*x1181))+(((-1.0)*x1180*x1181))+(((-1.0)*x1178*x1180))+((x1178*x1179))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1183=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1183;
j4eval[1]=IKsign(x1183);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1184=cj5*cj5;
IkReal x1185=(r11*r21);
IkReal x1186=((1.0)*r20);
IkReal x1187=(cj5*sj5);
IkReal x1188=(((x1184*x1185))+(((-1.0)*r12*r22))+((r10*r21*x1187))+((r11*r20*x1187))+(((-1.0)*x1185))+(((-1.0)*r10*x1184*x1186)));
j4eval[0]=x1188;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1186))))));
j4eval[2]=IKsign(x1188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1189=cj5*cj5;
IkReal x1190=((1.0)*r21);
IkReal x1191=(cj5*sj5);
IkReal x1192=((1.0)*r20);
IkReal x1193=(((r01*r21))+(((-1.0)*r00*x1190*x1191))+(((-1.0)*r01*x1189*x1190))+((r02*r22))+((r00*r20*x1189))+(((-1.0)*r01*x1191*x1192)));
j4eval[0]=x1193;
j4eval[1]=IKsign(x1193);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1192))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1194=cj5*cj5;
IkReal x1195=((1.0)*r21);
IkReal x1196=(cj5*sj5);
IkReal x1197=((1.0)*r20);
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1195*x1196))+(((-1.0)*r01*x1196*x1197))+((r01*r21))+(((-1.0)*r01*x1194*x1195))+((r00*r20*x1194))+((r02*r22)))),-1);
if(!x1198.valid){
continue;
}
CheckValue<IkReal> x1199 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1197)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1198.value)))+(x1199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1200=IKcos(j4);
IkReal x1201=IKsin(j4);
IkReal x1202=(cj5*r00);
IkReal x1203=(r01*sj5);
IkReal x1204=(r11*sj5);
IkReal x1205=(r21*sj5);
IkReal x1206=(cj5*r10);
IkReal x1207=(cj5*r20);
IkReal x1208=((1.0)*x1200);
IkReal x1209=((1.0)*x1201);
evalcond[0]=(((x1200*x1205))+(((-1.0)*x1207*x1208))+((r22*x1201)));
evalcond[1]=((((-1.0)*x1205*x1209))+((x1201*x1207))+((r22*x1200)));
evalcond[2]=(cj0+((r12*x1201))+((x1200*x1204))+(((-1.0)*x1206*x1208)));
evalcond[3]=(cj0+(((-1.0)*x1203*x1209))+((x1201*x1202))+((r02*x1200)));
evalcond[4]=((((-1.0)*x1204*x1209))+sj0+((r12*x1200))+((x1201*x1206)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1202*x1208))+((x1200*x1203))+((r02*x1201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1210=cj5*cj5;
IkReal x1211=(r11*r21);
IkReal x1212=((1.0)*r20);
IkReal x1213=(cj5*sj5);
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign((((x1210*x1211))+((r10*r21*x1213))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1210*x1212))+((r11*r20*x1213))+(((-1.0)*x1211)))),-1);
if(!x1214.valid){
continue;
}
CheckValue<IkReal> x1215 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1212))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1214.value)))+(x1215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j4);
IkReal x1217=IKsin(j4);
IkReal x1218=(cj5*r00);
IkReal x1219=(r01*sj5);
IkReal x1220=(r11*sj5);
IkReal x1221=(r21*sj5);
IkReal x1222=(cj5*r10);
IkReal x1223=(cj5*r20);
IkReal x1224=((1.0)*x1216);
IkReal x1225=((1.0)*x1217);
evalcond[0]=(((r22*x1217))+((x1216*x1221))+(((-1.0)*x1223*x1224)));
evalcond[1]=(((r22*x1216))+((x1217*x1223))+(((-1.0)*x1221*x1225)));
evalcond[2]=(((r12*x1217))+cj0+((x1216*x1220))+(((-1.0)*x1222*x1224)));
evalcond[3]=(cj0+((r02*x1216))+((x1217*x1218))+(((-1.0)*x1219*x1225)));
evalcond[4]=(((r12*x1216))+sj0+((x1217*x1222))+(((-1.0)*x1220*x1225)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1217))+(((-1.0)*x1218*x1224))+((x1216*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1226 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1226.valid){
continue;
}
CheckValue<IkReal> x1227=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1226.value)+(((1.5707963267949)*(x1227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1228=IKcos(j4);
IkReal x1229=IKsin(j4);
IkReal x1230=(cj5*r00);
IkReal x1231=(r01*sj5);
IkReal x1232=(r11*sj5);
IkReal x1233=(r21*sj5);
IkReal x1234=(cj5*r10);
IkReal x1235=(cj5*r20);
IkReal x1236=((1.0)*x1228);
IkReal x1237=((1.0)*x1229);
evalcond[0]=((((-1.0)*x1235*x1236))+((r22*x1229))+((x1228*x1233)));
evalcond[1]=(((r22*x1228))+(((-1.0)*x1233*x1237))+((x1229*x1235)));
evalcond[2]=(cj0+((x1228*x1232))+(((-1.0)*x1234*x1236))+((r12*x1229)));
evalcond[3]=(cj0+((r02*x1228))+(((-1.0)*x1231*x1237))+((x1229*x1230)));
evalcond[4]=(sj0+((r12*x1228))+((x1229*x1234))+(((-1.0)*x1232*x1237)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1230*x1236))+((r02*x1229))+((x1228*x1231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1238=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1238;
j4eval[1]=IKsign(x1238);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1239=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1239;
j4eval[1]=IKsign(x1239);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1240=cj5*cj5;
IkReal x1241=(r11*r21);
IkReal x1242=((1.0)*r20);
IkReal x1243=(cj5*sj5);
IkReal x1244=(((r11*r20*x1243))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1240*x1242))+((x1240*x1241))+(((-1.0)*x1241))+((r10*r21*x1243)));
j4eval[0]=x1244;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1242))))));
j4eval[2]=IKsign(x1244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1245=cj5*cj5;
IkReal x1246=(r11*r21);
IkReal x1247=((1.0)*r20);
IkReal x1248=(cj5*sj5);
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(IKsign((((r11*r20*x1248))+(((-1.0)*r12*r22))+(((-1.0)*x1246))+((x1245*x1246))+(((-1.0)*r10*x1245*x1247))+((r10*r21*x1248)))),-1);
if(!x1250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1249.value)+(((1.5707963267949)*(x1250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1251=IKcos(j4);
IkReal x1252=IKsin(j4);
IkReal x1253=((1.0)*sj0);
IkReal x1254=(cj5*r00);
IkReal x1255=(cj5*r10);
IkReal x1256=(cj5*r20);
IkReal x1257=((1.0)*x1251);
IkReal x1258=(sj5*x1251);
IkReal x1259=((1.0)*sj5*x1252);
evalcond[0]=(((r22*x1252))+((r21*x1258))+(((-1.0)*x1256*x1257)));
evalcond[1]=((((-1.0)*r21*x1259))+((r22*x1251))+((x1252*x1256)));
evalcond[2]=(((r11*x1258))+cj0+((r12*x1252))+(((-1.0)*x1255*x1257)));
evalcond[3]=((((-1.0)*x1253))+((r02*x1252))+(((-1.0)*x1254*x1257))+((r01*x1258)));
evalcond[4]=(((r02*x1251))+(((-1.0)*r01*x1259))+((x1252*x1254))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1253))+(((-1.0)*r11*x1259))+((r12*x1251))+((x1252*x1255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1260.value)+(((1.5707963267949)*(x1261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1262=IKcos(j4);
IkReal x1263=IKsin(j4);
IkReal x1264=((1.0)*sj0);
IkReal x1265=(cj5*r00);
IkReal x1266=(cj5*r10);
IkReal x1267=(cj5*r20);
IkReal x1268=((1.0)*x1262);
IkReal x1269=(sj5*x1262);
IkReal x1270=((1.0)*sj5*x1263);
evalcond[0]=(((r21*x1269))+((r22*x1263))+(((-1.0)*x1267*x1268)));
evalcond[1]=(((r22*x1262))+((x1263*x1267))+(((-1.0)*r21*x1270)));
evalcond[2]=(((r11*x1269))+cj0+((r12*x1263))+(((-1.0)*x1266*x1268)));
evalcond[3]=(((r02*x1263))+(((-1.0)*x1265*x1268))+((r01*x1269))+(((-1.0)*x1264)));
evalcond[4]=((((-1.0)*r01*x1270))+((r02*x1262))+((x1263*x1265))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1262))+(((-1.0)*r11*x1270))+((x1263*x1266))+(((-1.0)*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1271.value)+(((1.5707963267949)*(x1272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j4);
IkReal x1274=IKsin(j4);
IkReal x1275=((1.0)*sj0);
IkReal x1276=(cj5*r00);
IkReal x1277=(cj5*r10);
IkReal x1278=(cj5*r20);
IkReal x1279=((1.0)*x1273);
IkReal x1280=(sj5*x1273);
IkReal x1281=((1.0)*sj5*x1274);
evalcond[0]=(((r22*x1274))+((r21*x1280))+(((-1.0)*x1278*x1279)));
evalcond[1]=(((r22*x1273))+((x1274*x1278))+(((-1.0)*r21*x1281)));
evalcond[2]=(((r12*x1274))+((r11*x1280))+cj0+(((-1.0)*x1277*x1279)));
evalcond[3]=((((-1.0)*x1275))+((r02*x1274))+(((-1.0)*x1276*x1279))+((r01*x1280)));
evalcond[4]=(((r02*x1273))+((x1274*x1276))+(((-1.0)*r01*x1281))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1273))+(((-1.0)*x1275))+((x1274*x1277))+(((-1.0)*r11*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.21894928636502)*px))+(((1.33616762830246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((3.21894928636502)*px))+(((1.33616762830246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((3.21894928636502)*px))+(((1.33616762830246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1282=IKsin(j0);
IkReal x1283=IKcos(j0);
evalcond[0]=((((-0.11)*x1282))+(((-1.0)*px))+(((0.265)*x1283)));
evalcond[1]=((((0.11)*x1283))+(((-1.0)*py))+(((0.265)*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1284=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1284;
j4eval[1]=IKsign(x1284);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1285=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1285;
j4eval[1]=IKsign(x1285);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1286=cj5*cj5;
IkReal x1287=(r11*r21);
IkReal x1288=((1.0)*r20);
IkReal x1289=(cj5*sj5);
IkReal x1290=((((-1.0)*x1287))+(((-1.0)*r12*r22))+((r10*r21*x1289))+(((-1.0)*r10*x1286*x1288))+((x1286*x1287))+((r11*r20*x1289)));
j4eval[0]=x1290;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1288)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1290);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1291=cj5*cj5;
IkReal x1292=(r11*r21);
IkReal x1293=((1.0)*r20);
IkReal x1294=(cj5*sj5);
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x1291*x1293))+((r11*r20*x1294))+((x1291*x1292))+(((-1.0)*x1292))+((r10*r21*x1294)))),-1);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1295.value)))+(x1296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1297=IKcos(j4);
IkReal x1298=IKsin(j4);
IkReal x1299=((1.0)*sj0);
IkReal x1300=(cj5*r00);
IkReal x1301=(cj5*r10);
IkReal x1302=(cj5*r20);
IkReal x1303=((1.0)*x1297);
IkReal x1304=(sj5*x1297);
IkReal x1305=((1.0)*sj5*x1298);
evalcond[0]=(((r21*x1304))+((r22*x1298))+(((-1.0)*x1302*x1303)));
evalcond[1]=((((-1.0)*r21*x1305))+((r22*x1297))+((x1298*x1302)));
evalcond[2]=(cj0+((r12*x1298))+((r11*x1304))+(((-1.0)*x1301*x1303)));
evalcond[3]=((((-1.0)*x1299))+(((-1.0)*x1300*x1303))+((r02*x1298))+((r01*x1304)));
evalcond[4]=((((-1.0)*r01*x1305))+((r02*x1297))+((x1298*x1300))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1299))+((r12*x1297))+(((-1.0)*r11*x1305))+((x1298*x1301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1306.value)+(((1.5707963267949)*(x1307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1308=IKcos(j4);
IkReal x1309=IKsin(j4);
IkReal x1310=((1.0)*sj0);
IkReal x1311=(cj5*r00);
IkReal x1312=(cj5*r10);
IkReal x1313=(cj5*r20);
IkReal x1314=((1.0)*x1308);
IkReal x1315=(sj5*x1308);
IkReal x1316=((1.0)*sj5*x1309);
evalcond[0]=((((-1.0)*x1313*x1314))+((r22*x1309))+((r21*x1315)));
evalcond[1]=(((x1309*x1313))+(((-1.0)*r21*x1316))+((r22*x1308)));
evalcond[2]=(cj0+((r11*x1315))+((r12*x1309))+(((-1.0)*x1312*x1314)));
evalcond[3]=((((-1.0)*x1311*x1314))+((r01*x1315))+(((-1.0)*x1310))+((r02*x1309)));
evalcond[4]=((((-1.0)*r01*x1316))+((x1309*x1311))+((r02*x1308))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1308))+(((-1.0)*x1310))+((x1309*x1312))+(((-1.0)*r11*x1316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1317 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1317.valid){
continue;
}
CheckValue<IkReal> x1318=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1317.value)+(((1.5707963267949)*(x1318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1319=IKcos(j4);
IkReal x1320=IKsin(j4);
IkReal x1321=((1.0)*sj0);
IkReal x1322=(cj5*r00);
IkReal x1323=(cj5*r10);
IkReal x1324=(cj5*r20);
IkReal x1325=((1.0)*x1319);
IkReal x1326=(sj5*x1319);
IkReal x1327=((1.0)*sj5*x1320);
evalcond[0]=((((-1.0)*x1324*x1325))+((r22*x1320))+((r21*x1326)));
evalcond[1]=(((x1320*x1324))+((r22*x1319))+(((-1.0)*r21*x1327)));
evalcond[2]=((((-1.0)*x1323*x1325))+cj0+((r11*x1326))+((r12*x1320)));
evalcond[3]=(((r01*x1326))+(((-1.0)*x1322*x1325))+(((-1.0)*x1321))+((r02*x1320)));
evalcond[4]=(((x1320*x1322))+(((-1.0)*r01*x1327))+((r02*x1319))+(((-1.0)*cj0)));
evalcond[5]=(((x1320*x1323))+(((-1.0)*x1321))+(((-1.0)*r11*x1327))+((r12*x1319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.21894928636502)*px))+(((1.33616762830246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((3.21894928636502)*px))+(((1.33616762830246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((3.21894928636502)*px))+(((1.33616762830246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1328=IKsin(j0);
IkReal x1329=IKcos(j0);
evalcond[0]=((((-0.11)*x1328))+(((-1.0)*px))+(((0.265)*x1329)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x1329))+(((0.265)*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1330=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1330;
j4eval[1]=IKsign(x1330);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1331=cj5*cj5;
IkReal x1332=(r11*r21);
IkReal x1333=((1.0)*r20);
IkReal x1334=(cj5*sj5);
IkReal x1335=(((r10*r21*x1334))+((x1331*x1332))+(((-1.0)*x1332))+(((-1.0)*r12*r22))+((r11*r20*x1334))+(((-1.0)*r10*x1331*x1333)));
j4eval[0]=x1335;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1333))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1336=cj5*cj5;
IkReal x1337=((1.0)*r21);
IkReal x1338=(cj5*sj5);
IkReal x1339=((1.0)*r20);
IkReal x1340=(((r01*r21))+(((-1.0)*r01*x1336*x1337))+(((-1.0)*r00*x1337*x1338))+(((-1.0)*r01*x1338*x1339))+((r00*r20*x1336))+((r02*r22)));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x1339))+((cj0*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1341=cj5*cj5;
IkReal x1342=((1.0)*r21);
IkReal x1343=(cj5*sj5);
IkReal x1344=((1.0)*r20);
CheckValue<IkReal> x1345 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x1344))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1345.valid){
continue;
}
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1341*x1342))+((r01*r21))+(((-1.0)*r01*x1343*x1344))+((r02*r22))+(((-1.0)*r00*x1342*x1343))+((r00*r20*x1341)))),-1);
if(!x1346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1345.value)+(((1.5707963267949)*(x1346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1347=IKcos(j4);
IkReal x1348=IKsin(j4);
IkReal x1349=(cj5*r00);
IkReal x1350=(r01*sj5);
IkReal x1351=(r11*sj5);
IkReal x1352=(r21*sj5);
IkReal x1353=(cj5*r10);
IkReal x1354=(cj5*r20);
IkReal x1355=((1.0)*x1347);
IkReal x1356=((1.0)*x1348);
evalcond[0]=((((-1.0)*x1354*x1355))+((r22*x1348))+((x1347*x1352)));
evalcond[1]=((((-1.0)*x1352*x1356))+((r22*x1347))+((x1348*x1354)));
evalcond[2]=(cj0+((r12*x1348))+((x1347*x1351))+(((-1.0)*x1353*x1355)));
evalcond[3]=(cj0+(((-1.0)*x1350*x1356))+((r02*x1347))+((x1348*x1349)));
evalcond[4]=(sj0+((x1348*x1353))+((r12*x1347))+(((-1.0)*x1351*x1356)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1348))+((x1347*x1350))+(((-1.0)*x1349*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1357=cj5*cj5;
IkReal x1358=(r11*r21);
IkReal x1359=((1.0)*r20);
IkReal x1360=(cj5*sj5);
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign((((r11*r20*x1360))+(((-1.0)*x1358))+((x1357*x1358))+(((-1.0)*r12*r22))+((r10*r21*x1360))+(((-1.0)*r10*x1357*x1359)))),-1);
if(!x1362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1361.value)+(((1.5707963267949)*(x1362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1363=IKcos(j4);
IkReal x1364=IKsin(j4);
IkReal x1365=(cj5*r00);
IkReal x1366=(r01*sj5);
IkReal x1367=(r11*sj5);
IkReal x1368=(r21*sj5);
IkReal x1369=(cj5*r10);
IkReal x1370=(cj5*r20);
IkReal x1371=((1.0)*x1363);
IkReal x1372=((1.0)*x1364);
evalcond[0]=(((r22*x1364))+((x1363*x1368))+(((-1.0)*x1370*x1371)));
evalcond[1]=(((r22*x1363))+(((-1.0)*x1368*x1372))+((x1364*x1370)));
evalcond[2]=(cj0+((x1363*x1367))+((r12*x1364))+(((-1.0)*x1369*x1371)));
evalcond[3]=(cj0+((r02*x1363))+((x1364*x1365))+(((-1.0)*x1366*x1372)));
evalcond[4]=(sj0+((x1364*x1369))+((r12*x1363))+(((-1.0)*x1367*x1372)));
evalcond[5]=((((-1.0)*x1365*x1371))+(((-1.0)*sj0))+((x1363*x1366))+((r02*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKcos(j4);
IkReal x1376=IKsin(j4);
IkReal x1377=(cj5*r00);
IkReal x1378=(r01*sj5);
IkReal x1379=(r11*sj5);
IkReal x1380=(r21*sj5);
IkReal x1381=(cj5*r10);
IkReal x1382=(cj5*r20);
IkReal x1383=((1.0)*x1375);
IkReal x1384=((1.0)*x1376);
evalcond[0]=((((-1.0)*x1382*x1383))+((r22*x1376))+((x1375*x1380)));
evalcond[1]=(((r22*x1375))+((x1376*x1382))+(((-1.0)*x1380*x1384)));
evalcond[2]=(((x1375*x1379))+cj0+((r12*x1376))+(((-1.0)*x1381*x1383)));
evalcond[3]=(((x1376*x1377))+cj0+((r02*x1375))+(((-1.0)*x1378*x1384)));
evalcond[4]=(sj0+((r12*x1375))+((x1376*x1381))+(((-1.0)*x1379*x1384)));
evalcond[5]=((((-1.0)*sj0))+((x1375*x1378))+(((-1.0)*x1377*x1383))+((r02*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1385=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1385;
j4eval[1]=IKsign(x1385);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1386=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1386;
j4eval[1]=IKsign(x1386);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1387=cj5*cj5;
IkReal x1388=(r11*r21);
IkReal x1389=((1.0)*r20);
IkReal x1390=(cj5*sj5);
IkReal x1391=((((-1.0)*r12*r22))+((x1387*x1388))+((r11*r20*x1390))+(((-1.0)*x1388))+((r10*r21*x1390))+(((-1.0)*r10*x1387*x1389)));
j4eval[0]=x1391;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1389)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1392=cj5*cj5;
IkReal x1393=(r11*r21);
IkReal x1394=((1.0)*r20);
IkReal x1395=(cj5*sj5);
CheckValue<IkReal> x1396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*r20*x1395))+(((-1.0)*x1393))+((r10*r21*x1395))+((x1392*x1393))+(((-1.0)*r10*x1392*x1394)))),-1);
if(!x1396.valid){
continue;
}
CheckValue<IkReal> x1397 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1396.value)))+(x1397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1398=IKcos(j4);
IkReal x1399=IKsin(j4);
IkReal x1400=((1.0)*sj0);
IkReal x1401=(cj5*r00);
IkReal x1402=(cj5*r10);
IkReal x1403=(cj5*r20);
IkReal x1404=((1.0)*x1398);
IkReal x1405=(sj5*x1398);
IkReal x1406=((1.0)*sj5*x1399);
evalcond[0]=(((r21*x1405))+((r22*x1399))+(((-1.0)*x1403*x1404)));
evalcond[1]=(((x1399*x1403))+((r22*x1398))+(((-1.0)*r21*x1406)));
evalcond[2]=(cj0+((r11*x1405))+(((-1.0)*x1402*x1404))+((r12*x1399)));
evalcond[3]=((((-1.0)*x1400))+((r01*x1405))+(((-1.0)*x1401*x1404))+((r02*x1399)));
evalcond[4]=((((-1.0)*r01*x1406))+((x1399*x1401))+((r02*x1398))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1406))+(((-1.0)*x1400))+((x1399*x1402))+((r12*x1398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
CheckValue<IkReal> x1408=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1407.value)+(((1.5707963267949)*(x1408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1409=IKcos(j4);
IkReal x1410=IKsin(j4);
IkReal x1411=((1.0)*sj0);
IkReal x1412=(cj5*r00);
IkReal x1413=(cj5*r10);
IkReal x1414=(cj5*r20);
IkReal x1415=((1.0)*x1409);
IkReal x1416=(sj5*x1409);
IkReal x1417=((1.0)*sj5*x1410);
evalcond[0]=(((r21*x1416))+(((-1.0)*x1414*x1415))+((r22*x1410)));
evalcond[1]=(((x1410*x1414))+(((-1.0)*r21*x1417))+((r22*x1409)));
evalcond[2]=(cj0+(((-1.0)*x1413*x1415))+((r11*x1416))+((r12*x1410)));
evalcond[3]=((((-1.0)*x1411))+(((-1.0)*x1412*x1415))+((r01*x1416))+((r02*x1410)));
evalcond[4]=(((r02*x1409))+((x1410*x1412))+(((-1.0)*r01*x1417))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1411))+((r12*x1409))+((x1410*x1413))+(((-1.0)*r11*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1418.value)+(((1.5707963267949)*(x1419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKcos(j4);
IkReal x1421=IKsin(j4);
IkReal x1422=((1.0)*sj0);
IkReal x1423=(cj5*r00);
IkReal x1424=(cj5*r10);
IkReal x1425=(cj5*r20);
IkReal x1426=((1.0)*x1420);
IkReal x1427=(sj5*x1420);
IkReal x1428=((1.0)*sj5*x1421);
evalcond[0]=(((r21*x1427))+(((-1.0)*x1425*x1426))+((r22*x1421)));
evalcond[1]=((((-1.0)*r21*x1428))+((r22*x1420))+((x1421*x1425)));
evalcond[2]=(((r11*x1427))+cj0+(((-1.0)*x1424*x1426))+((r12*x1421)));
evalcond[3]=(((r01*x1427))+(((-1.0)*x1423*x1426))+((r02*x1421))+(((-1.0)*x1422)));
evalcond[4]=(((r02*x1420))+(((-1.0)*r01*x1428))+(((-1.0)*cj0))+((x1421*x1423)));
evalcond[5]=((((-1.0)*r11*x1428))+((r12*x1420))+((x1421*x1424))+(((-1.0)*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1429=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1429;
j4eval[1]=IKsign(x1429);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1430=cj5*cj5;
IkReal x1431=(r11*r21);
IkReal x1432=((1.0)*r20);
IkReal x1433=(cj5*sj5);
IkReal x1434=((((-1.0)*x1431))+((x1430*x1431))+(((-1.0)*r12*r22))+((r10*r21*x1433))+(((-1.0)*r10*x1430*x1432))+((r11*r20*x1433)));
j4eval[0]=x1434;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1432)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1435=cj5*cj5;
IkReal x1436=((1.0)*r21);
IkReal x1437=(cj5*sj5);
IkReal x1438=((1.0)*r20);
IkReal x1439=(((r01*r21))+(((-1.0)*r01*x1437*x1438))+(((-1.0)*r01*x1435*x1436))+((r00*r20*x1435))+(((-1.0)*r00*x1436*x1437))+((r02*r22)));
j4eval[0]=x1439;
j4eval[1]=IKsign(x1439);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1438))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1440=cj5*cj5;
IkReal x1441=((1.0)*r21);
IkReal x1442=(cj5*sj5);
IkReal x1443=((1.0)*r20);
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1443)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1441*x1442))+((r00*r20*x1440))+(((-1.0)*r01*x1442*x1443))+((r01*r21))+(((-1.0)*r01*x1440*x1441))+((r02*r22)))),-1);
if(!x1445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1444.value)+(((1.5707963267949)*(x1445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1446=IKcos(j4);
IkReal x1447=IKsin(j4);
IkReal x1448=(cj5*r00);
IkReal x1449=(r01*sj5);
IkReal x1450=(r11*sj5);
IkReal x1451=(r21*sj5);
IkReal x1452=(cj5*r10);
IkReal x1453=(cj5*r20);
IkReal x1454=((1.0)*x1446);
IkReal x1455=((1.0)*x1447);
evalcond[0]=(((x1446*x1451))+((r22*x1447))+(((-1.0)*x1453*x1454)));
evalcond[1]=(((r22*x1446))+((x1447*x1453))+(((-1.0)*x1451*x1455)));
evalcond[2]=(((r12*x1447))+((x1446*x1450))+cj0+(((-1.0)*x1452*x1454)));
evalcond[3]=(cj0+((r02*x1446))+((x1447*x1448))+(((-1.0)*x1449*x1455)));
evalcond[4]=(((r12*x1446))+sj0+((x1447*x1452))+(((-1.0)*x1450*x1455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1448*x1454))+((r02*x1447))+((x1446*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1456=cj5*cj5;
IkReal x1457=(r11*r21);
IkReal x1458=((1.0)*r20);
IkReal x1459=(cj5*sj5);
CheckValue<IkReal> x1460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1460.valid){
continue;
}
CheckValue<IkReal> x1461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1456*x1458))+((x1456*x1457))+((r10*r21*x1459))+(((-1.0)*r12*r22))+(((-1.0)*x1457))+((r11*r20*x1459)))),-1);
if(!x1461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1460.value)+(((1.5707963267949)*(x1461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1462=IKcos(j4);
IkReal x1463=IKsin(j4);
IkReal x1464=(cj5*r00);
IkReal x1465=(r01*sj5);
IkReal x1466=(r11*sj5);
IkReal x1467=(r21*sj5);
IkReal x1468=(cj5*r10);
IkReal x1469=(cj5*r20);
IkReal x1470=((1.0)*x1462);
IkReal x1471=((1.0)*x1463);
evalcond[0]=((((-1.0)*x1469*x1470))+((r22*x1463))+((x1462*x1467)));
evalcond[1]=(((x1463*x1469))+(((-1.0)*x1467*x1471))+((r22*x1462)));
evalcond[2]=(cj0+((r12*x1463))+(((-1.0)*x1468*x1470))+((x1462*x1466)));
evalcond[3]=(((x1463*x1464))+cj0+(((-1.0)*x1465*x1471))+((r02*x1462)));
evalcond[4]=(((x1463*x1468))+sj0+((r12*x1462))+(((-1.0)*x1466*x1471)));
evalcond[5]=((((-1.0)*sj0))+((x1462*x1465))+((r02*x1463))+(((-1.0)*x1464*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1474=IKcos(j4);
IkReal x1475=IKsin(j4);
IkReal x1476=(cj5*r00);
IkReal x1477=(r01*sj5);
IkReal x1478=(r11*sj5);
IkReal x1479=(r21*sj5);
IkReal x1480=(cj5*r10);
IkReal x1481=(cj5*r20);
IkReal x1482=((1.0)*x1474);
IkReal x1483=((1.0)*x1475);
evalcond[0]=(((r22*x1475))+(((-1.0)*x1481*x1482))+((x1474*x1479)));
evalcond[1]=((((-1.0)*x1479*x1483))+((r22*x1474))+((x1475*x1481)));
evalcond[2]=(((r12*x1475))+cj0+((x1474*x1478))+(((-1.0)*x1480*x1482)));
evalcond[3]=(cj0+((r02*x1474))+(((-1.0)*x1477*x1483))+((x1475*x1476)));
evalcond[4]=(((r12*x1474))+sj0+((x1475*x1480))+(((-1.0)*x1478*x1483)));
evalcond[5]=((((-1.0)*sj0))+((x1474*x1477))+((r02*x1475))+(((-1.0)*x1476*x1482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.33616762830246)*py))+(((-3.21894928636502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((1.33616762830246)*py))+(((-3.21894928636502)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((1.33616762830246)*py))+(((-3.21894928636502)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1484=IKcos(j0);
IkReal x1485=IKsin(j0);
evalcond[0]=((((-0.265)*x1484))+(((-1.0)*px))+(((-0.11)*x1485)));
evalcond[1]=((((-0.265)*x1485))+(((-1.0)*py))+(((0.11)*x1484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1486=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1486;
j4eval[1]=IKsign(x1486);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1487=cj5*cj5;
IkReal x1488=(r11*r21);
IkReal x1489=((1.0)*r20);
IkReal x1490=(cj5*sj5);
IkReal x1491=((((-1.0)*r10*x1487*x1489))+(((-1.0)*r12*r22))+((x1487*x1488))+(((-1.0)*x1488))+((r11*r20*x1490))+((r10*r21*x1490)));
j4eval[0]=x1491;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1489))))));
j4eval[2]=IKsign(x1491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1492=cj5*cj5;
IkReal x1493=((1.0)*r21);
IkReal x1494=(cj5*sj5);
IkReal x1495=((1.0)*r20);
IkReal x1496=(((r01*r21))+(((-1.0)*r00*x1493*x1494))+((r00*r20*x1492))+((r02*r22))+(((-1.0)*r01*x1494*x1495))+(((-1.0)*r01*x1492*x1493)));
j4eval[0]=x1496;
j4eval[1]=IKsign(x1496);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1495)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1497=cj5*cj5;
IkReal x1498=((1.0)*r21);
IkReal x1499=(cj5*sj5);
IkReal x1500=((1.0)*r20);
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1500)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
CheckValue<IkReal> x1502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1497*x1498))+((r01*r21))+(((-1.0)*r01*x1499*x1500))+((r00*r20*x1497))+((r02*r22))+(((-1.0)*r00*x1498*x1499)))),-1);
if(!x1502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1501.value)+(((1.5707963267949)*(x1502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1503=IKcos(j4);
IkReal x1504=IKsin(j4);
IkReal x1505=(cj5*r00);
IkReal x1506=(r01*sj5);
IkReal x1507=(r11*sj5);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(cj5*r20);
IkReal x1511=((1.0)*x1503);
IkReal x1512=((1.0)*x1504);
evalcond[0]=((((-1.0)*x1510*x1511))+((r22*x1504))+((x1503*x1508)));
evalcond[1]=(((x1504*x1510))+((r22*x1503))+(((-1.0)*x1508*x1512)));
evalcond[2]=(cj0+((r12*x1504))+((x1503*x1507))+(((-1.0)*x1509*x1511)));
evalcond[3]=(cj0+(((-1.0)*x1506*x1512))+((x1504*x1505))+((r02*x1503)));
evalcond[4]=(sj0+((r12*x1503))+(((-1.0)*x1507*x1512))+((x1504*x1509)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1504))+((x1503*x1506))+(((-1.0)*x1505*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1513=cj5*cj5;
IkReal x1514=(r11*r21);
IkReal x1515=((1.0)*r20);
IkReal x1516=(cj5*sj5);
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign((((x1513*x1514))+(((-1.0)*r10*x1513*x1515))+(((-1.0)*x1514))+(((-1.0)*r12*r22))+((r11*r20*x1516))+((r10*r21*x1516)))),-1);
if(!x1518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1517.value)+(((1.5707963267949)*(x1518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKcos(j4);
IkReal x1520=IKsin(j4);
IkReal x1521=(cj5*r00);
IkReal x1522=(r01*sj5);
IkReal x1523=(r11*sj5);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*r10);
IkReal x1526=(cj5*r20);
IkReal x1527=((1.0)*x1519);
IkReal x1528=((1.0)*x1520);
evalcond[0]=(((x1519*x1524))+(((-1.0)*x1526*x1527))+((r22*x1520)));
evalcond[1]=((((-1.0)*x1524*x1528))+((x1520*x1526))+((r22*x1519)));
evalcond[2]=(cj0+((r12*x1520))+((x1519*x1523))+(((-1.0)*x1525*x1527)));
evalcond[3]=(cj0+((x1520*x1521))+((r02*x1519))+(((-1.0)*x1522*x1528)));
evalcond[4]=(sj0+((r12*x1519))+((x1520*x1525))+(((-1.0)*x1523*x1528)));
evalcond[5]=((((-1.0)*sj0))+((x1519*x1522))+((r02*x1520))+(((-1.0)*x1521*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1529 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1529.value)+(((1.5707963267949)*(x1530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1531=IKcos(j4);
IkReal x1532=IKsin(j4);
IkReal x1533=(cj5*r00);
IkReal x1534=(r01*sj5);
IkReal x1535=(r11*sj5);
IkReal x1536=(r21*sj5);
IkReal x1537=(cj5*r10);
IkReal x1538=(cj5*r20);
IkReal x1539=((1.0)*x1531);
IkReal x1540=((1.0)*x1532);
evalcond[0]=(((x1531*x1536))+((r22*x1532))+(((-1.0)*x1538*x1539)));
evalcond[1]=(((x1532*x1538))+(((-1.0)*x1536*x1540))+((r22*x1531)));
evalcond[2]=(((r12*x1532))+cj0+(((-1.0)*x1537*x1539))+((x1531*x1535)));
evalcond[3]=(cj0+((x1532*x1533))+(((-1.0)*x1534*x1540))+((r02*x1531)));
evalcond[4]=((((-1.0)*x1535*x1540))+((r12*x1531))+sj0+((x1532*x1537)));
evalcond[5]=((((-1.0)*sj0))+((x1531*x1534))+(((-1.0)*x1533*x1539))+((r02*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.33616762830246)*py))+(((-3.21894928636502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((1.33616762830246)*py))+(((-3.21894928636502)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((1.33616762830246)*py))+(((-3.21894928636502)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1541=IKcos(j0);
IkReal x1542=IKsin(j0);
evalcond[0]=((((-0.11)*x1542))+(((-0.265)*x1541))+(((-1.0)*px)));
evalcond[1]=((((-0.265)*x1542))+(((-1.0)*py))+(((0.11)*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1543=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1543;
j4eval[1]=IKsign(x1543);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1544=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1544;
j4eval[1]=IKsign(x1544);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1545=cj5*cj5;
IkReal x1546=(r11*r21);
IkReal x1547=((1.0)*r20);
IkReal x1548=(cj5*sj5);
IkReal x1549=((((-1.0)*x1546))+(((-1.0)*r10*x1545*x1547))+(((-1.0)*r12*r22))+((x1545*x1546))+((r10*r21*x1548))+((r11*r20*x1548)));
j4eval[0]=x1549;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1547))))));
j4eval[2]=IKsign(x1549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1550=cj5*cj5;
IkReal x1551=(r11*r21);
IkReal x1552=((1.0)*r20);
IkReal x1553=(cj5*sj5);
CheckValue<IkReal> x1554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1550*x1552))+(((-1.0)*x1551))+(((-1.0)*r12*r22))+((x1550*x1551))+((r10*r21*x1553))+((r11*r20*x1553)))),-1);
if(!x1555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1554.value)+(((1.5707963267949)*(x1555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1556=IKcos(j4);
IkReal x1557=IKsin(j4);
IkReal x1558=((1.0)*sj0);
IkReal x1559=(cj5*r00);
IkReal x1560=(cj5*r10);
IkReal x1561=(cj5*r20);
IkReal x1562=((1.0)*x1556);
IkReal x1563=(sj5*x1556);
IkReal x1564=((1.0)*sj5*x1557);
evalcond[0]=(((r22*x1557))+((r21*x1563))+(((-1.0)*x1561*x1562)));
evalcond[1]=(((r22*x1556))+((x1557*x1561))+(((-1.0)*r21*x1564)));
evalcond[2]=(cj0+(((-1.0)*x1560*x1562))+((r11*x1563))+((r12*x1557)));
evalcond[3]=((((-1.0)*x1559*x1562))+((r02*x1557))+(((-1.0)*x1558))+((r01*x1563)));
evalcond[4]=(((x1557*x1559))+((r02*x1556))+(((-1.0)*r01*x1564))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1556))+((x1557*x1560))+(((-1.0)*x1558))+(((-1.0)*r11*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1565 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1565.valid){
continue;
}
CheckValue<IkReal> x1566=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1565.value)+(((1.5707963267949)*(x1566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1567=IKcos(j4);
IkReal x1568=IKsin(j4);
IkReal x1569=((1.0)*sj0);
IkReal x1570=(cj5*r00);
IkReal x1571=(cj5*r10);
IkReal x1572=(cj5*r20);
IkReal x1573=((1.0)*x1567);
IkReal x1574=(sj5*x1567);
IkReal x1575=((1.0)*sj5*x1568);
evalcond[0]=((((-1.0)*x1572*x1573))+((r21*x1574))+((r22*x1568)));
evalcond[1]=((((-1.0)*r21*x1575))+((x1568*x1572))+((r22*x1567)));
evalcond[2]=((((-1.0)*x1571*x1573))+cj0+((r12*x1568))+((r11*x1574)));
evalcond[3]=((((-1.0)*x1570*x1573))+((r02*x1568))+(((-1.0)*x1569))+((r01*x1574)));
evalcond[4]=(((x1568*x1570))+(((-1.0)*r01*x1575))+((r02*x1567))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1567))+((x1568*x1571))+(((-1.0)*r11*x1575))+(((-1.0)*x1569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
CheckValue<IkReal> x1577=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1576.value)+(((1.5707963267949)*(x1577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1578=IKcos(j4);
IkReal x1579=IKsin(j4);
IkReal x1580=((1.0)*sj0);
IkReal x1581=(cj5*r00);
IkReal x1582=(cj5*r10);
IkReal x1583=(cj5*r20);
IkReal x1584=((1.0)*x1578);
IkReal x1585=(sj5*x1578);
IkReal x1586=((1.0)*sj5*x1579);
evalcond[0]=(((r22*x1579))+((r21*x1585))+(((-1.0)*x1583*x1584)));
evalcond[1]=(((r22*x1578))+(((-1.0)*r21*x1586))+((x1579*x1583)));
evalcond[2]=(cj0+((r12*x1579))+((r11*x1585))+(((-1.0)*x1582*x1584)));
evalcond[3]=((((-1.0)*x1580))+((r01*x1585))+((r02*x1579))+(((-1.0)*x1581*x1584)));
evalcond[4]=((((-1.0)*r01*x1586))+((r02*x1578))+((x1579*x1581))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1580))+(((-1.0)*r11*x1586))+((r12*x1578))+((x1579*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1587=(cj2*sj1);
IkReal x1588=((100.0)*px);
IkReal x1589=(cj5*r01);
IkReal x1590=(r00*sj5);
IkReal x1591=(cj1*sj2);
IkReal x1592=((26.5)*sj1);
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(((((11.0)*x1587))+(((11.0)*x1591))),-1);
if(!x1593.valid){
continue;
}
CheckValue<IkReal> x1594=IKPowWithIntegerCheck((x1587+x1591),-1);
if(!x1594.valid){
continue;
}
if( IKabs(((x1593.value)*(((((-33.5)*x1587*x1590))+(((-33.5)*x1587*x1589))+(((-33.5)*x1590*x1591))+(((-33.5)*x1589*x1591))+(((-1.0)*x1588*x1591))+(((-1.0)*x1589*x1592))+(((-1.0)*x1590*x1592))+(((-1.0)*x1587*x1588)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1594.value)*(((((-1.0)*x1589))+(((-1.0)*x1590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1593.value)*(((((-33.5)*x1587*x1590))+(((-33.5)*x1587*x1589))+(((-33.5)*x1590*x1591))+(((-33.5)*x1589*x1591))+(((-1.0)*x1588*x1591))+(((-1.0)*x1589*x1592))+(((-1.0)*x1590*x1592))+(((-1.0)*x1587*x1588))))))+IKsqr(((x1594.value)*(((((-1.0)*x1589))+(((-1.0)*x1590))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1593.value)*(((((-33.5)*x1587*x1590))+(((-33.5)*x1587*x1589))+(((-33.5)*x1590*x1591))+(((-33.5)*x1589*x1591))+(((-1.0)*x1588*x1591))+(((-1.0)*x1589*x1592))+(((-1.0)*x1590*x1592))+(((-1.0)*x1587*x1588))))), ((x1594.value)*(((((-1.0)*x1589))+(((-1.0)*x1590))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1595=IKcos(j0);
IkReal x1596=IKsin(j0);
IkReal x1597=(r00*sj5);
IkReal x1598=(cj5*r01);
IkReal x1599=((0.24)*cj2);
IkReal x1600=(cj5*r11);
IkReal x1601=(cj1*sj2);
IkReal x1602=(r10*sj5);
IkReal x1603=(sj1*x1596);
IkReal x1604=(sj1*x1595);
evalcond[0]=(((x1595*x1601))+x1597+x1598+((cj2*x1604)));
evalcond[1]=(x1600+x1602+((cj2*x1603))+((x1596*x1601)));
evalcond[2]=((((-0.11)*x1596))+((x1599*x1604))+(((-1.0)*px))+(((0.265)*x1604))+(((0.24)*x1595*x1601))+(((-0.095)*x1597))+(((-0.095)*x1598)));
evalcond[3]=((((0.24)*x1596*x1601))+(((-0.095)*x1600))+(((-0.095)*x1602))+((x1599*x1603))+(((-1.0)*py))+(((0.11)*x1595))+(((0.265)*x1603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1605=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1605;
j4eval[1]=IKsign(x1605);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1606=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1606;
j4eval[1]=IKsign(x1606);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1607=((1.0)*sj0);
IkReal x1608=((1.0)*cj0);
IkReal x1609=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1609;
j4eval[1]=((IKabs(((((-1.0)*r02*x1608))+(((-1.0)*r12*x1607)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x1607))+(((-1.0)*cj5*r00*x1608))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x1609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1610=((-1.0)*r20);
IkReal x1612 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1612)==0){
continue;
}
IkReal x1611=pow(x1612,-0.5);
CheckValue<IkReal> x1613 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1610),IKFAST_ATAN2_MAGTHRESH);
if(!x1613.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1613.value));
IkReal gconst79=(r21*x1611);
IkReal gconst80=(x1610*x1611);
CheckValue<IkReal> x1614 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1614.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1614.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1615=((-1.0)*r20);
IkReal x1616=x1611;
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1615),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
IkReal x1617=((-1.0)*(x1618.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1617;
IkReal gconst78=x1617;
IkReal gconst79=(r21*x1616);
IkReal gconst80=(x1615*x1616);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1619=((-1.0)*r20);
IkReal x1620=x1611;
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1619),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
IkReal x1621=((-1.0)*(x1622.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1621;
IkReal gconst78=x1621;
IkReal gconst79=(r21*x1620);
IkReal gconst80=(x1619*x1620);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1623=((-1.0)*r20);
IkReal x1624=x1611;
CheckValue<IkReal> x1626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1623),IKFAST_ATAN2_MAGTHRESH);
if(!x1626.valid){
continue;
}
IkReal x1625=((-1.0)*(x1626.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1625;
IkReal gconst78=x1625;
IkReal gconst79=(r21*x1624);
IkReal gconst80=(x1623*x1624);
IkReal x1627=r22*r22;
CheckValue<IkReal> x1630=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1627))),-1);
if(!x1630.valid){
continue;
}
IkReal x1628=x1630.value;
IkReal x1629=(((x1628*(r21*r21*r21*r21)))+((x1628*(r20*r20*r20*r20)))+x1627+(((2.0)*x1628*(r20*r20)*(r21*r21))));
j4eval[0]=x1629;
j4eval[1]=IKsign(x1629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1631=(gconst80*r20);
IkReal x1632=(cj1*sj2);
IkReal x1633=(cj2*sj1);
IkReal x1634=((1.0)*gconst79*r21);
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal(((((-1.0)*x1633*x1634))+(((-1.0)*x1632*x1634))+((x1631*x1632))+((x1631*x1633)))),IkReal((((r22*x1632))+((r22*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x1631))+(((gconst79*gconst79)*(r21*r21)))+(x1631*x1631))),-1);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1635.value)+(((1.5707963267949)*(x1636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKcos(j4);
IkReal x1638=IKsin(j4);
IkReal x1639=(cj1*cj2);
IkReal x1640=((1.0)*sj1);
IkReal x1641=(gconst80*x1638);
IkReal x1642=(gconst79*x1637);
IkReal x1643=((1.0)*gconst80*x1637);
IkReal x1644=((1.0)*gconst79*x1638);
evalcond[0]=(((r21*x1642))+(((-1.0)*r20*x1643))+((r22*x1638)));
evalcond[1]=(((r11*x1642))+cj0+((r12*x1638))+(((-1.0)*r10*x1643)));
evalcond[2]=(((r02*x1638))+(((-1.0)*sj0))+(((-1.0)*r00*x1643))+((r01*x1642)));
evalcond[3]=(((r20*x1641))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1640))+(((-1.0)*r21*x1644))+((r22*x1637)));
evalcond[4]=(((r02*x1637))+(((-1.0)*r01*x1644))+((r00*x1641))+(((-1.0)*cj0*sj2*x1640))+((cj0*x1639)));
evalcond[5]=(((sj0*x1639))+((r10*x1641))+(((-1.0)*r11*x1644))+((r12*x1637))+(((-1.0)*sj0*sj2*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1645 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1645.valid){
continue;
}
CheckValue<IkReal> x1646=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1645.value)+(((1.5707963267949)*(x1646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1647=IKcos(j4);
IkReal x1648=IKsin(j4);
IkReal x1649=(cj1*cj2);
IkReal x1650=((1.0)*sj1);
IkReal x1651=(gconst80*x1648);
IkReal x1652=(gconst79*x1647);
IkReal x1653=((1.0)*gconst80*x1647);
IkReal x1654=((1.0)*gconst79*x1648);
evalcond[0]=((((-1.0)*r20*x1653))+((r22*x1648))+((r21*x1652)));
evalcond[1]=(cj0+(((-1.0)*r10*x1653))+((r11*x1652))+((r12*x1648)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1653))+((r02*x1648))+((r01*x1652)));
evalcond[3]=(((r20*x1651))+(((-1.0)*r21*x1654))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1650))+((r22*x1647)));
evalcond[4]=((((-1.0)*r01*x1654))+((r02*x1647))+(((-1.0)*cj0*sj2*x1650))+((r00*x1651))+((cj0*x1649)));
evalcond[5]=(((r10*x1651))+((sj0*x1649))+((r12*x1647))+(((-1.0)*r11*x1654))+(((-1.0)*sj0*sj2*x1650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1655=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1655.valid){
continue;
}
CheckValue<IkReal> x1656 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1655.value)))+(x1656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1657=IKcos(j4);
IkReal x1658=IKsin(j4);
IkReal x1659=(cj1*cj2);
IkReal x1660=((1.0)*sj1);
IkReal x1661=(gconst80*x1658);
IkReal x1662=(gconst79*x1657);
IkReal x1663=((1.0)*gconst80*x1657);
IkReal x1664=((1.0)*gconst79*x1658);
evalcond[0]=(((r22*x1658))+(((-1.0)*r20*x1663))+((r21*x1662)));
evalcond[1]=(((r12*x1658))+cj0+((r11*x1662))+(((-1.0)*r10*x1663)));
evalcond[2]=((((-1.0)*r00*x1663))+(((-1.0)*sj0))+((r02*x1658))+((r01*x1662)));
evalcond[3]=(((r22*x1657))+((r20*x1661))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1664))+(((-1.0)*cj2*x1660)));
evalcond[4]=((((-1.0)*r01*x1664))+((r02*x1657))+((r00*x1661))+(((-1.0)*cj0*sj2*x1660))+((cj0*x1659)));
evalcond[5]=(((sj0*x1659))+((r10*x1661))+((r12*x1657))+(((-1.0)*r11*x1664))+(((-1.0)*sj0*sj2*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1665=((-1.0)*r21);
IkReal x1667 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1667)==0){
continue;
}
IkReal x1666=pow(x1667,-0.5);
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal(x1665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1668.value))));
IkReal gconst82=(x1665*x1666);
IkReal gconst83=((1.0)*r20*x1666);
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1670=((-1.0)*r21);
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(x1670),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
IkReal x1671=((1.0)*(x1673.value));
IkReal x1672=x1666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1671)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1671)));
IkReal gconst82=(x1670*x1672);
IkReal gconst83=((1.0)*r20*x1672);
IkReal x1674=r22*r22;
IkReal x1675=((1.0)*x1674);
CheckValue<IkReal> x1679=IKPowWithIntegerCheck(((-1.0)+x1674),-1);
if(!x1679.valid){
continue;
}
IkReal x1676=x1679.value;
if((((1.0)+(((-1.0)*x1675)))) < -0.00001)
continue;
IkReal x1677=IKsqrt(((1.0)+(((-1.0)*x1675))));
IkReal x1678=(cj0*x1676*x1677);
j4eval[0]=((IKabs((x1678+(((-1.0)*x1675*x1678)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1680=((-1.0)*r21);
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal(x1680),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
IkReal x1681=((1.0)*(x1683.value));
IkReal x1682=x1666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1681)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1681)));
IkReal gconst82=(x1680*x1682);
IkReal gconst83=((1.0)*r20*x1682);
IkReal x1684=r22*r22;
IkReal x1685=((1.0)*x1684);
CheckValue<IkReal> x1689=IKPowWithIntegerCheck(((-1.0)+x1684),-1);
if(!x1689.valid){
continue;
}
IkReal x1686=x1689.value;
if((((1.0)+(((-1.0)*x1685)))) < -0.00001)
continue;
IkReal x1687=IKsqrt(((1.0)+(((-1.0)*x1685))));
IkReal x1688=(sj0*x1686*x1687);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1685*x1688))+x1688))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1690=((-1.0)*r21);
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal(x1690),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
IkReal x1691=((1.0)*(x1693.value));
IkReal x1692=x1666;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1691)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1691)));
IkReal gconst82=(x1690*x1692);
IkReal gconst83=((1.0)*r20*x1692);
IkReal x1694=r22*r22;
IkReal x1695=((1.0)*r12*sj0);
IkReal x1696=((1.0)*cj0*r02);
CheckValue<IkReal> x1700=IKPowWithIntegerCheck(((-1.0)+x1694),-1);
if(!x1700.valid){
continue;
}
IkReal x1697=x1700.value;
if((((1.0)+(((-1.0)*x1694)))) < -0.00001)
continue;
IkReal x1698=IKsqrt(((1.0)+(((-1.0)*x1694))));
IkReal x1699=(r22*x1697*x1698);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1696*x1699))+(((-1.0)*x1695*x1699)))))+(IKabs(((((-1.0)*x1695))+(((-1.0)*x1696))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=((1.0)*sj0);
IkReal x1702=((1.0)*cj0);
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r10*x1701))+(((-1.0)*gconst83*r00*x1702))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r02*x1702))+(((-1.0)*r12*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1703.value)))+(x1704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKcos(j4);
IkReal x1706=IKsin(j4);
IkReal x1707=(cj1*cj2);
IkReal x1708=((1.0)*sj1);
IkReal x1709=(gconst82*x1705);
IkReal x1710=(gconst83*x1706);
IkReal x1711=((1.0)*gconst82*x1706);
IkReal x1712=((1.0)*gconst83*x1705);
evalcond[0]=(((r22*x1706))+(((-1.0)*r20*x1712))+((r21*x1709)));
evalcond[1]=(((r12*x1706))+cj0+((r11*x1709))+(((-1.0)*r10*x1712)));
evalcond[2]=((((-1.0)*r00*x1712))+(((-1.0)*sj0))+((r02*x1706))+((r01*x1709)));
evalcond[3]=((((-1.0)*cj2*x1708))+((r22*x1705))+((r20*x1710))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1711)));
evalcond[4]=((((-1.0)*cj0*sj2*x1708))+((r02*x1705))+((cj0*x1707))+((r00*x1710))+(((-1.0)*r01*x1711)));
evalcond[5]=(((r12*x1705))+(((-1.0)*sj0*sj2*x1708))+((r10*x1710))+(((-1.0)*r11*x1711))+((sj0*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1713.value)))+(x1714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKcos(j4);
IkReal x1716=IKsin(j4);
IkReal x1717=(cj1*cj2);
IkReal x1718=((1.0)*sj1);
IkReal x1719=(gconst82*x1715);
IkReal x1720=(gconst83*x1716);
IkReal x1721=((1.0)*gconst82*x1716);
IkReal x1722=((1.0)*gconst83*x1715);
evalcond[0]=(((r22*x1716))+((r21*x1719))+(((-1.0)*r20*x1722)));
evalcond[1]=(cj0+((r11*x1719))+(((-1.0)*r10*x1722))+((r12*x1716)));
evalcond[2]=(((r02*x1716))+(((-1.0)*sj0))+(((-1.0)*r00*x1722))+((r01*x1719)));
evalcond[3]=(((r22*x1715))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1721))+((r20*x1720))+(((-1.0)*cj2*x1718)));
evalcond[4]=(((r02*x1715))+((r00*x1720))+(((-1.0)*cj0*sj2*x1718))+(((-1.0)*r01*x1721))+((cj0*x1717)));
evalcond[5]=((((-1.0)*r11*x1721))+((r10*x1720))+((r12*x1715))+(((-1.0)*sj0*sj2*x1718))+((sj0*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1723=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1723.valid){
continue;
}
CheckValue<IkReal> x1724 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1723.value)))+(x1724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1725=IKcos(j4);
IkReal x1726=IKsin(j4);
IkReal x1727=(cj1*cj2);
IkReal x1728=((1.0)*sj1);
IkReal x1729=(gconst82*x1725);
IkReal x1730=(gconst83*x1726);
IkReal x1731=((1.0)*gconst82*x1726);
IkReal x1732=((1.0)*gconst83*x1725);
evalcond[0]=(((r21*x1729))+((r22*x1726))+(((-1.0)*r20*x1732)));
evalcond[1]=(cj0+(((-1.0)*r10*x1732))+((r11*x1729))+((r12*x1726)));
evalcond[2]=(((r01*x1729))+(((-1.0)*sj0))+(((-1.0)*r00*x1732))+((r02*x1726)));
evalcond[3]=((((-1.0)*cj2*x1728))+(((-1.0)*cj1*sj2))+((r22*x1725))+((r20*x1730))+(((-1.0)*r21*x1731)));
evalcond[4]=(((cj0*x1727))+((r00*x1730))+(((-1.0)*r01*x1731))+((r02*x1725))+(((-1.0)*cj0*sj2*x1728)));
evalcond[5]=((((-1.0)*r11*x1731))+((r10*x1730))+((sj0*x1727))+((r12*x1725))+(((-1.0)*sj0*sj2*x1728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1734 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1734)==0){
continue;
}
IkReal x1733=pow(x1734,-0.5);
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1735.value));
IkReal gconst85=((-1.0)*r11*x1733);
IkReal gconst86=(r10*x1733);
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1736.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
IkReal x1737=((-1.0)*(x1739.value));
IkReal x1738=x1733;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1737;
IkReal gconst84=x1737;
IkReal gconst85=((-1.0)*r11*x1738);
IkReal gconst86=(r10*x1738);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1740=((1.0)*sj0);
IkReal x1741=((1.0)*gconst86);
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1741))+(((-1.0)*gconst86*r10*x1740))+((cj0*gconst85*r01)))),IkReal(((((-1.0)*r12*x1740))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
CheckValue<IkReal> x1743=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1741)))),-1);
if(!x1743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1742.value)+(((1.5707963267949)*(x1743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1744=IKcos(j4);
IkReal x1745=IKsin(j4);
IkReal x1746=(cj1*cj2);
IkReal x1747=((1.0)*sj1);
IkReal x1748=(gconst86*x1745);
IkReal x1749=(gconst85*x1744);
IkReal x1750=((1.0)*gconst85*x1745);
IkReal x1751=((1.0)*gconst86*x1744);
evalcond[0]=(((r22*x1745))+((r21*x1749))+(((-1.0)*r20*x1751)));
evalcond[1]=(((r12*x1745))+cj0+(((-1.0)*r10*x1751))+((r11*x1749)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1745))+(((-1.0)*r00*x1751))+((r01*x1749)));
evalcond[3]=(((r22*x1744))+(((-1.0)*cj1*sj2))+((r20*x1748))+(((-1.0)*cj2*x1747))+(((-1.0)*r21*x1750)));
evalcond[4]=((((-1.0)*cj0*sj2*x1747))+((r02*x1744))+(((-1.0)*r01*x1750))+((r00*x1748))+((cj0*x1746)));
evalcond[5]=((((-1.0)*r11*x1750))+((r12*x1744))+((sj0*x1746))+(((-1.0)*sj0*sj2*x1747))+((r10*x1748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1752.valid){
continue;
}
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1752.value)))+(x1753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1754=IKcos(j4);
IkReal x1755=IKsin(j4);
IkReal x1756=(cj1*cj2);
IkReal x1757=((1.0)*sj1);
IkReal x1758=(gconst86*x1755);
IkReal x1759=(gconst85*x1754);
IkReal x1760=((1.0)*gconst85*x1755);
IkReal x1761=((1.0)*gconst86*x1754);
evalcond[0]=((((-1.0)*r20*x1761))+((r22*x1755))+((r21*x1759)));
evalcond[1]=(cj0+(((-1.0)*r10*x1761))+((r11*x1759))+((r12*x1755)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1761))+((r02*x1755))+((r01*x1759)));
evalcond[3]=((((-1.0)*r21*x1760))+((r22*x1754))+(((-1.0)*cj1*sj2))+((r20*x1758))+(((-1.0)*cj2*x1757)));
evalcond[4]=((((-1.0)*r01*x1760))+((r02*x1754))+((cj0*x1756))+((r00*x1758))+(((-1.0)*cj0*sj2*x1757)));
evalcond[5]=((((-1.0)*r11*x1760))+((sj0*x1756))+(((-1.0)*sj0*sj2*x1757))+((r12*x1754))+((r10*x1758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1763 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1763)==0){
continue;
}
IkReal x1762=pow(x1763,-0.5);
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1764.value))));
IkReal gconst88=((1.0)*r11*x1762);
IkReal gconst89=((-1.0)*r10*x1762);
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1765.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1768 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1768.valid){
continue;
}
IkReal x1766=((1.0)*(x1768.value));
IkReal x1767=x1762;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1766)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1766)));
IkReal gconst88=((1.0)*r11*x1767);
IkReal gconst89=((-1.0)*r10*x1767);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
IkReal x1769=((1.0)*(x1771.value));
IkReal x1770=x1762;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1769)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1769)));
IkReal gconst88=((1.0)*r11*x1770);
IkReal gconst89=((-1.0)*r10*x1770);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
IkReal x1772=((1.0)*(x1774.value));
IkReal x1773=x1762;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1772)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1772)));
IkReal gconst88=((1.0)*r11*x1773);
IkReal gconst89=((-1.0)*r10*x1773);
IkReal x1775=r12*r12;
IkReal x1776=((1.0)*sj0);
IkReal x1777=(cj0*r02);
IkReal x1778=x1762;
j4eval[0]=((IKabs(((((-1.0)*x1776*x1778))+((sj0*x1775*x1778))+((r12*x1777*x1778)))))+(IKabs(((((-1.0)*x1777))+(((-1.0)*r12*x1776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1779=((1.0)*sj0);
IkReal x1780=((1.0)*gconst89);
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1780)))),-1);
if(!x1781.valid){
continue;
}
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1780))+(((-1.0)*gconst89*r10*x1779)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1781.value)))+(x1782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1783=IKcos(j4);
IkReal x1784=IKsin(j4);
IkReal x1785=(gconst88*r11);
IkReal x1786=(cj1*cj2);
IkReal x1787=((1.0)*sj1);
IkReal x1788=((1.0)*x1784);
IkReal x1789=(gconst89*x1784);
IkReal x1790=(gconst88*x1783);
IkReal x1791=((1.0)*gconst89*x1783);
evalcond[0]=(((r21*x1790))+((r22*x1784))+(((-1.0)*r20*x1791)));
evalcond[1]=((((-1.0)*r10*x1791))+((x1783*x1785))+cj0+((r12*x1784)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1791))+((r02*x1784))+((r01*x1790)));
evalcond[3]=(((r20*x1789))+(((-1.0)*cj1*sj2))+((r22*x1783))+(((-1.0)*cj2*x1787))+(((-1.0)*gconst88*r21*x1788)));
evalcond[4]=((((-1.0)*cj0*sj2*x1787))+((r02*x1783))+(((-1.0)*gconst88*r01*x1788))+((cj0*x1786))+((r00*x1789)));
evalcond[5]=(((r10*x1789))+((sj0*x1786))+(((-1.0)*x1785*x1788))+(((-1.0)*sj0*sj2*x1787))+((r12*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
CheckValue<IkReal> x1793=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1792.value)+(((1.5707963267949)*(x1793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1794=IKcos(j4);
IkReal x1795=IKsin(j4);
IkReal x1796=(gconst88*r11);
IkReal x1797=(cj1*cj2);
IkReal x1798=((1.0)*sj1);
IkReal x1799=((1.0)*x1795);
IkReal x1800=(gconst89*x1795);
IkReal x1801=(gconst88*x1794);
IkReal x1802=((1.0)*gconst89*x1794);
evalcond[0]=((((-1.0)*r20*x1802))+((r21*x1801))+((r22*x1795)));
evalcond[1]=((((-1.0)*r10*x1802))+cj0+((r12*x1795))+((x1794*x1796)));
evalcond[2]=((((-1.0)*r00*x1802))+(((-1.0)*sj0))+((r02*x1795))+((r01*x1801)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1798))+((r22*x1794))+(((-1.0)*gconst88*r21*x1799))+((r20*x1800)));
evalcond[4]=((((-1.0)*cj0*sj2*x1798))+((r02*x1794))+((r00*x1800))+(((-1.0)*gconst88*r01*x1799))+((cj0*x1797)));
evalcond[5]=((((-1.0)*x1796*x1799))+((sj0*x1797))+((r12*x1794))+(((-1.0)*sj0*sj2*x1798))+((r10*x1800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1803.value)))+(x1804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1805=IKcos(j4);
IkReal x1806=IKsin(j4);
IkReal x1807=(gconst88*r11);
IkReal x1808=(cj1*cj2);
IkReal x1809=((1.0)*sj1);
IkReal x1810=((1.0)*x1806);
IkReal x1811=(gconst89*x1806);
IkReal x1812=(gconst88*x1805);
IkReal x1813=((1.0)*gconst89*x1805);
evalcond[0]=(((r22*x1806))+((r21*x1812))+(((-1.0)*r20*x1813)));
evalcond[1]=(cj0+(((-1.0)*r10*x1813))+((r12*x1806))+((x1805*x1807)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1813))+((r02*x1806))+((r01*x1812)));
evalcond[3]=((((-1.0)*cj2*x1809))+((r22*x1805))+(((-1.0)*cj1*sj2))+((r20*x1811))+(((-1.0)*gconst88*r21*x1810)));
evalcond[4]=((((-1.0)*cj0*sj2*x1809))+(((-1.0)*gconst88*r01*x1810))+((cj0*x1808))+((r02*x1805))+((r00*x1811)));
evalcond[5]=(((sj0*x1808))+(((-1.0)*x1807*x1810))+((r12*x1805))+(((-1.0)*sj0*sj2*x1809))+((r10*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1814=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1814;
j4eval[1]=IKsign(x1814);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1815=((1.0)*cj5);
IkReal x1816=((((-1.0)*r21*x1815))+(((-1.0)*r20*sj5)));
j4eval[0]=x1816;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1815))))));
j4eval[2]=IKsign(x1816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1817=cj5*cj5;
IkReal x1818=r11*r11;
IkReal x1819=(cj5*r10);
IkReal x1820=(r11*sj5);
IkReal x1821=((((2.0)*x1819*x1820))+((x1817*x1818))+(((-1.0)*(r12*r12)))+(((-1.0)*x1817*(r10*r10)))+(((-1.0)*x1818)));
j4eval[0]=x1821;
j4eval[1]=((IKabs(r12))+(IKabs((x1820+(((-1.0)*x1819))))));
j4eval[2]=IKsign(x1821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1822=cj5*cj5;
IkReal x1823=r11*r11;
IkReal x1824=(cj5*r10);
IkReal x1825=(r11*sj5);
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x1824))+x1825)),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1822*(r10*r10)))+(((-1.0)*x1823))+(((2.0)*x1824*x1825))+((x1822*x1823))+(((-1.0)*(r12*r12))))),-1);
if(!x1827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1826.value)+(((1.5707963267949)*(x1827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1828=IKcos(j4);
IkReal x1829=IKsin(j4);
IkReal x1830=(cj5*r00);
IkReal x1831=((1.0)*sj2);
IkReal x1832=((1.0)*x1828);
IkReal x1833=(sj5*x1828);
IkReal x1834=(cj5*x1829);
IkReal x1835=((1.0)*sj5*x1829);
evalcond[0]=(((r22*x1829))+(((-1.0)*cj5*r20*x1832))+((r21*x1833)));
evalcond[1]=(((r01*x1833))+((r02*x1829))+(((-1.0)*x1830*x1832)));
evalcond[2]=(((r10*x1834))+(((-1.0)*r11*x1835))+((r12*x1828)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1832))+((r11*x1833))+((r12*x1829)));
evalcond[4]=((((-1.0)*r01*x1835))+((x1829*x1830))+(((-1.0)*sj1*x1831))+((r02*x1828))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*x1835))+(((-1.0)*cj2*sj1))+((r22*x1828))+((r20*x1834))+(((-1.0)*cj1*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1836=((1.0)*cj5);
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1836)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1836))+(((-1.0)*r20*sj5)))),-1);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1837.value)+(((1.5707963267949)*(x1838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKcos(j4);
IkReal x1840=IKsin(j4);
IkReal x1841=(cj5*r00);
IkReal x1842=((1.0)*sj2);
IkReal x1843=((1.0)*x1839);
IkReal x1844=(sj5*x1839);
IkReal x1845=(cj5*x1840);
IkReal x1846=((1.0)*sj5*x1840);
evalcond[0]=((((-1.0)*cj5*r20*x1843))+((r22*x1840))+((r21*x1844)));
evalcond[1]=((((-1.0)*x1841*x1843))+((r02*x1840))+((r01*x1844)));
evalcond[2]=(((r10*x1845))+(((-1.0)*r11*x1846))+((r12*x1839)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1843))+((r12*x1840))+((r11*x1844)));
evalcond[4]=(((x1840*x1841))+(((-1.0)*r01*x1846))+(((-1.0)*sj1*x1842))+((r02*x1839))+((cj1*cj2)));
evalcond[5]=(((r22*x1839))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x1842))+((r20*x1845))+(((-1.0)*r21*x1846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1847=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1847.valid){
continue;
}
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1847.value)))+(x1848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1849=IKcos(j4);
IkReal x1850=IKsin(j4);
IkReal x1851=(cj5*r00);
IkReal x1852=((1.0)*sj2);
IkReal x1853=((1.0)*x1849);
IkReal x1854=(sj5*x1849);
IkReal x1855=(cj5*x1850);
IkReal x1856=((1.0)*sj5*x1850);
evalcond[0]=(((r22*x1850))+((r21*x1854))+(((-1.0)*cj5*r20*x1853)));
evalcond[1]=(((r01*x1854))+(((-1.0)*x1851*x1853))+((r02*x1850)));
evalcond[2]=(((r10*x1855))+(((-1.0)*r11*x1856))+((r12*x1849)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1853))+((r11*x1854))+((r12*x1850)));
evalcond[4]=(((x1850*x1851))+((r02*x1849))+(((-1.0)*r01*x1856))+((cj1*cj2))+(((-1.0)*sj1*x1852)));
evalcond[5]=(((r22*x1849))+(((-1.0)*cj2*sj1))+((r20*x1855))+(((-1.0)*r21*x1856))+(((-1.0)*cj1*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1857=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1857;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1858=((1.0)*cj5);
IkReal x1859=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1858)));
j4eval[0]=x1859;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1858))))));
j4eval[2]=IKsign(x1859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1860=cj5*cj5;
IkReal x1861=r11*r11;
IkReal x1862=(r11*sj5);
IkReal x1863=(cj5*r10);
IkReal x1864=((r12*r12)+x1861+(((-2.0)*x1862*x1863))+(((-1.0)*x1860*x1861))+((x1860*(r10*r10))));
j4eval[0]=x1864;
j4eval[1]=((IKabs(r12))+(IKabs((x1862+(((-1.0)*x1863))))));
j4eval[2]=IKsign(x1864);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1865=cj5*cj5;
IkReal x1866=r11*r11;
IkReal x1867=(cj5*r10);
IkReal x1868=(r11*sj5);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(r12),IkReal((x1868+(((-1.0)*x1867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1865*x1866))+(r12*r12)+((x1865*(r10*r10)))+(((-2.0)*x1867*x1868))+x1866)),-1);
if(!x1870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1869.value)+(((1.5707963267949)*(x1870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1871=IKcos(j4);
IkReal x1872=IKsin(j4);
IkReal x1873=(cj5*r00);
IkReal x1874=((1.0)*cj1);
IkReal x1875=(cj5*r20);
IkReal x1876=(cj5*r10);
IkReal x1877=((1.0)*x1871);
IkReal x1878=(sj5*x1871);
IkReal x1879=((1.0)*sj5*x1872);
evalcond[0]=(((r22*x1872))+((r21*x1878))+(((-1.0)*x1875*x1877)));
evalcond[1]=((((-1.0)*x1873*x1877))+((r02*x1872))+((r01*x1878)));
evalcond[2]=((((-1.0)*r11*x1879))+((x1872*x1876))+((r12*x1871)));
evalcond[3]=((-1.0)+(((-1.0)*x1876*x1877))+((r12*x1872))+((r11*x1878)));
evalcond[4]=(((r02*x1871))+(((-1.0)*r01*x1879))+(((-1.0)*cj2*x1874))+((sj1*sj2))+((x1872*x1873)));
evalcond[5]=(((r22*x1871))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x1874))+((x1872*x1875))+(((-1.0)*r21*x1879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1880=((1.0)*cj5);
CheckValue<IkReal> x1881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1880)))),-1);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x1880)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1881.value)))+(x1882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1883=IKcos(j4);
IkReal x1884=IKsin(j4);
IkReal x1885=(cj5*r00);
IkReal x1886=((1.0)*cj1);
IkReal x1887=(cj5*r20);
IkReal x1888=(cj5*r10);
IkReal x1889=((1.0)*x1883);
IkReal x1890=(sj5*x1883);
IkReal x1891=((1.0)*sj5*x1884);
evalcond[0]=((((-1.0)*x1887*x1889))+((r22*x1884))+((r21*x1890)));
evalcond[1]=(((r01*x1890))+(((-1.0)*x1885*x1889))+((r02*x1884)));
evalcond[2]=(((r12*x1883))+(((-1.0)*r11*x1891))+((x1884*x1888)));
evalcond[3]=((-1.0)+((r12*x1884))+((r11*x1890))+(((-1.0)*x1888*x1889)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x1886))+(((-1.0)*r01*x1891))+((x1884*x1885))+((r02*x1883)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x1891))+((r22*x1883))+(((-1.0)*sj2*x1886))+((x1884*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1892=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1892.valid){
continue;
}
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1892.value)))+(x1893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1894=IKcos(j4);
IkReal x1895=IKsin(j4);
IkReal x1896=(cj5*r00);
IkReal x1897=((1.0)*cj1);
IkReal x1898=(cj5*r20);
IkReal x1899=(cj5*r10);
IkReal x1900=((1.0)*x1894);
IkReal x1901=(sj5*x1894);
IkReal x1902=((1.0)*sj5*x1895);
evalcond[0]=(((r22*x1895))+(((-1.0)*x1898*x1900))+((r21*x1901)));
evalcond[1]=(((r02*x1895))+((r01*x1901))+(((-1.0)*x1896*x1900)));
evalcond[2]=((((-1.0)*r11*x1902))+((x1895*x1899))+((r12*x1894)));
evalcond[3]=((-1.0)+(((-1.0)*x1899*x1900))+((r11*x1901))+((r12*x1895)));
evalcond[4]=(((r02*x1894))+((sj1*sj2))+(((-1.0)*cj2*x1897))+((x1895*x1896))+(((-1.0)*r01*x1902)));
evalcond[5]=(((r22*x1894))+(((-1.0)*sj2*x1897))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x1902))+((x1895*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1904 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1904)==0){
continue;
}
IkReal x1903=pow(x1904,-0.5);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1905.value));
IkReal gconst91=((-1.0)*r01*x1903);
IkReal gconst92=(r00*x1903);
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1906.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
IkReal x1907=((-1.0)*(x1909.value));
IkReal x1908=x1903;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1907;
IkReal gconst90=x1907;
IkReal gconst91=((-1.0)*r01*x1908);
IkReal gconst92=(r00*x1908);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1910=((1.0)*sj0);
IkReal x1911=((1.0)*gconst92);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x1911))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*gconst92*r10*x1910)))),IkReal(((((-1.0)*r12*x1910))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
CheckValue<IkReal> x1913=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x1911)))),-1);
if(!x1913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1912.value)+(((1.5707963267949)*(x1913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1914=IKcos(j4);
IkReal x1915=IKsin(j4);
IkReal x1916=(cj1*cj2);
IkReal x1917=(gconst92*r00);
IkReal x1918=((1.0)*sj1);
IkReal x1919=(gconst92*r10);
IkReal x1920=(gconst92*r20);
IkReal x1921=(gconst91*x1914);
IkReal x1922=((1.0)*x1914);
IkReal x1923=((1.0)*gconst91*x1915);
evalcond[0]=(((r22*x1915))+((r21*x1921))+(((-1.0)*x1920*x1922)));
evalcond[1]=(cj0+(((-1.0)*x1919*x1922))+((r12*x1915))+((r11*x1921)));
evalcond[2]=(((r01*x1921))+(((-1.0)*sj0))+(((-1.0)*x1917*x1922))+((r02*x1915)));
evalcond[3]=((((-1.0)*r21*x1923))+((r22*x1914))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1918))+((x1915*x1920)));
evalcond[4]=((((-1.0)*r01*x1923))+(((-1.0)*cj0*sj2*x1918))+((cj0*x1916))+((r02*x1914))+((x1915*x1917)));
evalcond[5]=((((-1.0)*r11*x1923))+((r12*x1914))+((sj0*x1916))+(((-1.0)*sj0*sj2*x1918))+((x1915*x1919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
CheckValue<IkReal> x1925=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x1925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1924.value)+(((1.5707963267949)*(x1925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1926=IKcos(j4);
IkReal x1927=IKsin(j4);
IkReal x1928=(cj1*cj2);
IkReal x1929=(gconst92*r00);
IkReal x1930=((1.0)*sj1);
IkReal x1931=(gconst92*r10);
IkReal x1932=(gconst92*r20);
IkReal x1933=(gconst91*x1926);
IkReal x1934=((1.0)*x1926);
IkReal x1935=((1.0)*gconst91*x1927);
evalcond[0]=(((r22*x1927))+((r21*x1933))+(((-1.0)*x1932*x1934)));
evalcond[1]=(cj0+(((-1.0)*x1931*x1934))+((r11*x1933))+((r12*x1927)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1933))+((r02*x1927))+(((-1.0)*x1929*x1934)));
evalcond[3]=(((r22*x1926))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1935))+(((-1.0)*cj2*x1930))+((x1927*x1932)));
evalcond[4]=((((-1.0)*r01*x1935))+((x1927*x1929))+((cj0*x1928))+(((-1.0)*cj0*sj2*x1930))+((r02*x1926)));
evalcond[5]=((((-1.0)*r11*x1935))+(((-1.0)*sj0*sj2*x1930))+((x1927*x1931))+((r12*x1926))+((sj0*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1937)==0){
continue;
}
IkReal x1936=pow(x1937,-0.5);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1938.value))));
IkReal gconst94=((1.0)*r01*x1936);
IkReal gconst95=((-1.0)*r00*x1936);
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
IkReal x1940=((1.0)*(x1942.value));
IkReal x1941=x1936;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1940)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1940)));
IkReal gconst94=((1.0)*r01*x1941);
IkReal gconst95=((-1.0)*r00*x1941);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
IkReal x1943=((1.0)*(x1945.value));
IkReal x1944=x1936;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1943)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1943)));
IkReal gconst94=((1.0)*r01*x1944);
IkReal gconst95=((-1.0)*r00*x1944);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1948 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1948.valid){
continue;
}
IkReal x1946=((1.0)*(x1948.value));
IkReal x1947=x1936;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1946)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1946)));
IkReal gconst94=((1.0)*r01*x1947);
IkReal gconst95=((-1.0)*r00*x1947);
IkReal x1949=r02*r02;
IkReal x1950=(r12*sj0);
IkReal x1951=((1.0)*cj0);
IkReal x1952=x1936;
j4eval[0]=((IKabs(((((-1.0)*r02*x1951))+(((-1.0)*x1950)))))+(IKabs((((r02*x1950*x1952))+(((-1.0)*x1951*x1952))+((cj0*x1949*x1952))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1953=((1.0)*sj0);
IkReal x1954=((1.0)*gconst95);
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1954))+(((-1.0)*gconst94*r20)))),-1);
if(!x1955.valid){
continue;
}
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x1954))+((gconst94*r11*sj0))+(((-1.0)*gconst95*r10*x1953))+((cj0*gconst94*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1955.value)))+(x1956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1957=IKcos(j4);
IkReal x1958=IKsin(j4);
IkReal x1959=(cj1*cj2);
IkReal x1960=((1.0)*sj1);
IkReal x1961=(gconst95*x1958);
IkReal x1962=(gconst94*x1957);
IkReal x1963=((1.0)*gconst95*x1957);
IkReal x1964=((1.0)*gconst94*x1958);
evalcond[0]=(((r21*x1962))+((r22*x1958))+(((-1.0)*r20*x1963)));
evalcond[1]=(cj0+((r12*x1958))+((r11*x1962))+(((-1.0)*r10*x1963)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1963))+((r01*x1962))+((r02*x1958)));
evalcond[3]=(((r20*x1961))+(((-1.0)*cj1*sj2))+((r22*x1957))+(((-1.0)*cj2*x1960))+(((-1.0)*r21*x1964)));
evalcond[4]=(((cj0*x1959))+(((-1.0)*cj0*sj2*x1960))+((r00*x1961))+(((-1.0)*r01*x1964))+((r02*x1957)));
evalcond[5]=(((r10*x1961))+((r12*x1957))+((sj0*x1959))+(((-1.0)*r11*x1964))+(((-1.0)*sj0*sj2*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1965=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x1965.valid){
continue;
}
CheckValue<IkReal> x1966 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1965.value)))+(x1966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1967=IKcos(j4);
IkReal x1968=IKsin(j4);
IkReal x1969=(cj1*cj2);
IkReal x1970=((1.0)*sj1);
IkReal x1971=(gconst95*x1968);
IkReal x1972=(gconst94*x1967);
IkReal x1973=((1.0)*gconst95*x1967);
IkReal x1974=((1.0)*gconst94*x1968);
evalcond[0]=(((r21*x1972))+((r22*x1968))+(((-1.0)*r20*x1973)));
evalcond[1]=(cj0+((r12*x1968))+((r11*x1972))+(((-1.0)*r10*x1973)));
evalcond[2]=(((r02*x1968))+(((-1.0)*sj0))+(((-1.0)*r00*x1973))+((r01*x1972)));
evalcond[3]=(((r20*x1971))+(((-1.0)*cj1*sj2))+((r22*x1967))+(((-1.0)*cj2*x1970))+(((-1.0)*r21*x1974)));
evalcond[4]=(((cj0*x1969))+((r02*x1967))+(((-1.0)*cj0*sj2*x1970))+(((-1.0)*r01*x1974))+((r00*x1971)));
evalcond[5]=(((r10*x1971))+((r12*x1967))+((sj0*x1969))+(((-1.0)*r11*x1974))+(((-1.0)*sj0*sj2*x1970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1975 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1975.valid){
continue;
}
CheckValue<IkReal> x1976=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x1976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1975.value)+(((1.5707963267949)*(x1976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1977=IKcos(j4);
IkReal x1978=IKsin(j4);
IkReal x1979=(cj1*cj2);
IkReal x1980=((1.0)*sj1);
IkReal x1981=(gconst95*x1978);
IkReal x1982=(gconst94*x1977);
IkReal x1983=((1.0)*gconst95*x1977);
IkReal x1984=((1.0)*gconst94*x1978);
evalcond[0]=(((r21*x1982))+((r22*x1978))+(((-1.0)*r20*x1983)));
evalcond[1]=(cj0+((r12*x1978))+((r11*x1982))+(((-1.0)*r10*x1983)));
evalcond[2]=(((r02*x1978))+(((-1.0)*sj0))+((r01*x1982))+(((-1.0)*r00*x1983)));
evalcond[3]=((((-1.0)*cj2*x1980))+(((-1.0)*cj1*sj2))+((r22*x1977))+(((-1.0)*r21*x1984))+((r20*x1981)));
evalcond[4]=(((r02*x1977))+(((-1.0)*cj0*sj2*x1980))+((r00*x1981))+(((-1.0)*r01*x1984))+((cj0*x1979)));
evalcond[5]=(((r12*x1977))+((r10*x1981))+(((-1.0)*r11*x1984))+((sj0*x1979))+(((-1.0)*sj0*sj2*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1985=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1985;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1986=((1.0)*cj5);
IkReal x1987=((((-1.0)*r21*x1986))+(((-1.0)*r20*sj5)));
j4eval[0]=x1987;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x1986))))));
j4eval[2]=IKsign(x1987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1988=cj5*cj5;
IkReal x1989=r01*r01;
IkReal x1990=(cj5*r00);
IkReal x1991=(r01*sj5);
IkReal x1992=((((-1.0)*x1988*x1989))+x1989+((x1988*(r00*r00)))+(r02*r02)+(((-2.0)*x1990*x1991)));
j4eval[0]=x1992;
j4eval[1]=IKsign(x1992);
j4eval[2]=((IKabs((x1991+(((-1.0)*x1990)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1993=cj5*cj5;
IkReal x1994=r01*r01;
IkReal x1995=(r01*sj5);
IkReal x1996=(cj5*r00);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(r02),IkReal((x1995+(((-1.0)*x1996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(IKsign((x1994+(((-1.0)*x1993*x1994))+(r02*r02)+((x1993*(r00*r00)))+(((-2.0)*x1995*x1996)))),-1);
if(!x1998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1997.value)+(((1.5707963267949)*(x1998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1999=IKcos(j4);
IkReal x2000=IKsin(j4);
IkReal x2001=(cj5*r00);
IkReal x2002=((1.0)*sj2);
IkReal x2003=((1.0)*x1999);
IkReal x2004=(sj5*x1999);
IkReal x2005=(cj5*x2000);
IkReal x2006=((1.0)*sj5*x2000);
evalcond[0]=(((r22*x2000))+((r21*x2004))+(((-1.0)*cj5*r20*x2003)));
evalcond[1]=(((r11*x2004))+((r12*x2000))+(((-1.0)*cj5*r10*x2003)));
evalcond[2]=(((x2000*x2001))+(((-1.0)*r01*x2006))+((r02*x1999)));
evalcond[3]=((-1.0)+((r01*x2004))+((r02*x2000))+(((-1.0)*x2001*x2003)));
evalcond[4]=(((r12*x1999))+((r10*x2005))+(((-1.0)*r11*x2006))+(((-1.0)*sj1*x2002))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2002))+((r20*x2005))+(((-1.0)*r21*x2006))+((r22*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=((1.0)*cj5);
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2007))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2007))+(((-1.0)*r20*sj5)))),-1);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2008.value)+(((1.5707963267949)*(x2009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2010=IKcos(j4);
IkReal x2011=IKsin(j4);
IkReal x2012=(cj5*r00);
IkReal x2013=((1.0)*sj2);
IkReal x2014=((1.0)*x2010);
IkReal x2015=(sj5*x2010);
IkReal x2016=(cj5*x2011);
IkReal x2017=((1.0)*sj5*x2011);
evalcond[0]=(((r22*x2011))+((r21*x2015))+(((-1.0)*cj5*r20*x2014)));
evalcond[1]=((((-1.0)*cj5*r10*x2014))+((r12*x2011))+((r11*x2015)));
evalcond[2]=(((x2011*x2012))+((r02*x2010))+(((-1.0)*r01*x2017)));
evalcond[3]=((-1.0)+((r01*x2015))+(((-1.0)*x2012*x2014))+((r02*x2011)));
evalcond[4]=(((r10*x2016))+((cj1*cj2))+((r12*x2010))+(((-1.0)*r11*x2017))+(((-1.0)*sj1*x2013)));
evalcond[5]=((((-1.0)*r21*x2017))+((r20*x2016))+(((-1.0)*cj2*sj1))+((r22*x2010))+(((-1.0)*cj1*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2018 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2018.valid){
continue;
}
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2018.value)+(((1.5707963267949)*(x2019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2020=IKcos(j4);
IkReal x2021=IKsin(j4);
IkReal x2022=(cj5*r00);
IkReal x2023=((1.0)*sj2);
IkReal x2024=((1.0)*x2020);
IkReal x2025=(sj5*x2020);
IkReal x2026=(cj5*x2021);
IkReal x2027=((1.0)*sj5*x2021);
evalcond[0]=(((r22*x2021))+(((-1.0)*cj5*r20*x2024))+((r21*x2025)));
evalcond[1]=((((-1.0)*cj5*r10*x2024))+((r11*x2025))+((r12*x2021)));
evalcond[2]=((((-1.0)*r01*x2027))+((r02*x2020))+((x2021*x2022)));
evalcond[3]=((-1.0)+((r01*x2025))+(((-1.0)*x2022*x2024))+((r02*x2021)));
evalcond[4]=(((r10*x2026))+(((-1.0)*r11*x2027))+(((-1.0)*sj1*x2023))+((cj1*cj2))+((r12*x2020)));
evalcond[5]=(((r22*x2020))+(((-1.0)*cj1*x2023))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2027))+((r20*x2026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2028=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2028;
j4eval[1]=IKsign(x2028);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2029=((1.0)*cj5);
IkReal x2030=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2029)));
j4eval[0]=x2030;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2029))))));
j4eval[2]=IKsign(x2030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2031=cj5*cj5;
IkReal x2032=r01*r01;
IkReal x2033=(r01*sj5);
IkReal x2034=(cj5*r00);
IkReal x2035=(((x2031*x2032))+(((-1.0)*(r02*r02)))+(((2.0)*x2033*x2034))+(((-1.0)*x2032))+(((-1.0)*x2031*(r00*r00))));
j4eval[0]=x2035;
j4eval[1]=IKsign(x2035);
j4eval[2]=((IKabs(r02))+(IKabs((x2033+(((-1.0)*x2034))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2036=cj5*cj5;
IkReal x2037=r01*r01;
IkReal x2038=(r01*sj5);
IkReal x2039=(cj5*r00);
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(r02),IkReal((x2038+(((-1.0)*x2039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(IKsign(((((2.0)*x2038*x2039))+(((-1.0)*(r02*r02)))+(((-1.0)*x2037))+((x2036*x2037))+(((-1.0)*x2036*(r00*r00))))),-1);
if(!x2041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2040.value)+(((1.5707963267949)*(x2041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2042=IKcos(j4);
IkReal x2043=IKsin(j4);
IkReal x2044=(cj5*r00);
IkReal x2045=((1.0)*cj1);
IkReal x2046=((1.0)*x2042);
IkReal x2047=(sj5*x2042);
IkReal x2048=(cj5*x2043);
IkReal x2049=((1.0)*sj5*x2043);
evalcond[0]=(((r22*x2043))+((r21*x2047))+(((-1.0)*cj5*r20*x2046)));
evalcond[1]=((((-1.0)*cj5*r10*x2046))+((r11*x2047))+((r12*x2043)));
evalcond[2]=(((x2043*x2044))+((r02*x2042))+(((-1.0)*r01*x2049)));
evalcond[3]=((1.0)+((r02*x2043))+(((-1.0)*x2044*x2046))+((r01*x2047)));
evalcond[4]=((((-1.0)*cj2*x2045))+((r12*x2042))+((sj1*sj2))+((r10*x2048))+(((-1.0)*r11*x2049)));
evalcond[5]=(((r22*x2042))+((r20*x2048))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2045))+(((-1.0)*r21*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2050=((1.0)*cj5);
CheckValue<IkReal> x2051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2050)))),-1);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2050)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2051.value)))+(x2052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2053=IKcos(j4);
IkReal x2054=IKsin(j4);
IkReal x2055=(cj5*r00);
IkReal x2056=((1.0)*cj1);
IkReal x2057=((1.0)*x2053);
IkReal x2058=(sj5*x2053);
IkReal x2059=(cj5*x2054);
IkReal x2060=((1.0)*sj5*x2054);
evalcond[0]=(((r22*x2054))+(((-1.0)*cj5*r20*x2057))+((r21*x2058)));
evalcond[1]=((((-1.0)*cj5*r10*x2057))+((r12*x2054))+((r11*x2058)));
evalcond[2]=(((x2054*x2055))+((r02*x2053))+(((-1.0)*r01*x2060)));
evalcond[3]=((1.0)+((r01*x2058))+((r02*x2054))+(((-1.0)*x2055*x2057)));
evalcond[4]=(((r10*x2059))+((r12*x2053))+(((-1.0)*cj2*x2056))+(((-1.0)*r11*x2060))+((sj1*sj2)));
evalcond[5]=(((r22*x2053))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2056))+(((-1.0)*r21*x2060))+((r20*x2059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2061.value)))+(x2062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2063=IKcos(j4);
IkReal x2064=IKsin(j4);
IkReal x2065=(cj5*r00);
IkReal x2066=((1.0)*cj1);
IkReal x2067=((1.0)*x2063);
IkReal x2068=(sj5*x2063);
IkReal x2069=(cj5*x2064);
IkReal x2070=((1.0)*sj5*x2064);
evalcond[0]=(((r22*x2064))+((r21*x2068))+(((-1.0)*cj5*r20*x2067)));
evalcond[1]=((((-1.0)*cj5*r10*x2067))+((r12*x2064))+((r11*x2068)));
evalcond[2]=(((r02*x2063))+(((-1.0)*r01*x2070))+((x2064*x2065)));
evalcond[3]=((1.0)+((r02*x2064))+(((-1.0)*x2065*x2067))+((r01*x2068)));
evalcond[4]=((((-1.0)*r11*x2070))+((r12*x2063))+(((-1.0)*cj2*x2066))+((sj1*sj2))+((r10*x2069)));
evalcond[5]=(((r22*x2063))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2066))+((r20*x2069))+(((-1.0)*r21*x2070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2071=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2071);
rxp1_1=(px*r21);
rxp1_2=(r11*x2071);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2072=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2072);
rxp1_1=(px*r21);
rxp1_2=(r11*x2072);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2073=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2073);
rxp1_1=(px*r21);
rxp1_2=(r11*x2073);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2076=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2076.valid){
continue;
}
IkReal x2074=x2076.value;
IkReal x2075=(sj0*x2074);
sj4array[0]=(((sj1*sj2*x2075))+(((-1.0)*cj1*cj2*x2075)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2077=IKcos(j4);
IkReal x2078=IKsin(j4);
IkReal x2079=(r21*sj5);
IkReal x2080=((1.0)*cj5*x2077);
evalcond[0]=(r02*x2077);
evalcond[1]=((((-1.0)*sj0))+((r02*x2078)));
evalcond[2]=((((-1.0)*r20*x2080))+((x2077*x2079)));
evalcond[3]=((((-1.0)*r10*x2080))+((r11*sj5*x2077)));
evalcond[4]=((((-1.0)*x2078*x2079))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2082=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2082.valid){
continue;
}
IkReal x2081=x2082.value;
sj4array[0]=(((cj2*sj1*x2081))+((cj1*sj2*x2081)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2083=IKcos(j4);
IkReal x2084=IKsin(j4);
IkReal x2085=((1.0)*sj0);
IkReal x2086=(r11*sj5);
IkReal x2087=((1.0)*cj5*x2083);
evalcond[0]=(r02*x2083);
evalcond[1]=(((r02*x2084))+(((-1.0)*x2085)));
evalcond[2]=((((-1.0)*r20*x2087))+((r21*sj5*x2083)));
evalcond[3]=(((x2083*x2086))+(((-1.0)*r10*x2087)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x2084*x2086))+((cj5*r10*x2084))+(((-1.0)*sj1*sj2*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2088=IKPowWithIntegerCheck(r02,-1);
if(!x2088.valid){
continue;
}
sj4array[0]=(sj0*(x2088.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2089=IKcos(j4);
IkReal x2090=IKsin(j4);
IkReal x2091=((1.0)*sj1);
IkReal x2092=(sj5*x2089);
IkReal x2093=(cj5*x2090);
IkReal x2094=((1.0)*sj5*x2090);
IkReal x2095=((1.0)*cj5*x2089);
evalcond[0]=(r02*x2089);
evalcond[1]=((((-1.0)*r20*x2095))+((r21*x2092)));
evalcond[2]=((((-1.0)*r10*x2095))+((r11*x2092)));
evalcond[3]=((((-1.0)*r21*x2094))+((r20*x2093))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2091)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x2093))+(((-1.0)*r11*x2094))+(((-1.0)*sj0*sj2*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2096=((1.0)*sj0);
IkReal x2097=((1.0)*cj0);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x2097))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x2096)))),IkReal(((((-1.0)*r12*x2096))+(((-1.0)*r02*x2097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2098.value)))+(x2099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2100=IKcos(j4);
IkReal x2101=IKsin(j4);
IkReal x2102=(cj5*r00);
IkReal x2103=(cj1*cj2);
IkReal x2104=((1.0)*sj1);
IkReal x2105=((1.0)*x2100);
IkReal x2106=(sj5*x2100);
IkReal x2107=(cj5*x2101);
IkReal x2108=((1.0)*sj5*x2101);
evalcond[0]=(((r21*x2106))+(((-1.0)*cj5*r20*x2105))+((r22*x2101)));
evalcond[1]=(((r12*x2101))+cj0+(((-1.0)*cj5*r10*x2105))+((r11*x2106)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2102*x2105))+((r02*x2101))+((r01*x2106)));
evalcond[3]=(((r20*x2107))+(((-1.0)*cj2*x2104))+(((-1.0)*cj1*sj2))+((r22*x2100))+(((-1.0)*r21*x2108)));
evalcond[4]=((((-1.0)*cj0*sj2*x2104))+((cj0*x2103))+((r02*x2100))+(((-1.0)*r01*x2108))+((x2101*x2102)));
evalcond[5]=(((r12*x2100))+(((-1.0)*r11*x2108))+(((-1.0)*sj0*sj2*x2104))+((r10*x2107))+((sj0*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2111=IKcos(j4);
IkReal x2112=IKsin(j4);
IkReal x2113=(cj5*r00);
IkReal x2114=(cj1*cj2);
IkReal x2115=((1.0)*sj1);
IkReal x2116=((1.0)*x2111);
IkReal x2117=(sj5*x2111);
IkReal x2118=(cj5*x2112);
IkReal x2119=((1.0)*sj5*x2112);
evalcond[0]=(((r21*x2117))+(((-1.0)*cj5*r20*x2116))+((r22*x2112)));
evalcond[1]=(((r12*x2112))+(((-1.0)*cj5*r10*x2116))+cj0+((r11*x2117)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2117))+((r02*x2112))+(((-1.0)*x2113*x2116)));
evalcond[3]=((((-1.0)*r21*x2119))+(((-1.0)*cj1*sj2))+((r20*x2118))+(((-1.0)*cj2*x2115))+((r22*x2111)));
evalcond[4]=((((-1.0)*r01*x2119))+(((-1.0)*cj0*sj2*x2115))+((cj0*x2114))+((r02*x2111))+((x2112*x2113)));
evalcond[5]=(((r12*x2111))+((sj0*x2114))+(((-1.0)*sj0*sj2*x2115))+((r10*x2118))+(((-1.0)*r11*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2120 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2120.valid){
continue;
}
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2120.value)+(((1.5707963267949)*(x2121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2122=IKcos(j4);
IkReal x2123=IKsin(j4);
IkReal x2124=(cj5*r00);
IkReal x2125=(cj1*cj2);
IkReal x2126=((1.0)*sj1);
IkReal x2127=((1.0)*x2122);
IkReal x2128=(sj5*x2122);
IkReal x2129=(cj5*x2123);
IkReal x2130=((1.0)*sj5*x2123);
evalcond[0]=(((r21*x2128))+((r22*x2123))+(((-1.0)*cj5*r20*x2127)));
evalcond[1]=(cj0+((r12*x2123))+((r11*x2128))+(((-1.0)*cj5*r10*x2127)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2123))+((r01*x2128))+(((-1.0)*x2124*x2127)));
evalcond[3]=(((r20*x2129))+(((-1.0)*cj2*x2126))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2130))+((r22*x2122)));
evalcond[4]=(((x2123*x2124))+(((-1.0)*r01*x2130))+((r02*x2122))+(((-1.0)*cj0*sj2*x2126))+((cj0*x2125)));
evalcond[5]=(((r12*x2122))+(((-1.0)*r11*x2130))+((sj0*x2125))+((r10*x2129))+(((-1.0)*sj0*sj2*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2131=cj5*cj5;
IkReal x2132=r21*r21;
IkReal x2133=(cj1*sj2);
IkReal x2134=(cj5*r20);
IkReal x2135=(r21*sj5);
IkReal x2136=(cj2*sj1);
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal((((x2134*x2136))+(((-1.0)*x2133*x2135))+((x2133*x2134))+(((-1.0)*x2135*x2136)))),IkReal((((r22*x2136))+((r22*x2133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
CheckValue<IkReal> x2138=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2132+(((-1.0)*x2131*x2132))+((x2131*(r20*r20)))+(((-2.0)*x2134*x2135)))),-1);
if(!x2138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2137.value)+(((1.5707963267949)*(x2138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2139=IKcos(j4);
IkReal x2140=IKsin(j4);
IkReal x2141=(r21*sj5);
IkReal x2142=(cj5*r20);
evalcond[0]=((((-1.0)*x2139*x2142))+((r22*x2140))+((x2139*x2141)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2140*x2141))+((x2140*x2142))+((r22*x2139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2143=(cj4*cj5);
IkReal x2144=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r00*x2143))+((r01*x2144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2144))+((r10*x2143))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r00*x2143))+((r01*x2144))))+IKsqr(((((-1.0)*r11*x2144))+((r10*x2143))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r00*x2143))+((r01*x2144))), ((((-1.0)*r11*x2144))+((r10*x2143))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2145=IKcos(j0);
IkReal x2146=IKsin(j0);
IkReal x2147=(r00*sj5);
IkReal x2148=(cj5*r00);
IkReal x2149=(cj5*r01);
IkReal x2150=((1.0)*sj2);
IkReal x2151=(cj1*cj2);
IkReal x2152=((0.24)*cj2);
IkReal x2153=((1.0)*cj4);
IkReal x2154=(cj5*r11);
IkReal x2155=(cj5*r10);
IkReal x2156=(cj1*sj2);
IkReal x2157=(cj4*sj5);
IkReal x2158=(r10*sj5);
IkReal x2159=(sj1*x2146);
IkReal x2160=((1.0)*sj4*sj5);
IkReal x2161=(sj1*x2145);
evalcond[0]=(x2145+(((-1.0)*x2153*x2155))+((r12*sj4))+((r11*x2157)));
evalcond[1]=((((-1.0)*x2146))+(((-1.0)*x2148*x2153))+((r02*sj4))+((r01*x2157)));
evalcond[2]=(((x2145*x2156))+x2147+x2149+((cj2*x2161)));
evalcond[3]=(((x2146*x2156))+x2154+x2158+((cj2*x2159)));
evalcond[4]=((((-1.0)*r01*x2160))+((x2145*x2151))+(((-1.0)*x2150*x2161))+((sj4*x2148))+((cj4*r02)));
evalcond[5]=(((x2146*x2151))+((sj4*x2155))+(((-1.0)*r11*x2160))+(((-1.0)*x2150*x2159))+((cj4*r12)));
evalcond[6]=((((-0.11)*x2146))+(((0.24)*x2145*x2156))+(((-0.095)*x2147))+(((-0.095)*x2149))+(((-1.0)*px))+(((0.265)*x2161))+((x2152*x2161)));
evalcond[7]=((((0.24)*x2146*x2156))+(((0.265)*x2159))+(((-0.095)*x2154))+(((-0.095)*x2158))+((x2152*x2159))+(((-1.0)*py))+(((0.11)*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2162=((1.0)*cj5);
IkReal x2163=((1.0)*sj5);
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2163))+(((-1.0)*r11*x2162)))),IkReal(((((-1.0)*r01*x2162))+(((-1.0)*r00*x2163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2164.value)))+(x2165.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2166=IKcos(j0);
IkReal x2167=IKsin(j0);
IkReal x2168=(r00*sj5);
IkReal x2169=(cj5*r01);
IkReal x2170=((0.24)*cj2);
IkReal x2171=(cj5*r11);
IkReal x2172=(cj1*sj2);
IkReal x2173=(r10*sj5);
IkReal x2174=(sj1*x2167);
IkReal x2175=(sj1*x2166);
evalcond[0]=(((cj2*x2175))+x2169+x2168+((x2166*x2172)));
evalcond[1]=(((cj2*x2174))+x2173+x2171+((x2167*x2172)));
evalcond[2]=(((x2170*x2175))+(((0.265)*x2175))+(((-1.0)*px))+(((-0.11)*x2167))+(((0.24)*x2166*x2172))+(((-0.095)*x2168))+(((-0.095)*x2169)));
evalcond[3]=(((x2170*x2174))+(((0.11)*x2166))+(((0.265)*x2174))+(((-1.0)*py))+(((0.24)*x2167*x2172))+(((-0.095)*x2171))+(((-0.095)*x2173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2176=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2176;
j4eval[1]=IKsign(x2176);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2177=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2177;
j4eval[1]=IKsign(x2177);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2178=((1.0)*sj0);
IkReal x2179=((1.0)*cj0);
IkReal x2180=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2180;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x2179))+(((-1.0)*cj5*r10*x2178))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x2179))+(((-1.0)*r12*x2178))))));
j4eval[2]=IKsign(x2180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2181=((-1.0)*r20);
IkReal x2183 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2183)==0){
continue;
}
IkReal x2182=pow(x2183,-0.5);
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2181),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2184.value));
IkReal gconst79=(r21*x2182);
IkReal gconst80=(x2181*x2182);
CheckValue<IkReal> x2185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2185.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2185.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2186=((-1.0)*r20);
IkReal x2187=x2182;
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2186),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
IkReal x2188=((-1.0)*(x2189.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2188;
IkReal gconst78=x2188;
IkReal gconst79=(r21*x2187);
IkReal gconst80=(x2186*x2187);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2190=((-1.0)*r20);
IkReal x2191=x2182;
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2190),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
IkReal x2192=((-1.0)*(x2193.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2192;
IkReal gconst78=x2192;
IkReal gconst79=(r21*x2191);
IkReal gconst80=(x2190*x2191);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2194=((-1.0)*r20);
IkReal x2195=x2182;
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2194),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
IkReal x2196=((-1.0)*(x2197.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2196;
IkReal gconst78=x2196;
IkReal gconst79=(r21*x2195);
IkReal gconst80=(x2194*x2195);
IkReal x2198=r22*r22;
CheckValue<IkReal> x2201=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2198))),-1);
if(!x2201.valid){
continue;
}
IkReal x2199=x2201.value;
IkReal x2200=(((x2199*(r20*r20*r20*r20)))+x2198+(((2.0)*x2199*(r20*r20)*(r21*r21)))+((x2199*(r21*r21*r21*r21))));
j4eval[0]=x2200;
j4eval[1]=IKsign(x2200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2202=(gconst80*r20);
IkReal x2203=(cj1*sj2);
IkReal x2204=(cj2*sj1);
IkReal x2205=((1.0)*gconst79*r21);
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal((((x2202*x2204))+((x2202*x2203))+(((-1.0)*x2203*x2205))+(((-1.0)*x2204*x2205)))),IkReal((((r22*x2203))+((r22*x2204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
CheckValue<IkReal> x2207=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((gconst79*gconst79)*(r21*r21)))+(((-2.0)*gconst79*r21*x2202))+(x2202*x2202))),-1);
if(!x2207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2206.value)+(((1.5707963267949)*(x2207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2208=IKcos(j4);
IkReal x2209=IKsin(j4);
IkReal x2210=(cj1*cj2);
IkReal x2211=((1.0)*sj1);
IkReal x2212=(gconst80*x2209);
IkReal x2213=(gconst79*x2208);
IkReal x2214=((1.0)*gconst80*x2208);
IkReal x2215=((1.0)*gconst79*x2209);
evalcond[0]=((((-1.0)*r20*x2214))+((r21*x2213))+((r22*x2209)));
evalcond[1]=(cj0+(((-1.0)*r10*x2214))+((r12*x2209))+((r11*x2213)));
evalcond[2]=(((r02*x2209))+(((-1.0)*sj0))+((r01*x2213))+(((-1.0)*r00*x2214)));
evalcond[3]=(((r20*x2212))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2215))+(((-1.0)*cj2*x2211))+((r22*x2208)));
evalcond[4]=(((r02*x2208))+(((-1.0)*cj0*sj2*x2211))+((r00*x2212))+((cj0*x2210))+(((-1.0)*r01*x2215)));
evalcond[5]=((((-1.0)*r11*x2215))+((r12*x2208))+((sj0*x2210))+((r10*x2212))+(((-1.0)*sj0*sj2*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
CheckValue<IkReal> x2217=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2216.value)+(((1.5707963267949)*(x2217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2218=IKcos(j4);
IkReal x2219=IKsin(j4);
IkReal x2220=(cj1*cj2);
IkReal x2221=((1.0)*sj1);
IkReal x2222=(gconst80*x2219);
IkReal x2223=(gconst79*x2218);
IkReal x2224=((1.0)*gconst80*x2218);
IkReal x2225=((1.0)*gconst79*x2219);
evalcond[0]=((((-1.0)*r20*x2224))+((r21*x2223))+((r22*x2219)));
evalcond[1]=((((-1.0)*r10*x2224))+cj0+((r12*x2219))+((r11*x2223)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2224))+((r01*x2223))+((r02*x2219)));
evalcond[3]=((((-1.0)*r21*x2225))+(((-1.0)*cj1*sj2))+((r20*x2222))+((r22*x2218))+(((-1.0)*cj2*x2221)));
evalcond[4]=(((cj0*x2220))+(((-1.0)*r01*x2225))+(((-1.0)*cj0*sj2*x2221))+((r00*x2222))+((r02*x2218)));
evalcond[5]=(((r12*x2218))+(((-1.0)*sj0*sj2*x2221))+((sj0*x2220))+((r10*x2222))+(((-1.0)*r11*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2228=IKcos(j4);
IkReal x2229=IKsin(j4);
IkReal x2230=(cj1*cj2);
IkReal x2231=((1.0)*sj1);
IkReal x2232=(gconst80*x2229);
IkReal x2233=(gconst79*x2228);
IkReal x2234=((1.0)*gconst80*x2228);
IkReal x2235=((1.0)*gconst79*x2229);
evalcond[0]=((((-1.0)*r20*x2234))+((r22*x2229))+((r21*x2233)));
evalcond[1]=((((-1.0)*r10*x2234))+((r12*x2229))+cj0+((r11*x2233)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2229))+(((-1.0)*r00*x2234))+((r01*x2233)));
evalcond[3]=((((-1.0)*r21*x2235))+((r22*x2228))+(((-1.0)*cj1*sj2))+((r20*x2232))+(((-1.0)*cj2*x2231)));
evalcond[4]=(((cj0*x2230))+((r02*x2228))+(((-1.0)*r01*x2235))+(((-1.0)*cj0*sj2*x2231))+((r00*x2232)));
evalcond[5]=(((r12*x2228))+((sj0*x2230))+(((-1.0)*sj0*sj2*x2231))+((r10*x2232))+(((-1.0)*r11*x2235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2236=((-1.0)*r21);
IkReal x2238 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2238)==0){
continue;
}
IkReal x2237=pow(x2238,-0.5);
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal(x2236),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2239.value))));
IkReal gconst82=(x2236*x2237);
IkReal gconst83=((1.0)*r20*x2237);
CheckValue<IkReal> x2240 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2240.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2240.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2241=((-1.0)*r21);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(x2241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
IkReal x2242=((1.0)*(x2244.value));
IkReal x2243=x2237;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2242)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2242)));
IkReal gconst82=(x2241*x2243);
IkReal gconst83=((1.0)*r20*x2243);
IkReal x2245=r22*r22;
IkReal x2246=((1.0)*x2245);
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(((-1.0)+x2245),-1);
if(!x2250.valid){
continue;
}
IkReal x2247=x2250.value;
if((((1.0)+(((-1.0)*x2246)))) < -0.00001)
continue;
IkReal x2248=IKsqrt(((1.0)+(((-1.0)*x2246))));
IkReal x2249=(cj0*x2247*x2248);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2249+(((-1.0)*x2246*x2249))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2251=((-1.0)*r21);
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(x2251),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
IkReal x2252=((1.0)*(x2254.value));
IkReal x2253=x2237;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2252)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2252)));
IkReal gconst82=(x2251*x2253);
IkReal gconst83=((1.0)*r20*x2253);
IkReal x2255=r22*r22;
IkReal x2256=((1.0)*x2255);
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(((-1.0)+x2255),-1);
if(!x2260.valid){
continue;
}
IkReal x2257=x2260.value;
if((((1.0)+(((-1.0)*x2256)))) < -0.00001)
continue;
IkReal x2258=IKsqrt(((1.0)+(((-1.0)*x2256))));
IkReal x2259=(sj0*x2257*x2258);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2259+(((-1.0)*x2256*x2259))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2261=((-1.0)*r21);
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal(x2261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
IkReal x2262=((1.0)*(x2264.value));
IkReal x2263=x2237;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2262)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2262)));
IkReal gconst82=(x2261*x2263);
IkReal gconst83=((1.0)*r20*x2263);
IkReal x2265=r22*r22;
IkReal x2266=((1.0)*r12*sj0);
IkReal x2267=((1.0)*cj0*r02);
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(((-1.0)+x2265),-1);
if(!x2271.valid){
continue;
}
IkReal x2268=x2271.value;
if((((1.0)+(((-1.0)*x2265)))) < -0.00001)
continue;
IkReal x2269=IKsqrt(((1.0)+(((-1.0)*x2265))));
IkReal x2270=(r22*x2268*x2269);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2267))+(((-1.0)*x2266)))))+(IKabs(((((-1.0)*x2266*x2270))+(((-1.0)*x2267*x2270))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2272=((1.0)*sj0);
IkReal x2273=((1.0)*cj0);
CheckValue<IkReal> x2274=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2274.valid){
continue;
}
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r10*x2272))+(((-1.0)*gconst83*r00*x2273))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r02*x2273))+(((-1.0)*r12*x2272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2274.value)))+(x2275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2276=IKcos(j4);
IkReal x2277=IKsin(j4);
IkReal x2278=(cj1*cj2);
IkReal x2279=((1.0)*sj1);
IkReal x2280=(gconst82*x2276);
IkReal x2281=(gconst83*x2277);
IkReal x2282=((1.0)*gconst82*x2277);
IkReal x2283=((1.0)*gconst83*x2276);
evalcond[0]=(((r22*x2277))+((r21*x2280))+(((-1.0)*r20*x2283)));
evalcond[1]=(((r11*x2280))+cj0+(((-1.0)*r10*x2283))+((r12*x2277)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2277))+((r01*x2280))+(((-1.0)*r00*x2283)));
evalcond[3]=(((r20*x2281))+(((-1.0)*cj1*sj2))+((r22*x2276))+(((-1.0)*r21*x2282))+(((-1.0)*cj2*x2279)));
evalcond[4]=(((cj0*x2278))+(((-1.0)*cj0*sj2*x2279))+((r02*x2276))+((r00*x2281))+(((-1.0)*r01*x2282)));
evalcond[5]=(((sj0*x2278))+((r10*x2281))+(((-1.0)*r11*x2282))+(((-1.0)*sj0*sj2*x2279))+((r12*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2284=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2284.valid){
continue;
}
CheckValue<IkReal> x2285 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2284.value)))+(x2285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2286=IKcos(j4);
IkReal x2287=IKsin(j4);
IkReal x2288=(cj1*cj2);
IkReal x2289=((1.0)*sj1);
IkReal x2290=(gconst82*x2286);
IkReal x2291=(gconst83*x2287);
IkReal x2292=((1.0)*gconst82*x2287);
IkReal x2293=((1.0)*gconst83*x2286);
evalcond[0]=(((r21*x2290))+(((-1.0)*r20*x2293))+((r22*x2287)));
evalcond[1]=(cj0+((r12*x2287))+(((-1.0)*r10*x2293))+((r11*x2290)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2293))+((r01*x2290))+((r02*x2287)));
evalcond[3]=((((-1.0)*cj2*x2289))+(((-1.0)*cj1*sj2))+((r20*x2291))+((r22*x2286))+(((-1.0)*r21*x2292)));
evalcond[4]=(((cj0*x2288))+(((-1.0)*r01*x2292))+((r00*x2291))+(((-1.0)*cj0*sj2*x2289))+((r02*x2286)));
evalcond[5]=((((-1.0)*sj0*sj2*x2289))+((r10*x2291))+((r12*x2286))+((sj0*x2288))+(((-1.0)*r11*x2292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2294.value)))+(x2295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2296=IKcos(j4);
IkReal x2297=IKsin(j4);
IkReal x2298=(cj1*cj2);
IkReal x2299=((1.0)*sj1);
IkReal x2300=(gconst82*x2296);
IkReal x2301=(gconst83*x2297);
IkReal x2302=((1.0)*gconst82*x2297);
IkReal x2303=((1.0)*gconst83*x2296);
evalcond[0]=((((-1.0)*r20*x2303))+((r22*x2297))+((r21*x2300)));
evalcond[1]=((((-1.0)*r10*x2303))+((r11*x2300))+cj0+((r12*x2297)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2303))+((r02*x2297))+((r01*x2300)));
evalcond[3]=((((-1.0)*cj2*x2299))+(((-1.0)*r21*x2302))+((r20*x2301))+((r22*x2296))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj0*x2298))+(((-1.0)*r01*x2302))+((r02*x2296))+(((-1.0)*cj0*sj2*x2299))+((r00*x2301)));
evalcond[5]=((((-1.0)*sj0*sj2*x2299))+(((-1.0)*r11*x2302))+((sj0*x2298))+((r10*x2301))+((r12*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2305 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2305)==0){
continue;
}
IkReal x2304=pow(x2305,-0.5);
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2306.value));
IkReal gconst85=((-1.0)*r11*x2304);
IkReal gconst86=(r10*x2304);
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2307.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
IkReal x2308=((-1.0)*(x2310.value));
IkReal x2309=x2304;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2308;
IkReal gconst84=x2308;
IkReal gconst85=((-1.0)*r11*x2309);
IkReal gconst86=(r10*x2309);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2311=((1.0)*sj0);
IkReal x2312=((1.0)*gconst86);
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r10*x2311))+((gconst85*r11*sj0))+((cj0*gconst85*r01))+(((-1.0)*cj0*r00*x2312)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2312)))),-1);
if(!x2314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2313.value)+(((1.5707963267949)*(x2314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2315=IKcos(j4);
IkReal x2316=IKsin(j4);
IkReal x2317=(cj1*cj2);
IkReal x2318=((1.0)*sj1);
IkReal x2319=(gconst86*x2316);
IkReal x2320=(gconst85*x2315);
IkReal x2321=((1.0)*gconst85*x2316);
IkReal x2322=((1.0)*gconst86*x2315);
evalcond[0]=(((r21*x2320))+((r22*x2316))+(((-1.0)*r20*x2322)));
evalcond[1]=(cj0+((r11*x2320))+((r12*x2316))+(((-1.0)*r10*x2322)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2322))+((r01*x2320))+((r02*x2316)));
evalcond[3]=((((-1.0)*cj2*x2318))+((r22*x2315))+(((-1.0)*cj1*sj2))+((r20*x2319))+(((-1.0)*r21*x2321)));
evalcond[4]=((((-1.0)*cj0*sj2*x2318))+((r00*x2319))+(((-1.0)*r01*x2321))+((r02*x2315))+((cj0*x2317)));
evalcond[5]=(((r10*x2319))+((sj0*x2317))+((r12*x2315))+(((-1.0)*r11*x2321))+(((-1.0)*sj0*sj2*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2323.valid){
continue;
}
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2323.value)))+(x2324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2325=IKcos(j4);
IkReal x2326=IKsin(j4);
IkReal x2327=(cj1*cj2);
IkReal x2328=((1.0)*sj1);
IkReal x2329=(gconst86*x2326);
IkReal x2330=(gconst85*x2325);
IkReal x2331=((1.0)*gconst85*x2326);
IkReal x2332=((1.0)*gconst86*x2325);
evalcond[0]=(((r21*x2330))+((r22*x2326))+(((-1.0)*r20*x2332)));
evalcond[1]=(cj0+(((-1.0)*r10*x2332))+((r11*x2330))+((r12*x2326)));
evalcond[2]=(((r02*x2326))+(((-1.0)*sj0))+((r01*x2330))+(((-1.0)*r00*x2332)));
evalcond[3]=(((r22*x2325))+(((-1.0)*cj2*x2328))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2331))+((r20*x2329)));
evalcond[4]=(((r02*x2325))+((cj0*x2327))+(((-1.0)*r01*x2331))+(((-1.0)*cj0*sj2*x2328))+((r00*x2329)));
evalcond[5]=(((r10*x2329))+((sj0*x2327))+((r12*x2325))+(((-1.0)*r11*x2331))+(((-1.0)*sj0*sj2*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2334 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2334)==0){
continue;
}
IkReal x2333=pow(x2334,-0.5);
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2335.value))));
IkReal gconst88=((1.0)*r11*x2333);
IkReal gconst89=((-1.0)*r10*x2333);
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2336.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
IkReal x2337=((1.0)*(x2339.value));
IkReal x2338=x2333;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2337)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2337)));
IkReal gconst88=((1.0)*r11*x2338);
IkReal gconst89=((-1.0)*r10*x2338);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
IkReal x2340=((1.0)*(x2342.value));
IkReal x2341=x2333;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2340)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2340)));
IkReal gconst88=((1.0)*r11*x2341);
IkReal gconst89=((-1.0)*r10*x2341);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
IkReal x2343=((1.0)*(x2345.value));
IkReal x2344=x2333;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2343)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2343)));
IkReal gconst88=((1.0)*r11*x2344);
IkReal gconst89=((-1.0)*r10*x2344);
IkReal x2346=r12*r12;
IkReal x2347=((1.0)*sj0);
IkReal x2348=(cj0*r02);
IkReal x2349=x2333;
j4eval[0]=((IKabs(((((-1.0)*x2348))+(((-1.0)*r12*x2347)))))+(IKabs((((r12*x2348*x2349))+((sj0*x2346*x2349))+(((-1.0)*x2347*x2349))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2350=((1.0)*sj0);
IkReal x2351=((1.0)*gconst89);
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x2351))+(((-1.0)*gconst89*r10*x2350)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2351))+(((-1.0)*gconst88*r20)))),-1);
if(!x2353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2352.value)+(((1.5707963267949)*(x2353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2354=IKcos(j4);
IkReal x2355=IKsin(j4);
IkReal x2356=(gconst88*r11);
IkReal x2357=(cj1*cj2);
IkReal x2358=((1.0)*sj1);
IkReal x2359=((1.0)*x2355);
IkReal x2360=(gconst89*x2355);
IkReal x2361=(gconst88*x2354);
IkReal x2362=((1.0)*gconst89*x2354);
evalcond[0]=(((r22*x2355))+(((-1.0)*r20*x2362))+((r21*x2361)));
evalcond[1]=((((-1.0)*r10*x2362))+cj0+((x2354*x2356))+((r12*x2355)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2362))+((r01*x2361))+((r02*x2355)));
evalcond[3]=(((r20*x2360))+((r22*x2354))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2358))+(((-1.0)*gconst88*r21*x2359)));
evalcond[4]=((((-1.0)*cj0*sj2*x2358))+((cj0*x2357))+(((-1.0)*gconst88*r01*x2359))+((r02*x2354))+((r00*x2360)));
evalcond[5]=((((-1.0)*x2356*x2359))+(((-1.0)*sj0*sj2*x2358))+((sj0*x2357))+((r12*x2354))+((r10*x2360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2363.value)+(((1.5707963267949)*(x2364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2365=IKcos(j4);
IkReal x2366=IKsin(j4);
IkReal x2367=(gconst88*r11);
IkReal x2368=(cj1*cj2);
IkReal x2369=((1.0)*sj1);
IkReal x2370=((1.0)*x2366);
IkReal x2371=(gconst89*x2366);
IkReal x2372=(gconst88*x2365);
IkReal x2373=((1.0)*gconst89*x2365);
evalcond[0]=((((-1.0)*r20*x2373))+((r22*x2366))+((r21*x2372)));
evalcond[1]=(((r12*x2366))+(((-1.0)*r10*x2373))+cj0+((x2365*x2367)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2366))+(((-1.0)*r00*x2373))+((r01*x2372)));
evalcond[3]=((((-1.0)*cj2*x2369))+((r20*x2371))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x2370))+((r22*x2365)));
evalcond[4]=((((-1.0)*cj0*sj2*x2369))+((cj0*x2368))+((r02*x2365))+(((-1.0)*gconst88*r01*x2370))+((r00*x2371)));
evalcond[5]=(((r12*x2365))+(((-1.0)*sj0*sj2*x2369))+((sj0*x2368))+((r10*x2371))+(((-1.0)*x2367*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2374=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2374.valid){
continue;
}
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2374.value)))+(x2375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2376=IKcos(j4);
IkReal x2377=IKsin(j4);
IkReal x2378=(gconst88*r11);
IkReal x2379=(cj1*cj2);
IkReal x2380=((1.0)*sj1);
IkReal x2381=((1.0)*x2377);
IkReal x2382=(gconst89*x2377);
IkReal x2383=(gconst88*x2376);
IkReal x2384=((1.0)*gconst89*x2376);
evalcond[0]=((((-1.0)*r20*x2384))+((r22*x2377))+((r21*x2383)));
evalcond[1]=((((-1.0)*r10*x2384))+cj0+((r12*x2377))+((x2376*x2378)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2384))+((r01*x2383))+((r02*x2377)));
evalcond[3]=(((r20*x2382))+(((-1.0)*cj1*sj2))+((r22*x2376))+(((-1.0)*gconst88*r21*x2381))+(((-1.0)*cj2*x2380)));
evalcond[4]=(((r00*x2382))+((cj0*x2379))+((r02*x2376))+(((-1.0)*gconst88*r01*x2381))+(((-1.0)*cj0*sj2*x2380)));
evalcond[5]=((((-1.0)*sj0*sj2*x2380))+((r12*x2376))+((sj0*x2379))+(((-1.0)*x2378*x2381))+((r10*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2385=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2385;
j4eval[1]=IKsign(x2385);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2386=((1.0)*cj5);
IkReal x2387=((((-1.0)*r21*x2386))+(((-1.0)*r20*sj5)));
j4eval[0]=x2387;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2386))))));
j4eval[2]=IKsign(x2387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2388=cj5*cj5;
IkReal x2389=r11*r11;
IkReal x2390=(cj5*r10);
IkReal x2391=(r11*sj5);
IkReal x2392=((((2.0)*x2390*x2391))+(((-1.0)*x2389))+(((-1.0)*(r12*r12)))+(((-1.0)*x2388*(r10*r10)))+((x2388*x2389)));
j4eval[0]=x2392;
j4eval[1]=((IKabs(r12))+(IKabs((x2391+(((-1.0)*x2390))))));
j4eval[2]=IKsign(x2392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2393=cj5*cj5;
IkReal x2394=r11*r11;
IkReal x2395=(cj5*r10);
IkReal x2396=(r11*sj5);
CheckValue<IkReal> x2397=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2393*(r10*r10)))+((x2393*x2394))+(((2.0)*x2395*x2396))+(((-1.0)*x2394))+(((-1.0)*(r12*r12))))),-1);
if(!x2397.valid){
continue;
}
CheckValue<IkReal> x2398 = IKatan2WithCheck(IkReal(r12),IkReal((x2396+(((-1.0)*x2395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2397.value)))+(x2398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2399=IKcos(j4);
IkReal x2400=IKsin(j4);
IkReal x2401=(cj5*r00);
IkReal x2402=((1.0)*sj2);
IkReal x2403=((1.0)*x2399);
IkReal x2404=(sj5*x2399);
IkReal x2405=(cj5*x2400);
IkReal x2406=((1.0)*sj5*x2400);
evalcond[0]=((((-1.0)*cj5*r20*x2403))+((r22*x2400))+((r21*x2404)));
evalcond[1]=((((-1.0)*x2401*x2403))+((r01*x2404))+((r02*x2400)));
evalcond[2]=(((r10*x2405))+((r12*x2399))+(((-1.0)*r11*x2406)));
evalcond[3]=((1.0)+((r11*x2404))+((r12*x2400))+(((-1.0)*cj5*r10*x2403)));
evalcond[4]=((((-1.0)*r01*x2406))+(((-1.0)*sj1*x2402))+((r02*x2399))+((x2400*x2401))+((cj1*cj2)));
evalcond[5]=(((r20*x2405))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2402))+((r22*x2399))+(((-1.0)*r21*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2407=((1.0)*cj5);
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2407))+(((-1.0)*r20*sj5)))),-1);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x2407)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2408.value)))+(x2409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2410=IKcos(j4);
IkReal x2411=IKsin(j4);
IkReal x2412=(cj5*r00);
IkReal x2413=((1.0)*sj2);
IkReal x2414=((1.0)*x2410);
IkReal x2415=(sj5*x2410);
IkReal x2416=(cj5*x2411);
IkReal x2417=((1.0)*sj5*x2411);
evalcond[0]=(((r22*x2411))+((r21*x2415))+(((-1.0)*cj5*r20*x2414)));
evalcond[1]=(((r01*x2415))+(((-1.0)*x2412*x2414))+((r02*x2411)));
evalcond[2]=(((r10*x2416))+(((-1.0)*r11*x2417))+((r12*x2410)));
evalcond[3]=((1.0)+((r11*x2415))+(((-1.0)*cj5*r10*x2414))+((r12*x2411)));
evalcond[4]=(((x2411*x2412))+((r02*x2410))+((cj1*cj2))+(((-1.0)*sj1*x2413))+(((-1.0)*r01*x2417)));
evalcond[5]=(((r22*x2410))+(((-1.0)*cj2*sj1))+((r20*x2416))+(((-1.0)*cj1*x2413))+(((-1.0)*r21*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2418=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2418.valid){
continue;
}
CheckValue<IkReal> x2419 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2418.value)))+(x2419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2420=IKcos(j4);
IkReal x2421=IKsin(j4);
IkReal x2422=(cj5*r00);
IkReal x2423=((1.0)*sj2);
IkReal x2424=((1.0)*x2420);
IkReal x2425=(sj5*x2420);
IkReal x2426=(cj5*x2421);
IkReal x2427=((1.0)*sj5*x2421);
evalcond[0]=(((r22*x2421))+((r21*x2425))+(((-1.0)*cj5*r20*x2424)));
evalcond[1]=((((-1.0)*x2422*x2424))+((r01*x2425))+((r02*x2421)));
evalcond[2]=(((r10*x2426))+(((-1.0)*r11*x2427))+((r12*x2420)));
evalcond[3]=((1.0)+((r11*x2425))+((r12*x2421))+(((-1.0)*cj5*r10*x2424)));
evalcond[4]=((((-1.0)*r01*x2427))+((cj1*cj2))+((x2421*x2422))+(((-1.0)*sj1*x2423))+((r02*x2420)));
evalcond[5]=(((r22*x2420))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2427))+((r20*x2426))+(((-1.0)*cj1*x2423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2428=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2428;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x2428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2429=((1.0)*cj5);
IkReal x2430=((((-1.0)*r01*x2429))+(((-1.0)*r00*sj5)));
j4eval[0]=x2430;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2429)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2431=cj5*cj5;
IkReal x2432=r11*r11;
IkReal x2433=(r11*sj5);
IkReal x2434=(cj5*r10);
IkReal x2435=((r12*r12)+x2432+(((-2.0)*x2433*x2434))+(((-1.0)*x2431*x2432))+((x2431*(r10*r10))));
j4eval[0]=x2435;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2434))+x2433))));
j4eval[2]=IKsign(x2435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2436=cj5*cj5;
IkReal x2437=r11*r11;
IkReal x2438=(cj5*r10);
IkReal x2439=(r11*sj5);
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2438*x2439))+(r12*r12)+x2437+(((-1.0)*x2436*x2437))+((x2436*(r10*r10))))),-1);
if(!x2440.valid){
continue;
}
CheckValue<IkReal> x2441 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2438))+x2439)),IKFAST_ATAN2_MAGTHRESH);
if(!x2441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2440.value)))+(x2441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2442=IKcos(j4);
IkReal x2443=IKsin(j4);
IkReal x2444=(cj5*r00);
IkReal x2445=((1.0)*cj1);
IkReal x2446=(cj5*r20);
IkReal x2447=(cj5*r10);
IkReal x2448=((1.0)*x2442);
IkReal x2449=(sj5*x2442);
IkReal x2450=((1.0)*sj5*x2443);
evalcond[0]=(((r22*x2443))+(((-1.0)*x2446*x2448))+((r21*x2449)));
evalcond[1]=(((r02*x2443))+(((-1.0)*x2444*x2448))+((r01*x2449)));
evalcond[2]=(((x2443*x2447))+(((-1.0)*r11*x2450))+((r12*x2442)));
evalcond[3]=((-1.0)+((r12*x2443))+(((-1.0)*x2447*x2448))+((r11*x2449)));
evalcond[4]=(((r02*x2442))+((x2443*x2444))+((sj1*sj2))+(((-1.0)*r01*x2450))+(((-1.0)*cj2*x2445)));
evalcond[5]=(((r22*x2442))+(((-1.0)*r21*x2450))+((x2443*x2446))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2451=((1.0)*cj5);
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2451)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2451)))),-1);
if(!x2453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2452.value)+(((1.5707963267949)*(x2453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2454=IKcos(j4);
IkReal x2455=IKsin(j4);
IkReal x2456=(cj5*r00);
IkReal x2457=((1.0)*cj1);
IkReal x2458=(cj5*r20);
IkReal x2459=(cj5*r10);
IkReal x2460=((1.0)*x2454);
IkReal x2461=(sj5*x2454);
IkReal x2462=((1.0)*sj5*x2455);
evalcond[0]=(((r22*x2455))+((r21*x2461))+(((-1.0)*x2458*x2460)));
evalcond[1]=(((r02*x2455))+((r01*x2461))+(((-1.0)*x2456*x2460)));
evalcond[2]=((((-1.0)*r11*x2462))+((r12*x2454))+((x2455*x2459)));
evalcond[3]=((-1.0)+((r11*x2461))+((r12*x2455))+(((-1.0)*x2459*x2460)));
evalcond[4]=(((r02*x2454))+(((-1.0)*r01*x2462))+((sj1*sj2))+((x2455*x2456))+(((-1.0)*cj2*x2457)));
evalcond[5]=(((r22*x2454))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2462))+((x2455*x2458))+(((-1.0)*sj2*x2457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2463=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2463.valid){
continue;
}
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2463.value)))+(x2464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2465=IKcos(j4);
IkReal x2466=IKsin(j4);
IkReal x2467=(cj5*r00);
IkReal x2468=((1.0)*cj1);
IkReal x2469=(cj5*r20);
IkReal x2470=(cj5*r10);
IkReal x2471=((1.0)*x2465);
IkReal x2472=(sj5*x2465);
IkReal x2473=((1.0)*sj5*x2466);
evalcond[0]=(((r21*x2472))+(((-1.0)*x2469*x2471))+((r22*x2466)));
evalcond[1]=((((-1.0)*x2467*x2471))+((r01*x2472))+((r02*x2466)));
evalcond[2]=((((-1.0)*r11*x2473))+((r12*x2465))+((x2466*x2470)));
evalcond[3]=((-1.0)+((r12*x2466))+(((-1.0)*x2470*x2471))+((r11*x2472)));
evalcond[4]=((((-1.0)*r01*x2473))+((sj1*sj2))+((x2466*x2467))+((r02*x2465))+(((-1.0)*cj2*x2468)));
evalcond[5]=((((-1.0)*r21*x2473))+(((-1.0)*cj2*sj1))+((x2466*x2469))+((r22*x2465))+(((-1.0)*sj2*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2475 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2475)==0){
continue;
}
IkReal x2474=pow(x2475,-0.5);
CheckValue<IkReal> x2476 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2476.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2476.value));
IkReal gconst91=((-1.0)*r01*x2474);
IkReal gconst92=(r00*x2474);
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal x2478=((-1.0)*(x2480.value));
IkReal x2479=x2474;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2478;
IkReal gconst90=x2478;
IkReal gconst91=((-1.0)*r01*x2479);
IkReal gconst92=(r00*x2479);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2481=((1.0)*sj0);
IkReal x2482=((1.0)*gconst92);
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r10*x2481))+(((-1.0)*cj0*r00*x2482))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
CheckValue<IkReal> x2484=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2482)))),-1);
if(!x2484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2483.value)+(((1.5707963267949)*(x2484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2485=IKcos(j4);
IkReal x2486=IKsin(j4);
IkReal x2487=(cj1*cj2);
IkReal x2488=(gconst92*r00);
IkReal x2489=((1.0)*sj1);
IkReal x2490=(gconst92*r10);
IkReal x2491=(gconst92*r20);
IkReal x2492=(gconst91*x2485);
IkReal x2493=((1.0)*x2485);
IkReal x2494=((1.0)*gconst91*x2486);
evalcond[0]=(((r22*x2486))+(((-1.0)*x2491*x2493))+((r21*x2492)));
evalcond[1]=(cj0+(((-1.0)*x2490*x2493))+((r11*x2492))+((r12*x2486)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2486))+(((-1.0)*x2488*x2493))+((r01*x2492)));
evalcond[3]=(((r22*x2485))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2494))+(((-1.0)*cj2*x2489))+((x2486*x2491)));
evalcond[4]=(((r02*x2485))+(((-1.0)*r01*x2494))+(((-1.0)*cj0*sj2*x2489))+((x2486*x2488))+((cj0*x2487)));
evalcond[5]=(((sj0*x2487))+(((-1.0)*sj0*sj2*x2489))+((r12*x2485))+(((-1.0)*r11*x2494))+((x2486*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2495.value)+(((1.5707963267949)*(x2496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2497=IKcos(j4);
IkReal x2498=IKsin(j4);
IkReal x2499=(cj1*cj2);
IkReal x2500=(gconst92*r00);
IkReal x2501=((1.0)*sj1);
IkReal x2502=(gconst92*r10);
IkReal x2503=(gconst92*r20);
IkReal x2504=(gconst91*x2497);
IkReal x2505=((1.0)*x2497);
IkReal x2506=((1.0)*gconst91*x2498);
evalcond[0]=(((r22*x2498))+(((-1.0)*x2503*x2505))+((r21*x2504)));
evalcond[1]=(cj0+(((-1.0)*x2502*x2505))+((r12*x2498))+((r11*x2504)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2498))+(((-1.0)*x2500*x2505))+((r01*x2504)));
evalcond[3]=((((-1.0)*cj2*x2501))+((r22*x2497))+(((-1.0)*cj1*sj2))+((x2498*x2503))+(((-1.0)*r21*x2506)));
evalcond[4]=((((-1.0)*cj0*sj2*x2501))+((r02*x2497))+(((-1.0)*r01*x2506))+((cj0*x2499))+((x2498*x2500)));
evalcond[5]=((((-1.0)*sj0*sj2*x2501))+(((-1.0)*r11*x2506))+((r12*x2497))+((x2498*x2502))+((sj0*x2499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2508 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2508)==0){
continue;
}
IkReal x2507=pow(x2508,-0.5);
CheckValue<IkReal> x2509 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2509.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2509.value))));
IkReal gconst94=((1.0)*r01*x2507);
IkReal gconst95=((-1.0)*r00*x2507);
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2510.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
IkReal x2511=((1.0)*(x2513.value));
IkReal x2512=x2507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2511)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2511)));
IkReal gconst94=((1.0)*r01*x2512);
IkReal gconst95=((-1.0)*r00*x2512);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
IkReal x2514=((1.0)*(x2516.value));
IkReal x2515=x2507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2514)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2514)));
IkReal gconst94=((1.0)*r01*x2515);
IkReal gconst95=((-1.0)*r00*x2515);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
IkReal x2517=((1.0)*(x2519.value));
IkReal x2518=x2507;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2517)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2517)));
IkReal gconst94=((1.0)*r01*x2518);
IkReal gconst95=((-1.0)*r00*x2518);
IkReal x2520=r02*r02;
IkReal x2521=(r12*sj0);
IkReal x2522=((1.0)*cj0);
IkReal x2523=x2507;
j4eval[0]=((IKabs(((((-1.0)*x2521))+(((-1.0)*r02*x2522)))))+(IKabs((((r02*x2521*x2523))+(((-1.0)*x2522*x2523))+((cj0*x2520*x2523))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2524=((1.0)*sj0);
IkReal x2525=((1.0)*gconst95);
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2525))+(((-1.0)*gconst94*r20)))),-1);
if(!x2526.valid){
continue;
}
CheckValue<IkReal> x2527 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2525))+((gconst94*r11*sj0))+(((-1.0)*gconst95*r10*x2524))+((cj0*gconst94*r01)))),IkReal(((((-1.0)*r12*x2524))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2526.value)))+(x2527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2528=IKcos(j4);
IkReal x2529=IKsin(j4);
IkReal x2530=(cj1*cj2);
IkReal x2531=((1.0)*sj1);
IkReal x2532=(gconst95*x2529);
IkReal x2533=(gconst94*x2528);
IkReal x2534=((1.0)*gconst95*x2528);
IkReal x2535=((1.0)*gconst94*x2529);
evalcond[0]=(((r22*x2529))+(((-1.0)*r20*x2534))+((r21*x2533)));
evalcond[1]=(cj0+((r12*x2529))+(((-1.0)*r10*x2534))+((r11*x2533)));
evalcond[2]=(((r02*x2529))+((r01*x2533))+(((-1.0)*sj0))+(((-1.0)*r00*x2534)));
evalcond[3]=((((-1.0)*cj2*x2531))+((r22*x2528))+(((-1.0)*r21*x2535))+((r20*x2532))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((r02*x2528))+(((-1.0)*r01*x2535))+((cj0*x2530))+(((-1.0)*cj0*sj2*x2531))+((r00*x2532)));
evalcond[5]=(((sj0*x2530))+(((-1.0)*sj0*sj2*x2531))+((r12*x2528))+((r10*x2532))+(((-1.0)*r11*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2536=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2536.valid){
continue;
}
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2536.value)))+(x2537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2538=IKcos(j4);
IkReal x2539=IKsin(j4);
IkReal x2540=(cj1*cj2);
IkReal x2541=((1.0)*sj1);
IkReal x2542=(gconst95*x2539);
IkReal x2543=(gconst94*x2538);
IkReal x2544=((1.0)*gconst95*x2538);
IkReal x2545=((1.0)*gconst94*x2539);
evalcond[0]=(((r21*x2543))+((r22*x2539))+(((-1.0)*r20*x2544)));
evalcond[1]=((((-1.0)*r10*x2544))+cj0+((r11*x2543))+((r12*x2539)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2539))+(((-1.0)*r00*x2544))+((r01*x2543)));
evalcond[3]=((((-1.0)*cj2*x2541))+(((-1.0)*cj1*sj2))+((r22*x2538))+((r20*x2542))+(((-1.0)*r21*x2545)));
evalcond[4]=((((-1.0)*cj0*sj2*x2541))+((r02*x2538))+((r00*x2542))+(((-1.0)*r01*x2545))+((cj0*x2540)));
evalcond[5]=((((-1.0)*r11*x2545))+((r12*x2538))+(((-1.0)*sj0*sj2*x2541))+((sj0*x2540))+((r10*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2546.value)+(((1.5707963267949)*(x2547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2548=IKcos(j4);
IkReal x2549=IKsin(j4);
IkReal x2550=(cj1*cj2);
IkReal x2551=((1.0)*sj1);
IkReal x2552=(gconst95*x2549);
IkReal x2553=(gconst94*x2548);
IkReal x2554=((1.0)*gconst95*x2548);
IkReal x2555=((1.0)*gconst94*x2549);
evalcond[0]=((((-1.0)*r20*x2554))+((r21*x2553))+((r22*x2549)));
evalcond[1]=(cj0+((r12*x2549))+((r11*x2553))+(((-1.0)*r10*x2554)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2553))+(((-1.0)*r00*x2554))+((r02*x2549)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2551))+(((-1.0)*r21*x2555))+((r20*x2552))+((r22*x2548)));
evalcond[4]=((((-1.0)*cj0*sj2*x2551))+(((-1.0)*r01*x2555))+((r00*x2552))+((cj0*x2550))+((r02*x2548)));
evalcond[5]=((((-1.0)*r11*x2555))+((r12*x2548))+((sj0*x2550))+(((-1.0)*sj0*sj2*x2551))+((r10*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2556=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2556;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2557=((1.0)*cj5);
IkReal x2558=((((-1.0)*r21*x2557))+(((-1.0)*r20*sj5)));
j4eval[0]=x2558;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2557))))));
j4eval[2]=IKsign(x2558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2559=cj5*cj5;
IkReal x2560=r01*r01;
IkReal x2561=(cj5*r00);
IkReal x2562=(r01*sj5);
IkReal x2563=(x2560+((x2559*(r00*r00)))+(((-2.0)*x2561*x2562))+(((-1.0)*x2559*x2560))+(r02*r02));
j4eval[0]=x2563;
j4eval[1]=IKsign(x2563);
j4eval[2]=((IKabs(r02))+(IKabs((x2562+(((-1.0)*x2561))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2564=cj5*cj5;
IkReal x2565=r01*r01;
IkReal x2566=(r01*sj5);
IkReal x2567=(cj5*r00);
CheckValue<IkReal> x2568 = IKatan2WithCheck(IkReal(r02),IkReal((x2566+(((-1.0)*x2567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2568.valid){
continue;
}
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(IKsign((((x2564*(r00*r00)))+x2565+(((-1.0)*x2564*x2565))+(((-2.0)*x2566*x2567))+(r02*r02))),-1);
if(!x2569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2568.value)+(((1.5707963267949)*(x2569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2570=IKcos(j4);
IkReal x2571=IKsin(j4);
IkReal x2572=(cj5*r00);
IkReal x2573=((1.0)*sj2);
IkReal x2574=((1.0)*x2570);
IkReal x2575=(sj5*x2570);
IkReal x2576=(cj5*x2571);
IkReal x2577=((1.0)*sj5*x2571);
evalcond[0]=(((r21*x2575))+((r22*x2571))+(((-1.0)*cj5*r20*x2574)));
evalcond[1]=(((r11*x2575))+((r12*x2571))+(((-1.0)*cj5*r10*x2574)));
evalcond[2]=(((x2571*x2572))+(((-1.0)*r01*x2577))+((r02*x2570)));
evalcond[3]=((-1.0)+((r01*x2575))+(((-1.0)*x2572*x2574))+((r02*x2571)));
evalcond[4]=(((r10*x2576))+((r12*x2570))+(((-1.0)*sj1*x2573))+((cj1*cj2))+(((-1.0)*r11*x2577)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x2576))+(((-1.0)*r21*x2577))+(((-1.0)*cj1*x2573))+((r22*x2570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2578=((1.0)*cj5);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2578))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2578))+(((-1.0)*r20*sj5)))),-1);
if(!x2580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2579.value)+(((1.5707963267949)*(x2580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2581=IKcos(j4);
IkReal x2582=IKsin(j4);
IkReal x2583=(cj5*r00);
IkReal x2584=((1.0)*sj2);
IkReal x2585=((1.0)*x2581);
IkReal x2586=(sj5*x2581);
IkReal x2587=(cj5*x2582);
IkReal x2588=((1.0)*sj5*x2582);
evalcond[0]=(((r22*x2582))+(((-1.0)*cj5*r20*x2585))+((r21*x2586)));
evalcond[1]=(((r12*x2582))+((r11*x2586))+(((-1.0)*cj5*r10*x2585)));
evalcond[2]=((((-1.0)*r01*x2588))+((x2582*x2583))+((r02*x2581)));
evalcond[3]=((-1.0)+((r01*x2586))+((r02*x2582))+(((-1.0)*x2583*x2585)));
evalcond[4]=(((r12*x2581))+((r10*x2587))+(((-1.0)*sj1*x2584))+((cj1*cj2))+(((-1.0)*r11*x2588)));
evalcond[5]=(((r22*x2581))+(((-1.0)*cj1*x2584))+(((-1.0)*r21*x2588))+(((-1.0)*cj2*sj1))+((r20*x2587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2589.value)+(((1.5707963267949)*(x2590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2591=IKcos(j4);
IkReal x2592=IKsin(j4);
IkReal x2593=(cj5*r00);
IkReal x2594=((1.0)*sj2);
IkReal x2595=((1.0)*x2591);
IkReal x2596=(sj5*x2591);
IkReal x2597=(cj5*x2592);
IkReal x2598=((1.0)*sj5*x2592);
evalcond[0]=(((r22*x2592))+(((-1.0)*cj5*r20*x2595))+((r21*x2596)));
evalcond[1]=(((r12*x2592))+((r11*x2596))+(((-1.0)*cj5*r10*x2595)));
evalcond[2]=((((-1.0)*r01*x2598))+((x2592*x2593))+((r02*x2591)));
evalcond[3]=((-1.0)+((r01*x2596))+(((-1.0)*x2593*x2595))+((r02*x2592)));
evalcond[4]=(((r10*x2597))+((r12*x2591))+(((-1.0)*sj1*x2594))+((cj1*cj2))+(((-1.0)*r11*x2598)));
evalcond[5]=(((r22*x2591))+(((-1.0)*cj1*x2594))+(((-1.0)*r21*x2598))+(((-1.0)*cj2*sj1))+((r20*x2597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2599=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2599;
j4eval[1]=IKsign(x2599);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2600=((1.0)*cj5);
IkReal x2601=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2600)));
j4eval[0]=x2601;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2600)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2602=cj5*cj5;
IkReal x2603=r01*r01;
IkReal x2604=(r01*sj5);
IkReal x2605=(cj5*r00);
IkReal x2606=((((-1.0)*x2603))+(((-1.0)*(r02*r02)))+((x2602*x2603))+(((2.0)*x2604*x2605))+(((-1.0)*x2602*(r00*r00))));
j4eval[0]=x2606;
j4eval[1]=IKsign(x2606);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2605))+x2604))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2607=cj5*cj5;
IkReal x2608=r01*r01;
IkReal x2609=(r01*sj5);
IkReal x2610=(cj5*r00);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2610))+x2609)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign((((x2607*x2608))+(((-1.0)*x2608))+(((-1.0)*(r02*r02)))+(((-1.0)*x2607*(r00*r00)))+(((2.0)*x2609*x2610)))),-1);
if(!x2612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2611.value)+(((1.5707963267949)*(x2612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2613=IKcos(j4);
IkReal x2614=IKsin(j4);
IkReal x2615=(cj5*r00);
IkReal x2616=((1.0)*cj1);
IkReal x2617=((1.0)*x2613);
IkReal x2618=(sj5*x2613);
IkReal x2619=(cj5*x2614);
IkReal x2620=((1.0)*sj5*x2614);
evalcond[0]=((((-1.0)*cj5*r20*x2617))+((r22*x2614))+((r21*x2618)));
evalcond[1]=(((r11*x2618))+((r12*x2614))+(((-1.0)*cj5*r10*x2617)));
evalcond[2]=((((-1.0)*r01*x2620))+((x2614*x2615))+((r02*x2613)));
evalcond[3]=((1.0)+((r01*x2618))+((r02*x2614))+(((-1.0)*x2615*x2617)));
evalcond[4]=((((-1.0)*r11*x2620))+((sj1*sj2))+((r10*x2619))+((r12*x2613))+(((-1.0)*cj2*x2616)));
evalcond[5]=(((r20*x2619))+(((-1.0)*cj2*sj1))+((r22*x2613))+(((-1.0)*r21*x2620))+(((-1.0)*sj2*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2621=((1.0)*cj5);
CheckValue<IkReal> x2622 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2621)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2622.valid){
continue;
}
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2621)))),-1);
if(!x2623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2622.value)+(((1.5707963267949)*(x2623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2624=IKcos(j4);
IkReal x2625=IKsin(j4);
IkReal x2626=(cj5*r00);
IkReal x2627=((1.0)*cj1);
IkReal x2628=((1.0)*x2624);
IkReal x2629=(sj5*x2624);
IkReal x2630=(cj5*x2625);
IkReal x2631=((1.0)*sj5*x2625);
evalcond[0]=((((-1.0)*cj5*r20*x2628))+((r22*x2625))+((r21*x2629)));
evalcond[1]=((((-1.0)*cj5*r10*x2628))+((r11*x2629))+((r12*x2625)));
evalcond[2]=((((-1.0)*r01*x2631))+((r02*x2624))+((x2625*x2626)));
evalcond[3]=((1.0)+((r01*x2629))+(((-1.0)*x2626*x2628))+((r02*x2625)));
evalcond[4]=(((r10*x2630))+((sj1*sj2))+(((-1.0)*r11*x2631))+((r12*x2624))+(((-1.0)*cj2*x2627)));
evalcond[5]=((((-1.0)*sj2*x2627))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2631))+((r20*x2630))+((r22*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2632.value)))+(x2633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2634=IKcos(j4);
IkReal x2635=IKsin(j4);
IkReal x2636=(cj5*r00);
IkReal x2637=((1.0)*cj1);
IkReal x2638=((1.0)*x2634);
IkReal x2639=(sj5*x2634);
IkReal x2640=(cj5*x2635);
IkReal x2641=((1.0)*sj5*x2635);
evalcond[0]=(((r22*x2635))+(((-1.0)*cj5*r20*x2638))+((r21*x2639)));
evalcond[1]=(((r11*x2639))+(((-1.0)*cj5*r10*x2638))+((r12*x2635)));
evalcond[2]=((((-1.0)*r01*x2641))+((x2635*x2636))+((r02*x2634)));
evalcond[3]=((1.0)+((r01*x2639))+(((-1.0)*x2636*x2638))+((r02*x2635)));
evalcond[4]=((((-1.0)*cj2*x2637))+(((-1.0)*r11*x2641))+((r10*x2640))+((sj1*sj2))+((r12*x2634)));
evalcond[5]=(((r22*x2634))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2641))+(((-1.0)*sj2*x2637))+((r20*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2642=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2642);
rxp1_1=(px*r21);
rxp1_2=(r11*x2642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2643=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2643);
rxp1_1=(px*r21);
rxp1_2=(r11*x2643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2644=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2644);
rxp1_1=(px*r21);
rxp1_2=(r11*x2644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2647=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2647.valid){
continue;
}
IkReal x2645=x2647.value;
IkReal x2646=(sj0*x2645);
sj4array[0]=((((-1.0)*cj1*cj2*x2646))+((sj1*sj2*x2646)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2648=IKcos(j4);
IkReal x2649=IKsin(j4);
IkReal x2650=(r21*sj5);
IkReal x2651=((1.0)*cj5*x2648);
evalcond[0]=(r02*x2648);
evalcond[1]=((((-1.0)*sj0))+((r02*x2649)));
evalcond[2]=(((x2648*x2650))+(((-1.0)*r20*x2651)));
evalcond[3]=(((r11*sj5*x2648))+(((-1.0)*r10*x2651)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2649))+(((-1.0)*x2649*x2650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2653=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2653.valid){
continue;
}
IkReal x2652=x2653.value;
sj4array[0]=(((cj1*sj2*x2652))+((cj2*sj1*x2652)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2654=IKcos(j4);
IkReal x2655=IKsin(j4);
IkReal x2656=((1.0)*sj0);
IkReal x2657=(r11*sj5);
IkReal x2658=((1.0)*cj5*x2654);
evalcond[0]=(r02*x2654);
evalcond[1]=(((r02*x2655))+(((-1.0)*x2656)));
evalcond[2]=(((r21*sj5*x2654))+(((-1.0)*r20*x2658)));
evalcond[3]=(((x2654*x2657))+(((-1.0)*r10*x2658)));
evalcond[4]=((((-1.0)*x2655*x2657))+((cj1*cj2*sj0))+((cj5*r10*x2655))+(((-1.0)*sj1*sj2*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2659=IKPowWithIntegerCheck(r02,-1);
if(!x2659.valid){
continue;
}
sj4array[0]=(sj0*(x2659.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2660=IKcos(j4);
IkReal x2661=IKsin(j4);
IkReal x2662=((1.0)*sj1);
IkReal x2663=(sj5*x2660);
IkReal x2664=(cj5*x2661);
IkReal x2665=((1.0)*sj5*x2661);
IkReal x2666=((1.0)*cj5*x2660);
evalcond[0]=(r02*x2660);
evalcond[1]=(((r21*x2663))+(((-1.0)*r20*x2666)));
evalcond[2]=(((r11*x2663))+(((-1.0)*r10*x2666)));
evalcond[3]=((((-1.0)*cj2*x2662))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2665))+((r20*x2664)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x2665))+(((-1.0)*sj0*sj2*x2662))+((r10*x2664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2667=((1.0)*sj0);
IkReal x2668=((1.0)*cj0);
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x2667))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2668)))),IkReal(((((-1.0)*r12*x2667))+(((-1.0)*r02*x2668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2669.value)+(((1.5707963267949)*(x2670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2671=IKcos(j4);
IkReal x2672=IKsin(j4);
IkReal x2673=(cj5*r00);
IkReal x2674=(cj1*cj2);
IkReal x2675=((1.0)*sj1);
IkReal x2676=((1.0)*x2671);
IkReal x2677=(sj5*x2671);
IkReal x2678=(cj5*x2672);
IkReal x2679=((1.0)*sj5*x2672);
evalcond[0]=(((r21*x2677))+((r22*x2672))+(((-1.0)*cj5*r20*x2676)));
evalcond[1]=(((r12*x2672))+cj0+(((-1.0)*cj5*r10*x2676))+((r11*x2677)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2672))+(((-1.0)*x2673*x2676))+((r01*x2677)));
evalcond[3]=((((-1.0)*cj2*x2675))+(((-1.0)*cj1*sj2))+((r22*x2671))+(((-1.0)*r21*x2679))+((r20*x2678)));
evalcond[4]=(((x2672*x2673))+((r02*x2671))+(((-1.0)*r01*x2679))+((cj0*x2674))+(((-1.0)*cj0*sj2*x2675)));
evalcond[5]=((((-1.0)*r11*x2679))+((r12*x2671))+((sj0*x2674))+((r10*x2678))+(((-1.0)*sj0*sj2*x2675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2680.value)+(((1.5707963267949)*(x2681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2682=IKcos(j4);
IkReal x2683=IKsin(j4);
IkReal x2684=(cj5*r00);
IkReal x2685=(cj1*cj2);
IkReal x2686=((1.0)*sj1);
IkReal x2687=((1.0)*x2682);
IkReal x2688=(sj5*x2682);
IkReal x2689=(cj5*x2683);
IkReal x2690=((1.0)*sj5*x2683);
evalcond[0]=(((r22*x2683))+((r21*x2688))+(((-1.0)*cj5*r20*x2687)));
evalcond[1]=(((r11*x2688))+cj0+(((-1.0)*cj5*r10*x2687))+((r12*x2683)));
evalcond[2]=(((r02*x2683))+(((-1.0)*sj0))+(((-1.0)*x2684*x2687))+((r01*x2688)));
evalcond[3]=(((r22*x2682))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2686))+((r20*x2689))+(((-1.0)*r21*x2690)));
evalcond[4]=(((r02*x2682))+((cj0*x2685))+(((-1.0)*cj0*sj2*x2686))+((x2683*x2684))+(((-1.0)*r01*x2690)));
evalcond[5]=(((r10*x2689))+((sj0*x2685))+(((-1.0)*r11*x2690))+((r12*x2682))+(((-1.0)*sj0*sj2*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2691.value)+(((1.5707963267949)*(x2692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2693=IKcos(j4);
IkReal x2694=IKsin(j4);
IkReal x2695=(cj5*r00);
IkReal x2696=(cj1*cj2);
IkReal x2697=((1.0)*sj1);
IkReal x2698=((1.0)*x2693);
IkReal x2699=(sj5*x2693);
IkReal x2700=(cj5*x2694);
IkReal x2701=((1.0)*sj5*x2694);
evalcond[0]=(((r22*x2694))+((r21*x2699))+(((-1.0)*cj5*r20*x2698)));
evalcond[1]=(((r12*x2694))+(((-1.0)*cj5*r10*x2698))+cj0+((r11*x2699)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2699))+(((-1.0)*x2695*x2698))+((r02*x2694)));
evalcond[3]=(((r22*x2693))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2697))+((r20*x2700))+(((-1.0)*r21*x2701)));
evalcond[4]=((((-1.0)*r01*x2701))+((cj0*x2696))+(((-1.0)*cj0*sj2*x2697))+((x2694*x2695))+((r02*x2693)));
evalcond[5]=((((-1.0)*sj0*sj2*x2697))+((r12*x2693))+((r10*x2700))+(((-1.0)*r11*x2701))+((sj0*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2702=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x2702;
j0eval[1]=IKsign(x2702);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2703=r21*r21;
IkReal x2704=cj5*cj5;
IkReal x2705=(cj1*sj2);
IkReal x2706=(cj5*r20);
IkReal x2707=(r21*sj5);
IkReal x2708=(cj2*sj1);
IkReal x2709=((((-1.0)*(r22*r22)))+((x2703*x2704))+(((2.0)*x2706*x2707))+(((-1.0)*x2704*(r20*r20)))+(((-1.0)*x2703)));
j4eval[0]=x2709;
j4eval[1]=IKsign(x2709);
j4eval[2]=((IKabs((((r22*x2708))+((r22*x2705)))))+(IKabs(((((-1.0)*x2707*x2708))+((x2705*x2706))+(((-1.0)*x2705*x2707))+((x2706*x2708))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2710=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2710;
j4eval[1]=IKsign(x2710);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2711=cj5*cj5;
IkReal x2712=(r11*r21);
IkReal x2713=((1.0)*r20);
IkReal x2714=(cj5*sj5);
IkReal x2715=((((-1.0)*x2712))+(((-1.0)*r12*r22))+((x2711*x2712))+((r11*r20*x2714))+(((-1.0)*r10*x2711*x2713))+((r10*r21*x2714)));
j4eval[0]=x2715;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2713)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2716=cj5*cj5;
IkReal x2717=((1.0)*r20);
IkReal x2718=(r01*r21);
IkReal x2719=(r21*sj5);
IkReal x2720=(((cj5*r01*r20*sj5))+(((-1.0)*x2718))+(((-1.0)*r02*r22))+((cj5*r00*x2719))+(((-1.0)*r00*x2716*x2717))+((x2716*x2718)));
j4eval[0]=x2720;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2717))+((cj0*x2719)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2721=cj5*cj5;
IkReal x2722=((1.0)*r20);
IkReal x2723=(r01*r21);
IkReal x2724=(r21*sj5);
CheckValue<IkReal> x2725=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x2724))+(((-1.0)*r00*x2721*x2722))+(((-1.0)*x2723))+((x2721*x2723)))),-1);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2722))+((cj0*x2724)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2725.value)))+(x2726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2727=IKcos(j4);
IkReal x2728=IKsin(j4);
IkReal x2729=(cj5*r00);
IkReal x2730=(cj5*r20);
IkReal x2731=(cj5*r10);
IkReal x2732=(r21*sj5);
IkReal x2733=((1.0)*x2727);
IkReal x2734=((1.0)*x2728);
IkReal x2735=(sj5*x2727);
IkReal x2736=(sj5*x2728);
evalcond[0]=((((-1.0)*x2730*x2733))+((r22*x2728))+((x2727*x2732)));
evalcond[1]=(cj0+(((-1.0)*x2731*x2733))+((r12*x2728))+((r11*x2735)));
evalcond[2]=((((-1.0)*x2730*x2734))+((x2728*x2732))+(((-1.0)*r22*x2733)));
evalcond[3]=(cj0+((r01*x2736))+(((-1.0)*r02*x2733))+(((-1.0)*x2729*x2734)));
evalcond[4]=(sj0+(((-1.0)*x2731*x2734))+(((-1.0)*r12*x2733))+((r11*x2736)));
evalcond[5]=(((r02*x2728))+(((-1.0)*sj0))+((r01*x2735))+(((-1.0)*x2729*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2737=cj5*cj5;
IkReal x2738=(r11*r21);
IkReal x2739=((1.0)*r20);
IkReal x2740=(cj5*sj5);
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2739))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*r20*x2740))+((r10*r21*x2740))+(((-1.0)*x2738))+((x2737*x2738))+(((-1.0)*r10*x2737*x2739)))),-1);
if(!x2742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2741.value)+(((1.5707963267949)*(x2742.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2743=IKcos(j4);
IkReal x2744=IKsin(j4);
IkReal x2745=(cj5*r00);
IkReal x2746=(cj5*r20);
IkReal x2747=(cj5*r10);
IkReal x2748=(r21*sj5);
IkReal x2749=((1.0)*x2743);
IkReal x2750=((1.0)*x2744);
IkReal x2751=(sj5*x2743);
IkReal x2752=(sj5*x2744);
evalcond[0]=(((r22*x2744))+((x2743*x2748))+(((-1.0)*x2746*x2749)));
evalcond[1]=((((-1.0)*x2747*x2749))+((r11*x2751))+cj0+((r12*x2744)));
evalcond[2]=(((x2744*x2748))+(((-1.0)*x2746*x2750))+(((-1.0)*r22*x2749)));
evalcond[3]=(cj0+(((-1.0)*x2745*x2750))+((r01*x2752))+(((-1.0)*r02*x2749)));
evalcond[4]=(((r11*x2752))+sj0+(((-1.0)*r12*x2749))+(((-1.0)*x2747*x2750)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2745*x2749))+((r01*x2751))+((r02*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2753 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2753.valid){
continue;
}
CheckValue<IkReal> x2754=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2753.value)+(((1.5707963267949)*(x2754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2755=IKcos(j4);
IkReal x2756=IKsin(j4);
IkReal x2757=(cj5*r00);
IkReal x2758=(cj5*r20);
IkReal x2759=(cj5*r10);
IkReal x2760=(r21*sj5);
IkReal x2761=((1.0)*x2755);
IkReal x2762=((1.0)*x2756);
IkReal x2763=(sj5*x2755);
IkReal x2764=(sj5*x2756);
evalcond[0]=(((r22*x2756))+(((-1.0)*x2758*x2761))+((x2755*x2760)));
evalcond[1]=(cj0+((r12*x2756))+(((-1.0)*x2759*x2761))+((r11*x2763)));
evalcond[2]=(((x2756*x2760))+(((-1.0)*x2758*x2762))+(((-1.0)*r22*x2761)));
evalcond[3]=(cj0+((r01*x2764))+(((-1.0)*r02*x2761))+(((-1.0)*x2757*x2762)));
evalcond[4]=(sj0+(((-1.0)*r12*x2761))+(((-1.0)*x2759*x2762))+((r11*x2764)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2763))+(((-1.0)*x2757*x2761))+((r02*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2765=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2765;
j4eval[1]=IKsign(x2765);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2766=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2766;
j4eval[1]=IKsign(x2766);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2767=cj5*cj5;
IkReal x2768=(r11*r21);
IkReal x2769=((1.0)*r20);
IkReal x2770=(cj5*sj5);
IkReal x2771=((((-1.0)*x2768))+(((-1.0)*r12*r22))+((r10*r21*x2770))+((r11*r20*x2770))+((x2767*x2768))+(((-1.0)*r10*x2767*x2769)));
j4eval[0]=x2771;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2769)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2772=cj5*cj5;
IkReal x2773=(r11*r21);
IkReal x2774=((1.0)*r20);
IkReal x2775=(cj5*sj5);
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2773))+(((-1.0)*r12*r22))+((r10*r21*x2775))+((r11*r20*x2775))+(((-1.0)*r10*x2772*x2774))+((x2772*x2773)))),-1);
if(!x2776.valid){
continue;
}
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2776.value)))+(x2777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2778=IKcos(j4);
IkReal x2779=IKsin(j4);
IkReal x2780=((1.0)*sj0);
IkReal x2781=(cj5*r00);
IkReal x2782=(cj5*r20);
IkReal x2783=(cj5*r10);
IkReal x2784=((1.0)*x2778);
IkReal x2785=((1.0)*x2779);
IkReal x2786=(sj5*x2778);
IkReal x2787=(sj5*x2779);
evalcond[0]=(((r21*x2786))+((r22*x2779))+(((-1.0)*x2782*x2784)));
evalcond[1]=(cj0+(((-1.0)*x2783*x2784))+((r11*x2786))+((r12*x2779)));
evalcond[2]=(((r21*x2787))+(((-1.0)*x2782*x2785))+(((-1.0)*r22*x2784)));
evalcond[3]=((((-1.0)*x2780))+(((-1.0)*x2781*x2784))+((r01*x2786))+((r02*x2779)));
evalcond[4]=((((-1.0)*x2781*x2785))+((r01*x2787))+(((-1.0)*r02*x2784))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2780))+(((-1.0)*r12*x2784))+(((-1.0)*x2783*x2785))+((r11*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2788 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2788.value)+(((1.5707963267949)*(x2789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2790=IKcos(j4);
IkReal x2791=IKsin(j4);
IkReal x2792=((1.0)*sj0);
IkReal x2793=(cj5*r00);
IkReal x2794=(cj5*r20);
IkReal x2795=(cj5*r10);
IkReal x2796=((1.0)*x2790);
IkReal x2797=((1.0)*x2791);
IkReal x2798=(sj5*x2790);
IkReal x2799=(sj5*x2791);
evalcond[0]=(((r21*x2798))+((r22*x2791))+(((-1.0)*x2794*x2796)));
evalcond[1]=((((-1.0)*x2795*x2796))+cj0+((r12*x2791))+((r11*x2798)));
evalcond[2]=(((r21*x2799))+(((-1.0)*r22*x2796))+(((-1.0)*x2794*x2797)));
evalcond[3]=((((-1.0)*x2792))+((r02*x2791))+((r01*x2798))+(((-1.0)*x2793*x2796)));
evalcond[4]=(((r01*x2799))+(((-1.0)*x2793*x2797))+(((-1.0)*cj0))+(((-1.0)*r02*x2796)));
evalcond[5]=((((-1.0)*x2795*x2797))+(((-1.0)*x2792))+((r11*x2799))+(((-1.0)*r12*x2796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2800 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2800.valid){
continue;
}
CheckValue<IkReal> x2801=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2800.value)+(((1.5707963267949)*(x2801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2802=IKcos(j4);
IkReal x2803=IKsin(j4);
IkReal x2804=((1.0)*sj0);
IkReal x2805=(cj5*r00);
IkReal x2806=(cj5*r20);
IkReal x2807=(cj5*r10);
IkReal x2808=((1.0)*x2802);
IkReal x2809=((1.0)*x2803);
IkReal x2810=(sj5*x2802);
IkReal x2811=(sj5*x2803);
evalcond[0]=((((-1.0)*x2806*x2808))+((r21*x2810))+((r22*x2803)));
evalcond[1]=(((r12*x2803))+cj0+(((-1.0)*x2807*x2808))+((r11*x2810)));
evalcond[2]=((((-1.0)*x2806*x2809))+((r21*x2811))+(((-1.0)*r22*x2808)));
evalcond[3]=(((r01*x2810))+(((-1.0)*x2804))+(((-1.0)*x2805*x2808))+((r02*x2803)));
evalcond[4]=(((r01*x2811))+(((-1.0)*x2805*x2809))+(((-1.0)*r02*x2808))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2804))+(((-1.0)*x2807*x2809))+(((-1.0)*r12*x2808))+((r11*x2811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.21894928636502)*px))+(((1.33616762830246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((3.21894928636502)*px))+(((1.33616762830246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((3.21894928636502)*px))+(((1.33616762830246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2812=IKsin(j0);
IkReal x2813=IKcos(j0);
evalcond[0]=((((-0.11)*x2812))+(((0.265)*x2813))+(((-1.0)*px)));
evalcond[1]=((((0.265)*x2812))+(((-1.0)*py))+(((0.11)*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2814=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2814;
j4eval[1]=IKsign(x2814);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2815=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2815;
j4eval[1]=IKsign(x2815);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2816=cj5*cj5;
IkReal x2817=(r11*r21);
IkReal x2818=((1.0)*r20);
IkReal x2819=(cj5*sj5);
IkReal x2820=((((-1.0)*x2817))+(((-1.0)*r12*r22))+((r11*r20*x2819))+(((-1.0)*r10*x2816*x2818))+((x2816*x2817))+((r10*r21*x2819)));
j4eval[0]=x2820;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2818)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2821=cj5*cj5;
IkReal x2822=(r11*r21);
IkReal x2823=((1.0)*r20);
IkReal x2824=(cj5*sj5);
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign((((x2821*x2822))+(((-1.0)*r12*r22))+((r11*r20*x2824))+(((-1.0)*x2822))+(((-1.0)*r10*x2821*x2823))+((r10*r21*x2824)))),-1);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2825.value)))+(x2826.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2827=IKcos(j4);
IkReal x2828=IKsin(j4);
IkReal x2829=((1.0)*sj0);
IkReal x2830=(cj5*r00);
IkReal x2831=(cj5*r20);
IkReal x2832=(cj5*r10);
IkReal x2833=((1.0)*x2827);
IkReal x2834=((1.0)*x2828);
IkReal x2835=(sj5*x2827);
IkReal x2836=(sj5*x2828);
evalcond[0]=(((r22*x2828))+((r21*x2835))+(((-1.0)*x2831*x2833)));
evalcond[1]=(cj0+(((-1.0)*x2832*x2833))+((r11*x2835))+((r12*x2828)));
evalcond[2]=((((-1.0)*r22*x2833))+((r21*x2836))+(((-1.0)*x2831*x2834)));
evalcond[3]=(((r02*x2828))+(((-1.0)*x2829))+((r01*x2835))+(((-1.0)*x2830*x2833)));
evalcond[4]=(((r01*x2836))+(((-1.0)*r02*x2833))+(((-1.0)*cj0))+(((-1.0)*x2830*x2834)));
evalcond[5]=((((-1.0)*r12*x2833))+(((-1.0)*x2832*x2834))+(((-1.0)*x2829))+((r11*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2837.value)+(((1.5707963267949)*(x2838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKcos(j4);
IkReal x2840=IKsin(j4);
IkReal x2841=((1.0)*sj0);
IkReal x2842=(cj5*r00);
IkReal x2843=(cj5*r20);
IkReal x2844=(cj5*r10);
IkReal x2845=((1.0)*x2839);
IkReal x2846=((1.0)*x2840);
IkReal x2847=(sj5*x2839);
IkReal x2848=(sj5*x2840);
evalcond[0]=((((-1.0)*x2843*x2845))+((r21*x2847))+((r22*x2840)));
evalcond[1]=(((r11*x2847))+cj0+((r12*x2840))+(((-1.0)*x2844*x2845)));
evalcond[2]=((((-1.0)*x2843*x2846))+((r21*x2848))+(((-1.0)*r22*x2845)));
evalcond[3]=((((-1.0)*x2842*x2845))+((r01*x2847))+((r02*x2840))+(((-1.0)*x2841)));
evalcond[4]=((((-1.0)*x2842*x2846))+(((-1.0)*r02*x2845))+((r01*x2848))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x2848))+(((-1.0)*r12*x2845))+(((-1.0)*x2844*x2846))+(((-1.0)*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
CheckValue<IkReal> x2850=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2849.value)+(((1.5707963267949)*(x2850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2851=IKcos(j4);
IkReal x2852=IKsin(j4);
IkReal x2853=((1.0)*sj0);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj5*r20);
IkReal x2856=(cj5*r10);
IkReal x2857=((1.0)*x2851);
IkReal x2858=((1.0)*x2852);
IkReal x2859=(sj5*x2851);
IkReal x2860=(sj5*x2852);
evalcond[0]=(((r21*x2859))+((r22*x2852))+(((-1.0)*x2855*x2857)));
evalcond[1]=(cj0+((r11*x2859))+((r12*x2852))+(((-1.0)*x2856*x2857)));
evalcond[2]=(((r21*x2860))+(((-1.0)*r22*x2857))+(((-1.0)*x2855*x2858)));
evalcond[3]=(((r01*x2859))+(((-1.0)*x2854*x2857))+((r02*x2852))+(((-1.0)*x2853)));
evalcond[4]=((((-1.0)*r02*x2857))+(((-1.0)*x2854*x2858))+(((-1.0)*cj0))+((r01*x2860)));
evalcond[5]=((((-1.0)*r12*x2857))+(((-1.0)*x2856*x2858))+((r11*x2860))+(((-1.0)*x2853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.21894928636502)*px))+(((1.33616762830246)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((3.21894928636502)*px))+(((1.33616762830246)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((3.21894928636502)*px))+(((1.33616762830246)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2861=IKsin(j0);
IkReal x2862=IKcos(j0);
evalcond[0]=((((-0.11)*x2861))+(((0.265)*x2862))+(((-1.0)*px)));
evalcond[1]=((((0.265)*x2861))+(((0.11)*x2862))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2863=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2863;
j4eval[1]=IKsign(x2863);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2864=cj5*cj5;
IkReal x2865=(r11*r21);
IkReal x2866=((1.0)*r20);
IkReal x2867=(cj5*sj5);
IkReal x2868=((((-1.0)*r12*r22))+(((-1.0)*x2865))+(((-1.0)*r10*x2864*x2866))+((r11*r20*x2867))+((x2864*x2865))+((r10*r21*x2867)));
j4eval[0]=x2868;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2866)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2869=cj5*cj5;
IkReal x2870=((1.0)*r20);
IkReal x2871=(r01*r21);
IkReal x2872=(r21*sj5);
IkReal x2873=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2869*x2871))+(((-1.0)*x2871))+((cj5*r00*x2872))+(((-1.0)*r00*x2869*x2870)));
j4eval[0]=x2873;
j4eval[1]=((IKabs((((cj0*x2872))+(((-1.0)*cj0*cj5*x2870)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2874=cj5*cj5;
IkReal x2875=((1.0)*r20);
IkReal x2876=(r01*r21);
IkReal x2877=(r21*sj5);
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal((((cj0*x2877))+(((-1.0)*cj0*cj5*x2875)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
CheckValue<IkReal> x2879=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2876))+((x2874*x2876))+((cj5*r00*x2877))+(((-1.0)*r00*x2874*x2875)))),-1);
if(!x2879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2878.value)+(((1.5707963267949)*(x2879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2880=IKcos(j4);
IkReal x2881=IKsin(j4);
IkReal x2882=(cj5*r00);
IkReal x2883=(cj5*r20);
IkReal x2884=(cj5*r10);
IkReal x2885=(r21*sj5);
IkReal x2886=((1.0)*x2880);
IkReal x2887=((1.0)*x2881);
IkReal x2888=(sj5*x2880);
IkReal x2889=(sj5*x2881);
evalcond[0]=((((-1.0)*x2883*x2886))+((x2880*x2885))+((r22*x2881)));
evalcond[1]=(cj0+((r11*x2888))+((r12*x2881))+(((-1.0)*x2884*x2886)));
evalcond[2]=((((-1.0)*x2883*x2887))+(((-1.0)*r22*x2886))+((x2881*x2885)));
evalcond[3]=(cj0+(((-1.0)*x2882*x2887))+(((-1.0)*r02*x2886))+((r01*x2889)));
evalcond[4]=(sj0+((r11*x2889))+(((-1.0)*x2884*x2887))+(((-1.0)*r12*x2886)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2882*x2886))+((r01*x2888))+((r02*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2890=cj5*cj5;
IkReal x2891=(r11*r21);
IkReal x2892=((1.0)*r20);
IkReal x2893=(cj5*sj5);
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
CheckValue<IkReal> x2895=IKPowWithIntegerCheck(IKsign((((x2890*x2891))+(((-1.0)*r12*r22))+(((-1.0)*r10*x2890*x2892))+(((-1.0)*x2891))+((r11*r20*x2893))+((r10*r21*x2893)))),-1);
if(!x2895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2894.value)+(((1.5707963267949)*(x2895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2896=IKcos(j4);
IkReal x2897=IKsin(j4);
IkReal x2898=(cj5*r00);
IkReal x2899=(cj5*r20);
IkReal x2900=(cj5*r10);
IkReal x2901=(r21*sj5);
IkReal x2902=((1.0)*x2896);
IkReal x2903=((1.0)*x2897);
IkReal x2904=(sj5*x2896);
IkReal x2905=(sj5*x2897);
evalcond[0]=(((r22*x2897))+((x2896*x2901))+(((-1.0)*x2899*x2902)));
evalcond[1]=(cj0+(((-1.0)*x2900*x2902))+((r12*x2897))+((r11*x2904)));
evalcond[2]=(((x2897*x2901))+(((-1.0)*x2899*x2903))+(((-1.0)*r22*x2902)));
evalcond[3]=((((-1.0)*r02*x2902))+cj0+(((-1.0)*x2898*x2903))+((r01*x2905)));
evalcond[4]=(sj0+(((-1.0)*x2900*x2903))+(((-1.0)*r12*x2902))+((r11*x2905)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2898*x2902))+((r01*x2904))+((r02*x2897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2906.value)+(((1.5707963267949)*(x2907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2908=IKcos(j4);
IkReal x2909=IKsin(j4);
IkReal x2910=(cj5*r00);
IkReal x2911=(cj5*r20);
IkReal x2912=(cj5*r10);
IkReal x2913=(r21*sj5);
IkReal x2914=((1.0)*x2908);
IkReal x2915=((1.0)*x2909);
IkReal x2916=(sj5*x2908);
IkReal x2917=(sj5*x2909);
evalcond[0]=(((r22*x2909))+(((-1.0)*x2911*x2914))+((x2908*x2913)));
evalcond[1]=(((r11*x2916))+cj0+(((-1.0)*x2912*x2914))+((r12*x2909)));
evalcond[2]=(((x2909*x2913))+(((-1.0)*x2911*x2915))+(((-1.0)*r22*x2914)));
evalcond[3]=(((r01*x2917))+cj0+(((-1.0)*x2910*x2915))+(((-1.0)*r02*x2914)));
evalcond[4]=(((r11*x2917))+sj0+(((-1.0)*x2912*x2915))+(((-1.0)*r12*x2914)));
evalcond[5]=(((r02*x2909))+(((-1.0)*sj0))+((r01*x2916))+(((-1.0)*x2910*x2914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2918=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2918;
j4eval[1]=IKsign(x2918);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2919=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2919;
j4eval[1]=IKsign(x2919);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2920=cj5*cj5;
IkReal x2921=(r11*r21);
IkReal x2922=((1.0)*r20);
IkReal x2923=(cj5*sj5);
IkReal x2924=(((r11*r20*x2923))+(((-1.0)*r12*r22))+((r10*r21*x2923))+(((-1.0)*r10*x2920*x2922))+((x2920*x2921))+(((-1.0)*x2921)));
j4eval[0]=x2924;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2922)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2925=cj5*cj5;
IkReal x2926=(r11*r21);
IkReal x2927=((1.0)*r20);
IkReal x2928=(cj5*sj5);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2927)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign((((x2925*x2926))+((r11*r20*x2928))+(((-1.0)*r12*r22))+((r10*r21*x2928))+(((-1.0)*r10*x2925*x2927))+(((-1.0)*x2926)))),-1);
if(!x2930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2929.value)+(((1.5707963267949)*(x2930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2931=IKcos(j4);
IkReal x2932=IKsin(j4);
IkReal x2933=((1.0)*sj0);
IkReal x2934=(cj5*r00);
IkReal x2935=(cj5*r20);
IkReal x2936=(cj5*r10);
IkReal x2937=((1.0)*x2931);
IkReal x2938=((1.0)*x2932);
IkReal x2939=(sj5*x2931);
IkReal x2940=(sj5*x2932);
evalcond[0]=(((r21*x2939))+((r22*x2932))+(((-1.0)*x2935*x2937)));
evalcond[1]=(cj0+(((-1.0)*x2936*x2937))+((r12*x2932))+((r11*x2939)));
evalcond[2]=(((r21*x2940))+(((-1.0)*x2935*x2938))+(((-1.0)*r22*x2937)));
evalcond[3]=(((r02*x2932))+((r01*x2939))+(((-1.0)*x2933))+(((-1.0)*x2934*x2937)));
evalcond[4]=(((r01*x2940))+(((-1.0)*x2934*x2938))+(((-1.0)*cj0))+(((-1.0)*r02*x2937)));
evalcond[5]=((((-1.0)*x2933))+(((-1.0)*x2936*x2938))+((r11*x2940))+(((-1.0)*r12*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2941.value)+(((1.5707963267949)*(x2942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2943=IKcos(j4);
IkReal x2944=IKsin(j4);
IkReal x2945=((1.0)*sj0);
IkReal x2946=(cj5*r00);
IkReal x2947=(cj5*r20);
IkReal x2948=(cj5*r10);
IkReal x2949=((1.0)*x2943);
IkReal x2950=((1.0)*x2944);
IkReal x2951=(sj5*x2943);
IkReal x2952=(sj5*x2944);
evalcond[0]=(((r21*x2951))+((r22*x2944))+(((-1.0)*x2947*x2949)));
evalcond[1]=(cj0+(((-1.0)*x2948*x2949))+((r12*x2944))+((r11*x2951)));
evalcond[2]=((((-1.0)*x2947*x2950))+((r21*x2952))+(((-1.0)*r22*x2949)));
evalcond[3]=(((r02*x2944))+((r01*x2951))+(((-1.0)*x2946*x2949))+(((-1.0)*x2945)));
evalcond[4]=((((-1.0)*r02*x2949))+((r01*x2952))+(((-1.0)*cj0))+(((-1.0)*x2946*x2950)));
evalcond[5]=((((-1.0)*r12*x2949))+(((-1.0)*x2948*x2950))+(((-1.0)*x2945))+((r11*x2952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2953.value)+(((1.5707963267949)*(x2954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2955=IKcos(j4);
IkReal x2956=IKsin(j4);
IkReal x2957=((1.0)*sj0);
IkReal x2958=(cj5*r00);
IkReal x2959=(cj5*r20);
IkReal x2960=(cj5*r10);
IkReal x2961=((1.0)*x2955);
IkReal x2962=((1.0)*x2956);
IkReal x2963=(sj5*x2955);
IkReal x2964=(sj5*x2956);
evalcond[0]=(((r22*x2956))+((r21*x2963))+(((-1.0)*x2959*x2961)));
evalcond[1]=(cj0+((r11*x2963))+(((-1.0)*x2960*x2961))+((r12*x2956)));
evalcond[2]=(((r21*x2964))+(((-1.0)*x2959*x2962))+(((-1.0)*r22*x2961)));
evalcond[3]=((((-1.0)*x2957))+(((-1.0)*x2958*x2961))+((r01*x2963))+((r02*x2956)));
evalcond[4]=((((-1.0)*r02*x2961))+(((-1.0)*x2958*x2962))+((r01*x2964))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2957))+((r11*x2964))+(((-1.0)*x2960*x2962))+(((-1.0)*r12*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.09090909090909)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.09090909090909)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.09090909090909)*px))+IKsqr(((9.09090909090909)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.09090909090909)*px), ((9.09090909090909)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.11)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.11)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2965=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2965;
j4eval[1]=IKsign(x2965);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2966=cj5*cj5;
IkReal x2967=(r11*r21);
IkReal x2968=((1.0)*r20);
IkReal x2969=(cj5*sj5);
IkReal x2970=(((r10*r21*x2969))+(((-1.0)*x2967))+(((-1.0)*r12*r22))+(((-1.0)*r10*x2966*x2968))+((x2966*x2967))+((r11*r20*x2969)));
j4eval[0]=x2970;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2968)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2970);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2971=cj5*cj5;
IkReal x2972=((1.0)*r20);
IkReal x2973=(r01*r21);
IkReal x2974=(r21*sj5);
IkReal x2975=(((cj5*r01*r20*sj5))+((x2971*x2973))+(((-1.0)*r02*r22))+(((-1.0)*x2973))+((cj5*r00*x2974))+(((-1.0)*r00*x2971*x2972)));
j4eval[0]=x2975;
j4eval[1]=((IKabs((((cj0*x2974))+(((-1.0)*cj0*cj5*x2972)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2976=cj5*cj5;
IkReal x2977=((1.0)*r20);
IkReal x2978=(r01*r21);
IkReal x2979=(r21*sj5);
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x2978))+((cj5*r00*x2979))+(((-1.0)*r00*x2976*x2977))+((x2976*x2978)))),-1);
if(!x2980.valid){
continue;
}
CheckValue<IkReal> x2981 = IKatan2WithCheck(IkReal((((cj0*x2979))+(((-1.0)*cj0*cj5*x2977)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2980.value)))+(x2981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2982=IKcos(j4);
IkReal x2983=IKsin(j4);
IkReal x2984=(cj5*r00);
IkReal x2985=(cj5*r20);
IkReal x2986=(cj5*r10);
IkReal x2987=(r21*sj5);
IkReal x2988=((1.0)*x2982);
IkReal x2989=((1.0)*x2983);
IkReal x2990=(sj5*x2982);
IkReal x2991=(sj5*x2983);
evalcond[0]=((((-1.0)*x2985*x2988))+((x2982*x2987))+((r22*x2983)));
evalcond[1]=(cj0+((r12*x2983))+(((-1.0)*x2986*x2988))+((r11*x2990)));
evalcond[2]=(((x2983*x2987))+(((-1.0)*x2985*x2989))+(((-1.0)*r22*x2988)));
evalcond[3]=(cj0+(((-1.0)*x2984*x2989))+((r01*x2991))+(((-1.0)*r02*x2988)));
evalcond[4]=(sj0+(((-1.0)*r12*x2988))+(((-1.0)*x2986*x2989))+((r11*x2991)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2984*x2988))+((r01*x2990))+((r02*x2983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2992=cj5*cj5;
IkReal x2993=(r11*r21);
IkReal x2994=((1.0)*r20);
IkReal x2995=(cj5*sj5);
CheckValue<IkReal> x2996 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2996.valid){
continue;
}
CheckValue<IkReal> x2997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2992*x2994))+(((-1.0)*r12*r22))+((x2992*x2993))+((r10*r21*x2995))+(((-1.0)*x2993))+((r11*r20*x2995)))),-1);
if(!x2997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2996.value)+(((1.5707963267949)*(x2997.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2998=IKcos(j4);
IkReal x2999=IKsin(j4);
IkReal x3000=(cj5*r00);
IkReal x3001=(cj5*r20);
IkReal x3002=(cj5*r10);
IkReal x3003=(r21*sj5);
IkReal x3004=((1.0)*x2998);
IkReal x3005=((1.0)*x2999);
IkReal x3006=(sj5*x2998);
IkReal x3007=(sj5*x2999);
evalcond[0]=(((x2998*x3003))+((r22*x2999))+(((-1.0)*x3001*x3004)));
evalcond[1]=((((-1.0)*x3002*x3004))+cj0+((r12*x2999))+((r11*x3006)));
evalcond[2]=((((-1.0)*r22*x3004))+((x2999*x3003))+(((-1.0)*x3001*x3005)));
evalcond[3]=(((r01*x3007))+cj0+(((-1.0)*r02*x3004))+(((-1.0)*x3000*x3005)));
evalcond[4]=((((-1.0)*x3002*x3005))+sj0+(((-1.0)*r12*x3004))+((r11*x3007)));
evalcond[5]=(((r01*x3006))+(((-1.0)*sj0))+(((-1.0)*x3000*x3004))+((r02*x2999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3008 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3008.value)+(((1.5707963267949)*(x3009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKcos(j4);
IkReal x3011=IKsin(j4);
IkReal x3012=(cj5*r00);
IkReal x3013=(cj5*r20);
IkReal x3014=(cj5*r10);
IkReal x3015=(r21*sj5);
IkReal x3016=((1.0)*x3010);
IkReal x3017=((1.0)*x3011);
IkReal x3018=(sj5*x3010);
IkReal x3019=(sj5*x3011);
evalcond[0]=(((x3010*x3015))+((r22*x3011))+(((-1.0)*x3013*x3016)));
evalcond[1]=(cj0+((r12*x3011))+((r11*x3018))+(((-1.0)*x3014*x3016)));
evalcond[2]=(((x3011*x3015))+(((-1.0)*r22*x3016))+(((-1.0)*x3013*x3017)));
evalcond[3]=(((r01*x3019))+cj0+(((-1.0)*r02*x3016))+(((-1.0)*x3012*x3017)));
evalcond[4]=(sj0+(((-1.0)*r12*x3016))+((r11*x3019))+(((-1.0)*x3014*x3017)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3018))+(((-1.0)*x3012*x3016))+((r02*x3011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.33616762830246)*py))+(((-3.21894928636502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((1.33616762830246)*py))+(((-3.21894928636502)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((1.33616762830246)*py))+(((-3.21894928636502)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3020=IKcos(j0);
IkReal x3021=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.265)*x3020))+(((-0.11)*x3021)));
evalcond[1]=((((0.11)*x3020))+(((-1.0)*py))+(((-0.265)*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3022=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3022;
j4eval[1]=IKsign(x3022);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3023=cj5*cj5;
IkReal x3024=(r11*r21);
IkReal x3025=((1.0)*r20);
IkReal x3026=(cj5*sj5);
IkReal x3027=((((-1.0)*r12*r22))+(((-1.0)*x3024))+(((-1.0)*r10*x3023*x3025))+((r11*r20*x3026))+((x3023*x3024))+((r10*r21*x3026)));
j4eval[0]=x3027;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3025)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3028=cj5*cj5;
IkReal x3029=((1.0)*r20);
IkReal x3030=(r01*r21);
IkReal x3031=(r21*sj5);
IkReal x3032=(((cj5*r01*r20*sj5))+((x3028*x3030))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3028*x3029))+((cj5*r00*x3031))+(((-1.0)*x3030)));
j4eval[0]=x3032;
j4eval[1]=((IKabs((((cj0*x3031))+(((-1.0)*cj0*cj5*x3029)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3033=cj5*cj5;
IkReal x3034=((1.0)*r20);
IkReal x3035=(r01*r21);
IkReal x3036=(r21*sj5);
CheckValue<IkReal> x3037=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3036))+(((-1.0)*x3035))+((x3033*x3035))+(((-1.0)*r00*x3033*x3034)))),-1);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x3034))+((cj0*x3036)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3037.value)))+(x3038.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3039=IKcos(j4);
IkReal x3040=IKsin(j4);
IkReal x3041=(cj5*r00);
IkReal x3042=(cj5*r20);
IkReal x3043=(cj5*r10);
IkReal x3044=(r21*sj5);
IkReal x3045=((1.0)*x3039);
IkReal x3046=((1.0)*x3040);
IkReal x3047=(sj5*x3039);
IkReal x3048=(sj5*x3040);
evalcond[0]=((((-1.0)*x3042*x3045))+((r22*x3040))+((x3039*x3044)));
evalcond[1]=(cj0+((r12*x3040))+(((-1.0)*x3043*x3045))+((r11*x3047)));
evalcond[2]=((((-1.0)*x3042*x3046))+(((-1.0)*r22*x3045))+((x3040*x3044)));
evalcond[3]=(cj0+(((-1.0)*x3041*x3046))+(((-1.0)*r02*x3045))+((r01*x3048)));
evalcond[4]=(sj0+(((-1.0)*r12*x3045))+(((-1.0)*x3043*x3046))+((r11*x3048)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3041*x3045))+((r02*x3040))+((r01*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3049=cj5*cj5;
IkReal x3050=(r11*r21);
IkReal x3051=((1.0)*r20);
IkReal x3052=(cj5*sj5);
CheckValue<IkReal> x3053 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3051))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3053.valid){
continue;
}
CheckValue<IkReal> x3054=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3050))+(((-1.0)*r12*r22))+((r11*r20*x3052))+((r10*r21*x3052))+((x3049*x3050))+(((-1.0)*r10*x3049*x3051)))),-1);
if(!x3054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3053.value)+(((1.5707963267949)*(x3054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3055=IKcos(j4);
IkReal x3056=IKsin(j4);
IkReal x3057=(cj5*r00);
IkReal x3058=(cj5*r20);
IkReal x3059=(cj5*r10);
IkReal x3060=(r21*sj5);
IkReal x3061=((1.0)*x3055);
IkReal x3062=((1.0)*x3056);
IkReal x3063=(sj5*x3055);
IkReal x3064=(sj5*x3056);
evalcond[0]=((((-1.0)*x3058*x3061))+((r22*x3056))+((x3055*x3060)));
evalcond[1]=(cj0+((r12*x3056))+((r11*x3063))+(((-1.0)*x3059*x3061)));
evalcond[2]=((((-1.0)*r22*x3061))+(((-1.0)*x3058*x3062))+((x3056*x3060)));
evalcond[3]=(cj0+((r01*x3064))+(((-1.0)*r02*x3061))+(((-1.0)*x3057*x3062)));
evalcond[4]=(sj0+(((-1.0)*r12*x3061))+((r11*x3064))+(((-1.0)*x3059*x3062)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3056))+((r01*x3063))+(((-1.0)*x3057*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3065 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3065.value)+(((1.5707963267949)*(x3066.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKcos(j4);
IkReal x3068=IKsin(j4);
IkReal x3069=(cj5*r00);
IkReal x3070=(cj5*r20);
IkReal x3071=(cj5*r10);
IkReal x3072=(r21*sj5);
IkReal x3073=((1.0)*x3067);
IkReal x3074=((1.0)*x3068);
IkReal x3075=(sj5*x3067);
IkReal x3076=(sj5*x3068);
evalcond[0]=(((r22*x3068))+(((-1.0)*x3070*x3073))+((x3067*x3072)));
evalcond[1]=(cj0+(((-1.0)*x3071*x3073))+((r11*x3075))+((r12*x3068)));
evalcond[2]=((((-1.0)*r22*x3073))+((x3068*x3072))+(((-1.0)*x3070*x3074)));
evalcond[3]=(((r01*x3076))+cj0+(((-1.0)*r02*x3073))+(((-1.0)*x3069*x3074)));
evalcond[4]=(sj0+(((-1.0)*r12*x3073))+(((-1.0)*x3071*x3074))+((r11*x3076)));
evalcond[5]=(((r01*x3075))+(((-1.0)*sj0))+(((-1.0)*x3069*x3073))+((r02*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.21894928636502)*py))+(((-1.33616762830246)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.33616762830246)*py))+(((-3.21894928636502)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))))+IKsqr(((((1.33616762830246)*py))+(((-3.21894928636502)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.21894928636502)*py))+(((-1.33616762830246)*px))), ((((1.33616762830246)*py))+(((-3.21894928636502)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3077=IKcos(j0);
IkReal x3078=IKsin(j0);
evalcond[0]=((((-0.11)*x3078))+(((-1.0)*px))+(((-0.265)*x3077)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x3077))+(((-0.265)*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3079=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3079;
j4eval[1]=IKsign(x3079);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3080=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3080;
j4eval[1]=IKsign(x3080);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3081=cj5*cj5;
IkReal x3082=(r11*r21);
IkReal x3083=((1.0)*r20);
IkReal x3084=(cj5*sj5);
IkReal x3085=(((x3081*x3082))+(((-1.0)*r12*r22))+(((-1.0)*x3082))+(((-1.0)*r10*x3081*x3083))+((r10*r21*x3084))+((r11*r20*x3084)));
j4eval[0]=x3085;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3083)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3086=cj5*cj5;
IkReal x3087=(r11*r21);
IkReal x3088=((1.0)*r20);
IkReal x3089=(cj5*sj5);
CheckValue<IkReal> x3090 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3090.valid){
continue;
}
CheckValue<IkReal> x3091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x3087))+(((-1.0)*r10*x3086*x3088))+((r10*r21*x3089))+((r11*r20*x3089))+((x3086*x3087)))),-1);
if(!x3091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3090.value)+(((1.5707963267949)*(x3091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3092=IKcos(j4);
IkReal x3093=IKsin(j4);
IkReal x3094=((1.0)*sj0);
IkReal x3095=(cj5*r00);
IkReal x3096=(cj5*r20);
IkReal x3097=(cj5*r10);
IkReal x3098=((1.0)*x3092);
IkReal x3099=((1.0)*x3093);
IkReal x3100=(sj5*x3092);
IkReal x3101=(sj5*x3093);
evalcond[0]=(((r21*x3100))+(((-1.0)*x3096*x3098))+((r22*x3093)));
evalcond[1]=(((r11*x3100))+cj0+((r12*x3093))+(((-1.0)*x3097*x3098)));
evalcond[2]=((((-1.0)*r22*x3098))+((r21*x3101))+(((-1.0)*x3096*x3099)));
evalcond[3]=((((-1.0)*x3094))+((r02*x3093))+((r01*x3100))+(((-1.0)*x3095*x3098)));
evalcond[4]=((((-1.0)*r02*x3098))+((r01*x3101))+(((-1.0)*x3095*x3099))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x3101))+(((-1.0)*r12*x3098))+(((-1.0)*x3094))+(((-1.0)*x3097*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3102 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3102.value)+(((1.5707963267949)*(x3103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3104=IKcos(j4);
IkReal x3105=IKsin(j4);
IkReal x3106=((1.0)*sj0);
IkReal x3107=(cj5*r00);
IkReal x3108=(cj5*r20);
IkReal x3109=(cj5*r10);
IkReal x3110=((1.0)*x3104);
IkReal x3111=((1.0)*x3105);
IkReal x3112=(sj5*x3104);
IkReal x3113=(sj5*x3105);
evalcond[0]=(((r22*x3105))+(((-1.0)*x3108*x3110))+((r21*x3112)));
evalcond[1]=(cj0+(((-1.0)*x3109*x3110))+((r12*x3105))+((r11*x3112)));
evalcond[2]=((((-1.0)*x3108*x3111))+((r21*x3113))+(((-1.0)*r22*x3110)));
evalcond[3]=((((-1.0)*x3106))+((r02*x3105))+((r01*x3112))+(((-1.0)*x3107*x3110)));
evalcond[4]=((((-1.0)*r02*x3110))+((r01*x3113))+(((-1.0)*x3107*x3111))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3110))+(((-1.0)*x3106))+(((-1.0)*x3109*x3111))+((r11*x3113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3116=IKcos(j4);
IkReal x3117=IKsin(j4);
IkReal x3118=((1.0)*sj0);
IkReal x3119=(cj5*r00);
IkReal x3120=(cj5*r20);
IkReal x3121=(cj5*r10);
IkReal x3122=((1.0)*x3116);
IkReal x3123=((1.0)*x3117);
IkReal x3124=(sj5*x3116);
IkReal x3125=(sj5*x3117);
evalcond[0]=(((r22*x3117))+((r21*x3124))+(((-1.0)*x3120*x3122)));
evalcond[1]=(((r12*x3117))+cj0+(((-1.0)*x3121*x3122))+((r11*x3124)));
evalcond[2]=(((r21*x3125))+(((-1.0)*x3120*x3123))+(((-1.0)*r22*x3122)));
evalcond[3]=(((r01*x3124))+(((-1.0)*x3118))+((r02*x3117))+(((-1.0)*x3119*x3122)));
evalcond[4]=(((r01*x3125))+(((-1.0)*r02*x3122))+(((-1.0)*x3119*x3123))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3118))+(((-1.0)*r12*x3122))+(((-1.0)*x3121*x3123))+((r11*x3125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3126=(cj2*sj1);
IkReal x3127=((100.0)*px);
IkReal x3128=(r00*sj5);
IkReal x3129=(cj1*sj2);
IkReal x3130=(cj5*r01);
IkReal x3131=((26.5)*sj1);
CheckValue<IkReal> x3132=IKPowWithIntegerCheck(((((11.0)*x3129))+(((11.0)*x3126))),-1);
if(!x3132.valid){
continue;
}
CheckValue<IkReal> x3133=IKPowWithIntegerCheck((x3129+x3126),-1);
if(!x3133.valid){
continue;
}
if( IKabs(((x3132.value)*(((((14.5)*x3126*x3130))+(((14.5)*x3126*x3128))+(((14.5)*x3129*x3130))+((x3130*x3131))+(((14.5)*x3128*x3129))+(((-1.0)*x3126*x3127))+(((-1.0)*x3127*x3129))+((x3128*x3131)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3133.value)*((x3128+x3130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3132.value)*(((((14.5)*x3126*x3130))+(((14.5)*x3126*x3128))+(((14.5)*x3129*x3130))+((x3130*x3131))+(((14.5)*x3128*x3129))+(((-1.0)*x3126*x3127))+(((-1.0)*x3127*x3129))+((x3128*x3131))))))+IKsqr(((x3133.value)*((x3128+x3130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3132.value)*(((((14.5)*x3126*x3130))+(((14.5)*x3126*x3128))+(((14.5)*x3129*x3130))+((x3130*x3131))+(((14.5)*x3128*x3129))+(((-1.0)*x3126*x3127))+(((-1.0)*x3127*x3129))+((x3128*x3131))))), ((x3133.value)*((x3128+x3130))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3134=IKcos(j0);
IkReal x3135=IKsin(j0);
IkReal x3136=(r00*sj5);
IkReal x3137=((0.24)*cj2);
IkReal x3138=(cj5*r11);
IkReal x3139=(r10*sj5);
IkReal x3140=(cj5*r01);
IkReal x3141=(cj1*sj2);
IkReal x3142=(sj1*x3135);
IkReal x3143=(sj1*x3134);
evalcond[0]=((((-1.0)*x3140))+(((-1.0)*x3136))+((cj2*x3143))+((x3134*x3141)));
evalcond[1]=(((x3135*x3141))+(((-1.0)*x3139))+(((-1.0)*x3138))+((cj2*x3142)));
evalcond[2]=((((-0.095)*x3140))+(((0.265)*x3143))+(((-1.0)*px))+((x3137*x3143))+(((0.24)*x3134*x3141))+(((-0.095)*x3136))+(((-0.11)*x3135)));
evalcond[3]=((((0.24)*x3135*x3141))+(((0.265)*x3142))+(((-1.0)*py))+(((0.11)*x3134))+((x3137*x3142))+(((-0.095)*x3138))+(((-0.095)*x3139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3144;
j4eval[1]=IKsign(x3144);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3145=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3145;
j4eval[1]=IKsign(x3145);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3146=((1.0)*sj0);
IkReal x3147=((1.0)*cj0);
IkReal x3148=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3148;
j4eval[1]=((IKabs(((((-1.0)*cj5*r00*x3147))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3146)))))+(IKabs(((((-1.0)*r12*x3146))+(((-1.0)*r02*x3147))))));
j4eval[2]=IKsign(x3148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3149=((-1.0)*r20);
IkReal x3151 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3151)==0){
continue;
}
IkReal x3150=pow(x3151,-0.5);
CheckValue<IkReal> x3152 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3149),IKFAST_ATAN2_MAGTHRESH);
if(!x3152.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3152.value));
IkReal gconst97=(r21*x3150);
IkReal gconst98=(x3149*x3150);
CheckValue<IkReal> x3153 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3153.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3153.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3154=((-1.0)*r20);
IkReal x3155=x3150;
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3154),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
IkReal x3156=((-1.0)*(x3157.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3156;
IkReal gconst96=x3156;
IkReal gconst97=(r21*x3155);
IkReal gconst98=(x3154*x3155);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3158=((-1.0)*r20);
IkReal x3159=x3150;
CheckValue<IkReal> x3161 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3158),IKFAST_ATAN2_MAGTHRESH);
if(!x3161.valid){
continue;
}
IkReal x3160=((-1.0)*(x3161.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3160;
IkReal gconst96=x3160;
IkReal gconst97=(r21*x3159);
IkReal gconst98=(x3158*x3159);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3162=((-1.0)*r20);
IkReal x3163=x3150;
CheckValue<IkReal> x3165 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3162),IKFAST_ATAN2_MAGTHRESH);
if(!x3165.valid){
continue;
}
IkReal x3164=((-1.0)*(x3165.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3164;
IkReal gconst96=x3164;
IkReal gconst97=(r21*x3163);
IkReal gconst98=(x3162*x3163);
IkReal x3166=((1.0)*(r22*r22));
CheckValue<IkReal> x3170=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3166))),-1);
if(!x3170.valid){
continue;
}
IkReal x3167=x3170.value;
IkReal x3168=((1.0)*x3167);
IkReal x3169=((((-1.0)*x3168*(r21*r21*r21*r21)))+(((-1.0)*x3168*(r20*r20*r20*r20)))+(((-2.0)*x3167*(r20*r20)*(r21*r21)))+(((-1.0)*x3166)));
j4eval[0]=x3169;
j4eval[1]=IKsign(x3169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3171=(cj2*sj1);
IkReal x3172=(gconst98*r20);
IkReal x3173=(cj1*sj2);
IkReal x3174=((1.0)*gconst97*r21);
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((((-1.0)*x3173*x3174))+((x3171*x3172))+((x3172*x3173))+(((-1.0)*x3171*x3174)))),IkReal((((r22*x3171))+((r22*x3173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3172*x3172)))+(((2.0)*gconst97*r21*x3172))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x3174)))),-1);
if(!x3176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3175.value)+(((1.5707963267949)*(x3176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3177=IKcos(j4);
IkReal x3178=IKsin(j4);
IkReal x3179=(gconst98*r10);
IkReal x3180=(gconst97*r21);
IkReal x3181=(gconst98*r20);
IkReal x3182=(cj1*cj2);
IkReal x3183=((1.0)*sj1);
IkReal x3184=(gconst98*r00);
IkReal x3185=((1.0)*x3177);
IkReal x3186=((1.0)*x3178);
IkReal x3187=(gconst97*x3178);
IkReal x3188=(gconst97*x3177);
evalcond[0]=((((-1.0)*x3181*x3185))+((r22*x3178))+((x3177*x3180)));
evalcond[1]=(cj0+(((-1.0)*x3179*x3185))+((r11*x3188))+((r12*x3178)));
evalcond[2]=((((-1.0)*x3184*x3185))+(((-1.0)*sj0))+((r01*x3188))+((r02*x3178)));
evalcond[3]=((((-1.0)*cj2*x3183))+(((-1.0)*r22*x3185))+((x3178*x3180))+(((-1.0)*x3181*x3186))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*x3184*x3186))+((cj0*x3182))+(((-1.0)*r02*x3185))+((r01*x3187))+(((-1.0)*cj0*sj2*x3183)));
evalcond[5]=((((-1.0)*x3179*x3186))+((sj0*x3182))+((r11*x3187))+(((-1.0)*sj0*sj2*x3183))+(((-1.0)*r12*x3185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=(gconst98*r10);
IkReal x3194=(gconst97*r21);
IkReal x3195=(gconst98*r20);
IkReal x3196=(cj1*cj2);
IkReal x3197=((1.0)*sj1);
IkReal x3198=(gconst98*r00);
IkReal x3199=((1.0)*x3191);
IkReal x3200=((1.0)*x3192);
IkReal x3201=(gconst97*x3192);
IkReal x3202=(gconst97*x3191);
evalcond[0]=(((r22*x3192))+((x3191*x3194))+(((-1.0)*x3195*x3199)));
evalcond[1]=(cj0+((r11*x3202))+(((-1.0)*x3193*x3199))+((r12*x3192)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3198*x3199))+((r01*x3202))+((r02*x3192)));
evalcond[3]=((((-1.0)*cj2*x3197))+(((-1.0)*r22*x3199))+(((-1.0)*cj1*sj2))+((x3192*x3194))+(((-1.0)*x3195*x3200)));
evalcond[4]=((((-1.0)*cj0*sj2*x3197))+((cj0*x3196))+((r01*x3201))+(((-1.0)*r02*x3199))+(((-1.0)*x3198*x3200)));
evalcond[5]=((((-1.0)*x3193*x3200))+((r11*x3201))+(((-1.0)*r12*x3199))+((sj0*x3196))+(((-1.0)*sj0*sj2*x3197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3203.value)+(((1.5707963267949)*(x3204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3205=IKcos(j4);
IkReal x3206=IKsin(j4);
IkReal x3207=(gconst98*r10);
IkReal x3208=(gconst97*r21);
IkReal x3209=(gconst98*r20);
IkReal x3210=(cj1*cj2);
IkReal x3211=((1.0)*sj1);
IkReal x3212=(gconst98*r00);
IkReal x3213=((1.0)*x3205);
IkReal x3214=((1.0)*x3206);
IkReal x3215=(gconst97*x3206);
IkReal x3216=(gconst97*x3205);
evalcond[0]=(((r22*x3206))+((x3205*x3208))+(((-1.0)*x3209*x3213)));
evalcond[1]=(cj0+((r12*x3206))+((r11*x3216))+(((-1.0)*x3207*x3213)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3216))+(((-1.0)*x3212*x3213))+((r02*x3206)));
evalcond[3]=(((x3206*x3208))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3211))+(((-1.0)*x3209*x3214))+(((-1.0)*r22*x3213)));
evalcond[4]=(((r01*x3215))+(((-1.0)*x3212*x3214))+(((-1.0)*r02*x3213))+((cj0*x3210))+(((-1.0)*cj0*sj2*x3211)));
evalcond[5]=(((r11*x3215))+(((-1.0)*r12*x3213))+((sj0*x3210))+(((-1.0)*sj0*sj2*x3211))+(((-1.0)*x3207*x3214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3217=((-1.0)*r21);
IkReal x3219 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3219)==0){
continue;
}
IkReal x3218=pow(x3219,-0.5);
CheckValue<IkReal> x3220 = IKatan2WithCheck(IkReal(x3217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3220.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3220.value))));
IkReal gconst100=(x3217*x3218);
IkReal gconst101=((1.0)*r20*x3218);
CheckValue<IkReal> x3221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3222=((-1.0)*r21);
CheckValue<IkReal> x3225 = IKatan2WithCheck(IkReal(x3222),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3225.valid){
continue;
}
IkReal x3223=((1.0)*(x3225.value));
IkReal x3224=x3218;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3223)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3223)));
IkReal gconst100=(x3222*x3224);
IkReal gconst101=((1.0)*r20*x3224);
IkReal x3226=r22*r22;
IkReal x3227=((1.0)*x3226);
CheckValue<IkReal> x3231=IKPowWithIntegerCheck(((-1.0)+x3226),-1);
if(!x3231.valid){
continue;
}
IkReal x3228=x3231.value;
if((((1.0)+(((-1.0)*x3227)))) < -0.00001)
continue;
IkReal x3229=IKsqrt(((1.0)+(((-1.0)*x3227))));
IkReal x3230=(cj0*x3228*x3229);
j4eval[0]=((IKabs((x3230+(((-1.0)*x3227*x3230)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3232=((-1.0)*r21);
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal(x3232),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
IkReal x3233=((1.0)*(x3235.value));
IkReal x3234=x3218;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3233)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3233)));
IkReal gconst100=(x3232*x3234);
IkReal gconst101=((1.0)*r20*x3234);
IkReal x3236=r22*r22;
IkReal x3237=((1.0)*x3236);
CheckValue<IkReal> x3241=IKPowWithIntegerCheck(((-1.0)+x3236),-1);
if(!x3241.valid){
continue;
}
IkReal x3238=x3241.value;
if((((1.0)+(((-1.0)*x3237)))) < -0.00001)
continue;
IkReal x3239=IKsqrt(((1.0)+(((-1.0)*x3237))));
IkReal x3240=(sj0*x3238*x3239);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3237*x3240))+x3240))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3242=((-1.0)*r21);
CheckValue<IkReal> x3245 = IKatan2WithCheck(IkReal(x3242),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3245.valid){
continue;
}
IkReal x3243=((1.0)*(x3245.value));
IkReal x3244=x3218;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3243)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3243)));
IkReal gconst100=(x3242*x3244);
IkReal gconst101=((1.0)*r20*x3244);
IkReal x3246=r22*r22;
IkReal x3247=((1.0)*r12*sj0);
IkReal x3248=((1.0)*cj0*r02);
CheckValue<IkReal> x3252=IKPowWithIntegerCheck(((-1.0)+x3246),-1);
if(!x3252.valid){
continue;
}
IkReal x3249=x3252.value;
if((((1.0)+(((-1.0)*x3246)))) < -0.00001)
continue;
IkReal x3250=IKsqrt(((1.0)+(((-1.0)*x3246))));
IkReal x3251=(r22*x3249*x3250);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3248))+(((-1.0)*x3247)))))+(IKabs(((((-1.0)*x3247*x3251))+(((-1.0)*x3248*x3251))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3253=((1.0)*sj0);
IkReal x3254=((1.0)*cj0);
CheckValue<IkReal> x3255=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3255.valid){
continue;
}
CheckValue<IkReal> x3256 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r10*x3253))+(((-1.0)*gconst101*r00*x3254))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IkReal(((((-1.0)*r02*x3254))+(((-1.0)*r12*x3253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3255.value)))+(x3256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3257=IKcos(j4);
IkReal x3258=IKsin(j4);
IkReal x3259=(cj1*cj2);
IkReal x3260=(gconst101*r20);
IkReal x3261=(gconst101*r10);
IkReal x3262=((1.0)*sj2);
IkReal x3263=(gconst101*r00);
IkReal x3264=((1.0)*x3257);
IkReal x3265=((1.0)*x3258);
IkReal x3266=(gconst100*x3258);
IkReal x3267=(gconst100*x3257);
evalcond[0]=((((-1.0)*x3260*x3264))+((r21*x3267))+((r22*x3258)));
evalcond[1]=(((r12*x3258))+(((-1.0)*x3261*x3264))+cj0+((r11*x3267)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3267))+((r02*x3258))+(((-1.0)*x3263*x3264)));
evalcond[3]=((((-1.0)*x3260*x3265))+((r21*x3266))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3262))+(((-1.0)*r22*x3264)));
evalcond[4]=(((r01*x3266))+((cj0*x3259))+(((-1.0)*cj0*sj1*x3262))+(((-1.0)*x3263*x3265))+(((-1.0)*r02*x3264)));
evalcond[5]=((((-1.0)*x3261*x3265))+(((-1.0)*r12*x3264))+(((-1.0)*sj0*sj1*x3262))+((sj0*x3259))+((r11*x3266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3268.value)+(((1.5707963267949)*(x3269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKcos(j4);
IkReal x3271=IKsin(j4);
IkReal x3272=(cj1*cj2);
IkReal x3273=(gconst101*r20);
IkReal x3274=(gconst101*r10);
IkReal x3275=((1.0)*sj2);
IkReal x3276=(gconst101*r00);
IkReal x3277=((1.0)*x3270);
IkReal x3278=((1.0)*x3271);
IkReal x3279=(gconst100*x3271);
IkReal x3280=(gconst100*x3270);
evalcond[0]=((((-1.0)*x3273*x3277))+((r21*x3280))+((r22*x3271)));
evalcond[1]=(cj0+(((-1.0)*x3274*x3277))+((r12*x3271))+((r11*x3280)));
evalcond[2]=((((-1.0)*x3276*x3277))+(((-1.0)*sj0))+((r02*x3271))+((r01*x3280)));
evalcond[3]=((((-1.0)*x3273*x3278))+((r21*x3279))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3275))+(((-1.0)*r22*x3277)));
evalcond[4]=(((cj0*x3272))+(((-1.0)*x3276*x3278))+((r01*x3279))+(((-1.0)*cj0*sj1*x3275))+(((-1.0)*r02*x3277)));
evalcond[5]=((((-1.0)*r12*x3277))+((sj0*x3272))+(((-1.0)*x3274*x3278))+(((-1.0)*sj0*sj1*x3275))+((r11*x3279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3281 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
CheckValue<IkReal> x3282=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3281.value)+(((1.5707963267949)*(x3282.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3283=IKcos(j4);
IkReal x3284=IKsin(j4);
IkReal x3285=(cj1*cj2);
IkReal x3286=(gconst101*r20);
IkReal x3287=(gconst101*r10);
IkReal x3288=((1.0)*sj2);
IkReal x3289=(gconst101*r00);
IkReal x3290=((1.0)*x3283);
IkReal x3291=((1.0)*x3284);
IkReal x3292=(gconst100*x3284);
IkReal x3293=(gconst100*x3283);
evalcond[0]=(((r22*x3284))+((r21*x3293))+(((-1.0)*x3286*x3290)));
evalcond[1]=(cj0+(((-1.0)*x3287*x3290))+((r11*x3293))+((r12*x3284)));
evalcond[2]=(((r01*x3293))+(((-1.0)*sj0))+((r02*x3284))+(((-1.0)*x3289*x3290)));
evalcond[3]=((((-1.0)*r22*x3290))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3288))+((r21*x3292))+(((-1.0)*x3286*x3291)));
evalcond[4]=(((r01*x3292))+(((-1.0)*cj0*sj1*x3288))+(((-1.0)*r02*x3290))+((cj0*x3285))+(((-1.0)*x3289*x3291)));
evalcond[5]=((((-1.0)*r12*x3290))+(((-1.0)*sj0*sj1*x3288))+(((-1.0)*x3287*x3291))+((sj0*x3285))+((r11*x3292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3295 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3295)==0){
continue;
}
IkReal x3294=pow(x3295,-0.5);
CheckValue<IkReal> x3296 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3296.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3296.value));
IkReal gconst103=((-1.0)*r11*x3294);
IkReal gconst104=(r10*x3294);
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3297.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
IkReal x3298=((-1.0)*(x3300.value));
IkReal x3299=x3294;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3298;
IkReal gconst102=x3298;
IkReal gconst103=((-1.0)*r11*x3299);
IkReal gconst104=(r10*x3299);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3301=((1.0)*sj0);
IkReal x3302=((1.0)*cj0);
CheckValue<IkReal> x3303 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r00*x3302))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r10*x3301))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r02*x3302))+(((-1.0)*r12*x3301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3303.valid){
continue;
}
CheckValue<IkReal> x3304=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3303.value)+(((1.5707963267949)*(x3304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3305=IKcos(j4);
IkReal x3306=IKsin(j4);
IkReal x3307=(gconst103*r11);
IkReal x3308=(cj1*cj2);
IkReal x3309=((1.0)*sj1);
IkReal x3310=((1.0)*x3305);
IkReal x3311=(gconst103*x3305);
IkReal x3312=(gconst103*x3306);
IkReal x3313=((1.0)*gconst104*x3306);
evalcond[0]=(((r21*x3311))+((r22*x3306))+(((-1.0)*gconst104*r20*x3310)));
evalcond[1]=(cj0+((r12*x3306))+(((-1.0)*gconst104*r10*x3310))+((x3305*x3307)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3310))+((r02*x3306))+((r01*x3311)));
evalcond[3]=(((r21*x3312))+(((-1.0)*r20*x3313))+(((-1.0)*r22*x3310))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3309)));
evalcond[4]=(((cj0*x3308))+(((-1.0)*r02*x3310))+(((-1.0)*r00*x3313))+((r01*x3312))+(((-1.0)*cj0*sj2*x3309)));
evalcond[5]=((((-1.0)*sj0*sj2*x3309))+(((-1.0)*r12*x3310))+(((-1.0)*r10*x3313))+((x3306*x3307))+((sj0*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3314.valid){
continue;
}
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3314.value)))+(x3315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3316=IKcos(j4);
IkReal x3317=IKsin(j4);
IkReal x3318=(gconst103*r11);
IkReal x3319=(cj1*cj2);
IkReal x3320=((1.0)*sj1);
IkReal x3321=((1.0)*x3316);
IkReal x3322=(gconst103*x3316);
IkReal x3323=(gconst103*x3317);
IkReal x3324=((1.0)*gconst104*x3317);
evalcond[0]=((((-1.0)*gconst104*r20*x3321))+((r22*x3317))+((r21*x3322)));
evalcond[1]=(((x3316*x3318))+cj0+((r12*x3317))+(((-1.0)*gconst104*r10*x3321)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3322))+((r02*x3317))+(((-1.0)*gconst104*r00*x3321)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r20*x3324))+(((-1.0)*cj2*x3320))+((r21*x3323))+(((-1.0)*r22*x3321)));
evalcond[4]=((((-1.0)*r02*x3321))+((r01*x3323))+((cj0*x3319))+(((-1.0)*cj0*sj2*x3320))+(((-1.0)*r00*x3324)));
evalcond[5]=(((x3317*x3318))+(((-1.0)*r10*x3324))+(((-1.0)*sj0*sj2*x3320))+(((-1.0)*r12*x3321))+((sj0*x3319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3326 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3326)==0){
continue;
}
IkReal x3325=pow(x3326,-0.5);
CheckValue<IkReal> x3327 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3327.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3327.value))));
IkReal gconst106=((1.0)*r11*x3325);
IkReal gconst107=((-1.0)*r10*x3325);
CheckValue<IkReal> x3328 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3328.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3328.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
IkReal x3329=((1.0)*(x3331.value));
IkReal x3330=x3325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3329)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3329)));
IkReal gconst106=((1.0)*r11*x3330);
IkReal gconst107=((-1.0)*r10*x3330);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3334 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3334.valid){
continue;
}
IkReal x3332=((1.0)*(x3334.value));
IkReal x3333=x3325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3332)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3332)));
IkReal gconst106=((1.0)*r11*x3333);
IkReal gconst107=((-1.0)*r10*x3333);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3337 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3337.valid){
continue;
}
IkReal x3335=((1.0)*(x3337.value));
IkReal x3336=x3325;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3335)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3335)));
IkReal gconst106=((1.0)*r11*x3336);
IkReal gconst107=((-1.0)*r10*x3336);
IkReal x3338=r12*r12;
IkReal x3339=((1.0)*sj0);
IkReal x3340=(cj0*r02);
IkReal x3341=x3325;
j4eval[0]=((IKabs((((sj0*x3338*x3341))+(((-1.0)*x3339*x3341))+((r12*x3340*x3341)))))+(IKabs(((((-1.0)*x3340))+(((-1.0)*r12*x3339))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3342=((1.0)*sj0);
IkReal x3343=((1.0)*gconst107);
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal(((((-1.0)*gconst107*r10*x3342))+((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3343))+((gconst106*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3343))+(((-1.0)*gconst106*r20)))),-1);
if(!x3345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3344.value)+(((1.5707963267949)*(x3345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3346=IKcos(j4);
IkReal x3347=IKsin(j4);
IkReal x3348=(cj1*cj2);
IkReal x3349=(gconst107*r10);
IkReal x3350=(gconst107*r00);
IkReal x3351=(gconst107*r20);
IkReal x3352=((1.0)*sj1);
IkReal x3353=((1.0)*x3346);
IkReal x3354=(gconst106*x3346);
IkReal x3355=(gconst106*x3347);
IkReal x3356=((1.0)*x3347);
evalcond[0]=(((r22*x3347))+(((-1.0)*x3351*x3353))+((r21*x3354)));
evalcond[1]=(cj0+((r11*x3354))+(((-1.0)*x3349*x3353))+((r12*x3347)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3354))+((r02*x3347))+(((-1.0)*x3350*x3353)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3352))+(((-1.0)*x3351*x3356))+((r21*x3355))+(((-1.0)*r22*x3353)));
evalcond[4]=(((cj0*x3348))+(((-1.0)*r02*x3353))+((r01*x3355))+(((-1.0)*x3350*x3356))+(((-1.0)*cj0*sj2*x3352)));
evalcond[5]=(((r11*x3355))+(((-1.0)*x3349*x3356))+((sj0*x3348))+(((-1.0)*sj0*sj2*x3352))+(((-1.0)*r12*x3353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3357.valid){
continue;
}
CheckValue<IkReal> x3358 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3357.value)))+(x3358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3359=IKcos(j4);
IkReal x3360=IKsin(j4);
IkReal x3361=(cj1*cj2);
IkReal x3362=(gconst107*r10);
IkReal x3363=(gconst107*r00);
IkReal x3364=(gconst107*r20);
IkReal x3365=((1.0)*sj1);
IkReal x3366=((1.0)*x3359);
IkReal x3367=(gconst106*x3359);
IkReal x3368=(gconst106*x3360);
IkReal x3369=((1.0)*x3360);
evalcond[0]=(((r22*x3360))+((r21*x3367))+(((-1.0)*x3364*x3366)));
evalcond[1]=(cj0+(((-1.0)*x3362*x3366))+((r12*x3360))+((r11*x3367)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3360))+((r01*x3367))+(((-1.0)*x3363*x3366)));
evalcond[3]=((((-1.0)*cj2*x3365))+((r21*x3368))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3366))+(((-1.0)*x3364*x3369)));
evalcond[4]=(((cj0*x3361))+(((-1.0)*cj0*sj2*x3365))+((r01*x3368))+(((-1.0)*r02*x3366))+(((-1.0)*x3363*x3369)));
evalcond[5]=((((-1.0)*r12*x3366))+(((-1.0)*x3362*x3369))+((sj0*x3361))+((r11*x3368))+(((-1.0)*sj0*sj2*x3365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3370=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3370.valid){
continue;
}
CheckValue<IkReal> x3371 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3370.value)))+(x3371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3372=IKcos(j4);
IkReal x3373=IKsin(j4);
IkReal x3374=(cj1*cj2);
IkReal x3375=(gconst107*r10);
IkReal x3376=(gconst107*r00);
IkReal x3377=(gconst107*r20);
IkReal x3378=((1.0)*sj1);
IkReal x3379=((1.0)*x3372);
IkReal x3380=(gconst106*x3372);
IkReal x3381=(gconst106*x3373);
IkReal x3382=((1.0)*x3373);
evalcond[0]=(((r22*x3373))+((r21*x3380))+(((-1.0)*x3377*x3379)));
evalcond[1]=(((r12*x3373))+cj0+(((-1.0)*x3375*x3379))+((r11*x3380)));
evalcond[2]=(((r01*x3380))+(((-1.0)*sj0))+((r02*x3373))+(((-1.0)*x3376*x3379)));
evalcond[3]=((((-1.0)*r22*x3379))+(((-1.0)*x3377*x3382))+(((-1.0)*cj2*x3378))+(((-1.0)*cj1*sj2))+((r21*x3381)));
evalcond[4]=(((r01*x3381))+(((-1.0)*cj0*sj2*x3378))+((cj0*x3374))+(((-1.0)*x3376*x3382))+(((-1.0)*r02*x3379)));
evalcond[5]=(((sj0*x3374))+(((-1.0)*x3375*x3382))+(((-1.0)*sj0*sj2*x3378))+(((-1.0)*r12*x3379))+((r11*x3381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3383;
j4eval[1]=IKsign(x3383);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3384=((1.0)*cj5);
IkReal x3385=((((-1.0)*r21*x3384))+(((-1.0)*r20*sj5)));
j4eval[0]=x3385;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3384))))));
j4eval[2]=IKsign(x3385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3386=cj5*cj5;
IkReal x3387=r11*r11;
IkReal x3388=(cj5*r10);
IkReal x3389=(r11*sj5);
IkReal x3390=((((-1.0)*x3387))+(((-1.0)*x3386*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x3388*x3389))+((x3386*x3387)));
j4eval[0]=x3390;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3388))+x3389))));
j4eval[2]=IKsign(x3390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3391=cj5*cj5;
IkReal x3392=r11*r11;
IkReal x3393=(cj5*r10);
IkReal x3394=(r11*sj5);
CheckValue<IkReal> x3395=IKPowWithIntegerCheck(IKsign((((x3391*x3392))+(((-1.0)*x3392))+(((-1.0)*(r12*r12)))+(((2.0)*x3393*x3394))+(((-1.0)*x3391*(r10*r10))))),-1);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396 = IKatan2WithCheck(IkReal(r12),IkReal((x3394+(((-1.0)*x3393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3395.value)))+(x3396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j4);
IkReal x3398=IKsin(j4);
IkReal x3399=(cj5*r00);
IkReal x3400=(cj5*r10);
IkReal x3401=((1.0)*sj1);
IkReal x3402=(cj5*r20);
IkReal x3403=((1.0)*x3397);
IkReal x3404=((1.0)*x3398);
IkReal x3405=(sj5*x3397);
IkReal x3406=(sj5*x3398);
evalcond[0]=((((-1.0)*x3402*x3403))+((r21*x3405))+((r22*x3398)));
evalcond[1]=((((-1.0)*x3399*x3403))+((r02*x3398))+((r01*x3405)));
evalcond[2]=((1.0)+(((-1.0)*x3400*x3403))+((r11*x3405))+((r12*x3398)));
evalcond[3]=((((-1.0)*x3400*x3404))+((r11*x3406))+(((-1.0)*r12*x3403)));
evalcond[4]=((((-1.0)*sj2*x3401))+(((-1.0)*x3399*x3404))+(((-1.0)*r02*x3403))+((r01*x3406))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3402*x3404))+(((-1.0)*cj1*sj2))+((r21*x3406))+(((-1.0)*cj2*x3401))+(((-1.0)*r22*x3403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3407=((1.0)*cj5);
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3407))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
CheckValue<IkReal> x3409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3407))+(((-1.0)*r20*sj5)))),-1);
if(!x3409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3408.value)+(((1.5707963267949)*(x3409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3410=IKcos(j4);
IkReal x3411=IKsin(j4);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj5*r10);
IkReal x3414=((1.0)*sj1);
IkReal x3415=(cj5*r20);
IkReal x3416=((1.0)*x3410);
IkReal x3417=((1.0)*x3411);
IkReal x3418=(sj5*x3410);
IkReal x3419=(sj5*x3411);
evalcond[0]=((((-1.0)*x3415*x3416))+((r22*x3411))+((r21*x3418)));
evalcond[1]=((((-1.0)*x3412*x3416))+((r02*x3411))+((r01*x3418)));
evalcond[2]=((1.0)+((r12*x3411))+((r11*x3418))+(((-1.0)*x3413*x3416)));
evalcond[3]=(((r11*x3419))+(((-1.0)*r12*x3416))+(((-1.0)*x3413*x3417)));
evalcond[4]=((((-1.0)*x3412*x3417))+(((-1.0)*sj2*x3414))+(((-1.0)*r02*x3416))+((r01*x3419))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x3416))+(((-1.0)*x3415*x3417))+((r21*x3419))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3420.value)))+(x3421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKcos(j4);
IkReal x3423=IKsin(j4);
IkReal x3424=(cj5*r00);
IkReal x3425=(cj5*r10);
IkReal x3426=((1.0)*sj1);
IkReal x3427=(cj5*r20);
IkReal x3428=((1.0)*x3422);
IkReal x3429=((1.0)*x3423);
IkReal x3430=(sj5*x3422);
IkReal x3431=(sj5*x3423);
evalcond[0]=((((-1.0)*x3427*x3428))+((r21*x3430))+((r22*x3423)));
evalcond[1]=(((r01*x3430))+(((-1.0)*x3424*x3428))+((r02*x3423)));
evalcond[2]=((1.0)+(((-1.0)*x3425*x3428))+((r12*x3423))+((r11*x3430)));
evalcond[3]=((((-1.0)*r12*x3428))+(((-1.0)*x3425*x3429))+((r11*x3431)));
evalcond[4]=(((r01*x3431))+(((-1.0)*x3424*x3429))+((cj1*cj2))+(((-1.0)*sj2*x3426))+(((-1.0)*r02*x3428)));
evalcond[5]=((((-1.0)*x3427*x3429))+(((-1.0)*cj2*x3426))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3428))+((r21*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3432=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3432;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x3432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3433=((1.0)*cj5);
IkReal x3434=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3433)));
j4eval[0]=x3434;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3433)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3435=cj5*cj5;
IkReal x3436=r11*r11;
IkReal x3437=(r11*sj5);
IkReal x3438=(cj5*r10);
IkReal x3439=((r12*r12)+x3436+(((-1.0)*x3435*x3436))+((x3435*(r10*r10)))+(((-2.0)*x3437*x3438)));
j4eval[0]=x3439;
j4eval[1]=((IKabs(r12))+(IKabs((x3437+(((-1.0)*x3438))))));
j4eval[2]=IKsign(x3439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3440=cj5*cj5;
IkReal x3441=r11*r11;
IkReal x3442=(cj5*r10);
IkReal x3443=(r11*sj5);
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal(r12),IkReal((x3443+(((-1.0)*x3442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
CheckValue<IkReal> x3445=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3442*x3443))+(((-1.0)*x3440*x3441))+x3441+((x3440*(r10*r10))))),-1);
if(!x3445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3444.value)+(((1.5707963267949)*(x3445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3446=IKcos(j4);
IkReal x3447=IKsin(j4);
IkReal x3448=(cj5*r00);
IkReal x3449=(cj5*r10);
IkReal x3450=((1.0)*cj2);
IkReal x3451=(cj5*r20);
IkReal x3452=((1.0)*x3446);
IkReal x3453=((1.0)*x3447);
IkReal x3454=(sj5*x3446);
IkReal x3455=(sj5*x3447);
evalcond[0]=((((-1.0)*x3451*x3452))+((r21*x3454))+((r22*x3447)));
evalcond[1]=(((r02*x3447))+(((-1.0)*x3448*x3452))+((r01*x3454)));
evalcond[2]=((-1.0)+((r12*x3447))+(((-1.0)*x3449*x3452))+((r11*x3454)));
evalcond[3]=((((-1.0)*r12*x3452))+(((-1.0)*x3449*x3453))+((r11*x3455)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3450))+(((-1.0)*x3448*x3453))+(((-1.0)*r02*x3452))+((r01*x3455)));
evalcond[5]=((((-1.0)*x3451*x3453))+((r21*x3455))+(((-1.0)*sj1*x3450))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3456=((1.0)*cj5);
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3456)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3456))+(((-1.0)*r00*sj5)))),-1);
if(!x3458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3457.value)+(((1.5707963267949)*(x3458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3459=IKcos(j4);
IkReal x3460=IKsin(j4);
IkReal x3461=(cj5*r00);
IkReal x3462=(cj5*r10);
IkReal x3463=((1.0)*cj2);
IkReal x3464=(cj5*r20);
IkReal x3465=((1.0)*x3459);
IkReal x3466=((1.0)*x3460);
IkReal x3467=(sj5*x3459);
IkReal x3468=(sj5*x3460);
evalcond[0]=(((r21*x3467))+(((-1.0)*x3464*x3465))+((r22*x3460)));
evalcond[1]=(((r01*x3467))+(((-1.0)*x3461*x3465))+((r02*x3460)));
evalcond[2]=((-1.0)+(((-1.0)*x3462*x3465))+((r12*x3460))+((r11*x3467)));
evalcond[3]=((((-1.0)*x3462*x3466))+(((-1.0)*r12*x3465))+((r11*x3468)));
evalcond[4]=((((-1.0)*r02*x3465))+(((-1.0)*cj1*x3463))+((r01*x3468))+((sj1*sj2))+(((-1.0)*x3461*x3466)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3465))+((r21*x3468))+(((-1.0)*sj1*x3463))+(((-1.0)*x3464*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3469.valid){
continue;
}
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3469.value)))+(x3470.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3471=IKcos(j4);
IkReal x3472=IKsin(j4);
IkReal x3473=(cj5*r00);
IkReal x3474=(cj5*r10);
IkReal x3475=((1.0)*cj2);
IkReal x3476=(cj5*r20);
IkReal x3477=((1.0)*x3471);
IkReal x3478=((1.0)*x3472);
IkReal x3479=(sj5*x3471);
IkReal x3480=(sj5*x3472);
evalcond[0]=(((r21*x3479))+(((-1.0)*x3476*x3477))+((r22*x3472)));
evalcond[1]=(((r01*x3479))+(((-1.0)*x3473*x3477))+((r02*x3472)));
evalcond[2]=((-1.0)+((r12*x3472))+((r11*x3479))+(((-1.0)*x3474*x3477)));
evalcond[3]=((((-1.0)*r12*x3477))+((r11*x3480))+(((-1.0)*x3474*x3478)));
evalcond[4]=((((-1.0)*r02*x3477))+(((-1.0)*cj1*x3475))+((sj1*sj2))+((r01*x3480))+(((-1.0)*x3473*x3478)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3477))+((r21*x3480))+(((-1.0)*sj1*x3475))+(((-1.0)*x3476*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3482 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3482)==0){
continue;
}
IkReal x3481=pow(x3482,-0.5);
CheckValue<IkReal> x3483 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3483.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3483.value));
IkReal gconst109=((-1.0)*r01*x3481);
IkReal gconst110=(r00*x3481);
CheckValue<IkReal> x3484 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3484.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3484.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
IkReal x3485=((-1.0)*(x3487.value));
IkReal x3486=x3481;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3485;
IkReal gconst108=x3485;
IkReal gconst109=((-1.0)*r01*x3486);
IkReal gconst110=(r00*x3486);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3488=((1.0)*sj0);
IkReal x3489=((1.0)*gconst110);
CheckValue<IkReal> x3490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3489))+(((-1.0)*gconst109*r20)))),-1);
if(!x3490.valid){
continue;
}
CheckValue<IkReal> x3491 = IKatan2WithCheck(IkReal((((cj0*gconst109*r01))+(((-1.0)*gconst110*r10*x3488))+((gconst109*r11*sj0))+(((-1.0)*cj0*r00*x3489)))),IkReal(((((-1.0)*r12*x3488))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3490.value)))+(x3491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3492=IKcos(j4);
IkReal x3493=IKsin(j4);
IkReal x3494=((1.0)*sj2);
IkReal x3495=(cj1*cj2);
IkReal x3496=(gconst109*r21);
IkReal x3497=((1.0)*x3492);
IkReal x3498=(gconst109*x3493);
IkReal x3499=(gconst109*x3492);
IkReal x3500=((1.0)*gconst110*x3493);
evalcond[0]=(((r22*x3493))+(((-1.0)*gconst110*r20*x3497))+((x3492*x3496)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x3497))+((r11*x3499))+((r12*x3493)));
evalcond[2]=((((-1.0)*gconst110*r00*x3497))+(((-1.0)*sj0))+((r01*x3499))+((r02*x3493)));
evalcond[3]=((((-1.0)*cj1*x3494))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3497))+((x3493*x3496))+(((-1.0)*r20*x3500)));
evalcond[4]=((((-1.0)*r02*x3497))+((cj0*x3495))+((r01*x3498))+(((-1.0)*cj0*sj1*x3494))+(((-1.0)*r00*x3500)));
evalcond[5]=((((-1.0)*r10*x3500))+(((-1.0)*r12*x3497))+((r11*x3498))+(((-1.0)*sj0*sj1*x3494))+((sj0*x3495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3501=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x3501.valid){
continue;
}
CheckValue<IkReal> x3502 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3501.value)))+(x3502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3503=IKcos(j4);
IkReal x3504=IKsin(j4);
IkReal x3505=((1.0)*sj2);
IkReal x3506=(cj1*cj2);
IkReal x3507=(gconst109*r21);
IkReal x3508=((1.0)*x3503);
IkReal x3509=(gconst109*x3504);
IkReal x3510=(gconst109*x3503);
IkReal x3511=((1.0)*gconst110*x3504);
evalcond[0]=((((-1.0)*gconst110*r20*x3508))+((r22*x3504))+((x3503*x3507)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x3508))+((r12*x3504))+((r11*x3510)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3510))+((r02*x3504))+(((-1.0)*gconst110*r00*x3508)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x3508))+(((-1.0)*r20*x3511))+(((-1.0)*cj1*x3505))+((x3504*x3507)));
evalcond[4]=(((r01*x3509))+(((-1.0)*cj0*sj1*x3505))+((cj0*x3506))+(((-1.0)*r00*x3511))+(((-1.0)*r02*x3508)));
evalcond[5]=((((-1.0)*r12*x3508))+(((-1.0)*r10*x3511))+((sj0*x3506))+((r11*x3509))+(((-1.0)*sj0*sj1*x3505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3513 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3513)==0){
continue;
}
IkReal x3512=pow(x3513,-0.5);
CheckValue<IkReal> x3514 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3514.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3514.value))));
IkReal gconst112=((1.0)*r01*x3512);
IkReal gconst113=((-1.0)*r00*x3512);
CheckValue<IkReal> x3515 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3515.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3518 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3518.valid){
continue;
}
IkReal x3516=((1.0)*(x3518.value));
IkReal x3517=x3512;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3516)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3516)));
IkReal gconst112=((1.0)*r01*x3517);
IkReal gconst113=((-1.0)*r00*x3517);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
IkReal x3519=((1.0)*(x3521.value));
IkReal x3520=x3512;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3519)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3519)));
IkReal gconst112=((1.0)*r01*x3520);
IkReal gconst113=((-1.0)*r00*x3520);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3524 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3524.valid){
continue;
}
IkReal x3522=((1.0)*(x3524.value));
IkReal x3523=x3512;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3522)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3522)));
IkReal gconst112=((1.0)*r01*x3523);
IkReal gconst113=((-1.0)*r00*x3523);
IkReal x3525=r02*r02;
IkReal x3526=(r12*sj0);
IkReal x3527=((1.0)*cj0);
IkReal x3528=x3512;
j4eval[0]=((IKabs(((((-1.0)*x3526))+(((-1.0)*r02*x3527)))))+(IKabs(((((-1.0)*x3527*x3528))+((cj0*x3525*x3528))+((r02*x3526*x3528))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3529=((1.0)*sj0);
IkReal x3530=((1.0)*cj0);
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x3529))+((gconst112*r11*sj0))+(((-1.0)*gconst113*r00*x3530)))),IkReal(((((-1.0)*r02*x3530))+(((-1.0)*r12*x3529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x3532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3531.value)+(((1.5707963267949)*(x3532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3533=IKcos(j4);
IkReal x3534=IKsin(j4);
IkReal x3535=(cj1*cj2);
IkReal x3536=(gconst113*r20);
IkReal x3537=(gconst112*r21);
IkReal x3538=(gconst113*r00);
IkReal x3539=((1.0)*sj1);
IkReal x3540=(gconst113*r10);
IkReal x3541=((1.0)*x3533);
IkReal x3542=((1.0)*x3534);
IkReal x3543=(gconst112*x3533);
IkReal x3544=(gconst112*x3534);
evalcond[0]=(((r22*x3534))+((x3533*x3537))+(((-1.0)*x3536*x3541)));
evalcond[1]=(((r12*x3534))+cj0+((r11*x3543))+(((-1.0)*x3540*x3541)));
evalcond[2]=(((r02*x3534))+(((-1.0)*sj0))+(((-1.0)*x3538*x3541))+((r01*x3543)));
evalcond[3]=(((x3534*x3537))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3539))+(((-1.0)*r22*x3541))+(((-1.0)*x3536*x3542)));
evalcond[4]=((((-1.0)*r02*x3541))+(((-1.0)*x3538*x3542))+((r01*x3544))+((cj0*x3535))+(((-1.0)*cj0*sj2*x3539)));
evalcond[5]=(((sj0*x3535))+(((-1.0)*sj0*sj2*x3539))+(((-1.0)*r12*x3541))+((r11*x3544))+(((-1.0)*x3540*x3542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3545 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3545.valid){
continue;
}
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x3546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3545.value)+(((1.5707963267949)*(x3546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3547=IKcos(j4);
IkReal x3548=IKsin(j4);
IkReal x3549=(cj1*cj2);
IkReal x3550=(gconst113*r20);
IkReal x3551=(gconst112*r21);
IkReal x3552=(gconst113*r00);
IkReal x3553=((1.0)*sj1);
IkReal x3554=(gconst113*r10);
IkReal x3555=((1.0)*x3547);
IkReal x3556=((1.0)*x3548);
IkReal x3557=(gconst112*x3547);
IkReal x3558=(gconst112*x3548);
evalcond[0]=(((x3547*x3551))+(((-1.0)*x3550*x3555))+((r22*x3548)));
evalcond[1]=(cj0+(((-1.0)*x3554*x3555))+((r12*x3548))+((r11*x3557)));
evalcond[2]=(((r02*x3548))+(((-1.0)*sj0))+((r01*x3557))+(((-1.0)*x3552*x3555)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3553))+((x3548*x3551))+(((-1.0)*r22*x3555))+(((-1.0)*x3550*x3556)));
evalcond[4]=(((r01*x3558))+((cj0*x3549))+(((-1.0)*x3552*x3556))+(((-1.0)*cj0*sj2*x3553))+(((-1.0)*r02*x3555)));
evalcond[5]=((((-1.0)*x3554*x3556))+((sj0*x3549))+(((-1.0)*sj0*sj2*x3553))+(((-1.0)*r12*x3555))+((r11*x3558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3559.value)+(((1.5707963267949)*(x3560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3561=IKcos(j4);
IkReal x3562=IKsin(j4);
IkReal x3563=(cj1*cj2);
IkReal x3564=(gconst113*r20);
IkReal x3565=(gconst112*r21);
IkReal x3566=(gconst113*r00);
IkReal x3567=((1.0)*sj1);
IkReal x3568=(gconst113*r10);
IkReal x3569=((1.0)*x3561);
IkReal x3570=((1.0)*x3562);
IkReal x3571=(gconst112*x3561);
IkReal x3572=(gconst112*x3562);
evalcond[0]=(((x3561*x3565))+((r22*x3562))+(((-1.0)*x3564*x3569)));
evalcond[1]=(cj0+(((-1.0)*x3568*x3569))+((r11*x3571))+((r12*x3562)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3571))+(((-1.0)*x3566*x3569))+((r02*x3562)));
evalcond[3]=(((x3562*x3565))+(((-1.0)*cj2*x3567))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3569))+(((-1.0)*x3564*x3570)));
evalcond[4]=((((-1.0)*r02*x3569))+(((-1.0)*x3566*x3570))+((r01*x3572))+((cj0*x3563))+(((-1.0)*cj0*sj2*x3567)));
evalcond[5]=((((-1.0)*x3568*x3570))+((sj0*x3563))+(((-1.0)*r12*x3569))+((r11*x3572))+(((-1.0)*sj0*sj2*x3567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3573=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3573;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3574=((1.0)*cj5);
IkReal x3575=((((-1.0)*r21*x3574))+(((-1.0)*r20*sj5)));
j4eval[0]=x3575;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3574))+((r11*sj5))))));
j4eval[2]=IKsign(x3575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3576=cj5*cj5;
IkReal x3577=r01*r01;
IkReal x3578=(cj5*r00);
IkReal x3579=(r01*sj5);
IkReal x3580=((((-2.0)*x3578*x3579))+x3577+(((-1.0)*x3576*x3577))+((x3576*(r00*r00)))+(r02*r02));
j4eval[0]=x3580;
j4eval[1]=IKsign(x3580);
j4eval[2]=((IKabs(r02))+(IKabs((x3579+(((-1.0)*x3578))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3581=cj5*cj5;
IkReal x3582=r01*r01;
IkReal x3583=(r01*sj5);
IkReal x3584=(cj5*r00);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal(r02),IkReal((x3583+(((-1.0)*x3584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign((((x3581*(r00*r00)))+x3582+(((-1.0)*x3581*x3582))+(r02*r02)+(((-2.0)*x3583*x3584)))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKcos(j4);
IkReal x3588=IKsin(j4);
IkReal x3589=(cj5*r00);
IkReal x3590=(cj5*r10);
IkReal x3591=((1.0)*sj1);
IkReal x3592=(cj5*r20);
IkReal x3593=((1.0)*x3587);
IkReal x3594=((1.0)*x3588);
IkReal x3595=(sj5*x3587);
IkReal x3596=(sj5*x3588);
evalcond[0]=(((r21*x3595))+(((-1.0)*x3592*x3593))+((r22*x3588)));
evalcond[1]=(((r12*x3588))+((r11*x3595))+(((-1.0)*x3590*x3593)));
evalcond[2]=((-1.0)+(((-1.0)*x3589*x3593))+((r02*x3588))+((r01*x3595)));
evalcond[3]=((((-1.0)*x3589*x3594))+(((-1.0)*r02*x3593))+((r01*x3596)));
evalcond[4]=(((r11*x3596))+(((-1.0)*x3590*x3594))+(((-1.0)*sj2*x3591))+(((-1.0)*r12*x3593))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x3591))+((r21*x3596))+(((-1.0)*r22*x3593))+(((-1.0)*cj1*sj2))+(((-1.0)*x3592*x3594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3597=((1.0)*cj5);
CheckValue<IkReal> x3598 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3597))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3598.valid){
continue;
}
CheckValue<IkReal> x3599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3597))+(((-1.0)*r20*sj5)))),-1);
if(!x3599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3598.value)+(((1.5707963267949)*(x3599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3600=IKcos(j4);
IkReal x3601=IKsin(j4);
IkReal x3602=(cj5*r00);
IkReal x3603=(cj5*r10);
IkReal x3604=((1.0)*sj1);
IkReal x3605=(cj5*r20);
IkReal x3606=((1.0)*x3600);
IkReal x3607=((1.0)*x3601);
IkReal x3608=(sj5*x3600);
IkReal x3609=(sj5*x3601);
evalcond[0]=(((r22*x3601))+((r21*x3608))+(((-1.0)*x3605*x3606)));
evalcond[1]=(((r11*x3608))+(((-1.0)*x3603*x3606))+((r12*x3601)));
evalcond[2]=((-1.0)+((r02*x3601))+(((-1.0)*x3602*x3606))+((r01*x3608)));
evalcond[3]=((((-1.0)*r02*x3606))+(((-1.0)*x3602*x3607))+((r01*x3609)));
evalcond[4]=(((r11*x3609))+(((-1.0)*r12*x3606))+(((-1.0)*x3603*x3607))+((cj1*cj2))+(((-1.0)*sj2*x3604)));
evalcond[5]=((((-1.0)*cj2*x3604))+(((-1.0)*cj1*sj2))+((r21*x3609))+(((-1.0)*r22*x3606))+(((-1.0)*x3605*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3610 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3610.value)+(((1.5707963267949)*(x3611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3612=IKcos(j4);
IkReal x3613=IKsin(j4);
IkReal x3614=(cj5*r00);
IkReal x3615=(cj5*r10);
IkReal x3616=((1.0)*sj1);
IkReal x3617=(cj5*r20);
IkReal x3618=((1.0)*x3612);
IkReal x3619=((1.0)*x3613);
IkReal x3620=(sj5*x3612);
IkReal x3621=(sj5*x3613);
evalcond[0]=(((r21*x3620))+(((-1.0)*x3617*x3618))+((r22*x3613)));
evalcond[1]=((((-1.0)*x3615*x3618))+((r11*x3620))+((r12*x3613)));
evalcond[2]=((-1.0)+((r02*x3613))+((r01*x3620))+(((-1.0)*x3614*x3618)));
evalcond[3]=(((r01*x3621))+(((-1.0)*r02*x3618))+(((-1.0)*x3614*x3619)));
evalcond[4]=((((-1.0)*r12*x3618))+(((-1.0)*x3615*x3619))+((r11*x3621))+((cj1*cj2))+(((-1.0)*sj2*x3616)));
evalcond[5]=(((r21*x3621))+(((-1.0)*x3617*x3619))+(((-1.0)*cj2*x3616))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3622=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3622;
j4eval[1]=IKsign(x3622);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3623=((1.0)*cj5);
IkReal x3624=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3623)));
j4eval[0]=x3624;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3623)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3625=cj5*cj5;
IkReal x3626=r01*r01;
IkReal x3627=(r01*sj5);
IkReal x3628=(cj5*r00);
IkReal x3629=((((-1.0)*x3625*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3627*x3628))+((x3625*x3626))+(((-1.0)*x3626)));
j4eval[0]=x3629;
j4eval[1]=IKsign(x3629);
j4eval[2]=((IKabs(r02))+(IKabs((x3627+(((-1.0)*x3628))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3630=cj5*cj5;
IkReal x3631=r01*r01;
IkReal x3632=(r01*sj5);
IkReal x3633=(cj5*r00);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(r02),IkReal((x3632+(((-1.0)*x3633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(IKsign(((((2.0)*x3632*x3633))+(((-1.0)*x3630*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x3631))+((x3630*x3631)))),-1);
if(!x3635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3634.value)+(((1.5707963267949)*(x3635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3636=IKcos(j4);
IkReal x3637=IKsin(j4);
IkReal x3638=(cj5*r00);
IkReal x3639=(cj5*r10);
IkReal x3640=((1.0)*cj2);
IkReal x3641=(cj5*r20);
IkReal x3642=((1.0)*x3636);
IkReal x3643=((1.0)*x3637);
IkReal x3644=(sj5*x3636);
IkReal x3645=(sj5*x3637);
evalcond[0]=(((r22*x3637))+((r21*x3644))+(((-1.0)*x3641*x3642)));
evalcond[1]=(((r12*x3637))+((r11*x3644))+(((-1.0)*x3639*x3642)));
evalcond[2]=((1.0)+((r02*x3637))+((r01*x3644))+(((-1.0)*x3638*x3642)));
evalcond[3]=(((r01*x3645))+(((-1.0)*x3638*x3643))+(((-1.0)*r02*x3642)));
evalcond[4]=(((r11*x3645))+((sj1*sj2))+(((-1.0)*r12*x3642))+(((-1.0)*x3639*x3643))+(((-1.0)*cj1*x3640)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r21*x3645))+(((-1.0)*r22*x3642))+(((-1.0)*sj1*x3640))+(((-1.0)*x3641*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3646=((1.0)*cj5);
CheckValue<IkReal> x3647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3646)))),-1);
if(!x3647.valid){
continue;
}
CheckValue<IkReal> x3648 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3646)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3647.value)))+(x3648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3649=IKcos(j4);
IkReal x3650=IKsin(j4);
IkReal x3651=(cj5*r00);
IkReal x3652=(cj5*r10);
IkReal x3653=((1.0)*cj2);
IkReal x3654=(cj5*r20);
IkReal x3655=((1.0)*x3649);
IkReal x3656=((1.0)*x3650);
IkReal x3657=(sj5*x3649);
IkReal x3658=(sj5*x3650);
evalcond[0]=(((r21*x3657))+(((-1.0)*x3654*x3655))+((r22*x3650)));
evalcond[1]=(((r12*x3650))+((r11*x3657))+(((-1.0)*x3652*x3655)));
evalcond[2]=((1.0)+(((-1.0)*x3651*x3655))+((r02*x3650))+((r01*x3657)));
evalcond[3]=((((-1.0)*x3651*x3656))+(((-1.0)*r02*x3655))+((r01*x3658)));
evalcond[4]=(((r11*x3658))+((sj1*sj2))+(((-1.0)*cj1*x3653))+(((-1.0)*r12*x3655))+(((-1.0)*x3652*x3656)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r21*x3658))+(((-1.0)*x3654*x3656))+(((-1.0)*r22*x3655))+(((-1.0)*sj1*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3659=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3659.valid){
continue;
}
CheckValue<IkReal> x3660 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3659.value)))+(x3660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3661=IKcos(j4);
IkReal x3662=IKsin(j4);
IkReal x3663=(cj5*r00);
IkReal x3664=(cj5*r10);
IkReal x3665=((1.0)*cj2);
IkReal x3666=(cj5*r20);
IkReal x3667=((1.0)*x3661);
IkReal x3668=((1.0)*x3662);
IkReal x3669=(sj5*x3661);
IkReal x3670=(sj5*x3662);
evalcond[0]=(((r22*x3662))+(((-1.0)*x3666*x3667))+((r21*x3669)));
evalcond[1]=(((r11*x3669))+((r12*x3662))+(((-1.0)*x3664*x3667)));
evalcond[2]=((1.0)+(((-1.0)*x3663*x3667))+((r01*x3669))+((r02*x3662)));
evalcond[3]=((((-1.0)*x3663*x3668))+((r01*x3670))+(((-1.0)*r02*x3667)));
evalcond[4]=(((r11*x3670))+((sj1*sj2))+(((-1.0)*x3664*x3668))+(((-1.0)*cj1*x3665))+(((-1.0)*r12*x3667)));
evalcond[5]=((((-1.0)*x3666*x3668))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3665))+((r21*x3670))+(((-1.0)*r22*x3667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3671=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3671);
rxp1_1=(px*r21);
rxp1_2=(r11*x3671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3672=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3672);
rxp1_1=(px*r21);
rxp1_2=(r11*x3672);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3673=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3673);
rxp1_1=(px*r21);
rxp1_2=(r11*x3673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3676.valid){
continue;
}
IkReal x3674=x3676.value;
IkReal x3675=(sj0*x3674);
sj4array[0]=((((-1.0)*cj1*cj2*x3675))+((sj1*sj2*x3675)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3677=IKcos(j4);
IkReal x3678=IKsin(j4);
IkReal x3679=(r21*sj5);
IkReal x3680=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x3677);
evalcond[1]=((((-1.0)*sj0))+((r02*x3678)));
evalcond[2]=((((-1.0)*x3677*x3680))+((x3677*x3679)));
evalcond[3]=((((-1.0)*cj5*r10*x3677))+((r11*sj5*x3677)));
evalcond[4]=(((x3678*x3679))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3678*x3680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3682=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3682.valid){
continue;
}
IkReal x3681=x3682.value;
sj4array[0]=(((cj2*sj1*x3681))+((cj1*sj2*x3681)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3683=IKcos(j4);
IkReal x3684=IKsin(j4);
IkReal x3685=((1.0)*sj0);
IkReal x3686=((1.0)*cj5);
IkReal x3687=(sj5*x3683);
evalcond[0]=((-1.0)*r02*x3683);
evalcond[1]=((((-1.0)*x3685))+((r02*x3684)));
evalcond[2]=(((r21*x3687))+(((-1.0)*r20*x3683*x3686)));
evalcond[3]=(((r11*x3687))+(((-1.0)*r10*x3683*x3686)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x3684))+(((-1.0)*r10*x3684*x3686))+(((-1.0)*sj1*sj2*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(r02,-1);
if(!x3688.valid){
continue;
}
sj4array[0]=(sj0*(x3688.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3689=IKcos(j4);
IkReal x3690=IKsin(j4);
IkReal x3691=((1.0)*sj1);
IkReal x3692=(r21*sj5);
IkReal x3693=(r11*sj5);
IkReal x3694=((1.0)*cj5*x3690);
IkReal x3695=((1.0)*cj5*x3689);
evalcond[0]=((-1.0)*r02*x3689);
evalcond[1]=((((-1.0)*r20*x3695))+((x3689*x3692)));
evalcond[2]=(((x3689*x3693))+(((-1.0)*r10*x3695)));
evalcond[3]=((((-1.0)*r20*x3694))+(((-1.0)*cj1*sj2))+((x3690*x3692))+(((-1.0)*cj2*x3691)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x3694))+((x3690*x3693))+(((-1.0)*sj0*sj2*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3696=((1.0)*sj0);
IkReal x3697=((1.0)*cj0);
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x3696))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x3697)))),IkReal(((((-1.0)*r12*x3696))+(((-1.0)*r02*x3697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3698.value)+(((1.5707963267949)*(x3699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3700=IKcos(j4);
IkReal x3701=IKsin(j4);
IkReal x3702=(cj5*r00);
IkReal x3703=(cj1*cj2);
IkReal x3704=(cj5*r10);
IkReal x3705=((1.0)*sj1);
IkReal x3706=(cj5*r20);
IkReal x3707=((1.0)*x3700);
IkReal x3708=((1.0)*x3701);
IkReal x3709=(sj5*x3700);
IkReal x3710=(sj5*x3701);
evalcond[0]=((((-1.0)*x3706*x3707))+((r21*x3709))+((r22*x3701)));
evalcond[1]=(((r12*x3701))+cj0+(((-1.0)*x3704*x3707))+((r11*x3709)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3709))+(((-1.0)*x3702*x3707))+((r02*x3701)));
evalcond[3]=((((-1.0)*cj2*x3705))+(((-1.0)*x3706*x3708))+(((-1.0)*cj1*sj2))+((r21*x3710))+(((-1.0)*r22*x3707)));
evalcond[4]=((((-1.0)*r02*x3707))+(((-1.0)*cj0*sj2*x3705))+((r01*x3710))+((cj0*x3703))+(((-1.0)*x3702*x3708)));
evalcond[5]=(((sj0*x3703))+((r11*x3710))+(((-1.0)*x3704*x3708))+(((-1.0)*sj0*sj2*x3705))+(((-1.0)*r12*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3711 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3711.valid){
continue;
}
CheckValue<IkReal> x3712=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3711.value)+(((1.5707963267949)*(x3712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3713=IKcos(j4);
IkReal x3714=IKsin(j4);
IkReal x3715=(cj5*r00);
IkReal x3716=(cj1*cj2);
IkReal x3717=(cj5*r10);
IkReal x3718=((1.0)*sj1);
IkReal x3719=(cj5*r20);
IkReal x3720=((1.0)*x3713);
IkReal x3721=((1.0)*x3714);
IkReal x3722=(sj5*x3713);
IkReal x3723=(sj5*x3714);
evalcond[0]=((((-1.0)*x3719*x3720))+((r22*x3714))+((r21*x3722)));
evalcond[1]=(cj0+((r12*x3714))+((r11*x3722))+(((-1.0)*x3717*x3720)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3722))+((r02*x3714))+(((-1.0)*x3715*x3720)));
evalcond[3]=((((-1.0)*r22*x3720))+(((-1.0)*cj2*x3718))+(((-1.0)*cj1*sj2))+(((-1.0)*x3719*x3721))+((r21*x3723)));
evalcond[4]=(((r01*x3723))+(((-1.0)*cj0*sj2*x3718))+((cj0*x3716))+(((-1.0)*r02*x3720))+(((-1.0)*x3715*x3721)));
evalcond[5]=((((-1.0)*r12*x3720))+((sj0*x3716))+((r11*x3723))+(((-1.0)*sj0*sj2*x3718))+(((-1.0)*x3717*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
CheckValue<IkReal> x3725=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3724.value)+(((1.5707963267949)*(x3725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3726=IKcos(j4);
IkReal x3727=IKsin(j4);
IkReal x3728=(cj5*r00);
IkReal x3729=(cj1*cj2);
IkReal x3730=(cj5*r10);
IkReal x3731=((1.0)*sj1);
IkReal x3732=(cj5*r20);
IkReal x3733=((1.0)*x3726);
IkReal x3734=((1.0)*x3727);
IkReal x3735=(sj5*x3726);
IkReal x3736=(sj5*x3727);
evalcond[0]=(((r22*x3727))+(((-1.0)*x3732*x3733))+((r21*x3735)));
evalcond[1]=(cj0+((r11*x3735))+(((-1.0)*x3730*x3733))+((r12*x3727)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3735))+((r02*x3727))+(((-1.0)*x3728*x3733)));
evalcond[3]=((((-1.0)*cj2*x3731))+(((-1.0)*cj1*sj2))+(((-1.0)*x3732*x3734))+(((-1.0)*r22*x3733))+((r21*x3736)));
evalcond[4]=(((r01*x3736))+(((-1.0)*cj0*sj2*x3731))+((cj0*x3729))+(((-1.0)*x3728*x3734))+(((-1.0)*r02*x3733)));
evalcond[5]=((((-1.0)*sj0*sj2*x3731))+(((-1.0)*r12*x3733))+((r11*x3736))+((sj0*x3729))+(((-1.0)*x3730*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3737=r21*r21;
IkReal x3738=cj5*cj5;
IkReal x3739=(cj1*sj2);
IkReal x3740=(cj5*r20);
IkReal x3741=(r21*sj5);
IkReal x3742=(cj2*sj1);
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal(((((-1.0)*x3741*x3742))+((x3740*x3742))+(((-1.0)*x3739*x3741))+((x3739*x3740)))),IkReal((((r22*x3739))+((r22*x3742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3738*(r20*r20)))+(((2.0)*x3740*x3741))+(((-1.0)*(r22*r22)))+(((-1.0)*x3737))+((x3737*x3738)))),-1);
if(!x3744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3743.value)+(((1.5707963267949)*(x3744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3745=IKcos(j4);
IkReal x3746=IKsin(j4);
IkReal x3747=(r21*sj5);
IkReal x3748=(cj5*r20);
IkReal x3749=((1.0)*x3745);
evalcond[0]=((((-1.0)*x3748*x3749))+((r22*x3746))+((x3745*x3747)));
evalcond[1]=((((-1.0)*x3746*x3748))+(((-1.0)*r22*x3749))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x3746*x3747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3750=(cj4*cj5);
IkReal x3751=(cj4*sj5);
if( IKabs((((r01*x3751))+((r02*sj4))+(((-1.0)*r00*x3750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3750))+(((-1.0)*r11*x3751))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3751))+((r02*sj4))+(((-1.0)*r00*x3750))))+IKsqr((((r10*x3750))+(((-1.0)*r11*x3751))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x3751))+((r02*sj4))+(((-1.0)*r00*x3750))), (((r10*x3750))+(((-1.0)*r11*x3751))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3752=IKcos(j0);
IkReal x3753=IKsin(j0);
IkReal x3754=(r00*sj5);
IkReal x3755=((1.0)*sj2);
IkReal x3756=(r11*sj5);
IkReal x3757=(cj1*cj2);
IkReal x3758=((0.24)*cj2);
IkReal x3759=(cj1*sj2);
IkReal x3760=((1.0)*cj5);
IkReal x3761=((0.095)*cj5);
IkReal x3762=(r10*sj5);
IkReal x3763=((1.0)*cj4);
IkReal x3764=(r01*sj5);
IkReal x3765=(sj1*x3753);
IkReal x3766=(sj1*x3752);
evalcond[0]=(x3752+((cj4*x3756))+((r12*sj4))+(((-1.0)*cj4*r10*x3760)));
evalcond[1]=((((-1.0)*cj4*r00*x3760))+((r02*sj4))+(((-1.0)*x3753))+((cj4*x3764)));
evalcond[2]=(((cj2*x3766))+((x3752*x3759))+(((-1.0)*x3754))+(((-1.0)*r01*x3760)));
evalcond[3]=((((-1.0)*r11*x3760))+((cj2*x3765))+(((-1.0)*x3762))+((x3753*x3759)));
evalcond[4]=((((-1.0)*x3755*x3766))+((x3752*x3757))+(((-1.0)*r00*sj4*x3760))+(((-1.0)*r02*x3763))+((sj4*x3764)));
evalcond[5]=(((sj4*x3756))+(((-1.0)*x3755*x3765))+(((-1.0)*r10*sj4*x3760))+(((-1.0)*r12*x3763))+((x3753*x3757)));
evalcond[6]=((((-0.11)*x3753))+(((-0.095)*x3754))+((x3758*x3766))+(((-1.0)*px))+(((0.24)*x3752*x3759))+(((-1.0)*r01*x3761))+(((0.265)*x3766)));
evalcond[7]=((((-1.0)*r11*x3761))+(((0.24)*x3753*x3759))+((x3758*x3765))+(((-1.0)*py))+(((-0.095)*x3762))+(((0.265)*x3765))+(((0.11)*x3752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x3767.valid){
continue;
}
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3767.value)))+(x3768.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3769=IKcos(j0);
IkReal x3770=IKsin(j0);
IkReal x3771=(r00*sj5);
IkReal x3772=((0.24)*cj2);
IkReal x3773=(cj5*r11);
IkReal x3774=(r10*sj5);
IkReal x3775=(cj5*r01);
IkReal x3776=(cj1*sj2);
IkReal x3777=(sj1*x3770);
IkReal x3778=(sj1*x3769);
evalcond[0]=(((x3769*x3776))+((cj2*x3778))+(((-1.0)*x3775))+(((-1.0)*x3771)));
evalcond[1]=(((cj2*x3777))+(((-1.0)*x3774))+(((-1.0)*x3773))+((x3770*x3776)));
evalcond[2]=((((-0.11)*x3770))+(((0.24)*x3769*x3776))+(((-1.0)*px))+(((-0.095)*x3771))+(((-0.095)*x3775))+((x3772*x3778))+(((0.265)*x3778)));
evalcond[3]=((((-1.0)*py))+(((-0.095)*x3773))+(((-0.095)*x3774))+(((0.11)*x3769))+((x3772*x3777))+(((0.265)*x3777))+(((0.24)*x3770*x3776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3779=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3779;
j4eval[1]=IKsign(x3779);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3780=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3780;
j4eval[1]=IKsign(x3780);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3781=((1.0)*sj0);
IkReal x3782=((1.0)*cj0);
IkReal x3783=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3783;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x3781))+(((-1.0)*cj5*r00*x3782))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x3782))+(((-1.0)*r12*x3781))))));
j4eval[2]=IKsign(x3783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3784=((-1.0)*r20);
IkReal x3786 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3786)==0){
continue;
}
IkReal x3785=pow(x3786,-0.5);
CheckValue<IkReal> x3787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3784),IKFAST_ATAN2_MAGTHRESH);
if(!x3787.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3787.value));
IkReal gconst97=(r21*x3785);
IkReal gconst98=(x3784*x3785);
CheckValue<IkReal> x3788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3788.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3788.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3789=((-1.0)*r20);
IkReal x3790=x3785;
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3789),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
IkReal x3791=((-1.0)*(x3792.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3791;
IkReal gconst96=x3791;
IkReal gconst97=(r21*x3790);
IkReal gconst98=(x3789*x3790);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3793=((-1.0)*r20);
IkReal x3794=x3785;
CheckValue<IkReal> x3796 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3793),IKFAST_ATAN2_MAGTHRESH);
if(!x3796.valid){
continue;
}
IkReal x3795=((-1.0)*(x3796.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3795;
IkReal gconst96=x3795;
IkReal gconst97=(r21*x3794);
IkReal gconst98=(x3793*x3794);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3797=((-1.0)*r20);
IkReal x3798=x3785;
CheckValue<IkReal> x3800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3797),IKFAST_ATAN2_MAGTHRESH);
if(!x3800.valid){
continue;
}
IkReal x3799=((-1.0)*(x3800.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3799;
IkReal gconst96=x3799;
IkReal gconst97=(r21*x3798);
IkReal gconst98=(x3797*x3798);
IkReal x3801=((1.0)*(r22*r22));
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3801))),-1);
if(!x3805.valid){
continue;
}
IkReal x3802=x3805.value;
IkReal x3803=((1.0)*x3802);
IkReal x3804=((((-2.0)*x3802*(r20*r20)*(r21*r21)))+(((-1.0)*x3803*(r21*r21*r21*r21)))+(((-1.0)*x3801))+(((-1.0)*x3803*(r20*r20*r20*r20))));
j4eval[0]=x3804;
j4eval[1]=IKsign(x3804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3806=(cj2*sj1);
IkReal x3807=(gconst98*r20);
IkReal x3808=(cj1*sj2);
IkReal x3809=((1.0)*gconst97*r21);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(((((-1.0)*x3808*x3809))+((x3807*x3808))+((x3806*x3807))+(((-1.0)*x3806*x3809)))),IkReal((((r22*x3806))+((r22*x3808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r21*x3809))+(((-1.0)*(r22*r22)))+(((2.0)*gconst97*r21*x3807))+(((-1.0)*(x3807*x3807))))),-1);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKcos(j4);
IkReal x3813=IKsin(j4);
IkReal x3814=(gconst98*r10);
IkReal x3815=(gconst97*r21);
IkReal x3816=(gconst98*r20);
IkReal x3817=(cj1*cj2);
IkReal x3818=((1.0)*sj1);
IkReal x3819=(gconst98*r00);
IkReal x3820=((1.0)*x3812);
IkReal x3821=((1.0)*x3813);
IkReal x3822=(gconst97*x3813);
IkReal x3823=(gconst97*x3812);
evalcond[0]=(((r22*x3813))+(((-1.0)*x3816*x3820))+((x3812*x3815)));
evalcond[1]=(((r12*x3813))+cj0+(((-1.0)*x3814*x3820))+((r11*x3823)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3813))+(((-1.0)*x3819*x3820))+((r01*x3823)));
evalcond[3]=((((-1.0)*r22*x3820))+((x3813*x3815))+(((-1.0)*cj2*x3818))+(((-1.0)*cj1*sj2))+(((-1.0)*x3816*x3821)));
evalcond[4]=((((-1.0)*r02*x3820))+((cj0*x3817))+(((-1.0)*x3819*x3821))+(((-1.0)*cj0*sj2*x3818))+((r01*x3822)));
evalcond[5]=((((-1.0)*r12*x3820))+(((-1.0)*sj0*sj2*x3818))+(((-1.0)*x3814*x3821))+((r11*x3822))+((sj0*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3824.value)+(((1.5707963267949)*(x3825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKcos(j4);
IkReal x3827=IKsin(j4);
IkReal x3828=(gconst98*r10);
IkReal x3829=(gconst97*r21);
IkReal x3830=(gconst98*r20);
IkReal x3831=(cj1*cj2);
IkReal x3832=((1.0)*sj1);
IkReal x3833=(gconst98*r00);
IkReal x3834=((1.0)*x3826);
IkReal x3835=((1.0)*x3827);
IkReal x3836=(gconst97*x3827);
IkReal x3837=(gconst97*x3826);
evalcond[0]=(((x3826*x3829))+(((-1.0)*x3830*x3834))+((r22*x3827)));
evalcond[1]=(((r12*x3827))+(((-1.0)*x3828*x3834))+cj0+((r11*x3837)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3833*x3834))+((r01*x3837))+((r02*x3827)));
evalcond[3]=((((-1.0)*x3830*x3835))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3834))+((x3827*x3829))+(((-1.0)*cj2*x3832)));
evalcond[4]=(((cj0*x3831))+(((-1.0)*x3833*x3835))+((r01*x3836))+(((-1.0)*cj0*sj2*x3832))+(((-1.0)*r02*x3834)));
evalcond[5]=((((-1.0)*x3828*x3835))+((sj0*x3831))+(((-1.0)*r12*x3834))+(((-1.0)*sj0*sj2*x3832))+((r11*x3836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
CheckValue<IkReal> x3839=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3838.value)+(((1.5707963267949)*(x3839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3840=IKcos(j4);
IkReal x3841=IKsin(j4);
IkReal x3842=(gconst98*r10);
IkReal x3843=(gconst97*r21);
IkReal x3844=(gconst98*r20);
IkReal x3845=(cj1*cj2);
IkReal x3846=((1.0)*sj1);
IkReal x3847=(gconst98*r00);
IkReal x3848=((1.0)*x3840);
IkReal x3849=((1.0)*x3841);
IkReal x3850=(gconst97*x3841);
IkReal x3851=(gconst97*x3840);
evalcond[0]=((((-1.0)*x3844*x3848))+((x3840*x3843))+((r22*x3841)));
evalcond[1]=(((r12*x3841))+((r11*x3851))+(((-1.0)*x3842*x3848))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r01*x3851))+((r02*x3841))+(((-1.0)*x3847*x3848)));
evalcond[3]=((((-1.0)*x3844*x3849))+((x3841*x3843))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3848))+(((-1.0)*cj2*x3846)));
evalcond[4]=((((-1.0)*r02*x3848))+(((-1.0)*cj0*sj2*x3846))+((r01*x3850))+((cj0*x3845))+(((-1.0)*x3847*x3849)));
evalcond[5]=(((r11*x3850))+(((-1.0)*x3842*x3849))+(((-1.0)*r12*x3848))+(((-1.0)*sj0*sj2*x3846))+((sj0*x3845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3852=((-1.0)*r21);
IkReal x3854 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3854)==0){
continue;
}
IkReal x3853=pow(x3854,-0.5);
CheckValue<IkReal> x3855 = IKatan2WithCheck(IkReal(x3852),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3855.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3855.value))));
IkReal gconst100=(x3852*x3853);
IkReal gconst101=((1.0)*r20*x3853);
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3857=((-1.0)*r21);
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(x3857),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
IkReal x3858=((1.0)*(x3860.value));
IkReal x3859=x3853;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3858)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3858)));
IkReal gconst100=(x3857*x3859);
IkReal gconst101=((1.0)*r20*x3859);
IkReal x3861=r22*r22;
IkReal x3862=((1.0)*x3861);
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(((-1.0)+x3861),-1);
if(!x3866.valid){
continue;
}
IkReal x3863=x3866.value;
if((((1.0)+(((-1.0)*x3862)))) < -0.00001)
continue;
IkReal x3864=IKsqrt(((1.0)+(((-1.0)*x3862))));
IkReal x3865=(cj0*x3863*x3864);
j4eval[0]=((IKabs((x3865+(((-1.0)*x3862*x3865)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3867=((-1.0)*r21);
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal(x3867),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
IkReal x3868=((1.0)*(x3870.value));
IkReal x3869=x3853;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3868)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3868)));
IkReal gconst100=(x3867*x3869);
IkReal gconst101=((1.0)*r20*x3869);
IkReal x3871=r22*r22;
IkReal x3872=((1.0)*x3871);
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(((-1.0)+x3871),-1);
if(!x3876.valid){
continue;
}
IkReal x3873=x3876.value;
if((((1.0)+(((-1.0)*x3872)))) < -0.00001)
continue;
IkReal x3874=IKsqrt(((1.0)+(((-1.0)*x3872))));
IkReal x3875=(sj0*x3873*x3874);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3875+(((-1.0)*x3872*x3875))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3877=((-1.0)*r21);
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal(x3877),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
IkReal x3878=((1.0)*(x3880.value));
IkReal x3879=x3853;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3878)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3878)));
IkReal gconst100=(x3877*x3879);
IkReal gconst101=((1.0)*r20*x3879);
IkReal x3881=r22*r22;
IkReal x3882=((1.0)*r12*sj0);
IkReal x3883=((1.0)*cj0*r02);
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(((-1.0)+x3881),-1);
if(!x3887.valid){
continue;
}
IkReal x3884=x3887.value;
if((((1.0)+(((-1.0)*x3881)))) < -0.00001)
continue;
IkReal x3885=IKsqrt(((1.0)+(((-1.0)*x3881))));
IkReal x3886=(r22*x3884*x3885);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3882))+(((-1.0)*x3883)))))+(IKabs(((((-1.0)*x3883*x3886))+(((-1.0)*x3882*x3886))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3888=((1.0)*sj0);
IkReal x3889=((1.0)*cj0);
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r00*x3889))+((cj0*gconst100*r01))+(((-1.0)*gconst101*r10*x3888))+((gconst100*r11*sj0)))),IkReal(((((-1.0)*r02*x3889))+(((-1.0)*r12*x3888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3890.value)))+(x3891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3892=IKcos(j4);
IkReal x3893=IKsin(j4);
IkReal x3894=(cj1*cj2);
IkReal x3895=(gconst101*r20);
IkReal x3896=(gconst101*r10);
IkReal x3897=((1.0)*sj2);
IkReal x3898=(gconst101*r00);
IkReal x3899=((1.0)*x3892);
IkReal x3900=((1.0)*x3893);
IkReal x3901=(gconst100*x3893);
IkReal x3902=(gconst100*x3892);
evalcond[0]=((((-1.0)*x3895*x3899))+((r22*x3893))+((r21*x3902)));
evalcond[1]=(cj0+(((-1.0)*x3896*x3899))+((r12*x3893))+((r11*x3902)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3898*x3899))+((r01*x3902))+((r02*x3893)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x3899))+(((-1.0)*x3895*x3900))+((r21*x3901))+(((-1.0)*cj1*x3897)));
evalcond[4]=(((cj0*x3894))+(((-1.0)*cj0*sj1*x3897))+((r01*x3901))+(((-1.0)*x3898*x3900))+(((-1.0)*r02*x3899)));
evalcond[5]=(((sj0*x3894))+(((-1.0)*r12*x3899))+(((-1.0)*sj0*sj1*x3897))+((r11*x3901))+(((-1.0)*x3896*x3900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3903.value)+(((1.5707963267949)*(x3904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(cj1*cj2);
IkReal x3908=(gconst101*r20);
IkReal x3909=(gconst101*r10);
IkReal x3910=((1.0)*sj2);
IkReal x3911=(gconst101*r00);
IkReal x3912=((1.0)*x3905);
IkReal x3913=((1.0)*x3906);
IkReal x3914=(gconst100*x3906);
IkReal x3915=(gconst100*x3905);
evalcond[0]=(((r21*x3915))+((r22*x3906))+(((-1.0)*x3908*x3912)));
evalcond[1]=(cj0+(((-1.0)*x3909*x3912))+((r12*x3906))+((r11*x3915)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3911*x3912))+((r01*x3915))+((r02*x3906)));
evalcond[3]=(((r21*x3914))+(((-1.0)*x3908*x3913))+(((-1.0)*r22*x3912))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3910)));
evalcond[4]=((((-1.0)*x3911*x3913))+(((-1.0)*r02*x3912))+(((-1.0)*cj0*sj1*x3910))+((cj0*x3907))+((r01*x3914)));
evalcond[5]=(((sj0*x3907))+(((-1.0)*x3909*x3913))+((r11*x3914))+(((-1.0)*r12*x3912))+(((-1.0)*sj0*sj1*x3910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3916.value)+(((1.5707963267949)*(x3917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3918=IKcos(j4);
IkReal x3919=IKsin(j4);
IkReal x3920=(cj1*cj2);
IkReal x3921=(gconst101*r20);
IkReal x3922=(gconst101*r10);
IkReal x3923=((1.0)*sj2);
IkReal x3924=(gconst101*r00);
IkReal x3925=((1.0)*x3918);
IkReal x3926=((1.0)*x3919);
IkReal x3927=(gconst100*x3919);
IkReal x3928=(gconst100*x3918);
evalcond[0]=(((r21*x3928))+(((-1.0)*x3921*x3925))+((r22*x3919)));
evalcond[1]=(((r11*x3928))+cj0+(((-1.0)*x3922*x3925))+((r12*x3919)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3924*x3925))+((r02*x3919))+((r01*x3928)));
evalcond[3]=((((-1.0)*cj1*x3923))+(((-1.0)*cj2*sj1))+((r21*x3927))+(((-1.0)*x3921*x3926))+(((-1.0)*r22*x3925)));
evalcond[4]=(((cj0*x3920))+(((-1.0)*x3924*x3926))+(((-1.0)*r02*x3925))+(((-1.0)*cj0*sj1*x3923))+((r01*x3927)));
evalcond[5]=(((r11*x3927))+(((-1.0)*sj0*sj1*x3923))+(((-1.0)*x3922*x3926))+(((-1.0)*r12*x3925))+((sj0*x3920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3930 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3930)==0){
continue;
}
IkReal x3929=pow(x3930,-0.5);
CheckValue<IkReal> x3931 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3931.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3931.value));
IkReal gconst103=((-1.0)*r11*x3929);
IkReal gconst104=(r10*x3929);
CheckValue<IkReal> x3932 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3932.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3932.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
IkReal x3933=((-1.0)*(x3935.value));
IkReal x3934=x3929;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3933;
IkReal gconst102=x3933;
IkReal gconst103=((-1.0)*r11*x3934);
IkReal gconst104=(r10*x3934);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3936=((1.0)*sj0);
IkReal x3937=((1.0)*cj0);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r00*x3937))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r10*x3936))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r02*x3937))+(((-1.0)*r12*x3936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
CheckValue<IkReal> x3939=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3938.value)+(((1.5707963267949)*(x3939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3940=IKcos(j4);
IkReal x3941=IKsin(j4);
IkReal x3942=(gconst103*r11);
IkReal x3943=(cj1*cj2);
IkReal x3944=((1.0)*sj1);
IkReal x3945=((1.0)*x3940);
IkReal x3946=(gconst103*x3940);
IkReal x3947=(gconst103*x3941);
IkReal x3948=((1.0)*gconst104*x3941);
evalcond[0]=(((r22*x3941))+(((-1.0)*gconst104*r20*x3945))+((r21*x3946)));
evalcond[1]=(cj0+((x3940*x3942))+(((-1.0)*gconst104*r10*x3945))+((r12*x3941)));
evalcond[2]=(((r01*x3946))+(((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3945))+((r02*x3941)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3945))+(((-1.0)*cj2*x3944))+(((-1.0)*r20*x3948))+((r21*x3947)));
evalcond[4]=(((r01*x3947))+((cj0*x3943))+(((-1.0)*r00*x3948))+(((-1.0)*r02*x3945))+(((-1.0)*cj0*sj2*x3944)));
evalcond[5]=(((sj0*x3943))+((x3941*x3942))+(((-1.0)*sj0*sj2*x3944))+(((-1.0)*r10*x3948))+(((-1.0)*r12*x3945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3949=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3949.valid){
continue;
}
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3949.value)))+(x3950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3951=IKcos(j4);
IkReal x3952=IKsin(j4);
IkReal x3953=(gconst103*r11);
IkReal x3954=(cj1*cj2);
IkReal x3955=((1.0)*sj1);
IkReal x3956=((1.0)*x3951);
IkReal x3957=(gconst103*x3951);
IkReal x3958=(gconst103*x3952);
IkReal x3959=((1.0)*gconst104*x3952);
evalcond[0]=(((r21*x3957))+(((-1.0)*gconst104*r20*x3956))+((r22*x3952)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x3956))+((x3951*x3953))+((r12*x3952)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3957))+(((-1.0)*gconst104*r00*x3956))+((r02*x3952)));
evalcond[3]=(((r21*x3958))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3956))+(((-1.0)*cj2*x3955))+(((-1.0)*r20*x3959)));
evalcond[4]=((((-1.0)*cj0*sj2*x3955))+((r01*x3958))+((cj0*x3954))+(((-1.0)*r00*x3959))+(((-1.0)*r02*x3956)));
evalcond[5]=(((sj0*x3954))+(((-1.0)*r12*x3956))+(((-1.0)*sj0*sj2*x3955))+((x3952*x3953))+(((-1.0)*r10*x3959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3961 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3961)==0){
continue;
}
IkReal x3960=pow(x3961,-0.5);
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3962.value))));
IkReal gconst106=((1.0)*r11*x3960);
IkReal gconst107=((-1.0)*r10*x3960);
CheckValue<IkReal> x3963 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3963.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3963.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3966 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3966.valid){
continue;
}
IkReal x3964=((1.0)*(x3966.value));
IkReal x3965=x3960;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3964)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3964)));
IkReal gconst106=((1.0)*r11*x3965);
IkReal gconst107=((-1.0)*r10*x3965);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
IkReal x3967=((1.0)*(x3969.value));
IkReal x3968=x3960;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3967)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3967)));
IkReal gconst106=((1.0)*r11*x3968);
IkReal gconst107=((-1.0)*r10*x3968);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
IkReal x3970=((1.0)*(x3972.value));
IkReal x3971=x3960;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3970)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3970)));
IkReal gconst106=((1.0)*r11*x3971);
IkReal gconst107=((-1.0)*r10*x3971);
IkReal x3973=r12*r12;
IkReal x3974=((1.0)*sj0);
IkReal x3975=(cj0*r02);
IkReal x3976=x3960;
j4eval[0]=((IKabs((((sj0*x3973*x3976))+(((-1.0)*x3974*x3976))+((r12*x3975*x3976)))))+(IKabs(((((-1.0)*r12*x3974))+(((-1.0)*x3975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3977=((1.0)*sj0);
IkReal x3978=((1.0)*gconst107);
CheckValue<IkReal> x3979 = IKatan2WithCheck(IkReal((((cj0*gconst106*r01))+(((-1.0)*gconst107*r10*x3977))+(((-1.0)*cj0*r00*x3978))+((gconst106*r11*sj0)))),IkReal(((((-1.0)*r12*x3977))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3979.valid){
continue;
}
CheckValue<IkReal> x3980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3978))+(((-1.0)*gconst106*r20)))),-1);
if(!x3980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3979.value)+(((1.5707963267949)*(x3980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3981=IKcos(j4);
IkReal x3982=IKsin(j4);
IkReal x3983=(cj1*cj2);
IkReal x3984=(gconst107*r10);
IkReal x3985=(gconst107*r00);
IkReal x3986=(gconst107*r20);
IkReal x3987=((1.0)*sj1);
IkReal x3988=((1.0)*x3981);
IkReal x3989=(gconst106*x3981);
IkReal x3990=(gconst106*x3982);
IkReal x3991=((1.0)*x3982);
evalcond[0]=(((r21*x3989))+(((-1.0)*x3986*x3988))+((r22*x3982)));
evalcond[1]=(((r11*x3989))+cj0+(((-1.0)*x3984*x3988))+((r12*x3982)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3985*x3988))+((r01*x3989))+((r02*x3982)));
evalcond[3]=((((-1.0)*cj2*x3987))+(((-1.0)*r22*x3988))+(((-1.0)*cj1*sj2))+((r21*x3990))+(((-1.0)*x3986*x3991)));
evalcond[4]=((((-1.0)*x3985*x3991))+((cj0*x3983))+((r01*x3990))+(((-1.0)*cj0*sj2*x3987))+(((-1.0)*r02*x3988)));
evalcond[5]=((((-1.0)*r12*x3988))+(((-1.0)*sj0*sj2*x3987))+((sj0*x3983))+(((-1.0)*x3984*x3991))+((r11*x3990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3992=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3992.value)))+(x3993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKcos(j4);
IkReal x3995=IKsin(j4);
IkReal x3996=(cj1*cj2);
IkReal x3997=(gconst107*r10);
IkReal x3998=(gconst107*r00);
IkReal x3999=(gconst107*r20);
IkReal x4000=((1.0)*sj1);
IkReal x4001=((1.0)*x3994);
IkReal x4002=(gconst106*x3994);
IkReal x4003=(gconst106*x3995);
IkReal x4004=((1.0)*x3995);
evalcond[0]=((((-1.0)*x3999*x4001))+((r22*x3995))+((r21*x4002)));
evalcond[1]=(cj0+((r12*x3995))+(((-1.0)*x3997*x4001))+((r11*x4002)));
evalcond[2]=((((-1.0)*x3998*x4001))+(((-1.0)*sj0))+((r01*x4002))+((r02*x3995)));
evalcond[3]=((((-1.0)*r22*x4001))+(((-1.0)*x3999*x4004))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4000))+((r21*x4003)));
evalcond[4]=((((-1.0)*x3998*x4004))+(((-1.0)*r02*x4001))+((r01*x4003))+(((-1.0)*cj0*sj2*x4000))+((cj0*x3996)));
evalcond[5]=((((-1.0)*x3997*x4004))+(((-1.0)*r12*x4001))+((sj0*x3996))+(((-1.0)*sj0*sj2*x4000))+((r11*x4003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4005.valid){
continue;
}
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4005.value)))+(x4006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4007=IKcos(j4);
IkReal x4008=IKsin(j4);
IkReal x4009=(cj1*cj2);
IkReal x4010=(gconst107*r10);
IkReal x4011=(gconst107*r00);
IkReal x4012=(gconst107*r20);
IkReal x4013=((1.0)*sj1);
IkReal x4014=((1.0)*x4007);
IkReal x4015=(gconst106*x4007);
IkReal x4016=(gconst106*x4008);
IkReal x4017=((1.0)*x4008);
evalcond[0]=((((-1.0)*x4012*x4014))+((r22*x4008))+((r21*x4015)));
evalcond[1]=(((r12*x4008))+cj0+((r11*x4015))+(((-1.0)*x4010*x4014)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4011*x4014))+((r01*x4015))+((r02*x4008)));
evalcond[3]=((((-1.0)*x4012*x4017))+(((-1.0)*r22*x4014))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4013))+((r21*x4016)));
evalcond[4]=(((cj0*x4009))+(((-1.0)*x4011*x4017))+(((-1.0)*r02*x4014))+((r01*x4016))+(((-1.0)*cj0*sj2*x4013)));
evalcond[5]=((((-1.0)*r12*x4014))+((sj0*x4009))+((r11*x4016))+(((-1.0)*x4010*x4017))+(((-1.0)*sj0*sj2*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4018=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4018;
j4eval[1]=IKsign(x4018);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4019=((1.0)*cj5);
IkReal x4020=((((-1.0)*r21*x4019))+(((-1.0)*r20*sj5)));
j4eval[0]=x4020;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x4019)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4020);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4021=cj5*cj5;
IkReal x4022=r11*r11;
IkReal x4023=(cj5*r10);
IkReal x4024=(r11*sj5);
IkReal x4025=(((x4021*x4022))+(((-1.0)*x4021*(r10*r10)))+(((-1.0)*x4022))+(((2.0)*x4023*x4024))+(((-1.0)*(r12*r12))));
j4eval[0]=x4025;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4023))+x4024))));
j4eval[2]=IKsign(x4025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4026=cj5*cj5;
IkReal x4027=r11*r11;
IkReal x4028=(cj5*r10);
IkReal x4029=(r11*sj5);
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4028))+x4029)),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
CheckValue<IkReal> x4031=IKPowWithIntegerCheck(IKsign(((((2.0)*x4028*x4029))+(((-1.0)*x4026*(r10*r10)))+(((-1.0)*x4027))+(((-1.0)*(r12*r12)))+((x4026*x4027)))),-1);
if(!x4031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4030.value)+(((1.5707963267949)*(x4031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4032=IKcos(j4);
IkReal x4033=IKsin(j4);
IkReal x4034=(cj5*r00);
IkReal x4035=(cj5*r10);
IkReal x4036=((1.0)*sj1);
IkReal x4037=(cj5*r20);
IkReal x4038=((1.0)*x4032);
IkReal x4039=((1.0)*x4033);
IkReal x4040=(sj5*x4032);
IkReal x4041=(sj5*x4033);
evalcond[0]=((((-1.0)*x4037*x4038))+((r21*x4040))+((r22*x4033)));
evalcond[1]=((((-1.0)*x4034*x4038))+((r02*x4033))+((r01*x4040)));
evalcond[2]=((1.0)+((r11*x4040))+(((-1.0)*x4035*x4038))+((r12*x4033)));
evalcond[3]=((((-1.0)*r12*x4038))+((r11*x4041))+(((-1.0)*x4035*x4039)));
evalcond[4]=((((-1.0)*x4034*x4039))+((r01*x4041))+((cj1*cj2))+(((-1.0)*r02*x4038))+(((-1.0)*sj2*x4036)));
evalcond[5]=((((-1.0)*x4037*x4039))+(((-1.0)*r22*x4038))+((r21*x4041))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4042=((1.0)*cj5);
CheckValue<IkReal> x4043=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4042))+(((-1.0)*r20*sj5)))),-1);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x4042)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4043.value)))+(x4044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4045=IKcos(j4);
IkReal x4046=IKsin(j4);
IkReal x4047=(cj5*r00);
IkReal x4048=(cj5*r10);
IkReal x4049=((1.0)*sj1);
IkReal x4050=(cj5*r20);
IkReal x4051=((1.0)*x4045);
IkReal x4052=((1.0)*x4046);
IkReal x4053=(sj5*x4045);
IkReal x4054=(sj5*x4046);
evalcond[0]=(((r22*x4046))+(((-1.0)*x4050*x4051))+((r21*x4053)));
evalcond[1]=(((r02*x4046))+(((-1.0)*x4047*x4051))+((r01*x4053)));
evalcond[2]=((1.0)+((r11*x4053))+((r12*x4046))+(((-1.0)*x4048*x4051)));
evalcond[3]=((((-1.0)*r12*x4051))+((r11*x4054))+(((-1.0)*x4048*x4052)));
evalcond[4]=((((-1.0)*sj2*x4049))+(((-1.0)*x4047*x4052))+((cj1*cj2))+(((-1.0)*r02*x4051))+((r01*x4054)));
evalcond[5]=((((-1.0)*x4050*x4052))+(((-1.0)*cj2*x4049))+((r21*x4054))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKcos(j4);
IkReal x4058=IKsin(j4);
IkReal x4059=(cj5*r00);
IkReal x4060=(cj5*r10);
IkReal x4061=((1.0)*sj1);
IkReal x4062=(cj5*r20);
IkReal x4063=((1.0)*x4057);
IkReal x4064=((1.0)*x4058);
IkReal x4065=(sj5*x4057);
IkReal x4066=(sj5*x4058);
evalcond[0]=(((r21*x4065))+(((-1.0)*x4062*x4063))+((r22*x4058)));
evalcond[1]=(((r02*x4058))+(((-1.0)*x4059*x4063))+((r01*x4065)));
evalcond[2]=((1.0)+(((-1.0)*x4060*x4063))+((r11*x4065))+((r12*x4058)));
evalcond[3]=((((-1.0)*x4060*x4064))+(((-1.0)*r12*x4063))+((r11*x4066)));
evalcond[4]=((((-1.0)*x4059*x4064))+((cj1*cj2))+(((-1.0)*r02*x4063))+((r01*x4066))+(((-1.0)*sj2*x4061)));
evalcond[5]=((((-1.0)*cj2*x4061))+((r21*x4066))+(((-1.0)*cj1*sj2))+(((-1.0)*x4062*x4064))+(((-1.0)*r22*x4063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4067=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4067;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4068=((1.0)*cj5);
IkReal x4069=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4068)));
j4eval[0]=x4069;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4068))+((r21*sj5))))));
j4eval[2]=IKsign(x4069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4070=cj5*cj5;
IkReal x4071=r11*r11;
IkReal x4072=(r11*sj5);
IkReal x4073=(cj5*r10);
IkReal x4074=(((x4070*(r10*r10)))+(r12*r12)+x4071+(((-1.0)*x4070*x4071))+(((-2.0)*x4072*x4073)));
j4eval[0]=x4074;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4073))+x4072))));
j4eval[2]=IKsign(x4074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4075=cj5*cj5;
IkReal x4076=r11*r11;
IkReal x4077=(cj5*r10);
IkReal x4078=(r11*sj5);
CheckValue<IkReal> x4079 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4077))+x4078)),IKFAST_ATAN2_MAGTHRESH);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4075*x4076))+((x4075*(r10*r10)))+(r12*r12)+(((-2.0)*x4077*x4078))+x4076)),-1);
if(!x4080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4079.value)+(((1.5707963267949)*(x4080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j4);
IkReal x4082=IKsin(j4);
IkReal x4083=(cj5*r00);
IkReal x4084=(cj5*r10);
IkReal x4085=((1.0)*cj2);
IkReal x4086=(cj5*r20);
IkReal x4087=((1.0)*x4081);
IkReal x4088=((1.0)*x4082);
IkReal x4089=(sj5*x4081);
IkReal x4090=(sj5*x4082);
evalcond[0]=(((r21*x4089))+(((-1.0)*x4086*x4087))+((r22*x4082)));
evalcond[1]=(((r01*x4089))+(((-1.0)*x4083*x4087))+((r02*x4082)));
evalcond[2]=((-1.0)+((r12*x4082))+((r11*x4089))+(((-1.0)*x4084*x4087)));
evalcond[3]=((((-1.0)*r12*x4087))+((r11*x4090))+(((-1.0)*x4084*x4088)));
evalcond[4]=(((r01*x4090))+(((-1.0)*r02*x4087))+((sj1*sj2))+(((-1.0)*x4083*x4088))+(((-1.0)*cj1*x4085)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r21*x4090))+(((-1.0)*sj1*x4085))+(((-1.0)*x4086*x4088))+(((-1.0)*r22*x4087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4091=((1.0)*cj5);
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4091)))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4091))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4092.value)))+(x4093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4094=IKcos(j4);
IkReal x4095=IKsin(j4);
IkReal x4096=(cj5*r00);
IkReal x4097=(cj5*r10);
IkReal x4098=((1.0)*cj2);
IkReal x4099=(cj5*r20);
IkReal x4100=((1.0)*x4094);
IkReal x4101=((1.0)*x4095);
IkReal x4102=(sj5*x4094);
IkReal x4103=(sj5*x4095);
evalcond[0]=(((r22*x4095))+((r21*x4102))+(((-1.0)*x4099*x4100)));
evalcond[1]=((((-1.0)*x4096*x4100))+((r02*x4095))+((r01*x4102)));
evalcond[2]=((-1.0)+((r12*x4095))+((r11*x4102))+(((-1.0)*x4097*x4100)));
evalcond[3]=((((-1.0)*r12*x4100))+((r11*x4103))+(((-1.0)*x4097*x4101)));
evalcond[4]=((((-1.0)*x4096*x4101))+((sj1*sj2))+(((-1.0)*cj1*x4098))+((r01*x4103))+(((-1.0)*r02*x4100)));
evalcond[5]=((((-1.0)*r22*x4100))+(((-1.0)*sj1*x4098))+(((-1.0)*cj1*sj2))+((r21*x4103))+(((-1.0)*x4099*x4101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4104=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4104.valid){
continue;
}
CheckValue<IkReal> x4105 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4104.value)))+(x4105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4106=IKcos(j4);
IkReal x4107=IKsin(j4);
IkReal x4108=(cj5*r00);
IkReal x4109=(cj5*r10);
IkReal x4110=((1.0)*cj2);
IkReal x4111=(cj5*r20);
IkReal x4112=((1.0)*x4106);
IkReal x4113=((1.0)*x4107);
IkReal x4114=(sj5*x4106);
IkReal x4115=(sj5*x4107);
evalcond[0]=(((r21*x4114))+((r22*x4107))+(((-1.0)*x4111*x4112)));
evalcond[1]=((((-1.0)*x4108*x4112))+((r02*x4107))+((r01*x4114)));
evalcond[2]=((-1.0)+(((-1.0)*x4109*x4112))+((r12*x4107))+((r11*x4114)));
evalcond[3]=((((-1.0)*x4109*x4113))+(((-1.0)*r12*x4112))+((r11*x4115)));
evalcond[4]=((((-1.0)*cj1*x4110))+((sj1*sj2))+(((-1.0)*x4108*x4113))+(((-1.0)*r02*x4112))+((r01*x4115)));
evalcond[5]=(((r21*x4115))+(((-1.0)*r22*x4112))+(((-1.0)*x4111*x4113))+(((-1.0)*sj1*x4110))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4117 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4117)==0){
continue;
}
IkReal x4116=pow(x4117,-0.5);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4118.value));
IkReal gconst109=((-1.0)*r01*x4116);
IkReal gconst110=(r00*x4116);
CheckValue<IkReal> x4119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4119.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4119.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
IkReal x4120=((-1.0)*(x4122.value));
IkReal x4121=x4116;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4120;
IkReal gconst108=x4120;
IkReal gconst109=((-1.0)*r01*x4121);
IkReal gconst110=(r00*x4121);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4123=((1.0)*sj0);
IkReal x4124=((1.0)*gconst110);
CheckValue<IkReal> x4125 = IKatan2WithCheck(IkReal(((((-1.0)*gconst110*r10*x4123))+((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4124))+((gconst109*r11*sj0)))),IkReal(((((-1.0)*r12*x4123))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4125.valid){
continue;
}
CheckValue<IkReal> x4126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4124)))),-1);
if(!x4126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4125.value)+(((1.5707963267949)*(x4126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4127=IKcos(j4);
IkReal x4128=IKsin(j4);
IkReal x4129=((1.0)*sj2);
IkReal x4130=(cj1*cj2);
IkReal x4131=(gconst109*r21);
IkReal x4132=((1.0)*x4127);
IkReal x4133=(gconst109*x4128);
IkReal x4134=(gconst109*x4127);
IkReal x4135=((1.0)*gconst110*x4128);
evalcond[0]=((((-1.0)*gconst110*r20*x4132))+((x4127*x4131))+((r22*x4128)));
evalcond[1]=(((r12*x4128))+cj0+((r11*x4134))+(((-1.0)*gconst110*r10*x4132)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4128))+((r01*x4134))+(((-1.0)*gconst110*r00*x4132)));
evalcond[3]=((((-1.0)*r20*x4135))+(((-1.0)*cj1*x4129))+(((-1.0)*cj2*sj1))+((x4128*x4131))+(((-1.0)*r22*x4132)));
evalcond[4]=((((-1.0)*cj0*sj1*x4129))+((r01*x4133))+(((-1.0)*r02*x4132))+(((-1.0)*r00*x4135))+((cj0*x4130)));
evalcond[5]=(((r11*x4133))+((sj0*x4130))+(((-1.0)*r12*x4132))+(((-1.0)*sj0*sj1*x4129))+(((-1.0)*r10*x4135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4136.valid){
continue;
}
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4136.value)))+(x4137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4138=IKcos(j4);
IkReal x4139=IKsin(j4);
IkReal x4140=((1.0)*sj2);
IkReal x4141=(cj1*cj2);
IkReal x4142=(gconst109*r21);
IkReal x4143=((1.0)*x4138);
IkReal x4144=(gconst109*x4139);
IkReal x4145=(gconst109*x4138);
IkReal x4146=((1.0)*gconst110*x4139);
evalcond[0]=(((r22*x4139))+((x4138*x4142))+(((-1.0)*gconst110*r20*x4143)));
evalcond[1]=(cj0+((r11*x4145))+((r12*x4139))+(((-1.0)*gconst110*r10*x4143)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4145))+(((-1.0)*gconst110*r00*x4143))+((r02*x4139)));
evalcond[3]=(((x4139*x4142))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4140))+(((-1.0)*r22*x4143))+(((-1.0)*r20*x4146)));
evalcond[4]=(((r01*x4144))+(((-1.0)*r02*x4143))+((cj0*x4141))+(((-1.0)*r00*x4146))+(((-1.0)*cj0*sj1*x4140)));
evalcond[5]=(((sj0*x4141))+(((-1.0)*sj0*sj1*x4140))+((r11*x4144))+(((-1.0)*r10*x4146))+(((-1.0)*r12*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4148 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4148)==0){
continue;
}
IkReal x4147=pow(x4148,-0.5);
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4149.value))));
IkReal gconst112=((1.0)*r01*x4147);
IkReal gconst113=((-1.0)*r00*x4147);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4150.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4153 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4153.valid){
continue;
}
IkReal x4151=((1.0)*(x4153.value));
IkReal x4152=x4147;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4151)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4151)));
IkReal gconst112=((1.0)*r01*x4152);
IkReal gconst113=((-1.0)*r00*x4152);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4156 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4156.valid){
continue;
}
IkReal x4154=((1.0)*(x4156.value));
IkReal x4155=x4147;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4154)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4154)));
IkReal gconst112=((1.0)*r01*x4155);
IkReal gconst113=((-1.0)*r00*x4155);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4159 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4159.valid){
continue;
}
IkReal x4157=((1.0)*(x4159.value));
IkReal x4158=x4147;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4157)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4157)));
IkReal gconst112=((1.0)*r01*x4158);
IkReal gconst113=((-1.0)*r00*x4158);
IkReal x4160=r02*r02;
IkReal x4161=(r12*sj0);
IkReal x4162=((1.0)*cj0);
IkReal x4163=x4147;
j4eval[0]=((IKabs(((((-1.0)*r02*x4162))+(((-1.0)*x4161)))))+(IKabs(((((-1.0)*x4162*x4163))+((cj0*x4160*x4163))+((r02*x4161*x4163))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4164=((1.0)*sj0);
IkReal x4165=((1.0)*cj0);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x4164))+((gconst112*r11*sj0))+(((-1.0)*gconst113*r00*x4165)))),IkReal(((((-1.0)*r02*x4165))+(((-1.0)*r12*x4164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x4167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4166.value)+(((1.5707963267949)*(x4167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4168=IKcos(j4);
IkReal x4169=IKsin(j4);
IkReal x4170=(cj1*cj2);
IkReal x4171=(gconst113*r20);
IkReal x4172=(gconst112*r21);
IkReal x4173=(gconst113*r00);
IkReal x4174=((1.0)*sj1);
IkReal x4175=(gconst113*r10);
IkReal x4176=((1.0)*x4168);
IkReal x4177=((1.0)*x4169);
IkReal x4178=(gconst112*x4168);
IkReal x4179=(gconst112*x4169);
evalcond[0]=(((r22*x4169))+(((-1.0)*x4171*x4176))+((x4168*x4172)));
evalcond[1]=(((r11*x4178))+cj0+(((-1.0)*x4175*x4176))+((r12*x4169)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4169))+(((-1.0)*x4173*x4176))+((r01*x4178)));
evalcond[3]=(((x4169*x4172))+(((-1.0)*x4171*x4177))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4176))+(((-1.0)*cj2*x4174)));
evalcond[4]=(((cj0*x4170))+(((-1.0)*cj0*sj2*x4174))+(((-1.0)*x4173*x4177))+((r01*x4179))+(((-1.0)*r02*x4176)));
evalcond[5]=(((r11*x4179))+((sj0*x4170))+(((-1.0)*x4175*x4177))+(((-1.0)*sj0*sj2*x4174))+(((-1.0)*r12*x4176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4180 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4180.value)+(((1.5707963267949)*(x4181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4182=IKcos(j4);
IkReal x4183=IKsin(j4);
IkReal x4184=(cj1*cj2);
IkReal x4185=(gconst113*r20);
IkReal x4186=(gconst112*r21);
IkReal x4187=(gconst113*r00);
IkReal x4188=((1.0)*sj1);
IkReal x4189=(gconst113*r10);
IkReal x4190=((1.0)*x4182);
IkReal x4191=((1.0)*x4183);
IkReal x4192=(gconst112*x4182);
IkReal x4193=(gconst112*x4183);
evalcond[0]=(((r22*x4183))+(((-1.0)*x4185*x4190))+((x4182*x4186)));
evalcond[1]=(((r12*x4183))+((r11*x4192))+cj0+(((-1.0)*x4189*x4190)));
evalcond[2]=(((r02*x4183))+(((-1.0)*sj0))+(((-1.0)*x4187*x4190))+((r01*x4192)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x4183*x4186))+(((-1.0)*x4185*x4191))+(((-1.0)*cj2*x4188))+(((-1.0)*r22*x4190)));
evalcond[4]=((((-1.0)*cj0*sj2*x4188))+(((-1.0)*x4187*x4191))+(((-1.0)*r02*x4190))+((r01*x4193))+((cj0*x4184)));
evalcond[5]=((((-1.0)*r12*x4190))+((r11*x4193))+((sj0*x4184))+(((-1.0)*sj0*sj2*x4188))+(((-1.0)*x4189*x4191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4194 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4194.valid){
continue;
}
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4194.value)+(((1.5707963267949)*(x4195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4196=IKcos(j4);
IkReal x4197=IKsin(j4);
IkReal x4198=(cj1*cj2);
IkReal x4199=(gconst113*r20);
IkReal x4200=(gconst112*r21);
IkReal x4201=(gconst113*r00);
IkReal x4202=((1.0)*sj1);
IkReal x4203=(gconst113*r10);
IkReal x4204=((1.0)*x4196);
IkReal x4205=((1.0)*x4197);
IkReal x4206=(gconst112*x4196);
IkReal x4207=(gconst112*x4197);
evalcond[0]=(((x4196*x4200))+((r22*x4197))+(((-1.0)*x4199*x4204)));
evalcond[1]=(((r11*x4206))+((r12*x4197))+cj0+(((-1.0)*x4203*x4204)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4197))+(((-1.0)*x4201*x4204))+((r01*x4206)));
evalcond[3]=((((-1.0)*cj2*x4202))+(((-1.0)*r22*x4204))+(((-1.0)*cj1*sj2))+(((-1.0)*x4199*x4205))+((x4197*x4200)));
evalcond[4]=(((cj0*x4198))+(((-1.0)*r02*x4204))+(((-1.0)*x4201*x4205))+((r01*x4207))+(((-1.0)*cj0*sj2*x4202)));
evalcond[5]=(((r11*x4207))+(((-1.0)*r12*x4204))+((sj0*x4198))+(((-1.0)*sj0*sj2*x4202))+(((-1.0)*x4203*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4208=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4208;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4209=((1.0)*cj5);
IkReal x4210=((((-1.0)*r21*x4209))+(((-1.0)*r20*sj5)));
j4eval[0]=x4210;
j4eval[1]=((IKabs(((((-1.0)*r10*x4209))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4211=cj5*cj5;
IkReal x4212=r01*r01;
IkReal x4213=(cj5*r00);
IkReal x4214=(r01*sj5);
IkReal x4215=(((x4211*(r00*r00)))+(((-1.0)*x4211*x4212))+(((-2.0)*x4213*x4214))+x4212+(r02*r02));
j4eval[0]=x4215;
j4eval[1]=IKsign(x4215);
j4eval[2]=((IKabs(r02))+(IKabs((x4214+(((-1.0)*x4213))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4216=cj5*cj5;
IkReal x4217=r01*r01;
IkReal x4218=(r01*sj5);
IkReal x4219=(cj5*r00);
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(IKsign((((x4216*(r00*r00)))+(((-2.0)*x4218*x4219))+(((-1.0)*x4216*x4217))+x4217+(r02*r02))),-1);
if(!x4220.valid){
continue;
}
CheckValue<IkReal> x4221 = IKatan2WithCheck(IkReal(r02),IkReal((x4218+(((-1.0)*x4219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4220.value)))+(x4221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4222=IKcos(j4);
IkReal x4223=IKsin(j4);
IkReal x4224=(cj5*r00);
IkReal x4225=(cj5*r10);
IkReal x4226=((1.0)*sj1);
IkReal x4227=(cj5*r20);
IkReal x4228=((1.0)*x4222);
IkReal x4229=((1.0)*x4223);
IkReal x4230=(sj5*x4222);
IkReal x4231=(sj5*x4223);
evalcond[0]=((((-1.0)*x4227*x4228))+((r22*x4223))+((r21*x4230)));
evalcond[1]=((((-1.0)*x4225*x4228))+((r11*x4230))+((r12*x4223)));
evalcond[2]=((-1.0)+(((-1.0)*x4224*x4228))+((r01*x4230))+((r02*x4223)));
evalcond[3]=((((-1.0)*x4224*x4229))+((r01*x4231))+(((-1.0)*r02*x4228)));
evalcond[4]=((((-1.0)*sj2*x4226))+(((-1.0)*r12*x4228))+((cj1*cj2))+(((-1.0)*x4225*x4229))+((r11*x4231)));
evalcond[5]=((((-1.0)*cj2*x4226))+(((-1.0)*x4227*x4229))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4228))+((r21*x4231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4232=((1.0)*cj5);
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4232)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4232))+(((-1.0)*r20*sj5)))),-1);
if(!x4234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4233.value)+(((1.5707963267949)*(x4234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4235=IKcos(j4);
IkReal x4236=IKsin(j4);
IkReal x4237=(cj5*r00);
IkReal x4238=(cj5*r10);
IkReal x4239=((1.0)*sj1);
IkReal x4240=(cj5*r20);
IkReal x4241=((1.0)*x4235);
IkReal x4242=((1.0)*x4236);
IkReal x4243=(sj5*x4235);
IkReal x4244=(sj5*x4236);
evalcond[0]=((((-1.0)*x4240*x4241))+((r22*x4236))+((r21*x4243)));
evalcond[1]=(((r12*x4236))+(((-1.0)*x4238*x4241))+((r11*x4243)));
evalcond[2]=((-1.0)+((r01*x4243))+((r02*x4236))+(((-1.0)*x4237*x4241)));
evalcond[3]=(((r01*x4244))+(((-1.0)*x4237*x4242))+(((-1.0)*r02*x4241)));
evalcond[4]=((((-1.0)*sj2*x4239))+(((-1.0)*r12*x4241))+(((-1.0)*x4238*x4242))+((cj1*cj2))+((r11*x4244)));
evalcond[5]=((((-1.0)*x4240*x4242))+(((-1.0)*r22*x4241))+(((-1.0)*cj1*sj2))+((r21*x4244))+(((-1.0)*cj2*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4245 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4245.valid){
continue;
}
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4245.value)+(((1.5707963267949)*(x4246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4247=IKcos(j4);
IkReal x4248=IKsin(j4);
IkReal x4249=(cj5*r00);
IkReal x4250=(cj5*r10);
IkReal x4251=((1.0)*sj1);
IkReal x4252=(cj5*r20);
IkReal x4253=((1.0)*x4247);
IkReal x4254=((1.0)*x4248);
IkReal x4255=(sj5*x4247);
IkReal x4256=(sj5*x4248);
evalcond[0]=((((-1.0)*x4252*x4253))+((r22*x4248))+((r21*x4255)));
evalcond[1]=(((r11*x4255))+((r12*x4248))+(((-1.0)*x4250*x4253)));
evalcond[2]=((-1.0)+((r01*x4255))+((r02*x4248))+(((-1.0)*x4249*x4253)));
evalcond[3]=(((r01*x4256))+(((-1.0)*x4249*x4254))+(((-1.0)*r02*x4253)));
evalcond[4]=((((-1.0)*sj2*x4251))+((r11*x4256))+((cj1*cj2))+(((-1.0)*x4250*x4254))+(((-1.0)*r12*x4253)));
evalcond[5]=((((-1.0)*x4252*x4254))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4251))+(((-1.0)*r22*x4253))+((r21*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4257=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4257;
j4eval[1]=IKsign(x4257);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4258=((1.0)*cj5);
IkReal x4259=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4258)));
j4eval[0]=x4259;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4258)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4260=cj5*cj5;
IkReal x4261=r01*r01;
IkReal x4262=(r01*sj5);
IkReal x4263=(cj5*r00);
IkReal x4264=((((-1.0)*(r02*r02)))+(((2.0)*x4262*x4263))+(((-1.0)*x4260*(r00*r00)))+((x4260*x4261))+(((-1.0)*x4261)));
j4eval[0]=x4264;
j4eval[1]=IKsign(x4264);
j4eval[2]=((IKabs(r02))+(IKabs((x4262+(((-1.0)*x4263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4265=cj5*cj5;
IkReal x4266=r01*r01;
IkReal x4267=(r01*sj5);
IkReal x4268=(cj5*r00);
CheckValue<IkReal> x4269=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4265*(r00*r00)))+((x4265*x4266))+(((2.0)*x4267*x4268))+(((-1.0)*x4266)))),-1);
if(!x4269.valid){
continue;
}
CheckValue<IkReal> x4270 = IKatan2WithCheck(IkReal(r02),IkReal((x4267+(((-1.0)*x4268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4269.value)))+(x4270.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4271=IKcos(j4);
IkReal x4272=IKsin(j4);
IkReal x4273=(cj5*r00);
IkReal x4274=(cj5*r10);
IkReal x4275=((1.0)*cj2);
IkReal x4276=(cj5*r20);
IkReal x4277=((1.0)*x4271);
IkReal x4278=((1.0)*x4272);
IkReal x4279=(sj5*x4271);
IkReal x4280=(sj5*x4272);
evalcond[0]=(((r21*x4279))+(((-1.0)*x4276*x4277))+((r22*x4272)));
evalcond[1]=(((r11*x4279))+((r12*x4272))+(((-1.0)*x4274*x4277)));
evalcond[2]=((1.0)+(((-1.0)*x4273*x4277))+((r02*x4272))+((r01*x4279)));
evalcond[3]=((((-1.0)*x4273*x4278))+(((-1.0)*r02*x4277))+((r01*x4280)));
evalcond[4]=((((-1.0)*cj1*x4275))+(((-1.0)*r12*x4277))+((r11*x4280))+((sj1*sj2))+(((-1.0)*x4274*x4278)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x4277))+(((-1.0)*x4276*x4278))+(((-1.0)*sj1*x4275))+((r21*x4280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4281=((1.0)*cj5);
CheckValue<IkReal> x4282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4281)))),-1);
if(!x4282.valid){
continue;
}
CheckValue<IkReal> x4283 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4281))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4282.value)))+(x4283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4284=IKcos(j4);
IkReal x4285=IKsin(j4);
IkReal x4286=(cj5*r00);
IkReal x4287=(cj5*r10);
IkReal x4288=((1.0)*cj2);
IkReal x4289=(cj5*r20);
IkReal x4290=((1.0)*x4284);
IkReal x4291=((1.0)*x4285);
IkReal x4292=(sj5*x4284);
IkReal x4293=(sj5*x4285);
evalcond[0]=(((r22*x4285))+(((-1.0)*x4289*x4290))+((r21*x4292)));
evalcond[1]=(((r12*x4285))+(((-1.0)*x4287*x4290))+((r11*x4292)));
evalcond[2]=((1.0)+((r01*x4292))+((r02*x4285))+(((-1.0)*x4286*x4290)));
evalcond[3]=(((r01*x4293))+(((-1.0)*x4286*x4291))+(((-1.0)*r02*x4290)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x4290))+(((-1.0)*x4287*x4291))+(((-1.0)*cj1*x4288))+((r11*x4293)));
evalcond[5]=((((-1.0)*r22*x4290))+(((-1.0)*sj1*x4288))+(((-1.0)*x4289*x4291))+((r21*x4293))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4294=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4294.valid){
continue;
}
CheckValue<IkReal> x4295 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4294.value)))+(x4295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4296=IKcos(j4);
IkReal x4297=IKsin(j4);
IkReal x4298=(cj5*r00);
IkReal x4299=(cj5*r10);
IkReal x4300=((1.0)*cj2);
IkReal x4301=(cj5*r20);
IkReal x4302=((1.0)*x4296);
IkReal x4303=((1.0)*x4297);
IkReal x4304=(sj5*x4296);
IkReal x4305=(sj5*x4297);
evalcond[0]=(((r22*x4297))+(((-1.0)*x4301*x4302))+((r21*x4304)));
evalcond[1]=(((r11*x4304))+((r12*x4297))+(((-1.0)*x4299*x4302)));
evalcond[2]=((1.0)+((r01*x4304))+(((-1.0)*x4298*x4302))+((r02*x4297)));
evalcond[3]=(((r01*x4305))+(((-1.0)*r02*x4302))+(((-1.0)*x4298*x4303)));
evalcond[4]=((((-1.0)*r12*x4302))+((r11*x4305))+((sj1*sj2))+(((-1.0)*cj1*x4300))+(((-1.0)*x4299*x4303)));
evalcond[5]=((((-1.0)*r22*x4302))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4300))+(((-1.0)*x4301*x4303))+((r21*x4305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4306=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4306);
rxp1_1=(px*r21);
rxp1_2=(r11*x4306);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4307=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4307);
rxp1_1=(px*r21);
rxp1_2=(r11*x4307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4308=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4308);
rxp1_1=(px*r21);
rxp1_2=(r11*x4308);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4311=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4311.valid){
continue;
}
IkReal x4309=x4311.value;
IkReal x4310=(sj0*x4309);
sj4array[0]=(((sj1*sj2*x4310))+(((-1.0)*cj1*cj2*x4310)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4312=IKcos(j4);
IkReal x4313=IKsin(j4);
IkReal x4314=(r21*sj5);
IkReal x4315=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x4312);
evalcond[1]=((((-1.0)*sj0))+((r02*x4313)));
evalcond[2]=((((-1.0)*x4312*x4315))+((x4312*x4314)));
evalcond[3]=(((r11*sj5*x4312))+(((-1.0)*cj5*r10*x4312)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x4313*x4314))+(((-1.0)*x4313*x4315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4317=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4317.valid){
continue;
}
IkReal x4316=x4317.value;
sj4array[0]=(((cj1*sj2*x4316))+((cj2*sj1*x4316)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4318=IKcos(j4);
IkReal x4319=IKsin(j4);
IkReal x4320=((1.0)*sj0);
IkReal x4321=((1.0)*cj5);
IkReal x4322=(sj5*x4318);
evalcond[0]=((-1.0)*r02*x4318);
evalcond[1]=((((-1.0)*x4320))+((r02*x4319)));
evalcond[2]=(((r21*x4322))+(((-1.0)*r20*x4318*x4321)));
evalcond[3]=((((-1.0)*r10*x4318*x4321))+((r11*x4322)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x4319))+(((-1.0)*sj1*sj2*x4320))+(((-1.0)*r10*x4319*x4321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4323=IKPowWithIntegerCheck(r02,-1);
if(!x4323.valid){
continue;
}
sj4array[0]=(sj0*(x4323.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4324=IKcos(j4);
IkReal x4325=IKsin(j4);
IkReal x4326=((1.0)*sj1);
IkReal x4327=(r21*sj5);
IkReal x4328=(r11*sj5);
IkReal x4329=((1.0)*cj5*x4325);
IkReal x4330=((1.0)*cj5*x4324);
evalcond[0]=((-1.0)*r02*x4324);
evalcond[1]=((((-1.0)*r20*x4330))+((x4324*x4327)));
evalcond[2]=((((-1.0)*r10*x4330))+((x4324*x4328)));
evalcond[3]=((((-1.0)*r20*x4329))+(((-1.0)*cj1*sj2))+((x4325*x4327))+(((-1.0)*cj2*x4326)));
evalcond[4]=((((-1.0)*r10*x4329))+((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x4326))+((x4325*x4328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4331=((1.0)*sj0);
IkReal x4332=((1.0)*cj0);
CheckValue<IkReal> x4333 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x4331))+(((-1.0)*cj5*r00*x4332)))),IkReal(((((-1.0)*r02*x4332))+(((-1.0)*r12*x4331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4333.valid){
continue;
}
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4333.value)+(((1.5707963267949)*(x4334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4335=IKcos(j4);
IkReal x4336=IKsin(j4);
IkReal x4337=(cj5*r00);
IkReal x4338=(cj1*cj2);
IkReal x4339=(cj5*r10);
IkReal x4340=((1.0)*sj1);
IkReal x4341=(cj5*r20);
IkReal x4342=((1.0)*x4335);
IkReal x4343=((1.0)*x4336);
IkReal x4344=(sj5*x4335);
IkReal x4345=(sj5*x4336);
evalcond[0]=((((-1.0)*x4341*x4342))+((r21*x4344))+((r22*x4336)));
evalcond[1]=(cj0+(((-1.0)*x4339*x4342))+((r12*x4336))+((r11*x4344)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4337*x4342))+((r02*x4336))+((r01*x4344)));
evalcond[3]=((((-1.0)*x4341*x4343))+(((-1.0)*cj1*sj2))+((r21*x4345))+(((-1.0)*r22*x4342))+(((-1.0)*cj2*x4340)));
evalcond[4]=((((-1.0)*cj0*sj2*x4340))+(((-1.0)*r02*x4342))+((cj0*x4338))+(((-1.0)*x4337*x4343))+((r01*x4345)));
evalcond[5]=((((-1.0)*x4339*x4343))+(((-1.0)*sj0*sj2*x4340))+(((-1.0)*r12*x4342))+((sj0*x4338))+((r11*x4345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
CheckValue<IkReal> x4347=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4346.value)+(((1.5707963267949)*(x4347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4348=IKcos(j4);
IkReal x4349=IKsin(j4);
IkReal x4350=(cj5*r00);
IkReal x4351=(cj1*cj2);
IkReal x4352=(cj5*r10);
IkReal x4353=((1.0)*sj1);
IkReal x4354=(cj5*r20);
IkReal x4355=((1.0)*x4348);
IkReal x4356=((1.0)*x4349);
IkReal x4357=(sj5*x4348);
IkReal x4358=(sj5*x4349);
evalcond[0]=(((r22*x4349))+((r21*x4357))+(((-1.0)*x4354*x4355)));
evalcond[1]=(cj0+(((-1.0)*x4352*x4355))+((r12*x4349))+((r11*x4357)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4349))+(((-1.0)*x4350*x4355))+((r01*x4357)));
evalcond[3]=((((-1.0)*cj2*x4353))+(((-1.0)*cj1*sj2))+((r21*x4358))+(((-1.0)*r22*x4355))+(((-1.0)*x4354*x4356)));
evalcond[4]=(((cj0*x4351))+(((-1.0)*cj0*sj2*x4353))+(((-1.0)*r02*x4355))+(((-1.0)*x4350*x4356))+((r01*x4358)));
evalcond[5]=((((-1.0)*sj0*sj2*x4353))+(((-1.0)*r12*x4355))+(((-1.0)*x4352*x4356))+((sj0*x4351))+((r11*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4359.value)+(((1.5707963267949)*(x4360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4361=IKcos(j4);
IkReal x4362=IKsin(j4);
IkReal x4363=(cj5*r00);
IkReal x4364=(cj1*cj2);
IkReal x4365=(cj5*r10);
IkReal x4366=((1.0)*sj1);
IkReal x4367=(cj5*r20);
IkReal x4368=((1.0)*x4361);
IkReal x4369=((1.0)*x4362);
IkReal x4370=(sj5*x4361);
IkReal x4371=(sj5*x4362);
evalcond[0]=(((r22*x4362))+(((-1.0)*x4367*x4368))+((r21*x4370)));
evalcond[1]=(cj0+((r11*x4370))+((r12*x4362))+(((-1.0)*x4365*x4368)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4370))+(((-1.0)*x4363*x4368))+((r02*x4362)));
evalcond[3]=((((-1.0)*r22*x4368))+(((-1.0)*cj2*x4366))+(((-1.0)*cj1*sj2))+(((-1.0)*x4367*x4369))+((r21*x4371)));
evalcond[4]=(((r01*x4371))+((cj0*x4364))+(((-1.0)*cj0*sj2*x4366))+(((-1.0)*r02*x4368))+(((-1.0)*x4363*x4369)));
evalcond[5]=(((sj0*x4364))+((r11*x4371))+(((-1.0)*x4365*x4369))+(((-1.0)*r12*x4368))+(((-1.0)*sj0*sj2*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4372=((1.0)*cj5);
IkReal x4373=((1.0)*sj5);
IkReal x4374=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4374;
j0eval[1]=IKsign(x4374);
j0eval[2]=((IKabs(((((-1.0)*r10*x4373))+(((-1.0)*r11*x4372)))))+(IKabs(((((-1.0)*r01*x4372))+(((-1.0)*r00*x4373))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4375=r21*r21;
IkReal x4376=cj5*cj5;
IkReal x4377=(sj1*sj2);
IkReal x4378=(r21*sj5);
IkReal x4379=(cj1*cj2);
IkReal x4380=(cj5*r20);
IkReal x4381=((((2.0)*x4378*x4380))+((x4375*x4376))+(((-1.0)*x4376*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4375)));
j4eval[0]=x4381;
j4eval[1]=((IKabs((((r22*x4377))+(((-1.0)*r22*x4379)))))+(IKabs(((((-1.0)*x4377*x4378))+((x4377*x4380))+(((-1.0)*x4379*x4380))+((x4378*x4379))))));
j4eval[2]=IKsign(x4381);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((3.44332855093257)*py))), ((((1.57819225251076)*py))+(((3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4382=IKcos(j0);
IkReal x4383=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11)*x4383))+(((0.24)*x4382)));
evalcond[1]=((((0.11)*x4382))+(((-1.0)*py))+(((0.24)*x4383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4384=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4384;
j4eval[1]=IKsign(x4384);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4385=cj5*cj5;
IkReal x4386=(r11*r21);
IkReal x4387=((1.0)*r20);
IkReal x4388=(cj5*sj5);
IkReal x4389=((((-1.0)*r10*x4385*x4387))+(((-1.0)*x4386))+(((-1.0)*r12*r22))+((r11*r20*x4388))+((r10*r21*x4388))+((x4385*x4386)));
j4eval[0]=x4389;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4387)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4390=cj5*cj5;
IkReal x4391=((1.0)*r20);
IkReal x4392=(r01*r21);
IkReal x4393=(r21*sj5);
IkReal x4394=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4390*x4391))+(((-1.0)*x4392))+((x4390*x4392))+((cj5*r00*x4393)));
j4eval[0]=x4394;
j4eval[1]=((IKabs((((cj0*x4393))+(((-1.0)*cj0*cj5*x4391)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4395=cj5*cj5;
IkReal x4396=((1.0)*r20);
IkReal x4397=(r01*r21);
IkReal x4398=(r21*sj5);
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal((((cj0*x4398))+(((-1.0)*cj0*cj5*x4396)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4397))+((x4395*x4397))+(((-1.0)*r00*x4395*x4396))+((cj5*r00*x4398)))),-1);
if(!x4400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4399.value)+(((1.5707963267949)*(x4400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4401=IKcos(j4);
IkReal x4402=IKsin(j4);
IkReal x4403=(cj5*r00);
IkReal x4404=(cj5*r20);
IkReal x4405=(cj5*r10);
IkReal x4406=(r21*sj5);
IkReal x4407=((1.0)*x4401);
IkReal x4408=((1.0)*x4402);
IkReal x4409=(sj5*x4401);
IkReal x4410=(sj5*x4402);
evalcond[0]=(((r22*x4402))+((x4401*x4406))+(((-1.0)*x4404*x4407)));
evalcond[1]=(((r11*x4409))+cj0+((r12*x4402))+(((-1.0)*x4405*x4407)));
evalcond[2]=(((x4402*x4406))+(((-1.0)*r22*x4407))+(((-1.0)*x4404*x4408)));
evalcond[3]=(cj0+(((-1.0)*x4403*x4408))+((r01*x4410))+(((-1.0)*r02*x4407)));
evalcond[4]=(((r11*x4410))+sj0+(((-1.0)*r12*x4407))+(((-1.0)*x4405*x4408)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4403*x4407))+((r01*x4409))+((r02*x4402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4411=cj5*cj5;
IkReal x4412=(r11*r21);
IkReal x4413=((1.0)*r20);
IkReal x4414=(cj5*sj5);
CheckValue<IkReal> x4415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*r20*x4414))+(((-1.0)*x4412))+((r10*r21*x4414))+((x4411*x4412))+(((-1.0)*r10*x4411*x4413)))),-1);
if(!x4415.valid){
continue;
}
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4415.value)))+(x4416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4417=IKcos(j4);
IkReal x4418=IKsin(j4);
IkReal x4419=(cj5*r00);
IkReal x4420=(cj5*r20);
IkReal x4421=(cj5*r10);
IkReal x4422=(r21*sj5);
IkReal x4423=((1.0)*x4417);
IkReal x4424=((1.0)*x4418);
IkReal x4425=(sj5*x4417);
IkReal x4426=(sj5*x4418);
evalcond[0]=((((-1.0)*x4420*x4423))+((r22*x4418))+((x4417*x4422)));
evalcond[1]=(cj0+((r12*x4418))+(((-1.0)*x4421*x4423))+((r11*x4425)));
evalcond[2]=((((-1.0)*x4420*x4424))+((x4418*x4422))+(((-1.0)*r22*x4423)));
evalcond[3]=(cj0+((r01*x4426))+(((-1.0)*r02*x4423))+(((-1.0)*x4419*x4424)));
evalcond[4]=(sj0+(((-1.0)*x4421*x4424))+(((-1.0)*r12*x4423))+((r11*x4426)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4425))+((r02*x4418))+(((-1.0)*x4419*x4423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4427.value)+(((1.5707963267949)*(x4428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4429=IKcos(j4);
IkReal x4430=IKsin(j4);
IkReal x4431=(cj5*r00);
IkReal x4432=(cj5*r20);
IkReal x4433=(cj5*r10);
IkReal x4434=(r21*sj5);
IkReal x4435=((1.0)*x4429);
IkReal x4436=((1.0)*x4430);
IkReal x4437=(sj5*x4429);
IkReal x4438=(sj5*x4430);
evalcond[0]=(((r22*x4430))+((x4429*x4434))+(((-1.0)*x4432*x4435)));
evalcond[1]=(cj0+(((-1.0)*x4433*x4435))+((r12*x4430))+((r11*x4437)));
evalcond[2]=(((x4430*x4434))+(((-1.0)*x4432*x4436))+(((-1.0)*r22*x4435)));
evalcond[3]=((((-1.0)*r02*x4435))+cj0+(((-1.0)*x4431*x4436))+((r01*x4438)));
evalcond[4]=(sj0+(((-1.0)*x4433*x4436))+(((-1.0)*r12*x4435))+((r11*x4438)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4431*x4435))+((r02*x4430))+((r01*x4437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((-3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((-3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((-3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))), ((((1.57819225251076)*py))+(((-3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4439=IKcos(j0);
IkReal x4440=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11)*x4440))+(((-0.24)*x4439)));
evalcond[1]=((((0.11)*x4439))+(((-1.0)*py))+(((-0.24)*x4440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4441=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4441;
j4eval[1]=IKsign(x4441);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4442=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4442;
j4eval[1]=IKsign(x4442);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4443=cj5*cj5;
IkReal x4444=(r11*r21);
IkReal x4445=((1.0)*r20);
IkReal x4446=(cj5*sj5);
IkReal x4447=((((-1.0)*r10*x4443*x4445))+(((-1.0)*r12*r22))+((r11*r20*x4446))+(((-1.0)*x4444))+((r10*r21*x4446))+((x4443*x4444)));
j4eval[0]=x4447;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4445))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4448=cj5*cj5;
IkReal x4449=(r11*r21);
IkReal x4450=((1.0)*r20);
IkReal x4451=(cj5*sj5);
CheckValue<IkReal> x4452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4452.valid){
continue;
}
CheckValue<IkReal> x4453=IKPowWithIntegerCheck(IKsign((((r11*r20*x4451))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4448*x4450))+(((-1.0)*x4449))+((r10*r21*x4451))+((x4448*x4449)))),-1);
if(!x4453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4452.value)+(((1.5707963267949)*(x4453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4454=IKcos(j4);
IkReal x4455=IKsin(j4);
IkReal x4456=((1.0)*sj0);
IkReal x4457=(cj5*r00);
IkReal x4458=(cj5*r20);
IkReal x4459=(cj5*r10);
IkReal x4460=((1.0)*x4454);
IkReal x4461=((1.0)*x4455);
IkReal x4462=(sj5*x4454);
IkReal x4463=(sj5*x4455);
evalcond[0]=((((-1.0)*x4458*x4460))+((r21*x4462))+((r22*x4455)));
evalcond[1]=(cj0+((r11*x4462))+(((-1.0)*x4459*x4460))+((r12*x4455)));
evalcond[2]=((((-1.0)*x4458*x4461))+(((-1.0)*r22*x4460))+((r21*x4463)));
evalcond[3]=((((-1.0)*x4456))+((r01*x4462))+((r02*x4455))+(((-1.0)*x4457*x4460)));
evalcond[4]=(((r01*x4463))+(((-1.0)*r02*x4460))+(((-1.0)*x4457*x4461))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4456))+((r11*x4463))+(((-1.0)*x4459*x4461))+(((-1.0)*r12*x4460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4464.value)+(((1.5707963267949)*(x4465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4466=IKcos(j4);
IkReal x4467=IKsin(j4);
IkReal x4468=((1.0)*sj0);
IkReal x4469=(cj5*r00);
IkReal x4470=(cj5*r20);
IkReal x4471=(cj5*r10);
IkReal x4472=((1.0)*x4466);
IkReal x4473=((1.0)*x4467);
IkReal x4474=(sj5*x4466);
IkReal x4475=(sj5*x4467);
evalcond[0]=(((r22*x4467))+((r21*x4474))+(((-1.0)*x4470*x4472)));
evalcond[1]=(cj0+((r12*x4467))+(((-1.0)*x4471*x4472))+((r11*x4474)));
evalcond[2]=(((r21*x4475))+(((-1.0)*x4470*x4473))+(((-1.0)*r22*x4472)));
evalcond[3]=((((-1.0)*x4468))+((r01*x4474))+(((-1.0)*x4469*x4472))+((r02*x4467)));
evalcond[4]=(((r01*x4475))+(((-1.0)*x4469*x4473))+(((-1.0)*cj0))+(((-1.0)*r02*x4472)));
evalcond[5]=((((-1.0)*r12*x4472))+(((-1.0)*x4471*x4473))+(((-1.0)*x4468))+((r11*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4476.value)+(((1.5707963267949)*(x4477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4478=IKcos(j4);
IkReal x4479=IKsin(j4);
IkReal x4480=((1.0)*sj0);
IkReal x4481=(cj5*r00);
IkReal x4482=(cj5*r20);
IkReal x4483=(cj5*r10);
IkReal x4484=((1.0)*x4478);
IkReal x4485=((1.0)*x4479);
IkReal x4486=(sj5*x4478);
IkReal x4487=(sj5*x4479);
evalcond[0]=(((r21*x4486))+((r22*x4479))+(((-1.0)*x4482*x4484)));
evalcond[1]=(((r11*x4486))+cj0+((r12*x4479))+(((-1.0)*x4483*x4484)));
evalcond[2]=(((r21*x4487))+(((-1.0)*r22*x4484))+(((-1.0)*x4482*x4485)));
evalcond[3]=((((-1.0)*x4481*x4484))+((r02*x4479))+((r01*x4486))+(((-1.0)*x4480)));
evalcond[4]=((((-1.0)*x4481*x4485))+((r01*x4487))+(((-1.0)*r02*x4484))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4487))+(((-1.0)*r12*x4484))+(((-1.0)*x4483*x4485))+(((-1.0)*x4480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.89050070191858)*py))+(((-0.411792232101076)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.411792232101076)*py))+(((1.89050070191858)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.89050070191858)*py))+(((-0.411792232101076)*px))))+IKsqr(((((0.411792232101076)*py))+(((1.89050070191858)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.89050070191858)*py))+(((-0.411792232101076)*px))), ((((0.411792232101076)*py))+(((1.89050070191858)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4488=IKsin(j0);
IkReal x4489=IKcos(j0);
evalcond[0]=((((-0.11)*x4488))+(((-1.0)*px))+(((0.505)*x4489)));
evalcond[1]=((((-1.0)*py))+(((0.505)*x4488))+(((0.11)*x4489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4490=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4490;
j4eval[1]=IKsign(x4490);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4491=cj5*cj5;
IkReal x4492=(r11*r21);
IkReal x4493=((1.0)*r20);
IkReal x4494=(cj5*sj5);
IkReal x4495=(((r11*r20*x4494))+(((-1.0)*x4492))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4491*x4493))+((x4491*x4492))+((r10*r21*x4494)));
j4eval[0]=x4495;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4493))))));
j4eval[2]=IKsign(x4495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4496=cj5*cj5;
IkReal x4497=((1.0)*r20);
IkReal x4498=(r01*r21);
IkReal x4499=(r21*sj5);
IkReal x4500=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4498))+(((-1.0)*r00*x4496*x4497))+((cj5*r00*x4499))+((x4496*x4498)));
j4eval[0]=x4500;
j4eval[1]=((IKabs((((cj0*x4499))+(((-1.0)*cj0*cj5*x4497)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4501=cj5*cj5;
IkReal x4502=((1.0)*r20);
IkReal x4503=(r01*r21);
IkReal x4504=(r21*sj5);
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal((((cj0*x4504))+(((-1.0)*cj0*cj5*x4502)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
CheckValue<IkReal> x4506=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4501*x4503))+((cj5*r00*x4504))+(((-1.0)*x4503))+(((-1.0)*r00*x4501*x4502)))),-1);
if(!x4506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4505.value)+(((1.5707963267949)*(x4506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4507=IKcos(j4);
IkReal x4508=IKsin(j4);
IkReal x4509=(cj5*r00);
IkReal x4510=(cj5*r20);
IkReal x4511=(cj5*r10);
IkReal x4512=(r21*sj5);
IkReal x4513=((1.0)*x4507);
IkReal x4514=((1.0)*x4508);
IkReal x4515=(sj5*x4507);
IkReal x4516=(sj5*x4508);
evalcond[0]=(((r22*x4508))+(((-1.0)*x4510*x4513))+((x4507*x4512)));
evalcond[1]=(cj0+((r12*x4508))+((r11*x4515))+(((-1.0)*x4511*x4513)));
evalcond[2]=((((-1.0)*x4510*x4514))+(((-1.0)*r22*x4513))+((x4508*x4512)));
evalcond[3]=((((-1.0)*r02*x4513))+cj0+((r01*x4516))+(((-1.0)*x4509*x4514)));
evalcond[4]=(sj0+(((-1.0)*r12*x4513))+((r11*x4516))+(((-1.0)*x4511*x4514)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4508))+((r01*x4515))+(((-1.0)*x4509*x4513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4517=cj5*cj5;
IkReal x4518=(r11*r21);
IkReal x4519=((1.0)*r20);
IkReal x4520=(cj5*sj5);
CheckValue<IkReal> x4521 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4521.valid){
continue;
}
CheckValue<IkReal> x4522=IKPowWithIntegerCheck(IKsign((((x4517*x4518))+(((-1.0)*r12*r22))+((r11*r20*x4520))+(((-1.0)*x4518))+((r10*r21*x4520))+(((-1.0)*r10*x4517*x4519)))),-1);
if(!x4522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4521.value)+(((1.5707963267949)*(x4522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4523=IKcos(j4);
IkReal x4524=IKsin(j4);
IkReal x4525=(cj5*r00);
IkReal x4526=(cj5*r20);
IkReal x4527=(cj5*r10);
IkReal x4528=(r21*sj5);
IkReal x4529=((1.0)*x4523);
IkReal x4530=((1.0)*x4524);
IkReal x4531=(sj5*x4523);
IkReal x4532=(sj5*x4524);
evalcond[0]=(((x4523*x4528))+((r22*x4524))+(((-1.0)*x4526*x4529)));
evalcond[1]=(((r12*x4524))+cj0+(((-1.0)*x4527*x4529))+((r11*x4531)));
evalcond[2]=((((-1.0)*r22*x4529))+((x4524*x4528))+(((-1.0)*x4526*x4530)));
evalcond[3]=(((r01*x4532))+cj0+(((-1.0)*x4525*x4530))+(((-1.0)*r02*x4529)));
evalcond[4]=((((-1.0)*r12*x4529))+sj0+(((-1.0)*x4527*x4530))+((r11*x4532)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4531))+(((-1.0)*x4525*x4529))+((r02*x4524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
CheckValue<IkReal> x4534=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4533.value)+(((1.5707963267949)*(x4534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4535=IKcos(j4);
IkReal x4536=IKsin(j4);
IkReal x4537=(cj5*r00);
IkReal x4538=(cj5*r20);
IkReal x4539=(cj5*r10);
IkReal x4540=(r21*sj5);
IkReal x4541=((1.0)*x4535);
IkReal x4542=((1.0)*x4536);
IkReal x4543=(sj5*x4535);
IkReal x4544=(sj5*x4536);
evalcond[0]=(((r22*x4536))+(((-1.0)*x4538*x4541))+((x4535*x4540)));
evalcond[1]=(cj0+((r12*x4536))+((r11*x4543))+(((-1.0)*x4539*x4541)));
evalcond[2]=((((-1.0)*r22*x4541))+(((-1.0)*x4538*x4542))+((x4536*x4540)));
evalcond[3]=((((-1.0)*r02*x4541))+cj0+(((-1.0)*x4537*x4542))+((r01*x4544)));
evalcond[4]=(sj0+(((-1.0)*r12*x4541))+((r11*x4544))+(((-1.0)*x4539*x4542)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4537*x4541))+((r01*x4543))+((r02*x4536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.96463654223969)*py))+(((-8.64440078585462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.96463654223969)*px))+(((8.64440078585462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.96463654223969)*py))+(((-8.64440078585462)*px))))+IKsqr(((((1.96463654223969)*px))+(((8.64440078585462)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.96463654223969)*py))+(((-8.64440078585462)*px))), ((((1.96463654223969)*px))+(((8.64440078585462)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4545=IKsin(j0);
IkReal x4546=IKcos(j0);
evalcond[0]=((((-0.11)*x4545))+(((0.025)*x4546))+(((-1.0)*px)));
evalcond[1]=((((0.11)*x4546))+(((0.025)*x4545))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4547=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4547;
j4eval[1]=IKsign(x4547);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4548=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4548;
j4eval[1]=IKsign(x4548);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4549=cj5*cj5;
IkReal x4550=(r11*r21);
IkReal x4551=((1.0)*r20);
IkReal x4552=(cj5*sj5);
IkReal x4553=((((-1.0)*r10*x4549*x4551))+((r11*r20*x4552))+((r10*r21*x4552))+(((-1.0)*r12*r22))+(((-1.0)*x4550))+((x4549*x4550)));
j4eval[0]=x4553;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4551)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4554=cj5*cj5;
IkReal x4555=(r11*r21);
IkReal x4556=((1.0)*r20);
IkReal x4557=(cj5*sj5);
CheckValue<IkReal> x4558=IKPowWithIntegerCheck(IKsign((((r11*r20*x4557))+((r10*r21*x4557))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4554*x4556))+(((-1.0)*x4555))+((x4554*x4555)))),-1);
if(!x4558.valid){
continue;
}
CheckValue<IkReal> x4559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4558.value)))+(x4559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4560=IKcos(j4);
IkReal x4561=IKsin(j4);
IkReal x4562=((1.0)*sj0);
IkReal x4563=(cj5*r00);
IkReal x4564=(cj5*r20);
IkReal x4565=(cj5*r10);
IkReal x4566=((1.0)*x4560);
IkReal x4567=((1.0)*x4561);
IkReal x4568=(sj5*x4560);
IkReal x4569=(sj5*x4561);
evalcond[0]=(((r22*x4561))+((r21*x4568))+(((-1.0)*x4564*x4566)));
evalcond[1]=(cj0+((r11*x4568))+((r12*x4561))+(((-1.0)*x4565*x4566)));
evalcond[2]=(((r21*x4569))+(((-1.0)*x4564*x4567))+(((-1.0)*r22*x4566)));
evalcond[3]=(((r02*x4561))+(((-1.0)*x4563*x4566))+((r01*x4568))+(((-1.0)*x4562)));
evalcond[4]=((((-1.0)*r02*x4566))+(((-1.0)*x4563*x4567))+((r01*x4569))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4569))+(((-1.0)*r12*x4566))+(((-1.0)*x4565*x4567))+(((-1.0)*x4562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4570 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4570.valid){
continue;
}
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4570.value)+(((1.5707963267949)*(x4571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4572=IKcos(j4);
IkReal x4573=IKsin(j4);
IkReal x4574=((1.0)*sj0);
IkReal x4575=(cj5*r00);
IkReal x4576=(cj5*r20);
IkReal x4577=(cj5*r10);
IkReal x4578=((1.0)*x4572);
IkReal x4579=((1.0)*x4573);
IkReal x4580=(sj5*x4572);
IkReal x4581=(sj5*x4573);
evalcond[0]=(((r21*x4580))+(((-1.0)*x4576*x4578))+((r22*x4573)));
evalcond[1]=((((-1.0)*x4577*x4578))+cj0+((r12*x4573))+((r11*x4580)));
evalcond[2]=(((r21*x4581))+(((-1.0)*x4576*x4579))+(((-1.0)*r22*x4578)));
evalcond[3]=((((-1.0)*x4574))+(((-1.0)*x4575*x4578))+((r02*x4573))+((r01*x4580)));
evalcond[4]=((((-1.0)*x4575*x4579))+(((-1.0)*r02*x4578))+((r01*x4581))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4577*x4579))+(((-1.0)*x4574))+((r11*x4581))+(((-1.0)*r12*x4578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
CheckValue<IkReal> x4583=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4582.value)+(((1.5707963267949)*(x4583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4584=IKcos(j4);
IkReal x4585=IKsin(j4);
IkReal x4586=((1.0)*sj0);
IkReal x4587=(cj5*r00);
IkReal x4588=(cj5*r20);
IkReal x4589=(cj5*r10);
IkReal x4590=((1.0)*x4584);
IkReal x4591=((1.0)*x4585);
IkReal x4592=(sj5*x4584);
IkReal x4593=(sj5*x4585);
evalcond[0]=(((r21*x4592))+((r22*x4585))+(((-1.0)*x4588*x4590)));
evalcond[1]=(cj0+(((-1.0)*x4589*x4590))+((r11*x4592))+((r12*x4585)));
evalcond[2]=(((r21*x4593))+(((-1.0)*r22*x4590))+(((-1.0)*x4588*x4591)));
evalcond[3]=((((-1.0)*x4586))+((r02*x4585))+(((-1.0)*x4587*x4590))+((r01*x4592)));
evalcond[4]=((((-1.0)*x4587*x4591))+(((-1.0)*r02*x4590))+(((-1.0)*cj0))+((r01*x4593)));
evalcond[5]=((((-1.0)*x4586))+(((-1.0)*x4589*x4591))+((r11*x4593))+(((-1.0)*r12*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((-3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((-3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((-3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))), ((((1.57819225251076)*py))+(((-3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4594=IKcos(j0);
IkReal x4595=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.11)*x4595))+(((-0.24)*x4594)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x4594))+(((-0.24)*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4596=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4596;
j4eval[1]=IKsign(x4596);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4597=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4597;
j4eval[1]=IKsign(x4597);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4598=cj5*cj5;
IkReal x4599=(r11*r21);
IkReal x4600=((1.0)*r20);
IkReal x4601=(cj5*sj5);
IkReal x4602=((((-1.0)*r12*r22))+((x4598*x4599))+(((-1.0)*x4599))+((r11*r20*x4601))+(((-1.0)*r10*x4598*x4600))+((r10*r21*x4601)));
j4eval[0]=x4602;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4600))))));
j4eval[2]=IKsign(x4602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4603=cj5*cj5;
IkReal x4604=(r11*r21);
IkReal x4605=((1.0)*r20);
IkReal x4606=(cj5*sj5);
CheckValue<IkReal> x4607=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4604))+(((-1.0)*r12*r22))+((x4603*x4604))+((r11*r20*x4606))+(((-1.0)*r10*x4603*x4605))+((r10*r21*x4606)))),-1);
if(!x4607.valid){
continue;
}
CheckValue<IkReal> x4608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4607.value)))+(x4608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4609=IKcos(j4);
IkReal x4610=IKsin(j4);
IkReal x4611=((1.0)*sj0);
IkReal x4612=(cj5*r00);
IkReal x4613=(cj5*r20);
IkReal x4614=(cj5*r10);
IkReal x4615=((1.0)*x4609);
IkReal x4616=((1.0)*x4610);
IkReal x4617=(sj5*x4609);
IkReal x4618=(sj5*x4610);
evalcond[0]=(((r21*x4617))+((r22*x4610))+(((-1.0)*x4613*x4615)));
evalcond[1]=(cj0+((r12*x4610))+((r11*x4617))+(((-1.0)*x4614*x4615)));
evalcond[2]=(((r21*x4618))+(((-1.0)*r22*x4615))+(((-1.0)*x4613*x4616)));
evalcond[3]=((((-1.0)*x4612*x4615))+((r02*x4610))+((r01*x4617))+(((-1.0)*x4611)));
evalcond[4]=((((-1.0)*r02*x4615))+(((-1.0)*x4612*x4616))+((r01*x4618))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4618))+(((-1.0)*r12*x4615))+(((-1.0)*x4614*x4616))+(((-1.0)*x4611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4619.value)+(((1.5707963267949)*(x4620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKcos(j4);
IkReal x4622=IKsin(j4);
IkReal x4623=((1.0)*sj0);
IkReal x4624=(cj5*r00);
IkReal x4625=(cj5*r20);
IkReal x4626=(cj5*r10);
IkReal x4627=((1.0)*x4621);
IkReal x4628=((1.0)*x4622);
IkReal x4629=(sj5*x4621);
IkReal x4630=(sj5*x4622);
evalcond[0]=((((-1.0)*x4625*x4627))+((r22*x4622))+((r21*x4629)));
evalcond[1]=(((r12*x4622))+cj0+((r11*x4629))+(((-1.0)*x4626*x4627)));
evalcond[2]=(((r21*x4630))+(((-1.0)*x4625*x4628))+(((-1.0)*r22*x4627)));
evalcond[3]=(((r02*x4622))+((r01*x4629))+(((-1.0)*x4624*x4627))+(((-1.0)*x4623)));
evalcond[4]=(((r01*x4630))+(((-1.0)*r02*x4627))+(((-1.0)*x4624*x4628))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4630))+(((-1.0)*x4626*x4628))+(((-1.0)*r12*x4627))+(((-1.0)*x4623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4631.value)+(((1.5707963267949)*(x4632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4633=IKcos(j4);
IkReal x4634=IKsin(j4);
IkReal x4635=((1.0)*sj0);
IkReal x4636=(cj5*r00);
IkReal x4637=(cj5*r20);
IkReal x4638=(cj5*r10);
IkReal x4639=((1.0)*x4633);
IkReal x4640=((1.0)*x4634);
IkReal x4641=(sj5*x4633);
IkReal x4642=(sj5*x4634);
evalcond[0]=(((r21*x4641))+(((-1.0)*x4637*x4639))+((r22*x4634)));
evalcond[1]=(((r12*x4634))+cj0+((r11*x4641))+(((-1.0)*x4638*x4639)));
evalcond[2]=((((-1.0)*x4637*x4640))+((r21*x4642))+(((-1.0)*r22*x4639)));
evalcond[3]=((((-1.0)*x4635))+((r01*x4641))+(((-1.0)*x4636*x4639))+((r02*x4634)));
evalcond[4]=((((-1.0)*x4636*x4640))+(((-1.0)*r02*x4639))+((r01*x4642))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4635))+((r11*x4642))+(((-1.0)*x4638*x4640))+(((-1.0)*r12*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((3.44332855093257)*py))), ((((1.57819225251076)*py))+(((3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4643=IKcos(j0);
IkReal x4644=IKsin(j0);
evalcond[0]=((((-0.11)*x4644))+(((-1.0)*px))+(((0.24)*x4643)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x4643))+(((0.24)*x4644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4645=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4645;
j4eval[1]=IKsign(x4645);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4646=cj5*cj5;
IkReal x4647=(r11*r21);
IkReal x4648=((1.0)*r20);
IkReal x4649=(cj5*sj5);
IkReal x4650=(((r10*r21*x4649))+((r11*r20*x4649))+((x4646*x4647))+(((-1.0)*r10*x4646*x4648))+(((-1.0)*r12*r22))+(((-1.0)*x4647)));
j4eval[0]=x4650;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4648))))));
j4eval[2]=IKsign(x4650);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4651=cj5*cj5;
IkReal x4652=((1.0)*r20);
IkReal x4653=(r01*r21);
IkReal x4654=(r21*sj5);
IkReal x4655=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4651*x4652))+(((-1.0)*x4653))+((cj5*r00*x4654))+((x4651*x4653)));
j4eval[0]=x4655;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4652))+((cj0*x4654)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4655);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4656=cj5*cj5;
IkReal x4657=((1.0)*r20);
IkReal x4658=(r01*r21);
IkReal x4659=(r21*sj5);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x4657))+((cj0*x4659)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
CheckValue<IkReal> x4661=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4658))+((x4656*x4658))+(((-1.0)*r00*x4656*x4657))+((cj5*r00*x4659)))),-1);
if(!x4661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4660.value)+(((1.5707963267949)*(x4661.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4662=IKcos(j4);
IkReal x4663=IKsin(j4);
IkReal x4664=(cj5*r00);
IkReal x4665=(cj5*r20);
IkReal x4666=(cj5*r10);
IkReal x4667=(r21*sj5);
IkReal x4668=((1.0)*x4662);
IkReal x4669=((1.0)*x4663);
IkReal x4670=(sj5*x4662);
IkReal x4671=(sj5*x4663);
evalcond[0]=(((x4662*x4667))+((r22*x4663))+(((-1.0)*x4665*x4668)));
evalcond[1]=(cj0+((r12*x4663))+((r11*x4670))+(((-1.0)*x4666*x4668)));
evalcond[2]=(((x4663*x4667))+(((-1.0)*x4665*x4669))+(((-1.0)*r22*x4668)));
evalcond[3]=(cj0+(((-1.0)*x4664*x4669))+((r01*x4671))+(((-1.0)*r02*x4668)));
evalcond[4]=(sj0+((r11*x4671))+(((-1.0)*r12*x4668))+(((-1.0)*x4666*x4669)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4663))+(((-1.0)*x4664*x4668))+((r01*x4670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4672=cj5*cj5;
IkReal x4673=(r11*r21);
IkReal x4674=((1.0)*r20);
IkReal x4675=(cj5*sj5);
CheckValue<IkReal> x4676 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4676.valid){
continue;
}
CheckValue<IkReal> x4677=IKPowWithIntegerCheck(IKsign((((r10*r21*x4675))+((r11*r20*x4675))+(((-1.0)*r12*r22))+((x4672*x4673))+(((-1.0)*x4673))+(((-1.0)*r10*x4672*x4674)))),-1);
if(!x4677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4676.value)+(((1.5707963267949)*(x4677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4678=IKcos(j4);
IkReal x4679=IKsin(j4);
IkReal x4680=(cj5*r00);
IkReal x4681=(cj5*r20);
IkReal x4682=(cj5*r10);
IkReal x4683=(r21*sj5);
IkReal x4684=((1.0)*x4678);
IkReal x4685=((1.0)*x4679);
IkReal x4686=(sj5*x4678);
IkReal x4687=(sj5*x4679);
evalcond[0]=(((x4678*x4683))+(((-1.0)*x4681*x4684))+((r22*x4679)));
evalcond[1]=(cj0+(((-1.0)*x4682*x4684))+((r12*x4679))+((r11*x4686)));
evalcond[2]=((((-1.0)*x4681*x4685))+((x4679*x4683))+(((-1.0)*r22*x4684)));
evalcond[3]=(cj0+(((-1.0)*x4680*x4685))+(((-1.0)*r02*x4684))+((r01*x4687)));
evalcond[4]=(sj0+(((-1.0)*x4682*x4685))+((r11*x4687))+(((-1.0)*r12*x4684)));
evalcond[5]=(((r02*x4679))+(((-1.0)*sj0))+(((-1.0)*x4680*x4684))+((r01*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4688 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4688.valid){
continue;
}
CheckValue<IkReal> x4689=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4688.value)+(((1.5707963267949)*(x4689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4690=IKcos(j4);
IkReal x4691=IKsin(j4);
IkReal x4692=(cj5*r00);
IkReal x4693=(cj5*r20);
IkReal x4694=(cj5*r10);
IkReal x4695=(r21*sj5);
IkReal x4696=((1.0)*x4690);
IkReal x4697=((1.0)*x4691);
IkReal x4698=(sj5*x4690);
IkReal x4699=(sj5*x4691);
evalcond[0]=(((x4690*x4695))+((r22*x4691))+(((-1.0)*x4693*x4696)));
evalcond[1]=(cj0+((r12*x4691))+(((-1.0)*x4694*x4696))+((r11*x4698)));
evalcond[2]=((((-1.0)*x4693*x4697))+((x4691*x4695))+(((-1.0)*r22*x4696)));
evalcond[3]=(cj0+(((-1.0)*x4692*x4697))+(((-1.0)*r02*x4696))+((r01*x4699)));
evalcond[4]=((((-1.0)*r12*x4696))+sj0+(((-1.0)*x4694*x4697))+((r11*x4699)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4691))+(((-1.0)*x4692*x4696))+((r01*x4698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.411792232101076)*px))+(((-1.89050070191858)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.411792232101076)*py))+(((-1.89050070191858)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.411792232101076)*px))+(((-1.89050070191858)*py))))+IKsqr(((((0.411792232101076)*py))+(((-1.89050070191858)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.411792232101076)*px))+(((-1.89050070191858)*py))), ((((0.411792232101076)*py))+(((-1.89050070191858)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4700=IKcos(j0);
IkReal x4701=IKsin(j0);
evalcond[0]=((((-0.505)*x4700))+(((-0.11)*x4701))+(((-1.0)*px)));
evalcond[1]=((((-0.505)*x4701))+(((0.11)*x4700))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4702=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4702;
j4eval[1]=IKsign(x4702);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4703=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4703;
j4eval[1]=IKsign(x4703);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4704=cj5*cj5;
IkReal x4705=(r11*r21);
IkReal x4706=((1.0)*r20);
IkReal x4707=(cj5*sj5);
IkReal x4708=(((r10*r21*x4707))+(((-1.0)*x4705))+(((-1.0)*r12*r22))+((x4704*x4705))+(((-1.0)*r10*x4704*x4706))+((r11*r20*x4707)));
j4eval[0]=x4708;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4706))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4709=cj5*cj5;
IkReal x4710=(r11*r21);
IkReal x4711=((1.0)*r20);
IkReal x4712=(cj5*sj5);
CheckValue<IkReal> x4713 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4713.valid){
continue;
}
CheckValue<IkReal> x4714=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4710))+(((-1.0)*r12*r22))+((x4709*x4710))+((r10*r21*x4712))+((r11*r20*x4712))+(((-1.0)*r10*x4709*x4711)))),-1);
if(!x4714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4713.value)+(((1.5707963267949)*(x4714.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4715=IKcos(j4);
IkReal x4716=IKsin(j4);
IkReal x4717=((1.0)*sj0);
IkReal x4718=(cj5*r00);
IkReal x4719=(cj5*r20);
IkReal x4720=(cj5*r10);
IkReal x4721=((1.0)*x4715);
IkReal x4722=((1.0)*x4716);
IkReal x4723=(sj5*x4715);
IkReal x4724=(sj5*x4716);
evalcond[0]=(((r22*x4716))+((r21*x4723))+(((-1.0)*x4719*x4721)));
evalcond[1]=(((r11*x4723))+cj0+((r12*x4716))+(((-1.0)*x4720*x4721)));
evalcond[2]=(((r21*x4724))+(((-1.0)*x4719*x4722))+(((-1.0)*r22*x4721)));
evalcond[3]=((((-1.0)*x4718*x4721))+((r01*x4723))+((r02*x4716))+(((-1.0)*x4717)));
evalcond[4]=((((-1.0)*x4718*x4722))+((r01*x4724))+(((-1.0)*r02*x4721))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4724))+(((-1.0)*r12*x4721))+(((-1.0)*x4720*x4722))+(((-1.0)*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4725 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4725.valid){
continue;
}
CheckValue<IkReal> x4726=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4725.value)+(((1.5707963267949)*(x4726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4727=IKcos(j4);
IkReal x4728=IKsin(j4);
IkReal x4729=((1.0)*sj0);
IkReal x4730=(cj5*r00);
IkReal x4731=(cj5*r20);
IkReal x4732=(cj5*r10);
IkReal x4733=((1.0)*x4727);
IkReal x4734=((1.0)*x4728);
IkReal x4735=(sj5*x4727);
IkReal x4736=(sj5*x4728);
evalcond[0]=((((-1.0)*x4731*x4733))+((r21*x4735))+((r22*x4728)));
evalcond[1]=(((r11*x4735))+cj0+(((-1.0)*x4732*x4733))+((r12*x4728)));
evalcond[2]=((((-1.0)*x4731*x4734))+((r21*x4736))+(((-1.0)*r22*x4733)));
evalcond[3]=((((-1.0)*x4730*x4733))+(((-1.0)*x4729))+((r02*x4728))+((r01*x4735)));
evalcond[4]=((((-1.0)*x4730*x4734))+((r01*x4736))+(((-1.0)*r02*x4733))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4736))+(((-1.0)*r12*x4733))+(((-1.0)*x4729))+(((-1.0)*x4732*x4734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
CheckValue<IkReal> x4738=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4737.value)+(((1.5707963267949)*(x4738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4739=IKcos(j4);
IkReal x4740=IKsin(j4);
IkReal x4741=((1.0)*sj0);
IkReal x4742=(cj5*r00);
IkReal x4743=(cj5*r20);
IkReal x4744=(cj5*r10);
IkReal x4745=((1.0)*x4739);
IkReal x4746=((1.0)*x4740);
IkReal x4747=(sj5*x4739);
IkReal x4748=(sj5*x4740);
evalcond[0]=(((r22*x4740))+((r21*x4747))+(((-1.0)*x4743*x4745)));
evalcond[1]=(((r11*x4747))+cj0+((r12*x4740))+(((-1.0)*x4744*x4745)));
evalcond[2]=((((-1.0)*r22*x4745))+((r21*x4748))+(((-1.0)*x4743*x4746)));
evalcond[3]=(((r01*x4747))+((r02*x4740))+(((-1.0)*x4741))+(((-1.0)*x4742*x4745)));
evalcond[4]=(((r01*x4748))+(((-1.0)*x4742*x4746))+(((-1.0)*cj0))+(((-1.0)*r02*x4745)));
evalcond[5]=(((r11*x4748))+(((-1.0)*r12*x4745))+(((-1.0)*x4744*x4746))+(((-1.0)*x4741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.96463654223969)*py))+(((-8.64440078585462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.96463654223969)*px))+(((8.64440078585462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.96463654223969)*py))+(((-8.64440078585462)*px))))+IKsqr(((((-1.96463654223969)*px))+(((8.64440078585462)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.96463654223969)*py))+(((-8.64440078585462)*px))), ((((-1.96463654223969)*px))+(((8.64440078585462)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4749=IKcos(j0);
IkReal x4750=IKsin(j0);
evalcond[0]=((((-0.11)*x4750))+(((-1.0)*px))+(((-0.025)*x4749)));
evalcond[1]=((((-0.025)*x4750))+(((-1.0)*py))+(((0.11)*x4749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4751=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4751;
j4eval[1]=IKsign(x4751);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4752=cj5*cj5;
IkReal x4753=(r11*r21);
IkReal x4754=((1.0)*r20);
IkReal x4755=(cj5*sj5);
IkReal x4756=((((-1.0)*r12*r22))+((r11*r20*x4755))+(((-1.0)*r10*x4752*x4754))+((r10*r21*x4755))+((x4752*x4753))+(((-1.0)*x4753)));
j4eval[0]=x4756;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4754))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4757=cj5*cj5;
IkReal x4758=((1.0)*r20);
IkReal x4759=(r01*r21);
IkReal x4760=(r21*sj5);
IkReal x4761=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4757*x4758))+((cj5*r00*x4760))+((x4757*x4759))+(((-1.0)*x4759)));
j4eval[0]=x4761;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4758))+((cj0*x4760)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4762=cj5*cj5;
IkReal x4763=((1.0)*r20);
IkReal x4764=(r01*r21);
IkReal x4765=(r21*sj5);
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x4762*x4763))+(((-1.0)*x4764))+(((-1.0)*r02*r22))+((cj5*r00*x4765))+((x4762*x4764)))),-1);
if(!x4766.valid){
continue;
}
CheckValue<IkReal> x4767 = IKatan2WithCheck(IkReal((((cj0*x4765))+(((-1.0)*cj0*cj5*x4763)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4766.value)))+(x4767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4768=IKcos(j4);
IkReal x4769=IKsin(j4);
IkReal x4770=(cj5*r00);
IkReal x4771=(cj5*r20);
IkReal x4772=(cj5*r10);
IkReal x4773=(r21*sj5);
IkReal x4774=((1.0)*x4768);
IkReal x4775=((1.0)*x4769);
IkReal x4776=(sj5*x4768);
IkReal x4777=(sj5*x4769);
evalcond[0]=(((r22*x4769))+((x4768*x4773))+(((-1.0)*x4771*x4774)));
evalcond[1]=(((r11*x4776))+cj0+(((-1.0)*x4772*x4774))+((r12*x4769)));
evalcond[2]=(((x4769*x4773))+(((-1.0)*r22*x4774))+(((-1.0)*x4771*x4775)));
evalcond[3]=(cj0+((r01*x4777))+(((-1.0)*x4770*x4775))+(((-1.0)*r02*x4774)));
evalcond[4]=(sj0+((r11*x4777))+(((-1.0)*r12*x4774))+(((-1.0)*x4772*x4775)));
evalcond[5]=(((r02*x4769))+(((-1.0)*sj0))+((r01*x4776))+(((-1.0)*x4770*x4774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4778=cj5*cj5;
IkReal x4779=(r11*r21);
IkReal x4780=((1.0)*r20);
IkReal x4781=(cj5*sj5);
CheckValue<IkReal> x4782 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4780))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4782.valid){
continue;
}
CheckValue<IkReal> x4783=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4779))+(((-1.0)*r12*r22))+((r11*r20*x4781))+(((-1.0)*r10*x4778*x4780))+((x4778*x4779))+((r10*r21*x4781)))),-1);
if(!x4783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4782.value)+(((1.5707963267949)*(x4783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4784=IKcos(j4);
IkReal x4785=IKsin(j4);
IkReal x4786=(cj5*r00);
IkReal x4787=(cj5*r20);
IkReal x4788=(cj5*r10);
IkReal x4789=(r21*sj5);
IkReal x4790=((1.0)*x4784);
IkReal x4791=((1.0)*x4785);
IkReal x4792=(sj5*x4784);
IkReal x4793=(sj5*x4785);
evalcond[0]=((((-1.0)*x4787*x4790))+((r22*x4785))+((x4784*x4789)));
evalcond[1]=((((-1.0)*x4788*x4790))+cj0+((r12*x4785))+((r11*x4792)));
evalcond[2]=((((-1.0)*x4787*x4791))+((x4785*x4789))+(((-1.0)*r22*x4790)));
evalcond[3]=(cj0+((r01*x4793))+(((-1.0)*r02*x4790))+(((-1.0)*x4786*x4791)));
evalcond[4]=((((-1.0)*x4788*x4791))+sj0+(((-1.0)*r12*x4790))+((r11*x4793)));
evalcond[5]=(((r02*x4785))+(((-1.0)*sj0))+((r01*x4792))+(((-1.0)*x4786*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4794 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4794.valid){
continue;
}
CheckValue<IkReal> x4795=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4794.value)+(((1.5707963267949)*(x4795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4796=IKcos(j4);
IkReal x4797=IKsin(j4);
IkReal x4798=(cj5*r00);
IkReal x4799=(cj5*r20);
IkReal x4800=(cj5*r10);
IkReal x4801=(r21*sj5);
IkReal x4802=((1.0)*x4796);
IkReal x4803=((1.0)*x4797);
IkReal x4804=(sj5*x4796);
IkReal x4805=(sj5*x4797);
evalcond[0]=((((-1.0)*x4799*x4802))+((x4796*x4801))+((r22*x4797)));
evalcond[1]=(cj0+(((-1.0)*x4800*x4802))+((r12*x4797))+((r11*x4804)));
evalcond[2]=((((-1.0)*r22*x4802))+((x4797*x4801))+(((-1.0)*x4799*x4803)));
evalcond[3]=(cj0+((r01*x4805))+(((-1.0)*x4798*x4803))+(((-1.0)*r02*x4802)));
evalcond[4]=(sj0+(((-1.0)*x4800*x4803))+(((-1.0)*r12*x4802))+((r11*x4805)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4804))+(((-1.0)*x4798*x4802))+((r02*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4806=(cj1*cj2);
IkReal x4807=(sj1*sj2);
IkReal x4808=(cj5*r01);
IkReal x4809=(r00*sj5);
IkReal x4810=((100.0)*px);
IkReal x4811=((26.5)*sj1);
IkReal x4812=((24.0)*cj2*sj1);
IkReal x4813=((24.0)*cj1*sj2);
CheckValue<IkReal> x4814=IKPowWithIntegerCheck(((((11.0)*x4806))+(((-11.0)*x4807))),-1);
if(!x4814.valid){
continue;
}
CheckValue<IkReal> x4815=IKPowWithIntegerCheck(((((-1.0)*x4807))+x4806),-1);
if(!x4815.valid){
continue;
}
if( IKabs(((x4814.value)*(((((-1.0)*x4808*x4812))+(((-1.0)*x4808*x4811))+(((-1.0)*x4808*x4813))+(((9.5)*x4807*x4808))+(((9.5)*x4807*x4809))+((x4807*x4810))+(((-1.0)*x4809*x4812))+(((-1.0)*x4809*x4811))+(((-1.0)*x4809*x4813))+(((-1.0)*x4806*x4810))+(((-9.5)*x4806*x4808))+(((-9.5)*x4806*x4809)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4815.value)*(((((-1.0)*x4808))+(((-1.0)*x4809)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4814.value)*(((((-1.0)*x4808*x4812))+(((-1.0)*x4808*x4811))+(((-1.0)*x4808*x4813))+(((9.5)*x4807*x4808))+(((9.5)*x4807*x4809))+((x4807*x4810))+(((-1.0)*x4809*x4812))+(((-1.0)*x4809*x4811))+(((-1.0)*x4809*x4813))+(((-1.0)*x4806*x4810))+(((-9.5)*x4806*x4808))+(((-9.5)*x4806*x4809))))))+IKsqr(((x4815.value)*(((((-1.0)*x4808))+(((-1.0)*x4809))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4814.value)*(((((-1.0)*x4808*x4812))+(((-1.0)*x4808*x4811))+(((-1.0)*x4808*x4813))+(((9.5)*x4807*x4808))+(((9.5)*x4807*x4809))+((x4807*x4810))+(((-1.0)*x4809*x4812))+(((-1.0)*x4809*x4811))+(((-1.0)*x4809*x4813))+(((-1.0)*x4806*x4810))+(((-9.5)*x4806*x4808))+(((-9.5)*x4806*x4809))))), ((x4815.value)*(((((-1.0)*x4808))+(((-1.0)*x4809))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4816=IKcos(j0);
IkReal x4817=IKsin(j0);
IkReal x4818=(cj5*r01);
IkReal x4819=((1.0)*sj2);
IkReal x4820=(cj1*cj2);
IkReal x4821=((0.24)*cj2);
IkReal x4822=(r00*sj5);
IkReal x4823=(cj5*r11);
IkReal x4824=(r10*sj5);
IkReal x4825=(sj1*x4817);
IkReal x4826=(sj1*x4816);
IkReal x4827=((0.24)*cj1*sj2);
evalcond[0]=(((x4816*x4820))+(((-1.0)*x4819*x4826))+x4818+x4822);
evalcond[1]=(((x4817*x4820))+(((-1.0)*x4819*x4825))+x4824+x4823);
evalcond[2]=((((-0.11)*x4817))+((x4816*x4827))+((x4821*x4826))+(((-0.095)*x4822))+(((-0.095)*x4818))+(((0.265)*x4826))+(((-1.0)*px)));
evalcond[3]=(((x4817*x4827))+((x4821*x4825))+(((-0.095)*x4823))+(((-0.095)*x4824))+(((0.265)*x4825))+(((-1.0)*py))+(((0.11)*x4816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4828=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4828;
j4eval[1]=IKsign(x4828);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4829=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4829;
j4eval[1]=IKsign(x4829);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4830=((1.0)*sj0);
IkReal x4831=((1.0)*cj0);
IkReal x4832=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4832;
j4eval[1]=((IKabs(((((-1.0)*r12*x4830))+(((-1.0)*r02*x4831)))))+(IKabs(((((-1.0)*cj5*r00*x4831))+((r11*sj0*sj5))+(((-1.0)*cj5*r10*x4830))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x4832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4833=((-1.0)*r20);
IkReal x4835 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4835)==0){
continue;
}
IkReal x4834=pow(x4835,-0.5);
CheckValue<IkReal> x4836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4833),IKFAST_ATAN2_MAGTHRESH);
if(!x4836.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4836.value));
IkReal gconst115=(r21*x4834);
IkReal gconst116=(x4833*x4834);
CheckValue<IkReal> x4837 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4837.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4838=((-1.0)*r20);
IkReal x4839=x4834;
CheckValue<IkReal> x4841 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4838),IKFAST_ATAN2_MAGTHRESH);
if(!x4841.valid){
continue;
}
IkReal x4840=((-1.0)*(x4841.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4840;
IkReal gconst114=x4840;
IkReal gconst115=(r21*x4839);
IkReal gconst116=(x4838*x4839);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4842=((-1.0)*r20);
IkReal x4843=x4834;
CheckValue<IkReal> x4845 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4842),IKFAST_ATAN2_MAGTHRESH);
if(!x4845.valid){
continue;
}
IkReal x4844=((-1.0)*(x4845.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4844;
IkReal gconst114=x4844;
IkReal gconst115=(r21*x4843);
IkReal gconst116=(x4842*x4843);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4846=((-1.0)*r20);
IkReal x4847=x4834;
CheckValue<IkReal> x4849 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4846),IKFAST_ATAN2_MAGTHRESH);
if(!x4849.valid){
continue;
}
IkReal x4848=((-1.0)*(x4849.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4848;
IkReal gconst114=x4848;
IkReal gconst115=(r21*x4847);
IkReal gconst116=(x4846*x4847);
IkReal x4850=((1.0)*(r22*r22));
CheckValue<IkReal> x4854=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4850))),-1);
if(!x4854.valid){
continue;
}
IkReal x4851=x4854.value;
IkReal x4852=((1.0)*x4851);
IkReal x4853=((((-1.0)*x4850))+(((-1.0)*x4852*(r20*r20*r20*r20)))+(((-1.0)*x4852*(r21*r21*r21*r21)))+(((-2.0)*x4851*(r20*r20)*(r21*r21))));
j4eval[0]=x4853;
j4eval[1]=IKsign(x4853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4855=(sj1*sj2);
IkReal x4856=(gconst115*r21);
IkReal x4857=(cj1*cj2);
IkReal x4858=(gconst116*r20);
CheckValue<IkReal> x4859 = IKatan2WithCheck(IkReal((((x4855*x4858))+(((-1.0)*x4855*x4856))+((x4856*x4857))+(((-1.0)*x4857*x4858)))),IkReal((((r22*x4855))+(((-1.0)*r22*x4857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4859.valid){
continue;
}
CheckValue<IkReal> x4860=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4856*x4856)))+(((2.0)*x4856*x4858))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4858*x4858))))),-1);
if(!x4860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4859.value)+(((1.5707963267949)*(x4860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4861=IKcos(j4);
IkReal x4862=IKsin(j4);
IkReal x4863=(cj2*sj1);
IkReal x4864=(gconst115*r21);
IkReal x4865=(cj1*sj2);
IkReal x4866=((1.0)*x4861);
IkReal x4867=(gconst115*x4861);
IkReal x4868=(gconst115*x4862);
IkReal x4869=((1.0)*gconst116*x4862);
evalcond[0]=(((r22*x4862))+((x4861*x4864))+(((-1.0)*gconst116*r20*x4866)));
evalcond[1]=(((r11*x4867))+((r12*x4862))+cj0+(((-1.0)*gconst116*r10*x4866)));
evalcond[2]=(((r01*x4867))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x4866))+((r02*x4862)));
evalcond[3]=((((-1.0)*r20*x4869))+(((-1.0)*r22*x4866))+(((-1.0)*sj1*sj2))+((x4862*x4864))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x4869))+((r01*x4868))+((cj0*x4863))+((cj0*x4865))+(((-1.0)*r02*x4866)));
evalcond[5]=(((r11*x4868))+(((-1.0)*r10*x4869))+(((-1.0)*r12*x4866))+((sj0*x4865))+((sj0*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4870 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4870.valid){
continue;
}
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4870.value)+(((1.5707963267949)*(x4871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4872=IKcos(j4);
IkReal x4873=IKsin(j4);
IkReal x4874=(cj2*sj1);
IkReal x4875=(gconst115*r21);
IkReal x4876=(cj1*sj2);
IkReal x4877=((1.0)*x4872);
IkReal x4878=(gconst115*x4872);
IkReal x4879=(gconst115*x4873);
IkReal x4880=((1.0)*gconst116*x4873);
evalcond[0]=((((-1.0)*gconst116*r20*x4877))+((x4872*x4875))+((r22*x4873)));
evalcond[1]=(cj0+(((-1.0)*gconst116*r10*x4877))+((r12*x4873))+((r11*x4878)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4873))+((r01*x4878))+(((-1.0)*gconst116*r00*x4877)));
evalcond[3]=((((-1.0)*r20*x4880))+(((-1.0)*r22*x4877))+(((-1.0)*sj1*sj2))+((x4873*x4875))+((cj1*cj2)));
evalcond[4]=(((r01*x4879))+((cj0*x4876))+((cj0*x4874))+(((-1.0)*r02*x4877))+(((-1.0)*r00*x4880)));
evalcond[5]=((((-1.0)*r10*x4880))+((sj0*x4874))+((sj0*x4876))+(((-1.0)*r12*x4877))+((r11*x4879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4881.valid){
continue;
}
CheckValue<IkReal> x4882 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4881.value)))+(x4882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4883=IKcos(j4);
IkReal x4884=IKsin(j4);
IkReal x4885=(cj2*sj1);
IkReal x4886=(gconst115*r21);
IkReal x4887=(cj1*sj2);
IkReal x4888=((1.0)*x4883);
IkReal x4889=(gconst115*x4883);
IkReal x4890=(gconst115*x4884);
IkReal x4891=((1.0)*gconst116*x4884);
evalcond[0]=((((-1.0)*gconst116*r20*x4888))+((r22*x4884))+((x4883*x4886)));
evalcond[1]=(((r12*x4884))+((r11*x4889))+cj0+(((-1.0)*gconst116*r10*x4888)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4884))+(((-1.0)*gconst116*r00*x4888))+((r01*x4889)));
evalcond[3]=((((-1.0)*r20*x4891))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x4884*x4886))+(((-1.0)*r22*x4888)));
evalcond[4]=((((-1.0)*r00*x4891))+((cj0*x4887))+((cj0*x4885))+(((-1.0)*r02*x4888))+((r01*x4890)));
evalcond[5]=(((r11*x4890))+(((-1.0)*r12*x4888))+(((-1.0)*r10*x4891))+((sj0*x4887))+((sj0*x4885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4892=((-1.0)*r21);
IkReal x4894 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4894)==0){
continue;
}
IkReal x4893=pow(x4894,-0.5);
CheckValue<IkReal> x4895 = IKatan2WithCheck(IkReal(x4892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4895.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4895.value))));
IkReal gconst118=(x4892*x4893);
IkReal gconst119=((1.0)*r20*x4893);
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4897=((-1.0)*r21);
CheckValue<IkReal> x4900 = IKatan2WithCheck(IkReal(x4897),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4900.valid){
continue;
}
IkReal x4898=((1.0)*(x4900.value));
IkReal x4899=x4893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4898)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4898)));
IkReal gconst118=(x4897*x4899);
IkReal gconst119=((1.0)*r20*x4899);
IkReal x4901=r22*r22;
IkReal x4902=((1.0)*x4901);
CheckValue<IkReal> x4906=IKPowWithIntegerCheck(((-1.0)+x4901),-1);
if(!x4906.valid){
continue;
}
IkReal x4903=x4906.value;
if((((1.0)+(((-1.0)*x4902)))) < -0.00001)
continue;
IkReal x4904=IKsqrt(((1.0)+(((-1.0)*x4902))));
IkReal x4905=(cj0*x4903*x4904);
j4eval[0]=((IKabs((x4905+(((-1.0)*x4902*x4905)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4907=((-1.0)*r21);
CheckValue<IkReal> x4910 = IKatan2WithCheck(IkReal(x4907),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
IkReal x4908=((1.0)*(x4910.value));
IkReal x4909=x4893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4908)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4908)));
IkReal gconst118=(x4907*x4909);
IkReal gconst119=((1.0)*r20*x4909);
IkReal x4911=r22*r22;
IkReal x4912=((1.0)*x4911);
CheckValue<IkReal> x4916=IKPowWithIntegerCheck(((-1.0)+x4911),-1);
if(!x4916.valid){
continue;
}
IkReal x4913=x4916.value;
if((((1.0)+(((-1.0)*x4912)))) < -0.00001)
continue;
IkReal x4914=IKsqrt(((1.0)+(((-1.0)*x4912))));
IkReal x4915=(sj0*x4913*x4914);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4912*x4915))+x4915))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4917=((-1.0)*r21);
CheckValue<IkReal> x4920 = IKatan2WithCheck(IkReal(x4917),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4920.valid){
continue;
}
IkReal x4918=((1.0)*(x4920.value));
IkReal x4919=x4893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4918)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4918)));
IkReal gconst118=(x4917*x4919);
IkReal gconst119=((1.0)*r20*x4919);
IkReal x4921=r22*r22;
IkReal x4922=((1.0)*r12*sj0);
IkReal x4923=((1.0)*cj0*r02);
CheckValue<IkReal> x4927=IKPowWithIntegerCheck(((-1.0)+x4921),-1);
if(!x4927.valid){
continue;
}
IkReal x4924=x4927.value;
if((((1.0)+(((-1.0)*x4921)))) < -0.00001)
continue;
IkReal x4925=IKsqrt(((1.0)+(((-1.0)*x4921))));
IkReal x4926=(r22*x4924*x4925);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4922*x4926))+(((-1.0)*x4923*x4926)))))+(IKabs(((((-1.0)*x4922))+(((-1.0)*x4923))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4928=((1.0)*sj0);
IkReal x4929=((1.0)*gconst119);
CheckValue<IkReal> x4930 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r10*x4928))+((gconst118*r11*sj0))+(((-1.0)*cj0*r00*x4929))+((cj0*gconst118*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4930.valid){
continue;
}
CheckValue<IkReal> x4931=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x4929)))),-1);
if(!x4931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4930.value)+(((1.5707963267949)*(x4931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4932=IKcos(j4);
IkReal x4933=IKsin(j4);
IkReal x4934=(cj1*sj2);
IkReal x4935=(gconst118*r01);
IkReal x4936=(gconst119*r20);
IkReal x4937=(gconst119*r10);
IkReal x4938=(gconst119*r00);
IkReal x4939=(gconst118*r21);
IkReal x4940=(cj2*sj1);
IkReal x4941=(gconst118*r11);
IkReal x4942=((1.0)*x4932);
IkReal x4943=((1.0)*x4933);
evalcond[0]=(((x4932*x4939))+(((-1.0)*x4936*x4942))+((r22*x4933)));
evalcond[1]=(((r12*x4933))+cj0+(((-1.0)*x4937*x4942))+((x4932*x4941)));
evalcond[2]=(((x4932*x4935))+(((-1.0)*sj0))+(((-1.0)*x4938*x4942))+((r02*x4933)));
evalcond[3]=(((x4933*x4939))+(((-1.0)*sj1*sj2))+(((-1.0)*x4936*x4943))+(((-1.0)*r22*x4942))+((cj1*cj2)));
evalcond[4]=(((cj0*x4940))+(((-1.0)*x4938*x4943))+((x4933*x4935))+((cj0*x4934))+(((-1.0)*r02*x4942)));
evalcond[5]=((((-1.0)*x4937*x4943))+(((-1.0)*r12*x4942))+((sj0*x4940))+((x4933*x4941))+((sj0*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4944=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x4944.valid){
continue;
}
CheckValue<IkReal> x4945 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4944.value)))+(x4945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4946=IKcos(j4);
IkReal x4947=IKsin(j4);
IkReal x4948=(cj1*sj2);
IkReal x4949=(gconst118*r01);
IkReal x4950=(gconst119*r20);
IkReal x4951=(gconst119*r10);
IkReal x4952=(gconst119*r00);
IkReal x4953=(gconst118*r21);
IkReal x4954=(cj2*sj1);
IkReal x4955=(gconst118*r11);
IkReal x4956=((1.0)*x4946);
IkReal x4957=((1.0)*x4947);
evalcond[0]=(((x4946*x4953))+(((-1.0)*x4950*x4956))+((r22*x4947)));
evalcond[1]=(cj0+((r12*x4947))+((x4946*x4955))+(((-1.0)*x4951*x4956)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4947))+((x4946*x4949))+(((-1.0)*x4952*x4956)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x4956))+((x4947*x4953))+((cj1*cj2))+(((-1.0)*x4950*x4957)));
evalcond[4]=(((cj0*x4948))+(((-1.0)*r02*x4956))+((x4947*x4949))+(((-1.0)*x4952*x4957))+((cj0*x4954)));
evalcond[5]=(((sj0*x4954))+((sj0*x4948))+(((-1.0)*r12*x4956))+((x4947*x4955))+(((-1.0)*x4951*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4958.value)))+(x4959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=(cj1*sj2);
IkReal x4963=(gconst118*r01);
IkReal x4964=(gconst119*r20);
IkReal x4965=(gconst119*r10);
IkReal x4966=(gconst119*r00);
IkReal x4967=(gconst118*r21);
IkReal x4968=(cj2*sj1);
IkReal x4969=(gconst118*r11);
IkReal x4970=((1.0)*x4960);
IkReal x4971=((1.0)*x4961);
evalcond[0]=(((r22*x4961))+((x4960*x4967))+(((-1.0)*x4964*x4970)));
evalcond[1]=(cj0+((r12*x4961))+(((-1.0)*x4965*x4970))+((x4960*x4969)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4961))+((x4960*x4963))+(((-1.0)*x4966*x4970)));
evalcond[3]=(((x4961*x4967))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4970))+(((-1.0)*x4964*x4971))+((cj1*cj2)));
evalcond[4]=(((x4961*x4963))+(((-1.0)*r02*x4970))+(((-1.0)*x4966*x4971))+((cj0*x4968))+((cj0*x4962)));
evalcond[5]=(((x4961*x4969))+((sj0*x4962))+((sj0*x4968))+(((-1.0)*r12*x4970))+(((-1.0)*x4965*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4973 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4973)==0){
continue;
}
IkReal x4972=pow(x4973,-0.5);
CheckValue<IkReal> x4974 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4974.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4974.value));
IkReal gconst121=((-1.0)*r11*x4972);
IkReal gconst122=(r10*x4972);
CheckValue<IkReal> x4975 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4975.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4975.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4978 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4978.valid){
continue;
}
IkReal x4976=((-1.0)*(x4978.value));
IkReal x4977=x4972;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x4976;
IkReal gconst120=x4976;
IkReal gconst121=((-1.0)*r11*x4977);
IkReal gconst122=(r10*x4977);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4979=((1.0)*sj0);
IkReal x4980=((1.0)*cj0);
CheckValue<IkReal> x4981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r00*x4980))+((cj0*gconst121*r01))+((gconst121*r11*sj0))+(((-1.0)*gconst122*r10*x4979)))),IkReal(((((-1.0)*r12*x4979))+(((-1.0)*r02*x4980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4981.value)))+(x4982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4983=IKcos(j4);
IkReal x4984=IKsin(j4);
IkReal x4985=(gconst121*r11);
IkReal x4986=(cj2*sj1);
IkReal x4987=(gconst122*r00);
IkReal x4988=(gconst122*r10);
IkReal x4989=(gconst122*r20);
IkReal x4990=(cj1*sj2);
IkReal x4991=((1.0)*x4983);
IkReal x4992=((1.0)*x4984);
IkReal x4993=(gconst121*x4984);
IkReal x4994=(gconst121*x4983);
evalcond[0]=(((r22*x4984))+((r21*x4994))+(((-1.0)*x4989*x4991)));
evalcond[1]=(((r12*x4984))+cj0+(((-1.0)*x4988*x4991))+((x4983*x4985)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4987*x4991))+((r01*x4994))+((r02*x4984)));
evalcond[3]=((((-1.0)*r22*x4991))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x4993))+(((-1.0)*x4989*x4992)));
evalcond[4]=(((cj0*x4986))+(((-1.0)*r02*x4991))+(((-1.0)*x4987*x4992))+((r01*x4993))+((cj0*x4990)));
evalcond[5]=(((x4984*x4985))+(((-1.0)*r12*x4991))+((sj0*x4990))+(((-1.0)*x4988*x4992))+((sj0*x4986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4995 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4995.valid){
continue;
}
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x4996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4995.value)+(((1.5707963267949)*(x4996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4997=IKcos(j4);
IkReal x4998=IKsin(j4);
IkReal x4999=(gconst121*r11);
IkReal x5000=(cj2*sj1);
IkReal x5001=(gconst122*r00);
IkReal x5002=(gconst122*r10);
IkReal x5003=(gconst122*r20);
IkReal x5004=(cj1*sj2);
IkReal x5005=((1.0)*x4997);
IkReal x5006=((1.0)*x4998);
IkReal x5007=(gconst121*x4998);
IkReal x5008=(gconst121*x4997);
evalcond[0]=((((-1.0)*x5003*x5005))+((r22*x4998))+((r21*x5008)));
evalcond[1]=(cj0+(((-1.0)*x5002*x5005))+((x4997*x4999))+((r12*x4998)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4998))+(((-1.0)*x5001*x5005))+((r01*x5008)));
evalcond[3]=((((-1.0)*x5003*x5006))+(((-1.0)*sj1*sj2))+((r21*x5007))+((cj1*cj2))+(((-1.0)*r22*x5005)));
evalcond[4]=((((-1.0)*x5001*x5006))+((r01*x5007))+(((-1.0)*r02*x5005))+((cj0*x5000))+((cj0*x5004)));
evalcond[5]=((((-1.0)*x5002*x5006))+((x4998*x4999))+(((-1.0)*r12*x5005))+((sj0*x5000))+((sj0*x5004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5010 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5010)==0){
continue;
}
IkReal x5009=pow(x5010,-0.5);
CheckValue<IkReal> x5011 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5011.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5011.value))));
IkReal gconst124=((1.0)*r11*x5009);
IkReal gconst125=((-1.0)*r10*x5009);
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5012.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5015 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5015.valid){
continue;
}
IkReal x5013=((1.0)*(x5015.value));
IkReal x5014=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5013)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5013)));
IkReal gconst124=((1.0)*r11*x5014);
IkReal gconst125=((-1.0)*r10*x5014);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
IkReal x5016=((1.0)*(x5018.value));
IkReal x5017=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5016)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5016)));
IkReal gconst124=((1.0)*r11*x5017);
IkReal gconst125=((-1.0)*r10*x5017);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5021 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5021.valid){
continue;
}
IkReal x5019=((1.0)*(x5021.value));
IkReal x5020=x5009;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5019)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5019)));
IkReal gconst124=((1.0)*r11*x5020);
IkReal gconst125=((-1.0)*r10*x5020);
IkReal x5022=r12*r12;
IkReal x5023=((1.0)*sj0);
IkReal x5024=(cj0*r02);
IkReal x5025=x5009;
j4eval[0]=((IKabs(((((-1.0)*r12*x5023))+(((-1.0)*x5024)))))+(IKabs((((r12*x5024*x5025))+(((-1.0)*x5023*x5025))+((sj0*x5022*x5025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5026=((1.0)*sj0);
IkReal x5027=((1.0)*gconst125);
CheckValue<IkReal> x5028 = IKatan2WithCheck(IkReal(((((-1.0)*gconst125*r10*x5026))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5027))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*r12*x5026))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
CheckValue<IkReal> x5029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5027))+(((-1.0)*gconst124*r20)))),-1);
if(!x5029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5028.value)+(((1.5707963267949)*(x5029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5030=IKcos(j4);
IkReal x5031=IKsin(j4);
IkReal x5032=(cj2*sj1);
IkReal x5033=(gconst125*r20);
IkReal x5034=(gconst124*r01);
IkReal x5035=(gconst125*r00);
IkReal x5036=(gconst125*r10);
IkReal x5037=(cj1*sj2);
IkReal x5038=((1.0)*x5030);
IkReal x5039=((1.0)*x5031);
IkReal x5040=(gconst124*x5031);
IkReal x5041=(gconst124*x5030);
evalcond[0]=((((-1.0)*x5033*x5038))+((r21*x5041))+((r22*x5031)));
evalcond[1]=(((r12*x5031))+cj0+(((-1.0)*x5036*x5038))+((r11*x5041)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5031))+((x5030*x5034))+(((-1.0)*x5035*x5038)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5033*x5039))+((r21*x5040))+((cj1*cj2))+(((-1.0)*r22*x5038)));
evalcond[4]=(((x5031*x5034))+(((-1.0)*x5035*x5039))+(((-1.0)*r02*x5038))+((cj0*x5037))+((cj0*x5032)));
evalcond[5]=(((sj0*x5037))+((sj0*x5032))+(((-1.0)*r12*x5038))+(((-1.0)*x5036*x5039))+((r11*x5040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5042=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5042.valid){
continue;
}
CheckValue<IkReal> x5043 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5042.value)))+(x5043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5044=IKcos(j4);
IkReal x5045=IKsin(j4);
IkReal x5046=(cj2*sj1);
IkReal x5047=(gconst125*r20);
IkReal x5048=(gconst124*r01);
IkReal x5049=(gconst125*r00);
IkReal x5050=(gconst125*r10);
IkReal x5051=(cj1*sj2);
IkReal x5052=((1.0)*x5044);
IkReal x5053=((1.0)*x5045);
IkReal x5054=(gconst124*x5045);
IkReal x5055=(gconst124*x5044);
evalcond[0]=(((r21*x5055))+(((-1.0)*x5047*x5052))+((r22*x5045)));
evalcond[1]=(cj0+((r11*x5055))+((r12*x5045))+(((-1.0)*x5050*x5052)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5045))+((x5044*x5048))+(((-1.0)*x5049*x5052)));
evalcond[3]=(((r21*x5054))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5052))+((cj1*cj2))+(((-1.0)*x5047*x5053)));
evalcond[4]=(((cj0*x5046))+((x5045*x5048))+((cj0*x5051))+(((-1.0)*r02*x5052))+(((-1.0)*x5049*x5053)));
evalcond[5]=((((-1.0)*r12*x5052))+((r11*x5054))+((sj0*x5046))+(((-1.0)*x5050*x5053))+((sj0*x5051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5056=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5056.valid){
continue;
}
CheckValue<IkReal> x5057 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5056.value)))+(x5057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5058=IKcos(j4);
IkReal x5059=IKsin(j4);
IkReal x5060=(cj2*sj1);
IkReal x5061=(gconst125*r20);
IkReal x5062=(gconst124*r01);
IkReal x5063=(gconst125*r00);
IkReal x5064=(gconst125*r10);
IkReal x5065=(cj1*sj2);
IkReal x5066=((1.0)*x5058);
IkReal x5067=((1.0)*x5059);
IkReal x5068=(gconst124*x5059);
IkReal x5069=(gconst124*x5058);
evalcond[0]=((((-1.0)*x5061*x5066))+((r22*x5059))+((r21*x5069)));
evalcond[1]=(cj0+((r12*x5059))+((r11*x5069))+(((-1.0)*x5064*x5066)));
evalcond[2]=((((-1.0)*sj0))+((x5058*x5062))+(((-1.0)*x5063*x5066))+((r02*x5059)));
evalcond[3]=((((-1.0)*x5061*x5067))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5066))+((r21*x5068))+((cj1*cj2)));
evalcond[4]=(((cj0*x5065))+((cj0*x5060))+(((-1.0)*r02*x5066))+((x5059*x5062))+(((-1.0)*x5063*x5067)));
evalcond[5]=(((sj0*x5060))+((sj0*x5065))+(((-1.0)*r12*x5066))+((r11*x5068))+(((-1.0)*x5064*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5070=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5070;
j4eval[1]=IKsign(x5070);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5071=((1.0)*cj5);
IkReal x5072=((((-1.0)*r21*x5071))+(((-1.0)*r20*sj5)));
j4eval[0]=x5072;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5071)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5073=cj5*cj5;
IkReal x5074=r11*r11;
IkReal x5075=(cj5*r10);
IkReal x5076=(r11*sj5);
IkReal x5077=((((-1.0)*x5073*(r10*r10)))+(((2.0)*x5075*x5076))+((x5073*x5074))+(((-1.0)*(r12*r12)))+(((-1.0)*x5074)));
j4eval[0]=x5077;
j4eval[1]=((IKabs((x5076+(((-1.0)*x5075)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5078=cj5*cj5;
IkReal x5079=r11*r11;
IkReal x5080=(cj5*r10);
IkReal x5081=(r11*sj5);
CheckValue<IkReal> x5082=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5078*(r10*r10)))+(((2.0)*x5080*x5081))+(((-1.0)*(r12*r12)))+(((-1.0)*x5079))+((x5078*x5079)))),-1);
if(!x5082.valid){
continue;
}
CheckValue<IkReal> x5083 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5080))+x5081)),IKFAST_ATAN2_MAGTHRESH);
if(!x5083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5082.value)))+(x5083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5084=IKcos(j4);
IkReal x5085=IKsin(j4);
IkReal x5086=(cj5*r00);
IkReal x5087=(cj5*r10);
IkReal x5088=(cj5*r20);
IkReal x5089=((1.0)*x5084);
IkReal x5090=((1.0)*x5085);
IkReal x5091=(sj5*x5084);
IkReal x5092=(sj5*x5085);
evalcond[0]=(((r21*x5091))+(((-1.0)*x5088*x5089))+((r22*x5085)));
evalcond[1]=((((-1.0)*x5086*x5089))+((r01*x5091))+((r02*x5085)));
evalcond[2]=((1.0)+(((-1.0)*x5087*x5089))+((r11*x5091))+((r12*x5085)));
evalcond[3]=((((-1.0)*r12*x5089))+((r11*x5092))+(((-1.0)*x5087*x5090)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5086*x5090))+((r01*x5092))+(((-1.0)*r02*x5089)));
evalcond[5]=((((-1.0)*x5088*x5090))+((r21*x5092))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5093=((1.0)*cj5);
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5093))+(((-1.0)*r20*sj5)))),-1);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5093)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5094.value)))+(x5095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5096=IKcos(j4);
IkReal x5097=IKsin(j4);
IkReal x5098=(cj5*r00);
IkReal x5099=(cj5*r10);
IkReal x5100=(cj5*r20);
IkReal x5101=((1.0)*x5096);
IkReal x5102=((1.0)*x5097);
IkReal x5103=(sj5*x5096);
IkReal x5104=(sj5*x5097);
evalcond[0]=(((r22*x5097))+(((-1.0)*x5100*x5101))+((r21*x5103)));
evalcond[1]=(((r01*x5103))+(((-1.0)*x5098*x5101))+((r02*x5097)));
evalcond[2]=((1.0)+((r12*x5097))+(((-1.0)*x5099*x5101))+((r11*x5103)));
evalcond[3]=((((-1.0)*x5099*x5102))+((r11*x5104))+(((-1.0)*r12*x5101)));
evalcond[4]=(((cj2*sj1))+((r01*x5104))+(((-1.0)*r02*x5101))+((cj1*sj2))+(((-1.0)*x5098*x5102)));
evalcond[5]=((((-1.0)*r22*x5101))+(((-1.0)*sj1*sj2))+(((-1.0)*x5100*x5102))+((r21*x5104))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5105=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5105.valid){
continue;
}
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5105.value)))+(x5106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5107=IKcos(j4);
IkReal x5108=IKsin(j4);
IkReal x5109=(cj5*r00);
IkReal x5110=(cj5*r10);
IkReal x5111=(cj5*r20);
IkReal x5112=((1.0)*x5107);
IkReal x5113=((1.0)*x5108);
IkReal x5114=(sj5*x5107);
IkReal x5115=(sj5*x5108);
evalcond[0]=((((-1.0)*x5111*x5112))+((r22*x5108))+((r21*x5114)));
evalcond[1]=(((r01*x5114))+((r02*x5108))+(((-1.0)*x5109*x5112)));
evalcond[2]=((1.0)+((r12*x5108))+(((-1.0)*x5110*x5112))+((r11*x5114)));
evalcond[3]=((((-1.0)*x5110*x5113))+((r11*x5115))+(((-1.0)*r12*x5112)));
evalcond[4]=(((cj2*sj1))+((r01*x5115))+(((-1.0)*r02*x5112))+((cj1*sj2))+(((-1.0)*x5109*x5113)));
evalcond[5]=((((-1.0)*r22*x5112))+(((-1.0)*x5111*x5113))+(((-1.0)*sj1*sj2))+((r21*x5115))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5116=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5116;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5117=((1.0)*cj5);
IkReal x5118=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5117)));
j4eval[0]=x5118;
j4eval[1]=((IKabs(((((-1.0)*r20*x5117))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5119=cj5*cj5;
IkReal x5120=r11*r11;
IkReal x5121=(r11*sj5);
IkReal x5122=(cj5*r10);
IkReal x5123=((r12*r12)+(((-2.0)*x5121*x5122))+(((-1.0)*x5119*x5120))+x5120+((x5119*(r10*r10))));
j4eval[0]=x5123;
j4eval[1]=((IKabs((x5121+(((-1.0)*x5122)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5124=cj5*cj5;
IkReal x5125=r11*r11;
IkReal x5126=(cj5*r10);
IkReal x5127=(r11*sj5);
CheckValue<IkReal> x5128 = IKatan2WithCheck(IkReal(r12),IkReal((x5127+(((-1.0)*x5126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5128.valid){
continue;
}
CheckValue<IkReal> x5129=IKPowWithIntegerCheck(IKsign(((r12*r12)+x5125+((x5124*(r10*r10)))+(((-2.0)*x5126*x5127))+(((-1.0)*x5124*x5125)))),-1);
if(!x5129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5128.value)+(((1.5707963267949)*(x5129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5130=IKcos(j4);
IkReal x5131=IKsin(j4);
IkReal x5132=(cj5*r00);
IkReal x5133=(cj5*r10);
IkReal x5134=((1.0)*sj1);
IkReal x5135=(cj5*r20);
IkReal x5136=((1.0)*x5130);
IkReal x5137=((1.0)*x5131);
IkReal x5138=(sj5*x5130);
IkReal x5139=(sj5*x5131);
evalcond[0]=(((r22*x5131))+(((-1.0)*x5135*x5136))+((r21*x5138)));
evalcond[1]=((((-1.0)*x5132*x5136))+((r01*x5138))+((r02*x5131)));
evalcond[2]=((-1.0)+((r12*x5131))+((r11*x5138))+(((-1.0)*x5133*x5136)));
evalcond[3]=(((r11*x5139))+(((-1.0)*r12*x5136))+(((-1.0)*x5133*x5137)));
evalcond[4]=((((-1.0)*x5135*x5137))+(((-1.0)*sj2*x5134))+((r21*x5139))+((cj1*cj2))+(((-1.0)*r22*x5136)));
evalcond[5]=((((-1.0)*x5132*x5137))+((r01*x5139))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x5136))+(((-1.0)*cj2*x5134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5140=((1.0)*cj5);
CheckValue<IkReal> x5141 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5140))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5140)))),-1);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5141.value)+(((1.5707963267949)*(x5142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKcos(j4);
IkReal x5144=IKsin(j4);
IkReal x5145=(cj5*r00);
IkReal x5146=(cj5*r10);
IkReal x5147=((1.0)*sj1);
IkReal x5148=(cj5*r20);
IkReal x5149=((1.0)*x5143);
IkReal x5150=((1.0)*x5144);
IkReal x5151=(sj5*x5143);
IkReal x5152=(sj5*x5144);
evalcond[0]=(((r21*x5151))+(((-1.0)*x5148*x5149))+((r22*x5144)));
evalcond[1]=(((r01*x5151))+((r02*x5144))+(((-1.0)*x5145*x5149)));
evalcond[2]=((-1.0)+((r11*x5151))+((r12*x5144))+(((-1.0)*x5146*x5149)));
evalcond[3]=(((r11*x5152))+(((-1.0)*r12*x5149))+(((-1.0)*x5146*x5150)));
evalcond[4]=(((r21*x5152))+(((-1.0)*sj2*x5147))+((cj1*cj2))+(((-1.0)*x5148*x5150))+(((-1.0)*r22*x5149)));
evalcond[5]=(((r01*x5152))+(((-1.0)*r02*x5149))+(((-1.0)*cj1*sj2))+(((-1.0)*x5145*x5150))+(((-1.0)*cj2*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5153.value)))+(x5154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5155=IKcos(j4);
IkReal x5156=IKsin(j4);
IkReal x5157=(cj5*r00);
IkReal x5158=(cj5*r10);
IkReal x5159=((1.0)*sj1);
IkReal x5160=(cj5*r20);
IkReal x5161=((1.0)*x5155);
IkReal x5162=((1.0)*x5156);
IkReal x5163=(sj5*x5155);
IkReal x5164=(sj5*x5156);
evalcond[0]=(((r21*x5163))+(((-1.0)*x5160*x5161))+((r22*x5156)));
evalcond[1]=((((-1.0)*x5157*x5161))+((r01*x5163))+((r02*x5156)));
evalcond[2]=((-1.0)+((r12*x5156))+(((-1.0)*x5158*x5161))+((r11*x5163)));
evalcond[3]=((((-1.0)*r12*x5161))+(((-1.0)*x5158*x5162))+((r11*x5164)));
evalcond[4]=((((-1.0)*r22*x5161))+((r21*x5164))+(((-1.0)*x5160*x5162))+(((-1.0)*sj2*x5159))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x5157*x5162))+(((-1.0)*cj2*x5159))+((r01*x5164))+(((-1.0)*r02*x5161))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5166 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5166)==0){
continue;
}
IkReal x5165=pow(x5166,-0.5);
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5167.value));
IkReal gconst127=((-1.0)*r01*x5165);
IkReal gconst128=(r00*x5165);
CheckValue<IkReal> x5168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5168.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
IkReal x5169=((-1.0)*(x5171.value));
IkReal x5170=x5165;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5169;
IkReal gconst126=x5169;
IkReal gconst127=((-1.0)*r01*x5170);
IkReal gconst128=(r00*x5170);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5172=((1.0)*sj0);
IkReal x5173=((1.0)*gconst128);
CheckValue<IkReal> x5174 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5173))+((cj0*gconst127*r01))+(((-1.0)*gconst128*r10*x5172))+((gconst127*r11*sj0)))),IkReal(((((-1.0)*r12*x5172))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5173))+(((-1.0)*gconst127*r20)))),-1);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5174.value)+(((1.5707963267949)*(x5175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=(gconst127*r01);
IkReal x5179=(cj2*sj1);
IkReal x5180=(gconst128*r10);
IkReal x5181=(gconst128*r00);
IkReal x5182=(gconst128*r20);
IkReal x5183=(cj1*sj2);
IkReal x5184=((1.0)*x5176);
IkReal x5185=((1.0)*x5177);
IkReal x5186=(gconst127*x5176);
IkReal x5187=(gconst127*x5177);
evalcond[0]=((((-1.0)*x5182*x5184))+((r21*x5186))+((r22*x5177)));
evalcond[1]=(cj0+((r12*x5177))+((r11*x5186))+(((-1.0)*x5180*x5184)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5177))+((x5176*x5178))+(((-1.0)*x5181*x5184)));
evalcond[3]=((((-1.0)*r22*x5184))+(((-1.0)*sj1*sj2))+(((-1.0)*x5182*x5185))+((cj1*cj2))+((r21*x5187)));
evalcond[4]=((((-1.0)*r02*x5184))+((cj0*x5179))+((cj0*x5183))+((x5177*x5178))+(((-1.0)*x5181*x5185)));
evalcond[5]=(((sj0*x5183))+(((-1.0)*r12*x5184))+((r11*x5187))+(((-1.0)*x5180*x5185))+((sj0*x5179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5188.value)))+(x5189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5190=IKcos(j4);
IkReal x5191=IKsin(j4);
IkReal x5192=(gconst127*r01);
IkReal x5193=(cj2*sj1);
IkReal x5194=(gconst128*r10);
IkReal x5195=(gconst128*r00);
IkReal x5196=(gconst128*r20);
IkReal x5197=(cj1*sj2);
IkReal x5198=((1.0)*x5190);
IkReal x5199=((1.0)*x5191);
IkReal x5200=(gconst127*x5190);
IkReal x5201=(gconst127*x5191);
evalcond[0]=(((r22*x5191))+(((-1.0)*x5196*x5198))+((r21*x5200)));
evalcond[1]=(cj0+((r11*x5200))+((r12*x5191))+(((-1.0)*x5194*x5198)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5191))+(((-1.0)*x5195*x5198))+((x5190*x5192)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5198))+((cj1*cj2))+(((-1.0)*x5196*x5199))+((r21*x5201)));
evalcond[4]=(((cj0*x5197))+((cj0*x5193))+(((-1.0)*r02*x5198))+(((-1.0)*x5195*x5199))+((x5191*x5192)));
evalcond[5]=((((-1.0)*r12*x5198))+((sj0*x5197))+((sj0*x5193))+((r11*x5201))+(((-1.0)*x5194*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5203 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5203)==0){
continue;
}
IkReal x5202=pow(x5203,-0.5);
CheckValue<IkReal> x5204 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5204.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5204.value))));
IkReal gconst130=((1.0)*r01*x5202);
IkReal gconst131=((-1.0)*r00*x5202);
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5208.valid){
continue;
}
IkReal x5206=((1.0)*(x5208.value));
IkReal x5207=x5202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5206)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5206)));
IkReal gconst130=((1.0)*r01*x5207);
IkReal gconst131=((-1.0)*r00*x5207);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5211 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5211.valid){
continue;
}
IkReal x5209=((1.0)*(x5211.value));
IkReal x5210=x5202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5209)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5209)));
IkReal gconst130=((1.0)*r01*x5210);
IkReal gconst131=((-1.0)*r00*x5210);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
IkReal x5212=((1.0)*(x5214.value));
IkReal x5213=x5202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5212)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5212)));
IkReal gconst130=((1.0)*r01*x5213);
IkReal gconst131=((-1.0)*r00*x5213);
IkReal x5215=r02*r02;
IkReal x5216=(r12*sj0);
IkReal x5217=((1.0)*cj0);
IkReal x5218=x5202;
j4eval[0]=((IKabs(((((-1.0)*x5217*x5218))+((cj0*x5215*x5218))+((r02*x5216*x5218)))))+(IKabs(((((-1.0)*x5216))+(((-1.0)*r02*x5217))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5219=((1.0)*sj0);
IkReal x5220=((1.0)*gconst131);
CheckValue<IkReal> x5221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5220))+(((-1.0)*gconst130*r20)))),-1);
if(!x5221.valid){
continue;
}
CheckValue<IkReal> x5222 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+((gconst130*r11*sj0))+(((-1.0)*gconst131*r10*x5219))+(((-1.0)*cj0*r00*x5220)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5221.value)))+(x5222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5223=IKcos(j4);
IkReal x5224=IKsin(j4);
IkReal x5225=(gconst131*r10);
IkReal x5226=(gconst130*r11);
IkReal x5227=(gconst131*r20);
IkReal x5228=(cj2*sj1);
IkReal x5229=(gconst131*r00);
IkReal x5230=(cj1*sj2);
IkReal x5231=((1.0)*x5223);
IkReal x5232=((1.0)*x5224);
IkReal x5233=(gconst130*x5223);
IkReal x5234=(gconst130*x5224);
evalcond[0]=(((r22*x5224))+((r21*x5233))+(((-1.0)*x5227*x5231)));
evalcond[1]=(cj0+((x5223*x5226))+((r12*x5224))+(((-1.0)*x5225*x5231)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5224))+((r01*x5233))+(((-1.0)*x5229*x5231)));
evalcond[3]=((((-1.0)*r22*x5231))+(((-1.0)*sj1*sj2))+((r21*x5234))+(((-1.0)*x5227*x5232))+((cj1*cj2)));
evalcond[4]=(((cj0*x5230))+(((-1.0)*r02*x5231))+((r01*x5234))+(((-1.0)*x5229*x5232))+((cj0*x5228)));
evalcond[5]=((((-1.0)*r12*x5231))+((sj0*x5230))+((sj0*x5228))+((x5224*x5226))+(((-1.0)*x5225*x5232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5235.value)+(((1.5707963267949)*(x5236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5237=IKcos(j4);
IkReal x5238=IKsin(j4);
IkReal x5239=(gconst131*r10);
IkReal x5240=(gconst130*r11);
IkReal x5241=(gconst131*r20);
IkReal x5242=(cj2*sj1);
IkReal x5243=(gconst131*r00);
IkReal x5244=(cj1*sj2);
IkReal x5245=((1.0)*x5237);
IkReal x5246=((1.0)*x5238);
IkReal x5247=(gconst130*x5237);
IkReal x5248=(gconst130*x5238);
evalcond[0]=((((-1.0)*x5241*x5245))+((r21*x5247))+((r22*x5238)));
evalcond[1]=(((x5237*x5240))+cj0+((r12*x5238))+(((-1.0)*x5239*x5245)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5243*x5245))+((r01*x5247))+((r02*x5238)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5245))+(((-1.0)*x5241*x5246))+((r21*x5248))+((cj1*cj2)));
evalcond[4]=(((cj0*x5244))+((cj0*x5242))+(((-1.0)*x5243*x5246))+((r01*x5248))+(((-1.0)*r02*x5245)));
evalcond[5]=((((-1.0)*r12*x5245))+((x5238*x5240))+((sj0*x5242))+((sj0*x5244))+(((-1.0)*x5239*x5246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5249=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5249.valid){
continue;
}
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5249.value)))+(x5250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5251=IKcos(j4);
IkReal x5252=IKsin(j4);
IkReal x5253=(gconst131*r10);
IkReal x5254=(gconst130*r11);
IkReal x5255=(gconst131*r20);
IkReal x5256=(cj2*sj1);
IkReal x5257=(gconst131*r00);
IkReal x5258=(cj1*sj2);
IkReal x5259=((1.0)*x5251);
IkReal x5260=((1.0)*x5252);
IkReal x5261=(gconst130*x5251);
IkReal x5262=(gconst130*x5252);
evalcond[0]=(((r22*x5252))+(((-1.0)*x5255*x5259))+((r21*x5261)));
evalcond[1]=(((r12*x5252))+cj0+((x5251*x5254))+(((-1.0)*x5253*x5259)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5261))+(((-1.0)*x5257*x5259))+((r02*x5252)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5255*x5260))+(((-1.0)*r22*x5259))+((r21*x5262))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5257*x5260))+((cj0*x5256))+((cj0*x5258)));
evalcond[5]=(((sj0*x5256))+((sj0*x5258))+(((-1.0)*r12*x5259))+((x5252*x5254))+(((-1.0)*x5253*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5263=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5263;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5264=((1.0)*cj5);
IkReal x5265=((((-1.0)*r21*x5264))+(((-1.0)*r20*sj5)));
j4eval[0]=x5265;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5264))))));
j4eval[2]=IKsign(x5265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5266=cj5*cj5;
IkReal x5267=r01*r01;
IkReal x5268=(cj5*r00);
IkReal x5269=(r01*sj5);
IkReal x5270=((((-1.0)*x5266*x5267))+x5267+((x5266*(r00*r00)))+(r02*r02)+(((-2.0)*x5268*x5269)));
j4eval[0]=x5270;
j4eval[1]=IKsign(x5270);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5268))+x5269))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5271=cj5*cj5;
IkReal x5272=r01*r01;
IkReal x5273=(r01*sj5);
IkReal x5274=(cj5*r00);
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(r02),IkReal((x5273+(((-1.0)*x5274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5271*x5272))+x5272+((x5271*(r00*r00)))+(r02*r02)+(((-2.0)*x5273*x5274)))),-1);
if(!x5276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5275.value)+(((1.5707963267949)*(x5276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5277=IKcos(j4);
IkReal x5278=IKsin(j4);
IkReal x5279=(cj5*r00);
IkReal x5280=(cj5*r10);
IkReal x5281=(cj5*r20);
IkReal x5282=((1.0)*x5277);
IkReal x5283=((1.0)*x5278);
IkReal x5284=(sj5*x5277);
IkReal x5285=(sj5*x5278);
evalcond[0]=((((-1.0)*x5281*x5282))+((r22*x5278))+((r21*x5284)));
evalcond[1]=(((r11*x5284))+(((-1.0)*x5280*x5282))+((r12*x5278)));
evalcond[2]=((-1.0)+((r02*x5278))+(((-1.0)*x5279*x5282))+((r01*x5284)));
evalcond[3]=((((-1.0)*x5279*x5283))+((r01*x5285))+(((-1.0)*r02*x5282)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5282))+((r11*x5285))+(((-1.0)*x5280*x5283)));
evalcond[5]=((((-1.0)*r22*x5282))+(((-1.0)*x5281*x5283))+((r21*x5285))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5286=((1.0)*cj5);
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5286))+(((-1.0)*r20*sj5)))),-1);
if(!x5287.valid){
continue;
}
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5286)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5287.value)))+(x5288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5289=IKcos(j4);
IkReal x5290=IKsin(j4);
IkReal x5291=(cj5*r00);
IkReal x5292=(cj5*r10);
IkReal x5293=(cj5*r20);
IkReal x5294=((1.0)*x5289);
IkReal x5295=((1.0)*x5290);
IkReal x5296=(sj5*x5289);
IkReal x5297=(sj5*x5290);
evalcond[0]=(((r22*x5290))+((r21*x5296))+(((-1.0)*x5293*x5294)));
evalcond[1]=(((r12*x5290))+(((-1.0)*x5292*x5294))+((r11*x5296)));
evalcond[2]=((-1.0)+((r02*x5290))+((r01*x5296))+(((-1.0)*x5291*x5294)));
evalcond[3]=(((r01*x5297))+(((-1.0)*r02*x5294))+(((-1.0)*x5291*x5295)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5294))+(((-1.0)*x5292*x5295))+((r11*x5297)));
evalcond[5]=((((-1.0)*r22*x5294))+(((-1.0)*sj1*sj2))+((r21*x5297))+(((-1.0)*x5293*x5295))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
CheckValue<IkReal> x5299=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5298.value)+(((1.5707963267949)*(x5299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5300=IKcos(j4);
IkReal x5301=IKsin(j4);
IkReal x5302=(cj5*r00);
IkReal x5303=(cj5*r10);
IkReal x5304=(cj5*r20);
IkReal x5305=((1.0)*x5300);
IkReal x5306=((1.0)*x5301);
IkReal x5307=(sj5*x5300);
IkReal x5308=(sj5*x5301);
evalcond[0]=(((r21*x5307))+((r22*x5301))+(((-1.0)*x5304*x5305)));
evalcond[1]=((((-1.0)*x5303*x5305))+((r12*x5301))+((r11*x5307)));
evalcond[2]=((-1.0)+(((-1.0)*x5302*x5305))+((r02*x5301))+((r01*x5307)));
evalcond[3]=((((-1.0)*x5302*x5306))+(((-1.0)*r02*x5305))+((r01*x5308)));
evalcond[4]=((((-1.0)*x5303*x5306))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5305))+((r11*x5308)));
evalcond[5]=((((-1.0)*r22*x5305))+((r21*x5308))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5304*x5306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5309=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5309;
j4eval[1]=IKsign(x5309);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5310=((1.0)*cj5);
IkReal x5311=((((-1.0)*r11*x5310))+(((-1.0)*r10*sj5)));
j4eval[0]=x5311;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5310))))));
j4eval[2]=IKsign(x5311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5312=cj5*cj5;
IkReal x5313=r01*r01;
IkReal x5314=(r01*sj5);
IkReal x5315=(cj5*r00);
IkReal x5316=((((-1.0)*x5312*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x5314*x5315))+(((-1.0)*x5313))+((x5312*x5313)));
j4eval[0]=x5316;
j4eval[1]=IKsign(x5316);
j4eval[2]=((IKabs(r02))+(IKabs((x5314+(((-1.0)*x5315))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5317=cj5*cj5;
IkReal x5318=r01*r01;
IkReal x5319=(r01*sj5);
IkReal x5320=(cj5*r00);
CheckValue<IkReal> x5321 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5320))+x5319)),IKFAST_ATAN2_MAGTHRESH);
if(!x5321.valid){
continue;
}
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x5317*x5318))+(((-1.0)*x5318))+(((2.0)*x5319*x5320))+(((-1.0)*x5317*(r00*r00))))),-1);
if(!x5322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5321.value)+(((1.5707963267949)*(x5322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5323=IKcos(j4);
IkReal x5324=IKsin(j4);
IkReal x5325=(cj5*r00);
IkReal x5326=(cj5*r10);
IkReal x5327=((1.0)*sj1);
IkReal x5328=(cj5*r20);
IkReal x5329=((1.0)*x5323);
IkReal x5330=((1.0)*x5324);
IkReal x5331=(sj5*x5323);
IkReal x5332=(sj5*x5324);
evalcond[0]=((((-1.0)*x5328*x5329))+((r22*x5324))+((r21*x5331)));
evalcond[1]=(((r11*x5331))+((r12*x5324))+(((-1.0)*x5326*x5329)));
evalcond[2]=((1.0)+(((-1.0)*x5325*x5329))+((r01*x5331))+((r02*x5324)));
evalcond[3]=((((-1.0)*r02*x5329))+((r01*x5332))+(((-1.0)*x5325*x5330)));
evalcond[4]=((((-1.0)*sj2*x5327))+(((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5332))+((cj1*cj2)));
evalcond[5]=(((r11*x5332))+(((-1.0)*x5326*x5330))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5329))+(((-1.0)*cj2*x5327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5333=((1.0)*cj5);
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5333))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5333)))),-1);
if(!x5335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5334.value)+(((1.5707963267949)*(x5335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5336=IKcos(j4);
IkReal x5337=IKsin(j4);
IkReal x5338=(cj5*r00);
IkReal x5339=(cj5*r10);
IkReal x5340=((1.0)*sj1);
IkReal x5341=(cj5*r20);
IkReal x5342=((1.0)*x5336);
IkReal x5343=((1.0)*x5337);
IkReal x5344=(sj5*x5336);
IkReal x5345=(sj5*x5337);
evalcond[0]=((((-1.0)*x5341*x5342))+((r22*x5337))+((r21*x5344)));
evalcond[1]=(((r12*x5337))+(((-1.0)*x5339*x5342))+((r11*x5344)));
evalcond[2]=((1.0)+((r01*x5344))+(((-1.0)*x5338*x5342))+((r02*x5337)));
evalcond[3]=((((-1.0)*r02*x5342))+((r01*x5345))+(((-1.0)*x5338*x5343)));
evalcond[4]=((((-1.0)*sj2*x5340))+(((-1.0)*x5341*x5343))+(((-1.0)*r22*x5342))+((cj1*cj2))+((r21*x5345)));
evalcond[5]=((((-1.0)*x5339*x5343))+(((-1.0)*cj2*x5340))+(((-1.0)*cj1*sj2))+((r11*x5345))+(((-1.0)*r12*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5346.valid){
continue;
}
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5346.value)))+(x5347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5348=IKcos(j4);
IkReal x5349=IKsin(j4);
IkReal x5350=(cj5*r00);
IkReal x5351=(cj5*r10);
IkReal x5352=((1.0)*sj1);
IkReal x5353=(cj5*r20);
IkReal x5354=((1.0)*x5348);
IkReal x5355=((1.0)*x5349);
IkReal x5356=(sj5*x5348);
IkReal x5357=(sj5*x5349);
evalcond[0]=((((-1.0)*x5353*x5354))+((r22*x5349))+((r21*x5356)));
evalcond[1]=((((-1.0)*x5351*x5354))+((r12*x5349))+((r11*x5356)));
evalcond[2]=((1.0)+((r01*x5356))+(((-1.0)*x5350*x5354))+((r02*x5349)));
evalcond[3]=((((-1.0)*r02*x5354))+((r01*x5357))+(((-1.0)*x5350*x5355)));
evalcond[4]=((((-1.0)*x5353*x5355))+(((-1.0)*r22*x5354))+((cj1*cj2))+(((-1.0)*sj2*x5352))+((r21*x5357)));
evalcond[5]=((((-1.0)*x5351*x5355))+(((-1.0)*cj2*x5352))+((r11*x5357))+(((-1.0)*r12*x5354))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5358=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5358);
rxp1_1=(px*r21);
rxp1_2=(r11*x5358);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5359=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5359);
rxp1_1=(px*r21);
rxp1_2=(r11*x5359);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5360=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5360);
rxp1_1=(px*r21);
rxp1_2=(r11*x5360);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5363=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5363.valid){
continue;
}
IkReal x5361=x5363.value;
IkReal x5362=((1.0)*sj0*x5361);
sj4array[0]=((((-1.0)*cj1*sj2*x5362))+(((-1.0)*cj2*sj1*x5362)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5364=IKcos(j4);
IkReal x5365=IKsin(j4);
IkReal x5366=(r21*sj5);
IkReal x5367=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5364);
evalcond[1]=(((r02*x5365))+(((-1.0)*sj0)));
evalcond[2]=(((x5364*x5366))+(((-1.0)*x5364*x5367)));
evalcond[3]=(((r11*sj5*x5364))+(((-1.0)*cj5*r10*x5364)));
evalcond[4]=(((x5365*x5366))+(((-1.0)*sj1*sj2))+(((-1.0)*x5365*x5367))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5369=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5369.valid){
continue;
}
IkReal x5368=x5369.value;
sj4array[0]=(((sj1*sj2*x5368))+(((-1.0)*cj1*cj2*x5368)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5370=IKcos(j4);
IkReal x5371=IKsin(j4);
IkReal x5372=((1.0)*cj5);
IkReal x5373=(sj5*x5370);
evalcond[0]=((-1.0)*r02*x5370);
evalcond[1]=((((-1.0)*sj0))+((r02*x5371)));
evalcond[2]=(((r21*x5373))+(((-1.0)*r20*x5370*x5372)));
evalcond[3]=((((-1.0)*r10*x5370*x5372))+((r11*x5373)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r10*x5371*x5372))+((r11*sj5*x5371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(r02,-1);
if(!x5374.valid){
continue;
}
sj4array[0]=(sj0*(x5374.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5375=IKcos(j4);
IkReal x5376=IKsin(j4);
IkReal x5377=(r21*sj5);
IkReal x5378=(r11*sj5);
IkReal x5379=((1.0)*cj5*x5376);
IkReal x5380=((1.0)*cj5*x5375);
evalcond[0]=((-1.0)*r02*x5375);
evalcond[1]=((((-1.0)*r20*x5380))+((x5375*x5377)));
evalcond[2]=((((-1.0)*r10*x5380))+((x5375*x5378)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x5376*x5377))+(((-1.0)*r20*x5379))+((cj1*cj2)));
evalcond[4]=(((cj1*sj0*sj2))+((x5376*x5378))+((cj2*sj0*sj1))+(((-1.0)*r10*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5381=((1.0)*sj0);
IkReal x5382=((1.0)*cj0);
CheckValue<IkReal> x5383 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x5382))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x5381)))),IkReal(((((-1.0)*r02*x5382))+(((-1.0)*r12*x5381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5383.valid){
continue;
}
CheckValue<IkReal> x5384=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5383.value)+(((1.5707963267949)*(x5384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5385=IKcos(j4);
IkReal x5386=IKsin(j4);
IkReal x5387=(cj5*r00);
IkReal x5388=(cj5*r10);
IkReal x5389=(cj2*sj1);
IkReal x5390=(cj5*r20);
IkReal x5391=(cj1*sj2);
IkReal x5392=((1.0)*x5385);
IkReal x5393=((1.0)*x5386);
IkReal x5394=(sj5*x5385);
IkReal x5395=(sj5*x5386);
evalcond[0]=((((-1.0)*x5390*x5392))+((r21*x5394))+((r22*x5386)));
evalcond[1]=((((-1.0)*x5388*x5392))+cj0+((r11*x5394))+((r12*x5386)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5386))+(((-1.0)*x5387*x5392))+((r01*x5394)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5390*x5393))+((cj1*cj2))+(((-1.0)*r22*x5392))+((r21*x5395)));
evalcond[4]=(((cj0*x5391))+(((-1.0)*r02*x5392))+((cj0*x5389))+(((-1.0)*x5387*x5393))+((r01*x5395)));
evalcond[5]=(((sj0*x5389))+(((-1.0)*x5388*x5393))+((r11*x5395))+(((-1.0)*r12*x5392))+((sj0*x5391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKcos(j4);
IkReal x5399=IKsin(j4);
IkReal x5400=(cj5*r00);
IkReal x5401=(cj5*r10);
IkReal x5402=(cj2*sj1);
IkReal x5403=(cj5*r20);
IkReal x5404=(cj1*sj2);
IkReal x5405=((1.0)*x5398);
IkReal x5406=((1.0)*x5399);
IkReal x5407=(sj5*x5398);
IkReal x5408=(sj5*x5399);
evalcond[0]=(((r21*x5407))+((r22*x5399))+(((-1.0)*x5403*x5405)));
evalcond[1]=(cj0+((r12*x5399))+((r11*x5407))+(((-1.0)*x5401*x5405)));
evalcond[2]=((((-1.0)*x5400*x5405))+(((-1.0)*sj0))+((r02*x5399))+((r01*x5407)));
evalcond[3]=(((r21*x5408))+(((-1.0)*x5403*x5406))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5405))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5400*x5406))+(((-1.0)*r02*x5405))+((cj0*x5404))+((cj0*x5402))+((r01*x5408)));
evalcond[5]=(((sj0*x5404))+((sj0*x5402))+(((-1.0)*r12*x5405))+((r11*x5408))+(((-1.0)*x5401*x5406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5409 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5409.value)+(((1.5707963267949)*(x5410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKcos(j4);
IkReal x5412=IKsin(j4);
IkReal x5413=(cj5*r00);
IkReal x5414=(cj5*r10);
IkReal x5415=(cj2*sj1);
IkReal x5416=(cj5*r20);
IkReal x5417=(cj1*sj2);
IkReal x5418=((1.0)*x5411);
IkReal x5419=((1.0)*x5412);
IkReal x5420=(sj5*x5411);
IkReal x5421=(sj5*x5412);
evalcond[0]=((((-1.0)*x5416*x5418))+((r22*x5412))+((r21*x5420)));
evalcond[1]=(cj0+(((-1.0)*x5414*x5418))+((r12*x5412))+((r11*x5420)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5420))+((r02*x5412))+(((-1.0)*x5413*x5418)));
evalcond[3]=((((-1.0)*x5416*x5419))+(((-1.0)*sj1*sj2))+((r21*x5421))+((cj1*cj2))+(((-1.0)*r22*x5418)));
evalcond[4]=((((-1.0)*r02*x5418))+((r01*x5421))+((cj0*x5417))+((cj0*x5415))+(((-1.0)*x5413*x5419)));
evalcond[5]=(((sj0*x5417))+((sj0*x5415))+(((-1.0)*x5414*x5419))+(((-1.0)*r12*x5418))+((r11*x5421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5422=r21*r21;
IkReal x5423=cj5*cj5;
IkReal x5424=(sj1*sj2);
IkReal x5425=(r21*sj5);
IkReal x5426=(cj1*cj2);
IkReal x5427=(cj5*r20);
CheckValue<IkReal> x5428=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5423*(r20*r20)))+((x5422*x5423))+(((-1.0)*(r22*r22)))+(((-1.0)*x5422))+(((2.0)*x5425*x5427)))),-1);
if(!x5428.valid){
continue;
}
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal((((x5424*x5427))+(((-1.0)*x5424*x5425))+((x5425*x5426))+(((-1.0)*x5426*x5427)))),IkReal(((((-1.0)*r22*x5426))+((r22*x5424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5428.value)))+(x5429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5430=IKcos(j4);
IkReal x5431=IKsin(j4);
IkReal x5432=(r21*sj5);
IkReal x5433=(cj5*r20);
IkReal x5434=((1.0)*x5430);
evalcond[0]=(((r22*x5431))+(((-1.0)*x5433*x5434))+((x5430*x5432)));
evalcond[1]=((((-1.0)*x5431*x5433))+(((-1.0)*sj1*sj2))+((x5431*x5432))+(((-1.0)*r22*x5434))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5435=(cj4*cj5);
IkReal x5436=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x5435))+((r02*sj4))+((r01*x5436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5435))+(((-1.0)*r11*x5436))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5435))+((r02*sj4))+((r01*x5436))))+IKsqr((((r10*x5435))+(((-1.0)*r11*x5436))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x5435))+((r02*sj4))+((r01*x5436))), (((r10*x5435))+(((-1.0)*r11*x5436))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5437=IKcos(j0);
IkReal x5438=IKsin(j0);
IkReal x5439=(r00*sj5);
IkReal x5440=(cj5*r01);
IkReal x5441=((1.0)*sj2);
IkReal x5442=(r11*sj5);
IkReal x5443=(cj1*cj2);
IkReal x5444=((0.24)*cj2);
IkReal x5445=(cj1*sj2);
IkReal x5446=(cj5*r11);
IkReal x5447=((1.0)*cj4);
IkReal x5448=(r01*sj5);
IkReal x5449=(r10*sj5);
IkReal x5450=(sj1*x5438);
IkReal x5451=(cj5*x5447);
IkReal x5452=(sj1*x5437);
IkReal x5453=((1.0)*cj5*sj4);
evalcond[0]=(x5437+((r12*sj4))+(((-1.0)*r10*x5451))+((cj4*x5442)));
evalcond[1]=((((-1.0)*x5438))+((r02*sj4))+(((-1.0)*r00*x5451))+((cj4*x5448)));
evalcond[2]=(((x5437*x5443))+x5440+x5439+(((-1.0)*x5441*x5452)));
evalcond[3]=(x5449+x5446+(((-1.0)*x5441*x5450))+((x5438*x5443)));
evalcond[4]=(((x5437*x5445))+((sj4*x5448))+((cj2*x5452))+(((-1.0)*r02*x5447))+(((-1.0)*r00*x5453)));
evalcond[5]=(((sj4*x5442))+(((-1.0)*r12*x5447))+((x5438*x5445))+((cj2*x5450))+(((-1.0)*r10*x5453)));
evalcond[6]=((((-0.11)*x5438))+((x5444*x5452))+(((-1.0)*px))+(((-0.095)*x5439))+(((0.265)*x5452))+(((-0.095)*x5440))+(((0.24)*x5437*x5445)));
evalcond[7]=((((0.11)*x5437))+(((0.24)*x5438*x5445))+((x5444*x5450))+(((-1.0)*py))+(((0.265)*x5450))+(((-0.095)*x5449))+(((-0.095)*x5446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5454=((1.0)*cj5);
IkReal x5455=((1.0)*sj5);
CheckValue<IkReal> x5456 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5455))+(((-1.0)*r11*x5454)))),IkReal(((((-1.0)*r01*x5454))+(((-1.0)*r00*x5455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5456.valid){
continue;
}
CheckValue<IkReal> x5457=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5457.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5456.value)+(((1.5707963267949)*(x5457.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5458=IKcos(j0);
IkReal x5459=IKsin(j0);
IkReal x5460=(cj5*r01);
IkReal x5461=((1.0)*sj2);
IkReal x5462=(cj1*cj2);
IkReal x5463=((0.24)*cj2);
IkReal x5464=(r00*sj5);
IkReal x5465=(cj5*r11);
IkReal x5466=(r10*sj5);
IkReal x5467=(sj1*x5459);
IkReal x5468=(sj1*x5458);
IkReal x5469=((0.24)*cj1*sj2);
evalcond[0]=(x5460+x5464+((x5458*x5462))+(((-1.0)*x5461*x5468)));
evalcond[1]=(x5465+x5466+(((-1.0)*x5461*x5467))+((x5459*x5462)));
evalcond[2]=(((x5458*x5469))+(((-0.095)*x5460))+(((-0.095)*x5464))+(((-1.0)*px))+((x5463*x5468))+(((0.265)*x5468))+(((-0.11)*x5459)));
evalcond[3]=((((-0.095)*x5466))+(((-0.095)*x5465))+(((-1.0)*py))+((x5463*x5467))+(((0.265)*x5467))+(((0.11)*x5458))+((x5459*x5469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5470=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5470;
j4eval[1]=IKsign(x5470);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5471=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5471;
j4eval[1]=IKsign(x5471);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5472=((1.0)*sj0);
IkReal x5473=((1.0)*cj0);
IkReal x5474=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5474;
j4eval[1]=((IKabs(((((-1.0)*r12*x5472))+(((-1.0)*r02*x5473)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x5472))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x5473))))));
j4eval[2]=IKsign(x5474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5475=((-1.0)*r20);
IkReal x5477 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5477)==0){
continue;
}
IkReal x5476=pow(x5477,-0.5);
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5475),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5478.value));
IkReal gconst115=(r21*x5476);
IkReal gconst116=(x5475*x5476);
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5480=((-1.0)*r20);
IkReal x5481=x5476;
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5480),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
IkReal x5482=((-1.0)*(x5483.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5482;
IkReal gconst114=x5482;
IkReal gconst115=(r21*x5481);
IkReal gconst116=(x5480*x5481);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5484=((-1.0)*r20);
IkReal x5485=x5476;
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5484),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
IkReal x5486=((-1.0)*(x5487.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5486;
IkReal gconst114=x5486;
IkReal gconst115=(r21*x5485);
IkReal gconst116=(x5484*x5485);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5488=((-1.0)*r20);
IkReal x5489=x5476;
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5488),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
IkReal x5490=((-1.0)*(x5491.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5490;
IkReal gconst114=x5490;
IkReal gconst115=(r21*x5489);
IkReal gconst116=(x5488*x5489);
IkReal x5492=((1.0)*(r22*r22));
CheckValue<IkReal> x5496=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5492))),-1);
if(!x5496.valid){
continue;
}
IkReal x5493=x5496.value;
IkReal x5494=((1.0)*x5493);
IkReal x5495=((((-1.0)*x5492))+(((-1.0)*x5494*(r20*r20*r20*r20)))+(((-2.0)*x5493*(r20*r20)*(r21*r21)))+(((-1.0)*x5494*(r21*r21*r21*r21))));
j4eval[0]=x5495;
j4eval[1]=IKsign(x5495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5497=(sj1*sj2);
IkReal x5498=(gconst115*r21);
IkReal x5499=(cj1*cj2);
IkReal x5500=(gconst116*r20);
CheckValue<IkReal> x5501 = IKatan2WithCheck(IkReal(((((-1.0)*x5497*x5498))+(((-1.0)*x5499*x5500))+((x5498*x5499))+((x5497*x5500)))),IkReal(((((-1.0)*r22*x5499))+((r22*x5497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5501.valid){
continue;
}
CheckValue<IkReal> x5502=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5498*x5498)))+(((2.0)*x5498*x5500))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5500*x5500))))),-1);
if(!x5502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5501.value)+(((1.5707963267949)*(x5502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5503=IKcos(j4);
IkReal x5504=IKsin(j4);
IkReal x5505=(cj2*sj1);
IkReal x5506=(gconst115*r21);
IkReal x5507=(cj1*sj2);
IkReal x5508=((1.0)*x5503);
IkReal x5509=(gconst115*x5503);
IkReal x5510=(gconst115*x5504);
IkReal x5511=((1.0)*gconst116*x5504);
evalcond[0]=((((-1.0)*gconst116*r20*x5508))+((r22*x5504))+((x5503*x5506)));
evalcond[1]=(cj0+(((-1.0)*gconst116*r10*x5508))+((r12*x5504))+((r11*x5509)));
evalcond[2]=((((-1.0)*gconst116*r00*x5508))+(((-1.0)*sj0))+((r02*x5504))+((r01*x5509)));
evalcond[3]=((((-1.0)*r22*x5508))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x5511))+((cj1*cj2))+((x5504*x5506)));
evalcond[4]=((((-1.0)*r00*x5511))+(((-1.0)*r02*x5508))+((r01*x5510))+((cj0*x5505))+((cj0*x5507)));
evalcond[5]=((((-1.0)*r10*x5511))+(((-1.0)*r12*x5508))+((sj0*x5505))+((sj0*x5507))+((r11*x5510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5512 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5512.valid){
continue;
}
CheckValue<IkReal> x5513=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5512.value)+(((1.5707963267949)*(x5513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5514=IKcos(j4);
IkReal x5515=IKsin(j4);
IkReal x5516=(cj2*sj1);
IkReal x5517=(gconst115*r21);
IkReal x5518=(cj1*sj2);
IkReal x5519=((1.0)*x5514);
IkReal x5520=(gconst115*x5514);
IkReal x5521=(gconst115*x5515);
IkReal x5522=((1.0)*gconst116*x5515);
evalcond[0]=((((-1.0)*gconst116*r20*x5519))+((r22*x5515))+((x5514*x5517)));
evalcond[1]=(cj0+((r12*x5515))+(((-1.0)*gconst116*r10*x5519))+((r11*x5520)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5515))+((r01*x5520))+(((-1.0)*gconst116*r00*x5519)));
evalcond[3]=((((-1.0)*r22*x5519))+((x5515*x5517))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x5522))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5519))+((r01*x5521))+(((-1.0)*r00*x5522))+((cj0*x5516))+((cj0*x5518)));
evalcond[5]=((((-1.0)*r10*x5522))+(((-1.0)*r12*x5519))+((sj0*x5518))+((sj0*x5516))+((r11*x5521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5523.valid){
continue;
}
CheckValue<IkReal> x5524 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5523.value)))+(x5524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5525=IKcos(j4);
IkReal x5526=IKsin(j4);
IkReal x5527=(cj2*sj1);
IkReal x5528=(gconst115*r21);
IkReal x5529=(cj1*sj2);
IkReal x5530=((1.0)*x5525);
IkReal x5531=(gconst115*x5525);
IkReal x5532=(gconst115*x5526);
IkReal x5533=((1.0)*gconst116*x5526);
evalcond[0]=(((r22*x5526))+(((-1.0)*gconst116*r20*x5530))+((x5525*x5528)));
evalcond[1]=(cj0+(((-1.0)*gconst116*r10*x5530))+((r11*x5531))+((r12*x5526)));
evalcond[2]=(((r02*x5526))+(((-1.0)*sj0))+((r01*x5531))+(((-1.0)*gconst116*r00*x5530)));
evalcond[3]=(((x5526*x5528))+(((-1.0)*r22*x5530))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x5533))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5530))+((r01*x5532))+((cj0*x5529))+((cj0*x5527))+(((-1.0)*r00*x5533)));
evalcond[5]=((((-1.0)*r10*x5533))+((sj0*x5529))+((sj0*x5527))+((r11*x5532))+(((-1.0)*r12*x5530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5534=((-1.0)*r21);
IkReal x5536 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5536)==0){
continue;
}
IkReal x5535=pow(x5536,-0.5);
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal(x5534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5537.value))));
IkReal gconst118=(x5534*x5535);
IkReal gconst119=((1.0)*r20*x5535);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5538.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5539=((-1.0)*r21);
CheckValue<IkReal> x5542 = IKatan2WithCheck(IkReal(x5539),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5542.valid){
continue;
}
IkReal x5540=((1.0)*(x5542.value));
IkReal x5541=x5535;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5540)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5540)));
IkReal gconst118=(x5539*x5541);
IkReal gconst119=((1.0)*r20*x5541);
IkReal x5543=r22*r22;
IkReal x5544=((1.0)*x5543);
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(((-1.0)+x5543),-1);
if(!x5548.valid){
continue;
}
IkReal x5545=x5548.value;
if((((1.0)+(((-1.0)*x5544)))) < -0.00001)
continue;
IkReal x5546=IKsqrt(((1.0)+(((-1.0)*x5544))));
IkReal x5547=(cj0*x5545*x5546);
j4eval[0]=((IKabs((x5547+(((-1.0)*x5544*x5547)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5549=((-1.0)*r21);
CheckValue<IkReal> x5552 = IKatan2WithCheck(IkReal(x5549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5552.valid){
continue;
}
IkReal x5550=((1.0)*(x5552.value));
IkReal x5551=x5535;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5550)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5550)));
IkReal gconst118=(x5549*x5551);
IkReal gconst119=((1.0)*r20*x5551);
IkReal x5553=r22*r22;
IkReal x5554=((1.0)*x5553);
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(((-1.0)+x5553),-1);
if(!x5558.valid){
continue;
}
IkReal x5555=x5558.value;
if((((1.0)+(((-1.0)*x5554)))) < -0.00001)
continue;
IkReal x5556=IKsqrt(((1.0)+(((-1.0)*x5554))));
IkReal x5557=(sj0*x5555*x5556);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5557+(((-1.0)*x5554*x5557))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5559=((-1.0)*r21);
CheckValue<IkReal> x5562 = IKatan2WithCheck(IkReal(x5559),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5562.valid){
continue;
}
IkReal x5560=((1.0)*(x5562.value));
IkReal x5561=x5535;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5560)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5560)));
IkReal gconst118=(x5559*x5561);
IkReal gconst119=((1.0)*r20*x5561);
IkReal x5563=r22*r22;
IkReal x5564=((1.0)*r12*sj0);
IkReal x5565=((1.0)*cj0*r02);
CheckValue<IkReal> x5569=IKPowWithIntegerCheck(((-1.0)+x5563),-1);
if(!x5569.valid){
continue;
}
IkReal x5566=x5569.value;
if((((1.0)+(((-1.0)*x5563)))) < -0.00001)
continue;
IkReal x5567=IKsqrt(((1.0)+(((-1.0)*x5563))));
IkReal x5568=(r22*x5566*x5567);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5565))+(((-1.0)*x5564)))))+(IKabs(((((-1.0)*x5564*x5568))+(((-1.0)*x5565*x5568))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5570=((1.0)*sj0);
IkReal x5571=((1.0)*gconst119);
CheckValue<IkReal> x5572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5571)))),-1);
if(!x5572.valid){
continue;
}
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5571))+((gconst118*r11*sj0))+(((-1.0)*gconst119*r10*x5570))+((cj0*gconst118*r01)))),IkReal(((((-1.0)*r12*x5570))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5572.value)))+(x5573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5574=IKcos(j4);
IkReal x5575=IKsin(j4);
IkReal x5576=(cj1*sj2);
IkReal x5577=(gconst118*r01);
IkReal x5578=(gconst119*r20);
IkReal x5579=(gconst119*r10);
IkReal x5580=(gconst119*r00);
IkReal x5581=(gconst118*r21);
IkReal x5582=(cj2*sj1);
IkReal x5583=(gconst118*r11);
IkReal x5584=((1.0)*x5574);
IkReal x5585=((1.0)*x5575);
evalcond[0]=(((x5574*x5581))+(((-1.0)*x5578*x5584))+((r22*x5575)));
evalcond[1]=(((x5574*x5583))+cj0+(((-1.0)*x5579*x5584))+((r12*x5575)));
evalcond[2]=(((r02*x5575))+((x5574*x5577))+(((-1.0)*sj0))+(((-1.0)*x5580*x5584)));
evalcond[3]=(((x5575*x5581))+(((-1.0)*sj1*sj2))+(((-1.0)*x5578*x5585))+((cj1*cj2))+(((-1.0)*r22*x5584)));
evalcond[4]=(((cj0*x5576))+((x5575*x5577))+((cj0*x5582))+(((-1.0)*r02*x5584))+(((-1.0)*x5580*x5585)));
evalcond[5]=((((-1.0)*r12*x5584))+((x5575*x5583))+((sj0*x5582))+(((-1.0)*x5579*x5585))+((sj0*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5586=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5586.valid){
continue;
}
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5586.value)))+(x5587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5588=IKcos(j4);
IkReal x5589=IKsin(j4);
IkReal x5590=(cj1*sj2);
IkReal x5591=(gconst118*r01);
IkReal x5592=(gconst119*r20);
IkReal x5593=(gconst119*r10);
IkReal x5594=(gconst119*r00);
IkReal x5595=(gconst118*r21);
IkReal x5596=(cj2*sj1);
IkReal x5597=(gconst118*r11);
IkReal x5598=((1.0)*x5588);
IkReal x5599=((1.0)*x5589);
evalcond[0]=((((-1.0)*x5592*x5598))+((x5588*x5595))+((r22*x5589)));
evalcond[1]=(cj0+(((-1.0)*x5593*x5598))+((r12*x5589))+((x5588*x5597)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5594*x5598))+((r02*x5589))+((x5588*x5591)));
evalcond[3]=((((-1.0)*x5592*x5599))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5598))+((x5589*x5595)));
evalcond[4]=(((cj0*x5590))+((cj0*x5596))+(((-1.0)*r02*x5598))+(((-1.0)*x5594*x5599))+((x5589*x5591)));
evalcond[5]=((((-1.0)*r12*x5598))+((sj0*x5596))+((sj0*x5590))+(((-1.0)*x5593*x5599))+((x5589*x5597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5600=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5600.valid){
continue;
}
CheckValue<IkReal> x5601 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5600.value)))+(x5601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5602=IKcos(j4);
IkReal x5603=IKsin(j4);
IkReal x5604=(cj1*sj2);
IkReal x5605=(gconst118*r01);
IkReal x5606=(gconst119*r20);
IkReal x5607=(gconst119*r10);
IkReal x5608=(gconst119*r00);
IkReal x5609=(gconst118*r21);
IkReal x5610=(cj2*sj1);
IkReal x5611=(gconst118*r11);
IkReal x5612=((1.0)*x5602);
IkReal x5613=((1.0)*x5603);
evalcond[0]=(((x5602*x5609))+(((-1.0)*x5606*x5612))+((r22*x5603)));
evalcond[1]=(cj0+((x5602*x5611))+((r12*x5603))+(((-1.0)*x5607*x5612)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5603))+(((-1.0)*x5608*x5612))+((x5602*x5605)));
evalcond[3]=(((x5603*x5609))+(((-1.0)*r22*x5612))+(((-1.0)*sj1*sj2))+(((-1.0)*x5606*x5613))+((cj1*cj2)));
evalcond[4]=(((cj0*x5610))+((x5603*x5605))+(((-1.0)*x5608*x5613))+(((-1.0)*r02*x5612))+((cj0*x5604)));
evalcond[5]=(((sj0*x5610))+((sj0*x5604))+((x5603*x5611))+(((-1.0)*r12*x5612))+(((-1.0)*x5607*x5613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5615 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5615)==0){
continue;
}
IkReal x5614=pow(x5615,-0.5);
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5616.value));
IkReal gconst121=((-1.0)*r11*x5614);
IkReal gconst122=(r10*x5614);
CheckValue<IkReal> x5617 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
IkReal x5618=((-1.0)*(x5620.value));
IkReal x5619=x5614;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5618;
IkReal gconst120=x5618;
IkReal gconst121=((-1.0)*r11*x5619);
IkReal gconst122=(r10*x5619);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5621=((1.0)*sj0);
IkReal x5622=((1.0)*cj0);
CheckValue<IkReal> x5623=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x5623.valid){
continue;
}
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r10*x5621))+(((-1.0)*gconst122*r00*x5622))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IkReal(((((-1.0)*r12*x5621))+(((-1.0)*r02*x5622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5623.value)))+(x5624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5625=IKcos(j4);
IkReal x5626=IKsin(j4);
IkReal x5627=(gconst121*r11);
IkReal x5628=(cj2*sj1);
IkReal x5629=(gconst122*r00);
IkReal x5630=(gconst122*r10);
IkReal x5631=(gconst122*r20);
IkReal x5632=(cj1*sj2);
IkReal x5633=((1.0)*x5625);
IkReal x5634=((1.0)*x5626);
IkReal x5635=(gconst121*x5626);
IkReal x5636=(gconst121*x5625);
evalcond[0]=(((r22*x5626))+((r21*x5636))+(((-1.0)*x5631*x5633)));
evalcond[1]=(((x5625*x5627))+cj0+((r12*x5626))+(((-1.0)*x5630*x5633)));
evalcond[2]=(((r01*x5636))+(((-1.0)*x5629*x5633))+(((-1.0)*sj0))+((r02*x5626)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5633))+((r21*x5635))+(((-1.0)*x5631*x5634)));
evalcond[4]=(((r01*x5635))+((cj0*x5628))+(((-1.0)*x5629*x5634))+(((-1.0)*r02*x5633))+((cj0*x5632)));
evalcond[5]=((((-1.0)*r12*x5633))+((sj0*x5628))+((sj0*x5632))+(((-1.0)*x5630*x5634))+((x5626*x5627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5637.value)+(((1.5707963267949)*(x5638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5639=IKcos(j4);
IkReal x5640=IKsin(j4);
IkReal x5641=(gconst121*r11);
IkReal x5642=(cj2*sj1);
IkReal x5643=(gconst122*r00);
IkReal x5644=(gconst122*r10);
IkReal x5645=(gconst122*r20);
IkReal x5646=(cj1*sj2);
IkReal x5647=((1.0)*x5639);
IkReal x5648=((1.0)*x5640);
IkReal x5649=(gconst121*x5640);
IkReal x5650=(gconst121*x5639);
evalcond[0]=((((-1.0)*x5645*x5647))+((r22*x5640))+((r21*x5650)));
evalcond[1]=(((x5639*x5641))+cj0+(((-1.0)*x5644*x5647))+((r12*x5640)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5650))+(((-1.0)*x5643*x5647))+((r02*x5640)));
evalcond[3]=((((-1.0)*r22*x5647))+(((-1.0)*sj1*sj2))+(((-1.0)*x5645*x5648))+((r21*x5649))+((cj1*cj2)));
evalcond[4]=(((cj0*x5642))+((cj0*x5646))+((r01*x5649))+(((-1.0)*r02*x5647))+(((-1.0)*x5643*x5648)));
evalcond[5]=((((-1.0)*r12*x5647))+(((-1.0)*x5644*x5648))+((sj0*x5642))+((sj0*x5646))+((x5640*x5641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5652 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5652)==0){
continue;
}
IkReal x5651=pow(x5652,-0.5);
CheckValue<IkReal> x5653 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5653.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5653.value))));
IkReal gconst124=((1.0)*r11*x5651);
IkReal gconst125=((-1.0)*r10*x5651);
CheckValue<IkReal> x5654 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5654.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5654.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5657 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5657.valid){
continue;
}
IkReal x5655=((1.0)*(x5657.value));
IkReal x5656=x5651;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5655)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5655)));
IkReal gconst124=((1.0)*r11*x5656);
IkReal gconst125=((-1.0)*r10*x5656);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
IkReal x5658=((1.0)*(x5660.value));
IkReal x5659=x5651;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5658)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5658)));
IkReal gconst124=((1.0)*r11*x5659);
IkReal gconst125=((-1.0)*r10*x5659);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
IkReal x5661=((1.0)*(x5663.value));
IkReal x5662=x5651;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5661)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5661)));
IkReal gconst124=((1.0)*r11*x5662);
IkReal gconst125=((-1.0)*r10*x5662);
IkReal x5664=r12*r12;
IkReal x5665=((1.0)*sj0);
IkReal x5666=(cj0*r02);
IkReal x5667=x5651;
j4eval[0]=((IKabs(((((-1.0)*r12*x5665))+(((-1.0)*x5666)))))+(IKabs((((r12*x5666*x5667))+((sj0*x5664*x5667))+(((-1.0)*x5665*x5667))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5668=((1.0)*sj0);
IkReal x5669=((1.0)*gconst125);
CheckValue<IkReal> x5670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5669))+(((-1.0)*gconst124*r20)))),-1);
if(!x5670.valid){
continue;
}
CheckValue<IkReal> x5671 = IKatan2WithCheck(IkReal(((((-1.0)*gconst125*r10*x5668))+(((-1.0)*cj0*r00*x5669))+((cj0*gconst124*r01))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5670.value)))+(x5671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5672=IKcos(j4);
IkReal x5673=IKsin(j4);
IkReal x5674=(cj2*sj1);
IkReal x5675=(gconst125*r20);
IkReal x5676=(gconst124*r01);
IkReal x5677=(gconst125*r00);
IkReal x5678=(gconst125*r10);
IkReal x5679=(cj1*sj2);
IkReal x5680=((1.0)*x5672);
IkReal x5681=((1.0)*x5673);
IkReal x5682=(gconst124*x5673);
IkReal x5683=(gconst124*x5672);
evalcond[0]=((((-1.0)*x5675*x5680))+((r22*x5673))+((r21*x5683)));
evalcond[1]=(cj0+(((-1.0)*x5678*x5680))+((r12*x5673))+((r11*x5683)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5673))+((x5672*x5676))+(((-1.0)*x5677*x5680)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5680))+(((-1.0)*x5675*x5681))+((cj1*cj2))+((r21*x5682)));
evalcond[4]=((((-1.0)*r02*x5680))+((cj0*x5674))+((cj0*x5679))+((x5673*x5676))+(((-1.0)*x5677*x5681)));
evalcond[5]=(((sj0*x5674))+((sj0*x5679))+(((-1.0)*x5678*x5681))+((r11*x5682))+(((-1.0)*r12*x5680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5684.valid){
continue;
}
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5684.value)))+(x5685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5686=IKcos(j4);
IkReal x5687=IKsin(j4);
IkReal x5688=(cj2*sj1);
IkReal x5689=(gconst125*r20);
IkReal x5690=(gconst124*r01);
IkReal x5691=(gconst125*r00);
IkReal x5692=(gconst125*r10);
IkReal x5693=(cj1*sj2);
IkReal x5694=((1.0)*x5686);
IkReal x5695=((1.0)*x5687);
IkReal x5696=(gconst124*x5687);
IkReal x5697=(gconst124*x5686);
evalcond[0]=(((r22*x5687))+(((-1.0)*x5689*x5694))+((r21*x5697)));
evalcond[1]=(cj0+(((-1.0)*x5692*x5694))+((r12*x5687))+((r11*x5697)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5691*x5694))+((x5686*x5690))+((r02*x5687)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5694))+(((-1.0)*x5689*x5695))+((cj1*cj2))+((r21*x5696)));
evalcond[4]=(((x5687*x5690))+(((-1.0)*x5691*x5695))+(((-1.0)*r02*x5694))+((cj0*x5688))+((cj0*x5693)));
evalcond[5]=((((-1.0)*x5692*x5695))+((sj0*x5688))+((sj0*x5693))+((r11*x5696))+(((-1.0)*r12*x5694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5698=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5698.valid){
continue;
}
CheckValue<IkReal> x5699 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5698.value)))+(x5699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5700=IKcos(j4);
IkReal x5701=IKsin(j4);
IkReal x5702=(cj2*sj1);
IkReal x5703=(gconst125*r20);
IkReal x5704=(gconst124*r01);
IkReal x5705=(gconst125*r00);
IkReal x5706=(gconst125*r10);
IkReal x5707=(cj1*sj2);
IkReal x5708=((1.0)*x5700);
IkReal x5709=((1.0)*x5701);
IkReal x5710=(gconst124*x5701);
IkReal x5711=(gconst124*x5700);
evalcond[0]=(((r22*x5701))+(((-1.0)*x5703*x5708))+((r21*x5711)));
evalcond[1]=(cj0+((r12*x5701))+((r11*x5711))+(((-1.0)*x5706*x5708)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5701))+((x5700*x5704))+(((-1.0)*x5705*x5708)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5708))+(((-1.0)*x5703*x5709))+((cj1*cj2))+((r21*x5710)));
evalcond[4]=(((x5701*x5704))+(((-1.0)*r02*x5708))+(((-1.0)*x5705*x5709))+((cj0*x5707))+((cj0*x5702)));
evalcond[5]=((((-1.0)*r12*x5708))+((sj0*x5702))+((sj0*x5707))+((r11*x5710))+(((-1.0)*x5706*x5709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5712=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5712;
j4eval[1]=IKsign(x5712);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5713=((1.0)*cj5);
IkReal x5714=((((-1.0)*r21*x5713))+(((-1.0)*r20*sj5)));
j4eval[0]=x5714;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5713))+((r01*sj5))))));
j4eval[2]=IKsign(x5714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5715=cj5*cj5;
IkReal x5716=r11*r11;
IkReal x5717=(cj5*r10);
IkReal x5718=(r11*sj5);
IkReal x5719=((((-1.0)*x5716))+(((-1.0)*x5715*(r10*r10)))+((x5715*x5716))+(((2.0)*x5717*x5718))+(((-1.0)*(r12*r12))));
j4eval[0]=x5719;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5717))+x5718))));
j4eval[2]=IKsign(x5719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5720=cj5*cj5;
IkReal x5721=r11*r11;
IkReal x5722=(cj5*r10);
IkReal x5723=(r11*sj5);
CheckValue<IkReal> x5724=IKPowWithIntegerCheck(IKsign(((((2.0)*x5722*x5723))+(((-1.0)*(r12*r12)))+(((-1.0)*x5720*(r10*r10)))+(((-1.0)*x5721))+((x5720*x5721)))),-1);
if(!x5724.valid){
continue;
}
CheckValue<IkReal> x5725 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5722))+x5723)),IKFAST_ATAN2_MAGTHRESH);
if(!x5725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5724.value)))+(x5725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5726=IKcos(j4);
IkReal x5727=IKsin(j4);
IkReal x5728=(cj5*r00);
IkReal x5729=(cj5*r10);
IkReal x5730=(cj5*r20);
IkReal x5731=((1.0)*x5726);
IkReal x5732=((1.0)*x5727);
IkReal x5733=(sj5*x5726);
IkReal x5734=(sj5*x5727);
evalcond[0]=(((r21*x5733))+(((-1.0)*x5730*x5731))+((r22*x5727)));
evalcond[1]=(((r01*x5733))+(((-1.0)*x5728*x5731))+((r02*x5727)));
evalcond[2]=((1.0)+((r11*x5733))+(((-1.0)*x5729*x5731))+((r12*x5727)));
evalcond[3]=(((r11*x5734))+(((-1.0)*x5729*x5732))+(((-1.0)*r12*x5731)));
evalcond[4]=(((cj2*sj1))+((r01*x5734))+(((-1.0)*x5728*x5732))+((cj1*sj2))+(((-1.0)*r02*x5731)));
evalcond[5]=(((r21*x5734))+(((-1.0)*sj1*sj2))+(((-1.0)*x5730*x5732))+(((-1.0)*r22*x5731))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5735=((1.0)*cj5);
CheckValue<IkReal> x5736 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5735)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5736.valid){
continue;
}
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5735))+(((-1.0)*r20*sj5)))),-1);
if(!x5737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5736.value)+(((1.5707963267949)*(x5737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5738=IKcos(j4);
IkReal x5739=IKsin(j4);
IkReal x5740=(cj5*r00);
IkReal x5741=(cj5*r10);
IkReal x5742=(cj5*r20);
IkReal x5743=((1.0)*x5738);
IkReal x5744=((1.0)*x5739);
IkReal x5745=(sj5*x5738);
IkReal x5746=(sj5*x5739);
evalcond[0]=((((-1.0)*x5742*x5743))+((r21*x5745))+((r22*x5739)));
evalcond[1]=(((r01*x5745))+(((-1.0)*x5740*x5743))+((r02*x5739)));
evalcond[2]=((1.0)+((r11*x5745))+((r12*x5739))+(((-1.0)*x5741*x5743)));
evalcond[3]=(((r11*x5746))+(((-1.0)*x5741*x5744))+(((-1.0)*r12*x5743)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x5746))+(((-1.0)*r02*x5743))+(((-1.0)*x5740*x5744)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5743))+(((-1.0)*x5742*x5744))+((cj1*cj2))+((r21*x5746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5747.valid){
continue;
}
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5747.value)))+(x5748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5749=IKcos(j4);
IkReal x5750=IKsin(j4);
IkReal x5751=(cj5*r00);
IkReal x5752=(cj5*r10);
IkReal x5753=(cj5*r20);
IkReal x5754=((1.0)*x5749);
IkReal x5755=((1.0)*x5750);
IkReal x5756=(sj5*x5749);
IkReal x5757=(sj5*x5750);
evalcond[0]=(((r21*x5756))+(((-1.0)*x5753*x5754))+((r22*x5750)));
evalcond[1]=((((-1.0)*x5751*x5754))+((r01*x5756))+((r02*x5750)));
evalcond[2]=((1.0)+(((-1.0)*x5752*x5754))+((r11*x5756))+((r12*x5750)));
evalcond[3]=((((-1.0)*x5752*x5755))+(((-1.0)*r12*x5754))+((r11*x5757)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5751*x5755))+((cj1*sj2))+((r01*x5757))+(((-1.0)*r02*x5754)));
evalcond[5]=(((r21*x5757))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5754))+(((-1.0)*x5753*x5755))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5758=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5758;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5759=((1.0)*cj5);
IkReal x5760=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5759)));
j4eval[0]=x5760;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5759)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5761=cj5*cj5;
IkReal x5762=r11*r11;
IkReal x5763=(r11*sj5);
IkReal x5764=(cj5*r10);
IkReal x5765=((r12*r12)+(((-1.0)*x5761*x5762))+((x5761*(r10*r10)))+(((-2.0)*x5763*x5764))+x5762);
j4eval[0]=x5765;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5764))+x5763))));
j4eval[2]=IKsign(x5765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5766=cj5*cj5;
IkReal x5767=r11*r11;
IkReal x5768=(cj5*r10);
IkReal x5769=(r11*sj5);
CheckValue<IkReal> x5770=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5766*(r10*r10)))+(((-2.0)*x5768*x5769))+(((-1.0)*x5766*x5767))+x5767)),-1);
if(!x5770.valid){
continue;
}
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5768))+x5769)),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5770.value)))+(x5771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5772=IKcos(j4);
IkReal x5773=IKsin(j4);
IkReal x5774=(cj5*r00);
IkReal x5775=(cj5*r10);
IkReal x5776=((1.0)*sj1);
IkReal x5777=(cj5*r20);
IkReal x5778=((1.0)*x5772);
IkReal x5779=((1.0)*x5773);
IkReal x5780=(sj5*x5772);
IkReal x5781=(sj5*x5773);
evalcond[0]=((((-1.0)*x5777*x5778))+((r21*x5780))+((r22*x5773)));
evalcond[1]=((((-1.0)*x5774*x5778))+((r01*x5780))+((r02*x5773)));
evalcond[2]=((-1.0)+((r11*x5780))+(((-1.0)*x5775*x5778))+((r12*x5773)));
evalcond[3]=((((-1.0)*r12*x5778))+((r11*x5781))+(((-1.0)*x5775*x5779)));
evalcond[4]=((((-1.0)*x5777*x5779))+((r21*x5781))+(((-1.0)*sj2*x5776))+(((-1.0)*r22*x5778))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x5776))+(((-1.0)*x5774*x5779))+(((-1.0)*cj1*sj2))+((r01*x5781))+(((-1.0)*r02*x5778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5782=((1.0)*cj5);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5782))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5782)))),-1);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5783.value)+(((1.5707963267949)*(x5784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(cj5*r00);
IkReal x5788=(cj5*r10);
IkReal x5789=((1.0)*sj1);
IkReal x5790=(cj5*r20);
IkReal x5791=((1.0)*x5785);
IkReal x5792=((1.0)*x5786);
IkReal x5793=(sj5*x5785);
IkReal x5794=(sj5*x5786);
evalcond[0]=(((r21*x5793))+((r22*x5786))+(((-1.0)*x5790*x5791)));
evalcond[1]=(((r01*x5793))+(((-1.0)*x5787*x5791))+((r02*x5786)));
evalcond[2]=((-1.0)+((r12*x5786))+((r11*x5793))+(((-1.0)*x5788*x5791)));
evalcond[3]=(((r11*x5794))+(((-1.0)*r12*x5791))+(((-1.0)*x5788*x5792)));
evalcond[4]=(((r21*x5794))+(((-1.0)*r22*x5791))+(((-1.0)*sj2*x5789))+(((-1.0)*x5790*x5792))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x5789))+((r01*x5794))+(((-1.0)*cj1*sj2))+(((-1.0)*x5787*x5792))+(((-1.0)*r02*x5791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5795=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5795.valid){
continue;
}
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5795.value)))+(x5796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5797=IKcos(j4);
IkReal x5798=IKsin(j4);
IkReal x5799=(cj5*r00);
IkReal x5800=(cj5*r10);
IkReal x5801=((1.0)*sj1);
IkReal x5802=(cj5*r20);
IkReal x5803=((1.0)*x5797);
IkReal x5804=((1.0)*x5798);
IkReal x5805=(sj5*x5797);
IkReal x5806=(sj5*x5798);
evalcond[0]=(((r21*x5805))+(((-1.0)*x5802*x5803))+((r22*x5798)));
evalcond[1]=(((r01*x5805))+(((-1.0)*x5799*x5803))+((r02*x5798)));
evalcond[2]=((-1.0)+(((-1.0)*x5800*x5803))+((r12*x5798))+((r11*x5805)));
evalcond[3]=((((-1.0)*x5800*x5804))+(((-1.0)*r12*x5803))+((r11*x5806)));
evalcond[4]=((((-1.0)*r22*x5803))+((r21*x5806))+(((-1.0)*sj2*x5801))+(((-1.0)*x5802*x5804))+((cj1*cj2)));
evalcond[5]=(((r01*x5806))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5801))+(((-1.0)*x5799*x5804))+(((-1.0)*r02*x5803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5808 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5808)==0){
continue;
}
IkReal x5807=pow(x5808,-0.5);
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5809.value));
IkReal gconst127=((-1.0)*r01*x5807);
IkReal gconst128=(r00*x5807);
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5810.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
IkReal x5811=((-1.0)*(x5813.value));
IkReal x5812=x5807;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5811;
IkReal gconst126=x5811;
IkReal gconst127=((-1.0)*r01*x5812);
IkReal gconst128=(r00*x5812);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5814=((1.0)*sj0);
IkReal x5815=((1.0)*gconst128);
CheckValue<IkReal> x5816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5815)))),-1);
if(!x5816.valid){
continue;
}
CheckValue<IkReal> x5817 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5815))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*gconst128*r10*x5814)))),IkReal(((((-1.0)*r12*x5814))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5816.value)))+(x5817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5818=IKcos(j4);
IkReal x5819=IKsin(j4);
IkReal x5820=(gconst127*r01);
IkReal x5821=(cj2*sj1);
IkReal x5822=(gconst128*r10);
IkReal x5823=(gconst128*r00);
IkReal x5824=(gconst128*r20);
IkReal x5825=(cj1*sj2);
IkReal x5826=((1.0)*x5818);
IkReal x5827=((1.0)*x5819);
IkReal x5828=(gconst127*x5818);
IkReal x5829=(gconst127*x5819);
evalcond[0]=(((r21*x5828))+((r22*x5819))+(((-1.0)*x5824*x5826)));
evalcond[1]=(cj0+((r11*x5828))+((r12*x5819))+(((-1.0)*x5822*x5826)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5823*x5826))+((r02*x5819))+((x5818*x5820)));
evalcond[3]=((((-1.0)*r22*x5826))+((r21*x5829))+(((-1.0)*sj1*sj2))+(((-1.0)*x5824*x5827))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5826))+(((-1.0)*x5823*x5827))+((cj0*x5821))+((cj0*x5825))+((x5819*x5820)));
evalcond[5]=(((r11*x5829))+((sj0*x5821))+((sj0*x5825))+(((-1.0)*x5822*x5827))+(((-1.0)*r12*x5826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5830=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5830.value)))+(x5831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5832=IKcos(j4);
IkReal x5833=IKsin(j4);
IkReal x5834=(gconst127*r01);
IkReal x5835=(cj2*sj1);
IkReal x5836=(gconst128*r10);
IkReal x5837=(gconst128*r00);
IkReal x5838=(gconst128*r20);
IkReal x5839=(cj1*sj2);
IkReal x5840=((1.0)*x5832);
IkReal x5841=((1.0)*x5833);
IkReal x5842=(gconst127*x5832);
IkReal x5843=(gconst127*x5833);
evalcond[0]=(((r21*x5842))+(((-1.0)*x5838*x5840))+((r22*x5833)));
evalcond[1]=(cj0+((r11*x5842))+((r12*x5833))+(((-1.0)*x5836*x5840)));
evalcond[2]=((((-1.0)*x5837*x5840))+((r02*x5833))+(((-1.0)*sj0))+((x5832*x5834)));
evalcond[3]=(((r21*x5843))+(((-1.0)*sj1*sj2))+(((-1.0)*x5838*x5841))+((cj1*cj2))+(((-1.0)*r22*x5840)));
evalcond[4]=((((-1.0)*x5837*x5841))+(((-1.0)*r02*x5840))+((x5833*x5834))+((cj0*x5835))+((cj0*x5839)));
evalcond[5]=(((r11*x5843))+((sj0*x5839))+((sj0*x5835))+(((-1.0)*x5836*x5841))+(((-1.0)*r12*x5840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5845 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5845)==0){
continue;
}
IkReal x5844=pow(x5845,-0.5);
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5846.value))));
IkReal gconst130=((1.0)*r01*x5844);
IkReal gconst131=((-1.0)*r00*x5844);
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5850 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5850.valid){
continue;
}
IkReal x5848=((1.0)*(x5850.value));
IkReal x5849=x5844;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5848)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5848)));
IkReal gconst130=((1.0)*r01*x5849);
IkReal gconst131=((-1.0)*r00*x5849);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5853 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5853.valid){
continue;
}
IkReal x5851=((1.0)*(x5853.value));
IkReal x5852=x5844;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5851)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5851)));
IkReal gconst130=((1.0)*r01*x5852);
IkReal gconst131=((-1.0)*r00*x5852);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5856 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5856.valid){
continue;
}
IkReal x5854=((1.0)*(x5856.value));
IkReal x5855=x5844;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5854)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5854)));
IkReal gconst130=((1.0)*r01*x5855);
IkReal gconst131=((-1.0)*r00*x5855);
IkReal x5857=r02*r02;
IkReal x5858=(r12*sj0);
IkReal x5859=((1.0)*cj0);
IkReal x5860=x5844;
j4eval[0]=((IKabs((((cj0*x5857*x5860))+(((-1.0)*x5859*x5860))+((r02*x5858*x5860)))))+(IKabs(((((-1.0)*x5858))+(((-1.0)*r02*x5859))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5861=((1.0)*sj0);
IkReal x5862=((1.0)*gconst131);
CheckValue<IkReal> x5863 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r10*x5861))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5862)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5863.valid){
continue;
}
CheckValue<IkReal> x5864=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x5862)))),-1);
if(!x5864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5863.value)+(((1.5707963267949)*(x5864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5865=IKcos(j4);
IkReal x5866=IKsin(j4);
IkReal x5867=(gconst131*r10);
IkReal x5868=(gconst130*r11);
IkReal x5869=(gconst131*r20);
IkReal x5870=(cj2*sj1);
IkReal x5871=(gconst131*r00);
IkReal x5872=(cj1*sj2);
IkReal x5873=((1.0)*x5865);
IkReal x5874=((1.0)*x5866);
IkReal x5875=(gconst130*x5865);
IkReal x5876=(gconst130*x5866);
evalcond[0]=(((r22*x5866))+(((-1.0)*x5869*x5873))+((r21*x5875)));
evalcond[1]=(cj0+((r12*x5866))+((x5865*x5868))+(((-1.0)*x5867*x5873)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5866))+(((-1.0)*x5871*x5873))+((r01*x5875)));
evalcond[3]=((((-1.0)*r22*x5873))+(((-1.0)*sj1*sj2))+(((-1.0)*x5869*x5874))+((cj1*cj2))+((r21*x5876)));
evalcond[4]=((((-1.0)*r02*x5873))+((cj0*x5870))+((cj0*x5872))+(((-1.0)*x5871*x5874))+((r01*x5876)));
evalcond[5]=((((-1.0)*r12*x5873))+((x5866*x5868))+((sj0*x5870))+((sj0*x5872))+(((-1.0)*x5867*x5874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5877 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5877.valid){
continue;
}
CheckValue<IkReal> x5878=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5877.value)+(((1.5707963267949)*(x5878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5879=IKcos(j4);
IkReal x5880=IKsin(j4);
IkReal x5881=(gconst131*r10);
IkReal x5882=(gconst130*r11);
IkReal x5883=(gconst131*r20);
IkReal x5884=(cj2*sj1);
IkReal x5885=(gconst131*r00);
IkReal x5886=(cj1*sj2);
IkReal x5887=((1.0)*x5879);
IkReal x5888=((1.0)*x5880);
IkReal x5889=(gconst130*x5879);
IkReal x5890=(gconst130*x5880);
evalcond[0]=((((-1.0)*x5883*x5887))+((r22*x5880))+((r21*x5889)));
evalcond[1]=(cj0+((x5879*x5882))+((r12*x5880))+(((-1.0)*x5881*x5887)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5889))+(((-1.0)*x5885*x5887))+((r02*x5880)));
evalcond[3]=((((-1.0)*x5883*x5888))+((r21*x5890))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5887)));
evalcond[4]=((((-1.0)*x5885*x5888))+(((-1.0)*r02*x5887))+((r01*x5890))+((cj0*x5886))+((cj0*x5884)));
evalcond[5]=(((x5880*x5882))+(((-1.0)*r12*x5887))+(((-1.0)*x5881*x5888))+((sj0*x5886))+((sj0*x5884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5891=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5891.valid){
continue;
}
CheckValue<IkReal> x5892 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5891.value)))+(x5892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5893=IKcos(j4);
IkReal x5894=IKsin(j4);
IkReal x5895=(gconst131*r10);
IkReal x5896=(gconst130*r11);
IkReal x5897=(gconst131*r20);
IkReal x5898=(cj2*sj1);
IkReal x5899=(gconst131*r00);
IkReal x5900=(cj1*sj2);
IkReal x5901=((1.0)*x5893);
IkReal x5902=((1.0)*x5894);
IkReal x5903=(gconst130*x5893);
IkReal x5904=(gconst130*x5894);
evalcond[0]=(((r22*x5894))+(((-1.0)*x5897*x5901))+((r21*x5903)));
evalcond[1]=((((-1.0)*x5895*x5901))+cj0+((x5893*x5896))+((r12*x5894)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5894))+(((-1.0)*x5899*x5901))+((r01*x5903)));
evalcond[3]=((((-1.0)*x5897*x5902))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5901))+((cj1*cj2))+((r21*x5904)));
evalcond[4]=(((cj0*x5898))+(((-1.0)*r02*x5901))+((cj0*x5900))+(((-1.0)*x5899*x5902))+((r01*x5904)));
evalcond[5]=(((sj0*x5900))+(((-1.0)*r12*x5901))+(((-1.0)*x5895*x5902))+((sj0*x5898))+((x5894*x5896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5905=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5905;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5906=((1.0)*cj5);
IkReal x5907=((((-1.0)*r21*x5906))+(((-1.0)*r20*sj5)));
j4eval[0]=x5907;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5906))))));
j4eval[2]=IKsign(x5907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5908=cj5*cj5;
IkReal x5909=r01*r01;
IkReal x5910=(cj5*r00);
IkReal x5911=(r01*sj5);
IkReal x5912=((((-2.0)*x5910*x5911))+((x5908*(r00*r00)))+(r02*r02)+x5909+(((-1.0)*x5908*x5909)));
j4eval[0]=x5912;
j4eval[1]=IKsign(x5912);
j4eval[2]=((IKabs(r02))+(IKabs((x5911+(((-1.0)*x5910))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5913=cj5*cj5;
IkReal x5914=r01*r01;
IkReal x5915=(r01*sj5);
IkReal x5916=(cj5*r00);
CheckValue<IkReal> x5917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5913*x5914))+((x5913*(r00*r00)))+(((-2.0)*x5915*x5916))+(r02*r02)+x5914)),-1);
if(!x5917.valid){
continue;
}
CheckValue<IkReal> x5918 = IKatan2WithCheck(IkReal(r02),IkReal((x5915+(((-1.0)*x5916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5917.value)))+(x5918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5919=IKcos(j4);
IkReal x5920=IKsin(j4);
IkReal x5921=(cj5*r00);
IkReal x5922=(cj5*r10);
IkReal x5923=(cj5*r20);
IkReal x5924=((1.0)*x5919);
IkReal x5925=((1.0)*x5920);
IkReal x5926=(sj5*x5919);
IkReal x5927=(sj5*x5920);
evalcond[0]=(((r22*x5920))+((r21*x5926))+(((-1.0)*x5923*x5924)));
evalcond[1]=(((r11*x5926))+((r12*x5920))+(((-1.0)*x5922*x5924)));
evalcond[2]=((-1.0)+((r01*x5926))+(((-1.0)*x5921*x5924))+((r02*x5920)));
evalcond[3]=((((-1.0)*r02*x5924))+((r01*x5927))+(((-1.0)*x5921*x5925)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5927))+(((-1.0)*r12*x5924))+(((-1.0)*x5922*x5925)));
evalcond[5]=((((-1.0)*r22*x5924))+(((-1.0)*sj1*sj2))+((r21*x5927))+(((-1.0)*x5923*x5925))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5928=((1.0)*cj5);
CheckValue<IkReal> x5929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5928))+(((-1.0)*r20*sj5)))),-1);
if(!x5929.valid){
continue;
}
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5928)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5929.value)))+(x5930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5931=IKcos(j4);
IkReal x5932=IKsin(j4);
IkReal x5933=(cj5*r00);
IkReal x5934=(cj5*r10);
IkReal x5935=(cj5*r20);
IkReal x5936=((1.0)*x5931);
IkReal x5937=((1.0)*x5932);
IkReal x5938=(sj5*x5931);
IkReal x5939=(sj5*x5932);
evalcond[0]=(((r21*x5938))+((r22*x5932))+(((-1.0)*x5935*x5936)));
evalcond[1]=((((-1.0)*x5934*x5936))+((r11*x5938))+((r12*x5932)));
evalcond[2]=((-1.0)+(((-1.0)*x5933*x5936))+((r01*x5938))+((r02*x5932)));
evalcond[3]=((((-1.0)*r02*x5936))+(((-1.0)*x5933*x5937))+((r01*x5939)));
evalcond[4]=((((-1.0)*x5934*x5937))+((cj2*sj1))+((cj1*sj2))+((r11*x5939))+(((-1.0)*r12*x5936)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5939))+(((-1.0)*x5935*x5937))+((cj1*cj2))+(((-1.0)*r22*x5936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
CheckValue<IkReal> x5941=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5940.value)+(((1.5707963267949)*(x5941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5942=IKcos(j4);
IkReal x5943=IKsin(j4);
IkReal x5944=(cj5*r00);
IkReal x5945=(cj5*r10);
IkReal x5946=(cj5*r20);
IkReal x5947=((1.0)*x5942);
IkReal x5948=((1.0)*x5943);
IkReal x5949=(sj5*x5942);
IkReal x5950=(sj5*x5943);
evalcond[0]=(((r22*x5943))+((r21*x5949))+(((-1.0)*x5946*x5947)));
evalcond[1]=((((-1.0)*x5945*x5947))+((r11*x5949))+((r12*x5943)));
evalcond[2]=((-1.0)+(((-1.0)*x5944*x5947))+((r01*x5949))+((r02*x5943)));
evalcond[3]=((((-1.0)*x5944*x5948))+((r01*x5950))+(((-1.0)*r02*x5947)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5945*x5948))+((r11*x5950))+((cj1*sj2))+(((-1.0)*r12*x5947)));
evalcond[5]=((((-1.0)*r22*x5947))+((r21*x5950))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5946*x5948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5951=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5951;
j4eval[1]=IKsign(x5951);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5952=((1.0)*cj5);
IkReal x5953=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5952)));
j4eval[0]=x5953;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5952)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5954=cj5*cj5;
IkReal x5955=r01*r01;
IkReal x5956=(r01*sj5);
IkReal x5957=(cj5*r00);
IkReal x5958=((((-1.0)*(r02*r02)))+((x5954*x5955))+(((2.0)*x5956*x5957))+(((-1.0)*x5955))+(((-1.0)*x5954*(r00*r00))));
j4eval[0]=x5958;
j4eval[1]=IKsign(x5958);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5957))+x5956))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5959=cj5*cj5;
IkReal x5960=r01*r01;
IkReal x5961=(r01*sj5);
IkReal x5962=(cj5*r00);
CheckValue<IkReal> x5963 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5962))+x5961)),IKFAST_ATAN2_MAGTHRESH);
if(!x5963.valid){
continue;
}
CheckValue<IkReal> x5964=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5960))+(((2.0)*x5961*x5962))+((x5959*x5960))+(((-1.0)*(r02*r02)))+(((-1.0)*x5959*(r00*r00))))),-1);
if(!x5964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5963.value)+(((1.5707963267949)*(x5964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5965=IKcos(j4);
IkReal x5966=IKsin(j4);
IkReal x5967=(cj5*r00);
IkReal x5968=(cj5*r10);
IkReal x5969=((1.0)*sj1);
IkReal x5970=(cj5*r20);
IkReal x5971=((1.0)*x5965);
IkReal x5972=((1.0)*x5966);
IkReal x5973=(sj5*x5965);
IkReal x5974=(sj5*x5966);
evalcond[0]=(((r22*x5966))+((r21*x5973))+(((-1.0)*x5970*x5971)));
evalcond[1]=(((r11*x5973))+((r12*x5966))+(((-1.0)*x5968*x5971)));
evalcond[2]=((1.0)+((r02*x5966))+((r01*x5973))+(((-1.0)*x5967*x5971)));
evalcond[3]=((((-1.0)*r02*x5971))+((r01*x5974))+(((-1.0)*x5967*x5972)));
evalcond[4]=((((-1.0)*r22*x5971))+((r21*x5974))+(((-1.0)*sj2*x5969))+(((-1.0)*x5970*x5972))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x5969))+(((-1.0)*r12*x5971))+(((-1.0)*cj1*sj2))+((r11*x5974))+(((-1.0)*x5968*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5975=((1.0)*cj5);
CheckValue<IkReal> x5976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5975)))),-1);
if(!x5976.valid){
continue;
}
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5975)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5976.value)))+(x5977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5978=IKcos(j4);
IkReal x5979=IKsin(j4);
IkReal x5980=(cj5*r00);
IkReal x5981=(cj5*r10);
IkReal x5982=((1.0)*sj1);
IkReal x5983=(cj5*r20);
IkReal x5984=((1.0)*x5978);
IkReal x5985=((1.0)*x5979);
IkReal x5986=(sj5*x5978);
IkReal x5987=(sj5*x5979);
evalcond[0]=(((r21*x5986))+((r22*x5979))+(((-1.0)*x5983*x5984)));
evalcond[1]=(((r11*x5986))+(((-1.0)*x5981*x5984))+((r12*x5979)));
evalcond[2]=((1.0)+(((-1.0)*x5980*x5984))+((r02*x5979))+((r01*x5986)));
evalcond[3]=((((-1.0)*x5980*x5985))+(((-1.0)*r02*x5984))+((r01*x5987)));
evalcond[4]=((((-1.0)*sj2*x5982))+((r21*x5987))+((cj1*cj2))+(((-1.0)*r22*x5984))+(((-1.0)*x5983*x5985)));
evalcond[5]=((((-1.0)*r12*x5984))+((r11*x5987))+(((-1.0)*cj1*sj2))+(((-1.0)*x5981*x5985))+(((-1.0)*cj2*x5982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5988.value)))+(x5989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5990=IKcos(j4);
IkReal x5991=IKsin(j4);
IkReal x5992=(cj5*r00);
IkReal x5993=(cj5*r10);
IkReal x5994=((1.0)*sj1);
IkReal x5995=(cj5*r20);
IkReal x5996=((1.0)*x5990);
IkReal x5997=((1.0)*x5991);
IkReal x5998=(sj5*x5990);
IkReal x5999=(sj5*x5991);
evalcond[0]=(((r21*x5998))+(((-1.0)*x5995*x5996))+((r22*x5991)));
evalcond[1]=(((r12*x5991))+((r11*x5998))+(((-1.0)*x5993*x5996)));
evalcond[2]=((1.0)+(((-1.0)*x5992*x5996))+((r02*x5991))+((r01*x5998)));
evalcond[3]=((((-1.0)*x5992*x5997))+(((-1.0)*r02*x5996))+((r01*x5999)));
evalcond[4]=(((r21*x5999))+(((-1.0)*sj2*x5994))+((cj1*cj2))+(((-1.0)*x5995*x5997))+(((-1.0)*r22*x5996)));
evalcond[5]=((((-1.0)*r12*x5996))+((r11*x5999))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5994))+(((-1.0)*x5993*x5997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6000=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6000);
rxp1_1=(px*r21);
rxp1_2=(r11*x6000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6001=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6001);
rxp1_1=(px*r21);
rxp1_2=(r11*x6001);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6002=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6002);
rxp1_1=(px*r21);
rxp1_2=(r11*x6002);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6005.valid){
continue;
}
IkReal x6003=x6005.value;
IkReal x6004=((1.0)*sj0*x6003);
sj4array[0]=((((-1.0)*cj1*sj2*x6004))+(((-1.0)*cj2*sj1*x6004)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6006=IKcos(j4);
IkReal x6007=IKsin(j4);
IkReal x6008=(r21*sj5);
IkReal x6009=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x6006);
evalcond[1]=((((-1.0)*sj0))+((r02*x6007)));
evalcond[2]=(((x6006*x6008))+(((-1.0)*x6006*x6009)));
evalcond[3]=(((r11*sj5*x6006))+(((-1.0)*cj5*r10*x6006)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x6007*x6009))+((cj1*cj2))+((x6007*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6011=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6011.valid){
continue;
}
IkReal x6010=x6011.value;
sj4array[0]=((((-1.0)*cj1*cj2*x6010))+((sj1*sj2*x6010)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6012=IKcos(j4);
IkReal x6013=IKsin(j4);
IkReal x6014=((1.0)*cj5);
IkReal x6015=(sj5*x6012);
evalcond[0]=((-1.0)*r02*x6012);
evalcond[1]=((((-1.0)*sj0))+((r02*x6013)));
evalcond[2]=(((r21*x6015))+(((-1.0)*r20*x6012*x6014)));
evalcond[3]=(((r11*x6015))+(((-1.0)*r10*x6012*x6014)));
evalcond[4]=((((-1.0)*r10*x6013*x6014))+((r11*sj5*x6013))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6016=IKPowWithIntegerCheck(r02,-1);
if(!x6016.valid){
continue;
}
sj4array[0]=(sj0*(x6016.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6017=IKcos(j4);
IkReal x6018=IKsin(j4);
IkReal x6019=(r21*sj5);
IkReal x6020=(r11*sj5);
IkReal x6021=((1.0)*cj5*x6018);
IkReal x6022=((1.0)*cj5*x6017);
evalcond[0]=((-1.0)*r02*x6017);
evalcond[1]=(((x6017*x6019))+(((-1.0)*r20*x6022)));
evalcond[2]=((((-1.0)*r10*x6022))+((x6017*x6020)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r20*x6021))+((cj1*cj2))+((x6018*x6019)));
evalcond[4]=((((-1.0)*r10*x6021))+((x6018*x6020))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6023=((1.0)*sj0);
IkReal x6024=((1.0)*cj0);
CheckValue<IkReal> x6025 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x6023))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x6024)))),IkReal(((((-1.0)*r02*x6024))+(((-1.0)*r12*x6023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6025.valid){
continue;
}
CheckValue<IkReal> x6026=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6025.value)+(((1.5707963267949)*(x6026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6027=IKcos(j4);
IkReal x6028=IKsin(j4);
IkReal x6029=(cj5*r00);
IkReal x6030=(cj5*r10);
IkReal x6031=(cj2*sj1);
IkReal x6032=(cj5*r20);
IkReal x6033=(cj1*sj2);
IkReal x6034=((1.0)*x6027);
IkReal x6035=((1.0)*x6028);
IkReal x6036=(sj5*x6027);
IkReal x6037=(sj5*x6028);
evalcond[0]=(((r21*x6036))+(((-1.0)*x6032*x6034))+((r22*x6028)));
evalcond[1]=(cj0+((r11*x6036))+((r12*x6028))+(((-1.0)*x6030*x6034)));
evalcond[2]=((((-1.0)*x6029*x6034))+(((-1.0)*sj0))+((r02*x6028))+((r01*x6036)));
evalcond[3]=(((r21*x6037))+(((-1.0)*x6032*x6035))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x6034)));
evalcond[4]=((((-1.0)*x6029*x6035))+((cj0*x6031))+((cj0*x6033))+((r01*x6037))+(((-1.0)*r02*x6034)));
evalcond[5]=(((r11*x6037))+(((-1.0)*r12*x6034))+((sj0*x6031))+((sj0*x6033))+(((-1.0)*x6030*x6035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6038 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6038.valid){
continue;
}
CheckValue<IkReal> x6039=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6038.value)+(((1.5707963267949)*(x6039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6040=IKcos(j4);
IkReal x6041=IKsin(j4);
IkReal x6042=(cj5*r00);
IkReal x6043=(cj5*r10);
IkReal x6044=(cj2*sj1);
IkReal x6045=(cj5*r20);
IkReal x6046=(cj1*sj2);
IkReal x6047=((1.0)*x6040);
IkReal x6048=((1.0)*x6041);
IkReal x6049=(sj5*x6040);
IkReal x6050=(sj5*x6041);
evalcond[0]=(((r22*x6041))+(((-1.0)*x6045*x6047))+((r21*x6049)));
evalcond[1]=(((r11*x6049))+cj0+(((-1.0)*x6043*x6047))+((r12*x6041)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6042*x6047))+((r02*x6041))+((r01*x6049)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x6047))+(((-1.0)*x6045*x6048))+((cj1*cj2))+((r21*x6050)));
evalcond[4]=(((r01*x6050))+((cj0*x6046))+((cj0*x6044))+(((-1.0)*r02*x6047))+(((-1.0)*x6042*x6048)));
evalcond[5]=(((sj0*x6046))+((sj0*x6044))+(((-1.0)*x6043*x6048))+(((-1.0)*r12*x6047))+((r11*x6050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6051 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6051.valid){
continue;
}
CheckValue<IkReal> x6052=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6051.value)+(((1.5707963267949)*(x6052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6053=IKcos(j4);
IkReal x6054=IKsin(j4);
IkReal x6055=(cj5*r00);
IkReal x6056=(cj5*r10);
IkReal x6057=(cj2*sj1);
IkReal x6058=(cj5*r20);
IkReal x6059=(cj1*sj2);
IkReal x6060=((1.0)*x6053);
IkReal x6061=((1.0)*x6054);
IkReal x6062=(sj5*x6053);
IkReal x6063=(sj5*x6054);
evalcond[0]=(((r22*x6054))+((r21*x6062))+(((-1.0)*x6058*x6060)));
evalcond[1]=(((r12*x6054))+cj0+((r11*x6062))+(((-1.0)*x6056*x6060)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6055*x6060))+((r01*x6062))+((r02*x6054)));
evalcond[3]=((((-1.0)*r22*x6060))+(((-1.0)*sj1*sj2))+((r21*x6063))+((cj1*cj2))+(((-1.0)*x6058*x6061)));
evalcond[4]=((((-1.0)*x6055*x6061))+((r01*x6063))+((cj0*x6057))+((cj0*x6059))+(((-1.0)*r02*x6060)));
evalcond[5]=(((sj0*x6059))+((sj0*x6057))+((r11*x6063))+(((-1.0)*r12*x6060))+(((-1.0)*x6056*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6064=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6064;
j0eval[1]=IKsign(x6064);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6065=cj5*cj5;
IkReal x6066=r21*r21;
IkReal x6067=(sj1*sj2);
IkReal x6068=(r21*sj5);
IkReal x6069=(cj1*cj2);
IkReal x6070=(cj5*r20);
IkReal x6071=((r22*r22)+x6066+(((-2.0)*x6068*x6070))+((x6065*(r20*r20)))+(((-1.0)*x6065*x6066)));
j4eval[0]=x6071;
j4eval[1]=IKsign(x6071);
j4eval[2]=((IKabs(((((-1.0)*r22*x6069))+((r22*x6067)))))+(IKabs(((((-1.0)*x6067*x6068))+(((-1.0)*x6069*x6070))+((x6067*x6070))+((x6068*x6069))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((3.44332855093257)*py))), ((((1.57819225251076)*py))+(((3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6072=IKcos(j0);
IkReal x6073=IKsin(j0);
evalcond[0]=((((-0.11)*x6073))+(((-1.0)*px))+(((0.24)*x6072)));
evalcond[1]=((((0.11)*x6072))+(((-1.0)*py))+(((0.24)*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6074=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6074;
j4eval[1]=IKsign(x6074);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6075=cj5*cj5;
IkReal x6076=(r11*r21);
IkReal x6077=((1.0)*r20);
IkReal x6078=(cj5*sj5);
IkReal x6079=((((-1.0)*r10*x6075*x6077))+((x6075*x6076))+(((-1.0)*x6076))+(((-1.0)*r12*r22))+((r10*r21*x6078))+((r11*r20*x6078)));
j4eval[0]=x6079;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6077))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6080=cj5*cj5;
IkReal x6081=((1.0)*r21);
IkReal x6082=(cj5*sj5);
IkReal x6083=((1.0)*r20);
IkReal x6084=(((r00*r20*x6080))+(((-1.0)*r01*x6080*x6081))+((r01*r21))+(((-1.0)*r00*x6081*x6082))+((r02*r22))+(((-1.0)*r01*x6082*x6083)));
j4eval[0]=x6084;
j4eval[1]=IKsign(x6084);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6083)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6085=cj5*cj5;
IkReal x6086=((1.0)*r21);
IkReal x6087=(cj5*sj5);
IkReal x6088=((1.0)*r20);
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6088)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6087*x6088))+((r00*r20*x6085))+(((-1.0)*r01*x6085*x6086))+((r01*r21))+(((-1.0)*r00*x6086*x6087))+((r02*r22)))),-1);
if(!x6090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6089.value)+(((1.5707963267949)*(x6090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6091=IKcos(j4);
IkReal x6092=IKsin(j4);
IkReal x6093=(cj5*r00);
IkReal x6094=(r01*sj5);
IkReal x6095=(r11*sj5);
IkReal x6096=(r21*sj5);
IkReal x6097=(cj5*r10);
IkReal x6098=(cj5*r20);
IkReal x6099=((1.0)*x6091);
IkReal x6100=((1.0)*x6092);
evalcond[0]=((((-1.0)*x6098*x6099))+((r22*x6092))+((x6091*x6096)));
evalcond[1]=(((x6092*x6098))+(((-1.0)*x6096*x6100))+((r22*x6091)));
evalcond[2]=(cj0+((x6091*x6095))+((r12*x6092))+(((-1.0)*x6097*x6099)));
evalcond[3]=(((x6092*x6093))+cj0+(((-1.0)*x6094*x6100))+((r02*x6091)));
evalcond[4]=(((x6092*x6097))+sj0+(((-1.0)*x6095*x6100))+((r12*x6091)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6093*x6099))+((x6091*x6094))+((r02*x6092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6101=cj5*cj5;
IkReal x6102=(r11*r21);
IkReal x6103=((1.0)*r20);
IkReal x6104=(cj5*sj5);
CheckValue<IkReal> x6105 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6105.valid){
continue;
}
CheckValue<IkReal> x6106=IKPowWithIntegerCheck(IKsign((((x6101*x6102))+(((-1.0)*r12*r22))+((r10*r21*x6104))+((r11*r20*x6104))+(((-1.0)*x6102))+(((-1.0)*r10*x6101*x6103)))),-1);
if(!x6106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6105.value)+(((1.5707963267949)*(x6106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6107=IKcos(j4);
IkReal x6108=IKsin(j4);
IkReal x6109=(cj5*r00);
IkReal x6110=(r01*sj5);
IkReal x6111=(r11*sj5);
IkReal x6112=(r21*sj5);
IkReal x6113=(cj5*r10);
IkReal x6114=(cj5*r20);
IkReal x6115=((1.0)*x6107);
IkReal x6116=((1.0)*x6108);
evalcond[0]=(((r22*x6108))+(((-1.0)*x6114*x6115))+((x6107*x6112)));
evalcond[1]=(((r22*x6107))+(((-1.0)*x6112*x6116))+((x6108*x6114)));
evalcond[2]=(cj0+(((-1.0)*x6113*x6115))+((x6107*x6111))+((r12*x6108)));
evalcond[3]=(cj0+((x6108*x6109))+((r02*x6107))+(((-1.0)*x6110*x6116)));
evalcond[4]=(sj0+(((-1.0)*x6111*x6116))+((x6108*x6113))+((r12*x6107)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6109*x6115))+((r02*x6108))+((x6107*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6117 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6117.valid){
continue;
}
CheckValue<IkReal> x6118=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6117.value)+(((1.5707963267949)*(x6118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6119=IKcos(j4);
IkReal x6120=IKsin(j4);
IkReal x6121=(cj5*r00);
IkReal x6122=(r01*sj5);
IkReal x6123=(r11*sj5);
IkReal x6124=(r21*sj5);
IkReal x6125=(cj5*r10);
IkReal x6126=(cj5*r20);
IkReal x6127=((1.0)*x6119);
IkReal x6128=((1.0)*x6120);
evalcond[0]=(((x6119*x6124))+(((-1.0)*x6126*x6127))+((r22*x6120)));
evalcond[1]=((((-1.0)*x6124*x6128))+((x6120*x6126))+((r22*x6119)));
evalcond[2]=((((-1.0)*x6125*x6127))+((r12*x6120))+((x6119*x6123))+cj0);
evalcond[3]=(((r02*x6119))+cj0+((x6120*x6121))+(((-1.0)*x6122*x6128)));
evalcond[4]=(sj0+((x6120*x6125))+((r12*x6119))+(((-1.0)*x6123*x6128)));
evalcond[5]=((((-1.0)*sj0))+((x6119*x6122))+(((-1.0)*x6121*x6127))+((r02*x6120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((-3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((-3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((-3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))), ((((1.57819225251076)*py))+(((-3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6129=IKcos(j0);
IkReal x6130=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.24)*x6129))+(((-0.11)*x6130)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x6129))+(((-0.24)*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6131=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6131;
j4eval[1]=IKsign(x6131);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6132=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6132;
j4eval[1]=IKsign(x6132);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6133=cj5*cj5;
IkReal x6134=(r11*r21);
IkReal x6135=((1.0)*r20);
IkReal x6136=(cj5*sj5);
IkReal x6137=((((-1.0)*r12*r22))+(((-1.0)*r10*x6133*x6135))+((x6133*x6134))+((r10*r21*x6136))+((r11*r20*x6136))+(((-1.0)*x6134)));
j4eval[0]=x6137;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6135))))));
j4eval[2]=IKsign(x6137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6138=cj5*cj5;
IkReal x6139=(r11*r21);
IkReal x6140=((1.0)*r20);
IkReal x6141=(cj5*sj5);
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6140))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
CheckValue<IkReal> x6143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x6138*x6140))+((r11*r20*x6141))+(((-1.0)*x6139))+((r10*r21*x6141))+((x6138*x6139)))),-1);
if(!x6143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6142.value)+(((1.5707963267949)*(x6143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6144=IKcos(j4);
IkReal x6145=IKsin(j4);
IkReal x6146=((1.0)*sj0);
IkReal x6147=(cj5*r00);
IkReal x6148=(cj5*r10);
IkReal x6149=(cj5*r20);
IkReal x6150=((1.0)*x6144);
IkReal x6151=(sj5*x6144);
IkReal x6152=((1.0)*sj5*x6145);
evalcond[0]=(((r21*x6151))+((r22*x6145))+(((-1.0)*x6149*x6150)));
evalcond[1]=(((x6145*x6149))+((r22*x6144))+(((-1.0)*r21*x6152)));
evalcond[2]=(cj0+((r12*x6145))+(((-1.0)*x6148*x6150))+((r11*x6151)));
evalcond[3]=((((-1.0)*x6146))+(((-1.0)*x6147*x6150))+((r02*x6145))+((r01*x6151)));
evalcond[4]=(((x6145*x6147))+(((-1.0)*r01*x6152))+(((-1.0)*cj0))+((r02*x6144)));
evalcond[5]=((((-1.0)*x6146))+((x6145*x6148))+(((-1.0)*r11*x6152))+((r12*x6144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
CheckValue<IkReal> x6154=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6153.value)+(((1.5707963267949)*(x6154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6155=IKcos(j4);
IkReal x6156=IKsin(j4);
IkReal x6157=((1.0)*sj0);
IkReal x6158=(cj5*r00);
IkReal x6159=(cj5*r10);
IkReal x6160=(cj5*r20);
IkReal x6161=((1.0)*x6155);
IkReal x6162=(sj5*x6155);
IkReal x6163=((1.0)*sj5*x6156);
evalcond[0]=((((-1.0)*x6160*x6161))+((r22*x6156))+((r21*x6162)));
evalcond[1]=(((r22*x6155))+(((-1.0)*r21*x6163))+((x6156*x6160)));
evalcond[2]=(((r12*x6156))+cj0+((r11*x6162))+(((-1.0)*x6159*x6161)));
evalcond[3]=(((r02*x6156))+(((-1.0)*x6157))+((r01*x6162))+(((-1.0)*x6158*x6161)));
evalcond[4]=(((x6156*x6158))+((r02*x6155))+(((-1.0)*r01*x6163))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6155))+(((-1.0)*r11*x6163))+((x6156*x6159))+(((-1.0)*x6157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6164 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6164.valid){
continue;
}
CheckValue<IkReal> x6165=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6164.value)+(((1.5707963267949)*(x6165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6166=IKcos(j4);
IkReal x6167=IKsin(j4);
IkReal x6168=((1.0)*sj0);
IkReal x6169=(cj5*r00);
IkReal x6170=(cj5*r10);
IkReal x6171=(cj5*r20);
IkReal x6172=((1.0)*x6166);
IkReal x6173=(sj5*x6166);
IkReal x6174=((1.0)*sj5*x6167);
evalcond[0]=(((r21*x6173))+(((-1.0)*x6171*x6172))+((r22*x6167)));
evalcond[1]=(((x6167*x6171))+(((-1.0)*r21*x6174))+((r22*x6166)));
evalcond[2]=(cj0+((r12*x6167))+((r11*x6173))+(((-1.0)*x6170*x6172)));
evalcond[3]=((((-1.0)*x6168))+((r02*x6167))+((r01*x6173))+(((-1.0)*x6169*x6172)));
evalcond[4]=(((x6167*x6169))+((r02*x6166))+(((-1.0)*r01*x6174))+(((-1.0)*cj0)));
evalcond[5]=(((x6167*x6170))+((r12*x6166))+(((-1.0)*x6168))+(((-1.0)*r11*x6174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.89050070191858)*py))+(((-0.411792232101076)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.411792232101076)*py))+(((1.89050070191858)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.89050070191858)*py))+(((-0.411792232101076)*px))))+IKsqr(((((0.411792232101076)*py))+(((1.89050070191858)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.89050070191858)*py))+(((-0.411792232101076)*px))), ((((0.411792232101076)*py))+(((1.89050070191858)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6175=IKsin(j0);
IkReal x6176=IKcos(j0);
evalcond[0]=((((-0.11)*x6175))+(((-1.0)*px))+(((0.505)*x6176)));
evalcond[1]=((((0.11)*x6176))+(((-1.0)*py))+(((0.505)*x6175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6177=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6177;
j4eval[1]=IKsign(x6177);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6178=cj5*cj5;
IkReal x6179=(r11*r21);
IkReal x6180=((1.0)*r20);
IkReal x6181=(cj5*sj5);
IkReal x6182=(((r10*r21*x6181))+(((-1.0)*r12*r22))+((x6178*x6179))+(((-1.0)*x6179))+(((-1.0)*r10*x6178*x6180))+((r11*r20*x6181)));
j4eval[0]=x6182;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6180))))));
j4eval[2]=IKsign(x6182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6183=cj5*cj5;
IkReal x6184=((1.0)*r21);
IkReal x6185=(cj5*sj5);
IkReal x6186=((1.0)*r20);
IkReal x6187=(((r00*r20*x6183))+(((-1.0)*r01*x6185*x6186))+((r01*r21))+(((-1.0)*r01*x6183*x6184))+(((-1.0)*r00*x6184*x6185))+((r02*r22)));
j4eval[0]=x6187;
j4eval[1]=IKsign(x6187);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6186)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6188=cj5*cj5;
IkReal x6189=((1.0)*r21);
IkReal x6190=(cj5*sj5);
IkReal x6191=((1.0)*r20);
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x6191))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
CheckValue<IkReal> x6193=IKPowWithIntegerCheck(IKsign((((r00*r20*x6188))+((r01*r21))+(((-1.0)*r00*x6189*x6190))+(((-1.0)*r01*x6188*x6189))+(((-1.0)*r01*x6190*x6191))+((r02*r22)))),-1);
if(!x6193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6192.value)+(((1.5707963267949)*(x6193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6194=IKcos(j4);
IkReal x6195=IKsin(j4);
IkReal x6196=(cj5*r00);
IkReal x6197=(r01*sj5);
IkReal x6198=(r11*sj5);
IkReal x6199=(r21*sj5);
IkReal x6200=(cj5*r10);
IkReal x6201=(cj5*r20);
IkReal x6202=((1.0)*x6194);
IkReal x6203=((1.0)*x6195);
evalcond[0]=(((x6194*x6199))+((r22*x6195))+(((-1.0)*x6201*x6202)));
evalcond[1]=((((-1.0)*x6199*x6203))+((x6195*x6201))+((r22*x6194)));
evalcond[2]=(((x6194*x6198))+cj0+((r12*x6195))+(((-1.0)*x6200*x6202)));
evalcond[3]=(((x6195*x6196))+(((-1.0)*x6197*x6203))+cj0+((r02*x6194)));
evalcond[4]=(sj0+(((-1.0)*x6198*x6203))+((r12*x6194))+((x6195*x6200)));
evalcond[5]=((((-1.0)*sj0))+((x6194*x6197))+(((-1.0)*x6196*x6202))+((r02*x6195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6204=cj5*cj5;
IkReal x6205=(r11*r21);
IkReal x6206=((1.0)*r20);
IkReal x6207=(cj5*sj5);
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
CheckValue<IkReal> x6209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6204*x6206))+(((-1.0)*r12*r22))+(((-1.0)*x6205))+((r10*r21*x6207))+((r11*r20*x6207))+((x6204*x6205)))),-1);
if(!x6209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6208.value)+(((1.5707963267949)*(x6209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6210=IKcos(j4);
IkReal x6211=IKsin(j4);
IkReal x6212=(cj5*r00);
IkReal x6213=(r01*sj5);
IkReal x6214=(r11*sj5);
IkReal x6215=(r21*sj5);
IkReal x6216=(cj5*r10);
IkReal x6217=(cj5*r20);
IkReal x6218=((1.0)*x6210);
IkReal x6219=((1.0)*x6211);
evalcond[0]=(((x6210*x6215))+(((-1.0)*x6217*x6218))+((r22*x6211)));
evalcond[1]=((((-1.0)*x6215*x6219))+((x6211*x6217))+((r22*x6210)));
evalcond[2]=(((r12*x6211))+cj0+((x6210*x6214))+(((-1.0)*x6216*x6218)));
evalcond[3]=(cj0+((r02*x6210))+(((-1.0)*x6213*x6219))+((x6211*x6212)));
evalcond[4]=(((r12*x6210))+sj0+((x6211*x6216))+(((-1.0)*x6214*x6219)));
evalcond[5]=((((-1.0)*sj0))+((x6210*x6213))+((r02*x6211))+(((-1.0)*x6212*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
CheckValue<IkReal> x6221=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6220.value)+(((1.5707963267949)*(x6221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6222=IKcos(j4);
IkReal x6223=IKsin(j4);
IkReal x6224=(cj5*r00);
IkReal x6225=(r01*sj5);
IkReal x6226=(r11*sj5);
IkReal x6227=(r21*sj5);
IkReal x6228=(cj5*r10);
IkReal x6229=(cj5*r20);
IkReal x6230=((1.0)*x6222);
IkReal x6231=((1.0)*x6223);
evalcond[0]=(((x6222*x6227))+((r22*x6223))+(((-1.0)*x6229*x6230)));
evalcond[1]=(((x6223*x6229))+((r22*x6222))+(((-1.0)*x6227*x6231)));
evalcond[2]=(cj0+((x6222*x6226))+(((-1.0)*x6228*x6230))+((r12*x6223)));
evalcond[3]=(((r02*x6222))+(((-1.0)*x6225*x6231))+cj0+((x6223*x6224)));
evalcond[4]=(sj0+(((-1.0)*x6226*x6231))+((x6223*x6228))+((r12*x6222)));
evalcond[5]=((((-1.0)*x6224*x6230))+(((-1.0)*sj0))+((r02*x6223))+((x6222*x6225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.96463654223969)*py))+(((-8.64440078585462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.96463654223969)*px))+(((8.64440078585462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.96463654223969)*py))+(((-8.64440078585462)*px))))+IKsqr(((((1.96463654223969)*px))+(((8.64440078585462)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.96463654223969)*py))+(((-8.64440078585462)*px))), ((((1.96463654223969)*px))+(((8.64440078585462)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6232=IKsin(j0);
IkReal x6233=IKcos(j0);
evalcond[0]=((((-0.11)*x6232))+(((-1.0)*px))+(((0.025)*x6233)));
evalcond[1]=((((-1.0)*py))+(((0.025)*x6232))+(((0.11)*x6233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6234=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6234;
j4eval[1]=IKsign(x6234);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6235=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6235;
j4eval[1]=IKsign(x6235);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6236=cj5*cj5;
IkReal x6237=(r11*r21);
IkReal x6238=((1.0)*r20);
IkReal x6239=(cj5*sj5);
IkReal x6240=(((x6236*x6237))+(((-1.0)*r12*r22))+((r11*r20*x6239))+(((-1.0)*x6237))+((r10*r21*x6239))+(((-1.0)*r10*x6236*x6238)));
j4eval[0]=x6240;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6238)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6241=cj5*cj5;
IkReal x6242=(r11*r21);
IkReal x6243=((1.0)*r20);
IkReal x6244=(cj5*sj5);
CheckValue<IkReal> x6245=IKPowWithIntegerCheck(IKsign((((x6241*x6242))+(((-1.0)*r12*r22))+(((-1.0)*r10*x6241*x6243))+(((-1.0)*x6242))+((r11*r20*x6244))+((r10*r21*x6244)))),-1);
if(!x6245.valid){
continue;
}
CheckValue<IkReal> x6246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6245.value)))+(x6246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6247=IKcos(j4);
IkReal x6248=IKsin(j4);
IkReal x6249=((1.0)*sj0);
IkReal x6250=(cj5*r00);
IkReal x6251=(cj5*r10);
IkReal x6252=(cj5*r20);
IkReal x6253=((1.0)*x6247);
IkReal x6254=(sj5*x6247);
IkReal x6255=((1.0)*sj5*x6248);
evalcond[0]=((((-1.0)*x6252*x6253))+((r21*x6254))+((r22*x6248)));
evalcond[1]=(((x6248*x6252))+((r22*x6247))+(((-1.0)*r21*x6255)));
evalcond[2]=((((-1.0)*x6251*x6253))+cj0+((r12*x6248))+((r11*x6254)));
evalcond[3]=((((-1.0)*x6250*x6253))+((r01*x6254))+((r02*x6248))+(((-1.0)*x6249)));
evalcond[4]=(((r02*x6247))+((x6248*x6250))+(((-1.0)*r01*x6255))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6247))+(((-1.0)*x6249))+((x6248*x6251))+(((-1.0)*r11*x6255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
CheckValue<IkReal> x6257=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6256.value)+(((1.5707963267949)*(x6257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6258=IKcos(j4);
IkReal x6259=IKsin(j4);
IkReal x6260=((1.0)*sj0);
IkReal x6261=(cj5*r00);
IkReal x6262=(cj5*r10);
IkReal x6263=(cj5*r20);
IkReal x6264=((1.0)*x6258);
IkReal x6265=(sj5*x6258);
IkReal x6266=((1.0)*sj5*x6259);
evalcond[0]=(((r22*x6259))+(((-1.0)*x6263*x6264))+((r21*x6265)));
evalcond[1]=(((r22*x6258))+((x6259*x6263))+(((-1.0)*r21*x6266)));
evalcond[2]=(cj0+(((-1.0)*x6262*x6264))+((r12*x6259))+((r11*x6265)));
evalcond[3]=(((r01*x6265))+(((-1.0)*x6261*x6264))+((r02*x6259))+(((-1.0)*x6260)));
evalcond[4]=(((x6259*x6261))+((r02*x6258))+(((-1.0)*r01*x6266))+(((-1.0)*cj0)));
evalcond[5]=(((x6259*x6262))+(((-1.0)*x6260))+(((-1.0)*r11*x6266))+((r12*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKcos(j4);
IkReal x6270=IKsin(j4);
IkReal x6271=((1.0)*sj0);
IkReal x6272=(cj5*r00);
IkReal x6273=(cj5*r10);
IkReal x6274=(cj5*r20);
IkReal x6275=((1.0)*x6269);
IkReal x6276=(sj5*x6269);
IkReal x6277=((1.0)*sj5*x6270);
evalcond[0]=(((r22*x6270))+(((-1.0)*x6274*x6275))+((r21*x6276)));
evalcond[1]=((((-1.0)*r21*x6277))+((r22*x6269))+((x6270*x6274)));
evalcond[2]=(((r12*x6270))+(((-1.0)*x6273*x6275))+cj0+((r11*x6276)));
evalcond[3]=((((-1.0)*x6272*x6275))+((r01*x6276))+((r02*x6270))+(((-1.0)*x6271)));
evalcond[4]=((((-1.0)*r01*x6277))+((r02*x6269))+((x6270*x6272))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6271))+((x6270*x6273))+((r12*x6269))+(((-1.0)*r11*x6277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((-3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((-3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((-3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((-3.44332855093257)*py))), ((((1.57819225251076)*py))+(((-3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6278=IKcos(j0);
IkReal x6279=IKsin(j0);
evalcond[0]=((((-0.11)*x6279))+(((-0.24)*x6278))+(((-1.0)*px)));
evalcond[1]=((((-0.24)*x6279))+(((-1.0)*py))+(((0.11)*x6278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6280=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6280;
j4eval[1]=IKsign(x6280);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6281=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6281;
j4eval[1]=IKsign(x6281);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6282=cj5*cj5;
IkReal x6283=(r11*r21);
IkReal x6284=((1.0)*r20);
IkReal x6285=(cj5*sj5);
IkReal x6286=(((r10*r21*x6285))+((r11*r20*x6285))+(((-1.0)*r12*r22))+(((-1.0)*r10*x6282*x6284))+((x6282*x6283))+(((-1.0)*x6283)));
j4eval[0]=x6286;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6284)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6287=cj5*cj5;
IkReal x6288=(r11*r21);
IkReal x6289=((1.0)*r20);
IkReal x6290=(cj5*sj5);
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x6287*x6289))+((x6287*x6288))+(((-1.0)*x6288))+((r11*r20*x6290))+((r10*r21*x6290)))),-1);
if(!x6291.valid){
continue;
}
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6291.value)))+(x6292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6293=IKcos(j4);
IkReal x6294=IKsin(j4);
IkReal x6295=((1.0)*sj0);
IkReal x6296=(cj5*r00);
IkReal x6297=(cj5*r10);
IkReal x6298=(cj5*r20);
IkReal x6299=((1.0)*x6293);
IkReal x6300=(sj5*x6293);
IkReal x6301=((1.0)*sj5*x6294);
evalcond[0]=(((r22*x6294))+((r21*x6300))+(((-1.0)*x6298*x6299)));
evalcond[1]=(((r22*x6293))+((x6294*x6298))+(((-1.0)*r21*x6301)));
evalcond[2]=(cj0+((r11*x6300))+((r12*x6294))+(((-1.0)*x6297*x6299)));
evalcond[3]=((((-1.0)*x6296*x6299))+((r01*x6300))+(((-1.0)*x6295))+((r02*x6294)));
evalcond[4]=(((x6294*x6296))+(((-1.0)*r01*x6301))+((r02*x6293))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6301))+((x6294*x6297))+(((-1.0)*x6295))+((r12*x6293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6302 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6302.valid){
continue;
}
CheckValue<IkReal> x6303=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6302.value)+(((1.5707963267949)*(x6303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6304=IKcos(j4);
IkReal x6305=IKsin(j4);
IkReal x6306=((1.0)*sj0);
IkReal x6307=(cj5*r00);
IkReal x6308=(cj5*r10);
IkReal x6309=(cj5*r20);
IkReal x6310=((1.0)*x6304);
IkReal x6311=(sj5*x6304);
IkReal x6312=((1.0)*sj5*x6305);
evalcond[0]=(((r22*x6305))+(((-1.0)*x6309*x6310))+((r21*x6311)));
evalcond[1]=(((r22*x6304))+((x6305*x6309))+(((-1.0)*r21*x6312)));
evalcond[2]=(cj0+(((-1.0)*x6308*x6310))+((r11*x6311))+((r12*x6305)));
evalcond[3]=((((-1.0)*x6306))+((r01*x6311))+((r02*x6305))+(((-1.0)*x6307*x6310)));
evalcond[4]=(((r02*x6304))+(((-1.0)*r01*x6312))+((x6305*x6307))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6306))+(((-1.0)*r11*x6312))+((r12*x6304))+((x6305*x6308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
CheckValue<IkReal> x6314=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6313.value)+(((1.5707963267949)*(x6314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6315=IKcos(j4);
IkReal x6316=IKsin(j4);
IkReal x6317=((1.0)*sj0);
IkReal x6318=(cj5*r00);
IkReal x6319=(cj5*r10);
IkReal x6320=(cj5*r20);
IkReal x6321=((1.0)*x6315);
IkReal x6322=(sj5*x6315);
IkReal x6323=((1.0)*sj5*x6316);
evalcond[0]=(((r22*x6316))+(((-1.0)*x6320*x6321))+((r21*x6322)));
evalcond[1]=(((r22*x6315))+(((-1.0)*r21*x6323))+((x6316*x6320)));
evalcond[2]=(((r11*x6322))+cj0+((r12*x6316))+(((-1.0)*x6319*x6321)));
evalcond[3]=((((-1.0)*x6318*x6321))+(((-1.0)*x6317))+((r02*x6316))+((r01*x6322)));
evalcond[4]=((((-1.0)*r01*x6323))+((r02*x6315))+((x6316*x6318))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6317))+((x6316*x6319))+((r12*x6315))+(((-1.0)*r11*x6323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.57819225251076)*px))+(((3.44332855093257)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.57819225251076)*py))+(((3.44332855093257)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.57819225251076)*px))+(((3.44332855093257)*py))))+IKsqr(((((1.57819225251076)*py))+(((3.44332855093257)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.57819225251076)*px))+(((3.44332855093257)*py))), ((((1.57819225251076)*py))+(((3.44332855093257)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6324=IKcos(j0);
IkReal x6325=IKsin(j0);
evalcond[0]=((((0.24)*x6324))+(((-1.0)*px))+(((-0.11)*x6325)));
evalcond[1]=((((0.24)*x6325))+(((0.11)*x6324))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6326=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6326;
j4eval[1]=IKsign(x6326);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6327=cj5*cj5;
IkReal x6328=(r11*r21);
IkReal x6329=((1.0)*r20);
IkReal x6330=(cj5*sj5);
IkReal x6331=((((-1.0)*x6328))+((x6327*x6328))+(((-1.0)*r12*r22))+((r11*r20*x6330))+((r10*r21*x6330))+(((-1.0)*r10*x6327*x6329)));
j4eval[0]=x6331;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6329))))));
j4eval[2]=IKsign(x6331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6332=cj5*cj5;
IkReal x6333=((1.0)*r21);
IkReal x6334=(cj5*sj5);
IkReal x6335=((1.0)*r20);
IkReal x6336=(((r00*r20*x6332))+(((-1.0)*r01*x6334*x6335))+(((-1.0)*r00*x6333*x6334))+((r01*r21))+(((-1.0)*r01*x6332*x6333))+((r02*r22)));
j4eval[0]=x6336;
j4eval[1]=IKsign(x6336);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6335))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6337=cj5*cj5;
IkReal x6338=((1.0)*r21);
IkReal x6339=(cj5*sj5);
IkReal x6340=((1.0)*r20);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6340)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
CheckValue<IkReal> x6342=IKPowWithIntegerCheck(IKsign((((r00*r20*x6337))+(((-1.0)*r01*x6339*x6340))+((r01*r21))+(((-1.0)*r00*x6338*x6339))+((r02*r22))+(((-1.0)*r01*x6337*x6338)))),-1);
if(!x6342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6341.value)+(((1.5707963267949)*(x6342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6343=IKcos(j4);
IkReal x6344=IKsin(j4);
IkReal x6345=(cj5*r00);
IkReal x6346=(r01*sj5);
IkReal x6347=(r11*sj5);
IkReal x6348=(r21*sj5);
IkReal x6349=(cj5*r10);
IkReal x6350=(cj5*r20);
IkReal x6351=((1.0)*x6343);
IkReal x6352=((1.0)*x6344);
evalcond[0]=(((r22*x6344))+(((-1.0)*x6350*x6351))+((x6343*x6348)));
evalcond[1]=(((r22*x6343))+((x6344*x6350))+(((-1.0)*x6348*x6352)));
evalcond[2]=((((-1.0)*x6349*x6351))+((r12*x6344))+cj0+((x6343*x6347)));
evalcond[3]=(((x6344*x6345))+cj0+((r02*x6343))+(((-1.0)*x6346*x6352)));
evalcond[4]=(((x6344*x6349))+((r12*x6343))+sj0+(((-1.0)*x6347*x6352)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6344))+(((-1.0)*x6345*x6351))+((x6343*x6346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6353=cj5*cj5;
IkReal x6354=(r11*r21);
IkReal x6355=((1.0)*r20);
IkReal x6356=(cj5*sj5);
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
CheckValue<IkReal> x6358=IKPowWithIntegerCheck(IKsign((((r11*r20*x6356))+((x6353*x6354))+(((-1.0)*r12*r22))+((r10*r21*x6356))+(((-1.0)*x6354))+(((-1.0)*r10*x6353*x6355)))),-1);
if(!x6358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6357.value)+(((1.5707963267949)*(x6358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6359=IKcos(j4);
IkReal x6360=IKsin(j4);
IkReal x6361=(cj5*r00);
IkReal x6362=(r01*sj5);
IkReal x6363=(r11*sj5);
IkReal x6364=(r21*sj5);
IkReal x6365=(cj5*r10);
IkReal x6366=(cj5*r20);
IkReal x6367=((1.0)*x6359);
IkReal x6368=((1.0)*x6360);
evalcond[0]=(((x6359*x6364))+(((-1.0)*x6366*x6367))+((r22*x6360)));
evalcond[1]=(((x6360*x6366))+((r22*x6359))+(((-1.0)*x6364*x6368)));
evalcond[2]=(((x6359*x6363))+(((-1.0)*x6365*x6367))+cj0+((r12*x6360)));
evalcond[3]=((((-1.0)*x6362*x6368))+cj0+((x6360*x6361))+((r02*x6359)));
evalcond[4]=(sj0+((x6360*x6365))+((r12*x6359))+(((-1.0)*x6363*x6368)));
evalcond[5]=(((x6359*x6362))+(((-1.0)*sj0))+(((-1.0)*x6361*x6367))+((r02*x6360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6369 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6369.valid){
continue;
}
CheckValue<IkReal> x6370=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6369.value)+(((1.5707963267949)*(x6370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6371=IKcos(j4);
IkReal x6372=IKsin(j4);
IkReal x6373=(cj5*r00);
IkReal x6374=(r01*sj5);
IkReal x6375=(r11*sj5);
IkReal x6376=(r21*sj5);
IkReal x6377=(cj5*r10);
IkReal x6378=(cj5*r20);
IkReal x6379=((1.0)*x6371);
IkReal x6380=((1.0)*x6372);
evalcond[0]=(((x6371*x6376))+((r22*x6372))+(((-1.0)*x6378*x6379)));
evalcond[1]=((((-1.0)*x6376*x6380))+((x6372*x6378))+((r22*x6371)));
evalcond[2]=(cj0+((r12*x6372))+((x6371*x6375))+(((-1.0)*x6377*x6379)));
evalcond[3]=(cj0+(((-1.0)*x6374*x6380))+((x6372*x6373))+((r02*x6371)));
evalcond[4]=(sj0+(((-1.0)*x6375*x6380))+((x6372*x6377))+((r12*x6371)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6373*x6379))+((x6371*x6374))+((r02*x6372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.411792232101076)*px))+(((-1.89050070191858)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.411792232101076)*py))+(((-1.89050070191858)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.411792232101076)*px))+(((-1.89050070191858)*py))))+IKsqr(((((0.411792232101076)*py))+(((-1.89050070191858)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.411792232101076)*px))+(((-1.89050070191858)*py))), ((((0.411792232101076)*py))+(((-1.89050070191858)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6381=IKcos(j0);
IkReal x6382=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.505)*x6381))+(((-0.11)*x6382)));
evalcond[1]=((((-1.0)*py))+(((-0.505)*x6382))+(((0.11)*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6383;
j4eval[1]=IKsign(x6383);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6384=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6384;
j4eval[1]=IKsign(x6384);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6385=cj5*cj5;
IkReal x6386=(r11*r21);
IkReal x6387=((1.0)*r20);
IkReal x6388=(cj5*sj5);
IkReal x6389=(((r10*r21*x6388))+(((-1.0)*x6386))+((x6385*x6386))+(((-1.0)*r12*r22))+(((-1.0)*r10*x6385*x6387))+((r11*r20*x6388)));
j4eval[0]=x6389;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6387)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6390=cj5*cj5;
IkReal x6391=(r11*r21);
IkReal x6392=((1.0)*r20);
IkReal x6393=(cj5*sj5);
CheckValue<IkReal> x6394 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6394.valid){
continue;
}
CheckValue<IkReal> x6395=IKPowWithIntegerCheck(IKsign((((x6390*x6391))+(((-1.0)*x6391))+((r11*r20*x6393))+(((-1.0)*r12*r22))+((r10*r21*x6393))+(((-1.0)*r10*x6390*x6392)))),-1);
if(!x6395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6394.value)+(((1.5707963267949)*(x6395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6396=IKcos(j4);
IkReal x6397=IKsin(j4);
IkReal x6398=((1.0)*sj0);
IkReal x6399=(cj5*r00);
IkReal x6400=(cj5*r10);
IkReal x6401=(cj5*r20);
IkReal x6402=((1.0)*x6396);
IkReal x6403=(sj5*x6396);
IkReal x6404=((1.0)*sj5*x6397);
evalcond[0]=((((-1.0)*x6401*x6402))+((r21*x6403))+((r22*x6397)));
evalcond[1]=((((-1.0)*r21*x6404))+((x6397*x6401))+((r22*x6396)));
evalcond[2]=(cj0+(((-1.0)*x6400*x6402))+((r12*x6397))+((r11*x6403)));
evalcond[3]=(((r01*x6403))+(((-1.0)*x6398))+(((-1.0)*x6399*x6402))+((r02*x6397)));
evalcond[4]=(((x6397*x6399))+(((-1.0)*r01*x6404))+(((-1.0)*cj0))+((r02*x6396)));
evalcond[5]=(((r12*x6396))+(((-1.0)*x6398))+(((-1.0)*r11*x6404))+((x6397*x6400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6405 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6405.valid){
continue;
}
CheckValue<IkReal> x6406=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6405.value)+(((1.5707963267949)*(x6406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6407=IKcos(j4);
IkReal x6408=IKsin(j4);
IkReal x6409=((1.0)*sj0);
IkReal x6410=(cj5*r00);
IkReal x6411=(cj5*r10);
IkReal x6412=(cj5*r20);
IkReal x6413=((1.0)*x6407);
IkReal x6414=(sj5*x6407);
IkReal x6415=((1.0)*sj5*x6408);
evalcond[0]=(((r21*x6414))+(((-1.0)*x6412*x6413))+((r22*x6408)));
evalcond[1]=(((x6408*x6412))+(((-1.0)*r21*x6415))+((r22*x6407)));
evalcond[2]=(cj0+((r12*x6408))+(((-1.0)*x6411*x6413))+((r11*x6414)));
evalcond[3]=(((r02*x6408))+((r01*x6414))+(((-1.0)*x6409))+(((-1.0)*x6410*x6413)));
evalcond[4]=(((x6408*x6410))+((r02*x6407))+(((-1.0)*r01*x6415))+(((-1.0)*cj0)));
evalcond[5]=(((x6408*x6411))+(((-1.0)*x6409))+(((-1.0)*r11*x6415))+((r12*x6407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
CheckValue<IkReal> x6417=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6416.value)+(((1.5707963267949)*(x6417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6418=IKcos(j4);
IkReal x6419=IKsin(j4);
IkReal x6420=((1.0)*sj0);
IkReal x6421=(cj5*r00);
IkReal x6422=(cj5*r10);
IkReal x6423=(cj5*r20);
IkReal x6424=((1.0)*x6418);
IkReal x6425=(sj5*x6418);
IkReal x6426=((1.0)*sj5*x6419);
evalcond[0]=(((r21*x6425))+((r22*x6419))+(((-1.0)*x6423*x6424)));
evalcond[1]=((((-1.0)*r21*x6426))+((r22*x6418))+((x6419*x6423)));
evalcond[2]=((((-1.0)*x6422*x6424))+cj0+((r11*x6425))+((r12*x6419)));
evalcond[3]=(((r02*x6419))+(((-1.0)*x6421*x6424))+((r01*x6425))+(((-1.0)*x6420)));
evalcond[4]=(((r02*x6418))+(((-1.0)*r01*x6426))+((x6419*x6421))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6418))+(((-1.0)*x6420))+((x6419*x6422))+(((-1.0)*r11*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.96463654223969)*py))+(((-8.64440078585462)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.96463654223969)*px))+(((8.64440078585462)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.96463654223969)*py))+(((-8.64440078585462)*px))))+IKsqr(((((-1.96463654223969)*px))+(((8.64440078585462)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.96463654223969)*py))+(((-8.64440078585462)*px))), ((((-1.96463654223969)*px))+(((8.64440078585462)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6427=IKcos(j0);
IkReal x6428=IKsin(j0);
evalcond[0]=((((-0.11)*x6428))+(((-1.0)*px))+(((-0.025)*x6427)));
evalcond[1]=((((-1.0)*py))+(((0.11)*x6427))+(((-0.025)*x6428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6429=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6429;
j4eval[1]=IKsign(x6429);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6430=cj5*cj5;
IkReal x6431=(r11*r21);
IkReal x6432=((1.0)*r20);
IkReal x6433=(cj5*sj5);
IkReal x6434=((((-1.0)*r12*r22))+(((-1.0)*r10*x6430*x6432))+((r10*r21*x6433))+((r11*r20*x6433))+((x6430*x6431))+(((-1.0)*x6431)));
j4eval[0]=x6434;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6432))))));
j4eval[2]=IKsign(x6434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6435=cj5*cj5;
IkReal x6436=((1.0)*r21);
IkReal x6437=(cj5*sj5);
IkReal x6438=((1.0)*r20);
IkReal x6439=((((-1.0)*r01*x6437*x6438))+(((-1.0)*r01*x6435*x6436))+(((-1.0)*r00*x6436*x6437))+((r01*r21))+((r00*r20*x6435))+((r02*r22)));
j4eval[0]=x6439;
j4eval[1]=IKsign(x6439);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6438)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6440=cj5*cj5;
IkReal x6441=((1.0)*r21);
IkReal x6442=(cj5*sj5);
IkReal x6443=((1.0)*r20);
CheckValue<IkReal> x6444 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6443)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6444.valid){
continue;
}
CheckValue<IkReal> x6445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6442*x6443))+((r01*r21))+(((-1.0)*r01*x6440*x6441))+((r02*r22))+((r00*r20*x6440))+(((-1.0)*r00*x6441*x6442)))),-1);
if(!x6445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6444.value)+(((1.5707963267949)*(x6445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6446=IKcos(j4);
IkReal x6447=IKsin(j4);
IkReal x6448=(cj5*r00);
IkReal x6449=(r01*sj5);
IkReal x6450=(r11*sj5);
IkReal x6451=(r21*sj5);
IkReal x6452=(cj5*r10);
IkReal x6453=(cj5*r20);
IkReal x6454=((1.0)*x6446);
IkReal x6455=((1.0)*x6447);
evalcond[0]=((((-1.0)*x6453*x6454))+((x6446*x6451))+((r22*x6447)));
evalcond[1]=((((-1.0)*x6451*x6455))+((x6447*x6453))+((r22*x6446)));
evalcond[2]=(((r12*x6447))+cj0+(((-1.0)*x6452*x6454))+((x6446*x6450)));
evalcond[3]=(cj0+(((-1.0)*x6449*x6455))+((x6447*x6448))+((r02*x6446)));
evalcond[4]=(((r12*x6446))+sj0+((x6447*x6452))+(((-1.0)*x6450*x6455)));
evalcond[5]=((((-1.0)*sj0))+((x6446*x6449))+(((-1.0)*x6448*x6454))+((r02*x6447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6456=cj5*cj5;
IkReal x6457=(r11*r21);
IkReal x6458=((1.0)*r20);
IkReal x6459=(cj5*sj5);
CheckValue<IkReal> x6460=IKPowWithIntegerCheck(IKsign((((r10*r21*x6459))+((r11*r20*x6459))+((x6456*x6457))+(((-1.0)*r10*x6456*x6458))+(((-1.0)*r12*r22))+(((-1.0)*x6457)))),-1);
if(!x6460.valid){
continue;
}
CheckValue<IkReal> x6461 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6460.value)))+(x6461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6462=IKcos(j4);
IkReal x6463=IKsin(j4);
IkReal x6464=(cj5*r00);
IkReal x6465=(r01*sj5);
IkReal x6466=(r11*sj5);
IkReal x6467=(r21*sj5);
IkReal x6468=(cj5*r10);
IkReal x6469=(cj5*r20);
IkReal x6470=((1.0)*x6462);
IkReal x6471=((1.0)*x6463);
evalcond[0]=(((r22*x6463))+(((-1.0)*x6469*x6470))+((x6462*x6467)));
evalcond[1]=((((-1.0)*x6467*x6471))+((x6463*x6469))+((r22*x6462)));
evalcond[2]=(cj0+(((-1.0)*x6468*x6470))+((x6462*x6466))+((r12*x6463)));
evalcond[3]=(((x6463*x6464))+cj0+(((-1.0)*x6465*x6471))+((r02*x6462)));
evalcond[4]=(sj0+((x6463*x6468))+((r12*x6462))+(((-1.0)*x6466*x6471)));
evalcond[5]=((((-1.0)*sj0))+((x6462*x6465))+(((-1.0)*x6464*x6470))+((r02*x6463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6472 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6472.valid){
continue;
}
CheckValue<IkReal> x6473=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6472.value)+(((1.5707963267949)*(x6473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6474=IKcos(j4);
IkReal x6475=IKsin(j4);
IkReal x6476=(cj5*r00);
IkReal x6477=(r01*sj5);
IkReal x6478=(r11*sj5);
IkReal x6479=(r21*sj5);
IkReal x6480=(cj5*r10);
IkReal x6481=(cj5*r20);
IkReal x6482=((1.0)*x6474);
IkReal x6483=((1.0)*x6475);
evalcond[0]=(((r22*x6475))+(((-1.0)*x6481*x6482))+((x6474*x6479)));
evalcond[1]=(((r22*x6474))+((x6475*x6481))+(((-1.0)*x6479*x6483)));
evalcond[2]=(cj0+(((-1.0)*x6480*x6482))+((r12*x6475))+((x6474*x6478)));
evalcond[3]=(cj0+((r02*x6474))+(((-1.0)*x6477*x6483))+((x6475*x6476)));
evalcond[4]=((((-1.0)*x6478*x6483))+sj0+((x6475*x6480))+((r12*x6474)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6475))+(((-1.0)*x6476*x6482))+((x6474*x6477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6484=(cj1*cj2);
IkReal x6485=(sj1*sj2);
IkReal x6486=(cj5*r01);
IkReal x6487=(r00*sj5);
IkReal x6488=((100.0)*px);
IkReal x6489=((26.5)*sj1);
IkReal x6490=((24.0)*cj2*sj1);
IkReal x6491=((24.0)*cj1*sj2);
CheckValue<IkReal> x6492=IKPowWithIntegerCheck(((((-11.0)*x6485))+(((11.0)*x6484))),-1);
if(!x6492.valid){
continue;
}
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(((((-1.0)*x6485))+x6484),-1);
if(!x6493.valid){
continue;
}
if( IKabs(((x6492.value)*((((x6486*x6489))+(((-9.5)*x6484*x6487))+(((-9.5)*x6484*x6486))+((x6487*x6490))+((x6487*x6491))+((x6487*x6489))+(((9.5)*x6485*x6486))+(((9.5)*x6485*x6487))+((x6485*x6488))+(((-1.0)*x6484*x6488))+((x6486*x6491))+((x6486*x6490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6493.value)*((x6486+x6487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6492.value)*((((x6486*x6489))+(((-9.5)*x6484*x6487))+(((-9.5)*x6484*x6486))+((x6487*x6490))+((x6487*x6491))+((x6487*x6489))+(((9.5)*x6485*x6486))+(((9.5)*x6485*x6487))+((x6485*x6488))+(((-1.0)*x6484*x6488))+((x6486*x6491))+((x6486*x6490))))))+IKsqr(((x6493.value)*((x6486+x6487))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6492.value)*((((x6486*x6489))+(((-9.5)*x6484*x6487))+(((-9.5)*x6484*x6486))+((x6487*x6490))+((x6487*x6491))+((x6487*x6489))+(((9.5)*x6485*x6486))+(((9.5)*x6485*x6487))+((x6485*x6488))+(((-1.0)*x6484*x6488))+((x6486*x6491))+((x6486*x6490))))), ((x6493.value)*((x6486+x6487))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6494=IKcos(j0);
IkReal x6495=IKsin(j0);
IkReal x6496=((1.0)*sj2);
IkReal x6497=(cj1*cj2);
IkReal x6498=((0.24)*cj2);
IkReal x6499=(cj5*r11);
IkReal x6500=(r00*sj5);
IkReal x6501=(r10*sj5);
IkReal x6502=(cj5*r01);
IkReal x6503=(sj1*x6495);
IkReal x6504=(sj1*x6494);
IkReal x6505=((0.24)*cj1*sj2);
evalcond[0]=(((x6494*x6497))+(((-1.0)*x6502))+(((-1.0)*x6500))+(((-1.0)*x6496*x6504)));
evalcond[1]=((((-1.0)*x6499))+((x6495*x6497))+(((-1.0)*x6501))+(((-1.0)*x6496*x6503)));
evalcond[2]=((((0.265)*x6504))+((x6498*x6504))+(((-0.11)*x6495))+(((-1.0)*px))+((x6494*x6505))+(((-0.095)*x6500))+(((-0.095)*x6502)));
evalcond[3]=((((0.265)*x6503))+((x6498*x6503))+(((-1.0)*py))+(((-0.095)*x6499))+(((0.11)*x6494))+((x6495*x6505))+(((-0.095)*x6501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6506=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6506;
j4eval[1]=IKsign(x6506);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6507=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6507;
j4eval[1]=IKsign(x6507);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6508=((1.0)*sj0);
IkReal x6509=((1.0)*cj0);
IkReal x6510=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6510;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x6508))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x6509)))))+(IKabs(((((-1.0)*r12*x6508))+(((-1.0)*r02*x6509))))));
j4eval[2]=IKsign(x6510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6511=((-1.0)*r20);
IkReal x6513 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6513)==0){
continue;
}
IkReal x6512=pow(x6513,-0.5);
CheckValue<IkReal> x6514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6511),IKFAST_ATAN2_MAGTHRESH);
if(!x6514.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6514.value));
IkReal gconst133=(r21*x6512);
IkReal gconst134=(x6511*x6512);
CheckValue<IkReal> x6515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6515.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6516=((-1.0)*r20);
IkReal x6517=x6512;
CheckValue<IkReal> x6519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6516),IKFAST_ATAN2_MAGTHRESH);
if(!x6519.valid){
continue;
}
IkReal x6518=((-1.0)*(x6519.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6518;
IkReal gconst132=x6518;
IkReal gconst133=(r21*x6517);
IkReal gconst134=(x6516*x6517);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6520=((-1.0)*r20);
IkReal x6521=x6512;
CheckValue<IkReal> x6523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6520),IKFAST_ATAN2_MAGTHRESH);
if(!x6523.valid){
continue;
}
IkReal x6522=((-1.0)*(x6523.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6522;
IkReal gconst132=x6522;
IkReal gconst133=(r21*x6521);
IkReal gconst134=(x6520*x6521);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6524=((-1.0)*r20);
IkReal x6525=x6512;
CheckValue<IkReal> x6527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6524),IKFAST_ATAN2_MAGTHRESH);
if(!x6527.valid){
continue;
}
IkReal x6526=((-1.0)*(x6527.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6526;
IkReal gconst132=x6526;
IkReal gconst133=(r21*x6525);
IkReal gconst134=(x6524*x6525);
IkReal x6528=r22*r22;
CheckValue<IkReal> x6531=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6528))),-1);
if(!x6531.valid){
continue;
}
IkReal x6529=x6531.value;
IkReal x6530=((((2.0)*x6529*(r20*r20)*(r21*r21)))+((x6529*(r20*r20*r20*r20)))+x6528+((x6529*(r21*r21*r21*r21))));
j4eval[0]=x6530;
j4eval[1]=IKsign(x6530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6532=(gconst134*r20);
IkReal x6533=(cj1*cj2);
IkReal x6534=(gconst133*r21);
IkReal x6535=(sj1*sj2);
CheckValue<IkReal> x6536=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x6532*x6532)+(x6534*x6534)+(((-2.0)*x6532*x6534)))),-1);
if(!x6536.valid){
continue;
}
CheckValue<IkReal> x6537 = IKatan2WithCheck(IkReal(((((-1.0)*x6534*x6535))+(((-1.0)*x6532*x6533))+((x6533*x6534))+((x6532*x6535)))),IkReal(((((-1.0)*r22*x6533))+((r22*x6535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6536.value)))+(x6537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6538=IKcos(j4);
IkReal x6539=IKsin(j4);
IkReal x6540=(gconst134*r10);
IkReal x6541=(cj2*sj1);
IkReal x6542=(gconst134*r00);
IkReal x6543=(gconst134*r20);
IkReal x6544=(cj1*sj2);
IkReal x6545=(gconst133*x6538);
IkReal x6546=((1.0)*x6538);
IkReal x6547=((1.0)*gconst133*x6539);
evalcond[0]=(((r22*x6539))+(((-1.0)*x6543*x6546))+((r21*x6545)));
evalcond[1]=((((-1.0)*x6540*x6546))+cj0+((r11*x6545))+((r12*x6539)));
evalcond[2]=(((r02*x6539))+(((-1.0)*sj0))+(((-1.0)*x6542*x6546))+((r01*x6545)));
evalcond[3]=(((x6539*x6543))+(((-1.0)*sj1*sj2))+((r22*x6538))+(((-1.0)*r21*x6547))+((cj1*cj2)));
evalcond[4]=(((x6539*x6542))+((r02*x6538))+((cj0*x6544))+((cj0*x6541))+(((-1.0)*r01*x6547)));
evalcond[5]=(((x6539*x6540))+(((-1.0)*r11*x6547))+((sj0*x6544))+((sj0*x6541))+((r12*x6538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6548 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6548.valid){
continue;
}
CheckValue<IkReal> x6549=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6548.value)+(((1.5707963267949)*(x6549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6550=IKcos(j4);
IkReal x6551=IKsin(j4);
IkReal x6552=(gconst134*r10);
IkReal x6553=(cj2*sj1);
IkReal x6554=(gconst134*r00);
IkReal x6555=(gconst134*r20);
IkReal x6556=(cj1*sj2);
IkReal x6557=(gconst133*x6550);
IkReal x6558=((1.0)*x6550);
IkReal x6559=((1.0)*gconst133*x6551);
evalcond[0]=((((-1.0)*x6555*x6558))+((r22*x6551))+((r21*x6557)));
evalcond[1]=((((-1.0)*x6552*x6558))+cj0+((r11*x6557))+((r12*x6551)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6551))+(((-1.0)*x6554*x6558))+((r01*x6557)));
evalcond[3]=(((x6551*x6555))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6559))+((r22*x6550))+((cj1*cj2)));
evalcond[4]=(((x6551*x6554))+((r02*x6550))+((cj0*x6556))+((cj0*x6553))+(((-1.0)*r01*x6559)));
evalcond[5]=(((x6551*x6552))+(((-1.0)*r11*x6559))+((r12*x6550))+((sj0*x6556))+((sj0*x6553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6560.value)))+(x6561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6562=IKcos(j4);
IkReal x6563=IKsin(j4);
IkReal x6564=(gconst134*r10);
IkReal x6565=(cj2*sj1);
IkReal x6566=(gconst134*r00);
IkReal x6567=(gconst134*r20);
IkReal x6568=(cj1*sj2);
IkReal x6569=(gconst133*x6562);
IkReal x6570=((1.0)*x6562);
IkReal x6571=((1.0)*gconst133*x6563);
evalcond[0]=((((-1.0)*x6567*x6570))+((r22*x6563))+((r21*x6569)));
evalcond[1]=(cj0+((r12*x6563))+((r11*x6569))+(((-1.0)*x6564*x6570)));
evalcond[2]=((((-1.0)*x6566*x6570))+(((-1.0)*sj0))+((r02*x6563))+((r01*x6569)));
evalcond[3]=(((r22*x6562))+((x6563*x6567))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x6571)));
evalcond[4]=(((x6563*x6566))+((r02*x6562))+(((-1.0)*r01*x6571))+((cj0*x6565))+((cj0*x6568)));
evalcond[5]=(((x6563*x6564))+((r12*x6562))+((sj0*x6565))+((sj0*x6568))+(((-1.0)*r11*x6571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6572=((-1.0)*r21);
IkReal x6574 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6574)==0){
continue;
}
IkReal x6573=pow(x6574,-0.5);
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(x6572),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6575.value))));
IkReal gconst136=(x6572*x6573);
IkReal gconst137=((1.0)*r20*x6573);
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6576.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6577=((-1.0)*r21);
CheckValue<IkReal> x6580 = IKatan2WithCheck(IkReal(x6577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6580.valid){
continue;
}
IkReal x6578=((1.0)*(x6580.value));
IkReal x6579=x6573;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6578)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6578)));
IkReal gconst136=(x6577*x6579);
IkReal gconst137=((1.0)*r20*x6579);
IkReal x6581=r22*r22;
IkReal x6582=((1.0)*x6581);
CheckValue<IkReal> x6586=IKPowWithIntegerCheck(((-1.0)+x6581),-1);
if(!x6586.valid){
continue;
}
IkReal x6583=x6586.value;
if((((1.0)+(((-1.0)*x6582)))) < -0.00001)
continue;
IkReal x6584=IKsqrt(((1.0)+(((-1.0)*x6582))));
IkReal x6585=(cj0*x6583*x6584);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6585+(((-1.0)*x6582*x6585))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6587=((-1.0)*r21);
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal(x6587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
IkReal x6588=((1.0)*(x6590.value));
IkReal x6589=x6573;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6588)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6588)));
IkReal gconst136=(x6587*x6589);
IkReal gconst137=((1.0)*r20*x6589);
IkReal x6591=r22*r22;
IkReal x6592=((1.0)*x6591);
CheckValue<IkReal> x6596=IKPowWithIntegerCheck(((-1.0)+x6591),-1);
if(!x6596.valid){
continue;
}
IkReal x6593=x6596.value;
if((((1.0)+(((-1.0)*x6592)))) < -0.00001)
continue;
IkReal x6594=IKsqrt(((1.0)+(((-1.0)*x6592))));
IkReal x6595=(sj0*x6593*x6594);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6595+(((-1.0)*x6592*x6595))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6597=((-1.0)*r21);
CheckValue<IkReal> x6600 = IKatan2WithCheck(IkReal(x6597),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6600.valid){
continue;
}
IkReal x6598=((1.0)*(x6600.value));
IkReal x6599=x6573;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6598)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6598)));
IkReal gconst136=(x6597*x6599);
IkReal gconst137=((1.0)*r20*x6599);
IkReal x6601=r22*r22;
IkReal x6602=((1.0)*r12*sj0);
IkReal x6603=((1.0)*cj0*r02);
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(((-1.0)+x6601),-1);
if(!x6607.valid){
continue;
}
IkReal x6604=x6607.value;
if((((1.0)+(((-1.0)*x6601)))) < -0.00001)
continue;
IkReal x6605=IKsqrt(((1.0)+(((-1.0)*x6601))));
IkReal x6606=(r22*x6604*x6605);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6602*x6606))+(((-1.0)*x6603*x6606)))))+(IKabs(((((-1.0)*x6603))+(((-1.0)*x6602))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6608=((1.0)*sj0);
IkReal x6609=((1.0)*cj0);
CheckValue<IkReal> x6610=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6610.valid){
continue;
}
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r10*x6608))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r00*x6609)))),IkReal(((((-1.0)*r02*x6609))+(((-1.0)*r12*x6608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6610.value)))+(x6611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6612=IKcos(j4);
IkReal x6613=IKsin(j4);
IkReal x6614=(cj2*sj1);
IkReal x6615=(gconst136*r01);
IkReal x6616=(gconst136*r21);
IkReal x6617=(gconst136*r11);
IkReal x6618=(cj1*sj2);
IkReal x6619=((1.0)*x6613);
IkReal x6620=(gconst137*x6613);
IkReal x6621=((1.0)*gconst137*x6612);
evalcond[0]=(((x6612*x6616))+((r22*x6613))+(((-1.0)*r20*x6621)));
evalcond[1]=(cj0+((x6612*x6617))+((r12*x6613))+(((-1.0)*r10*x6621)));
evalcond[2]=(((r02*x6613))+(((-1.0)*sj0))+((x6612*x6615))+(((-1.0)*r00*x6621)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x6616*x6619))+((r22*x6612))+((cj1*cj2))+((r20*x6620)));
evalcond[4]=(((r02*x6612))+((r00*x6620))+((cj0*x6614))+((cj0*x6618))+(((-1.0)*x6615*x6619)));
evalcond[5]=(((r10*x6620))+((r12*x6612))+(((-1.0)*x6617*x6619))+((sj0*x6614))+((sj0*x6618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6622.value)+(((1.5707963267949)*(x6623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6624=IKcos(j4);
IkReal x6625=IKsin(j4);
IkReal x6626=(cj2*sj1);
IkReal x6627=(gconst136*r01);
IkReal x6628=(gconst136*r21);
IkReal x6629=(gconst136*r11);
IkReal x6630=(cj1*sj2);
IkReal x6631=((1.0)*x6625);
IkReal x6632=(gconst137*x6625);
IkReal x6633=((1.0)*gconst137*x6624);
evalcond[0]=(((x6624*x6628))+((r22*x6625))+(((-1.0)*r20*x6633)));
evalcond[1]=(((x6624*x6629))+cj0+((r12*x6625))+(((-1.0)*r10*x6633)));
evalcond[2]=(((r02*x6625))+((x6624*x6627))+(((-1.0)*sj0))+(((-1.0)*r00*x6633)));
evalcond[3]=((((-1.0)*x6628*x6631))+(((-1.0)*sj1*sj2))+((r22*x6624))+((cj1*cj2))+((r20*x6632)));
evalcond[4]=(((r02*x6624))+((r00*x6632))+((cj0*x6626))+((cj0*x6630))+(((-1.0)*x6627*x6631)));
evalcond[5]=(((r10*x6632))+((r12*x6624))+(((-1.0)*x6629*x6631))+((sj0*x6626))+((sj0*x6630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
CheckValue<IkReal> x6635=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6634.value)+(((1.5707963267949)*(x6635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6636=IKcos(j4);
IkReal x6637=IKsin(j4);
IkReal x6638=(cj2*sj1);
IkReal x6639=(gconst136*r01);
IkReal x6640=(gconst136*r21);
IkReal x6641=(gconst136*r11);
IkReal x6642=(cj1*sj2);
IkReal x6643=((1.0)*x6637);
IkReal x6644=(gconst137*x6637);
IkReal x6645=((1.0)*gconst137*x6636);
evalcond[0]=(((x6636*x6640))+((r22*x6637))+(((-1.0)*r20*x6645)));
evalcond[1]=(cj0+((x6636*x6641))+((r12*x6637))+(((-1.0)*r10*x6645)));
evalcond[2]=((((-1.0)*sj0))+((x6636*x6639))+(((-1.0)*r00*x6645))+((r02*x6637)));
evalcond[3]=((((-1.0)*x6640*x6643))+(((-1.0)*sj1*sj2))+((r22*x6636))+((cj1*cj2))+((r20*x6644)));
evalcond[4]=((((-1.0)*x6639*x6643))+((r00*x6644))+((cj0*x6642))+((cj0*x6638))+((r02*x6636)));
evalcond[5]=((((-1.0)*x6641*x6643))+((r10*x6644))+((r12*x6636))+((sj0*x6638))+((sj0*x6642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6647 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6647)==0){
continue;
}
IkReal x6646=pow(x6647,-0.5);
CheckValue<IkReal> x6648 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6648.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6648.value));
IkReal gconst139=((-1.0)*r11*x6646);
IkReal gconst140=(r10*x6646);
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6649.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6652 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6652.valid){
continue;
}
IkReal x6650=((-1.0)*(x6652.value));
IkReal x6651=x6646;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6650;
IkReal gconst138=x6650;
IkReal gconst139=((-1.0)*r11*x6651);
IkReal gconst140=(r10*x6651);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6653=((1.0)*gconst140);
CheckValue<IkReal> x6654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6653))+(((-1.0)*gconst139*r20)))),-1);
if(!x6654.valid){
continue;
}
CheckValue<IkReal> x6655 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x6653))+((gconst139*r11*sj0))+(((-1.0)*cj0*r00*x6653))+((cj0*gconst139*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6654.value)))+(x6655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6656=IKcos(j4);
IkReal x6657=IKsin(j4);
IkReal x6658=(cj2*sj1);
IkReal x6659=(gconst140*r10);
IkReal x6660=(cj1*sj2);
IkReal x6661=(gconst139*x6656);
IkReal x6662=(gconst140*x6657);
IkReal x6663=((1.0)*gconst139*x6657);
IkReal x6664=((1.0)*gconst140*x6656);
evalcond[0]=((((-1.0)*r20*x6664))+((r21*x6661))+((r22*x6657)));
evalcond[1]=(cj0+((r12*x6657))+(((-1.0)*x6656*x6659))+((r11*x6661)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6657))+(((-1.0)*r00*x6664))+((r01*x6661)));
evalcond[3]=((((-1.0)*r21*x6663))+((r20*x6662))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6656)));
evalcond[4]=((((-1.0)*r01*x6663))+((r02*x6656))+((r00*x6662))+((cj0*x6660))+((cj0*x6658)));
evalcond[5]=(((r12*x6656))+(((-1.0)*r11*x6663))+((sj0*x6660))+((sj0*x6658))+((x6657*x6659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6665=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6665.valid){
continue;
}
CheckValue<IkReal> x6666 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6665.value)))+(x6666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6667=IKcos(j4);
IkReal x6668=IKsin(j4);
IkReal x6669=(cj2*sj1);
IkReal x6670=(gconst140*r10);
IkReal x6671=(cj1*sj2);
IkReal x6672=(gconst139*x6667);
IkReal x6673=(gconst140*x6668);
IkReal x6674=((1.0)*gconst139*x6668);
IkReal x6675=((1.0)*gconst140*x6667);
evalcond[0]=((((-1.0)*r20*x6675))+((r22*x6668))+((r21*x6672)));
evalcond[1]=(((r11*x6672))+cj0+((r12*x6668))+(((-1.0)*x6667*x6670)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6668))+(((-1.0)*r00*x6675))+((r01*x6672)));
evalcond[3]=(((r20*x6673))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6674))+((cj1*cj2))+((r22*x6667)));
evalcond[4]=(((cj0*x6671))+((r02*x6667))+(((-1.0)*r01*x6674))+((r00*x6673))+((cj0*x6669)));
evalcond[5]=(((r12*x6667))+(((-1.0)*r11*x6674))+((sj0*x6669))+((x6668*x6670))+((sj0*x6671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6677 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6677)==0){
continue;
}
IkReal x6676=pow(x6677,-0.5);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6678.value))));
IkReal gconst142=((1.0)*r11*x6676);
IkReal gconst143=((-1.0)*r10*x6676);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6682 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6682.valid){
continue;
}
IkReal x6680=((1.0)*(x6682.value));
IkReal x6681=x6676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6680)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6680)));
IkReal gconst142=((1.0)*r11*x6681);
IkReal gconst143=((-1.0)*r10*x6681);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
IkReal x6683=((1.0)*(x6685.value));
IkReal x6684=x6676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6683)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6683)));
IkReal gconst142=((1.0)*r11*x6684);
IkReal gconst143=((-1.0)*r10*x6684);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
IkReal x6686=((1.0)*(x6688.value));
IkReal x6687=x6676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6686)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6686)));
IkReal gconst142=((1.0)*r11*x6687);
IkReal gconst143=((-1.0)*r10*x6687);
IkReal x6689=r12*r12;
IkReal x6690=((1.0)*sj0);
IkReal x6691=(cj0*r02);
IkReal x6692=x6676;
j4eval[0]=((IKabs(((((-1.0)*x6690*x6692))+((sj0*x6689*x6692))+((r12*x6691*x6692)))))+(IKabs(((((-1.0)*x6691))+(((-1.0)*r12*x6690))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6693=((1.0)*sj0);
IkReal x6694=((1.0)*gconst143);
CheckValue<IkReal> x6695=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6694))+(((-1.0)*gconst142*r20)))),-1);
if(!x6695.valid){
continue;
}
CheckValue<IkReal> x6696 = IKatan2WithCheck(IkReal((((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x6694))+(((-1.0)*gconst143*r10*x6693)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6695.value)))+(x6696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6697=IKcos(j4);
IkReal x6698=IKsin(j4);
IkReal x6699=(cj2*sj1);
IkReal x6700=(cj1*sj2);
IkReal x6701=(gconst143*x6698);
IkReal x6702=(gconst142*x6697);
IkReal x6703=((1.0)*gconst142*x6698);
IkReal x6704=((1.0)*gconst143*x6697);
evalcond[0]=(((r21*x6702))+((r22*x6698))+(((-1.0)*r20*x6704)));
evalcond[1]=((((-1.0)*r10*x6704))+cj0+((r12*x6698))+((r11*x6702)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6702))+(((-1.0)*r00*x6704))+((r02*x6698)));
evalcond[3]=(((r22*x6697))+(((-1.0)*sj1*sj2))+((r20*x6701))+(((-1.0)*r21*x6703))+((cj1*cj2)));
evalcond[4]=(((cj0*x6699))+((r00*x6701))+(((-1.0)*r01*x6703))+((cj0*x6700))+((r02*x6697)));
evalcond[5]=(((r10*x6701))+((r12*x6697))+((sj0*x6699))+((sj0*x6700))+(((-1.0)*r11*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6705.valid){
continue;
}
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6705.value)))+(x6706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6707=IKcos(j4);
IkReal x6708=IKsin(j4);
IkReal x6709=(cj2*sj1);
IkReal x6710=(cj1*sj2);
IkReal x6711=(gconst143*x6708);
IkReal x6712=(gconst142*x6707);
IkReal x6713=((1.0)*gconst142*x6708);
IkReal x6714=((1.0)*gconst143*x6707);
evalcond[0]=((((-1.0)*r20*x6714))+((r21*x6712))+((r22*x6708)));
evalcond[1]=(cj0+((r11*x6712))+(((-1.0)*r10*x6714))+((r12*x6708)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6714))+((r01*x6712))+((r02*x6708)));
evalcond[3]=(((r20*x6711))+(((-1.0)*r21*x6713))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6707)));
evalcond[4]=(((cj0*x6710))+(((-1.0)*r01*x6713))+((cj0*x6709))+((r00*x6711))+((r02*x6707)));
evalcond[5]=(((sj0*x6709))+(((-1.0)*r11*x6713))+((r10*x6711))+((r12*x6707))+((sj0*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6715.valid){
continue;
}
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6715.value)))+(x6716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6717=IKcos(j4);
IkReal x6718=IKsin(j4);
IkReal x6719=(cj2*sj1);
IkReal x6720=(cj1*sj2);
IkReal x6721=(gconst143*x6718);
IkReal x6722=(gconst142*x6717);
IkReal x6723=((1.0)*gconst142*x6718);
IkReal x6724=((1.0)*gconst143*x6717);
evalcond[0]=((((-1.0)*r20*x6724))+((r22*x6718))+((r21*x6722)));
evalcond[1]=(((r11*x6722))+cj0+(((-1.0)*r10*x6724))+((r12*x6718)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6718))+(((-1.0)*r00*x6724))+((r01*x6722)));
evalcond[3]=(((r20*x6721))+(((-1.0)*r21*x6723))+(((-1.0)*sj1*sj2))+((r22*x6717))+((cj1*cj2)));
evalcond[4]=(((cj0*x6719))+((cj0*x6720))+((r02*x6717))+(((-1.0)*r01*x6723))+((r00*x6721)));
evalcond[5]=((((-1.0)*r11*x6723))+((r10*x6721))+((sj0*x6719))+((sj0*x6720))+((r12*x6717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6725=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6725;
j4eval[1]=IKsign(x6725);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6726=((1.0)*cj5);
IkReal x6727=((((-1.0)*r21*x6726))+(((-1.0)*r20*sj5)));
j4eval[0]=x6727;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6726))))));
j4eval[2]=IKsign(x6727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6728=cj5*cj5;
IkReal x6729=r11*r11;
IkReal x6730=(cj5*r10);
IkReal x6731=(r11*sj5);
IkReal x6732=((((-1.0)*x6729))+(((2.0)*x6730*x6731))+(((-1.0)*x6728*(r10*r10)))+((x6728*x6729))+(((-1.0)*(r12*r12))));
j4eval[0]=x6732;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6730))+x6731))));
j4eval[2]=IKsign(x6732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6733=cj5*cj5;
IkReal x6734=r11*r11;
IkReal x6735=(cj5*r10);
IkReal x6736=(r11*sj5);
CheckValue<IkReal> x6737 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6735))+x6736)),IKFAST_ATAN2_MAGTHRESH);
if(!x6737.valid){
continue;
}
CheckValue<IkReal> x6738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6734))+(((2.0)*x6735*x6736))+((x6733*x6734))+(((-1.0)*x6733*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x6738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6737.value)+(((1.5707963267949)*(x6738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6739=IKcos(j4);
IkReal x6740=IKsin(j4);
IkReal x6741=(cj5*r00);
IkReal x6742=((1.0)*x6739);
IkReal x6743=(sj5*x6739);
IkReal x6744=(cj5*x6740);
IkReal x6745=((1.0)*sj5*x6740);
evalcond[0]=(((r21*x6743))+(((-1.0)*cj5*r20*x6742))+((r22*x6740)));
evalcond[1]=(((r02*x6740))+((r01*x6743))+(((-1.0)*x6741*x6742)));
evalcond[2]=((((-1.0)*r11*x6745))+((r12*x6739))+((r10*x6744)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x6742))+((r11*x6743))+((r12*x6740)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x6745))+((cj1*sj2))+((r02*x6739))+((x6740*x6741)));
evalcond[5]=(((r22*x6739))+(((-1.0)*r21*x6745))+(((-1.0)*sj1*sj2))+((r20*x6744))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6746=((1.0)*cj5);
CheckValue<IkReal> x6747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6746))+(((-1.0)*r20*sj5)))),-1);
if(!x6747.valid){
continue;
}
CheckValue<IkReal> x6748 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6746))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6747.value)))+(x6748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6749=IKcos(j4);
IkReal x6750=IKsin(j4);
IkReal x6751=(cj5*r00);
IkReal x6752=((1.0)*x6749);
IkReal x6753=(sj5*x6749);
IkReal x6754=(cj5*x6750);
IkReal x6755=((1.0)*sj5*x6750);
evalcond[0]=(((r22*x6750))+((r21*x6753))+(((-1.0)*cj5*r20*x6752)));
evalcond[1]=(((r01*x6753))+(((-1.0)*x6751*x6752))+((r02*x6750)));
evalcond[2]=(((r12*x6749))+((r10*x6754))+(((-1.0)*r11*x6755)));
evalcond[3]=((1.0)+((r12*x6750))+((r11*x6753))+(((-1.0)*cj5*r10*x6752)));
evalcond[4]=(((r02*x6749))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x6755))+((x6750*x6751)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x6754))+((cj1*cj2))+((r22*x6749))+(((-1.0)*r21*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6756.value)))+(x6757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6758=IKcos(j4);
IkReal x6759=IKsin(j4);
IkReal x6760=(cj5*r00);
IkReal x6761=((1.0)*x6758);
IkReal x6762=(sj5*x6758);
IkReal x6763=(cj5*x6759);
IkReal x6764=((1.0)*sj5*x6759);
evalcond[0]=(((r22*x6759))+((r21*x6762))+(((-1.0)*cj5*r20*x6761)));
evalcond[1]=((((-1.0)*x6760*x6761))+((r01*x6762))+((r02*x6759)));
evalcond[2]=(((r12*x6758))+((r10*x6763))+(((-1.0)*r11*x6764)));
evalcond[3]=((1.0)+((r12*x6759))+((r11*x6762))+(((-1.0)*cj5*r10*x6761)));
evalcond[4]=(((cj2*sj1))+((x6759*x6760))+((cj1*sj2))+(((-1.0)*r01*x6764))+((r02*x6758)));
evalcond[5]=(((r22*x6758))+(((-1.0)*sj1*sj2))+((r20*x6763))+((cj1*cj2))+(((-1.0)*r21*x6764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6765=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6765;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x6765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6766=((1.0)*cj5);
IkReal x6767=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6766)));
j4eval[0]=x6767;
j4eval[1]=((IKabs(((((-1.0)*r20*x6766))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6767);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6768=cj5*cj5;
IkReal x6769=r11*r11;
IkReal x6770=(r11*sj5);
IkReal x6771=(cj5*r10);
IkReal x6772=((r12*r12)+x6769+(((-2.0)*x6770*x6771))+((x6768*(r10*r10)))+(((-1.0)*x6768*x6769)));
j4eval[0]=x6772;
j4eval[1]=((IKabs(r12))+(IKabs((x6770+(((-1.0)*x6771))))));
j4eval[2]=IKsign(x6772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6773=cj5*cj5;
IkReal x6774=r11*r11;
IkReal x6775=(cj5*r10);
IkReal x6776=(r11*sj5);
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6773*x6774))+x6774+(((-2.0)*x6775*x6776))+((x6773*(r10*r10))))),-1);
if(!x6777.valid){
continue;
}
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal(r12),IkReal((x6776+(((-1.0)*x6775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6777.value)))+(x6778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6779=IKcos(j4);
IkReal x6780=IKsin(j4);
IkReal x6781=(cj5*r00);
IkReal x6782=((1.0)*sj2);
IkReal x6783=((1.0)*x6779);
IkReal x6784=(sj5*x6779);
IkReal x6785=(cj5*x6780);
IkReal x6786=((1.0)*sj5*x6780);
evalcond[0]=(((r22*x6780))+((r21*x6784))+(((-1.0)*cj5*r20*x6783)));
evalcond[1]=(((r02*x6780))+(((-1.0)*x6781*x6783))+((r01*x6784)));
evalcond[2]=(((r12*x6779))+(((-1.0)*r11*x6786))+((r10*x6785)));
evalcond[3]=((-1.0)+((r12*x6780))+((r11*x6784))+(((-1.0)*cj5*r10*x6783)));
evalcond[4]=(((r20*x6785))+(((-1.0)*r21*x6786))+((r22*x6779))+(((-1.0)*sj1*x6782))+((cj1*cj2)));
evalcond[5]=(((r02*x6779))+(((-1.0)*cj2*sj1))+((x6780*x6781))+(((-1.0)*cj1*x6782))+(((-1.0)*r01*x6786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6787=((1.0)*cj5);
CheckValue<IkReal> x6788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6787)))),-1);
if(!x6788.valid){
continue;
}
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6787)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6788.value)))+(x6789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6790=IKcos(j4);
IkReal x6791=IKsin(j4);
IkReal x6792=(cj5*r00);
IkReal x6793=((1.0)*sj2);
IkReal x6794=((1.0)*x6790);
IkReal x6795=(sj5*x6790);
IkReal x6796=(cj5*x6791);
IkReal x6797=((1.0)*sj5*x6791);
evalcond[0]=(((r21*x6795))+((r22*x6791))+(((-1.0)*cj5*r20*x6794)));
evalcond[1]=(((r02*x6791))+(((-1.0)*x6792*x6794))+((r01*x6795)));
evalcond[2]=((((-1.0)*r11*x6797))+((r12*x6790))+((r10*x6796)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x6794))+((r12*x6791))+((r11*x6795)));
evalcond[4]=(((r22*x6790))+(((-1.0)*sj1*x6793))+((r20*x6796))+(((-1.0)*r21*x6797))+((cj1*cj2)));
evalcond[5]=(((r02*x6790))+(((-1.0)*cj1*x6793))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x6797))+((x6791*x6792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6798.value)))+(x6799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6800=IKcos(j4);
IkReal x6801=IKsin(j4);
IkReal x6802=(cj5*r00);
IkReal x6803=((1.0)*sj2);
IkReal x6804=((1.0)*x6800);
IkReal x6805=(sj5*x6800);
IkReal x6806=(cj5*x6801);
IkReal x6807=((1.0)*sj5*x6801);
evalcond[0]=(((r22*x6801))+((r21*x6805))+(((-1.0)*cj5*r20*x6804)));
evalcond[1]=(((r01*x6805))+(((-1.0)*x6802*x6804))+((r02*x6801)));
evalcond[2]=((((-1.0)*r11*x6807))+((r10*x6806))+((r12*x6800)));
evalcond[3]=((-1.0)+((r11*x6805))+((r12*x6801))+(((-1.0)*cj5*r10*x6804)));
evalcond[4]=(((r22*x6800))+(((-1.0)*sj1*x6803))+((r20*x6806))+((cj1*cj2))+(((-1.0)*r21*x6807)));
evalcond[5]=((((-1.0)*cj1*x6803))+((x6801*x6802))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x6807))+((r02*x6800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6809 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6809)==0){
continue;
}
IkReal x6808=pow(x6809,-0.5);
CheckValue<IkReal> x6810 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6810.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6810.value));
IkReal gconst145=((-1.0)*r01*x6808);
IkReal gconst146=(r00*x6808);
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6811.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
IkReal x6812=((-1.0)*(x6814.value));
IkReal x6813=x6808;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6812;
IkReal gconst144=x6812;
IkReal gconst145=((-1.0)*r01*x6813);
IkReal gconst146=(r00*x6813);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6815=((1.0)*sj0);
IkReal x6816=((1.0)*cj0);
CheckValue<IkReal> x6817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x6817.valid){
continue;
}
CheckValue<IkReal> x6818 = IKatan2WithCheck(IkReal((((cj0*gconst145*r01))+(((-1.0)*gconst146*r10*x6815))+(((-1.0)*gconst146*r00*x6816))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r12*x6815))+(((-1.0)*r02*x6816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6817.value)))+(x6818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6819=IKcos(j4);
IkReal x6820=IKsin(j4);
IkReal x6821=(cj2*sj1);
IkReal x6822=(gconst145*r21);
IkReal x6823=(gconst146*r00);
IkReal x6824=(gconst145*r11);
IkReal x6825=(cj1*sj2);
IkReal x6826=(gconst145*r01);
IkReal x6827=((1.0)*x6820);
IkReal x6828=(gconst146*x6820);
IkReal x6829=((1.0)*gconst146*x6819);
evalcond[0]=(((r22*x6820))+((x6819*x6822))+(((-1.0)*r20*x6829)));
evalcond[1]=(cj0+(((-1.0)*r10*x6829))+((r12*x6820))+((x6819*x6824)));
evalcond[2]=(((r02*x6820))+(((-1.0)*sj0))+((x6819*x6826))+(((-1.0)*x6819*x6823)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x6819))+((r20*x6828))+((cj1*cj2))+(((-1.0)*x6822*x6827)));
evalcond[4]=(((r02*x6819))+((x6820*x6823))+((cj0*x6821))+((cj0*x6825))+(((-1.0)*x6826*x6827)));
evalcond[5]=(((r12*x6819))+((sj0*x6825))+((sj0*x6821))+((r10*x6828))+(((-1.0)*x6824*x6827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6830=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x6830.valid){
continue;
}
CheckValue<IkReal> x6831 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6830.value)))+(x6831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6832=IKcos(j4);
IkReal x6833=IKsin(j4);
IkReal x6834=(cj2*sj1);
IkReal x6835=(gconst145*r21);
IkReal x6836=(gconst146*r00);
IkReal x6837=(gconst145*r11);
IkReal x6838=(cj1*sj2);
IkReal x6839=(gconst145*r01);
IkReal x6840=((1.0)*x6833);
IkReal x6841=(gconst146*x6833);
IkReal x6842=((1.0)*gconst146*x6832);
evalcond[0]=(((r22*x6833))+(((-1.0)*r20*x6842))+((x6832*x6835)));
evalcond[1]=(cj0+((x6832*x6837))+(((-1.0)*r10*x6842))+((r12*x6833)));
evalcond[2]=(((r02*x6833))+(((-1.0)*sj0))+(((-1.0)*x6832*x6836))+((x6832*x6839)));
evalcond[3]=(((r22*x6832))+(((-1.0)*sj1*sj2))+(((-1.0)*x6835*x6840))+((r20*x6841))+((cj1*cj2)));
evalcond[4]=(((x6833*x6836))+((r02*x6832))+(((-1.0)*x6839*x6840))+((cj0*x6834))+((cj0*x6838)));
evalcond[5]=(((sj0*x6838))+((sj0*x6834))+((r12*x6832))+(((-1.0)*x6837*x6840))+((r10*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6844 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6844)==0){
continue;
}
IkReal x6843=pow(x6844,-0.5);
CheckValue<IkReal> x6845 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6845.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6845.value))));
IkReal gconst148=((1.0)*r01*x6843);
IkReal gconst149=((-1.0)*r00*x6843);
CheckValue<IkReal> x6846 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6846.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6846.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6849 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6849.valid){
continue;
}
IkReal x6847=((1.0)*(x6849.value));
IkReal x6848=x6843;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6847)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6847)));
IkReal gconst148=((1.0)*r01*x6848);
IkReal gconst149=((-1.0)*r00*x6848);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6852 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6852.valid){
continue;
}
IkReal x6850=((1.0)*(x6852.value));
IkReal x6851=x6843;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6850)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6850)));
IkReal gconst148=((1.0)*r01*x6851);
IkReal gconst149=((-1.0)*r00*x6851);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6855 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6855.valid){
continue;
}
IkReal x6853=((1.0)*(x6855.value));
IkReal x6854=x6843;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6853)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6853)));
IkReal gconst148=((1.0)*r01*x6854);
IkReal gconst149=((-1.0)*r00*x6854);
IkReal x6856=r02*r02;
IkReal x6857=(r12*sj0);
IkReal x6858=((1.0)*cj0);
IkReal x6859=x6843;
j4eval[0]=((IKabs(((((-1.0)*r02*x6858))+(((-1.0)*x6857)))))+(IKabs(((((-1.0)*x6858*x6859))+((r02*x6857*x6859))+((cj0*x6856*x6859))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6860=((1.0)*sj0);
IkReal x6861=((1.0)*gconst149);
CheckValue<IkReal> x6862 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r10*x6860))+((cj0*gconst148*r01))+(((-1.0)*cj0*r00*x6861))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6862.valid){
continue;
}
CheckValue<IkReal> x6863=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x6861)))),-1);
if(!x6863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6862.value)+(((1.5707963267949)*(x6863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6864=IKcos(j4);
IkReal x6865=IKsin(j4);
IkReal x6866=(cj2*sj1);
IkReal x6867=(cj1*sj2);
IkReal x6868=(gconst148*x6864);
IkReal x6869=(gconst149*x6865);
IkReal x6870=((1.0)*gconst148*x6865);
IkReal x6871=((1.0)*gconst149*x6864);
evalcond[0]=(((r22*x6865))+(((-1.0)*r20*x6871))+((r21*x6868)));
evalcond[1]=(((r11*x6868))+cj0+((r12*x6865))+(((-1.0)*r10*x6871)));
evalcond[2]=(((r02*x6865))+(((-1.0)*r00*x6871))+(((-1.0)*sj0))+((r01*x6868)));
evalcond[3]=(((r22*x6864))+(((-1.0)*r21*x6870))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6869)));
evalcond[4]=(((r02*x6864))+(((-1.0)*r01*x6870))+((cj0*x6867))+((cj0*x6866))+((r00*x6869)));
evalcond[5]=(((sj0*x6867))+((sj0*x6866))+((r12*x6864))+(((-1.0)*r11*x6870))+((r10*x6869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6872 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6872.valid){
continue;
}
CheckValue<IkReal> x6873=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x6873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6872.value)+(((1.5707963267949)*(x6873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6874=IKcos(j4);
IkReal x6875=IKsin(j4);
IkReal x6876=(cj2*sj1);
IkReal x6877=(cj1*sj2);
IkReal x6878=(gconst148*x6874);
IkReal x6879=(gconst149*x6875);
IkReal x6880=((1.0)*gconst148*x6875);
IkReal x6881=((1.0)*gconst149*x6874);
evalcond[0]=(((r22*x6875))+(((-1.0)*r20*x6881))+((r21*x6878)));
evalcond[1]=(((r11*x6878))+cj0+((r12*x6875))+(((-1.0)*r10*x6881)));
evalcond[2]=(((r02*x6875))+(((-1.0)*sj0))+((r01*x6878))+(((-1.0)*r00*x6881)));
evalcond[3]=(((r22*x6874))+(((-1.0)*r21*x6880))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6879)));
evalcond[4]=(((r02*x6874))+((cj0*x6876))+((cj0*x6877))+((r00*x6879))+(((-1.0)*r01*x6880)));
evalcond[5]=(((sj0*x6876))+((sj0*x6877))+((r12*x6874))+(((-1.0)*r11*x6880))+((r10*x6879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6882=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6882.value)))+(x6883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6884=IKcos(j4);
IkReal x6885=IKsin(j4);
IkReal x6886=(cj2*sj1);
IkReal x6887=(cj1*sj2);
IkReal x6888=(gconst148*x6884);
IkReal x6889=(gconst149*x6885);
IkReal x6890=((1.0)*gconst148*x6885);
IkReal x6891=((1.0)*gconst149*x6884);
evalcond[0]=((((-1.0)*r20*x6891))+((r22*x6885))+((r21*x6888)));
evalcond[1]=((((-1.0)*r10*x6891))+((r11*x6888))+cj0+((r12*x6885)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6885))+((r01*x6888))+(((-1.0)*r00*x6891)));
evalcond[3]=(((r20*x6889))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6890))+((r22*x6884))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x6890))+((cj0*x6887))+((cj0*x6886))+((r02*x6884))+((r00*x6889)));
evalcond[5]=(((sj0*x6887))+((sj0*x6886))+(((-1.0)*r11*x6890))+((r12*x6884))+((r10*x6889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6892=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6892;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6893=((1.0)*cj5);
IkReal x6894=((((-1.0)*r21*x6893))+(((-1.0)*r20*sj5)));
j4eval[0]=x6894;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6893))+((r11*sj5))))));
j4eval[2]=IKsign(x6894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6895=cj5*cj5;
IkReal x6896=r01*r01;
IkReal x6897=(cj5*r00);
IkReal x6898=(r01*sj5);
IkReal x6899=((((-2.0)*x6897*x6898))+x6896+(((-1.0)*x6895*x6896))+(r02*r02)+((x6895*(r00*r00))));
j4eval[0]=x6899;
j4eval[1]=IKsign(x6899);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6897))+x6898))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6900=cj5*cj5;
IkReal x6901=r01*r01;
IkReal x6902=(r01*sj5);
IkReal x6903=(cj5*r00);
CheckValue<IkReal> x6904 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6903))+x6902)),IKFAST_ATAN2_MAGTHRESH);
if(!x6904.valid){
continue;
}
CheckValue<IkReal> x6905=IKPowWithIntegerCheck(IKsign((x6901+(r02*r02)+((x6900*(r00*r00)))+(((-2.0)*x6902*x6903))+(((-1.0)*x6900*x6901)))),-1);
if(!x6905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6904.value)+(((1.5707963267949)*(x6905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6906=IKcos(j4);
IkReal x6907=IKsin(j4);
IkReal x6908=(cj5*r00);
IkReal x6909=((1.0)*x6906);
IkReal x6910=(sj5*x6906);
IkReal x6911=(cj5*x6907);
IkReal x6912=((1.0)*sj5*x6907);
evalcond[0]=(((r22*x6907))+((r21*x6910))+(((-1.0)*cj5*r20*x6909)));
evalcond[1]=(((r12*x6907))+((r11*x6910))+(((-1.0)*cj5*r10*x6909)));
evalcond[2]=(((r02*x6906))+(((-1.0)*r01*x6912))+((x6907*x6908)));
evalcond[3]=((-1.0)+((r02*x6907))+(((-1.0)*x6908*x6909))+((r01*x6910)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x6911))+(((-1.0)*r11*x6912))+((r12*x6906)));
evalcond[5]=(((r22*x6906))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6912))+((cj1*cj2))+((r20*x6911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6913=((1.0)*cj5);
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6913))+(((-1.0)*r20*sj5)))),-1);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x6913)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6914.value)))+(x6915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6916=IKcos(j4);
IkReal x6917=IKsin(j4);
IkReal x6918=(cj5*r00);
IkReal x6919=((1.0)*x6916);
IkReal x6920=(sj5*x6916);
IkReal x6921=(cj5*x6917);
IkReal x6922=((1.0)*sj5*x6917);
evalcond[0]=((((-1.0)*cj5*r20*x6919))+((r22*x6917))+((r21*x6920)));
evalcond[1]=(((r12*x6917))+((r11*x6920))+(((-1.0)*cj5*r10*x6919)));
evalcond[2]=((((-1.0)*r01*x6922))+((r02*x6916))+((x6917*x6918)));
evalcond[3]=((-1.0)+((r01*x6920))+((r02*x6917))+(((-1.0)*x6918*x6919)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x6921))+((r12*x6916))+(((-1.0)*r11*x6922)));
evalcond[5]=(((r20*x6921))+(((-1.0)*sj1*sj2))+((r22*x6916))+((cj1*cj2))+(((-1.0)*r21*x6922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6923 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6923.value)+(((1.5707963267949)*(x6924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKcos(j4);
IkReal x6926=IKsin(j4);
IkReal x6927=(cj5*r00);
IkReal x6928=((1.0)*x6925);
IkReal x6929=(sj5*x6925);
IkReal x6930=(cj5*x6926);
IkReal x6931=((1.0)*sj5*x6926);
evalcond[0]=((((-1.0)*cj5*r20*x6928))+((r22*x6926))+((r21*x6929)));
evalcond[1]=((((-1.0)*cj5*r10*x6928))+((r11*x6929))+((r12*x6926)));
evalcond[2]=(((x6926*x6927))+(((-1.0)*r01*x6931))+((r02*x6925)));
evalcond[3]=((-1.0)+(((-1.0)*x6927*x6928))+((r01*x6929))+((r02*x6926)));
evalcond[4]=(((cj2*sj1))+((r10*x6930))+((cj1*sj2))+((r12*x6925))+(((-1.0)*r11*x6931)));
evalcond[5]=(((r20*x6930))+(((-1.0)*sj1*sj2))+((r22*x6925))+((cj1*cj2))+(((-1.0)*r21*x6931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6932=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6932;
j4eval[1]=IKsign(x6932);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6933=((1.0)*cj5);
IkReal x6934=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6933)));
j4eval[0]=x6934;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6933))))));
j4eval[2]=IKsign(x6934);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6935=cj5*cj5;
IkReal x6936=r01*r01;
IkReal x6937=(r01*sj5);
IkReal x6938=(cj5*r00);
IkReal x6939=((((-1.0)*x6936))+(((-1.0)*(r02*r02)))+(((-1.0)*x6935*(r00*r00)))+(((2.0)*x6937*x6938))+((x6935*x6936)));
j4eval[0]=x6939;
j4eval[1]=IKsign(x6939);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6938))+x6937))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6940=cj5*cj5;
IkReal x6941=r01*r01;
IkReal x6942=(r01*sj5);
IkReal x6943=(cj5*r00);
CheckValue<IkReal> x6944=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6941))+(((-1.0)*(r02*r02)))+((x6940*x6941))+(((2.0)*x6942*x6943))+(((-1.0)*x6940*(r00*r00))))),-1);
if(!x6944.valid){
continue;
}
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6943))+x6942)),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6944.value)))+(x6945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6946=IKcos(j4);
IkReal x6947=IKsin(j4);
IkReal x6948=(cj5*r00);
IkReal x6949=((1.0)*sj2);
IkReal x6950=((1.0)*x6946);
IkReal x6951=(sj5*x6946);
IkReal x6952=(cj5*x6947);
IkReal x6953=((1.0)*sj5*x6947);
evalcond[0]=((((-1.0)*cj5*r20*x6950))+((r22*x6947))+((r21*x6951)));
evalcond[1]=((((-1.0)*cj5*r10*x6950))+((r12*x6947))+((r11*x6951)));
evalcond[2]=(((r02*x6946))+((x6947*x6948))+(((-1.0)*r01*x6953)));
evalcond[3]=((1.0)+(((-1.0)*x6948*x6950))+((r02*x6947))+((r01*x6951)));
evalcond[4]=((((-1.0)*r21*x6953))+((r22*x6946))+((r20*x6952))+(((-1.0)*sj1*x6949))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r11*x6953))+((r10*x6952))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x6949))+((r12*x6946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6954=((1.0)*cj5);
CheckValue<IkReal> x6955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6954))+(((-1.0)*r10*sj5)))),-1);
if(!x6955.valid){
continue;
}
CheckValue<IkReal> x6956 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x6954))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6955.value)))+(x6956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6957=IKcos(j4);
IkReal x6958=IKsin(j4);
IkReal x6959=(cj5*r00);
IkReal x6960=((1.0)*sj2);
IkReal x6961=((1.0)*x6957);
IkReal x6962=(sj5*x6957);
IkReal x6963=(cj5*x6958);
IkReal x6964=((1.0)*sj5*x6958);
evalcond[0]=(((r21*x6962))+((r22*x6958))+(((-1.0)*cj5*r20*x6961)));
evalcond[1]=((((-1.0)*cj5*r10*x6961))+((r12*x6958))+((r11*x6962)));
evalcond[2]=(((r02*x6957))+((x6958*x6959))+(((-1.0)*r01*x6964)));
evalcond[3]=((1.0)+(((-1.0)*x6959*x6961))+((r01*x6962))+((r02*x6958)));
evalcond[4]=(((r22*x6957))+(((-1.0)*sj1*x6960))+(((-1.0)*r21*x6964))+((cj1*cj2))+((r20*x6963)));
evalcond[5]=(((r10*x6963))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x6964))+((r12*x6957))+(((-1.0)*cj1*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6965=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6965.valid){
continue;
}
CheckValue<IkReal> x6966 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6965.value)))+(x6966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6967=IKcos(j4);
IkReal x6968=IKsin(j4);
IkReal x6969=(cj5*r00);
IkReal x6970=((1.0)*sj2);
IkReal x6971=((1.0)*x6967);
IkReal x6972=(sj5*x6967);
IkReal x6973=(cj5*x6968);
IkReal x6974=((1.0)*sj5*x6968);
evalcond[0]=(((r21*x6972))+((r22*x6968))+(((-1.0)*cj5*r20*x6971)));
evalcond[1]=((((-1.0)*cj5*r10*x6971))+((r11*x6972))+((r12*x6968)));
evalcond[2]=(((x6968*x6969))+((r02*x6967))+(((-1.0)*r01*x6974)));
evalcond[3]=((1.0)+((r01*x6972))+(((-1.0)*x6969*x6971))+((r02*x6968)));
evalcond[4]=(((r22*x6967))+(((-1.0)*sj1*x6970))+(((-1.0)*r21*x6974))+((cj1*cj2))+((r20*x6973)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r11*x6974))+(((-1.0)*cj1*x6970))+((r10*x6973))+((r12*x6967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6975=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6975);
rxp1_1=(px*r21);
rxp1_2=(r11*x6975);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6976=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6976);
rxp1_1=(px*r21);
rxp1_2=(r11*x6976);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6977=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6977);
rxp1_1=(px*r21);
rxp1_2=(r11*x6977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6980=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6980.valid){
continue;
}
IkReal x6978=x6980.value;
IkReal x6979=((1.0)*sj0*x6978);
sj4array[0]=((((-1.0)*cj1*sj2*x6979))+(((-1.0)*cj2*sj1*x6979)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6981=IKcos(j4);
IkReal x6982=IKsin(j4);
IkReal x6983=(r21*sj5);
IkReal x6984=((1.0)*cj5*x6981);
evalcond[0]=(r02*x6981);
evalcond[1]=((((-1.0)*sj0))+((r02*x6982)));
evalcond[2]=((((-1.0)*r20*x6984))+((x6981*x6983)));
evalcond[3]=((((-1.0)*r10*x6984))+((r11*sj5*x6981)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj5*r20*x6982))+((cj1*cj2))+(((-1.0)*x6982*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6986=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6986.valid){
continue;
}
IkReal x6985=x6986.value;
sj4array[0]=(((sj1*sj2*x6985))+(((-1.0)*cj1*cj2*x6985)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6987=IKcos(j4);
IkReal x6988=IKsin(j4);
IkReal x6989=(r11*sj5);
IkReal x6990=((1.0)*cj5*x6987);
evalcond[0]=(r02*x6987);
evalcond[1]=((((-1.0)*sj0))+((r02*x6988)));
evalcond[2]=(((r21*sj5*x6987))+(((-1.0)*r20*x6990)));
evalcond[3]=((((-1.0)*r10*x6990))+((x6987*x6989)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x6988*x6989))+((cj5*r10*x6988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(r02,-1);
if(!x6991.valid){
continue;
}
sj4array[0]=(sj0*(x6991.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6992=IKcos(j4);
IkReal x6993=IKsin(j4);
IkReal x6994=(sj5*x6992);
IkReal x6995=(cj5*x6993);
IkReal x6996=((1.0)*sj5*x6993);
IkReal x6997=((1.0)*cj5*x6992);
evalcond[0]=(r02*x6992);
evalcond[1]=(((r21*x6994))+(((-1.0)*r20*x6997)));
evalcond[2]=(((r11*x6994))+(((-1.0)*r10*x6997)));
evalcond[3]=(((r20*x6995))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x6996)));
evalcond[4]=((((-1.0)*r11*x6996))+((r10*x6995))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6998=((1.0)*sj0);
IkReal x6999=((1.0)*cj0);
CheckValue<IkReal> x7000 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6999))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6998)))),IkReal(((((-1.0)*r12*x6998))+(((-1.0)*r02*x6999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7000.valid){
continue;
}
CheckValue<IkReal> x7001=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7000.value)+(((1.5707963267949)*(x7001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7002=IKcos(j4);
IkReal x7003=IKsin(j4);
IkReal x7004=(cj5*r00);
IkReal x7005=(cj2*sj1);
IkReal x7006=(cj1*sj2);
IkReal x7007=((1.0)*x7002);
IkReal x7008=(sj5*x7002);
IkReal x7009=(cj5*x7003);
IkReal x7010=((1.0)*sj5*x7003);
evalcond[0]=((((-1.0)*cj5*r20*x7007))+((r22*x7003))+((r21*x7008)));
evalcond[1]=((((-1.0)*cj5*r10*x7007))+cj0+((r12*x7003))+((r11*x7008)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7004*x7007))+((r02*x7003))+((r01*x7008)));
evalcond[3]=(((r20*x7009))+(((-1.0)*sj1*sj2))+((r22*x7002))+((cj1*cj2))+(((-1.0)*r21*x7010)));
evalcond[4]=(((x7003*x7004))+((cj0*x7005))+((cj0*x7006))+((r02*x7002))+(((-1.0)*r01*x7010)));
evalcond[5]=(((sj0*x7005))+((sj0*x7006))+((r12*x7002))+(((-1.0)*r11*x7010))+((r10*x7009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7011 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7011.value)+(((1.5707963267949)*(x7012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKcos(j4);
IkReal x7014=IKsin(j4);
IkReal x7015=(cj5*r00);
IkReal x7016=(cj2*sj1);
IkReal x7017=(cj1*sj2);
IkReal x7018=((1.0)*x7013);
IkReal x7019=(sj5*x7013);
IkReal x7020=(cj5*x7014);
IkReal x7021=((1.0)*sj5*x7014);
evalcond[0]=((((-1.0)*cj5*r20*x7018))+((r21*x7019))+((r22*x7014)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x7018))+((r11*x7019))+((r12*x7014)));
evalcond[2]=(((r02*x7014))+(((-1.0)*sj0))+(((-1.0)*x7015*x7018))+((r01*x7019)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7013))+((r20*x7020))+((cj1*cj2))+(((-1.0)*r21*x7021)));
evalcond[4]=(((r02*x7013))+((cj0*x7017))+((cj0*x7016))+((x7014*x7015))+(((-1.0)*r01*x7021)));
evalcond[5]=((((-1.0)*r11*x7021))+((r10*x7020))+((sj0*x7017))+((sj0*x7016))+((r12*x7013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7022 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7022.valid){
continue;
}
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7022.value)+(((1.5707963267949)*(x7023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7024=IKcos(j4);
IkReal x7025=IKsin(j4);
IkReal x7026=(cj5*r00);
IkReal x7027=(cj2*sj1);
IkReal x7028=(cj1*sj2);
IkReal x7029=((1.0)*x7024);
IkReal x7030=(sj5*x7024);
IkReal x7031=(cj5*x7025);
IkReal x7032=((1.0)*sj5*x7025);
evalcond[0]=(((r21*x7030))+((r22*x7025))+(((-1.0)*cj5*r20*x7029)));
evalcond[1]=(cj0+((r11*x7030))+((r12*x7025))+(((-1.0)*cj5*r10*x7029)));
evalcond[2]=(((r01*x7030))+(((-1.0)*sj0))+(((-1.0)*x7026*x7029))+((r02*x7025)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7031))+((r22*x7024))+((cj1*cj2))+(((-1.0)*r21*x7032)));
evalcond[4]=((((-1.0)*r01*x7032))+((r02*x7024))+((x7025*x7026))+((cj0*x7027))+((cj0*x7028)));
evalcond[5]=((((-1.0)*r11*x7032))+((r10*x7031))+((sj0*x7028))+((sj0*x7027))+((r12*x7024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7033=cj5*cj5;
IkReal x7034=r21*r21;
IkReal x7035=(sj1*sj2);
IkReal x7036=(r21*sj5);
IkReal x7037=(cj1*cj2);
IkReal x7038=(cj5*r20);
CheckValue<IkReal> x7039 = IKatan2WithCheck(IkReal((((x7035*x7038))+(((-1.0)*x7037*x7038))+((x7036*x7037))+(((-1.0)*x7035*x7036)))),IkReal(((((-1.0)*r22*x7037))+((r22*x7035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7039.valid){
continue;
}
CheckValue<IkReal> x7040=IKPowWithIntegerCheck(IKsign((x7034+(((-2.0)*x7036*x7038))+(r22*r22)+(((-1.0)*x7033*x7034))+((x7033*(r20*r20))))),-1);
if(!x7040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7039.value)+(((1.5707963267949)*(x7040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7041=IKcos(j4);
IkReal x7042=IKsin(j4);
IkReal x7043=(r21*sj5);
IkReal x7044=(cj5*r20);
evalcond[0]=(((x7041*x7043))+(((-1.0)*x7041*x7044))+((r22*x7042)));
evalcond[1]=((((-1.0)*x7042*x7043))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x7041))+((x7042*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7045=(cj4*cj5);
IkReal x7046=(cj4*sj5);
if( IKabs((((r01*x7046))+(((-1.0)*r00*x7045))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x7045))+(((-1.0)*r11*x7046))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x7046))+(((-1.0)*r00*x7045))+((r02*sj4))))+IKsqr((((r10*x7045))+(((-1.0)*r11*x7046))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x7046))+(((-1.0)*r00*x7045))+((r02*sj4))), (((r10*x7045))+(((-1.0)*r11*x7046))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7047=IKcos(j0);
IkReal x7048=IKsin(j0);
IkReal x7049=(r00*sj5);
IkReal x7050=(cj5*r00);
IkReal x7051=((1.0)*sj2);
IkReal x7052=((1.0)*sj5);
IkReal x7053=(cj1*cj2);
IkReal x7054=((0.24)*cj2);
IkReal x7055=((1.0)*cj4);
IkReal x7056=(cj5*r11);
IkReal x7057=(cj5*r10);
IkReal x7058=(cj5*r01);
IkReal x7059=(cj1*sj2);
IkReal x7060=(cj4*sj5);
IkReal x7061=(sj1*x7048);
IkReal x7062=(sj1*x7047);
evalcond[0]=(x7047+((r12*sj4))+(((-1.0)*x7055*x7057))+((r11*x7060)));
evalcond[1]=((((-1.0)*x7048))+((r02*sj4))+((r01*x7060))+(((-1.0)*x7050*x7055)));
evalcond[2]=((((-1.0)*x7051*x7062))+(((-1.0)*x7049))+(((-1.0)*x7058))+((x7047*x7053)));
evalcond[3]=((((-1.0)*x7051*x7061))+(((-1.0)*x7056))+((x7048*x7053))+(((-1.0)*r10*x7052)));
evalcond[4]=(((sj4*x7050))+(((-1.0)*r01*sj4*x7052))+((x7047*x7059))+((cj2*x7062))+((cj4*r02)));
evalcond[5]=(((sj4*x7057))+(((-1.0)*r11*sj4*x7052))+((cj2*x7061))+((x7048*x7059))+((cj4*r12)));
evalcond[6]=(((x7054*x7062))+(((-0.095)*x7049))+(((0.265)*x7062))+(((-1.0)*px))+(((0.24)*x7047*x7059))+(((-0.11)*x7048))+(((-0.095)*x7058)));
evalcond[7]=(((x7054*x7061))+(((-0.095)*r10*sj5))+(((0.265)*x7061))+(((-1.0)*py))+(((0.11)*x7047))+(((0.24)*x7048*x7059))+(((-0.095)*x7056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7063=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7063.value)))+(x7064.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7065=IKcos(j0);
IkReal x7066=IKsin(j0);
IkReal x7067=((1.0)*sj2);
IkReal x7068=(cj1*cj2);
IkReal x7069=((0.24)*cj2);
IkReal x7070=(cj5*r11);
IkReal x7071=(r00*sj5);
IkReal x7072=(r10*sj5);
IkReal x7073=(cj5*r01);
IkReal x7074=(sj1*x7066);
IkReal x7075=(sj1*x7065);
IkReal x7076=((0.24)*cj1*sj2);
evalcond[0]=((((-1.0)*x7067*x7075))+(((-1.0)*x7073))+(((-1.0)*x7071))+((x7065*x7068)));
evalcond[1]=((((-1.0)*x7067*x7074))+(((-1.0)*x7070))+(((-1.0)*x7072))+((x7066*x7068)));
evalcond[2]=((((-0.095)*x7071))+(((-0.095)*x7073))+(((-0.11)*x7066))+(((0.265)*x7075))+(((-1.0)*px))+((x7069*x7075))+((x7065*x7076)));
evalcond[3]=((((-0.095)*x7072))+(((-0.095)*x7070))+(((0.265)*x7074))+(((-1.0)*py))+((x7069*x7074))+((x7066*x7076))+(((0.11)*x7065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7077=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7077;
j4eval[1]=IKsign(x7077);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7078=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7078;
j4eval[1]=IKsign(x7078);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7079=((1.0)*sj0);
IkReal x7080=((1.0)*cj0);
IkReal x7081=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7081;
j4eval[1]=((IKabs(((((-1.0)*r12*x7079))+(((-1.0)*r02*x7080)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7080))+(((-1.0)*cj5*r10*x7079))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x7081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7082=((-1.0)*r20);
IkReal x7084 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7084)==0){
continue;
}
IkReal x7083=pow(x7084,-0.5);
CheckValue<IkReal> x7085 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7082),IKFAST_ATAN2_MAGTHRESH);
if(!x7085.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7085.value));
IkReal gconst133=(r21*x7083);
IkReal gconst134=(x7082*x7083);
CheckValue<IkReal> x7086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7086.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7086.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7087=((-1.0)*r20);
IkReal x7088=x7083;
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7087),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
IkReal x7089=((-1.0)*(x7090.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7089;
IkReal gconst132=x7089;
IkReal gconst133=(r21*x7088);
IkReal gconst134=(x7087*x7088);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7091=((-1.0)*r20);
IkReal x7092=x7083;
CheckValue<IkReal> x7094 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7091),IKFAST_ATAN2_MAGTHRESH);
if(!x7094.valid){
continue;
}
IkReal x7093=((-1.0)*(x7094.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7093;
IkReal gconst132=x7093;
IkReal gconst133=(r21*x7092);
IkReal gconst134=(x7091*x7092);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7095=((-1.0)*r20);
IkReal x7096=x7083;
CheckValue<IkReal> x7098 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7095),IKFAST_ATAN2_MAGTHRESH);
if(!x7098.valid){
continue;
}
IkReal x7097=((-1.0)*(x7098.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7097;
IkReal gconst132=x7097;
IkReal gconst133=(r21*x7096);
IkReal gconst134=(x7095*x7096);
IkReal x7099=r22*r22;
CheckValue<IkReal> x7102=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7099))),-1);
if(!x7102.valid){
continue;
}
IkReal x7100=x7102.value;
IkReal x7101=(x7099+((x7100*(r21*r21*r21*r21)))+(((2.0)*x7100*(r20*r20)*(r21*r21)))+((x7100*(r20*r20*r20*r20))));
j4eval[0]=x7101;
j4eval[1]=IKsign(x7101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7103=(gconst134*r20);
IkReal x7104=(cj1*cj2);
IkReal x7105=(gconst133*r21);
IkReal x7106=(sj1*sj2);
CheckValue<IkReal> x7107 = IKatan2WithCheck(IkReal(((((-1.0)*x7103*x7104))+(((-1.0)*x7105*x7106))+((x7104*x7105))+((x7103*x7106)))),IkReal((((r22*x7106))+(((-1.0)*r22*x7104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7107.valid){
continue;
}
CheckValue<IkReal> x7108=IKPowWithIntegerCheck(IKsign(((x7105*x7105)+(((-2.0)*x7103*x7105))+(x7103*x7103)+(r22*r22))),-1);
if(!x7108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7107.value)+(((1.5707963267949)*(x7108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7109=IKcos(j4);
IkReal x7110=IKsin(j4);
IkReal x7111=(gconst134*r10);
IkReal x7112=(cj2*sj1);
IkReal x7113=(gconst134*r00);
IkReal x7114=(gconst134*r20);
IkReal x7115=(cj1*sj2);
IkReal x7116=(gconst133*x7109);
IkReal x7117=((1.0)*x7109);
IkReal x7118=((1.0)*gconst133*x7110);
evalcond[0]=(((r21*x7116))+((r22*x7110))+(((-1.0)*x7114*x7117)));
evalcond[1]=(((r11*x7116))+((r12*x7110))+cj0+(((-1.0)*x7111*x7117)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7110))+((r01*x7116))+(((-1.0)*x7113*x7117)));
evalcond[3]=(((x7110*x7114))+(((-1.0)*sj1*sj2))+((r22*x7109))+(((-1.0)*r21*x7118))+((cj1*cj2)));
evalcond[4]=(((cj0*x7112))+((cj0*x7115))+((x7110*x7113))+((r02*x7109))+(((-1.0)*r01*x7118)));
evalcond[5]=(((r12*x7109))+((x7110*x7111))+(((-1.0)*r11*x7118))+((sj0*x7112))+((sj0*x7115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7119 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7119.valid){
continue;
}
CheckValue<IkReal> x7120=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7119.value)+(((1.5707963267949)*(x7120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7121=IKcos(j4);
IkReal x7122=IKsin(j4);
IkReal x7123=(gconst134*r10);
IkReal x7124=(cj2*sj1);
IkReal x7125=(gconst134*r00);
IkReal x7126=(gconst134*r20);
IkReal x7127=(cj1*sj2);
IkReal x7128=(gconst133*x7121);
IkReal x7129=((1.0)*x7121);
IkReal x7130=((1.0)*gconst133*x7122);
evalcond[0]=((((-1.0)*x7126*x7129))+((r22*x7122))+((r21*x7128)));
evalcond[1]=((((-1.0)*x7123*x7129))+cj0+((r12*x7122))+((r11*x7128)));
evalcond[2]=(((r01*x7128))+(((-1.0)*sj0))+((r02*x7122))+(((-1.0)*x7125*x7129)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x7130))+((cj1*cj2))+((r22*x7121))+((x7122*x7126)));
evalcond[4]=((((-1.0)*r01*x7130))+((cj0*x7124))+((cj0*x7127))+((r02*x7121))+((x7122*x7125)));
evalcond[5]=((((-1.0)*r11*x7130))+((r12*x7121))+((sj0*x7124))+((sj0*x7127))+((x7122*x7123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7131=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7131.valid){
continue;
}
CheckValue<IkReal> x7132 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7131.value)))+(x7132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7133=IKcos(j4);
IkReal x7134=IKsin(j4);
IkReal x7135=(gconst134*r10);
IkReal x7136=(cj2*sj1);
IkReal x7137=(gconst134*r00);
IkReal x7138=(gconst134*r20);
IkReal x7139=(cj1*sj2);
IkReal x7140=(gconst133*x7133);
IkReal x7141=((1.0)*x7133);
IkReal x7142=((1.0)*gconst133*x7134);
evalcond[0]=(((r22*x7134))+(((-1.0)*x7138*x7141))+((r21*x7140)));
evalcond[1]=(cj0+(((-1.0)*x7135*x7141))+((r11*x7140))+((r12*x7134)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7140))+(((-1.0)*x7137*x7141))+((r02*x7134)));
evalcond[3]=(((r22*x7133))+((x7134*x7138))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7142))+((cj1*cj2)));
evalcond[4]=(((cj0*x7139))+((cj0*x7136))+((x7134*x7137))+(((-1.0)*r01*x7142))+((r02*x7133)));
evalcond[5]=(((x7134*x7135))+((sj0*x7139))+((sj0*x7136))+(((-1.0)*r11*x7142))+((r12*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7143=((-1.0)*r21);
IkReal x7145 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7145)==0){
continue;
}
IkReal x7144=pow(x7145,-0.5);
CheckValue<IkReal> x7146 = IKatan2WithCheck(IkReal(x7143),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7146.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7146.value))));
IkReal gconst136=(x7143*x7144);
IkReal gconst137=((1.0)*r20*x7144);
CheckValue<IkReal> x7147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7148=((-1.0)*r21);
CheckValue<IkReal> x7151 = IKatan2WithCheck(IkReal(x7148),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7151.valid){
continue;
}
IkReal x7149=((1.0)*(x7151.value));
IkReal x7150=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7149)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7149)));
IkReal gconst136=(x7148*x7150);
IkReal gconst137=((1.0)*r20*x7150);
IkReal x7152=r22*r22;
IkReal x7153=((1.0)*x7152);
CheckValue<IkReal> x7157=IKPowWithIntegerCheck(((-1.0)+x7152),-1);
if(!x7157.valid){
continue;
}
IkReal x7154=x7157.value;
if((((1.0)+(((-1.0)*x7153)))) < -0.00001)
continue;
IkReal x7155=IKsqrt(((1.0)+(((-1.0)*x7153))));
IkReal x7156=(cj0*x7154*x7155);
j4eval[0]=((IKabs((x7156+(((-1.0)*x7153*x7156)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7158=((-1.0)*r21);
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(x7158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
IkReal x7159=((1.0)*(x7161.value));
IkReal x7160=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7159)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7159)));
IkReal gconst136=(x7158*x7160);
IkReal gconst137=((1.0)*r20*x7160);
IkReal x7162=r22*r22;
IkReal x7163=((1.0)*x7162);
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(((-1.0)+x7162),-1);
if(!x7167.valid){
continue;
}
IkReal x7164=x7167.value;
if((((1.0)+(((-1.0)*x7163)))) < -0.00001)
continue;
IkReal x7165=IKsqrt(((1.0)+(((-1.0)*x7163))));
IkReal x7166=(sj0*x7164*x7165);
j4eval[0]=((IKabs((x7166+(((-1.0)*x7163*x7166)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7168=((-1.0)*r21);
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal(x7168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
IkReal x7169=((1.0)*(x7171.value));
IkReal x7170=x7144;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7169)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7169)));
IkReal gconst136=(x7168*x7170);
IkReal gconst137=((1.0)*r20*x7170);
IkReal x7172=r22*r22;
IkReal x7173=((1.0)*r12*sj0);
IkReal x7174=((1.0)*cj0*r02);
CheckValue<IkReal> x7178=IKPowWithIntegerCheck(((-1.0)+x7172),-1);
if(!x7178.valid){
continue;
}
IkReal x7175=x7178.value;
if((((1.0)+(((-1.0)*x7172)))) < -0.00001)
continue;
IkReal x7176=IKsqrt(((1.0)+(((-1.0)*x7172))));
IkReal x7177=(r22*x7175*x7176);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7174))+(((-1.0)*x7173)))))+(IKabs(((((-1.0)*x7174*x7177))+(((-1.0)*x7173*x7177))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7179=((1.0)*sj0);
IkReal x7180=((1.0)*cj0);
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182 = IKatan2WithCheck(IkReal(((((-1.0)*gconst137*r10*x7179))+(((-1.0)*gconst137*r00*x7180))+((gconst136*r11*sj0))+((cj0*gconst136*r01)))),IkReal(((((-1.0)*r12*x7179))+(((-1.0)*r02*x7180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7181.value)))+(x7182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKcos(j4);
IkReal x7184=IKsin(j4);
IkReal x7185=(cj2*sj1);
IkReal x7186=(gconst136*r01);
IkReal x7187=(gconst136*r21);
IkReal x7188=(gconst136*r11);
IkReal x7189=(cj1*sj2);
IkReal x7190=((1.0)*x7184);
IkReal x7191=(gconst137*x7184);
IkReal x7192=((1.0)*gconst137*x7183);
evalcond[0]=(((x7183*x7187))+(((-1.0)*r20*x7192))+((r22*x7184)));
evalcond[1]=(((r12*x7184))+cj0+((x7183*x7188))+(((-1.0)*r10*x7192)));
evalcond[2]=((((-1.0)*sj0))+((x7183*x7186))+((r02*x7184))+(((-1.0)*r00*x7192)));
evalcond[3]=(((r20*x7191))+(((-1.0)*sj1*sj2))+(((-1.0)*x7187*x7190))+((cj1*cj2))+((r22*x7183)));
evalcond[4]=(((r00*x7191))+(((-1.0)*x7186*x7190))+((r02*x7183))+((cj0*x7185))+((cj0*x7189)));
evalcond[5]=(((r12*x7183))+((r10*x7191))+((sj0*x7189))+((sj0*x7185))+(((-1.0)*x7188*x7190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
CheckValue<IkReal> x7194=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7193.value)+(((1.5707963267949)*(x7194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7195=IKcos(j4);
IkReal x7196=IKsin(j4);
IkReal x7197=(cj2*sj1);
IkReal x7198=(gconst136*r01);
IkReal x7199=(gconst136*r21);
IkReal x7200=(gconst136*r11);
IkReal x7201=(cj1*sj2);
IkReal x7202=((1.0)*x7196);
IkReal x7203=(gconst137*x7196);
IkReal x7204=((1.0)*gconst137*x7195);
evalcond[0]=((((-1.0)*r20*x7204))+((x7195*x7199))+((r22*x7196)));
evalcond[1]=((((-1.0)*r10*x7204))+cj0+((r12*x7196))+((x7195*x7200)));
evalcond[2]=((((-1.0)*sj0))+((x7195*x7198))+((r02*x7196))+(((-1.0)*r00*x7204)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x7199*x7202))+((r20*x7203))+((r22*x7195))+((cj1*cj2)));
evalcond[4]=(((r00*x7203))+(((-1.0)*x7198*x7202))+((r02*x7195))+((cj0*x7201))+((cj0*x7197)));
evalcond[5]=(((r10*x7203))+((r12*x7195))+((sj0*x7197))+(((-1.0)*x7200*x7202))+((sj0*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7205 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7205.valid){
continue;
}
CheckValue<IkReal> x7206=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7205.value)+(((1.5707963267949)*(x7206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7207=IKcos(j4);
IkReal x7208=IKsin(j4);
IkReal x7209=(cj2*sj1);
IkReal x7210=(gconst136*r01);
IkReal x7211=(gconst136*r21);
IkReal x7212=(gconst136*r11);
IkReal x7213=(cj1*sj2);
IkReal x7214=((1.0)*x7208);
IkReal x7215=(gconst137*x7208);
IkReal x7216=((1.0)*gconst137*x7207);
evalcond[0]=(((x7207*x7211))+((r22*x7208))+(((-1.0)*r20*x7216)));
evalcond[1]=(cj0+(((-1.0)*r10*x7216))+((x7207*x7212))+((r12*x7208)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7216))+((x7207*x7210))+((r02*x7208)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x7211*x7214))+((cj1*cj2))+((r22*x7207))+((r20*x7215)));
evalcond[4]=(((r00*x7215))+((cj0*x7213))+((cj0*x7209))+(((-1.0)*x7210*x7214))+((r02*x7207)));
evalcond[5]=(((r10*x7215))+(((-1.0)*x7212*x7214))+((sj0*x7213))+((r12*x7207))+((sj0*x7209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7218 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7218)==0){
continue;
}
IkReal x7217=pow(x7218,-0.5);
CheckValue<IkReal> x7219 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7219.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7219.value));
IkReal gconst139=((-1.0)*r11*x7217);
IkReal gconst140=(r10*x7217);
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7220.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
IkReal x7221=((-1.0)*(x7223.value));
IkReal x7222=x7217;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7221;
IkReal gconst138=x7221;
IkReal gconst139=((-1.0)*r11*x7222);
IkReal gconst140=(r10*x7222);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7224=((1.0)*gconst140);
CheckValue<IkReal> x7225 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x7224))+((gconst139*r11*sj0))+(((-1.0)*cj0*r00*x7224))+((cj0*gconst139*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7225.valid){
continue;
}
CheckValue<IkReal> x7226=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7224))+(((-1.0)*gconst139*r20)))),-1);
if(!x7226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7225.value)+(((1.5707963267949)*(x7226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7227=IKcos(j4);
IkReal x7228=IKsin(j4);
IkReal x7229=(cj2*sj1);
IkReal x7230=(gconst140*r10);
IkReal x7231=(cj1*sj2);
IkReal x7232=(gconst139*x7227);
IkReal x7233=(gconst140*x7228);
IkReal x7234=((1.0)*gconst139*x7228);
IkReal x7235=((1.0)*gconst140*x7227);
evalcond[0]=((((-1.0)*r20*x7235))+((r22*x7228))+((r21*x7232)));
evalcond[1]=((((-1.0)*x7227*x7230))+cj0+((r12*x7228))+((r11*x7232)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7232))+((r02*x7228))+(((-1.0)*r00*x7235)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7233))+((cj1*cj2))+((r22*x7227))+(((-1.0)*r21*x7234)));
evalcond[4]=(((r00*x7233))+((cj0*x7231))+((r02*x7227))+((cj0*x7229))+(((-1.0)*r01*x7234)));
evalcond[5]=(((sj0*x7229))+((x7228*x7230))+((sj0*x7231))+(((-1.0)*r11*x7234))+((r12*x7227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7236=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7236.value)))+(x7237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7238=IKcos(j4);
IkReal x7239=IKsin(j4);
IkReal x7240=(cj2*sj1);
IkReal x7241=(gconst140*r10);
IkReal x7242=(cj1*sj2);
IkReal x7243=(gconst139*x7238);
IkReal x7244=(gconst140*x7239);
IkReal x7245=((1.0)*gconst139*x7239);
IkReal x7246=((1.0)*gconst140*x7238);
evalcond[0]=((((-1.0)*r20*x7246))+((r21*x7243))+((r22*x7239)));
evalcond[1]=(cj0+((r11*x7243))+(((-1.0)*x7238*x7241))+((r12*x7239)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7246))+((r01*x7243))+((r02*x7239)));
evalcond[3]=((((-1.0)*r21*x7245))+(((-1.0)*sj1*sj2))+((r20*x7244))+((cj1*cj2))+((r22*x7238)));
evalcond[4]=(((cj0*x7242))+((cj0*x7240))+((r00*x7244))+(((-1.0)*r01*x7245))+((r02*x7238)));
evalcond[5]=((((-1.0)*r11*x7245))+((x7239*x7241))+((r12*x7238))+((sj0*x7242))+((sj0*x7240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7248 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7248)==0){
continue;
}
IkReal x7247=pow(x7248,-0.5);
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7249.value))));
IkReal gconst142=((1.0)*r11*x7247);
IkReal gconst143=((-1.0)*r10*x7247);
CheckValue<IkReal> x7250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7250.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7250.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
IkReal x7251=((1.0)*(x7253.value));
IkReal x7252=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7251)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7251)));
IkReal gconst142=((1.0)*r11*x7252);
IkReal gconst143=((-1.0)*r10*x7252);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7256 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7256.valid){
continue;
}
IkReal x7254=((1.0)*(x7256.value));
IkReal x7255=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7254)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7254)));
IkReal gconst142=((1.0)*r11*x7255);
IkReal gconst143=((-1.0)*r10*x7255);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7259 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7259.valid){
continue;
}
IkReal x7257=((1.0)*(x7259.value));
IkReal x7258=x7247;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7257)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7257)));
IkReal gconst142=((1.0)*r11*x7258);
IkReal gconst143=((-1.0)*r10*x7258);
IkReal x7260=r12*r12;
IkReal x7261=((1.0)*sj0);
IkReal x7262=(cj0*r02);
IkReal x7263=x7247;
j4eval[0]=((IKabs(((((-1.0)*x7262))+(((-1.0)*r12*x7261)))))+(IKabs(((((-1.0)*x7261*x7263))+((sj0*x7260*x7263))+((r12*x7262*x7263))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7264=((1.0)*sj0);
IkReal x7265=((1.0)*gconst143);
CheckValue<IkReal> x7266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7265))+(((-1.0)*gconst142*r20)))),-1);
if(!x7266.valid){
continue;
}
CheckValue<IkReal> x7267 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x7265))+((cj0*gconst142*r01))+(((-1.0)*gconst143*r10*x7264))+((gconst142*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7266.value)))+(x7267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7268=IKcos(j4);
IkReal x7269=IKsin(j4);
IkReal x7270=(cj2*sj1);
IkReal x7271=(cj1*sj2);
IkReal x7272=(gconst143*x7269);
IkReal x7273=(gconst142*x7268);
IkReal x7274=((1.0)*gconst142*x7269);
IkReal x7275=((1.0)*gconst143*x7268);
evalcond[0]=((((-1.0)*r20*x7275))+((r22*x7269))+((r21*x7273)));
evalcond[1]=(cj0+((r12*x7269))+(((-1.0)*r10*x7275))+((r11*x7273)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7269))+((r01*x7273))+(((-1.0)*r00*x7275)));
evalcond[3]=((((-1.0)*r21*x7274))+(((-1.0)*sj1*sj2))+((r22*x7268))+((r20*x7272))+((cj1*cj2)));
evalcond[4]=(((r02*x7268))+(((-1.0)*r01*x7274))+((r00*x7272))+((cj0*x7271))+((cj0*x7270)));
evalcond[5]=((((-1.0)*r11*x7274))+((r12*x7268))+((r10*x7272))+((sj0*x7271))+((sj0*x7270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7276.valid){
continue;
}
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7276.value)))+(x7277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7278=IKcos(j4);
IkReal x7279=IKsin(j4);
IkReal x7280=(cj2*sj1);
IkReal x7281=(cj1*sj2);
IkReal x7282=(gconst143*x7279);
IkReal x7283=(gconst142*x7278);
IkReal x7284=((1.0)*gconst142*x7279);
IkReal x7285=((1.0)*gconst143*x7278);
evalcond[0]=((((-1.0)*r20*x7285))+((r21*x7283))+((r22*x7279)));
evalcond[1]=(((r11*x7283))+cj0+((r12*x7279))+(((-1.0)*r10*x7285)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7285))+((r01*x7283))+((r02*x7279)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x7284))+((r20*x7282))+((cj1*cj2))+((r22*x7278)));
evalcond[4]=(((cj0*x7280))+((cj0*x7281))+(((-1.0)*r01*x7284))+((r00*x7282))+((r02*x7278)));
evalcond[5]=(((sj0*x7280))+((sj0*x7281))+((r12*x7278))+(((-1.0)*r11*x7284))+((r10*x7282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7286=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7286.value)))+(x7287.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7288=IKcos(j4);
IkReal x7289=IKsin(j4);
IkReal x7290=(cj2*sj1);
IkReal x7291=(cj1*sj2);
IkReal x7292=(gconst143*x7289);
IkReal x7293=(gconst142*x7288);
IkReal x7294=((1.0)*gconst142*x7289);
IkReal x7295=((1.0)*gconst143*x7288);
evalcond[0]=(((r22*x7289))+(((-1.0)*r20*x7295))+((r21*x7293)));
evalcond[1]=(cj0+((r12*x7289))+((r11*x7293))+(((-1.0)*r10*x7295)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7295))+((r02*x7289))+((r01*x7293)));
evalcond[3]=(((r22*x7288))+(((-1.0)*r21*x7294))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x7292)));
evalcond[4]=(((cj0*x7291))+((cj0*x7290))+(((-1.0)*r01*x7294))+((r02*x7288))+((r00*x7292)));
evalcond[5]=(((sj0*x7291))+((sj0*x7290))+((r12*x7288))+((r10*x7292))+(((-1.0)*r11*x7294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7296;
j4eval[1]=IKsign(x7296);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7297=((1.0)*cj5);
IkReal x7298=((((-1.0)*r21*x7297))+(((-1.0)*r20*sj5)));
j4eval[0]=x7298;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7297))))));
j4eval[2]=IKsign(x7298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7299=cj5*cj5;
IkReal x7300=r11*r11;
IkReal x7301=(cj5*r10);
IkReal x7302=(r11*sj5);
IkReal x7303=((((2.0)*x7301*x7302))+(((-1.0)*x7300))+(((-1.0)*x7299*(r10*r10)))+((x7299*x7300))+(((-1.0)*(r12*r12))));
j4eval[0]=x7303;
j4eval[1]=((IKabs(r12))+(IKabs((x7302+(((-1.0)*x7301))))));
j4eval[2]=IKsign(x7303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7304=cj5*cj5;
IkReal x7305=r11*r11;
IkReal x7306=(cj5*r10);
IkReal x7307=(r11*sj5);
CheckValue<IkReal> x7308 = IKatan2WithCheck(IkReal(r12),IkReal((x7307+(((-1.0)*x7306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7308.valid){
continue;
}
CheckValue<IkReal> x7309=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7305))+((x7304*x7305))+(((-1.0)*(r12*r12)))+(((2.0)*x7306*x7307))+(((-1.0)*x7304*(r10*r10))))),-1);
if(!x7309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7308.value)+(((1.5707963267949)*(x7309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7310=IKcos(j4);
IkReal x7311=IKsin(j4);
IkReal x7312=(cj5*r00);
IkReal x7313=((1.0)*x7310);
IkReal x7314=(sj5*x7310);
IkReal x7315=(cj5*x7311);
IkReal x7316=((1.0)*sj5*x7311);
evalcond[0]=((((-1.0)*cj5*r20*x7313))+((r22*x7311))+((r21*x7314)));
evalcond[1]=(((r02*x7311))+(((-1.0)*x7312*x7313))+((r01*x7314)));
evalcond[2]=(((r12*x7310))+((r10*x7315))+(((-1.0)*r11*x7316)));
evalcond[3]=((1.0)+((r12*x7311))+(((-1.0)*cj5*r10*x7313))+((r11*x7314)));
evalcond[4]=(((cj2*sj1))+((r02*x7310))+((cj1*sj2))+(((-1.0)*r01*x7316))+((x7311*x7312)));
evalcond[5]=(((r22*x7310))+(((-1.0)*r21*x7316))+(((-1.0)*sj1*sj2))+((r20*x7315))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7317=((1.0)*cj5);
CheckValue<IkReal> x7318 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7317)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7318.valid){
continue;
}
CheckValue<IkReal> x7319=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7317))+(((-1.0)*r20*sj5)))),-1);
if(!x7319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7318.value)+(((1.5707963267949)*(x7319.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7320=IKcos(j4);
IkReal x7321=IKsin(j4);
IkReal x7322=(cj5*r00);
IkReal x7323=((1.0)*x7320);
IkReal x7324=(sj5*x7320);
IkReal x7325=(cj5*x7321);
IkReal x7326=((1.0)*sj5*x7321);
evalcond[0]=(((r22*x7321))+((r21*x7324))+(((-1.0)*cj5*r20*x7323)));
evalcond[1]=(((r01*x7324))+(((-1.0)*x7322*x7323))+((r02*x7321)));
evalcond[2]=(((r10*x7325))+((r12*x7320))+(((-1.0)*r11*x7326)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x7323))+((r12*x7321))+((r11*x7324)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x7326))+((x7321*x7322))+((r02*x7320)));
evalcond[5]=(((r22*x7320))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7326))+((r20*x7325))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7327=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7327.valid){
continue;
}
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7327.value)))+(x7328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7329=IKcos(j4);
IkReal x7330=IKsin(j4);
IkReal x7331=(cj5*r00);
IkReal x7332=((1.0)*x7329);
IkReal x7333=(sj5*x7329);
IkReal x7334=(cj5*x7330);
IkReal x7335=((1.0)*sj5*x7330);
evalcond[0]=(((r22*x7330))+(((-1.0)*cj5*r20*x7332))+((r21*x7333)));
evalcond[1]=(((r02*x7330))+(((-1.0)*x7331*x7332))+((r01*x7333)));
evalcond[2]=(((r10*x7334))+(((-1.0)*r11*x7335))+((r12*x7329)));
evalcond[3]=((1.0)+((r12*x7330))+(((-1.0)*cj5*r10*x7332))+((r11*x7333)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7330*x7331))+(((-1.0)*r01*x7335))+((r02*x7329)));
evalcond[5]=(((r22*x7329))+(((-1.0)*r21*x7335))+(((-1.0)*sj1*sj2))+((r20*x7334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7336=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7336;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7337=((1.0)*cj5);
IkReal x7338=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7337)));
j4eval[0]=x7338;
j4eval[1]=((IKabs(((((-1.0)*r20*x7337))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7339=cj5*cj5;
IkReal x7340=r11*r11;
IkReal x7341=(r11*sj5);
IkReal x7342=(cj5*r10);
IkReal x7343=(((x7339*(r10*r10)))+x7340+(r12*r12)+(((-2.0)*x7341*x7342))+(((-1.0)*x7339*x7340)));
j4eval[0]=x7343;
j4eval[1]=((IKabs(r12))+(IKabs((x7341+(((-1.0)*x7342))))));
j4eval[2]=IKsign(x7343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7344=cj5*cj5;
IkReal x7345=r11*r11;
IkReal x7346=(cj5*r10);
IkReal x7347=(r11*sj5);
CheckValue<IkReal> x7348=IKPowWithIntegerCheck(IKsign((x7345+(r12*r12)+((x7344*(r10*r10)))+(((-1.0)*x7344*x7345))+(((-2.0)*x7346*x7347)))),-1);
if(!x7348.valid){
continue;
}
CheckValue<IkReal> x7349 = IKatan2WithCheck(IkReal(r12),IkReal((x7347+(((-1.0)*x7346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7348.value)))+(x7349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7350=IKcos(j4);
IkReal x7351=IKsin(j4);
IkReal x7352=(cj5*r00);
IkReal x7353=((1.0)*sj2);
IkReal x7354=((1.0)*x7350);
IkReal x7355=(sj5*x7350);
IkReal x7356=(cj5*x7351);
IkReal x7357=((1.0)*sj5*x7351);
evalcond[0]=((((-1.0)*cj5*r20*x7354))+((r21*x7355))+((r22*x7351)));
evalcond[1]=(((r01*x7355))+(((-1.0)*x7352*x7354))+((r02*x7351)));
evalcond[2]=(((r10*x7356))+(((-1.0)*r11*x7357))+((r12*x7350)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7354))+((r11*x7355))+((r12*x7351)));
evalcond[4]=(((r20*x7356))+((cj1*cj2))+(((-1.0)*r21*x7357))+((r22*x7350))+(((-1.0)*sj1*x7353)));
evalcond[5]=((((-1.0)*r01*x7357))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x7353))+((r02*x7350))+((x7351*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7358=((1.0)*cj5);
CheckValue<IkReal> x7359 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7358)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7359.valid){
continue;
}
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7358))+(((-1.0)*r00*sj5)))),-1);
if(!x7360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7359.value)+(((1.5707963267949)*(x7360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7361=IKcos(j4);
IkReal x7362=IKsin(j4);
IkReal x7363=(cj5*r00);
IkReal x7364=((1.0)*sj2);
IkReal x7365=((1.0)*x7361);
IkReal x7366=(sj5*x7361);
IkReal x7367=(cj5*x7362);
IkReal x7368=((1.0)*sj5*x7362);
evalcond[0]=((((-1.0)*cj5*r20*x7365))+((r21*x7366))+((r22*x7362)));
evalcond[1]=(((r01*x7366))+(((-1.0)*x7363*x7365))+((r02*x7362)));
evalcond[2]=(((r12*x7361))+(((-1.0)*r11*x7368))+((r10*x7367)));
evalcond[3]=((-1.0)+((r12*x7362))+((r11*x7366))+(((-1.0)*cj5*r10*x7365)));
evalcond[4]=((((-1.0)*r21*x7368))+((r20*x7367))+((cj1*cj2))+(((-1.0)*sj1*x7364))+((r22*x7361)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x7364))+((x7362*x7363))+(((-1.0)*r01*x7368))+((r02*x7361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7369=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7369.valid){
continue;
}
CheckValue<IkReal> x7370 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7369.value)))+(x7370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7371=IKcos(j4);
IkReal x7372=IKsin(j4);
IkReal x7373=(cj5*r00);
IkReal x7374=((1.0)*sj2);
IkReal x7375=((1.0)*x7371);
IkReal x7376=(sj5*x7371);
IkReal x7377=(cj5*x7372);
IkReal x7378=((1.0)*sj5*x7372);
evalcond[0]=((((-1.0)*cj5*r20*x7375))+((r21*x7376))+((r22*x7372)));
evalcond[1]=(((r02*x7372))+((r01*x7376))+(((-1.0)*x7373*x7375)));
evalcond[2]=(((r12*x7371))+(((-1.0)*r11*x7378))+((r10*x7377)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7375))+((r12*x7372))+((r11*x7376)));
evalcond[4]=((((-1.0)*sj1*x7374))+((r20*x7377))+((cj1*cj2))+(((-1.0)*r21*x7378))+((r22*x7371)));
evalcond[5]=(((r02*x7371))+(((-1.0)*r01*x7378))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x7374))+((x7372*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7380 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7380)==0){
continue;
}
IkReal x7379=pow(x7380,-0.5);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7381.value));
IkReal gconst145=((-1.0)*r01*x7379);
IkReal gconst146=(r00*x7379);
CheckValue<IkReal> x7382 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7382.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7385 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7385.valid){
continue;
}
IkReal x7383=((-1.0)*(x7385.value));
IkReal x7384=x7379;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7383;
IkReal gconst144=x7383;
IkReal gconst145=((-1.0)*r01*x7384);
IkReal gconst146=(r00*x7384);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7386=((1.0)*sj0);
IkReal x7387=((1.0)*cj0);
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal((((cj0*gconst145*r01))+(((-1.0)*gconst146*r10*x7386))+(((-1.0)*gconst146*r00*x7387))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r02*x7387))+(((-1.0)*r12*x7386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKcos(j4);
IkReal x7391=IKsin(j4);
IkReal x7392=(cj2*sj1);
IkReal x7393=(gconst145*r21);
IkReal x7394=(gconst146*r00);
IkReal x7395=(gconst145*r11);
IkReal x7396=(cj1*sj2);
IkReal x7397=(gconst145*r01);
IkReal x7398=((1.0)*x7391);
IkReal x7399=(gconst146*x7391);
IkReal x7400=((1.0)*gconst146*x7390);
evalcond[0]=((((-1.0)*r20*x7400))+((r22*x7391))+((x7390*x7393)));
evalcond[1]=(cj0+((r12*x7391))+(((-1.0)*r10*x7400))+((x7390*x7395)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7391))+((x7390*x7397))+(((-1.0)*x7390*x7394)));
evalcond[3]=((((-1.0)*x7393*x7398))+(((-1.0)*sj1*sj2))+((r22*x7390))+((r20*x7399))+((cj1*cj2)));
evalcond[4]=(((r02*x7390))+(((-1.0)*x7397*x7398))+((x7391*x7394))+((cj0*x7396))+((cj0*x7392)));
evalcond[5]=(((r10*x7399))+(((-1.0)*x7395*x7398))+((r12*x7390))+((sj0*x7396))+((sj0*x7392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7401=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7401.valid){
continue;
}
CheckValue<IkReal> x7402 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7401.value)))+(x7402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7403=IKcos(j4);
IkReal x7404=IKsin(j4);
IkReal x7405=(cj2*sj1);
IkReal x7406=(gconst145*r21);
IkReal x7407=(gconst146*r00);
IkReal x7408=(gconst145*r11);
IkReal x7409=(cj1*sj2);
IkReal x7410=(gconst145*r01);
IkReal x7411=((1.0)*x7404);
IkReal x7412=(gconst146*x7404);
IkReal x7413=((1.0)*gconst146*x7403);
evalcond[0]=((((-1.0)*r20*x7413))+((x7403*x7406))+((r22*x7404)));
evalcond[1]=(cj0+((x7403*x7408))+(((-1.0)*r10*x7413))+((r12*x7404)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7404))+((x7403*x7410))+(((-1.0)*x7403*x7407)));
evalcond[3]=(((r20*x7412))+(((-1.0)*sj1*sj2))+((r22*x7403))+((cj1*cj2))+(((-1.0)*x7406*x7411)));
evalcond[4]=(((r02*x7403))+((x7404*x7407))+(((-1.0)*x7410*x7411))+((cj0*x7409))+((cj0*x7405)));
evalcond[5]=((((-1.0)*x7408*x7411))+((r12*x7403))+((r10*x7412))+((sj0*x7409))+((sj0*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7415 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7415)==0){
continue;
}
IkReal x7414=pow(x7415,-0.5);
CheckValue<IkReal> x7416 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7416.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7416.value))));
IkReal gconst148=((1.0)*r01*x7414);
IkReal gconst149=((-1.0)*r00*x7414);
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7417.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7420 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7420.valid){
continue;
}
IkReal x7418=((1.0)*(x7420.value));
IkReal x7419=x7414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7418)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7418)));
IkReal gconst148=((1.0)*r01*x7419);
IkReal gconst149=((-1.0)*r00*x7419);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7423 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7423.valid){
continue;
}
IkReal x7421=((1.0)*(x7423.value));
IkReal x7422=x7414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7421)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7421)));
IkReal gconst148=((1.0)*r01*x7422);
IkReal gconst149=((-1.0)*r00*x7422);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7426 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7426.valid){
continue;
}
IkReal x7424=((1.0)*(x7426.value));
IkReal x7425=x7414;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7424)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7424)));
IkReal gconst148=((1.0)*r01*x7425);
IkReal gconst149=((-1.0)*r00*x7425);
IkReal x7427=r02*r02;
IkReal x7428=(r12*sj0);
IkReal x7429=((1.0)*cj0);
IkReal x7430=x7414;
j4eval[0]=((IKabs((((r02*x7428*x7430))+(((-1.0)*x7429*x7430))+((cj0*x7427*x7430)))))+(IKabs(((((-1.0)*x7428))+(((-1.0)*r02*x7429))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7431=((1.0)*sj0);
IkReal x7432=((1.0)*gconst149);
CheckValue<IkReal> x7433 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r10*x7431))+((cj0*gconst148*r01))+(((-1.0)*cj0*r00*x7432))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*r12*x7431))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7433.valid){
continue;
}
CheckValue<IkReal> x7434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7432)))),-1);
if(!x7434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7433.value)+(((1.5707963267949)*(x7434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7435=IKcos(j4);
IkReal x7436=IKsin(j4);
IkReal x7437=(cj2*sj1);
IkReal x7438=(cj1*sj2);
IkReal x7439=(gconst148*x7435);
IkReal x7440=(gconst149*x7436);
IkReal x7441=((1.0)*gconst148*x7436);
IkReal x7442=((1.0)*gconst149*x7435);
evalcond[0]=(((r21*x7439))+((r22*x7436))+(((-1.0)*r20*x7442)));
evalcond[1]=((((-1.0)*r10*x7442))+cj0+((r11*x7439))+((r12*x7436)));
evalcond[2]=(((r01*x7439))+(((-1.0)*sj0))+(((-1.0)*r00*x7442))+((r02*x7436)));
evalcond[3]=(((r20*x7440))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x7435))+(((-1.0)*r21*x7441)));
evalcond[4]=((((-1.0)*r01*x7441))+((r02*x7435))+((cj0*x7437))+((cj0*x7438))+((r00*x7440)));
evalcond[5]=(((r12*x7435))+((r10*x7440))+(((-1.0)*r11*x7441))+((sj0*x7438))+((sj0*x7437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7443 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7443.valid){
continue;
}
CheckValue<IkReal> x7444=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7443.value)+(((1.5707963267949)*(x7444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7445=IKcos(j4);
IkReal x7446=IKsin(j4);
IkReal x7447=(cj2*sj1);
IkReal x7448=(cj1*sj2);
IkReal x7449=(gconst148*x7445);
IkReal x7450=(gconst149*x7446);
IkReal x7451=((1.0)*gconst148*x7446);
IkReal x7452=((1.0)*gconst149*x7445);
evalcond[0]=(((r22*x7446))+((r21*x7449))+(((-1.0)*r20*x7452)));
evalcond[1]=((((-1.0)*r10*x7452))+((r12*x7446))+cj0+((r11*x7449)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7452))+((r01*x7449))+((r02*x7446)));
evalcond[3]=(((r20*x7450))+(((-1.0)*sj1*sj2))+((r22*x7445))+((cj1*cj2))+(((-1.0)*r21*x7451)));
evalcond[4]=((((-1.0)*r01*x7451))+((r00*x7450))+((cj0*x7448))+((cj0*x7447))+((r02*x7445)));
evalcond[5]=(((r12*x7445))+((sj0*x7448))+((sj0*x7447))+((r10*x7450))+(((-1.0)*r11*x7451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7453=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7453.valid){
continue;
}
CheckValue<IkReal> x7454 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7453.value)))+(x7454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7455=IKcos(j4);
IkReal x7456=IKsin(j4);
IkReal x7457=(cj2*sj1);
IkReal x7458=(cj1*sj2);
IkReal x7459=(gconst148*x7455);
IkReal x7460=(gconst149*x7456);
IkReal x7461=((1.0)*gconst148*x7456);
IkReal x7462=((1.0)*gconst149*x7455);
evalcond[0]=(((r22*x7456))+(((-1.0)*r20*x7462))+((r21*x7459)));
evalcond[1]=(((r12*x7456))+cj0+((r11*x7459))+(((-1.0)*r10*x7462)));
evalcond[2]=(((r02*x7456))+(((-1.0)*sj0))+((r01*x7459))+(((-1.0)*r00*x7462)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7455))+(((-1.0)*r21*x7461))+((r20*x7460))+((cj1*cj2)));
evalcond[4]=(((r02*x7455))+((cj0*x7457))+((cj0*x7458))+((r00*x7460))+(((-1.0)*r01*x7461)));
evalcond[5]=(((r10*x7460))+((r12*x7455))+((sj0*x7457))+((sj0*x7458))+(((-1.0)*r11*x7461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7463=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7463;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7464=((1.0)*cj5);
IkReal x7465=((((-1.0)*r21*x7464))+(((-1.0)*r20*sj5)));
j4eval[0]=x7465;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7464))))));
j4eval[2]=IKsign(x7465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7466=cj5*cj5;
IkReal x7467=r01*r01;
IkReal x7468=(cj5*r00);
IkReal x7469=(r01*sj5);
IkReal x7470=(((x7466*(r00*r00)))+(((-1.0)*x7466*x7467))+(r02*r02)+x7467+(((-2.0)*x7468*x7469)));
j4eval[0]=x7470;
j4eval[1]=IKsign(x7470);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7468))+x7469))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7471=cj5*cj5;
IkReal x7472=r01*r01;
IkReal x7473=(r01*sj5);
IkReal x7474=(cj5*r00);
CheckValue<IkReal> x7475 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7474))+x7473)),IKFAST_ATAN2_MAGTHRESH);
if(!x7475.valid){
continue;
}
CheckValue<IkReal> x7476=IKPowWithIntegerCheck(IKsign((((x7471*(r00*r00)))+(((-2.0)*x7473*x7474))+(((-1.0)*x7471*x7472))+(r02*r02)+x7472)),-1);
if(!x7476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7475.value)+(((1.5707963267949)*(x7476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7477=IKcos(j4);
IkReal x7478=IKsin(j4);
IkReal x7479=(cj5*r00);
IkReal x7480=((1.0)*x7477);
IkReal x7481=(sj5*x7477);
IkReal x7482=(cj5*x7478);
IkReal x7483=((1.0)*sj5*x7478);
evalcond[0]=((((-1.0)*cj5*r20*x7480))+((r22*x7478))+((r21*x7481)));
evalcond[1]=((((-1.0)*cj5*r10*x7480))+((r11*x7481))+((r12*x7478)));
evalcond[2]=(((r02*x7477))+(((-1.0)*r01*x7483))+((x7478*x7479)));
evalcond[3]=((-1.0)+((r02*x7478))+(((-1.0)*x7479*x7480))+((r01*x7481)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x7482))+(((-1.0)*r11*x7483))+((r12*x7477)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x7477))+((r20*x7482))+(((-1.0)*r21*x7483))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7484=((1.0)*cj5);
CheckValue<IkReal> x7485 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x7484)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7484))+(((-1.0)*r20*sj5)))),-1);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7485.value)+(((1.5707963267949)*(x7486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKcos(j4);
IkReal x7488=IKsin(j4);
IkReal x7489=(cj5*r00);
IkReal x7490=((1.0)*x7487);
IkReal x7491=(sj5*x7487);
IkReal x7492=(cj5*x7488);
IkReal x7493=((1.0)*sj5*x7488);
evalcond[0]=(((r22*x7488))+(((-1.0)*cj5*r20*x7490))+((r21*x7491)));
evalcond[1]=((((-1.0)*cj5*r10*x7490))+((r11*x7491))+((r12*x7488)));
evalcond[2]=((((-1.0)*r01*x7493))+((r02*x7487))+((x7488*x7489)));
evalcond[3]=((-1.0)+((r01*x7491))+(((-1.0)*x7489*x7490))+((r02*x7488)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x7487))+((r10*x7492))+(((-1.0)*r11*x7493)));
evalcond[5]=(((r22*x7487))+(((-1.0)*sj1*sj2))+((r20*x7492))+(((-1.0)*r21*x7493))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7494 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7494.valid){
continue;
}
CheckValue<IkReal> x7495=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7494.value)+(((1.5707963267949)*(x7495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7496=IKcos(j4);
IkReal x7497=IKsin(j4);
IkReal x7498=(cj5*r00);
IkReal x7499=((1.0)*x7496);
IkReal x7500=(sj5*x7496);
IkReal x7501=(cj5*x7497);
IkReal x7502=((1.0)*sj5*x7497);
evalcond[0]=(((r22*x7497))+(((-1.0)*cj5*r20*x7499))+((r21*x7500)));
evalcond[1]=((((-1.0)*cj5*r10*x7499))+((r11*x7500))+((r12*x7497)));
evalcond[2]=((((-1.0)*r01*x7502))+((r02*x7496))+((x7497*x7498)));
evalcond[3]=((-1.0)+(((-1.0)*x7498*x7499))+((r02*x7497))+((r01*x7500)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x7496))+((r10*x7501))+(((-1.0)*r11*x7502)));
evalcond[5]=(((r22*x7496))+(((-1.0)*r21*x7502))+((r20*x7501))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7503=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7503;
j4eval[1]=IKsign(x7503);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7504=((1.0)*cj5);
IkReal x7505=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7504)));
j4eval[0]=x7505;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7504))))));
j4eval[2]=IKsign(x7505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7506=cj5*cj5;
IkReal x7507=r01*r01;
IkReal x7508=(r01*sj5);
IkReal x7509=(cj5*r00);
IkReal x7510=((((-1.0)*x7506*(r00*r00)))+((x7506*x7507))+(((-1.0)*(r02*r02)))+(((2.0)*x7508*x7509))+(((-1.0)*x7507)));
j4eval[0]=x7510;
j4eval[1]=IKsign(x7510);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7509))+x7508))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7511=cj5*cj5;
IkReal x7512=r01*r01;
IkReal x7513=(r01*sj5);
IkReal x7514=(cj5*r00);
CheckValue<IkReal> x7515 = IKatan2WithCheck(IkReal(r02),IkReal((x7513+(((-1.0)*x7514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7515.valid){
continue;
}
CheckValue<IkReal> x7516=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x7511*x7512))+(((2.0)*x7513*x7514))+(((-1.0)*x7512))+(((-1.0)*x7511*(r00*r00))))),-1);
if(!x7516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7515.value)+(((1.5707963267949)*(x7516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7517=IKcos(j4);
IkReal x7518=IKsin(j4);
IkReal x7519=(cj5*r00);
IkReal x7520=((1.0)*sj2);
IkReal x7521=((1.0)*x7517);
IkReal x7522=(sj5*x7517);
IkReal x7523=(cj5*x7518);
IkReal x7524=((1.0)*sj5*x7518);
evalcond[0]=(((r21*x7522))+(((-1.0)*cj5*r20*x7521))+((r22*x7518)));
evalcond[1]=(((r11*x7522))+((r12*x7518))+(((-1.0)*cj5*r10*x7521)));
evalcond[2]=((((-1.0)*r01*x7524))+((r02*x7517))+((x7518*x7519)));
evalcond[3]=((1.0)+((r01*x7522))+((r02*x7518))+(((-1.0)*x7519*x7521)));
evalcond[4]=(((r20*x7523))+(((-1.0)*r21*x7524))+(((-1.0)*sj1*x7520))+((r22*x7517))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7520))+(((-1.0)*cj2*sj1))+((r12*x7517))+((r10*x7523))+(((-1.0)*r11*x7524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj5);
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7525)))),-1);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7525)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7526.value)))+(x7527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKcos(j4);
IkReal x7529=IKsin(j4);
IkReal x7530=(cj5*r00);
IkReal x7531=((1.0)*sj2);
IkReal x7532=((1.0)*x7528);
IkReal x7533=(sj5*x7528);
IkReal x7534=(cj5*x7529);
IkReal x7535=((1.0)*sj5*x7529);
evalcond[0]=(((r21*x7533))+((r22*x7529))+(((-1.0)*cj5*r20*x7532)));
evalcond[1]=(((r12*x7529))+((r11*x7533))+(((-1.0)*cj5*r10*x7532)));
evalcond[2]=(((r02*x7528))+(((-1.0)*r01*x7535))+((x7529*x7530)));
evalcond[3]=((1.0)+((r02*x7529))+(((-1.0)*x7530*x7532))+((r01*x7533)));
evalcond[4]=((((-1.0)*sj1*x7531))+((r22*x7528))+((r20*x7534))+((cj1*cj2))+(((-1.0)*r21*x7535)));
evalcond[5]=(((r10*x7534))+(((-1.0)*r11*x7535))+((r12*x7528))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x7531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7536=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7536.valid){
continue;
}
CheckValue<IkReal> x7537 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7536.value)))+(x7537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7538=IKcos(j4);
IkReal x7539=IKsin(j4);
IkReal x7540=(cj5*r00);
IkReal x7541=((1.0)*sj2);
IkReal x7542=((1.0)*x7538);
IkReal x7543=(sj5*x7538);
IkReal x7544=(cj5*x7539);
IkReal x7545=((1.0)*sj5*x7539);
evalcond[0]=(((r22*x7539))+((r21*x7543))+(((-1.0)*cj5*r20*x7542)));
evalcond[1]=((((-1.0)*cj5*r10*x7542))+((r11*x7543))+((r12*x7539)));
evalcond[2]=((((-1.0)*r01*x7545))+((x7539*x7540))+((r02*x7538)));
evalcond[3]=((1.0)+(((-1.0)*x7540*x7542))+((r01*x7543))+((r02*x7539)));
evalcond[4]=(((r20*x7544))+((r22*x7538))+(((-1.0)*sj1*x7541))+((cj1*cj2))+(((-1.0)*r21*x7545)));
evalcond[5]=(((r10*x7544))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x7545))+(((-1.0)*cj1*x7541))+((r12*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7546=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7546);
rxp1_1=(px*r21);
rxp1_2=(r11*x7546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7547=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7547);
rxp1_1=(px*r21);
rxp1_2=(r11*x7547);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7548=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7548);
rxp1_1=(px*r21);
rxp1_2=(r11*x7548);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7551=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7551.valid){
continue;
}
IkReal x7549=x7551.value;
IkReal x7550=((1.0)*sj0*x7549);
sj4array[0]=((((-1.0)*cj2*sj1*x7550))+(((-1.0)*cj1*sj2*x7550)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7552=IKcos(j4);
IkReal x7553=IKsin(j4);
IkReal x7554=(r21*sj5);
IkReal x7555=((1.0)*cj5*x7552);
evalcond[0]=(r02*x7552);
evalcond[1]=((((-1.0)*sj0))+((r02*x7553)));
evalcond[2]=(((x7552*x7554))+(((-1.0)*r20*x7555)));
evalcond[3]=((((-1.0)*r10*x7555))+((r11*sj5*x7552)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x7553*x7554))+((cj1*cj2))+((cj5*r20*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7557=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7557.valid){
continue;
}
IkReal x7556=x7557.value;
sj4array[0]=((((-1.0)*cj1*cj2*x7556))+((sj1*sj2*x7556)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7558=IKcos(j4);
IkReal x7559=IKsin(j4);
IkReal x7560=(r11*sj5);
IkReal x7561=((1.0)*cj5*x7558);
evalcond[0]=(r02*x7558);
evalcond[1]=((((-1.0)*sj0))+((r02*x7559)));
evalcond[2]=((((-1.0)*r20*x7561))+((r21*sj5*x7558)));
evalcond[3]=((((-1.0)*r10*x7561))+((x7558*x7560)));
evalcond[4]=(((cj5*r10*x7559))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x7559*x7560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7562=IKPowWithIntegerCheck(r02,-1);
if(!x7562.valid){
continue;
}
sj4array[0]=(sj0*(x7562.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7563=IKcos(j4);
IkReal x7564=IKsin(j4);
IkReal x7565=(sj5*x7563);
IkReal x7566=(cj5*x7564);
IkReal x7567=((1.0)*sj5*x7564);
IkReal x7568=((1.0)*cj5*x7563);
evalcond[0]=(r02*x7563);
evalcond[1]=((((-1.0)*r20*x7568))+((r21*x7565)));
evalcond[2]=((((-1.0)*r10*x7568))+((r11*x7565)));
evalcond[3]=((((-1.0)*r21*x7567))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x7566)));
evalcond[4]=(((r10*x7566))+(((-1.0)*r11*x7567))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7569=((1.0)*sj0);
IkReal x7570=((1.0)*cj0);
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7569))+(((-1.0)*cj5*r00*x7570)))),IkReal(((((-1.0)*r12*x7569))+(((-1.0)*r02*x7570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
CheckValue<IkReal> x7572=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7571.value)+(((1.5707963267949)*(x7572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7573=IKcos(j4);
IkReal x7574=IKsin(j4);
IkReal x7575=(cj5*r00);
IkReal x7576=(cj2*sj1);
IkReal x7577=(cj1*sj2);
IkReal x7578=((1.0)*x7573);
IkReal x7579=(sj5*x7573);
IkReal x7580=(cj5*x7574);
IkReal x7581=((1.0)*sj5*x7574);
evalcond[0]=((((-1.0)*cj5*r20*x7578))+((r22*x7574))+((r21*x7579)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x7578))+((r12*x7574))+((r11*x7579)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7579))+((r02*x7574))+(((-1.0)*x7575*x7578)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7573))+((cj1*cj2))+(((-1.0)*r21*x7581))+((r20*x7580)));
evalcond[4]=((((-1.0)*r01*x7581))+((r02*x7573))+((x7574*x7575))+((cj0*x7577))+((cj0*x7576)));
evalcond[5]=(((r12*x7573))+((r10*x7580))+(((-1.0)*r11*x7581))+((sj0*x7577))+((sj0*x7576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7582 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7582.valid){
continue;
}
CheckValue<IkReal> x7583=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7582.value)+(((1.5707963267949)*(x7583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7584=IKcos(j4);
IkReal x7585=IKsin(j4);
IkReal x7586=(cj5*r00);
IkReal x7587=(cj2*sj1);
IkReal x7588=(cj1*sj2);
IkReal x7589=((1.0)*x7584);
IkReal x7590=(sj5*x7584);
IkReal x7591=(cj5*x7585);
IkReal x7592=((1.0)*sj5*x7585);
evalcond[0]=(((r21*x7590))+((r22*x7585))+(((-1.0)*cj5*r20*x7589)));
evalcond[1]=(((r12*x7585))+cj0+((r11*x7590))+(((-1.0)*cj5*r10*x7589)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7586*x7589))+((r02*x7585))+((r01*x7590)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7591))+((r22*x7584))+((cj1*cj2))+(((-1.0)*r21*x7592)));
evalcond[4]=(((r02*x7584))+((x7585*x7586))+((cj0*x7587))+((cj0*x7588))+(((-1.0)*r01*x7592)));
evalcond[5]=(((r12*x7584))+(((-1.0)*r11*x7592))+((r10*x7591))+((sj0*x7588))+((sj0*x7587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7593 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7593.valid){
continue;
}
CheckValue<IkReal> x7594=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7593.value)+(((1.5707963267949)*(x7594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7595=IKcos(j4);
IkReal x7596=IKsin(j4);
IkReal x7597=(cj5*r00);
IkReal x7598=(cj2*sj1);
IkReal x7599=(cj1*sj2);
IkReal x7600=((1.0)*x7595);
IkReal x7601=(sj5*x7595);
IkReal x7602=(cj5*x7596);
IkReal x7603=((1.0)*sj5*x7596);
evalcond[0]=(((r21*x7601))+(((-1.0)*cj5*r20*x7600))+((r22*x7596)));
evalcond[1]=(((r11*x7601))+cj0+(((-1.0)*cj5*r10*x7600))+((r12*x7596)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7597*x7600))+((r01*x7601))+((r02*x7596)));
evalcond[3]=(((r20*x7602))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x7595))+(((-1.0)*r21*x7603)));
evalcond[4]=(((r02*x7595))+(((-1.0)*r01*x7603))+((cj0*x7598))+((cj0*x7599))+((x7596*x7597)));
evalcond[5]=((((-1.0)*r11*x7603))+((sj0*x7598))+((sj0*x7599))+((r10*x7602))+((r12*x7595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7604=cj2*cj2;
IkReal x7605=cj1*cj1;
IkReal x7606=((2400.0)*py);
IkReal x7607=(cj2*sj1);
IkReal x7608=(cj1*sj2);
IkReal x7609=(cj5*r01);
IkReal x7610=((251.75)*sj1);
IkReal x7611=(r00*sj5);
IkReal x7612=(cj5*r11);
IkReal x7613=(r10*sj5);
IkReal x7614=((1272.0)*cj2);
IkReal x7615=((2650.0)*sj1);
IkReal x7616=((2400.0)*px);
CheckValue<IkReal> x7617=IKPowWithIntegerCheck(IKsign(((823.25)+(((576.0)*x7604))+(((1152.0)*x7607*x7608))+(((-1.0)*x7605*x7614))+(((-1152.0)*x7604*x7605))+x7614+(((-126.25)*x7605))+(((1272.0)*sj1*x7608)))),-1);
if(!x7617.valid){
continue;
}
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal((((x7606*x7608))+((x7606*x7607))+(((-1100.0)*px))+(((228.0)*x7608*x7613))+(((228.0)*x7608*x7612))+(((-104.5)*x7609))+(((-104.5)*x7611))+((py*x7615))+(((228.0)*x7607*x7612))+(((228.0)*x7607*x7613))+((x7610*x7613))+((x7610*x7612)))),IkReal((((px*x7615))+(((228.0)*x7607*x7609))+(((228.0)*x7608*x7611))+(((228.0)*x7608*x7609))+((x7608*x7616))+(((1100.0)*py))+(((104.5)*x7613))+(((104.5)*x7612))+(((228.0)*x7607*x7611))+((x7607*x7616))+((x7609*x7610))+((x7610*x7611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7617.value)))+(x7618.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7619=IKcos(j0);
IkReal x7620=IKsin(j0);
IkReal x7621=((0.095)*sj5);
IkReal x7622=((0.24)*cj2);
IkReal x7623=((0.095)*cj5);
IkReal x7624=(sj1*x7620);
IkReal x7625=(sj1*x7619);
IkReal x7626=((0.24)*cj1*sj2);
evalcond[0]=((((-1.0)*r00*x7621))+(((-0.11)*x7620))+(((-1.0)*r01*x7623))+(((0.265)*x7625))+(((-1.0)*px))+((x7622*x7625))+((x7619*x7626)));
evalcond[1]=(((x7620*x7626))+(((-1.0)*r11*x7623))+(((0.265)*x7624))+(((-1.0)*py))+((x7622*x7624))+(((-1.0)*r10*x7621))+(((0.11)*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7627=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7627;
j4eval[1]=IKsign(x7627);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7628=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7628;
j4eval[1]=IKsign(x7628);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7629=((1.0)*sj0);
IkReal x7630=((1.0)*cj0);
IkReal x7631=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7631;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7630))+(((-1.0)*cj5*r10*x7629))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r12*x7629))+(((-1.0)*r02*x7630))))));
j4eval[2]=IKsign(x7631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7632=((-1.0)*r20);
IkReal x7634 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7634)==0){
continue;
}
IkReal x7633=pow(x7634,-0.5);
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7632),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7635.value));
IkReal gconst1=(r21*x7633);
IkReal gconst2=(x7632*x7633);
CheckValue<IkReal> x7636 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7637=((-1.0)*r20);
IkReal x7638=x7633;
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7637),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
IkReal x7639=((-1.0)*(x7640.value));
sj5=gconst1;
cj5=gconst2;
j5=x7639;
IkReal gconst0=x7639;
IkReal gconst1=(r21*x7638);
IkReal gconst2=(x7637*x7638);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7641=((-1.0)*r20);
IkReal x7642=x7633;
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7641),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal x7643=((-1.0)*(x7644.value));
sj5=gconst1;
cj5=gconst2;
j5=x7643;
IkReal gconst0=x7643;
IkReal gconst1=(r21*x7642);
IkReal gconst2=(x7641*x7642);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7645=((-1.0)*r20);
IkReal x7646=x7633;
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7645),IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
IkReal x7647=((-1.0)*(x7648.value));
sj5=gconst1;
cj5=gconst2;
j5=x7647;
IkReal gconst0=x7647;
IkReal gconst1=(r21*x7646);
IkReal gconst2=(x7645*x7646);
IkReal x7649=r22*r22;
CheckValue<IkReal> x7653=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7649))),-1);
if(!x7653.valid){
continue;
}
IkReal x7650=x7653.value;
IkReal x7651=(cj3*x7650);
IkReal x7652=((((2.0)*x7651*(r20*r20)*(r21*r21)))+((cj3*x7649))+((x7651*(r20*r20*r20*r20)))+((x7651*(r21*r21*r21*r21))));
j4eval[0]=x7652;
j4eval[1]=IKsign(x7652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7654=((-1.0)*r20);
IkReal x7655=x7633;
CheckValue<IkReal> x7657 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7654),IKFAST_ATAN2_MAGTHRESH);
if(!x7657.valid){
continue;
}
IkReal x7656=((-1.0)*(x7657.value));
sj5=gconst1;
cj5=gconst2;
j5=x7656;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7656;
IkReal gconst1=(r21*x7655);
IkReal gconst2=(x7654*x7655);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7658=((-1.0)*r20);
IkReal x7659=x7633;
CheckValue<IkReal> x7661 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7658),IKFAST_ATAN2_MAGTHRESH);
if(!x7661.valid){
continue;
}
IkReal x7660=((-1.0)*(x7661.value));
sj5=gconst1;
cj5=gconst2;
j5=x7660;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7660;
IkReal gconst1=(r21*x7659);
IkReal gconst2=(x7658*x7659);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7662=((-1.0)*r20);
IkReal x7663=x7633;
CheckValue<IkReal> x7665 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7662),IKFAST_ATAN2_MAGTHRESH);
if(!x7665.valid){
continue;
}
IkReal x7664=((-1.0)*(x7665.value));
sj5=gconst1;
cj5=gconst2;
j5=x7664;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7664;
IkReal gconst1=(r21*x7663);
IkReal gconst2=(x7662*x7663);
IkReal x7666=((1.0)*(r22*r22));
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7666))),-1);
if(!x7670.valid){
continue;
}
IkReal x7667=x7670.value;
IkReal x7668=((1.0)*x7667);
IkReal x7669=((((-1.0)*x7668*(r21*r21*r21*r21)))+(((-1.0)*x7666))+(((-2.0)*x7667*(r20*r20)*(r21*r21)))+(((-1.0)*x7668*(r20*r20*r20*r20))));
j4eval[0]=x7669;
j4eval[1]=IKsign(x7669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7671=((-1.0)*r20);
IkReal x7672=x7633;
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7671),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
IkReal x7673=((-1.0)*(x7674.value));
sj5=gconst1;
cj5=gconst2;
j5=x7673;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7673;
IkReal gconst1=(r21*x7672);
IkReal gconst2=(x7671*x7672);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7675=((-1.0)*r20);
IkReal x7676=x7633;
CheckValue<IkReal> x7678 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7675),IKFAST_ATAN2_MAGTHRESH);
if(!x7678.valid){
continue;
}
IkReal x7677=((-1.0)*(x7678.value));
sj5=gconst1;
cj5=gconst2;
j5=x7677;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7677;
IkReal gconst1=(r21*x7676);
IkReal gconst2=(x7675*x7676);
IkReal x7679=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(x7679,-1);
if(!x7683.valid){
continue;
}
IkReal x7680=x7683.value;
IkReal x7681=((1.0)*x7680);
IkReal x7682=((((-1.0)*(r12*r12)))+(((-1.0)*x7681*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x7680))+(((-1.0)*x7681*(r11*r11)*(r21*r21))));
j4eval[0]=x7682;
j4eval[1]=IKsign(x7682);
j4eval[2]=r12;
j4eval[3]=x7679;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7684=((-1.0)*r20);
IkReal x7685=x7633;
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7684),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
IkReal x7686=((-1.0)*(x7687.value));
sj5=gconst1;
cj5=gconst2;
j5=x7686;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7686;
IkReal gconst1=(r21*x7685);
IkReal gconst2=(x7684*x7685);
IkReal x7688=((1.0)*(r22*r22));
CheckValue<IkReal> x7692=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7688))),-1);
if(!x7692.valid){
continue;
}
IkReal x7689=x7692.value;
IkReal x7690=((1.0)*x7689);
IkReal x7691=((((-1.0)*x7688))+(((-1.0)*x7690*(r21*r21*r21*r21)))+(((-2.0)*x7689*(r20*r20)*(r21*r21)))+(((-1.0)*x7690*(r20*r20*r20*r20))));
j4eval[0]=x7691;
j4eval[1]=IKsign(x7691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=(sj1*sj2);
IkReal x7694=(gconst2*r20);
IkReal x7695=(gconst1*r21);
IkReal x7696=((1.0)*cj1*cj2);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7695*x7695)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7694*x7694)))+(((2.0)*x7694*x7695)))),-1);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal((((x7693*x7694))+(((-1.0)*x7693*x7695))+(((-1.0)*x7694*x7696))+((cj1*cj2*x7695)))),IkReal(((((-1.0)*r22*x7696))+((r22*x7693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7697.value)))+(x7698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7699=IKcos(j4);
IkReal x7700=IKsin(j4);
IkReal x7701=((1.0)*x7699);
IkReal x7702=(gconst1*x7699);
IkReal x7703=(gconst1*x7700);
IkReal x7704=((1.0)*gconst2*x7700);
evalcond[0]=(((r21*x7702))+(((-1.0)*gconst2*r20*x7701))+((r22*x7700)));
evalcond[1]=(((r02*x7700))+(((-1.0)*gconst2*r00*x7701))+((r01*x7702)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x7701))+((r12*x7700))+((r11*x7702)));
evalcond[3]=(((r11*x7703))+(((-1.0)*r12*x7701))+(((-1.0)*r10*x7704)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r00*x7704))+((r01*x7703))+(((-1.0)*r02*x7701)));
evalcond[5]=(((r21*x7703))+(((-1.0)*r22*x7701))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7704))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7705=(gconst1*r11);
IkReal x7706=(gconst2*r10);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7706))+x7705)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
CheckValue<IkReal> x7708=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7706*x7706)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7705*x7705)))+(((2.0)*x7705*x7706)))),-1);
if(!x7708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7707.value)+(((1.5707963267949)*(x7708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7709=IKcos(j4);
IkReal x7710=IKsin(j4);
IkReal x7711=((1.0)*x7709);
IkReal x7712=(gconst1*x7709);
IkReal x7713=(gconst1*x7710);
IkReal x7714=((1.0)*gconst2*x7710);
evalcond[0]=((((-1.0)*gconst2*r20*x7711))+((r21*x7712))+((r22*x7710)));
evalcond[1]=(((r02*x7710))+(((-1.0)*gconst2*r00*x7711))+((r01*x7712)));
evalcond[2]=((1.0)+((r11*x7712))+(((-1.0)*gconst2*r10*x7711))+((r12*x7710)));
evalcond[3]=(((r11*x7713))+(((-1.0)*r12*x7711))+(((-1.0)*r10*x7714)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r00*x7714))+(((-1.0)*r02*x7711))+((r01*x7713)));
evalcond[5]=((((-1.0)*r22*x7711))+((r21*x7713))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7714))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7715=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7715.valid){
continue;
}
CheckValue<IkReal> x7716 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7715.value)))+(x7716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7717=IKcos(j4);
IkReal x7718=IKsin(j4);
IkReal x7719=((1.0)*x7717);
IkReal x7720=(gconst1*x7717);
IkReal x7721=(gconst1*x7718);
IkReal x7722=((1.0)*gconst2*x7718);
evalcond[0]=((((-1.0)*gconst2*r20*x7719))+((r21*x7720))+((r22*x7718)));
evalcond[1]=(((r02*x7718))+((r01*x7720))+(((-1.0)*gconst2*r00*x7719)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x7719))+((r12*x7718))+((r11*x7720)));
evalcond[3]=((((-1.0)*r12*x7719))+((r11*x7721))+(((-1.0)*r10*x7722)));
evalcond[4]=(((cj2*sj1))+((r01*x7721))+((cj1*sj2))+(((-1.0)*r02*x7719))+(((-1.0)*r00*x7722)));
evalcond[5]=((((-1.0)*r22*x7719))+(((-1.0)*sj1*sj2))+((r21*x7721))+((cj1*cj2))+(((-1.0)*r20*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7723=((-1.0)*r20);
IkReal x7724=x7633;
CheckValue<IkReal> x7726 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7723),IKFAST_ATAN2_MAGTHRESH);
if(!x7726.valid){
continue;
}
IkReal x7725=((-1.0)*(x7726.value));
sj5=gconst1;
cj5=gconst2;
j5=x7725;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7725;
IkReal gconst1=(r21*x7724);
IkReal gconst2=(x7723*x7724);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7727=((-1.0)*r20);
IkReal x7728=x7633;
CheckValue<IkReal> x7730 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7727),IKFAST_ATAN2_MAGTHRESH);
if(!x7730.valid){
continue;
}
IkReal x7729=((-1.0)*(x7730.value));
sj5=gconst1;
cj5=gconst2;
j5=x7729;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7729;
IkReal gconst1=(r21*x7728);
IkReal gconst2=(x7727*x7728);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7731=((-1.0)*r20);
IkReal x7732=x7633;
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7731),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
IkReal x7733=((-1.0)*(x7734.value));
sj5=gconst1;
cj5=gconst2;
j5=x7733;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7733;
IkReal gconst1=(r21*x7732);
IkReal gconst2=(x7731*x7732);
IkReal x7735=r22*r22;
IkReal x7736=(cj1*sj2);
IkReal x7737=(cj2*sj1);
IkReal x7738=((1.0)+(((-1.0)*x7735)));
CheckValue<IkReal> x7745=IKPowWithIntegerCheck(x7738,-1);
if(!x7745.valid){
continue;
}
IkReal x7739=x7745.value;
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(((-1.0)+x7735),-1);
if(!x7746.valid){
continue;
}
IkReal x7740=x7746.value;
IkReal x7741=((1.0)*x7739);
if((x7738) < -0.00001)
continue;
IkReal x7742=IKsqrt(x7738);
IkReal x7743=((1.0)*r02*r22*x7740*x7742);
IkReal x7744=((((-2.0)*r00*r01*r20*r21*x7739))+(((-1.0)*(r02*r02)))+(((-1.0)*x7741*(r01*r01)*(r21*r21)))+(((-1.0)*x7741*(r00*r00)*(r20*r20))));
j4eval[0]=x7744;
j4eval[1]=((IKabs(((((-1.0)*x7737*x7743))+(((-1.0)*x7736*x7743)))))+(IKabs((((r02*x7737))+((r02*x7736))))));
j4eval[2]=IKsign(x7744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7747=(cj2*sj1);
IkReal x7748=(cj1*sj2);
IkReal x7749=(gconst2*r00);
IkReal x7750=((1.0)*gconst1*r01);
CheckValue<IkReal> x7751 = IKatan2WithCheck(IkReal((((x7748*x7749))+(((-1.0)*x7747*x7750))+(((-1.0)*x7748*x7750))+((x7747*x7749)))),IkReal((((r02*x7747))+((r02*x7748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7751.valid){
continue;
}
CheckValue<IkReal> x7752=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst1*r01*x7749))+(((-1.0)*(r02*r02)))+(((-1.0)*gconst1*r01*x7750))+(((-1.0)*(x7749*x7749))))),-1);
if(!x7752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7751.value)+(((1.5707963267949)*(x7752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7753=IKcos(j4);
IkReal x7754=IKsin(j4);
IkReal x7755=((1.0)*sj1);
IkReal x7756=((1.0)*x7753);
IkReal x7757=(gconst1*x7753);
IkReal x7758=(gconst1*x7754);
IkReal x7759=((1.0)*gconst2*x7754);
evalcond[0]=((((-1.0)*gconst2*r20*x7756))+((r21*x7757))+((r22*x7754)));
evalcond[1]=(((r01*x7757))+((r02*x7754))+(((-1.0)*gconst2*r00*x7756)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x7756))+((r11*x7757))+((r12*x7754)));
evalcond[3]=((((-1.0)*r10*x7759))+(((-1.0)*r12*x7756))+((r11*x7758)));
evalcond[4]=((((-1.0)*r22*x7756))+(((-1.0)*sj2*x7755))+((cj1*cj2))+((r21*x7758))+(((-1.0)*r20*x7759)));
evalcond[5]=(((r01*x7758))+(((-1.0)*r02*x7756))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7755))+(((-1.0)*r00*x7759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7760=(gconst2*r10);
IkReal x7761=(gconst1*r11);
CheckValue<IkReal> x7762=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7760*x7760)+(((-2.0)*x7760*x7761))+(x7761*x7761))),-1);
if(!x7762.valid){
continue;
}
CheckValue<IkReal> x7763 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7760))+x7761)),IKFAST_ATAN2_MAGTHRESH);
if(!x7763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7762.value)))+(x7763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7764=IKcos(j4);
IkReal x7765=IKsin(j4);
IkReal x7766=((1.0)*sj1);
IkReal x7767=((1.0)*x7764);
IkReal x7768=(gconst1*x7764);
IkReal x7769=(gconst1*x7765);
IkReal x7770=((1.0)*gconst2*x7765);
evalcond[0]=(((r22*x7765))+((r21*x7768))+(((-1.0)*gconst2*r20*x7767)));
evalcond[1]=((((-1.0)*gconst2*r00*x7767))+((r02*x7765))+((r01*x7768)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x7767))+((r12*x7765))+((r11*x7768)));
evalcond[3]=((((-1.0)*r10*x7770))+(((-1.0)*r12*x7767))+((r11*x7769)));
evalcond[4]=((((-1.0)*r22*x7767))+(((-1.0)*sj2*x7766))+((cj1*cj2))+(((-1.0)*r20*x7770))+((r21*x7769)));
evalcond[5]=((((-1.0)*r02*x7767))+(((-1.0)*r00*x7770))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7766))+((r01*x7769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7771=((1.0)*gconst2);
CheckValue<IkReal> x7772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7771)))),-1);
if(!x7772.valid){
continue;
}
CheckValue<IkReal> x7773 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7771)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7772.value)))+(x7773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7774=IKcos(j4);
IkReal x7775=IKsin(j4);
IkReal x7776=((1.0)*sj1);
IkReal x7777=((1.0)*x7774);
IkReal x7778=(gconst1*x7774);
IkReal x7779=(gconst1*x7775);
IkReal x7780=((1.0)*gconst2*x7775);
evalcond[0]=(((r22*x7775))+((r21*x7778))+(((-1.0)*gconst2*r20*x7777)));
evalcond[1]=((((-1.0)*gconst2*r00*x7777))+((r02*x7775))+((r01*x7778)));
evalcond[2]=((-1.0)+((r11*x7778))+((r12*x7775))+(((-1.0)*gconst2*r10*x7777)));
evalcond[3]=(((r11*x7779))+(((-1.0)*r10*x7780))+(((-1.0)*r12*x7777)));
evalcond[4]=((((-1.0)*r22*x7777))+(((-1.0)*r20*x7780))+(((-1.0)*sj2*x7776))+((cj1*cj2))+((r21*x7779)));
evalcond[5]=((((-1.0)*r02*x7777))+(((-1.0)*r00*x7780))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x7776))+((r01*x7779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7781=((-1.0)*r20);
IkReal x7782=x7633;
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7781),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
IkReal x7783=((-1.0)*(x7784.value));
sj5=gconst1;
cj5=gconst2;
j5=x7783;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7783;
IkReal gconst1=(r21*x7782);
IkReal gconst2=(x7781*x7782);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7785=((-1.0)*r20);
IkReal x7786=x7633;
CheckValue<IkReal> x7788 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7785),IKFAST_ATAN2_MAGTHRESH);
if(!x7788.valid){
continue;
}
IkReal x7787=((-1.0)*(x7788.value));
sj5=gconst1;
cj5=gconst2;
j5=x7787;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7787;
IkReal gconst1=(r21*x7786);
IkReal gconst2=(x7785*x7786);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7789=((-1.0)*r20);
IkReal x7790=x7633;
CheckValue<IkReal> x7792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7789),IKFAST_ATAN2_MAGTHRESH);
if(!x7792.valid){
continue;
}
IkReal x7791=((-1.0)*(x7792.value));
sj5=gconst1;
cj5=gconst2;
j5=x7791;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7791;
IkReal gconst1=(r21*x7790);
IkReal gconst2=(x7789*x7790);
IkReal x7793=((1.0)*(r22*r22));
CheckValue<IkReal> x7797=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7793))),-1);
if(!x7797.valid){
continue;
}
IkReal x7794=x7797.value;
IkReal x7795=((1.0)*x7794);
IkReal x7796=((((-1.0)*x7795*(r20*r20*r20*r20)))+(((-2.0)*x7794*(r20*r20)*(r21*r21)))+(((-1.0)*x7795*(r21*r21*r21*r21)))+(((-1.0)*x7793)));
j4eval[0]=x7796;
j4eval[1]=IKsign(x7796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7798=(sj1*sj2);
IkReal x7799=(gconst2*r20);
IkReal x7800=(gconst1*r21);
IkReal x7801=((1.0)*cj1*cj2);
CheckValue<IkReal> x7802=IKPowWithIntegerCheck(IKsign(((((2.0)*x7799*x7800))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7799*x7799)))+(((-1.0)*(x7800*x7800))))),-1);
if(!x7802.valid){
continue;
}
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal((((x7798*x7799))+((cj1*cj2*x7800))+(((-1.0)*x7798*x7800))+(((-1.0)*x7799*x7801)))),IkReal(((((-1.0)*r22*x7801))+((r22*x7798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7802.value)))+(x7803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7804=IKcos(j4);
IkReal x7805=IKsin(j4);
IkReal x7806=((1.0)*x7804);
IkReal x7807=(gconst1*x7804);
IkReal x7808=(gconst1*x7805);
IkReal x7809=((1.0)*gconst2*x7805);
evalcond[0]=(((r21*x7807))+((r22*x7805))+(((-1.0)*gconst2*r20*x7806)));
evalcond[1]=(((r11*x7807))+(((-1.0)*gconst2*r10*x7806))+((r12*x7805)));
evalcond[2]=((-1.0)+((r01*x7807))+((r02*x7805))+(((-1.0)*gconst2*r00*x7806)));
evalcond[3]=((((-1.0)*r02*x7806))+((r01*x7808))+(((-1.0)*r00*x7809)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x7809))+((r11*x7808))+(((-1.0)*r12*x7806))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r20*x7809))+(((-1.0)*sj1*sj2))+((r21*x7808))+(((-1.0)*r22*x7806))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7810=(gconst1*r01);
IkReal x7811=(gconst2*r00);
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(IKsign(((x7810*x7810)+(x7811*x7811)+(((-2.0)*x7810*x7811))+(r02*r02))),-1);
if(!x7812.valid){
continue;
}
CheckValue<IkReal> x7813 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7811))+x7810)),IKFAST_ATAN2_MAGTHRESH);
if(!x7813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7812.value)))+(x7813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7814=IKcos(j4);
IkReal x7815=IKsin(j4);
IkReal x7816=((1.0)*x7814);
IkReal x7817=(gconst1*x7814);
IkReal x7818=(gconst1*x7815);
IkReal x7819=((1.0)*gconst2*x7815);
evalcond[0]=(((r21*x7817))+(((-1.0)*gconst2*r20*x7816))+((r22*x7815)));
evalcond[1]=((((-1.0)*gconst2*r10*x7816))+((r11*x7817))+((r12*x7815)));
evalcond[2]=((-1.0)+((r02*x7815))+(((-1.0)*gconst2*r00*x7816))+((r01*x7817)));
evalcond[3]=((((-1.0)*r02*x7816))+(((-1.0)*r00*x7819))+((r01*x7818)));
evalcond[4]=(((cj2*sj1))+((r11*x7818))+((cj1*sj2))+(((-1.0)*r12*x7816))+(((-1.0)*r10*x7819)));
evalcond[5]=((((-1.0)*r20*x7819))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7816))+((r21*x7818))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7820 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7820.valid){
continue;
}
CheckValue<IkReal> x7821=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7820.value)+(((1.5707963267949)*(x7821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7822=IKcos(j4);
IkReal x7823=IKsin(j4);
IkReal x7824=((1.0)*x7822);
IkReal x7825=(gconst1*x7822);
IkReal x7826=(gconst1*x7823);
IkReal x7827=((1.0)*gconst2*x7823);
evalcond[0]=(((r21*x7825))+(((-1.0)*gconst2*r20*x7824))+((r22*x7823)));
evalcond[1]=(((r12*x7823))+((r11*x7825))+(((-1.0)*gconst2*r10*x7824)));
evalcond[2]=((-1.0)+((r02*x7823))+((r01*x7825))+(((-1.0)*gconst2*r00*x7824)));
evalcond[3]=((((-1.0)*r00*x7827))+(((-1.0)*r02*x7824))+((r01*x7826)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x7826))+(((-1.0)*r10*x7827))+(((-1.0)*r12*x7824)));
evalcond[5]=((((-1.0)*r20*x7827))+(((-1.0)*sj1*sj2))+((r21*x7826))+(((-1.0)*r22*x7824))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7828=((-1.0)*r20);
IkReal x7829=x7633;
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7828),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
IkReal x7830=((-1.0)*(x7831.value));
sj5=gconst1;
cj5=gconst2;
j5=x7830;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7830;
IkReal gconst1=(r21*x7829);
IkReal gconst2=(x7828*x7829);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7832=((-1.0)*r20);
IkReal x7833=x7633;
CheckValue<IkReal> x7835 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7832),IKFAST_ATAN2_MAGTHRESH);
if(!x7835.valid){
continue;
}
IkReal x7834=((-1.0)*(x7835.value));
sj5=gconst1;
cj5=gconst2;
j5=x7834;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7834;
IkReal gconst1=(r21*x7833);
IkReal gconst2=(x7832*x7833);
IkReal x7836=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7840=IKPowWithIntegerCheck(x7836,-1);
if(!x7840.valid){
continue;
}
IkReal x7837=x7840.value;
IkReal x7838=((1.0)*x7837);
IkReal x7839=((((-2.0)*r00*r01*r20*r21*x7837))+(((-1.0)*x7838*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7838*(r00*r00)*(r20*r20))));
j4eval[0]=x7839;
j4eval[1]=IKsign(x7839);
j4eval[2]=r02;
j4eval[3]=x7836;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7841=((-1.0)*r20);
IkReal x7842=x7633;
CheckValue<IkReal> x7844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7841),IKFAST_ATAN2_MAGTHRESH);
if(!x7844.valid){
continue;
}
IkReal x7843=((-1.0)*(x7844.value));
sj5=gconst1;
cj5=gconst2;
j5=x7843;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7843;
IkReal gconst1=(r21*x7842);
IkReal gconst2=(x7841*x7842);
IkReal x7845=r22*r22;
IkReal x7846=((1.0)+(((-1.0)*x7845)));
IkReal x7847=(cj2*r12*sj1);
IkReal x7848=(cj1*r12*sj2);
CheckValue<IkReal> x7855=IKPowWithIntegerCheck(x7846,-1);
if(!x7855.valid){
continue;
}
IkReal x7849=x7855.value;
CheckValue<IkReal> x7856=IKPowWithIntegerCheck(((-1.0)+x7845),-1);
if(!x7856.valid){
continue;
}
IkReal x7850=x7856.value;
IkReal x7851=((1.0)*x7849);
if((x7846) < -0.00001)
continue;
IkReal x7852=IKsqrt(x7846);
IkReal x7853=((1.0)*r22*x7850*x7852);
IkReal x7854=((((-1.0)*x7851*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x7849))+(((-1.0)*x7851*(r10*r10)*(r20*r20))));
j4eval[0]=x7854;
j4eval[1]=IKsign(x7854);
j4eval[2]=((IKabs((x7848+x7847)))+(IKabs(((((-1.0)*x7848*x7853))+(((-1.0)*x7847*x7853))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7857=(cj2*sj1);
IkReal x7858=(gconst2*r10);
IkReal x7859=(cj1*sj2);
IkReal x7860=((1.0)*gconst1*r11);
CheckValue<IkReal> x7861=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7858*x7858)))+(((-1.0)*(r12*r12)))+(((-1.0)*gconst1*r11*x7860))+(((2.0)*gconst1*r11*x7858)))),-1);
if(!x7861.valid){
continue;
}
CheckValue<IkReal> x7862 = IKatan2WithCheck(IkReal(((((-1.0)*x7859*x7860))+((x7857*x7858))+(((-1.0)*x7857*x7860))+((x7858*x7859)))),IkReal((((r12*x7859))+((r12*x7857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7861.value)))+(x7862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7863=IKcos(j4);
IkReal x7864=IKsin(j4);
IkReal x7865=((1.0)*sj1);
IkReal x7866=((1.0)*x7863);
IkReal x7867=(gconst1*x7863);
IkReal x7868=(gconst1*x7864);
IkReal x7869=((1.0)*gconst2*x7864);
evalcond[0]=(((r21*x7867))+((r22*x7864))+(((-1.0)*gconst2*r20*x7866)));
evalcond[1]=(((r11*x7867))+((r12*x7864))+(((-1.0)*gconst2*r10*x7866)));
evalcond[2]=((1.0)+((r01*x7867))+(((-1.0)*gconst2*r00*x7866))+((r02*x7864)));
evalcond[3]=((((-1.0)*r00*x7869))+((r01*x7868))+(((-1.0)*r02*x7866)));
evalcond[4]=((((-1.0)*sj2*x7865))+((r21*x7868))+((cj1*cj2))+(((-1.0)*r20*x7869))+(((-1.0)*r22*x7866)));
evalcond[5]=(((r11*x7868))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7866))+(((-1.0)*r10*x7869))+(((-1.0)*cj2*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7870=(gconst1*r01);
IkReal x7871=(gconst2*r00);
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7871))+x7870)),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
CheckValue<IkReal> x7873=IKPowWithIntegerCheck(IKsign(((((2.0)*x7870*x7871))+(((-1.0)*(r02*r02)))+(((-1.0)*(x7871*x7871)))+(((-1.0)*(x7870*x7870))))),-1);
if(!x7873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7872.value)+(((1.5707963267949)*(x7873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7874=IKcos(j4);
IkReal x7875=IKsin(j4);
IkReal x7876=((1.0)*sj1);
IkReal x7877=((1.0)*x7874);
IkReal x7878=(gconst1*x7874);
IkReal x7879=(gconst1*x7875);
IkReal x7880=((1.0)*gconst2*x7875);
evalcond[0]=((((-1.0)*gconst2*r20*x7877))+((r22*x7875))+((r21*x7878)));
evalcond[1]=(((r11*x7878))+((r12*x7875))+(((-1.0)*gconst2*r10*x7877)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x7877))+((r01*x7878))+((r02*x7875)));
evalcond[3]=((((-1.0)*r00*x7880))+((r01*x7879))+(((-1.0)*r02*x7877)));
evalcond[4]=((((-1.0)*r22*x7877))+(((-1.0)*sj2*x7876))+(((-1.0)*r20*x7880))+((cj1*cj2))+((r21*x7879)));
evalcond[5]=((((-1.0)*cj2*x7876))+((r11*x7879))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x7880))+(((-1.0)*r12*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7881=((1.0)*gconst2);
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x7881))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7881)))),-1);
if(!x7883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7882.value)+(((1.5707963267949)*(x7883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7884=IKcos(j4);
IkReal x7885=IKsin(j4);
IkReal x7886=((1.0)*sj1);
IkReal x7887=((1.0)*x7884);
IkReal x7888=(gconst1*x7884);
IkReal x7889=(gconst1*x7885);
IkReal x7890=((1.0)*gconst2*x7885);
evalcond[0]=((((-1.0)*gconst2*r20*x7887))+((r21*x7888))+((r22*x7885)));
evalcond[1]=(((r12*x7885))+(((-1.0)*gconst2*r10*x7887))+((r11*x7888)));
evalcond[2]=((1.0)+((r01*x7888))+(((-1.0)*gconst2*r00*x7887))+((r02*x7885)));
evalcond[3]=(((r01*x7889))+(((-1.0)*r02*x7887))+(((-1.0)*r00*x7890)));
evalcond[4]=((((-1.0)*r22*x7887))+(((-1.0)*sj2*x7886))+(((-1.0)*r20*x7890))+((r21*x7889))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x7886))+(((-1.0)*cj1*sj2))+((r11*x7889))+(((-1.0)*r12*x7887))+(((-1.0)*r10*x7890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7891=((-1.0)*r20);
IkReal x7892=((-1.0)*px);
CheckValue<IkReal> x7894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7891),IKFAST_ATAN2_MAGTHRESH);
if(!x7894.valid){
continue;
}
IkReal x7893=((-1.0)*(x7894.value));
sj5=gconst1;
cj5=gconst2;
j5=x7893;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7892);
rxp1_1=(px*r21);
rxp1_2=(r11*x7892);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7893;
IkReal gconst1=r21;
IkReal gconst2=x7891;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7895=((-1.0)*r20);
IkReal x7896=((-1.0)*px);
CheckValue<IkReal> x7898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7895),IKFAST_ATAN2_MAGTHRESH);
if(!x7898.valid){
continue;
}
IkReal x7897=((-1.0)*(x7898.value));
sj5=gconst1;
cj5=gconst2;
j5=x7897;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7896);
rxp1_1=(px*r21);
rxp1_2=(r11*x7896);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7897;
IkReal gconst1=r21;
IkReal gconst2=x7895;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7899=((-1.0)*r20);
IkReal x7900=((-1.0)*px);
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7899),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
IkReal x7901=((-1.0)*(x7902.value));
sj5=gconst1;
cj5=gconst2;
j5=x7901;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7900);
rxp1_1=(px*r21);
rxp1_2=(r11*x7900);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7901;
IkReal gconst1=r21;
IkReal gconst2=x7899;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7905=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x7905.valid){
continue;
}
IkReal x7903=x7905.value;
IkReal x7904=((1.0)*sj0*x7903);
sj4array[0]=((((-1.0)*cj1*sj2*x7904))+(((-1.0)*cj2*sj1*x7904)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7906=IKcos(j4);
IkReal x7907=IKsin(j4);
IkReal x7908=(gconst1*r21);
IkReal x7909=((1.0)*gconst2*x7906);
evalcond[0]=((-1.0)*r02*x7906);
evalcond[1]=(((r02*x7907))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x7909))+((x7906*x7908)));
evalcond[3]=(((gconst1*r11*x7906))+(((-1.0)*r10*x7909)));
evalcond[4]=((((-1.0)*gconst2*r20*x7907))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7907*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7911.valid){
continue;
}
IkReal x7910=x7911.value;
sj4array[0]=(((sj1*sj2*x7910))+(((-1.0)*cj1*cj2*x7910)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7912=IKcos(j4);
IkReal x7913=IKsin(j4);
IkReal x7914=((1.0)*gconst2*r10);
IkReal x7915=(gconst1*x7912);
evalcond[0]=((-1.0)*r02*x7912);
evalcond[1]=((((-1.0)*sj0))+((r02*x7913)));
evalcond[2]=(((r21*x7915))+(((-1.0)*gconst2*r20*x7912)));
evalcond[3]=((((-1.0)*x7912*x7914))+((r11*x7915)));
evalcond[4]=((((-1.0)*x7913*x7914))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((gconst1*r11*x7913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7916=IKPowWithIntegerCheck(r02,-1);
if(!x7916.valid){
continue;
}
sj4array[0]=(sj0*(x7916.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7917=IKcos(j4);
IkReal x7918=IKsin(j4);
IkReal x7919=(gconst1*r21);
IkReal x7920=(gconst1*r11);
IkReal x7921=((1.0)*gconst2*r10);
IkReal x7922=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x7917);
evalcond[1]=((((-1.0)*x7917*x7922))+((x7917*x7919)));
evalcond[2]=(((x7917*x7920))+(((-1.0)*x7917*x7921)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x7918*x7919))+((cj1*cj2))+(((-1.0)*x7918*x7922)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x7918*x7920))+(((-1.0)*x7918*x7921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7923=(sj1*sj2);
IkReal x7924=(gconst2*r20);
IkReal x7925=(gconst1*r21);
IkReal x7926=((1.0)*cj1*cj2);
CheckValue<IkReal> x7927=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7924*x7924)))+(((-1.0)*(x7925*x7925)))+(((2.0)*x7924*x7925))+(((-1.0)*(r22*r22))))),-1);
if(!x7927.valid){
continue;
}
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(((((-1.0)*x7924*x7926))+((cj1*cj2*x7925))+((x7923*x7924))+(((-1.0)*x7923*x7925)))),IkReal((((r22*x7923))+(((-1.0)*r22*x7926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7927.value)))+(x7928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7929=IKcos(j4);
IkReal x7930=IKsin(j4);
IkReal x7931=(cj2*sj1);
IkReal x7932=(cj1*sj2);
IkReal x7933=((1.0)*x7929);
IkReal x7934=(gconst1*x7929);
IkReal x7935=(gconst1*x7930);
IkReal x7936=((1.0)*gconst2*x7930);
evalcond[0]=(((r21*x7934))+(((-1.0)*gconst2*r20*x7933))+((r22*x7930)));
evalcond[1]=(cj0+((r11*x7934))+(((-1.0)*gconst2*r10*x7933))+((r12*x7930)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7930))+(((-1.0)*gconst2*r00*x7933))+((r01*x7934)));
evalcond[3]=(((r21*x7935))+(((-1.0)*r22*x7933))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7936))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x7936))+((cj0*x7931))+((cj0*x7932))+(((-1.0)*r02*x7933))+((r01*x7935)));
evalcond[5]=(((sj0*x7931))+((sj0*x7932))+(((-1.0)*r12*x7933))+((r11*x7935))+(((-1.0)*r10*x7936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7937 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7937.valid){
continue;
}
CheckValue<IkReal> x7938=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7937.value)+(((1.5707963267949)*(x7938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7939=IKcos(j4);
IkReal x7940=IKsin(j4);
IkReal x7941=(cj2*sj1);
IkReal x7942=(cj1*sj2);
IkReal x7943=((1.0)*x7939);
IkReal x7944=(gconst1*x7939);
IkReal x7945=(gconst1*x7940);
IkReal x7946=((1.0)*gconst2*x7940);
evalcond[0]=(((r21*x7944))+(((-1.0)*gconst2*r20*x7943))+((r22*x7940)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x7943))+((r11*x7944))+((r12*x7940)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7940))+(((-1.0)*gconst2*r00*x7943))+((r01*x7944)));
evalcond[3]=(((r21*x7945))+(((-1.0)*r22*x7943))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7946))+((cj1*cj2)));
evalcond[4]=(((cj0*x7942))+((cj0*x7941))+(((-1.0)*r00*x7946))+(((-1.0)*r02*x7943))+((r01*x7945)));
evalcond[5]=(((sj0*x7942))+((sj0*x7941))+((r11*x7945))+(((-1.0)*r12*x7943))+(((-1.0)*r10*x7946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7947=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7947.valid){
continue;
}
CheckValue<IkReal> x7948 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7947.value)))+(x7948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7949=IKcos(j4);
IkReal x7950=IKsin(j4);
IkReal x7951=(cj2*sj1);
IkReal x7952=(cj1*sj2);
IkReal x7953=((1.0)*x7949);
IkReal x7954=(gconst1*x7949);
IkReal x7955=(gconst1*x7950);
IkReal x7956=((1.0)*gconst2*x7950);
evalcond[0]=((((-1.0)*gconst2*r20*x7953))+((r22*x7950))+((r21*x7954)));
evalcond[1]=(((r12*x7950))+cj0+(((-1.0)*gconst2*r10*x7953))+((r11*x7954)));
evalcond[2]=(((r01*x7954))+(((-1.0)*sj0))+((r02*x7950))+(((-1.0)*gconst2*r00*x7953)));
evalcond[3]=((((-1.0)*r22*x7953))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*x7956))+((r21*x7955)));
evalcond[4]=(((r01*x7955))+((cj0*x7952))+((cj0*x7951))+(((-1.0)*r02*x7953))+(((-1.0)*r00*x7956)));
evalcond[5]=(((r11*x7955))+(((-1.0)*r10*x7956))+((sj0*x7951))+((sj0*x7952))+(((-1.0)*r12*x7953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7957=((-1.0)*r20);
IkReal x7958=x7633;
CheckValue<IkReal> x7960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7957),IKFAST_ATAN2_MAGTHRESH);
if(!x7960.valid){
continue;
}
IkReal x7959=((-1.0)*(x7960.value));
sj5=gconst1;
cj5=gconst2;
j5=x7959;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7959;
IkReal gconst1=(r21*x7958);
IkReal gconst2=(x7957*x7958);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7961=((-1.0)*r20);
IkReal x7962=x7633;
CheckValue<IkReal> x7964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7961),IKFAST_ATAN2_MAGTHRESH);
if(!x7964.valid){
continue;
}
IkReal x7963=((-1.0)*(x7964.value));
sj5=gconst1;
cj5=gconst2;
j5=x7963;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7963;
IkReal gconst1=(r21*x7962);
IkReal gconst2=(x7961*x7962);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7965=((-1.0)*r20);
IkReal x7966=x7633;
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7965),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
IkReal x7967=((-1.0)*(x7968.value));
sj5=gconst1;
cj5=gconst2;
j5=x7967;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7967;
IkReal gconst1=(r21*x7966);
IkReal gconst2=(x7965*x7966);
IkReal x7969=r22*r22;
CheckValue<IkReal> x7972=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7969))),-1);
if(!x7972.valid){
continue;
}
IkReal x7970=x7972.value;
IkReal x7971=(x7969+((x7970*(r21*r21*r21*r21)))+(((2.0)*x7970*(r20*r20)*(r21*r21)))+((x7970*(r20*r20*r20*r20))));
j4eval[0]=x7971;
j4eval[1]=IKsign(x7971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7973=((-1.0)*r20);
IkReal x7974=x7633;
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7973),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
IkReal x7975=((-1.0)*(x7976.value));
sj5=gconst1;
cj5=gconst2;
j5=x7975;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7975;
IkReal gconst1=(r21*x7974);
IkReal gconst2=(x7973*x7974);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7977=((-1.0)*r20);
IkReal x7978=x7633;
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7977),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal x7979=((-1.0)*(x7980.value));
sj5=gconst1;
cj5=gconst2;
j5=x7979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7979;
IkReal gconst1=(r21*x7978);
IkReal gconst2=(x7977*x7978);
IkReal x7981=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(x7981,-1);
if(!x7985.valid){
continue;
}
IkReal x7982=x7985.value;
IkReal x7983=((1.0)*x7982);
IkReal x7984=((((-1.0)*x7983*(r10*r10)*(r20*r20)))+(((-1.0)*x7983*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7982))+(((-1.0)*(r12*r12))));
j4eval[0]=x7984;
j4eval[1]=IKsign(x7984);
j4eval[2]=r12;
j4eval[3]=x7981;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7986=((-1.0)*r20);
IkReal x7987=x7633;
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7986),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
IkReal x7988=((-1.0)*(x7989.value));
sj5=gconst1;
cj5=gconst2;
j5=x7988;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7988;
IkReal gconst1=(r21*x7987);
IkReal gconst2=(x7986*x7987);
IkReal x7990=r22*r22;
CheckValue<IkReal> x7993=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7990))),-1);
if(!x7993.valid){
continue;
}
IkReal x7991=x7993.value;
IkReal x7992=(((x7991*(r21*r21*r21*r21)))+x7990+((x7991*(r20*r20*r20*r20)))+(((2.0)*x7991*(r20*r20)*(r21*r21))));
j4eval[0]=x7992;
j4eval[1]=IKsign(x7992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7994=(sj1*sj2);
IkReal x7995=(gconst2*r20);
IkReal x7996=(cj1*cj2);
IkReal x7997=(gconst1*r21);
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal((((x7994*x7995))+((x7996*x7997))+(((-1.0)*x7995*x7996))+(((-1.0)*x7994*x7997)))),IkReal(((((-1.0)*r22*x7996))+((r22*x7994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
CheckValue<IkReal> x7999=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7995*x7995)+(((-2.0)*x7995*x7997))+(x7997*x7997))),-1);
if(!x7999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7998.value)+(((1.5707963267949)*(x7999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8000=IKcos(j4);
IkReal x8001=IKsin(j4);
IkReal x8002=(gconst1*x8000);
IkReal x8003=(gconst2*x8001);
IkReal x8004=((1.0)*gconst1*x8001);
IkReal x8005=((1.0)*gconst2*x8000);
evalcond[0]=(((r21*x8002))+(((-1.0)*r20*x8005))+((r22*x8001)));
evalcond[1]=(((r01*x8002))+((r02*x8001))+(((-1.0)*r00*x8005)));
evalcond[2]=(((r12*x8000))+(((-1.0)*r11*x8004))+((r10*x8003)));
evalcond[3]=((1.0)+((r11*x8002))+((r12*x8001))+(((-1.0)*r10*x8005)));
evalcond[4]=(((cj2*sj1))+((r00*x8003))+((cj1*sj2))+((r02*x8000))+(((-1.0)*r01*x8004)));
evalcond[5]=((((-1.0)*r21*x8004))+((r20*x8003))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x8000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8006=(gconst1*r11);
IkReal x8007=(gconst2*r10);
CheckValue<IkReal> x8008 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8007))+x8006)),IKFAST_ATAN2_MAGTHRESH);
if(!x8008.valid){
continue;
}
CheckValue<IkReal> x8009=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8007*x8007)))+(((-1.0)*(x8006*x8006)))+(((-1.0)*(r12*r12)))+(((2.0)*x8006*x8007)))),-1);
if(!x8009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8008.value)+(((1.5707963267949)*(x8009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8010=IKcos(j4);
IkReal x8011=IKsin(j4);
IkReal x8012=(gconst1*x8010);
IkReal x8013=(gconst2*x8011);
IkReal x8014=((1.0)*gconst1*x8011);
IkReal x8015=((1.0)*gconst2*x8010);
evalcond[0]=(((r22*x8011))+(((-1.0)*r20*x8015))+((r21*x8012)));
evalcond[1]=(((r02*x8011))+(((-1.0)*r00*x8015))+((r01*x8012)));
evalcond[2]=(((r12*x8010))+((r10*x8013))+(((-1.0)*r11*x8014)));
evalcond[3]=((1.0)+((r12*x8011))+((r11*x8012))+(((-1.0)*r10*x8015)));
evalcond[4]=((((-1.0)*r01*x8014))+((r02*x8010))+((cj2*sj1))+((cj1*sj2))+((r00*x8013)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x8010))+(((-1.0)*r21*x8014))+((cj1*cj2))+((r20*x8013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8016=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8016.value)))+(x8017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKcos(j4);
IkReal x8019=IKsin(j4);
IkReal x8020=(gconst1*x8018);
IkReal x8021=(gconst2*x8019);
IkReal x8022=((1.0)*gconst1*x8019);
IkReal x8023=((1.0)*gconst2*x8018);
evalcond[0]=((((-1.0)*r20*x8023))+((r22*x8019))+((r21*x8020)));
evalcond[1]=(((r02*x8019))+(((-1.0)*r00*x8023))+((r01*x8020)));
evalcond[2]=(((r10*x8021))+(((-1.0)*r11*x8022))+((r12*x8018)));
evalcond[3]=((1.0)+((r12*x8019))+((r11*x8020))+(((-1.0)*r10*x8023)));
evalcond[4]=(((r02*x8018))+((cj2*sj1))+((cj1*sj2))+((r00*x8021))+(((-1.0)*r01*x8022)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8022))+((r20*x8021))+((r22*x8018))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8024=((-1.0)*r20);
IkReal x8025=x7633;
CheckValue<IkReal> x8027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8024),IKFAST_ATAN2_MAGTHRESH);
if(!x8027.valid){
continue;
}
IkReal x8026=((-1.0)*(x8027.value));
sj5=gconst1;
cj5=gconst2;
j5=x8026;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8026;
IkReal gconst1=(r21*x8025);
IkReal gconst2=(x8024*x8025);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8028=((-1.0)*r20);
IkReal x8029=x7633;
CheckValue<IkReal> x8031 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8028),IKFAST_ATAN2_MAGTHRESH);
if(!x8031.valid){
continue;
}
IkReal x8030=((-1.0)*(x8031.value));
sj5=gconst1;
cj5=gconst2;
j5=x8030;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8030;
IkReal gconst1=(r21*x8029);
IkReal gconst2=(x8028*x8029);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8032=((-1.0)*r20);
IkReal x8033=x7633;
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8032),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
IkReal x8034=((-1.0)*(x8035.value));
sj5=gconst1;
cj5=gconst2;
j5=x8034;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8034;
IkReal gconst1=(r21*x8033);
IkReal gconst2=(x8032*x8033);
IkReal x8036=r22*r22;
IkReal x8037=(cj1*cj2*r12);
CheckValue<IkReal> x8042=IKPowWithIntegerCheck(((-1.0)+x8036),-1);
if(!x8042.valid){
continue;
}
IkReal x8038=x8042.value;
IkReal x8039=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x8036)))) < -0.00001)
continue;
IkReal x8040=IKsqrt(((1.0)+(((-1.0)*x8036))));
IkReal x8041=(r22*x8038*x8040);
j4eval[0]=((IKabs((x8037+(((-1.0)*x8039)))))+(IKabs((((x8037*x8041))+(((-1.0)*x8039*x8041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8043=(cj1*cj2);
IkReal x8044=(gconst2*r10);
IkReal x8045=(gconst1*r11);
IkReal x8046=((1.0)*sj1*sj2);
CheckValue<IkReal> x8047=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8047.valid){
continue;
}
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal((((r12*x8043))+(((-1.0)*r12*x8046)))),IkReal((((sj1*sj2*x8044))+(((-1.0)*x8045*x8046))+((x8043*x8045))+(((-1.0)*x8043*x8044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8047.value)))+(x8048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8049=IKcos(j4);
IkReal x8050=IKsin(j4);
IkReal x8051=((1.0)*sj1);
IkReal x8052=(gconst1*x8049);
IkReal x8053=(gconst2*x8050);
IkReal x8054=((1.0)*gconst1*x8050);
IkReal x8055=((1.0)*gconst2*x8049);
evalcond[0]=((((-1.0)*r20*x8055))+((r21*x8052))+((r22*x8050)));
evalcond[1]=(((r02*x8050))+((r01*x8052))+(((-1.0)*r00*x8055)));
evalcond[2]=(((r10*x8053))+((r12*x8049))+(((-1.0)*r11*x8054)));
evalcond[3]=((-1.0)+((r11*x8052))+((r12*x8050))+(((-1.0)*r10*x8055)));
evalcond[4]=(((r20*x8053))+(((-1.0)*r21*x8054))+((cj1*cj2))+((r22*x8049))+(((-1.0)*sj2*x8051)));
evalcond[5]=(((r00*x8053))+(((-1.0)*cj2*x8051))+((r02*x8049))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x8054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=(gconst2*r10);
IkReal x8057=(gconst1*r11);
CheckValue<IkReal> x8058 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8056))+x8057)),IKFAST_ATAN2_MAGTHRESH);
if(!x8058.valid){
continue;
}
CheckValue<IkReal> x8059=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8056*x8056)+(((-2.0)*x8056*x8057))+(x8057*x8057))),-1);
if(!x8059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8058.value)+(((1.5707963267949)*(x8059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8060=IKcos(j4);
IkReal x8061=IKsin(j4);
IkReal x8062=((1.0)*sj1);
IkReal x8063=(gconst1*x8060);
IkReal x8064=(gconst2*x8061);
IkReal x8065=((1.0)*gconst1*x8061);
IkReal x8066=((1.0)*gconst2*x8060);
evalcond[0]=(((r21*x8063))+((r22*x8061))+(((-1.0)*r20*x8066)));
evalcond[1]=(((r01*x8063))+((r02*x8061))+(((-1.0)*r00*x8066)));
evalcond[2]=(((r10*x8064))+(((-1.0)*r11*x8065))+((r12*x8060)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8066))+((r11*x8063))+((r12*x8061)));
evalcond[4]=(((r22*x8060))+((r20*x8064))+(((-1.0)*r21*x8065))+(((-1.0)*sj2*x8062))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x8062))+((r00*x8064))+(((-1.0)*cj1*sj2))+((r02*x8060))+(((-1.0)*r01*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8067=((1.0)*gconst2);
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x8067)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8067)))),-1);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8068.value)+(((1.5707963267949)*(x8069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKcos(j4);
IkReal x8071=IKsin(j4);
IkReal x8072=((1.0)*sj1);
IkReal x8073=(gconst1*x8070);
IkReal x8074=(gconst2*x8071);
IkReal x8075=((1.0)*gconst1*x8071);
IkReal x8076=((1.0)*gconst2*x8070);
evalcond[0]=(((r22*x8071))+((r21*x8073))+(((-1.0)*r20*x8076)));
evalcond[1]=(((r02*x8071))+(((-1.0)*r00*x8076))+((r01*x8073)));
evalcond[2]=(((r10*x8074))+((r12*x8070))+(((-1.0)*r11*x8075)));
evalcond[3]=((-1.0)+((r12*x8071))+((r11*x8073))+(((-1.0)*r10*x8076)));
evalcond[4]=(((r20*x8074))+(((-1.0)*sj2*x8072))+((r22*x8070))+((cj1*cj2))+(((-1.0)*r21*x8075)));
evalcond[5]=(((r02*x8070))+(((-1.0)*cj2*x8072))+(((-1.0)*r01*x8075))+((r00*x8074))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8077=((-1.0)*r20);
IkReal x8078=x7633;
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8077),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
IkReal x8079=((-1.0)*(x8080.value));
sj5=gconst1;
cj5=gconst2;
j5=x8079;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8079;
IkReal gconst1=(r21*x8078);
IkReal gconst2=(x8077*x8078);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8081=((-1.0)*r20);
IkReal x8082=x7633;
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8081),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
IkReal x8083=((-1.0)*(x8084.value));
sj5=gconst1;
cj5=gconst2;
j5=x8083;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8083;
IkReal gconst1=(r21*x8082);
IkReal gconst2=(x8081*x8082);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8085=((-1.0)*r20);
IkReal x8086=x7633;
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8085),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
IkReal x8087=((-1.0)*(x8088.value));
sj5=gconst1;
cj5=gconst2;
j5=x8087;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8087;
IkReal gconst1=(r21*x8086);
IkReal gconst2=(x8085*x8086);
IkReal x8089=r22*r22;
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8089))),-1);
if(!x8092.valid){
continue;
}
IkReal x8090=x8092.value;
IkReal x8091=((((2.0)*x8090*(r20*r20)*(r21*r21)))+((x8090*(r21*r21*r21*r21)))+((x8090*(r20*r20*r20*r20)))+x8089);
j4eval[0]=x8091;
j4eval[1]=IKsign(x8091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8093=(sj1*sj2);
IkReal x8094=(gconst2*r20);
IkReal x8095=(cj1*cj2);
IkReal x8096=(gconst1*r21);
CheckValue<IkReal> x8097 = IKatan2WithCheck(IkReal((((x8095*x8096))+(((-1.0)*x8093*x8096))+(((-1.0)*x8094*x8095))+((x8093*x8094)))),IkReal((((r22*x8093))+(((-1.0)*r22*x8095)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8097.valid){
continue;
}
CheckValue<IkReal> x8098=IKPowWithIntegerCheck(IKsign(((x8096*x8096)+(r22*r22)+(x8094*x8094)+(((-2.0)*x8094*x8096)))),-1);
if(!x8098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8097.value)+(((1.5707963267949)*(x8098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8099=IKcos(j4);
IkReal x8100=IKsin(j4);
IkReal x8101=(gconst1*x8099);
IkReal x8102=(gconst2*x8100);
IkReal x8103=((1.0)*gconst1*x8100);
IkReal x8104=((1.0)*gconst2*x8099);
evalcond[0]=((((-1.0)*r20*x8104))+((r21*x8101))+((r22*x8100)));
evalcond[1]=(((r11*x8101))+((r12*x8100))+(((-1.0)*r10*x8104)));
evalcond[2]=((((-1.0)*r01*x8103))+((r00*x8102))+((r02*x8099)));
evalcond[3]=((-1.0)+((r02*x8100))+((r01*x8101))+(((-1.0)*r00*x8104)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x8103))+((cj1*sj2))+((r10*x8102))+((r12*x8099)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x8099))+((r20*x8102))+(((-1.0)*r21*x8103))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8105=(gconst1*r01);
IkReal x8106=(gconst2*r00);
CheckValue<IkReal> x8107 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8106))+x8105)),IKFAST_ATAN2_MAGTHRESH);
if(!x8107.valid){
continue;
}
CheckValue<IkReal> x8108=IKPowWithIntegerCheck(IKsign(((x8106*x8106)+(((-2.0)*x8105*x8106))+(x8105*x8105)+(r02*r02))),-1);
if(!x8108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8107.value)+(((1.5707963267949)*(x8108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8109=IKcos(j4);
IkReal x8110=IKsin(j4);
IkReal x8111=(gconst1*x8109);
IkReal x8112=(gconst2*x8110);
IkReal x8113=((1.0)*gconst1*x8110);
IkReal x8114=((1.0)*gconst2*x8109);
evalcond[0]=((((-1.0)*r20*x8114))+((r21*x8111))+((r22*x8110)));
evalcond[1]=(((r12*x8110))+((r11*x8111))+(((-1.0)*r10*x8114)));
evalcond[2]=(((r02*x8109))+((r00*x8112))+(((-1.0)*r01*x8113)));
evalcond[3]=((-1.0)+((r02*x8110))+((r01*x8111))+(((-1.0)*r00*x8114)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x8113))+((cj1*sj2))+((r10*x8112))+((r12*x8109)));
evalcond[5]=((((-1.0)*r21*x8113))+(((-1.0)*sj1*sj2))+((r20*x8112))+((r22*x8109))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKcos(j4);
IkReal x8118=IKsin(j4);
IkReal x8119=(gconst1*x8117);
IkReal x8120=(gconst2*x8118);
IkReal x8121=((1.0)*gconst1*x8118);
IkReal x8122=((1.0)*gconst2*x8117);
evalcond[0]=((((-1.0)*r20*x8122))+((r21*x8119))+((r22*x8118)));
evalcond[1]=(((r12*x8118))+((r11*x8119))+(((-1.0)*r10*x8122)));
evalcond[2]=(((r02*x8117))+((r00*x8120))+(((-1.0)*r01*x8121)));
evalcond[3]=((-1.0)+((r02*x8118))+((r01*x8119))+(((-1.0)*r00*x8122)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x8121))+((cj1*sj2))+((r12*x8117))+((r10*x8120)));
evalcond[5]=((((-1.0)*r21*x8121))+(((-1.0)*sj1*sj2))+((r20*x8120))+((cj1*cj2))+((r22*x8117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8123=((-1.0)*r20);
IkReal x8124=x7633;
CheckValue<IkReal> x8126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8123),IKFAST_ATAN2_MAGTHRESH);
if(!x8126.valid){
continue;
}
IkReal x8125=((-1.0)*(x8126.value));
sj5=gconst1;
cj5=gconst2;
j5=x8125;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8125;
IkReal gconst1=(r21*x8124);
IkReal gconst2=(x8123*x8124);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8127=((-1.0)*r20);
IkReal x8128=x7633;
CheckValue<IkReal> x8130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8127),IKFAST_ATAN2_MAGTHRESH);
if(!x8130.valid){
continue;
}
IkReal x8129=((-1.0)*(x8130.value));
sj5=gconst1;
cj5=gconst2;
j5=x8129;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8129;
IkReal gconst1=(r21*x8128);
IkReal gconst2=(x8127*x8128);
IkReal x8131=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(x8131,-1);
if(!x8135.valid){
continue;
}
IkReal x8132=x8135.value;
IkReal x8133=((1.0)*x8132);
IkReal x8134=((((-1.0)*x8133*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8132))+(((-1.0)*x8133*(r00*r00)*(r20*r20))));
j4eval[0]=x8134;
j4eval[1]=IKsign(x8134);
j4eval[2]=r02;
j4eval[3]=x8131;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8136=((-1.0)*r20);
IkReal x8137=x7633;
CheckValue<IkReal> x8139 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8136),IKFAST_ATAN2_MAGTHRESH);
if(!x8139.valid){
continue;
}
IkReal x8138=((-1.0)*(x8139.value));
sj5=gconst1;
cj5=gconst2;
j5=x8138;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8138;
IkReal gconst1=(r21*x8137);
IkReal gconst2=(x8136*x8137);
IkReal x8140=r22*r22;
IkReal x8141=(cj1*cj2*r02);
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(((-1.0)+x8140),-1);
if(!x8146.valid){
continue;
}
IkReal x8142=x8146.value;
IkReal x8143=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8140)))) < -0.00001)
continue;
IkReal x8144=IKsqrt(((1.0)+(((-1.0)*x8140))));
IkReal x8145=(r22*x8142*x8144);
j4eval[0]=((IKabs((((x8141*x8145))+(((-1.0)*x8143*x8145)))))+(IKabs((x8141+(((-1.0)*x8143))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8147=(gconst1*r01);
IkReal x8148=(gconst2*r00);
IkReal x8149=(cj1*cj2);
IkReal x8150=((1.0)*sj1*sj2);
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8150))+((r02*x8149)))),IkReal((((x8147*x8149))+(((-1.0)*x8147*x8150))+(((-1.0)*x8148*x8149))+((sj1*sj2*x8148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
CheckValue<IkReal> x8152=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8151.value)+(((1.5707963267949)*(x8152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8153=IKcos(j4);
IkReal x8154=IKsin(j4);
IkReal x8155=((1.0)*sj1);
IkReal x8156=(gconst1*x8153);
IkReal x8157=(gconst2*x8154);
IkReal x8158=((1.0)*gconst1*x8154);
IkReal x8159=((1.0)*gconst2*x8153);
evalcond[0]=(((r22*x8154))+((r21*x8156))+(((-1.0)*r20*x8159)));
evalcond[1]=((((-1.0)*r10*x8159))+((r12*x8154))+((r11*x8156)));
evalcond[2]=(((r00*x8157))+((r02*x8153))+(((-1.0)*r01*x8158)));
evalcond[3]=((1.0)+((r01*x8156))+((r02*x8154))+(((-1.0)*r00*x8159)));
evalcond[4]=(((r20*x8157))+((r22*x8153))+(((-1.0)*sj2*x8155))+((cj1*cj2))+(((-1.0)*r21*x8158)));
evalcond[5]=(((r10*x8157))+(((-1.0)*cj1*sj2))+((r12*x8153))+(((-1.0)*r11*x8158))+(((-1.0)*cj2*x8155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8160=(gconst1*r01);
IkReal x8161=(gconst2*r00);
CheckValue<IkReal> x8162=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8160*x8160)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8161*x8161)))+(((2.0)*x8160*x8161)))),-1);
if(!x8162.valid){
continue;
}
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8161))+x8160)),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8162.value)))+(x8163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8164=IKcos(j4);
IkReal x8165=IKsin(j4);
IkReal x8166=((1.0)*sj1);
IkReal x8167=(gconst1*x8164);
IkReal x8168=(gconst2*x8165);
IkReal x8169=((1.0)*gconst1*x8165);
IkReal x8170=((1.0)*gconst2*x8164);
evalcond[0]=(((r22*x8165))+((r21*x8167))+(((-1.0)*r20*x8170)));
evalcond[1]=(((r11*x8167))+((r12*x8165))+(((-1.0)*r10*x8170)));
evalcond[2]=(((r00*x8168))+(((-1.0)*r01*x8169))+((r02*x8164)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8170))+((r01*x8167))+((r02*x8165)));
evalcond[4]=(((r22*x8164))+(((-1.0)*sj2*x8166))+((cj1*cj2))+(((-1.0)*r21*x8169))+((r20*x8168)));
evalcond[5]=((((-1.0)*cj2*x8166))+((r12*x8164))+((r10*x8168))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*x8169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8171=((1.0)*gconst2);
CheckValue<IkReal> x8172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8171))+(((-1.0)*gconst1*r10)))),-1);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8171))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8172.value)))+(x8173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8174=IKcos(j4);
IkReal x8175=IKsin(j4);
IkReal x8176=((1.0)*sj1);
IkReal x8177=(gconst1*x8174);
IkReal x8178=(gconst2*x8175);
IkReal x8179=((1.0)*gconst1*x8175);
IkReal x8180=((1.0)*gconst2*x8174);
evalcond[0]=((((-1.0)*r20*x8180))+((r21*x8177))+((r22*x8175)));
evalcond[1]=((((-1.0)*r10*x8180))+((r11*x8177))+((r12*x8175)));
evalcond[2]=((((-1.0)*r01*x8179))+((r02*x8174))+((r00*x8178)));
evalcond[3]=((1.0)+((r02*x8175))+(((-1.0)*r00*x8180))+((r01*x8177)));
evalcond[4]=(((r20*x8178))+(((-1.0)*r21*x8179))+((cj1*cj2))+(((-1.0)*sj2*x8176))+((r22*x8174)));
evalcond[5]=((((-1.0)*r11*x8179))+(((-1.0)*cj1*sj2))+((r12*x8174))+(((-1.0)*cj2*x8176))+((r10*x8178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8181=((-1.0)*r20);
IkReal x8182=((-1.0)*px);
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8181),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
IkReal x8183=((-1.0)*(x8184.value));
sj5=gconst1;
cj5=gconst2;
j5=x8183;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8182);
rxp1_1=(px*r21);
rxp1_2=(r11*x8182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8183;
IkReal gconst1=r21;
IkReal gconst2=x8181;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8185=((-1.0)*r20);
IkReal x8186=((-1.0)*px);
CheckValue<IkReal> x8188 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8185),IKFAST_ATAN2_MAGTHRESH);
if(!x8188.valid){
continue;
}
IkReal x8187=((-1.0)*(x8188.value));
sj5=gconst1;
cj5=gconst2;
j5=x8187;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8186);
rxp1_1=(px*r21);
rxp1_2=(r11*x8186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8187;
IkReal gconst1=r21;
IkReal gconst2=x8185;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8189=((-1.0)*r20);
IkReal x8190=((-1.0)*px);
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8189),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
IkReal x8191=((-1.0)*(x8192.value));
sj5=gconst1;
cj5=gconst2;
j5=x8191;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8190);
rxp1_1=(px*r21);
rxp1_2=(r11*x8190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8191;
IkReal gconst1=r21;
IkReal gconst2=x8189;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8195=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8195.valid){
continue;
}
IkReal x8193=x8195.value;
IkReal x8194=((1.0)*sj0*x8193);
sj4array[0]=((((-1.0)*cj2*sj1*x8194))+(((-1.0)*cj1*sj2*x8194)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8196=IKcos(j4);
IkReal x8197=IKsin(j4);
IkReal x8198=(gconst1*x8196);
IkReal x8199=((1.0)*gconst2*x8196);
evalcond[0]=(r02*x8196);
evalcond[1]=((((-1.0)*sj0))+((r02*x8197)));
evalcond[2]=(((r21*x8198))+(((-1.0)*r20*x8199)));
evalcond[3]=(((r11*x8198))+(((-1.0)*r10*x8199)));
evalcond[4]=((((-1.0)*sj1*sj2))+((gconst2*r20*x8197))+((cj1*cj2))+(((-1.0)*gconst1*r21*x8197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8201=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8201.valid){
continue;
}
IkReal x8200=x8201.value;
sj4array[0]=((((-1.0)*cj1*cj2*x8200))+((sj1*sj2*x8200)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8202=IKcos(j4);
IkReal x8203=IKsin(j4);
IkReal x8204=(gconst2*r10);
IkReal x8205=(gconst1*x8202);
IkReal x8206=((1.0)*x8202);
evalcond[0]=(r02*x8202);
evalcond[1]=(((r02*x8203))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*gconst2*r20*x8206))+((r21*x8205)));
evalcond[3]=(((r11*x8205))+(((-1.0)*x8204*x8206)));
evalcond[4]=((((-1.0)*gconst1*r11*x8203))+((x8203*x8204))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8207=IKPowWithIntegerCheck(r02,-1);
if(!x8207.valid){
continue;
}
sj4array[0]=(sj0*(x8207.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8208=IKcos(j4);
IkReal x8209=IKsin(j4);
IkReal x8210=(gconst2*r10);
IkReal x8211=(gconst2*r20);
IkReal x8212=((1.0)*x8208);
IkReal x8213=(gconst1*x8208);
IkReal x8214=((1.0)*gconst1*x8209);
evalcond[0]=(r02*x8208);
evalcond[1]=((((-1.0)*x8211*x8212))+((r21*x8213)));
evalcond[2]=(((r11*x8213))+(((-1.0)*x8210*x8212)));
evalcond[3]=(((x8209*x8211))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x8214)));
evalcond[4]=(((x8209*x8210))+((cj1*sj0*sj2))+(((-1.0)*r11*x8214))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8215=(sj1*sj2);
IkReal x8216=(gconst2*r20);
IkReal x8217=(cj1*cj2);
IkReal x8218=(gconst1*r21);
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal((((x8217*x8218))+(((-1.0)*x8216*x8217))+(((-1.0)*x8215*x8218))+((x8215*x8216)))),IkReal((((r22*x8215))+(((-1.0)*r22*x8217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(IKsign(((x8218*x8218)+(r22*r22)+(((-2.0)*x8216*x8218))+(x8216*x8216))),-1);
if(!x8220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8219.value)+(((1.5707963267949)*(x8220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8221=IKcos(j4);
IkReal x8222=IKsin(j4);
IkReal x8223=(cj2*sj1);
IkReal x8224=(cj1*sj2);
IkReal x8225=(gconst1*x8221);
IkReal x8226=(gconst2*x8222);
IkReal x8227=((1.0)*gconst1*x8222);
IkReal x8228=((1.0)*gconst2*x8221);
evalcond[0]=(((r22*x8222))+((r21*x8225))+(((-1.0)*r20*x8228)));
evalcond[1]=(((r12*x8222))+cj0+((r11*x8225))+(((-1.0)*r10*x8228)));
evalcond[2]=((((-1.0)*sj0))+((r02*x8222))+((r01*x8225))+(((-1.0)*r00*x8228)));
evalcond[3]=(((r20*x8226))+(((-1.0)*sj1*sj2))+((r22*x8221))+((cj1*cj2))+(((-1.0)*r21*x8227)));
evalcond[4]=(((r02*x8221))+((cj0*x8224))+((cj0*x8223))+((r00*x8226))+(((-1.0)*r01*x8227)));
evalcond[5]=(((r12*x8221))+((r10*x8226))+(((-1.0)*r11*x8227))+((sj0*x8224))+((sj0*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8229 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8229.valid){
continue;
}
CheckValue<IkReal> x8230=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8229.value)+(((1.5707963267949)*(x8230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8231=IKcos(j4);
IkReal x8232=IKsin(j4);
IkReal x8233=(cj2*sj1);
IkReal x8234=(cj1*sj2);
IkReal x8235=(gconst1*x8231);
IkReal x8236=(gconst2*x8232);
IkReal x8237=((1.0)*gconst1*x8232);
IkReal x8238=((1.0)*gconst2*x8231);
evalcond[0]=(((r22*x8232))+((r21*x8235))+(((-1.0)*r20*x8238)));
evalcond[1]=(((r12*x8232))+cj0+((r11*x8235))+(((-1.0)*r10*x8238)));
evalcond[2]=(((r02*x8232))+(((-1.0)*sj0))+((r01*x8235))+(((-1.0)*r00*x8238)));
evalcond[3]=(((r20*x8236))+(((-1.0)*sj1*sj2))+((r22*x8231))+((cj1*cj2))+(((-1.0)*r21*x8237)));
evalcond[4]=(((r02*x8231))+((cj0*x8233))+((cj0*x8234))+((r00*x8236))+(((-1.0)*r01*x8237)));
evalcond[5]=(((r12*x8231))+(((-1.0)*r11*x8237))+((r10*x8236))+((sj0*x8233))+((sj0*x8234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8239=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8239.value)))+(x8240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8241=IKcos(j4);
IkReal x8242=IKsin(j4);
IkReal x8243=(cj2*sj1);
IkReal x8244=(cj1*sj2);
IkReal x8245=(gconst1*x8241);
IkReal x8246=(gconst2*x8242);
IkReal x8247=((1.0)*gconst1*x8242);
IkReal x8248=((1.0)*gconst2*x8241);
evalcond[0]=((((-1.0)*r20*x8248))+((r21*x8245))+((r22*x8242)));
evalcond[1]=(cj0+(((-1.0)*r10*x8248))+((r11*x8245))+((r12*x8242)));
evalcond[2]=((((-1.0)*r00*x8248))+(((-1.0)*sj0))+((r02*x8242))+((r01*x8245)));
evalcond[3]=(((r20*x8246))+(((-1.0)*r21*x8247))+(((-1.0)*sj1*sj2))+((r22*x8241))+((cj1*cj2)));
evalcond[4]=(((r02*x8241))+((cj0*x8243))+((cj0*x8244))+(((-1.0)*r01*x8247))+((r00*x8246)));
evalcond[5]=(((r10*x8246))+(((-1.0)*r11*x8247))+((sj0*x8243))+((sj0*x8244))+((r12*x8241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8249=((-1.0)*r20);
IkReal x8250=x7633;
CheckValue<IkReal> x8252 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8249),IKFAST_ATAN2_MAGTHRESH);
if(!x8252.valid){
continue;
}
IkReal x8251=((-1.0)*(x8252.value));
sj5=gconst1;
cj5=gconst2;
j5=x8251;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8251;
IkReal gconst1=(r21*x8250);
IkReal gconst2=(x8249*x8250);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8253=((-1.0)*r20);
IkReal x8254=x7633;
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8253),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
IkReal x8255=((-1.0)*(x8256.value));
sj5=gconst1;
cj5=gconst2;
j5=x8255;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8255;
IkReal gconst1=(r21*x8254);
IkReal gconst2=(x8253*x8254);
CheckValue<IkReal> x8264=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8264.valid){
continue;
}
IkReal x8257=x8264.value;
IkReal x8258=(cj3*x8257);
IkReal x8259=(r11*x8258);
IkReal x8260=(r01*x8258);
IkReal x8261=(r00*x8258);
IkReal x8262=(r10*x8258);
IkReal x8263=(r20*r21*x8258);
j4eval[0]=IKsign((((r10*r20*r21*x8260))+((cj3*r02*r12))+((r00*r20*r21*x8259))+((r10*x8261*(r20*r20)))+((r01*x8259*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8265=gconst2*gconst2;
IkReal x8266=gconst1*gconst1;
IkReal x8267=((1.0)*r02);
IkReal x8268=(cj3*r01);
IkReal x8269=(gconst1*gconst2);
IkReal x8270=(cj3*r10);
IkReal x8271=((1.0)*r00);
IkReal x8272=(r10*sj3);
IkReal x8273=(r11*sj3);
IkReal x8274=(cj3*r11);
CheckValue<IkReal> x8275=IKPowWithIntegerCheck(IKsign((((r01*x8269*x8272))+((r00*x8269*x8273))+(((-1.0)*r12*sj3*x8267))+(((-1.0)*x8265*x8271*x8272))+(((-1.0)*r01*x8266*x8273)))),-1);
if(!x8275.valid){
continue;
}
CheckValue<IkReal> x8276 = IKatan2WithCheck(IkReal((((r11*x8268*x8269))+((r10*x8266*x8268))+(((-1.0)*x8269*x8270*x8271))+(((-1.0)*x8265*x8271*x8274)))),IkReal(((((-1.0)*gconst1*x8267*x8270))+(((-1.0)*gconst2*x8267*x8274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8275.value)))+(x8276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8277=IKcos(j4);
IkReal x8278=IKsin(j4);
IkReal x8279=(cj1*cj2);
IkReal x8280=(cj3*gconst1);
IkReal x8281=(gconst2*sj3);
IkReal x8282=(gconst1*sj3);
IkReal x8283=((1.0)*sj2);
IkReal x8284=(cj2*sj1);
IkReal x8285=(cj3*gconst2);
IkReal x8286=(sj1*x8283);
IkReal x8287=((1.0)*x8278);
IkReal x8288=(gconst1*x8277);
IkReal x8289=((1.0)*x8277);
IkReal x8290=(cj3*x8277);
IkReal x8291=(x8278*x8285);
evalcond[0]=(((r21*x8288))+(((-1.0)*gconst2*r20*x8289))+((r22*x8278)));
evalcond[1]=((((-1.0)*gconst2*r00*x8289))+((r01*x8288))+((r02*x8278)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8289))+((r11*x8288))+((r12*x8278)));
evalcond[3]=(((r10*x8282))+((r10*x8291))+((r11*x8281))+(((-1.0)*r11*x8280*x8287))+((r12*x8290)));
evalcond[4]=(((r10*x8280))+(((-1.0)*r12*sj3*x8289))+(((-1.0)*r10*x8281*x8287))+((r11*x8285))+((r11*x8278*x8282)));
evalcond[5]=((((-1.0)*r00*x8281*x8287))+((r01*x8278*x8282))+((r00*x8280))+((r01*x8285))+((cj1*sj2))+(((-1.0)*r02*sj3*x8289))+x8284);
evalcond[6]=(((r00*x8282))+((r00*x8291))+((r01*x8281))+(((-1.0)*r01*x8280*x8287))+((r02*x8290))+(((-1.0)*x8286))+x8279);
evalcond[7]=(((r21*x8285))+(((-1.0)*r22*sj3*x8289))+((r21*x8278*x8282))+((r20*x8280))+(((-1.0)*r20*x8281*x8287))+(((-1.0)*x8286))+x8279);
evalcond[8]=(((r21*x8281))+(((-1.0)*x8284))+(((-1.0)*r21*x8280*x8287))+(((-1.0)*cj1*x8283))+((r20*x8291))+((r20*x8282))+((r22*x8290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8292=gconst1*gconst1;
IkReal x8293=gconst2*gconst2;
IkReal x8294=((1.0)*r10);
IkReal x8295=(r01*r11);
IkReal x8296=(r02*sj3);
IkReal x8297=((1.0)*r11);
IkReal x8298=(gconst1*gconst2*sj3);
IkReal x8299=(r00*x8293);
IkReal x8300=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x8297*x8299))+((r01*r10*sj3*x8292))+((x8295*x8298))+(((-1.0)*r00*x8294*x8298)))),IkReal(((((-1.0)*gconst2*x8296*x8297))+(((-1.0)*gconst1*x8294*x8296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
CheckValue<IkReal> x8302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8297*x8300))+(((-1.0)*r01*x8294*x8300))+((cj3*x8292*x8295))+((cj3*r02*r12))+((cj3*r10*x8299)))),-1);
if(!x8302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8301.value)+(((1.5707963267949)*(x8302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8303=IKcos(j4);
IkReal x8304=IKsin(j4);
IkReal x8305=(cj1*cj2);
IkReal x8306=(cj3*gconst1);
IkReal x8307=(gconst2*sj3);
IkReal x8308=(gconst1*sj3);
IkReal x8309=((1.0)*sj2);
IkReal x8310=(cj2*sj1);
IkReal x8311=(cj3*gconst2);
IkReal x8312=(sj1*x8309);
IkReal x8313=((1.0)*x8304);
IkReal x8314=(gconst1*x8303);
IkReal x8315=((1.0)*x8303);
IkReal x8316=(cj3*x8303);
IkReal x8317=(x8304*x8311);
evalcond[0]=(((r22*x8304))+((r21*x8314))+(((-1.0)*gconst2*r20*x8315)));
evalcond[1]=(((r02*x8304))+((r01*x8314))+(((-1.0)*gconst2*r00*x8315)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8315))+((r12*x8304))+((r11*x8314)));
evalcond[3]=(((r10*x8317))+((r10*x8308))+((r11*x8307))+(((-1.0)*r11*x8306*x8313))+((r12*x8316)));
evalcond[4]=((((-1.0)*r10*x8307*x8313))+((r11*x8304*x8308))+((r10*x8306))+((r11*x8311))+(((-1.0)*r12*sj3*x8315)));
evalcond[5]=(x8310+((r01*x8311))+(((-1.0)*r02*sj3*x8315))+((cj1*sj2))+((r00*x8306))+((r01*x8304*x8308))+(((-1.0)*r00*x8307*x8313)));
evalcond[6]=(x8305+((r00*x8317))+((r00*x8308))+((r01*x8307))+(((-1.0)*x8312))+(((-1.0)*r01*x8306*x8313))+((r02*x8316)));
evalcond[7]=(x8305+(((-1.0)*r20*x8307*x8313))+((r21*x8304*x8308))+(((-1.0)*x8312))+((r21*x8311))+((r20*x8306))+(((-1.0)*r22*sj3*x8315)));
evalcond[8]=(((r20*x8317))+((r21*x8307))+(((-1.0)*r21*x8306*x8313))+(((-1.0)*cj1*x8309))+((r20*x8308))+((r22*x8316))+(((-1.0)*x8310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8318.value)))+(x8319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8320=IKcos(j4);
IkReal x8321=IKsin(j4);
IkReal x8322=(cj1*cj2);
IkReal x8323=(cj3*gconst1);
IkReal x8324=(gconst2*sj3);
IkReal x8325=(gconst1*sj3);
IkReal x8326=((1.0)*sj2);
IkReal x8327=(cj2*sj1);
IkReal x8328=(cj3*gconst2);
IkReal x8329=(sj1*x8326);
IkReal x8330=((1.0)*x8321);
IkReal x8331=(gconst1*x8320);
IkReal x8332=((1.0)*x8320);
IkReal x8333=(cj3*x8320);
IkReal x8334=(x8321*x8328);
evalcond[0]=(((r21*x8331))+((r22*x8321))+(((-1.0)*gconst2*r20*x8332)));
evalcond[1]=(((r02*x8321))+((r01*x8331))+(((-1.0)*gconst2*r00*x8332)));
evalcond[2]=((1.0)+((r12*x8321))+((r11*x8331))+(((-1.0)*gconst2*r10*x8332)));
evalcond[3]=(((r10*x8325))+((r10*x8334))+((r12*x8333))+(((-1.0)*r11*x8323*x8330))+((r11*x8324)));
evalcond[4]=((((-1.0)*r12*sj3*x8332))+((r11*x8321*x8325))+((r10*x8323))+(((-1.0)*r10*x8324*x8330))+((r11*x8328)));
evalcond[5]=(x8327+((r01*x8321*x8325))+((cj1*sj2))+(((-1.0)*r00*x8324*x8330))+((r01*x8328))+((r00*x8323))+(((-1.0)*r02*sj3*x8332)));
evalcond[6]=(x8322+(((-1.0)*x8329))+((r00*x8334))+((r01*x8324))+((r00*x8325))+(((-1.0)*r01*x8323*x8330))+((r02*x8333)));
evalcond[7]=(x8322+(((-1.0)*r20*x8324*x8330))+(((-1.0)*r22*sj3*x8332))+(((-1.0)*x8329))+((r21*x8328))+((r21*x8321*x8325))+((r20*x8323)));
evalcond[8]=(((r22*x8333))+(((-1.0)*r21*x8323*x8330))+(((-1.0)*cj1*x8326))+((r21*x8324))+((r20*x8334))+(((-1.0)*x8327))+((r20*x8325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8335=((-1.0)*r20);
IkReal x8336=x7633;
CheckValue<IkReal> x8338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8335),IKFAST_ATAN2_MAGTHRESH);
if(!x8338.valid){
continue;
}
IkReal x8337=((-1.0)*(x8338.value));
sj5=gconst1;
cj5=gconst2;
j5=x8337;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8337;
IkReal gconst1=(r21*x8336);
IkReal gconst2=(x8335*x8336);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8339=((-1.0)*r20);
IkReal x8340=x7633;
CheckValue<IkReal> x8342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8339),IKFAST_ATAN2_MAGTHRESH);
if(!x8342.valid){
continue;
}
IkReal x8341=((-1.0)*(x8342.value));
sj5=gconst1;
cj5=gconst2;
j5=x8341;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8341;
IkReal gconst1=(r21*x8340);
IkReal gconst2=(x8339*x8340);
CheckValue<IkReal> x8350=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8350.valid){
continue;
}
IkReal x8343=x8350.value;
IkReal x8344=(cj3*x8343);
IkReal x8345=(r11*x8344);
IkReal x8346=(r01*x8344);
IkReal x8347=(r00*x8344);
IkReal x8348=(r10*x8344);
IkReal x8349=(r20*r21*x8344);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x8347*(r20*r20)))+((r01*x8345*(r21*r21)))+((r10*r20*r21*x8346))+((r00*r20*r21*x8345))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8351=gconst2*gconst2;
IkReal x8352=gconst1*gconst1;
IkReal x8353=((1.0)*r02);
IkReal x8354=(cj3*r01);
IkReal x8355=(gconst1*gconst2);
IkReal x8356=(cj3*r10);
IkReal x8357=((1.0)*r00);
IkReal x8358=(r10*sj3);
IkReal x8359=(r11*sj3);
IkReal x8360=(cj3*r11);
CheckValue<IkReal> x8361=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8351*x8357*x8358))+(((-1.0)*r01*x8352*x8359))+((r01*x8355*x8358))+(((-1.0)*r12*sj3*x8353))+((r00*x8355*x8359)))),-1);
if(!x8361.valid){
continue;
}
CheckValue<IkReal> x8362 = IKatan2WithCheck(IkReal(((((-1.0)*x8351*x8357*x8360))+((r10*x8352*x8354))+((r11*x8354*x8355))+(((-1.0)*x8355*x8356*x8357)))),IkReal(((((-1.0)*gconst2*x8353*x8360))+(((-1.0)*gconst1*x8353*x8356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8361.value)))+(x8362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8363=IKcos(j4);
IkReal x8364=IKsin(j4);
IkReal x8365=(cj3*gconst1);
IkReal x8366=(gconst2*sj3);
IkReal x8367=(sj1*sj2);
IkReal x8368=(gconst1*sj3);
IkReal x8369=((1.0)*cj1);
IkReal x8370=(cj3*gconst2);
IkReal x8371=(sj2*x8369);
IkReal x8372=((1.0)*cj2*sj1);
IkReal x8373=((1.0)*x8364);
IkReal x8374=(gconst1*x8363);
IkReal x8375=((1.0)*x8363);
IkReal x8376=(cj3*x8363);
IkReal x8377=(x8364*x8370);
IkReal x8378=(x8372+x8371);
evalcond[0]=(((r22*x8364))+((r21*x8374))+(((-1.0)*gconst2*r20*x8375)));
evalcond[1]=((((-1.0)*gconst2*r00*x8375))+((r02*x8364))+((r01*x8374)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8375))+((r12*x8364))+((r11*x8374)));
evalcond[3]=(((r10*x8377))+((r12*x8376))+((r10*x8368))+((r11*x8366))+(((-1.0)*r11*x8365*x8373)));
evalcond[4]=((((-1.0)*r10*x8366*x8373))+(((-1.0)*r12*sj3*x8375))+((r11*x8370))+((r11*x8364*x8368))+((r10*x8365)));
evalcond[5]=(x8367+(((-1.0)*cj2*x8369))+((r00*x8377))+((r01*x8366))+(((-1.0)*r01*x8365*x8373))+((r00*x8368))+((r02*x8376)));
evalcond[6]=(((r21*x8364*x8368))+(((-1.0)*r20*x8366*x8373))+(((-1.0)*x8367))+((r21*x8370))+((r20*x8365))+((cj1*cj2))+(((-1.0)*r22*sj3*x8375)));
evalcond[7]=((((-1.0)*r21*x8365*x8373))+((r20*x8377))+(((-1.0)*x8378))+((r20*x8368))+((r21*x8366))+((r22*x8376)));
evalcond[8]=((((-1.0)*r02*sj3*x8375))+((r01*x8364*x8368))+((r00*x8365))+(((-1.0)*x8378))+(((-1.0)*r00*x8366*x8373))+((r01*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8379=gconst1*gconst1;
IkReal x8380=gconst2*gconst2;
IkReal x8381=((1.0)*r10);
IkReal x8382=(r01*r11);
IkReal x8383=(r02*sj3);
IkReal x8384=((1.0)*r11);
IkReal x8385=(gconst1*gconst2*sj3);
IkReal x8386=(r00*x8380);
IkReal x8387=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign((((cj3*r10*x8386))+((cj3*r02*r12))+(((-1.0)*r01*x8381*x8387))+(((-1.0)*r00*x8384*x8387))+((cj3*x8379*x8382)))),-1);
if(!x8388.valid){
continue;
}
CheckValue<IkReal> x8389 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8381*x8385))+((r01*r10*sj3*x8379))+(((-1.0)*sj3*x8384*x8386))+((x8382*x8385)))),IkReal(((((-1.0)*gconst1*x8381*x8383))+(((-1.0)*gconst2*x8383*x8384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8388.value)))+(x8389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8390=IKcos(j4);
IkReal x8391=IKsin(j4);
IkReal x8392=(cj3*gconst1);
IkReal x8393=(gconst2*sj3);
IkReal x8394=(sj1*sj2);
IkReal x8395=(gconst1*sj3);
IkReal x8396=((1.0)*cj1);
IkReal x8397=(cj3*gconst2);
IkReal x8398=(sj2*x8396);
IkReal x8399=((1.0)*cj2*sj1);
IkReal x8400=((1.0)*x8391);
IkReal x8401=(gconst1*x8390);
IkReal x8402=((1.0)*x8390);
IkReal x8403=(cj3*x8390);
IkReal x8404=(x8391*x8397);
IkReal x8405=(x8398+x8399);
evalcond[0]=((((-1.0)*gconst2*r20*x8402))+((r22*x8391))+((r21*x8401)));
evalcond[1]=(((r01*x8401))+(((-1.0)*gconst2*r00*x8402))+((r02*x8391)));
evalcond[2]=((-1.0)+((r11*x8401))+((r12*x8391))+(((-1.0)*gconst2*r10*x8402)));
evalcond[3]=((((-1.0)*r11*x8392*x8400))+((r12*x8403))+((r10*x8395))+((r10*x8404))+((r11*x8393)));
evalcond[4]=((((-1.0)*r10*x8393*x8400))+(((-1.0)*r12*sj3*x8402))+((r10*x8392))+((r11*x8397))+((r11*x8391*x8395)));
evalcond[5]=(x8394+((r00*x8404))+(((-1.0)*cj2*x8396))+(((-1.0)*r01*x8392*x8400))+((r02*x8403))+((r00*x8395))+((r01*x8393)));
evalcond[6]=(((r20*x8392))+(((-1.0)*r20*x8393*x8400))+(((-1.0)*x8394))+((r21*x8397))+((cj1*cj2))+(((-1.0)*r22*sj3*x8402))+((r21*x8391*x8395)));
evalcond[7]=(((r20*x8395))+(((-1.0)*x8405))+((r22*x8403))+((r21*x8393))+(((-1.0)*r21*x8392*x8400))+((r20*x8404)));
evalcond[8]=((((-1.0)*x8405))+(((-1.0)*r02*sj3*x8402))+((r01*x8391*x8395))+((r00*x8392))+((r01*x8397))+(((-1.0)*r00*x8393*x8400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8406=((1.0)*gconst2);
CheckValue<IkReal> x8407 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8406))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8407.valid){
continue;
}
CheckValue<IkReal> x8408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8406))+(((-1.0)*gconst1*r00)))),-1);
if(!x8408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8407.value)+(((1.5707963267949)*(x8408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8409=IKcos(j4);
IkReal x8410=IKsin(j4);
IkReal x8411=(cj3*gconst1);
IkReal x8412=(gconst2*sj3);
IkReal x8413=(sj1*sj2);
IkReal x8414=(gconst1*sj3);
IkReal x8415=((1.0)*cj1);
IkReal x8416=(cj3*gconst2);
IkReal x8417=(sj2*x8415);
IkReal x8418=((1.0)*cj2*sj1);
IkReal x8419=((1.0)*x8410);
IkReal x8420=(gconst1*x8409);
IkReal x8421=((1.0)*x8409);
IkReal x8422=(cj3*x8409);
IkReal x8423=(x8410*x8416);
IkReal x8424=(x8418+x8417);
evalcond[0]=(((r21*x8420))+(((-1.0)*gconst2*r20*x8421))+((r22*x8410)));
evalcond[1]=(((r02*x8410))+(((-1.0)*gconst2*r00*x8421))+((r01*x8420)));
evalcond[2]=((-1.0)+((r12*x8410))+((r11*x8420))+(((-1.0)*gconst2*r10*x8421)));
evalcond[3]=(((r10*x8423))+((r11*x8412))+((r12*x8422))+((r10*x8414))+(((-1.0)*r11*x8411*x8419)));
evalcond[4]=(((r11*x8416))+((r10*x8411))+(((-1.0)*r12*sj3*x8421))+(((-1.0)*r10*x8412*x8419))+((r11*x8410*x8414)));
evalcond[5]=(((r02*x8422))+x8413+((r00*x8414))+((r01*x8412))+((r00*x8423))+(((-1.0)*r01*x8411*x8419))+(((-1.0)*cj2*x8415)));
evalcond[6]=((((-1.0)*r22*sj3*x8421))+(((-1.0)*x8413))+(((-1.0)*r20*x8412*x8419))+((r20*x8411))+((r21*x8416))+((r21*x8410*x8414))+((cj1*cj2)));
evalcond[7]=((((-1.0)*r21*x8411*x8419))+((r20*x8423))+((r20*x8414))+((r21*x8412))+(((-1.0)*x8424))+((r22*x8422)));
evalcond[8]=((((-1.0)*r00*x8412*x8419))+(((-1.0)*r02*sj3*x8421))+((r00*x8411))+((r01*x8410*x8414))+(((-1.0)*x8424))+((r01*x8416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8425=((-1.0)*r20);
IkReal x8426=x7633;
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8425),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
IkReal x8427=((-1.0)*(x8428.value));
sj5=gconst1;
cj5=gconst2;
j5=x8427;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8427;
IkReal gconst1=(r21*x8426);
IkReal gconst2=(x8425*x8426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8429=((-1.0)*r20);
IkReal x8430=x7633;
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8429),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
IkReal x8431=((-1.0)*(x8432.value));
sj5=gconst1;
cj5=gconst2;
j5=x8431;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8431;
IkReal gconst1=(r21*x8430);
IkReal gconst2=(x8429*x8430);
CheckValue<IkReal> x8440=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8440.valid){
continue;
}
IkReal x8433=x8440.value;
IkReal x8434=(cj3*x8433);
IkReal x8435=(r11*x8434);
IkReal x8436=(r01*x8434);
IkReal x8437=(r00*x8434);
IkReal x8438=(r10*x8434);
IkReal x8439=(r20*r21*x8434);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x8435*(r21*r21)))+((r00*r20*r21*x8435))+((r10*r20*r21*x8436))+((r10*x8437*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8441=gconst1*gconst1;
IkReal x8442=gconst2*gconst2;
IkReal x8443=(cj3*r11);
IkReal x8444=((1.0)*r12);
IkReal x8445=(gconst1*gconst2);
IkReal x8446=(r10*sj3);
IkReal x8447=(r11*sj3);
IkReal x8448=((1.0)*cj3*r10);
CheckValue<IkReal> x8449 = IKatan2WithCheck(IkReal((((r00*x8441*x8443))+((r01*x8443*x8445))+(((-1.0)*r00*x8445*x8448))+(((-1.0)*r01*x8442*x8448)))),IkReal(((((-1.0)*cj3*gconst2*r01*x8444))+(((-1.0)*cj3*gconst1*r00*x8444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8441*x8447))+(((-1.0)*r02*sj3*x8444))+(((-1.0)*r00*x8442*x8446))+((r00*x8445*x8447))+((r01*x8445*x8446)))),-1);
if(!x8450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8449.value)+(((1.5707963267949)*(x8450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8451=IKcos(j4);
IkReal x8452=IKsin(j4);
IkReal x8453=(cj1*cj2);
IkReal x8454=(cj3*gconst1);
IkReal x8455=(gconst2*sj3);
IkReal x8456=(gconst1*sj3);
IkReal x8457=((1.0)*sj2);
IkReal x8458=(cj2*sj1);
IkReal x8459=(cj3*gconst2);
IkReal x8460=(sj1*x8457);
IkReal x8461=((1.0)*x8452);
IkReal x8462=(gconst1*x8451);
IkReal x8463=((1.0)*x8451);
IkReal x8464=(cj3*x8451);
IkReal x8465=(x8452*x8459);
evalcond[0]=(((r22*x8452))+((r21*x8462))+(((-1.0)*gconst2*r20*x8463)));
evalcond[1]=(((r11*x8462))+(((-1.0)*gconst2*r10*x8463))+((r12*x8452)));
evalcond[2]=((-1.0)+((r01*x8462))+((r02*x8452))+(((-1.0)*gconst2*r00*x8463)));
evalcond[3]=(((r00*x8465))+((r02*x8464))+((r01*x8455))+(((-1.0)*r01*x8454*x8461))+((r00*x8456)));
evalcond[4]=(((r01*x8452*x8456))+(((-1.0)*r02*sj3*x8463))+(((-1.0)*r00*x8455*x8461))+((r01*x8459))+((r00*x8454)));
evalcond[5]=(x8458+((r11*x8459))+((cj1*sj2))+((r11*x8452*x8456))+(((-1.0)*r12*sj3*x8463))+((r10*x8454))+(((-1.0)*r10*x8455*x8461)));
evalcond[6]=(((r12*x8464))+x8453+(((-1.0)*r11*x8454*x8461))+((r11*x8455))+(((-1.0)*x8460))+((r10*x8465))+((r10*x8456)));
evalcond[7]=(x8453+((r21*x8459))+(((-1.0)*x8460))+(((-1.0)*r20*x8455*x8461))+((r20*x8454))+((r21*x8452*x8456))+(((-1.0)*r22*sj3*x8463)));
evalcond[8]=((((-1.0)*r21*x8454*x8461))+((r21*x8455))+((r22*x8464))+(((-1.0)*cj1*x8457))+(((-1.0)*x8458))+((r20*x8456))+((r20*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8466=gconst1*gconst1;
IkReal x8467=gconst2*gconst2;
IkReal x8468=(r00*sj3);
IkReal x8469=(gconst1*gconst2);
IkReal x8470=((1.0)*r10);
IkReal x8471=(r01*sj3);
IkReal x8472=((1.0)*r12);
IkReal x8473=(cj3*r01);
IkReal x8474=(cj3*r00);
IkReal x8475=(r11*x8466);
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(((((-1.0)*x8467*x8470*x8471))+(((-1.0)*x8468*x8469*x8470))+((x8468*x8475))+((r11*x8469*x8471)))),IkReal(((((-1.0)*gconst2*x8471*x8472))+(((-1.0)*gconst1*x8468*x8472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
CheckValue<IkReal> x8477=IKPowWithIntegerCheck(IKsign((((r10*x8467*x8474))+((cj3*r02*r12))+((x8473*x8475))+(((-1.0)*r11*x8469*x8474))+(((-1.0)*x8469*x8470*x8473)))),-1);
if(!x8477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8476.value)+(((1.5707963267949)*(x8477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8478=IKcos(j4);
IkReal x8479=IKsin(j4);
IkReal x8480=(cj1*cj2);
IkReal x8481=(cj3*gconst1);
IkReal x8482=(gconst2*sj3);
IkReal x8483=(gconst1*sj3);
IkReal x8484=((1.0)*sj2);
IkReal x8485=(cj2*sj1);
IkReal x8486=(cj3*gconst2);
IkReal x8487=(sj1*x8484);
IkReal x8488=((1.0)*x8479);
IkReal x8489=(gconst1*x8478);
IkReal x8490=((1.0)*x8478);
IkReal x8491=(cj3*x8478);
IkReal x8492=(x8479*x8486);
evalcond[0]=((((-1.0)*gconst2*r20*x8490))+((r22*x8479))+((r21*x8489)));
evalcond[1]=(((r12*x8479))+(((-1.0)*gconst2*r10*x8490))+((r11*x8489)));
evalcond[2]=((-1.0)+((r01*x8489))+(((-1.0)*gconst2*r00*x8490))+((r02*x8479)));
evalcond[3]=(((r00*x8492))+((r01*x8482))+(((-1.0)*r01*x8481*x8488))+((r02*x8491))+((r00*x8483)));
evalcond[4]=(((r01*x8486))+(((-1.0)*r02*sj3*x8490))+((r01*x8479*x8483))+(((-1.0)*r00*x8482*x8488))+((r00*x8481)));
evalcond[5]=(((r10*x8481))+x8485+((r11*x8479*x8483))+(((-1.0)*r10*x8482*x8488))+((cj1*sj2))+(((-1.0)*r12*sj3*x8490))+((r11*x8486)));
evalcond[6]=(((r10*x8483))+(((-1.0)*x8487))+((r10*x8492))+x8480+(((-1.0)*r11*x8481*x8488))+((r12*x8491))+((r11*x8482)));
evalcond[7]=((((-1.0)*x8487))+(((-1.0)*r22*sj3*x8490))+x8480+((r21*x8479*x8483))+(((-1.0)*r20*x8482*x8488))+((r20*x8481))+((r21*x8486)));
evalcond[8]=((((-1.0)*cj1*x8484))+((r22*x8491))+(((-1.0)*x8485))+((r20*x8492))+((r20*x8483))+(((-1.0)*r21*x8481*x8488))+((r21*x8482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8493.value)+(((1.5707963267949)*(x8494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8495=IKcos(j4);
IkReal x8496=IKsin(j4);
IkReal x8497=(cj1*cj2);
IkReal x8498=(cj3*gconst1);
IkReal x8499=(gconst2*sj3);
IkReal x8500=(gconst1*sj3);
IkReal x8501=((1.0)*sj2);
IkReal x8502=(cj2*sj1);
IkReal x8503=(cj3*gconst2);
IkReal x8504=(sj1*x8501);
IkReal x8505=((1.0)*x8496);
IkReal x8506=(gconst1*x8495);
IkReal x8507=((1.0)*x8495);
IkReal x8508=(cj3*x8495);
IkReal x8509=(x8496*x8503);
evalcond[0]=(((r21*x8506))+((r22*x8496))+(((-1.0)*gconst2*r20*x8507)));
evalcond[1]=(((r11*x8506))+(((-1.0)*gconst2*r10*x8507))+((r12*x8496)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x8507))+((r02*x8496))+((r01*x8506)));
evalcond[3]=(((r02*x8508))+(((-1.0)*r01*x8498*x8505))+((r00*x8509))+((r00*x8500))+((r01*x8499)));
evalcond[4]=(((r00*x8498))+((r01*x8496*x8500))+(((-1.0)*r00*x8499*x8505))+(((-1.0)*r02*sj3*x8507))+((r01*x8503)));
evalcond[5]=(((r10*x8498))+(((-1.0)*r10*x8499*x8505))+(((-1.0)*r12*sj3*x8507))+x8502+((r11*x8503))+((cj1*sj2))+((r11*x8496*x8500)));
evalcond[6]=(((r10*x8509))+((r10*x8500))+x8497+(((-1.0)*r11*x8498*x8505))+((r12*x8508))+(((-1.0)*x8504))+((r11*x8499)));
evalcond[7]=((((-1.0)*r20*x8499*x8505))+x8497+((r21*x8496*x8500))+(((-1.0)*r22*sj3*x8507))+((r21*x8503))+(((-1.0)*x8504))+((r20*x8498)));
evalcond[8]=(((r22*x8508))+(((-1.0)*cj1*x8501))+(((-1.0)*x8502))+(((-1.0)*r21*x8498*x8505))+((r21*x8499))+((r20*x8509))+((r20*x8500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8510=((-1.0)*r20);
IkReal x8511=x7633;
CheckValue<IkReal> x8513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8510),IKFAST_ATAN2_MAGTHRESH);
if(!x8513.valid){
continue;
}
IkReal x8512=((-1.0)*(x8513.value));
sj5=gconst1;
cj5=gconst2;
j5=x8512;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8512;
IkReal gconst1=(r21*x8511);
IkReal gconst2=(x8510*x8511);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8514=((-1.0)*r20);
IkReal x8515=x7633;
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8514),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
IkReal x8516=((-1.0)*(x8517.value));
sj5=gconst1;
cj5=gconst2;
j5=x8516;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8516;
IkReal gconst1=(r21*x8515);
IkReal gconst2=(x8514*x8515);
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8525.valid){
continue;
}
IkReal x8518=x8525.value;
IkReal x8519=(cj3*x8518);
IkReal x8520=(r11*x8519);
IkReal x8521=(r01*x8519);
IkReal x8522=(r00*x8519);
IkReal x8523=(r10*x8519);
IkReal x8524=(r20*r21*x8519);
j4eval[0]=IKsign((((r00*r20*r21*x8520))+((cj3*r02*r12))+((r10*r20*r21*x8521))+((r01*x8520*(r21*r21)))+((r10*x8522*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8526=gconst1*gconst1;
IkReal x8527=gconst2*gconst2;
IkReal x8528=(cj3*r11);
IkReal x8529=((1.0)*r12);
IkReal x8530=(gconst1*gconst2);
IkReal x8531=(r10*sj3);
IkReal x8532=(r11*sj3);
IkReal x8533=((1.0)*cj3*r10);
CheckValue<IkReal> x8534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8526*x8532))+(((-1.0)*r00*x8527*x8531))+((r01*x8530*x8531))+(((-1.0)*r02*sj3*x8529))+((r00*x8530*x8532)))),-1);
if(!x8534.valid){
continue;
}
CheckValue<IkReal> x8535 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x8527*x8533))+((r01*x8528*x8530))+((r00*x8526*x8528))+(((-1.0)*r00*x8530*x8533)))),IkReal(((((-1.0)*cj3*gconst2*r01*x8529))+(((-1.0)*cj3*gconst1*r00*x8529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8534.value)))+(x8535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8536=IKcos(j4);
IkReal x8537=IKsin(j4);
IkReal x8538=(cj3*gconst1);
IkReal x8539=(r20*sj3);
IkReal x8540=(gconst1*sj3);
IkReal x8541=(sj1*sj2);
IkReal x8542=((1.0)*cj1);
IkReal x8543=(gconst2*r11);
IkReal x8544=(gconst2*r10);
IkReal x8545=(gconst2*r00);
IkReal x8546=(gconst2*sj3);
IkReal x8547=(cj3*gconst2);
IkReal x8548=(sj2*x8542);
IkReal x8549=((1.0)*cj2*sj1);
IkReal x8550=((1.0)*x8537);
IkReal x8551=(gconst1*x8536);
IkReal x8552=(r22*x8536);
IkReal x8553=((1.0)*x8536);
IkReal x8554=(cj3*x8536);
IkReal x8555=(x8537*x8547);
IkReal x8556=(x8549+x8548);
evalcond[0]=(((r21*x8551))+((r22*x8537))+(((-1.0)*gconst2*r20*x8553)));
evalcond[1]=(((r11*x8551))+(((-1.0)*x8544*x8553))+((r12*x8537)));
evalcond[2]=((1.0)+((r01*x8551))+(((-1.0)*x8545*x8553))+((r02*x8537)));
evalcond[3]=(((r00*x8540))+(((-1.0)*r01*x8538*x8550))+((r01*x8546))+((r02*x8554))+((cj3*x8537*x8545)));
evalcond[4]=(((r00*x8538))+((r01*x8547))+(((-1.0)*sj3*x8545*x8550))+(((-1.0)*r02*sj3*x8553))+((r01*x8537*x8540)));
evalcond[5]=(((r12*x8554))+x8541+((r10*x8540))+(((-1.0)*r11*x8538*x8550))+(((-1.0)*cj2*x8542))+((cj3*x8537*x8544))+((sj3*x8543)));
evalcond[6]=(((r21*x8537*x8540))+(((-1.0)*sj3*x8552))+((r20*x8538))+((r21*x8547))+((cj1*cj2))+(((-1.0)*gconst2*x8539*x8550))+(((-1.0)*x8541)));
evalcond[7]=(((r20*x8555))+((gconst1*x8539))+((r21*x8546))+(((-1.0)*r21*x8538*x8550))+(((-1.0)*x8556))+((cj3*x8552)));
evalcond[8]=(((r11*x8537*x8540))+(((-1.0)*sj3*x8544*x8550))+((r10*x8538))+(((-1.0)*r12*sj3*x8553))+((cj3*x8543))+(((-1.0)*x8556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8557=gconst1*gconst1;
IkReal x8558=gconst2*gconst2;
IkReal x8559=(r00*sj3);
IkReal x8560=(gconst1*gconst2);
IkReal x8561=((1.0)*r10);
IkReal x8562=(r01*sj3);
IkReal x8563=((1.0)*r12);
IkReal x8564=(cj3*r01);
IkReal x8565=(cj3*r00);
IkReal x8566=(r11*x8557);
CheckValue<IkReal> x8567 = IKatan2WithCheck(IkReal((((r11*x8560*x8562))+((x8559*x8566))+(((-1.0)*x8559*x8560*x8561))+(((-1.0)*x8558*x8561*x8562)))),IkReal(((((-1.0)*gconst1*x8559*x8563))+(((-1.0)*gconst2*x8562*x8563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8567.valid){
continue;
}
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((r10*x8558*x8565))+(((-1.0)*r11*x8560*x8565))+((x8564*x8566))+(((-1.0)*x8560*x8561*x8564)))),-1);
if(!x8568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8567.value)+(((1.5707963267949)*(x8568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8569=IKcos(j4);
IkReal x8570=IKsin(j4);
IkReal x8571=(cj3*gconst1);
IkReal x8572=(r20*sj3);
IkReal x8573=(gconst1*sj3);
IkReal x8574=(sj1*sj2);
IkReal x8575=((1.0)*cj1);
IkReal x8576=(gconst2*r11);
IkReal x8577=(gconst2*r10);
IkReal x8578=(gconst2*r00);
IkReal x8579=(gconst2*sj3);
IkReal x8580=(cj3*gconst2);
IkReal x8581=(sj2*x8575);
IkReal x8582=((1.0)*cj2*sj1);
IkReal x8583=((1.0)*x8570);
IkReal x8584=(gconst1*x8569);
IkReal x8585=(r22*x8569);
IkReal x8586=((1.0)*x8569);
IkReal x8587=(cj3*x8569);
IkReal x8588=(x8570*x8580);
IkReal x8589=(x8581+x8582);
evalcond[0]=(((r22*x8570))+((r21*x8584))+(((-1.0)*gconst2*r20*x8586)));
evalcond[1]=((((-1.0)*x8577*x8586))+((r12*x8570))+((r11*x8584)));
evalcond[2]=((1.0)+((r02*x8570))+((r01*x8584))+(((-1.0)*x8578*x8586)));
evalcond[3]=(((r02*x8587))+((r01*x8579))+((r00*x8573))+(((-1.0)*r01*x8571*x8583))+((cj3*x8570*x8578)));
evalcond[4]=((((-1.0)*sj3*x8578*x8583))+((r00*x8571))+((r01*x8580))+(((-1.0)*r02*sj3*x8586))+((r01*x8570*x8573)));
evalcond[5]=((((-1.0)*r11*x8571*x8583))+((sj3*x8576))+x8574+(((-1.0)*cj2*x8575))+((r12*x8587))+((r10*x8573))+((cj3*x8570*x8577)));
evalcond[6]=(((r21*x8570*x8573))+(((-1.0)*gconst2*x8572*x8583))+(((-1.0)*x8574))+((r21*x8580))+((cj1*cj2))+((r20*x8571))+(((-1.0)*sj3*x8585)));
evalcond[7]=(((gconst1*x8572))+((r21*x8579))+((cj3*x8585))+(((-1.0)*x8589))+(((-1.0)*r21*x8571*x8583))+((r20*x8588)));
evalcond[8]=((((-1.0)*x8589))+((cj3*x8576))+(((-1.0)*sj3*x8577*x8583))+(((-1.0)*r12*sj3*x8586))+((r10*x8571))+((r11*x8570*x8573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8590=((1.0)*gconst2);
CheckValue<IkReal> x8591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8590))+(((-1.0)*gconst1*r10)))),-1);
if(!x8591.valid){
continue;
}
CheckValue<IkReal> x8592 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8590))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8591.value)))+(x8592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8593=IKcos(j4);
IkReal x8594=IKsin(j4);
IkReal x8595=(cj3*gconst1);
IkReal x8596=(r20*sj3);
IkReal x8597=(gconst1*sj3);
IkReal x8598=(sj1*sj2);
IkReal x8599=((1.0)*cj1);
IkReal x8600=(gconst2*r11);
IkReal x8601=(gconst2*r10);
IkReal x8602=(gconst2*r00);
IkReal x8603=(gconst2*sj3);
IkReal x8604=(cj3*gconst2);
IkReal x8605=(sj2*x8599);
IkReal x8606=((1.0)*cj2*sj1);
IkReal x8607=((1.0)*x8594);
IkReal x8608=(gconst1*x8593);
IkReal x8609=(r22*x8593);
IkReal x8610=((1.0)*x8593);
IkReal x8611=(cj3*x8593);
IkReal x8612=(x8594*x8604);
IkReal x8613=(x8606+x8605);
evalcond[0]=(((r21*x8608))+(((-1.0)*gconst2*r20*x8610))+((r22*x8594)));
evalcond[1]=((((-1.0)*x8601*x8610))+((r11*x8608))+((r12*x8594)));
evalcond[2]=((1.0)+(((-1.0)*x8602*x8610))+((r01*x8608))+((r02*x8594)));
evalcond[3]=(((r01*x8603))+((r00*x8597))+(((-1.0)*r01*x8595*x8607))+((r02*x8611))+((cj3*x8594*x8602)));
evalcond[4]=(((r01*x8594*x8597))+(((-1.0)*sj3*x8602*x8607))+((r01*x8604))+((r00*x8595))+(((-1.0)*r02*sj3*x8610)));
evalcond[5]=(x8598+((r12*x8611))+((sj3*x8600))+(((-1.0)*cj2*x8599))+((r10*x8597))+(((-1.0)*r11*x8595*x8607))+((cj3*x8594*x8601)));
evalcond[6]=((((-1.0)*x8598))+((r20*x8595))+(((-1.0)*sj3*x8609))+(((-1.0)*gconst2*x8596*x8607))+((cj1*cj2))+((r21*x8604))+((r21*x8594*x8597)));
evalcond[7]=((((-1.0)*r21*x8595*x8607))+((r20*x8612))+((gconst1*x8596))+(((-1.0)*x8613))+((cj3*x8609))+((r21*x8603)));
evalcond[8]=(((r11*x8594*x8597))+((r10*x8595))+(((-1.0)*sj3*x8601*x8607))+(((-1.0)*x8613))+((cj3*x8600))+(((-1.0)*r12*sj3*x8610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8614=((-1.0)*r20);
IkReal x8615=((-1.0)*px);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8614),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
IkReal x8616=((-1.0)*(x8617.value));
sj5=gconst1;
cj5=gconst2;
j5=x8616;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8615);
rxp1_1=(px*r21);
rxp1_2=(r11*x8615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8616;
IkReal gconst1=r21;
IkReal gconst2=x8614;
j4eval[0]=r02;
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8618=((-1.0)*r20);
IkReal x8619=((-1.0)*px);
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal x8620=((-1.0)*(x8621.value));
sj5=gconst1;
cj5=gconst2;
j5=x8620;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8619);
rxp1_1=(px*r21);
rxp1_2=(r11*x8619);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8620;
IkReal gconst1=r21;
IkReal gconst2=x8618;
j4eval[0]=(((sj3*(r21*r21)))+sj3+(((-1.0)*sj3*(r10*r10))));
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8622=((-1.0)*r20);
IkReal x8623=((-1.0)*px);
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8622),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
IkReal x8624=((-1.0)*(x8625.value));
sj5=gconst1;
cj5=gconst2;
j5=x8624;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8623);
rxp1_1=(px*r21);
rxp1_2=(r11*x8623);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8624;
IkReal gconst1=r21;
IkReal gconst2=x8622;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8626=((-1.0)*r20);
IkReal x8627=((-1.0)*px);
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8626),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
IkReal x8628=((-1.0)*(x8629.value));
sj5=gconst1;
cj5=gconst2;
j5=x8628;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8627);
rxp1_1=(px*r21);
rxp1_2=(r11*x8627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8628;
IkReal gconst1=r21;
IkReal gconst2=x8626;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8630=((-1.0)*r20);
IkReal x8631=((-1.0)*px);
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8630),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
IkReal x8632=((-1.0)*(x8633.value));
sj5=gconst1;
cj5=gconst2;
j5=x8632;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8631);
rxp1_1=(px*r21);
rxp1_2=(r11*x8631);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8632;
IkReal gconst1=r21;
IkReal gconst2=x8630;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8634=((-1.0)*r20);
IkReal x8635=((-1.0)*px);
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj5=gconst1;
cj5=gconst2;
j5=x8636;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8635);
rxp1_1=(px*r21);
rxp1_2=(r11*x8635);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8636;
IkReal gconst1=r21;
IkReal gconst2=x8634;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8640=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8640.valid){
continue;
}
IkReal x8638=x8640.value;
IkReal x8639=(sj0*x8638);
sj4array[0]=((((-1.0)*cj1*cj2*x8639))+((sj1*sj2*x8639)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8641=IKcos(j4);
IkReal x8642=IKsin(j4);
IkReal x8643=(gconst1*x8641);
IkReal x8644=((1.0)*gconst2*x8641);
evalcond[0]=(r02*x8641);
evalcond[1]=((((-1.0)*sj0))+((r02*x8642)));
evalcond[2]=(((r21*x8643))+(((-1.0)*r20*x8644)));
evalcond[3]=(((r11*x8643))+(((-1.0)*r10*x8644)));
evalcond[4]=((((-1.0)*gconst1*r21*x8642))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst2*r20*x8642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8646=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8646.valid){
continue;
}
IkReal x8645=x8646.value;
sj4array[0]=(((cj2*sj1*x8645))+((cj1*sj2*x8645)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8647=IKcos(j4);
IkReal x8648=IKsin(j4);
IkReal x8649=((1.0)*sj0);
IkReal x8650=(gconst2*r10);
IkReal x8651=(gconst1*x8647);
IkReal x8652=((1.0)*x8647);
evalcond[0]=(r02*x8647);
evalcond[1]=(((r02*x8648))+(((-1.0)*x8649)));
evalcond[2]=(((r21*x8651))+(((-1.0)*gconst2*r20*x8652)));
evalcond[3]=(((r11*x8651))+(((-1.0)*x8650*x8652)));
evalcond[4]=(((cj1*cj2*sj0))+((x8648*x8650))+(((-1.0)*sj1*sj2*x8649))+(((-1.0)*gconst1*r11*x8648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(r02,-1);
if(!x8653.valid){
continue;
}
sj4array[0]=(sj0*(x8653.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8654=IKcos(j4);
IkReal x8655=IKsin(j4);
IkReal x8656=(gconst2*r10);
IkReal x8657=((1.0)*sj1);
IkReal x8658=(gconst2*r20);
IkReal x8659=((1.0)*x8654);
IkReal x8660=(gconst1*x8654);
IkReal x8661=((1.0)*gconst1*x8655);
evalcond[0]=(r02*x8654);
evalcond[1]=((((-1.0)*x8658*x8659))+((r21*x8660)));
evalcond[2]=((((-1.0)*x8656*x8659))+((r11*x8660)));
evalcond[3]=((((-1.0)*cj2*x8657))+((x8655*x8658))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x8661)));
evalcond[4]=(((cj1*cj2*sj0))+((x8655*x8656))+(((-1.0)*r11*x8661))+(((-1.0)*sj0*sj2*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8662=((-1.0)*r20);
IkReal x8663=((-1.0)*px);
CheckValue<IkReal> x8665 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8662),IKFAST_ATAN2_MAGTHRESH);
if(!x8665.valid){
continue;
}
IkReal x8664=((-1.0)*(x8665.value));
sj5=gconst1;
cj5=gconst2;
j5=x8664;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8663);
rxp1_1=(px*r21);
rxp1_2=(r11*x8663);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8664;
IkReal gconst1=r21;
IkReal gconst2=x8662;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8666=((-1.0)*r20);
IkReal x8667=((-1.0)*px);
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8666),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
IkReal x8668=((-1.0)*(x8669.value));
sj5=gconst1;
cj5=gconst2;
j5=x8668;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8667);
rxp1_1=(px*r21);
rxp1_2=(r11*x8667);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8668;
IkReal gconst1=r21;
IkReal gconst2=x8666;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8670=((-1.0)*r20);
IkReal x8671=((-1.0)*px);
CheckValue<IkReal> x8673 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8670),IKFAST_ATAN2_MAGTHRESH);
if(!x8673.valid){
continue;
}
IkReal x8672=((-1.0)*(x8673.value));
sj5=gconst1;
cj5=gconst2;
j5=x8672;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8671);
rxp1_1=(px*r21);
rxp1_2=(r11*x8671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8672;
IkReal gconst1=r21;
IkReal gconst2=x8670;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8676=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8676.valid){
continue;
}
IkReal x8674=x8676.value;
IkReal x8675=(sj0*x8674);
sj4array[0]=((((-1.0)*cj1*cj2*x8675))+((sj1*sj2*x8675)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8677=IKcos(j4);
IkReal x8678=IKsin(j4);
IkReal x8679=(gconst1*r21);
IkReal x8680=((1.0)*gconst2*x8677);
evalcond[0]=((-1.0)*r02*x8677);
evalcond[1]=((((-1.0)*sj0))+((r02*x8678)));
evalcond[2]=(((x8677*x8679))+(((-1.0)*r20*x8680)));
evalcond[3]=(((gconst1*r11*x8677))+(((-1.0)*r10*x8680)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x8678))+((x8678*x8679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8682=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8682.valid){
continue;
}
IkReal x8681=x8682.value;
sj4array[0]=(((cj1*sj2*x8681))+((cj2*sj1*x8681)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8683=IKcos(j4);
IkReal x8684=IKsin(j4);
IkReal x8685=((1.0)*sj0);
IkReal x8686=((1.0)*gconst2*r10);
IkReal x8687=(gconst1*x8683);
evalcond[0]=((-1.0)*r02*x8683);
evalcond[1]=((((-1.0)*x8685))+((r02*x8684)));
evalcond[2]=(((r21*x8687))+(((-1.0)*gconst2*r20*x8683)));
evalcond[3]=((((-1.0)*x8683*x8686))+((r11*x8687)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x8684*x8686))+((gconst1*r11*x8684))+(((-1.0)*sj1*sj2*x8685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(r02,-1);
if(!x8688.valid){
continue;
}
sj4array[0]=(sj0*(x8688.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8689=IKcos(j4);
IkReal x8690=IKsin(j4);
IkReal x8691=(gconst1*r21);
IkReal x8692=((1.0)*sj1);
IkReal x8693=(gconst1*r11);
IkReal x8694=((1.0)*gconst2*r10);
IkReal x8695=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x8689);
evalcond[1]=(((x8689*x8691))+(((-1.0)*x8689*x8695)));
evalcond[2]=(((x8689*x8693))+(((-1.0)*x8689*x8694)));
evalcond[3]=(((x8690*x8691))+(((-1.0)*cj2*x8692))+(((-1.0)*x8690*x8695))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((cj1*cj2*sj0))+((x8690*x8693))+(((-1.0)*x8690*x8694))+(((-1.0)*sj0*sj2*x8692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8697=IKPowWithIntegerCheck(r02,-1);
if(!x8697.valid){
continue;
}
IkReal x8696=x8697.value;
CheckValue<IkReal> x8698=IKPowWithIntegerCheck(sj3,-1);
if(!x8698.valid){
continue;
}
if( IKabs((sj0*x8696)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8696*(x8698.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x8696))+IKsqr((x8696*(x8698.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x8696), (x8696*(x8698.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8699=IKcos(j4);
IkReal x8700=IKsin(j4);
IkReal x8701=(cj3*gconst1);
IkReal x8702=(r20*sj3);
IkReal x8703=(gconst1*r21);
IkReal x8704=(cj2*sj0);
IkReal x8705=(r11*sj3);
IkReal x8706=((1.0)*sj0);
IkReal x8707=((1.0)*sj2);
IkReal x8708=(r10*sj3);
IkReal x8709=(cj0*cj2);
IkReal x8710=(cj3*gconst2);
IkReal x8711=(cj1*sj2);
IkReal x8712=((1.0)*x8700);
IkReal x8713=(r02*x8699);
IkReal x8714=((1.0)*gconst2*x8699);
evalcond[0]=(((r02*x8700))+(((-1.0)*x8706)));
evalcond[1]=((((-1.0)*r20*x8714))+((x8699*x8703)));
evalcond[2]=(((gconst1*r11*x8699))+cj0+(((-1.0)*r10*x8714)));
evalcond[3]=(((cj0*x8711))+(((-1.0)*sj3*x8713))+((sj1*x8709)));
evalcond[4]=(((cj1*x8709))+(((-1.0)*cj0*sj1*x8707))+((cj3*x8713)));
evalcond[5]=((((-1.0)*sj1*x8707))+((cj1*cj2))+((r20*x8701))+(((-1.0)*gconst2*x8702*x8712))+((r21*x8710))+((sj3*x8700*x8703)));
evalcond[6]=(((gconst2*r21*sj3))+((gconst1*x8702))+(((-1.0)*r21*x8701*x8712))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x8707))+((r20*x8700*x8710)));
evalcond[7]=(((r10*x8701))+((sj0*x8711))+(((-1.0)*gconst2*x8708*x8712))+((r11*x8710))+((gconst1*x8700*x8705))+((sj1*x8704)));
evalcond[8]=(((cj1*x8704))+((gconst1*x8708))+((gconst2*x8705))+((r10*x8700*x8710))+(((-1.0)*r11*x8701*x8712))+(((-1.0)*sj1*sj2*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8715=((1.0)*gconst2);
CheckValue<IkReal> x8716=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x8715))+((gconst1*r21*sj3))),-1);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x8715))),-1);
if(!x8717.valid){
continue;
}
if( IKabs(((x8716.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x8715))+(((-1.0)*cj3*gconst1*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8717.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8716.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x8715))+(((-1.0)*cj3*gconst1*r20))))))+IKsqr(((-1.0)*cj0*(x8717.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8716.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x8715))+(((-1.0)*cj3*gconst1*r20))))), ((-1.0)*cj0*(x8717.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8718=IKcos(j4);
IkReal x8719=IKsin(j4);
IkReal x8720=(cj3*gconst1);
IkReal x8721=(r20*sj3);
IkReal x8722=(gconst1*r21);
IkReal x8723=(cj2*sj0);
IkReal x8724=(r11*sj3);
IkReal x8725=((1.0)*sj0);
IkReal x8726=((1.0)*sj2);
IkReal x8727=(r10*sj3);
IkReal x8728=(cj0*cj2);
IkReal x8729=(cj3*gconst2);
IkReal x8730=(cj1*sj2);
IkReal x8731=((1.0)*x8719);
IkReal x8732=(r02*x8718);
IkReal x8733=((1.0)*gconst2*x8718);
evalcond[0]=((((-1.0)*x8725))+((r02*x8719)));
evalcond[1]=(((x8718*x8722))+(((-1.0)*r20*x8733)));
evalcond[2]=(cj0+((gconst1*r11*x8718))+(((-1.0)*r10*x8733)));
evalcond[3]=(((sj1*x8728))+((cj0*x8730))+(((-1.0)*sj3*x8732)));
evalcond[4]=(((cj1*x8728))+(((-1.0)*cj0*sj1*x8726))+((cj3*x8732)));
evalcond[5]=(((r21*x8729))+(((-1.0)*sj1*x8726))+((sj3*x8719*x8722))+((r20*x8720))+((cj1*cj2))+(((-1.0)*gconst2*x8721*x8731)));
evalcond[6]=(((gconst2*r21*sj3))+((r20*x8719*x8729))+((gconst1*x8721))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x8726))+(((-1.0)*r21*x8720*x8731)));
evalcond[7]=(((sj1*x8723))+((r11*x8729))+((r10*x8720))+((gconst1*x8719*x8724))+((sj0*x8730))+(((-1.0)*gconst2*x8727*x8731)));
evalcond[8]=(((cj1*x8723))+(((-1.0)*sj1*sj2*x8725))+((gconst1*x8727))+((gconst2*x8724))+((r10*x8719*x8729))+(((-1.0)*r11*x8720*x8731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8734=IKPowWithIntegerCheck(r02,-1);
if(!x8734.valid){
continue;
}
CheckValue<IkReal> x8735=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8735.valid){
continue;
}
if( IKabs((sj0*(x8734.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8735.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x8734.value)))+IKsqr(((-1.0)*cj0*(x8735.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x8734.value)), ((-1.0)*cj0*(x8735.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8736=IKcos(j4);
IkReal x8737=IKsin(j4);
IkReal x8738=(cj3*gconst1);
IkReal x8739=(r20*sj3);
IkReal x8740=(gconst1*r21);
IkReal x8741=(cj2*sj0);
IkReal x8742=(r11*sj3);
IkReal x8743=((1.0)*sj0);
IkReal x8744=((1.0)*sj2);
IkReal x8745=(r10*sj3);
IkReal x8746=(cj0*cj2);
IkReal x8747=(cj3*gconst2);
IkReal x8748=(cj1*sj2);
IkReal x8749=((1.0)*x8737);
IkReal x8750=(r02*x8736);
IkReal x8751=((1.0)*gconst2*x8736);
evalcond[0]=(((r02*x8737))+(((-1.0)*x8743)));
evalcond[1]=((((-1.0)*r20*x8751))+((x8736*x8740)));
evalcond[2]=(cj0+(((-1.0)*r10*x8751))+((gconst1*r11*x8736)));
evalcond[3]=((((-1.0)*sj3*x8750))+((cj0*x8748))+((sj1*x8746)));
evalcond[4]=(((cj1*x8746))+(((-1.0)*cj0*sj1*x8744))+((cj3*x8750)));
evalcond[5]=(((sj3*x8737*x8740))+(((-1.0)*sj1*x8744))+((cj1*cj2))+((r20*x8738))+((r21*x8747))+(((-1.0)*gconst2*x8739*x8749)));
evalcond[6]=(((gconst2*r21*sj3))+((gconst1*x8739))+(((-1.0)*r21*x8738*x8749))+(((-1.0)*cj2*sj1))+((r20*x8737*x8747))+(((-1.0)*cj1*x8744)));
evalcond[7]=(((gconst1*x8737*x8742))+(((-1.0)*gconst2*x8745*x8749))+((r10*x8738))+((sj0*x8748))+((sj1*x8741))+((r11*x8747)));
evalcond[8]=((((-1.0)*r11*x8738*x8749))+((r10*x8737*x8747))+((cj1*x8741))+((gconst2*x8742))+(((-1.0)*sj1*sj2*x8743))+((gconst1*x8745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8752=gconst1*gconst1;
IkReal x8753=r21*r21;
IkReal x8754=gconst2*gconst2;
IkReal x8755=r20*r20;
IkReal x8756=(gconst1*gconst2);
IkReal x8757=(cj2*sj1);
IkReal x8758=((1.0)*r21);
IkReal x8759=(gconst2*r20);
IkReal x8760=(r20*r21);
IkReal x8761=(r20*sj3);
IkReal x8762=(cj1*sj2);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign((((cj3*(r22*r22)))+(((-2.0)*cj3*x8756*x8760))+((cj3*x8752*x8753))+((cj3*x8754*x8755)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x8755*x8756))+(((-1.0)*x8754*x8758*x8761))+(((-1.0)*gconst1*x8758*x8762))+((x8757*x8759))+((sj3*x8752*x8760))+((sj3*x8753*x8756))+((x8759*x8762))+(((-1.0)*gconst1*x8757*x8758)))),IkReal((((r22*x8757))+(((-1.0)*gconst1*r22*x8761))+(((-1.0)*gconst2*r22*sj3*x8758))+((r22*x8762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8765=IKcos(j4);
IkReal x8766=IKsin(j4);
IkReal x8767=(cj3*gconst1);
IkReal x8768=(r20*sj3);
IkReal x8769=(cj2*sj0);
IkReal x8770=(gconst1*sj3);
IkReal x8771=((1.0)*sj0);
IkReal x8772=((1.0)*sj2);
IkReal x8773=(gconst2*r11);
IkReal x8774=(cj0*cj2);
IkReal x8775=(gconst2*r10);
IkReal x8776=(gconst2*r00);
IkReal x8777=(gconst2*r20);
IkReal x8778=(cj1*sj2);
IkReal x8779=(gconst2*r01);
IkReal x8780=(gconst2*r21);
IkReal x8781=((1.0)*x8766);
IkReal x8782=(gconst1*x8765);
IkReal x8783=(r22*x8765);
IkReal x8784=((1.0)*x8765);
IkReal x8785=(cj3*x8766);
IkReal x8786=(cj3*x8765);
evalcond[0]=(((r21*x8782))+(((-1.0)*x8777*x8784))+((r22*x8766)));
evalcond[1]=(((r11*x8782))+cj0+(((-1.0)*x8775*x8784))+((r12*x8766)));
evalcond[2]=((((-1.0)*x8776*x8784))+(((-1.0)*x8771))+((r02*x8766))+((r01*x8782)));
evalcond[3]=(((cj3*x8780))+(((-1.0)*gconst2*x8768*x8781))+(((-1.0)*sj3*x8783))+((r20*x8767))+((cj1*cj2))+((r21*x8766*x8770))+(((-1.0)*sj1*x8772)));
evalcond[4]=((((-1.0)*cj1*x8772))+(((-1.0)*r21*x8767*x8781))+((x8777*x8785))+(((-1.0)*cj2*sj1))+((cj3*x8783))+((sj3*x8780))+((gconst1*x8768)));
evalcond[5]=(((cj3*x8779))+((sj1*x8774))+((r00*x8767))+((r01*x8766*x8770))+(((-1.0)*r02*sj3*x8784))+(((-1.0)*sj3*x8776*x8781))+((cj0*x8778)));
evalcond[6]=(((sj3*x8779))+(((-1.0)*r01*x8767*x8781))+((cj1*x8774))+((r00*x8770))+((x8776*x8785))+((r02*x8786))+(((-1.0)*cj0*sj1*x8772)));
evalcond[7]=(((cj3*x8773))+((sj0*x8778))+((sj1*x8769))+(((-1.0)*sj3*x8775*x8781))+(((-1.0)*r12*sj3*x8784))+((r11*x8766*x8770))+((r10*x8767)));
evalcond[8]=(((sj3*x8773))+((cj1*x8769))+((r12*x8786))+((x8775*x8785))+(((-1.0)*r11*x8767*x8781))+((r10*x8770))+(((-1.0)*sj1*sj2*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8787 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8787.valid){
continue;
}
CheckValue<IkReal> x8788=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8787.value)+(((1.5707963267949)*(x8788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8789=IKcos(j4);
IkReal x8790=IKsin(j4);
IkReal x8791=(cj3*gconst1);
IkReal x8792=(r20*sj3);
IkReal x8793=(cj2*sj0);
IkReal x8794=(gconst1*sj3);
IkReal x8795=((1.0)*sj0);
IkReal x8796=((1.0)*sj2);
IkReal x8797=(gconst2*r11);
IkReal x8798=(cj0*cj2);
IkReal x8799=(gconst2*r10);
IkReal x8800=(gconst2*r00);
IkReal x8801=(gconst2*r20);
IkReal x8802=(cj1*sj2);
IkReal x8803=(gconst2*r01);
IkReal x8804=(gconst2*r21);
IkReal x8805=((1.0)*x8790);
IkReal x8806=(gconst1*x8789);
IkReal x8807=(r22*x8789);
IkReal x8808=((1.0)*x8789);
IkReal x8809=(cj3*x8790);
IkReal x8810=(cj3*x8789);
evalcond[0]=(((r21*x8806))+((r22*x8790))+(((-1.0)*x8801*x8808)));
evalcond[1]=(cj0+((r12*x8790))+((r11*x8806))+(((-1.0)*x8799*x8808)));
evalcond[2]=((((-1.0)*x8800*x8808))+((r02*x8790))+((r01*x8806))+(((-1.0)*x8795)));
evalcond[3]=((((-1.0)*sj1*x8796))+(((-1.0)*gconst2*x8792*x8805))+((cj1*cj2))+(((-1.0)*sj3*x8807))+((cj3*x8804))+((r21*x8790*x8794))+((r20*x8791)));
evalcond[4]=(((x8801*x8809))+((gconst1*x8792))+(((-1.0)*cj1*x8796))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x8791*x8805))+((cj3*x8807))+((sj3*x8804)));
evalcond[5]=(((cj0*x8802))+(((-1.0)*sj3*x8800*x8805))+((r00*x8791))+(((-1.0)*r02*sj3*x8808))+((sj1*x8798))+((r01*x8790*x8794))+((cj3*x8803)));
evalcond[6]=(((x8800*x8809))+(((-1.0)*cj0*sj1*x8796))+((r02*x8810))+((r00*x8794))+(((-1.0)*r01*x8791*x8805))+((sj3*x8803))+((cj1*x8798)));
evalcond[7]=(((r10*x8791))+((r11*x8790*x8794))+((sj0*x8802))+(((-1.0)*sj3*x8799*x8805))+(((-1.0)*r12*sj3*x8808))+((cj3*x8797))+((sj1*x8793)));
evalcond[8]=(((r10*x8794))+((r12*x8810))+((x8799*x8809))+((sj3*x8797))+(((-1.0)*r11*x8791*x8805))+(((-1.0)*sj1*sj2*x8795))+((cj1*x8793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8811.valid){
continue;
}
CheckValue<IkReal> x8812 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8811.value)))+(x8812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8813=IKcos(j4);
IkReal x8814=IKsin(j4);
IkReal x8815=(cj3*gconst1);
IkReal x8816=(r20*sj3);
IkReal x8817=(cj2*sj0);
IkReal x8818=(gconst1*sj3);
IkReal x8819=((1.0)*sj0);
IkReal x8820=((1.0)*sj2);
IkReal x8821=(gconst2*r11);
IkReal x8822=(cj0*cj2);
IkReal x8823=(gconst2*r10);
IkReal x8824=(gconst2*r00);
IkReal x8825=(gconst2*r20);
IkReal x8826=(cj1*sj2);
IkReal x8827=(gconst2*r01);
IkReal x8828=(gconst2*r21);
IkReal x8829=((1.0)*x8814);
IkReal x8830=(gconst1*x8813);
IkReal x8831=(r22*x8813);
IkReal x8832=((1.0)*x8813);
IkReal x8833=(cj3*x8814);
IkReal x8834=(cj3*x8813);
evalcond[0]=(((r22*x8814))+((r21*x8830))+(((-1.0)*x8825*x8832)));
evalcond[1]=(cj0+((r11*x8830))+((r12*x8814))+(((-1.0)*x8823*x8832)));
evalcond[2]=((((-1.0)*x8824*x8832))+((r02*x8814))+((r01*x8830))+(((-1.0)*x8819)));
evalcond[3]=((((-1.0)*gconst2*x8816*x8829))+((r20*x8815))+(((-1.0)*sj1*x8820))+((r21*x8814*x8818))+((cj1*cj2))+(((-1.0)*sj3*x8831))+((cj3*x8828)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x8820))+((gconst1*x8816))+((cj3*x8831))+((sj3*x8828))+(((-1.0)*r21*x8815*x8829))+((x8825*x8833)));
evalcond[5]=((((-1.0)*sj3*x8824*x8829))+((r01*x8814*x8818))+((sj1*x8822))+((r00*x8815))+(((-1.0)*r02*sj3*x8832))+((cj3*x8827))+((cj0*x8826)));
evalcond[6]=(((r02*x8834))+(((-1.0)*cj0*sj1*x8820))+(((-1.0)*r01*x8815*x8829))+((r00*x8818))+((cj1*x8822))+((x8824*x8833))+((sj3*x8827)));
evalcond[7]=(((r10*x8815))+((sj0*x8826))+((sj1*x8817))+((r11*x8814*x8818))+(((-1.0)*r12*sj3*x8832))+((cj3*x8821))+(((-1.0)*sj3*x8823*x8829)));
evalcond[8]=((((-1.0)*sj1*sj2*x8819))+((r10*x8818))+((r12*x8834))+(((-1.0)*r11*x8815*x8829))+((cj1*x8817))+((sj3*x8821))+((x8823*x8833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8835=((-1.0)*r21);
IkReal x8837 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8837)==0){
continue;
}
IkReal x8836=pow(x8837,-0.5);
CheckValue<IkReal> x8838 = IKatan2WithCheck(IkReal(x8835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8838.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8838.value))));
IkReal gconst4=(x8835*x8836);
IkReal gconst5=((1.0)*r20*x8836);
CheckValue<IkReal> x8839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8839.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8839.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8840=((-1.0)*r21);
CheckValue<IkReal> x8843 = IKatan2WithCheck(IkReal(x8840),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8843.valid){
continue;
}
IkReal x8841=((1.0)*(x8843.value));
IkReal x8842=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8841)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8841)));
IkReal gconst4=(x8840*x8842);
IkReal gconst5=((1.0)*r20*x8842);
IkReal x8844=r22*r22;
IkReal x8845=((1.0)*x8844);
CheckValue<IkReal> x8849=IKPowWithIntegerCheck(((-1.0)+x8844),-1);
if(!x8849.valid){
continue;
}
IkReal x8846=x8849.value;
if((((1.0)+(((-1.0)*x8845)))) < -0.00001)
continue;
IkReal x8847=IKsqrt(((1.0)+(((-1.0)*x8845))));
IkReal x8848=(cj0*x8846*x8847);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8848+(((-1.0)*x8845*x8848))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8850=((-1.0)*r21);
CheckValue<IkReal> x8853 = IKatan2WithCheck(IkReal(x8850),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8853.valid){
continue;
}
IkReal x8851=((1.0)*(x8853.value));
IkReal x8852=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8851)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8851)));
IkReal gconst4=(x8850*x8852);
IkReal gconst5=((1.0)*r20*x8852);
IkReal x8854=r22*r22;
IkReal x8855=((1.0)*x8854);
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(((-1.0)+x8854),-1);
if(!x8859.valid){
continue;
}
IkReal x8856=x8859.value;
if((((1.0)+(((-1.0)*x8855)))) < -0.00001)
continue;
IkReal x8857=IKsqrt(((1.0)+(((-1.0)*x8855))));
IkReal x8858=(sj0*x8856*x8857);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8858+(((-1.0)*x8855*x8858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8860=((-1.0)*r21);
CheckValue<IkReal> x8863 = IKatan2WithCheck(IkReal(x8860),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8863.valid){
continue;
}
IkReal x8861=((1.0)*(x8863.value));
IkReal x8862=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8861)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8861)));
IkReal gconst4=(x8860*x8862);
IkReal gconst5=((1.0)*r20*x8862);
IkReal x8864=r22*r22;
IkReal x8865=((1.0)*r12*sj0);
IkReal x8866=((1.0)*cj0*r02);
CheckValue<IkReal> x8870=IKPowWithIntegerCheck(((-1.0)+x8864),-1);
if(!x8870.valid){
continue;
}
IkReal x8867=x8870.value;
if((((1.0)+(((-1.0)*x8864)))) < -0.00001)
continue;
IkReal x8868=IKsqrt(((1.0)+(((-1.0)*x8864))));
IkReal x8869=(r22*x8867*x8868);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x8866*x8869))+(((-1.0)*x8865*x8869)))))+(IKabs(((((-1.0)*x8865))+(((-1.0)*x8866))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8871=((-1.0)*r21);
CheckValue<IkReal> x8874 = IKatan2WithCheck(IkReal(x8871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8874.valid){
continue;
}
IkReal x8872=((1.0)*(x8874.value));
IkReal x8873=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8872)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8872)));
IkReal gconst4=(x8871*x8873);
IkReal gconst5=((1.0)*r20*x8873);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8875=((-1.0)*r21);
CheckValue<IkReal> x8878 = IKatan2WithCheck(IkReal(x8875),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8878.valid){
continue;
}
IkReal x8876=((1.0)*(x8878.value));
IkReal x8877=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8876)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8876)));
IkReal gconst4=(x8875*x8877);
IkReal gconst5=((1.0)*r20*x8877);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8879=((-1.0)*r21);
CheckValue<IkReal> x8882 = IKatan2WithCheck(IkReal(x8879),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8882.valid){
continue;
}
IkReal x8880=((1.0)*(x8882.value));
IkReal x8881=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8880)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8880)));
IkReal gconst4=(x8879*x8881);
IkReal gconst5=((1.0)*r20*x8881);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8883=((-1.0)*r21);
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(x8883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
IkReal x8884=((1.0)*(x8886.value));
IkReal x8885=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8884)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8884)));
IkReal gconst4=(x8883*x8885);
IkReal gconst5=((1.0)*r20*x8885);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8887=((-1.0)*r21);
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(x8887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
IkReal x8888=((1.0)*(x8890.value));
IkReal x8889=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8888)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8888)));
IkReal gconst4=(x8887*x8889);
IkReal gconst5=((1.0)*r20*x8889);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8891=((-1.0)*r21);
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(x8891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
IkReal x8892=((1.0)*(x8894.value));
IkReal x8893=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8892)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8892)));
IkReal gconst4=(x8891*x8893);
IkReal gconst5=((1.0)*r20*x8893);
IkReal x8895=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8899=IKPowWithIntegerCheck(x8895,-1);
if(!x8899.valid){
continue;
}
IkReal x8896=x8899.value;
IkReal x8897=((1.0)*x8896);
IkReal x8898=((((-2.0)*r10*r11*r20*r21*x8896))+(((-1.0)*(r12*r12)))+(((-1.0)*x8897*(r10*r10)*(r20*r20)))+(((-1.0)*x8897*(r11*r11)*(r21*r21))));
j4eval[0]=x8898;
j4eval[1]=r12;
j4eval[2]=x8895;
j4eval[3]=IKsign(x8898);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8900=(gconst5*r10);
IkReal x8901=(gconst4*r11);
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(r12),IkReal((x8901+(((-1.0)*x8900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
CheckValue<IkReal> x8903=IKPowWithIntegerCheck(IKsign(((((2.0)*x8900*x8901))+(((-1.0)*(x8901*x8901)))+(((-1.0)*(x8900*x8900)))+(((-1.0)*(r12*r12))))),-1);
if(!x8903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8902.value)+(((1.5707963267949)*(x8903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8904=IKcos(j4);
IkReal x8905=IKsin(j4);
IkReal x8906=(gconst5*r10);
IkReal x8907=(gconst5*r00);
IkReal x8908=(gconst5*r20);
IkReal x8909=((1.0)*x8904);
IkReal x8910=(gconst4*x8905);
IkReal x8911=(gconst4*x8904);
IkReal x8912=((1.0)*x8905);
evalcond[0]=((((-1.0)*x8908*x8909))+((r21*x8911))+((r22*x8905)));
evalcond[1]=(((r01*x8911))+(((-1.0)*x8907*x8909))+((r02*x8905)));
evalcond[2]=((1.0)+((r12*x8905))+(((-1.0)*x8906*x8909))+((r11*x8911)));
evalcond[3]=(((r11*x8910))+(((-1.0)*r12*x8909))+(((-1.0)*x8906*x8912)));
evalcond[4]=(((cj2*sj1))+((r01*x8910))+(((-1.0)*x8907*x8912))+((cj1*sj2))+(((-1.0)*r02*x8909)));
evalcond[5]=((((-1.0)*x8908*x8912))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x8909))+((cj1*cj2))+((r21*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8913=((1.0)*gconst5);
CheckValue<IkReal> x8914 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8913)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8914.valid){
continue;
}
CheckValue<IkReal> x8915=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8913))+(((-1.0)*gconst4*r20)))),-1);
if(!x8915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8914.value)+(((1.5707963267949)*(x8915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8916=IKcos(j4);
IkReal x8917=IKsin(j4);
IkReal x8918=(gconst5*r10);
IkReal x8919=(gconst5*r00);
IkReal x8920=(gconst5*r20);
IkReal x8921=((1.0)*x8916);
IkReal x8922=(gconst4*x8917);
IkReal x8923=(gconst4*x8916);
IkReal x8924=((1.0)*x8917);
evalcond[0]=((((-1.0)*x8920*x8921))+((r22*x8917))+((r21*x8923)));
evalcond[1]=((((-1.0)*x8919*x8921))+((r02*x8917))+((r01*x8923)));
evalcond[2]=((1.0)+(((-1.0)*x8918*x8921))+((r11*x8923))+((r12*x8917)));
evalcond[3]=((((-1.0)*x8918*x8924))+(((-1.0)*r12*x8921))+((r11*x8922)));
evalcond[4]=((((-1.0)*r02*x8921))+((cj2*sj1))+(((-1.0)*x8919*x8924))+((cj1*sj2))+((r01*x8922)));
evalcond[5]=((((-1.0)*r22*x8921))+(((-1.0)*x8920*x8924))+(((-1.0)*sj1*sj2))+((r21*x8922))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
CheckValue<IkReal> x8926=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8925.value)+(((1.5707963267949)*(x8926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8927=IKcos(j4);
IkReal x8928=IKsin(j4);
IkReal x8929=(gconst5*r10);
IkReal x8930=(gconst5*r00);
IkReal x8931=(gconst5*r20);
IkReal x8932=((1.0)*x8927);
IkReal x8933=(gconst4*x8928);
IkReal x8934=(gconst4*x8927);
IkReal x8935=((1.0)*x8928);
evalcond[0]=(((r22*x8928))+(((-1.0)*x8931*x8932))+((r21*x8934)));
evalcond[1]=(((r02*x8928))+((r01*x8934))+(((-1.0)*x8930*x8932)));
evalcond[2]=((1.0)+((r12*x8928))+(((-1.0)*x8929*x8932))+((r11*x8934)));
evalcond[3]=((((-1.0)*r12*x8932))+(((-1.0)*x8929*x8935))+((r11*x8933)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x8933))+(((-1.0)*x8930*x8935))+(((-1.0)*r02*x8932)));
evalcond[5]=((((-1.0)*r22*x8932))+(((-1.0)*sj1*sj2))+(((-1.0)*x8931*x8935))+((cj1*cj2))+((r21*x8933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8936=((-1.0)*r21);
CheckValue<IkReal> x8939 = IKatan2WithCheck(IkReal(x8936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8939.valid){
continue;
}
IkReal x8937=((1.0)*(x8939.value));
IkReal x8938=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8937)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8937)));
IkReal gconst4=(x8936*x8938);
IkReal gconst5=((1.0)*r20*x8938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8940=((-1.0)*r21);
CheckValue<IkReal> x8943 = IKatan2WithCheck(IkReal(x8940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8943.valid){
continue;
}
IkReal x8941=((1.0)*(x8943.value));
IkReal x8942=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8941)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8941)));
IkReal gconst4=(x8940*x8942);
IkReal gconst5=((1.0)*r20*x8942);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8944=((-1.0)*r21);
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal(x8944),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
IkReal x8945=((1.0)*(x8947.value));
IkReal x8946=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8945)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8945)));
IkReal gconst4=(x8944*x8946);
IkReal gconst5=((1.0)*r20*x8946);
IkReal x8948=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8952=IKPowWithIntegerCheck(x8948,-1);
if(!x8952.valid){
continue;
}
IkReal x8949=x8952.value;
IkReal x8950=((1.0)*x8949);
IkReal x8951=((((-1.0)*x8950*(r11*r11)*(r21*r21)))+(((-1.0)*x8950*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8949))+(((-1.0)*(r12*r12))));
j4eval[0]=x8951;
j4eval[1]=r12;
j4eval[2]=x8948;
j4eval[3]=IKsign(x8951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8953=(gconst5*r10);
IkReal x8954=(gconst4*r11);
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8953*x8953)))+(((-1.0)*(x8954*x8954)))+(((-1.0)*(r12*r12)))+(((2.0)*x8953*x8954)))),-1);
if(!x8955.valid){
continue;
}
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(r12),IkReal((x8954+(((-1.0)*x8953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8955.value)))+(x8956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8957=IKcos(j4);
IkReal x8958=IKsin(j4);
IkReal x8959=(gconst4*r21);
IkReal x8960=(gconst4*r11);
IkReal x8961=(gconst4*r01);
IkReal x8962=((1.0)*x8958);
IkReal x8963=(gconst5*x8958);
IkReal x8964=((1.0)*gconst5*x8957);
evalcond[0]=(((r22*x8958))+((x8957*x8959))+(((-1.0)*r20*x8964)));
evalcond[1]=(((r02*x8958))+(((-1.0)*r00*x8964))+((x8957*x8961)));
evalcond[2]=(((r10*x8963))+(((-1.0)*x8960*x8962))+((r12*x8957)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8964))+((x8957*x8960))+((r12*x8958)));
evalcond[4]=(((cj2*sj1))+((r02*x8957))+((cj1*sj2))+((r00*x8963))+(((-1.0)*x8961*x8962)));
evalcond[5]=(((r22*x8957))+(((-1.0)*sj1*sj2))+(((-1.0)*x8959*x8962))+((cj1*cj2))+((r20*x8963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8965=((1.0)*gconst5);
CheckValue<IkReal> x8966 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8965))+((gconst4*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8966.valid){
continue;
}
CheckValue<IkReal> x8967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8965))+(((-1.0)*gconst4*r20)))),-1);
if(!x8967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8966.value)+(((1.5707963267949)*(x8967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8968=IKcos(j4);
IkReal x8969=IKsin(j4);
IkReal x8970=(gconst4*r21);
IkReal x8971=(gconst4*r11);
IkReal x8972=(gconst4*r01);
IkReal x8973=((1.0)*x8969);
IkReal x8974=(gconst5*x8969);
IkReal x8975=((1.0)*gconst5*x8968);
evalcond[0]=(((r22*x8969))+((x8968*x8970))+(((-1.0)*r20*x8975)));
evalcond[1]=(((r02*x8969))+((x8968*x8972))+(((-1.0)*r00*x8975)));
evalcond[2]=(((r10*x8974))+(((-1.0)*x8971*x8973))+((r12*x8968)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8975))+((x8968*x8971))+((r12*x8969)));
evalcond[4]=(((cj2*sj1))+((r02*x8968))+((cj1*sj2))+((r00*x8974))+(((-1.0)*x8972*x8973)));
evalcond[5]=(((r22*x8968))+((r20*x8974))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8970*x8973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
CheckValue<IkReal> x8977=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8976.value)+(((1.5707963267949)*(x8977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8978=IKcos(j4);
IkReal x8979=IKsin(j4);
IkReal x8980=(gconst4*r21);
IkReal x8981=(gconst4*r11);
IkReal x8982=(gconst4*r01);
IkReal x8983=((1.0)*x8979);
IkReal x8984=(gconst5*x8979);
IkReal x8985=((1.0)*gconst5*x8978);
evalcond[0]=((((-1.0)*r20*x8985))+((x8978*x8980))+((r22*x8979)));
evalcond[1]=(((x8978*x8982))+((r02*x8979))+(((-1.0)*r00*x8985)));
evalcond[2]=(((r12*x8978))+(((-1.0)*x8981*x8983))+((r10*x8984)));
evalcond[3]=((1.0)+((r12*x8979))+((x8978*x8981))+(((-1.0)*r10*x8985)));
evalcond[4]=(((r00*x8984))+((cj2*sj1))+(((-1.0)*x8982*x8983))+((cj1*sj2))+((r02*x8978)));
evalcond[5]=((((-1.0)*x8980*x8983))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x8984))+((r22*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8986=((-1.0)*r21);
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(x8986),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
IkReal x8987=((1.0)*(x8989.value));
IkReal x8988=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8987)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8987)));
IkReal gconst4=(x8986*x8988);
IkReal gconst5=((1.0)*r20*x8988);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8990=((-1.0)*r21);
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal(x8990),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
IkReal x8991=((1.0)*(x8993.value));
IkReal x8992=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8991)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8991)));
IkReal gconst4=(x8990*x8992);
IkReal gconst5=((1.0)*r20*x8992);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8994=((-1.0)*r21);
CheckValue<IkReal> x8997 = IKatan2WithCheck(IkReal(x8994),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8997.valid){
continue;
}
IkReal x8995=((1.0)*(x8997.value));
IkReal x8996=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8995)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8995)));
IkReal gconst4=(x8994*x8996);
IkReal gconst5=((1.0)*r20*x8996);
IkReal x8998=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(x8998,-1);
if(!x9002.valid){
continue;
}
IkReal x8999=x9002.value;
IkReal x9000=((1.0)*x8999);
IkReal x9001=((((-1.0)*x9000*(r11*r11)*(r21*r21)))+(((-1.0)*x9000*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8999)));
j4eval[0]=x9001;
j4eval[1]=r12;
j4eval[2]=x8998;
j4eval[3]=IKsign(x9001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=(gconst5*r10);
IkReal x9004=(gconst4*r11);
CheckValue<IkReal> x9005 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9003))+x9004)),IKFAST_ATAN2_MAGTHRESH);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9003*x9003)))+(((-1.0)*(x9004*x9004)))+(((-1.0)*(r12*r12)))+(((2.0)*x9003*x9004)))),-1);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9005.value)+(((1.5707963267949)*(x9006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKcos(j4);
IkReal x9008=IKsin(j4);
IkReal x9009=(gconst4*r21);
IkReal x9010=((1.0)*sj1);
IkReal x9011=(gconst4*r11);
IkReal x9012=(gconst4*r01);
IkReal x9013=((1.0)*x9008);
IkReal x9014=(gconst5*x9008);
IkReal x9015=((1.0)*gconst5*x9007);
evalcond[0]=(((r22*x9008))+((x9007*x9009))+(((-1.0)*r20*x9015)));
evalcond[1]=(((x9007*x9012))+((r02*x9008))+(((-1.0)*r00*x9015)));
evalcond[2]=((((-1.0)*x9011*x9013))+((r10*x9014))+((r12*x9007)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9015))+((x9007*x9011))+((r12*x9008)));
evalcond[4]=((((-1.0)*sj2*x9010))+((r02*x9007))+(((-1.0)*x9012*x9013))+((cj1*cj2))+((r00*x9014)));
evalcond[5]=(((r22*x9007))+(((-1.0)*cj2*x9010))+(((-1.0)*cj1*sj2))+(((-1.0)*x9009*x9013))+((r20*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9016=((1.0)*gconst5);
CheckValue<IkReal> x9017 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9016)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9017.valid){
continue;
}
CheckValue<IkReal> x9018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9016))+(((-1.0)*gconst4*r20)))),-1);
if(!x9018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9017.value)+(((1.5707963267949)*(x9018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9019=IKcos(j4);
IkReal x9020=IKsin(j4);
IkReal x9021=(gconst4*r21);
IkReal x9022=((1.0)*sj1);
IkReal x9023=(gconst4*r11);
IkReal x9024=(gconst4*r01);
IkReal x9025=((1.0)*x9020);
IkReal x9026=(gconst5*x9020);
IkReal x9027=((1.0)*gconst5*x9019);
evalcond[0]=(((x9019*x9021))+((r22*x9020))+(((-1.0)*r20*x9027)));
evalcond[1]=(((x9019*x9024))+((r02*x9020))+(((-1.0)*r00*x9027)));
evalcond[2]=((((-1.0)*x9023*x9025))+((r10*x9026))+((r12*x9019)));
evalcond[3]=((1.0)+((x9019*x9023))+((r12*x9020))+(((-1.0)*r10*x9027)));
evalcond[4]=((((-1.0)*sj2*x9022))+((r00*x9026))+((r02*x9019))+(((-1.0)*x9024*x9025))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x9022))+(((-1.0)*cj1*sj2))+(((-1.0)*x9021*x9025))+((r22*x9019))+((r20*x9026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9028 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9028.valid){
continue;
}
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9028.value)+(((1.5707963267949)*(x9029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9030=IKcos(j4);
IkReal x9031=IKsin(j4);
IkReal x9032=(gconst4*r21);
IkReal x9033=((1.0)*sj1);
IkReal x9034=(gconst4*r11);
IkReal x9035=(gconst4*r01);
IkReal x9036=((1.0)*x9031);
IkReal x9037=(gconst5*x9031);
IkReal x9038=((1.0)*gconst5*x9030);
evalcond[0]=(((r22*x9031))+(((-1.0)*r20*x9038))+((x9030*x9032)));
evalcond[1]=(((r02*x9031))+(((-1.0)*r00*x9038))+((x9030*x9035)));
evalcond[2]=((((-1.0)*x9034*x9036))+((r10*x9037))+((r12*x9030)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9038))+((x9030*x9034))+((r12*x9031)));
evalcond[4]=((((-1.0)*x9035*x9036))+(((-1.0)*sj2*x9033))+((r00*x9037))+((r02*x9030))+((cj1*cj2)));
evalcond[5]=(((r22*x9030))+(((-1.0)*cj2*x9033))+(((-1.0)*cj1*sj2))+(((-1.0)*x9032*x9036))+((r20*x9037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9039=((-1.0)*r21);
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(x9039),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9040=((1.0)*(x9042.value));
IkReal x9041=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9040)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9040)));
IkReal gconst4=(x9039*x9041);
IkReal gconst5=((1.0)*r20*x9041);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9043=((-1.0)*r21);
CheckValue<IkReal> x9046 = IKatan2WithCheck(IkReal(x9043),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9046.valid){
continue;
}
IkReal x9044=((1.0)*(x9046.value));
IkReal x9045=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9044)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9044)));
IkReal gconst4=(x9043*x9045);
IkReal gconst5=((1.0)*r20*x9045);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9047=((-1.0)*r21);
CheckValue<IkReal> x9050 = IKatan2WithCheck(IkReal(x9047),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9050.valid){
continue;
}
IkReal x9048=((1.0)*(x9050.value));
IkReal x9049=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9048)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9048)));
IkReal gconst4=(x9047*x9049);
IkReal gconst5=((1.0)*r20*x9049);
IkReal x9051=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9055=IKPowWithIntegerCheck(x9051,-1);
if(!x9055.valid){
continue;
}
IkReal x9052=x9055.value;
IkReal x9053=((1.0)*x9052);
IkReal x9054=((((-1.0)*x9053*(r11*r11)*(r21*r21)))+(((-1.0)*x9053*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9052)));
j4eval[0]=x9054;
j4eval[1]=r12;
j4eval[2]=x9051;
j4eval[3]=IKsign(x9054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9056=(gconst5*r10);
IkReal x9057=(gconst4*r11);
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(IKsign(((((2.0)*x9056*x9057))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9057*x9057)))+(((-1.0)*(x9056*x9056))))),-1);
if(!x9058.valid){
continue;
}
CheckValue<IkReal> x9059 = IKatan2WithCheck(IkReal(r12),IkReal((x9057+(((-1.0)*x9056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9058.value)))+(x9059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9060=IKcos(j4);
IkReal x9061=IKsin(j4);
IkReal x9062=(gconst4*r11);
IkReal x9063=(gconst5*r10);
IkReal x9064=((1.0)*sj2);
IkReal x9065=(gconst5*r00);
IkReal x9066=(gconst5*r20);
IkReal x9067=((1.0)*x9060);
IkReal x9068=(gconst4*x9060);
IkReal x9069=((1.0)*x9061);
IkReal x9070=(gconst4*x9061);
evalcond[0]=(((r22*x9061))+((r21*x9068))+(((-1.0)*x9066*x9067)));
evalcond[1]=(((r01*x9068))+(((-1.0)*x9065*x9067))+((r02*x9061)));
evalcond[2]=((1.0)+((x9060*x9062))+((r12*x9061))+(((-1.0)*x9063*x9067)));
evalcond[3]=(((x9061*x9062))+(((-1.0)*x9063*x9069))+(((-1.0)*r12*x9067)));
evalcond[4]=((((-1.0)*sj1*x9064))+(((-1.0)*x9065*x9069))+((r01*x9070))+(((-1.0)*r02*x9067))+((cj1*cj2)));
evalcond[5]=(((r21*x9070))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9064))+(((-1.0)*r22*x9067))+(((-1.0)*x9066*x9069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9071=((1.0)*gconst5);
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9071)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
CheckValue<IkReal> x9073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9071))+(((-1.0)*gconst4*r20)))),-1);
if(!x9073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9072.value)+(((1.5707963267949)*(x9073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9074=IKcos(j4);
IkReal x9075=IKsin(j4);
IkReal x9076=(gconst4*r11);
IkReal x9077=(gconst5*r10);
IkReal x9078=((1.0)*sj2);
IkReal x9079=(gconst5*r00);
IkReal x9080=(gconst5*r20);
IkReal x9081=((1.0)*x9074);
IkReal x9082=(gconst4*x9074);
IkReal x9083=((1.0)*x9075);
IkReal x9084=(gconst4*x9075);
evalcond[0]=(((r21*x9082))+((r22*x9075))+(((-1.0)*x9080*x9081)));
evalcond[1]=(((r01*x9082))+(((-1.0)*x9079*x9081))+((r02*x9075)));
evalcond[2]=((1.0)+(((-1.0)*x9077*x9081))+((r12*x9075))+((x9074*x9076)));
evalcond[3]=(((x9075*x9076))+(((-1.0)*x9077*x9083))+(((-1.0)*r12*x9081)));
evalcond[4]=(((r01*x9084))+(((-1.0)*sj1*x9078))+(((-1.0)*r02*x9081))+(((-1.0)*x9079*x9083))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9084))+(((-1.0)*r22*x9081))+(((-1.0)*x9080*x9083))+(((-1.0)*cj1*x9078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9085 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9085.valid){
continue;
}
CheckValue<IkReal> x9086=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9085.value)+(((1.5707963267949)*(x9086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9087=IKcos(j4);
IkReal x9088=IKsin(j4);
IkReal x9089=(gconst4*r11);
IkReal x9090=(gconst5*r10);
IkReal x9091=((1.0)*sj2);
IkReal x9092=(gconst5*r00);
IkReal x9093=(gconst5*r20);
IkReal x9094=((1.0)*x9087);
IkReal x9095=(gconst4*x9087);
IkReal x9096=((1.0)*x9088);
IkReal x9097=(gconst4*x9088);
evalcond[0]=(((r21*x9095))+(((-1.0)*x9093*x9094))+((r22*x9088)));
evalcond[1]=((((-1.0)*x9092*x9094))+((r01*x9095))+((r02*x9088)));
evalcond[2]=((1.0)+((x9087*x9089))+((r12*x9088))+(((-1.0)*x9090*x9094)));
evalcond[3]=(((x9088*x9089))+(((-1.0)*r12*x9094))+(((-1.0)*x9090*x9096)));
evalcond[4]=((((-1.0)*x9092*x9096))+(((-1.0)*sj1*x9091))+((r01*x9097))+(((-1.0)*r02*x9094))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9097))+(((-1.0)*x9093*x9096))+(((-1.0)*r22*x9094))+(((-1.0)*cj1*x9091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9098=((-1.0)*r21);
IkReal x9099=((-1.0)*px);
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(x9098),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
IkReal x9100=((1.0)*(x9101.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9100)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9099);
rxp1_1=(px*r21);
rxp1_2=(r11*x9099);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9100)));
IkReal gconst4=x9098;
IkReal gconst5=((1.0)*r20);
IkReal x9102=((1.0)*sj3);
IkReal x9103=(r11*r21);
IkReal x9104=(r10*r20);
j4eval[0]=((((-1.0)*x9102*x9104))+(((-1.0)*x9102*x9103)));
j4eval[1]=((((-1.0)*x9104))+(((-1.0)*x9103)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9105=((-1.0)*r21);
IkReal x9106=((-1.0)*px);
CheckValue<IkReal> x9108 = IKatan2WithCheck(IkReal(x9105),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9108.valid){
continue;
}
IkReal x9107=((1.0)*(x9108.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9107)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9106);
rxp1_1=(px*r21);
rxp1_2=(r11*x9106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9107)));
IkReal gconst4=x9105;
IkReal gconst5=((1.0)*r20);
IkReal x9109=((1.0)*cj3);
IkReal x9110=(r10*r20);
IkReal x9111=(r11*r21);
j4eval[0]=(((x9109*x9111))+((x9109*x9110)));
j4eval[1]=((((-1.0)*x9111))+(((-1.0)*x9110)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9112=((-1.0)*r21);
IkReal x9113=((-1.0)*px);
CheckValue<IkReal> x9115 = IKatan2WithCheck(IkReal(x9112),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9115.valid){
continue;
}
IkReal x9114=((1.0)*(x9115.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9114)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9113);
rxp1_1=(px*r21);
rxp1_2=(r11*x9113);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9114)));
IkReal gconst4=x9112;
IkReal gconst5=((1.0)*r20);
IkReal x9116=((1.0)*sj3);
j4eval[0]=((((-1.0)*r10*r20*x9116))+(((-1.0)*r11*r21*x9116)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9117=((1.0)*gconst5);
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x9117))+((gconst4*r11*sj3))),-1);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119=IKPowWithIntegerCheck(r02,-1);
if(!x9119.valid){
continue;
}
CheckValue<IkReal> x9120=IKPowWithIntegerCheck(sj3,-1);
if(!x9120.valid){
continue;
}
if( IKabs(((x9118.value)*(((((-1.0)*cj3*r11*x9117))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9119.value)*(x9120.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9118.value)*(((((-1.0)*cj3*r11*x9117))+(((-1.0)*cj3*gconst4*r10))))))+IKsqr(((x9119.value)*(x9120.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9118.value)*(((((-1.0)*cj3*r11*x9117))+(((-1.0)*cj3*gconst4*r10))))), ((x9119.value)*(x9120.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9121=IKcos(j4);
IkReal x9122=IKsin(j4);
IkReal x9123=(cj1*cj2);
IkReal x9124=(gconst5*sj3);
IkReal x9125=(cj3*gconst5);
IkReal x9126=((1.0)*r10);
IkReal x9127=((1.0)*sj1);
IkReal x9128=(cj1*sj2);
IkReal x9129=(gconst4*r20);
IkReal x9130=(gconst4*r10);
IkReal x9131=(sj2*x9127);
IkReal x9132=(r20*x9122);
IkReal x9133=(gconst4*x9121);
IkReal x9134=(gconst5*x9121);
IkReal x9135=(r02*x9121);
IkReal x9136=(gconst4*sj3*x9122);
IkReal x9137=((1.0)*cj3*gconst4*x9122);
evalcond[0]=(r02*x9122);
evalcond[1]=(((r21*x9133))+(((-1.0)*r20*x9134)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9135))+x9128);
evalcond[3]=(((cj3*x9135))+x9123+(((-1.0)*x9131)));
evalcond[4]=((1.0)+(((-1.0)*x9126*x9134))+((r11*x9133)));
evalcond[5]=(((cj3*x9130))+(((-1.0)*x9122*x9124*x9126))+((r11*x9136))+((r11*x9125)));
evalcond[6]=((((-1.0)*r11*x9137))+((r10*x9122*x9125))+((sj3*x9130))+((r11*x9124)));
evalcond[7]=((((-1.0)*x9124*x9132))+x9123+((cj3*x9129))+((r21*x9136))+((r21*x9125))+(((-1.0)*x9131)));
evalcond[8]=(((sj3*x9129))+(((-1.0)*cj2*x9127))+(((-1.0)*r21*x9137))+((x9125*x9132))+((r21*x9124))+(((-1.0)*x9128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9138=((1.0)*r10);
IkReal x9139=((1.0)*r11);
CheckValue<IkReal> x9140=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst4*x9139))+((cj3*gconst5*r10))),-1);
if(!x9140.valid){
continue;
}
CheckValue<IkReal> x9141=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*x9138))),-1);
if(!x9141.valid){
continue;
}
if( IKabs(((x9140.value)*(((((-1.0)*gconst4*sj3*x9138))+(((-1.0)*gconst5*sj3*x9139)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9141.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9140.value)*(((((-1.0)*gconst4*sj3*x9138))+(((-1.0)*gconst5*sj3*x9139))))))+IKsqr(((-1.0)*(x9141.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9140.value)*(((((-1.0)*gconst4*sj3*x9138))+(((-1.0)*gconst5*sj3*x9139))))), ((-1.0)*(x9141.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9142=IKcos(j4);
IkReal x9143=IKsin(j4);
IkReal x9144=(cj1*cj2);
IkReal x9145=(gconst5*sj3);
IkReal x9146=(cj3*gconst5);
IkReal x9147=((1.0)*r10);
IkReal x9148=((1.0)*sj1);
IkReal x9149=(cj1*sj2);
IkReal x9150=(gconst4*r20);
IkReal x9151=(gconst4*r10);
IkReal x9152=(sj2*x9148);
IkReal x9153=(r20*x9143);
IkReal x9154=(gconst4*x9142);
IkReal x9155=(gconst5*x9142);
IkReal x9156=(r02*x9142);
IkReal x9157=(gconst4*sj3*x9143);
IkReal x9158=((1.0)*cj3*gconst4*x9143);
evalcond[0]=(r02*x9143);
evalcond[1]=((((-1.0)*r20*x9155))+((r21*x9154)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9156))+x9149);
evalcond[3]=(x9144+((cj3*x9156))+(((-1.0)*x9152)));
evalcond[4]=((1.0)+((r11*x9154))+(((-1.0)*x9147*x9155)));
evalcond[5]=(((r11*x9157))+(((-1.0)*x9143*x9145*x9147))+((cj3*x9151))+((r11*x9146)));
evalcond[6]=((((-1.0)*r11*x9158))+((r10*x9143*x9146))+((sj3*x9151))+((r11*x9145)));
evalcond[7]=(x9144+(((-1.0)*x9145*x9153))+((r21*x9146))+((cj3*x9150))+(((-1.0)*x9152))+((r21*x9157)));
evalcond[8]=((((-1.0)*x9149))+(((-1.0)*r21*x9158))+((r21*x9145))+(((-1.0)*cj2*x9148))+((sj3*x9150))+((x9146*x9153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9159=((1.0)*gconst5);
IkReal x9160=(gconst4*r11);
CheckValue<IkReal> x9161=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x9159))+((sj3*x9160))),-1);
if(!x9161.valid){
continue;
}
CheckValue<IkReal> x9162=IKPowWithIntegerCheck((x9160+(((-1.0)*r10*x9159))),-1);
if(!x9162.valid){
continue;
}
if( IKabs(((x9161.value)*(((((-1.0)*cj3*r11*x9159))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9162.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9161.value)*(((((-1.0)*cj3*r11*x9159))+(((-1.0)*cj3*gconst4*r10))))))+IKsqr(((-1.0)*(x9162.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9161.value)*(((((-1.0)*cj3*r11*x9159))+(((-1.0)*cj3*gconst4*r10))))), ((-1.0)*(x9162.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9163=IKcos(j4);
IkReal x9164=IKsin(j4);
IkReal x9165=(cj1*cj2);
IkReal x9166=(gconst5*sj3);
IkReal x9167=(cj3*gconst5);
IkReal x9168=((1.0)*r10);
IkReal x9169=((1.0)*sj1);
IkReal x9170=(cj1*sj2);
IkReal x9171=(gconst4*r20);
IkReal x9172=(gconst4*r10);
IkReal x9173=(sj2*x9169);
IkReal x9174=(r20*x9164);
IkReal x9175=(gconst4*x9163);
IkReal x9176=(gconst5*x9163);
IkReal x9177=(r02*x9163);
IkReal x9178=(gconst4*sj3*x9164);
IkReal x9179=((1.0)*cj3*gconst4*x9164);
evalcond[0]=(r02*x9164);
evalcond[1]=(((r21*x9175))+(((-1.0)*r20*x9176)));
evalcond[2]=(((cj2*sj1))+x9170+(((-1.0)*sj3*x9177)));
evalcond[3]=(x9165+(((-1.0)*x9173))+((cj3*x9177)));
evalcond[4]=((1.0)+(((-1.0)*x9168*x9176))+((r11*x9175)));
evalcond[5]=((((-1.0)*x9164*x9166*x9168))+((r11*x9167))+((cj3*x9172))+((r11*x9178)));
evalcond[6]=(((sj3*x9172))+((r10*x9164*x9167))+((r11*x9166))+(((-1.0)*r11*x9179)));
evalcond[7]=((((-1.0)*x9166*x9174))+x9165+(((-1.0)*x9173))+((r21*x9178))+((r21*x9167))+((cj3*x9171)));
evalcond[8]=(((sj3*x9171))+((x9167*x9174))+(((-1.0)*x9170))+(((-1.0)*r21*x9179))+(((-1.0)*cj2*x9169))+((r21*x9166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9180=gconst4*gconst4;
IkReal x9181=gconst5*gconst5;
IkReal x9182=(r10*r21);
IkReal x9183=(gconst4*gconst5);
IkReal x9184=((1.0)*cj3);
IkReal x9185=(r11*r21);
IkReal x9186=((1.0)*r20*sj3);
IkReal x9187=((1.0)*r22*sj3);
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal((((sj3*x9183*x9185))+((sj3*x9180*x9182))+(((-1.0)*r10*x9183*x9186))+(((-1.0)*r11*x9181*x9186)))),IkReal(((((-1.0)*gconst5*r11*x9187))+(((-1.0)*gconst4*r10*x9187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
CheckValue<IkReal> x9189=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r11*r20*x9183*x9184))+((cj3*x9180*x9185))+((cj3*r10*r20*x9181))+(((-1.0)*x9182*x9183*x9184)))),-1);
if(!x9189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9188.value)+(((1.5707963267949)*(x9189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9190=IKcos(j4);
IkReal x9191=IKsin(j4);
IkReal x9192=(cj1*cj2);
IkReal x9193=(gconst5*sj3);
IkReal x9194=((1.0)*r10);
IkReal x9195=((1.0)*sj1);
IkReal x9196=(cj1*sj2);
IkReal x9197=(cj3*gconst4);
IkReal x9198=(gconst4*sj3);
IkReal x9199=(cj3*gconst5);
IkReal x9200=(sj2*x9195);
IkReal x9201=(gconst4*x9190);
IkReal x9202=(gconst5*x9190);
IkReal x9203=((1.0)*x9191);
IkReal x9204=(cj3*x9190);
IkReal x9205=(x9191*x9198);
IkReal x9206=(x9191*x9199);
IkReal x9207=((1.0)*sj3*x9190);
evalcond[0]=(((r22*x9191))+(((-1.0)*r20*x9202))+((r21*x9201)));
evalcond[1]=((((-1.0)*r00*x9202))+((r01*x9201))+((r02*x9191)));
evalcond[2]=((1.0)+(((-1.0)*x9194*x9202))+((r11*x9201))+((r12*x9191)));
evalcond[3]=(((r10*x9206))+((r10*x9198))+((r12*x9204))+(((-1.0)*r11*x9197*x9203))+((r11*x9193)));
evalcond[4]=(((r11*x9205))+(((-1.0)*x9191*x9193*x9194))+((r10*x9197))+(((-1.0)*r12*x9207))+((r11*x9199)));
evalcond[5]=(((cj2*sj1))+((r01*x9199))+((r01*x9205))+((r00*x9197))+(((-1.0)*r02*x9207))+x9196+(((-1.0)*r00*x9193*x9203)));
evalcond[6]=(((r01*x9193))+((r00*x9206))+((r00*x9198))+x9192+((r02*x9204))+(((-1.0)*r01*x9197*x9203))+(((-1.0)*x9200)));
evalcond[7]=(x9192+((r21*x9199))+(((-1.0)*r20*x9193*x9203))+((r21*x9205))+((r20*x9197))+(((-1.0)*r22*x9207))+(((-1.0)*x9200)));
evalcond[8]=(((r20*x9206))+((r22*x9204))+(((-1.0)*cj2*x9195))+((r21*x9193))+(((-1.0)*r21*x9197*x9203))+((r20*x9198))+(((-1.0)*x9196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9208=((1.0)*gconst5);
CheckValue<IkReal> x9209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9208))+(((-1.0)*gconst4*r20)))),-1);
if(!x9209.valid){
continue;
}
CheckValue<IkReal> x9210 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9208))+((gconst4*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9209.value)))+(x9210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9211=IKcos(j4);
IkReal x9212=IKsin(j4);
IkReal x9213=(cj1*cj2);
IkReal x9214=(gconst5*sj3);
IkReal x9215=((1.0)*r10);
IkReal x9216=((1.0)*sj1);
IkReal x9217=(cj1*sj2);
IkReal x9218=(cj3*gconst4);
IkReal x9219=(gconst4*sj3);
IkReal x9220=(cj3*gconst5);
IkReal x9221=(sj2*x9216);
IkReal x9222=(gconst4*x9211);
IkReal x9223=(gconst5*x9211);
IkReal x9224=((1.0)*x9212);
IkReal x9225=(cj3*x9211);
IkReal x9226=(x9212*x9219);
IkReal x9227=(x9212*x9220);
IkReal x9228=((1.0)*sj3*x9211);
evalcond[0]=(((r21*x9222))+(((-1.0)*r20*x9223))+((r22*x9212)));
evalcond[1]=(((r01*x9222))+((r02*x9212))+(((-1.0)*r00*x9223)));
evalcond[2]=((1.0)+((r12*x9212))+((r11*x9222))+(((-1.0)*x9215*x9223)));
evalcond[3]=(((r10*x9219))+(((-1.0)*r11*x9218*x9224))+((r12*x9225))+((r11*x9214))+((r10*x9227)));
evalcond[4]=(((r10*x9218))+(((-1.0)*x9212*x9214*x9215))+((r11*x9226))+((r11*x9220))+(((-1.0)*r12*x9228)));
evalcond[5]=(((r01*x9226))+((r01*x9220))+((cj2*sj1))+((r00*x9218))+(((-1.0)*r02*x9228))+x9217+(((-1.0)*r00*x9214*x9224)));
evalcond[6]=(((r00*x9227))+(((-1.0)*x9221))+((r00*x9219))+(((-1.0)*r01*x9218*x9224))+x9213+((r02*x9225))+((r01*x9214)));
evalcond[7]=((((-1.0)*x9221))+((r20*x9218))+x9213+((r21*x9220))+((r21*x9226))+(((-1.0)*r20*x9214*x9224))+(((-1.0)*r22*x9228)));
evalcond[8]=((((-1.0)*r21*x9218*x9224))+((r20*x9219))+((r20*x9227))+((r21*x9214))+((r22*x9225))+(((-1.0)*cj2*x9216))+(((-1.0)*x9217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9229.value)+(((1.5707963267949)*(x9230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9231=IKcos(j4);
IkReal x9232=IKsin(j4);
IkReal x9233=(cj1*cj2);
IkReal x9234=(gconst5*sj3);
IkReal x9235=((1.0)*r10);
IkReal x9236=((1.0)*sj1);
IkReal x9237=(cj1*sj2);
IkReal x9238=(cj3*gconst4);
IkReal x9239=(gconst4*sj3);
IkReal x9240=(cj3*gconst5);
IkReal x9241=(sj2*x9236);
IkReal x9242=(gconst4*x9231);
IkReal x9243=(gconst5*x9231);
IkReal x9244=((1.0)*x9232);
IkReal x9245=(cj3*x9231);
IkReal x9246=(x9232*x9239);
IkReal x9247=(x9232*x9240);
IkReal x9248=((1.0)*sj3*x9231);
evalcond[0]=((((-1.0)*r20*x9243))+((r21*x9242))+((r22*x9232)));
evalcond[1]=(((r02*x9232))+(((-1.0)*r00*x9243))+((r01*x9242)));
evalcond[2]=((1.0)+(((-1.0)*x9235*x9243))+((r12*x9232))+((r11*x9242)));
evalcond[3]=((((-1.0)*r11*x9238*x9244))+((r12*x9245))+((r10*x9247))+((r11*x9234))+((r10*x9239)));
evalcond[4]=((((-1.0)*x9232*x9234*x9235))+(((-1.0)*r12*x9248))+((r10*x9238))+((r11*x9246))+((r11*x9240)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x9234*x9244))+x9237+((r01*x9246))+((r01*x9240))+(((-1.0)*r02*x9248))+((r00*x9238)));
evalcond[6]=(x9233+((r02*x9245))+(((-1.0)*x9241))+((r00*x9247))+((r01*x9234))+((r00*x9239))+(((-1.0)*r01*x9238*x9244)));
evalcond[7]=((((-1.0)*r20*x9234*x9244))+(((-1.0)*r22*x9248))+x9233+((r21*x9246))+((r21*x9240))+(((-1.0)*x9241))+((r20*x9238)));
evalcond[8]=(((r21*x9234))+((r22*x9245))+(((-1.0)*r21*x9238*x9244))+((r20*x9239))+(((-1.0)*cj2*x9236))+((r20*x9247))+(((-1.0)*x9237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9249=((-1.0)*r21);
CheckValue<IkReal> x9252 = IKatan2WithCheck(IkReal(x9249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9252.valid){
continue;
}
IkReal x9250=((1.0)*(x9252.value));
IkReal x9251=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9250)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9250)));
IkReal gconst4=(x9249*x9251);
IkReal gconst5=((1.0)*r20*x9251);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9253=((-1.0)*r21);
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(x9253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9254=((1.0)*(x9256.value));
IkReal x9255=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9254)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9254)));
IkReal gconst4=(x9253*x9255);
IkReal gconst5=((1.0)*r20*x9255);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9257=((-1.0)*r21);
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(x9257),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9258=((1.0)*(x9260.value));
IkReal x9259=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9258)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9258)));
IkReal gconst4=(x9257*x9259);
IkReal gconst5=((1.0)*r20*x9259);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9261=((-1.0)*r21);
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal(x9261),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
IkReal x9262=((1.0)*(x9264.value));
IkReal x9263=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9262)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9262)));
IkReal gconst4=(x9261*x9263);
IkReal gconst5=((1.0)*r20*x9263);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9265=((-1.0)*r21);
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal(x9265),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
IkReal x9266=((1.0)*(x9268.value));
IkReal x9267=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9266)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9266)));
IkReal gconst4=(x9265*x9267);
IkReal gconst5=((1.0)*r20*x9267);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9269=((-1.0)*r21);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal(x9269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
IkReal x9270=((1.0)*(x9272.value));
IkReal x9271=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9270)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9270)));
IkReal gconst4=(x9269*x9271);
IkReal gconst5=((1.0)*r20*x9271);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9273=(gconst5*r10);
IkReal x9274=(gconst4*r11);
CheckValue<IkReal> x9275=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9274*x9274)+(((-2.0)*x9273*x9274))+(x9273*x9273))),-1);
if(!x9275.valid){
continue;
}
CheckValue<IkReal> x9276 = IKatan2WithCheck(IkReal(r12),IkReal((x9274+(((-1.0)*x9273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9275.value)))+(x9276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9277=IKcos(j4);
IkReal x9278=IKsin(j4);
IkReal x9279=(gconst4*r11);
IkReal x9280=(gconst5*r10);
IkReal x9281=((1.0)*sj2);
IkReal x9282=(gconst5*r00);
IkReal x9283=(gconst5*r20);
IkReal x9284=((1.0)*x9277);
IkReal x9285=(gconst4*x9277);
IkReal x9286=((1.0)*x9278);
IkReal x9287=(gconst4*x9278);
evalcond[0]=(((r21*x9285))+(((-1.0)*x9283*x9284))+((r22*x9278)));
evalcond[1]=(((r02*x9278))+(((-1.0)*x9282*x9284))+((r01*x9285)));
evalcond[2]=((-1.0)+((r12*x9278))+((x9277*x9279))+(((-1.0)*x9280*x9284)));
evalcond[3]=(((x9278*x9279))+(((-1.0)*r12*x9284))+(((-1.0)*x9280*x9286)));
evalcond[4]=((((-1.0)*sj1*x9281))+(((-1.0)*r22*x9284))+((r21*x9287))+(((-1.0)*x9283*x9286))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9281))+(((-1.0)*x9282*x9286))+(((-1.0)*cj2*sj1))+((r01*x9287))+(((-1.0)*r02*x9284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9288=((1.0)*gconst5);
CheckValue<IkReal> x9289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9288)))),-1);
if(!x9289.valid){
continue;
}
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9288)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9289.value)))+(x9290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9291=IKcos(j4);
IkReal x9292=IKsin(j4);
IkReal x9293=(gconst4*r11);
IkReal x9294=(gconst5*r10);
IkReal x9295=((1.0)*sj2);
IkReal x9296=(gconst5*r00);
IkReal x9297=(gconst5*r20);
IkReal x9298=((1.0)*x9291);
IkReal x9299=(gconst4*x9291);
IkReal x9300=((1.0)*x9292);
IkReal x9301=(gconst4*x9292);
evalcond[0]=(((r22*x9292))+(((-1.0)*x9297*x9298))+((r21*x9299)));
evalcond[1]=(((r02*x9292))+(((-1.0)*x9296*x9298))+((r01*x9299)));
evalcond[2]=((-1.0)+((x9291*x9293))+(((-1.0)*x9294*x9298))+((r12*x9292)));
evalcond[3]=(((x9292*x9293))+(((-1.0)*x9294*x9300))+(((-1.0)*r12*x9298)));
evalcond[4]=((((-1.0)*x9297*x9300))+(((-1.0)*sj1*x9295))+((r21*x9301))+(((-1.0)*r22*x9298))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9295))+(((-1.0)*x9296*x9300))+(((-1.0)*cj2*sj1))+((r01*x9301))+(((-1.0)*r02*x9298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
CheckValue<IkReal> x9303=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9302.value)+(((1.5707963267949)*(x9303.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9304=IKcos(j4);
IkReal x9305=IKsin(j4);
IkReal x9306=(gconst4*r11);
IkReal x9307=(gconst5*r10);
IkReal x9308=((1.0)*sj2);
IkReal x9309=(gconst5*r00);
IkReal x9310=(gconst5*r20);
IkReal x9311=((1.0)*x9304);
IkReal x9312=(gconst4*x9304);
IkReal x9313=((1.0)*x9305);
IkReal x9314=(gconst4*x9305);
evalcond[0]=(((r22*x9305))+((r21*x9312))+(((-1.0)*x9310*x9311)));
evalcond[1]=(((r02*x9305))+((r01*x9312))+(((-1.0)*x9309*x9311)));
evalcond[2]=((-1.0)+(((-1.0)*x9307*x9311))+((x9304*x9306))+((r12*x9305)));
evalcond[3]=(((x9305*x9306))+(((-1.0)*x9307*x9313))+(((-1.0)*r12*x9311)));
evalcond[4]=(((r21*x9314))+(((-1.0)*x9310*x9313))+(((-1.0)*sj1*x9308))+((cj1*cj2))+(((-1.0)*r22*x9311)));
evalcond[5]=((((-1.0)*cj1*x9308))+(((-1.0)*cj2*sj1))+((r01*x9314))+(((-1.0)*r02*x9311))+(((-1.0)*x9309*x9313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9315=((-1.0)*r21);
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal(x9315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
IkReal x9316=((1.0)*(x9318.value));
IkReal x9317=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9316)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9316)));
IkReal gconst4=(x9315*x9317);
IkReal gconst5=((1.0)*r20*x9317);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9319=((-1.0)*r21);
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(x9319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
IkReal x9320=((1.0)*(x9322.value));
IkReal x9321=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9320)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9320)));
IkReal gconst4=(x9319*x9321);
IkReal gconst5=((1.0)*r20*x9321);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9323=((-1.0)*r21);
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(x9323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9324=((1.0)*(x9326.value));
IkReal x9325=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9324)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9324)));
IkReal gconst4=(x9323*x9325);
IkReal gconst5=((1.0)*r20*x9325);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9327=(gconst5*r10);
IkReal x9328=(gconst4*r11);
CheckValue<IkReal> x9329 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9327))+x9328)),IKFAST_ATAN2_MAGTHRESH);
if(!x9329.valid){
continue;
}
CheckValue<IkReal> x9330=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9327*x9327)+(((-2.0)*x9327*x9328))+(x9328*x9328))),-1);
if(!x9330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9329.value)+(((1.5707963267949)*(x9330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9331=IKcos(j4);
IkReal x9332=IKsin(j4);
IkReal x9333=(gconst4*r21);
IkReal x9334=((1.0)*sj1);
IkReal x9335=(gconst4*r11);
IkReal x9336=(gconst4*r01);
IkReal x9337=((1.0)*x9332);
IkReal x9338=(gconst5*x9332);
IkReal x9339=((1.0)*gconst5*x9331);
evalcond[0]=(((x9331*x9333))+((r22*x9332))+(((-1.0)*r20*x9339)));
evalcond[1]=((((-1.0)*r00*x9339))+((x9331*x9336))+((r02*x9332)));
evalcond[2]=(((r12*x9331))+((r10*x9338))+(((-1.0)*x9335*x9337)));
evalcond[3]=((-1.0)+((x9331*x9335))+((r12*x9332))+(((-1.0)*r10*x9339)));
evalcond[4]=((((-1.0)*sj2*x9334))+((r20*x9338))+(((-1.0)*x9333*x9337))+((r22*x9331))+((cj1*cj2)));
evalcond[5]=(((r00*x9338))+(((-1.0)*cj1*sj2))+((r02*x9331))+(((-1.0)*cj2*x9334))+(((-1.0)*x9336*x9337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9340=((1.0)*gconst5);
CheckValue<IkReal> x9341 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9340)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9341.valid){
continue;
}
CheckValue<IkReal> x9342=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9340)))),-1);
if(!x9342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9341.value)+(((1.5707963267949)*(x9342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9343=IKcos(j4);
IkReal x9344=IKsin(j4);
IkReal x9345=(gconst4*r21);
IkReal x9346=((1.0)*sj1);
IkReal x9347=(gconst4*r11);
IkReal x9348=(gconst4*r01);
IkReal x9349=((1.0)*x9344);
IkReal x9350=(gconst5*x9344);
IkReal x9351=((1.0)*gconst5*x9343);
evalcond[0]=(((x9343*x9345))+(((-1.0)*r20*x9351))+((r22*x9344)));
evalcond[1]=(((x9343*x9348))+(((-1.0)*r00*x9351))+((r02*x9344)));
evalcond[2]=(((r12*x9343))+((r10*x9350))+(((-1.0)*x9347*x9349)));
evalcond[3]=((-1.0)+((r12*x9344))+(((-1.0)*r10*x9351))+((x9343*x9347)));
evalcond[4]=((((-1.0)*sj2*x9346))+((r20*x9350))+(((-1.0)*x9345*x9349))+((cj1*cj2))+((r22*x9343)));
evalcond[5]=(((r00*x9350))+(((-1.0)*cj1*sj2))+(((-1.0)*x9348*x9349))+(((-1.0)*cj2*x9346))+((r02*x9343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9352 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9352.valid){
continue;
}
CheckValue<IkReal> x9353=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9352.value)+(((1.5707963267949)*(x9353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9354=IKcos(j4);
IkReal x9355=IKsin(j4);
IkReal x9356=(gconst4*r21);
IkReal x9357=((1.0)*sj1);
IkReal x9358=(gconst4*r11);
IkReal x9359=(gconst4*r01);
IkReal x9360=((1.0)*x9355);
IkReal x9361=(gconst5*x9355);
IkReal x9362=((1.0)*gconst5*x9354);
evalcond[0]=(((x9354*x9356))+(((-1.0)*r20*x9362))+((r22*x9355)));
evalcond[1]=(((x9354*x9359))+(((-1.0)*r00*x9362))+((r02*x9355)));
evalcond[2]=((((-1.0)*x9358*x9360))+((r10*x9361))+((r12*x9354)));
evalcond[3]=((-1.0)+((x9354*x9358))+(((-1.0)*r10*x9362))+((r12*x9355)));
evalcond[4]=((((-1.0)*sj2*x9357))+((cj1*cj2))+(((-1.0)*x9356*x9360))+((r22*x9354))+((r20*x9361)));
evalcond[5]=((((-1.0)*x9359*x9360))+(((-1.0)*cj1*sj2))+((r00*x9361))+(((-1.0)*cj2*x9357))+((r02*x9354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9363=((-1.0)*r21);
CheckValue<IkReal> x9366 = IKatan2WithCheck(IkReal(x9363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9366.valid){
continue;
}
IkReal x9364=((1.0)*(x9366.value));
IkReal x9365=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9364)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9364)));
IkReal gconst4=(x9363*x9365);
IkReal gconst5=((1.0)*r20*x9365);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9367=((-1.0)*r21);
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal(x9367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
IkReal x9368=((1.0)*(x9370.value));
IkReal x9369=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9368)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9368)));
IkReal gconst4=(x9367*x9369);
IkReal gconst5=((1.0)*r20*x9369);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9371=((-1.0)*r21);
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(x9371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9372=((1.0)*(x9374.value));
IkReal x9373=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9372)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9372)));
IkReal gconst4=(x9371*x9373);
IkReal gconst5=((1.0)*r20*x9373);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9375=(gconst5*r10);
IkReal x9376=(gconst4*r11);
CheckValue<IkReal> x9377=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9375*x9375)+(((-2.0)*x9375*x9376))+(x9376*x9376))),-1);
if(!x9377.valid){
continue;
}
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(r12),IkReal((x9376+(((-1.0)*x9375)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9377.value)))+(x9378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9379=IKcos(j4);
IkReal x9380=IKsin(j4);
IkReal x9381=(gconst4*r21);
IkReal x9382=((1.0)*cj2);
IkReal x9383=(gconst4*r11);
IkReal x9384=(gconst4*r01);
IkReal x9385=((1.0)*x9380);
IkReal x9386=(gconst5*x9380);
IkReal x9387=((1.0)*gconst5*x9379);
evalcond[0]=(((r22*x9380))+(((-1.0)*r20*x9387))+((x9379*x9381)));
evalcond[1]=(((r02*x9380))+((x9379*x9384))+(((-1.0)*r00*x9387)));
evalcond[2]=(((r10*x9386))+((r12*x9379))+(((-1.0)*x9383*x9385)));
evalcond[3]=((-1.0)+((r12*x9380))+(((-1.0)*r10*x9387))+((x9379*x9383)));
evalcond[4]=((((-1.0)*cj1*x9382))+((r02*x9379))+((sj1*sj2))+(((-1.0)*x9384*x9385))+((r00*x9386)));
evalcond[5]=(((r22*x9379))+(((-1.0)*x9381*x9385))+(((-1.0)*sj1*x9382))+(((-1.0)*cj1*sj2))+((r20*x9386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9388=((1.0)*gconst5);
CheckValue<IkReal> x9389 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9388))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9389.valid){
continue;
}
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9388)))),-1);
if(!x9390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9389.value)+(((1.5707963267949)*(x9390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9391=IKcos(j4);
IkReal x9392=IKsin(j4);
IkReal x9393=(gconst4*r21);
IkReal x9394=((1.0)*cj2);
IkReal x9395=(gconst4*r11);
IkReal x9396=(gconst4*r01);
IkReal x9397=((1.0)*x9392);
IkReal x9398=(gconst5*x9392);
IkReal x9399=((1.0)*gconst5*x9391);
evalcond[0]=(((x9391*x9393))+(((-1.0)*r20*x9399))+((r22*x9392)));
evalcond[1]=((((-1.0)*r00*x9399))+((x9391*x9396))+((r02*x9392)));
evalcond[2]=(((r12*x9391))+((r10*x9398))+(((-1.0)*x9395*x9397)));
evalcond[3]=((-1.0)+((r12*x9392))+(((-1.0)*r10*x9399))+((x9391*x9395)));
evalcond[4]=((((-1.0)*cj1*x9394))+((sj1*sj2))+((r02*x9391))+(((-1.0)*x9396*x9397))+((r00*x9398)));
evalcond[5]=(((r20*x9398))+(((-1.0)*cj1*sj2))+((r22*x9391))+(((-1.0)*sj1*x9394))+(((-1.0)*x9393*x9397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
CheckValue<IkReal> x9401=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9400.value)+(((1.5707963267949)*(x9401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9402=IKcos(j4);
IkReal x9403=IKsin(j4);
IkReal x9404=(gconst4*r21);
IkReal x9405=((1.0)*cj2);
IkReal x9406=(gconst4*r11);
IkReal x9407=(gconst4*r01);
IkReal x9408=((1.0)*x9403);
IkReal x9409=(gconst5*x9403);
IkReal x9410=((1.0)*gconst5*x9402);
evalcond[0]=((((-1.0)*r20*x9410))+((r22*x9403))+((x9402*x9404)));
evalcond[1]=((((-1.0)*r00*x9410))+((x9402*x9407))+((r02*x9403)));
evalcond[2]=(((r12*x9402))+(((-1.0)*x9406*x9408))+((r10*x9409)));
evalcond[3]=((-1.0)+((r12*x9403))+((x9402*x9406))+(((-1.0)*r10*x9410)));
evalcond[4]=(((sj1*sj2))+((r02*x9402))+(((-1.0)*cj1*x9405))+(((-1.0)*x9407*x9408))+((r00*x9409)));
evalcond[5]=(((r22*x9402))+(((-1.0)*sj1*x9405))+(((-1.0)*cj1*sj2))+(((-1.0)*x9404*x9408))+((r20*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9411=((-1.0)*r21);
CheckValue<IkReal> x9414 = IKatan2WithCheck(IkReal(x9411),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9414.valid){
continue;
}
IkReal x9412=((1.0)*(x9414.value));
IkReal x9413=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9412)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9412)));
IkReal gconst4=(x9411*x9413);
IkReal gconst5=((1.0)*r20*x9413);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9415=((-1.0)*r21);
CheckValue<IkReal> x9418 = IKatan2WithCheck(IkReal(x9415),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9418.valid){
continue;
}
IkReal x9416=((1.0)*(x9418.value));
IkReal x9417=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9416)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9416)));
IkReal gconst4=(x9415*x9417);
IkReal gconst5=((1.0)*r20*x9417);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9419=((-1.0)*r21);
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(x9419),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
IkReal x9420=((1.0)*(x9422.value));
IkReal x9421=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9420)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9420)));
IkReal gconst4=(x9419*x9421);
IkReal gconst5=((1.0)*r20*x9421);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9423=(gconst5*r10);
IkReal x9424=(gconst4*r11);
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9423*x9424))+(x9423*x9423)+(x9424*x9424))),-1);
if(!x9425.valid){
continue;
}
CheckValue<IkReal> x9426 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9423))+x9424)),IKFAST_ATAN2_MAGTHRESH);
if(!x9426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9425.value)))+(x9426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9427=IKcos(j4);
IkReal x9428=IKsin(j4);
IkReal x9429=(gconst4*r11);
IkReal x9430=(gconst5*r10);
IkReal x9431=((1.0)*cj1);
IkReal x9432=(gconst5*r00);
IkReal x9433=(gconst5*r20);
IkReal x9434=((1.0)*x9427);
IkReal x9435=(gconst4*x9427);
IkReal x9436=((1.0)*x9428);
IkReal x9437=(gconst4*x9428);
evalcond[0]=((((-1.0)*x9433*x9434))+((r21*x9435))+((r22*x9428)));
evalcond[1]=(((r02*x9428))+(((-1.0)*x9432*x9434))+((r01*x9435)));
evalcond[2]=((-1.0)+((r12*x9428))+((x9427*x9429))+(((-1.0)*x9430*x9434)));
evalcond[3]=(((x9428*x9429))+(((-1.0)*r12*x9434))+(((-1.0)*x9430*x9436)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x9432*x9436))+(((-1.0)*r02*x9434))+(((-1.0)*cj2*x9431))+((r01*x9437)));
evalcond[5]=((((-1.0)*sj2*x9431))+(((-1.0)*cj2*sj1))+(((-1.0)*x9433*x9436))+((r21*x9437))+(((-1.0)*r22*x9434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9438=((1.0)*gconst5);
CheckValue<IkReal> x9439 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9438))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9439.valid){
continue;
}
CheckValue<IkReal> x9440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9438)))),-1);
if(!x9440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9439.value)+(((1.5707963267949)*(x9440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9441=IKcos(j4);
IkReal x9442=IKsin(j4);
IkReal x9443=(gconst4*r11);
IkReal x9444=(gconst5*r10);
IkReal x9445=((1.0)*cj1);
IkReal x9446=(gconst5*r00);
IkReal x9447=(gconst5*r20);
IkReal x9448=((1.0)*x9441);
IkReal x9449=(gconst4*x9441);
IkReal x9450=((1.0)*x9442);
IkReal x9451=(gconst4*x9442);
evalcond[0]=(((r22*x9442))+((r21*x9449))+(((-1.0)*x9447*x9448)));
evalcond[1]=((((-1.0)*x9446*x9448))+((r01*x9449))+((r02*x9442)));
evalcond[2]=((-1.0)+((x9441*x9443))+(((-1.0)*x9444*x9448))+((r12*x9442)));
evalcond[3]=((((-1.0)*x9444*x9450))+(((-1.0)*r12*x9448))+((x9442*x9443)));
evalcond[4]=((((-1.0)*x9446*x9450))+((r01*x9451))+(((-1.0)*cj2*x9445))+((sj1*sj2))+(((-1.0)*r02*x9448)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9451))+(((-1.0)*sj2*x9445))+(((-1.0)*r22*x9448))+(((-1.0)*x9447*x9450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9452 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9452.valid){
continue;
}
CheckValue<IkReal> x9453=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9452.value)+(((1.5707963267949)*(x9453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9454=IKcos(j4);
IkReal x9455=IKsin(j4);
IkReal x9456=(gconst4*r11);
IkReal x9457=(gconst5*r10);
IkReal x9458=((1.0)*cj1);
IkReal x9459=(gconst5*r00);
IkReal x9460=(gconst5*r20);
IkReal x9461=((1.0)*x9454);
IkReal x9462=(gconst4*x9454);
IkReal x9463=((1.0)*x9455);
IkReal x9464=(gconst4*x9455);
evalcond[0]=(((r22*x9455))+((r21*x9462))+(((-1.0)*x9460*x9461)));
evalcond[1]=(((r01*x9462))+(((-1.0)*x9459*x9461))+((r02*x9455)));
evalcond[2]=((-1.0)+(((-1.0)*x9457*x9461))+((r12*x9455))+((x9454*x9456)));
evalcond[3]=((((-1.0)*x9457*x9463))+((x9455*x9456))+(((-1.0)*r12*x9461)));
evalcond[4]=(((r01*x9464))+(((-1.0)*cj2*x9458))+((sj1*sj2))+(((-1.0)*x9459*x9463))+(((-1.0)*r02*x9461)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9464))+(((-1.0)*r22*x9461))+(((-1.0)*sj2*x9458))+(((-1.0)*x9460*x9463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9465=gconst4*gconst4;
IkReal x9466=gconst5*gconst5;
IkReal x9467=(r10*r21);
IkReal x9468=(gconst4*gconst5);
IkReal x9469=((1.0)*cj3);
IkReal x9470=(r11*r21);
IkReal x9471=((1.0)*r20*sj3);
IkReal x9472=((1.0)*r22*sj3);
CheckValue<IkReal> x9473=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*r20*x9466))+((cj3*x9465*x9470))+(((-1.0)*r11*r20*x9468*x9469))+(((-1.0)*x9467*x9468*x9469)))),-1);
if(!x9473.valid){
continue;
}
CheckValue<IkReal> x9474 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9466*x9471))+((sj3*x9465*x9467))+((sj3*x9468*x9470))+(((-1.0)*r10*x9468*x9471)))),IkReal(((((-1.0)*gconst5*r11*x9472))+(((-1.0)*gconst4*r10*x9472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9473.value)))+(x9474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9475=IKcos(j4);
IkReal x9476=IKsin(j4);
IkReal x9477=(gconst5*sj3);
IkReal x9478=(sj1*sj2);
IkReal x9479=((1.0)*r10);
IkReal x9480=((1.0)*cj2);
IkReal x9481=(cj3*gconst4);
IkReal x9482=(cj3*gconst5);
IkReal x9483=(gconst4*sj3);
IkReal x9484=((1.0)*cj1*sj2);
IkReal x9485=(sj1*x9480);
IkReal x9486=(gconst4*x9475);
IkReal x9487=(gconst5*x9475);
IkReal x9488=((1.0)*x9476);
IkReal x9489=(cj3*x9475);
IkReal x9490=(x9476*x9483);
IkReal x9491=(x9476*x9482);
IkReal x9492=((1.0)*sj3*x9475);
IkReal x9493=(x9485+x9484);
evalcond[0]=(((r22*x9476))+((r21*x9486))+(((-1.0)*r20*x9487)));
evalcond[1]=(((r01*x9486))+(((-1.0)*r00*x9487))+((r02*x9476)));
evalcond[2]=((-1.0)+(((-1.0)*x9479*x9487))+((r11*x9486))+((r12*x9476)));
evalcond[3]=(((r10*x9491))+(((-1.0)*r11*x9481*x9488))+((r12*x9489))+((r11*x9477))+((r10*x9483)));
evalcond[4]=((((-1.0)*x9476*x9477*x9479))+((r11*x9482))+(((-1.0)*r12*x9492))+((r10*x9481))+((r11*x9490)));
evalcond[5]=(((r00*x9483))+(((-1.0)*r01*x9481*x9488))+((r01*x9477))+((r02*x9489))+((r00*x9491))+x9478+(((-1.0)*cj1*x9480)));
evalcond[6]=((((-1.0)*r20*x9477*x9488))+((r21*x9482))+(((-1.0)*r22*x9492))+((r20*x9481))+(((-1.0)*x9478))+((cj1*cj2))+((r21*x9490)));
evalcond[7]=(((r20*x9483))+((r21*x9477))+(((-1.0)*r21*x9481*x9488))+((r22*x9489))+((r20*x9491))+(((-1.0)*x9493)));
evalcond[8]=((((-1.0)*r02*x9492))+(((-1.0)*r00*x9477*x9488))+((r01*x9482))+((r00*x9481))+((r01*x9490))+(((-1.0)*x9493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9494=((1.0)*gconst5);
CheckValue<IkReal> x9495=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9494)))),-1);
if(!x9495.valid){
continue;
}
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9494))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9495.value)))+(x9496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9497=IKcos(j4);
IkReal x9498=IKsin(j4);
IkReal x9499=(gconst5*sj3);
IkReal x9500=(sj1*sj2);
IkReal x9501=((1.0)*r10);
IkReal x9502=((1.0)*cj2);
IkReal x9503=(cj3*gconst4);
IkReal x9504=(cj3*gconst5);
IkReal x9505=(gconst4*sj3);
IkReal x9506=((1.0)*cj1*sj2);
IkReal x9507=(sj1*x9502);
IkReal x9508=(gconst4*x9497);
IkReal x9509=(gconst5*x9497);
IkReal x9510=((1.0)*x9498);
IkReal x9511=(cj3*x9497);
IkReal x9512=(x9498*x9505);
IkReal x9513=(x9498*x9504);
IkReal x9514=((1.0)*sj3*x9497);
IkReal x9515=(x9506+x9507);
evalcond[0]=((((-1.0)*r20*x9509))+((r21*x9508))+((r22*x9498)));
evalcond[1]=(((r02*x9498))+(((-1.0)*r00*x9509))+((r01*x9508)));
evalcond[2]=((-1.0)+((r12*x9498))+((r11*x9508))+(((-1.0)*x9501*x9509)));
evalcond[3]=(((r10*x9505))+((r12*x9511))+((r11*x9499))+(((-1.0)*r11*x9503*x9510))+((r10*x9513)));
evalcond[4]=((((-1.0)*x9498*x9499*x9501))+((r10*x9503))+((r11*x9504))+((r11*x9512))+(((-1.0)*r12*x9514)));
evalcond[5]=(((r00*x9513))+(((-1.0)*r01*x9503*x9510))+x9500+((r01*x9499))+(((-1.0)*cj1*x9502))+((r02*x9511))+((r00*x9505)));
evalcond[6]=(((r21*x9512))+((r21*x9504))+(((-1.0)*x9500))+(((-1.0)*r20*x9499*x9510))+((r20*x9503))+(((-1.0)*r22*x9514))+((cj1*cj2)));
evalcond[7]=(((r20*x9505))+((r22*x9511))+(((-1.0)*x9515))+(((-1.0)*r21*x9503*x9510))+((r21*x9499))+((r20*x9513)));
evalcond[8]=((((-1.0)*r00*x9499*x9510))+(((-1.0)*r02*x9514))+((r01*x9512))+(((-1.0)*x9515))+((r01*x9504))+((r00*x9503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
CheckValue<IkReal> x9517=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9516.value)+(((1.5707963267949)*(x9517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9518=IKcos(j4);
IkReal x9519=IKsin(j4);
IkReal x9520=(gconst5*sj3);
IkReal x9521=(sj1*sj2);
IkReal x9522=((1.0)*r10);
IkReal x9523=((1.0)*cj2);
IkReal x9524=(cj3*gconst4);
IkReal x9525=(cj3*gconst5);
IkReal x9526=(gconst4*sj3);
IkReal x9527=((1.0)*cj1*sj2);
IkReal x9528=(sj1*x9523);
IkReal x9529=(gconst4*x9518);
IkReal x9530=(gconst5*x9518);
IkReal x9531=((1.0)*x9519);
IkReal x9532=(cj3*x9518);
IkReal x9533=(x9519*x9526);
IkReal x9534=(x9519*x9525);
IkReal x9535=((1.0)*sj3*x9518);
IkReal x9536=(x9528+x9527);
evalcond[0]=((((-1.0)*r20*x9530))+((r22*x9519))+((r21*x9529)));
evalcond[1]=(((r01*x9529))+(((-1.0)*r00*x9530))+((r02*x9519)));
evalcond[2]=((-1.0)+((r11*x9529))+((r12*x9519))+(((-1.0)*x9522*x9530)));
evalcond[3]=(((r10*x9526))+(((-1.0)*r11*x9524*x9531))+((r10*x9534))+((r12*x9532))+((r11*x9520)));
evalcond[4]=(((r11*x9533))+((r10*x9524))+((r11*x9525))+(((-1.0)*x9519*x9520*x9522))+(((-1.0)*r12*x9535)));
evalcond[5]=(((r02*x9532))+(((-1.0)*r01*x9524*x9531))+((r01*x9520))+((r00*x9526))+((r00*x9534))+x9521+(((-1.0)*cj1*x9523)));
evalcond[6]=(((r20*x9524))+(((-1.0)*r22*x9535))+(((-1.0)*r20*x9520*x9531))+(((-1.0)*x9521))+((r21*x9525))+((cj1*cj2))+((r21*x9533)));
evalcond[7]=((((-1.0)*r21*x9524*x9531))+((r20*x9534))+((r20*x9526))+((r22*x9532))+(((-1.0)*x9536))+((r21*x9520)));
evalcond[8]=((((-1.0)*r00*x9520*x9531))+((r01*x9525))+((r00*x9524))+(((-1.0)*r02*x9535))+((r01*x9533))+(((-1.0)*x9536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9537=((-1.0)*r21);
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal(x9537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
IkReal x9538=((1.0)*(x9540.value));
IkReal x9539=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9538)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9538)));
IkReal gconst4=(x9537*x9539);
IkReal gconst5=((1.0)*r20*x9539);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9541=((-1.0)*r21);
CheckValue<IkReal> x9544 = IKatan2WithCheck(IkReal(x9541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9544.valid){
continue;
}
IkReal x9542=((1.0)*(x9544.value));
IkReal x9543=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9542)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9542)));
IkReal gconst4=(x9541*x9543);
IkReal gconst5=((1.0)*r20*x9543);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9545=((-1.0)*r21);
CheckValue<IkReal> x9548 = IKatan2WithCheck(IkReal(x9545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9548.valid){
continue;
}
IkReal x9546=((1.0)*(x9548.value));
IkReal x9547=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9546)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9546)));
IkReal gconst4=(x9545*x9547);
IkReal gconst5=((1.0)*r20*x9547);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9549=((-1.0)*r21);
CheckValue<IkReal> x9552 = IKatan2WithCheck(IkReal(x9549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9552.valid){
continue;
}
IkReal x9550=((1.0)*(x9552.value));
IkReal x9551=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9550)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9550)));
IkReal gconst4=(x9549*x9551);
IkReal gconst5=((1.0)*r20*x9551);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9553=((-1.0)*r21);
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal(x9553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
IkReal x9554=((1.0)*(x9556.value));
IkReal x9555=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9554)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9554)));
IkReal gconst4=(x9553*x9555);
IkReal gconst5=((1.0)*r20*x9555);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9557=((-1.0)*r21);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(x9557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9558=((1.0)*(x9560.value));
IkReal x9559=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9558)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9558)));
IkReal gconst4=(x9557*x9559);
IkReal gconst5=((1.0)*r20*x9559);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9561=(gconst4*r01);
IkReal x9562=(gconst5*r00);
CheckValue<IkReal> x9563=IKPowWithIntegerCheck(IKsign(((x9562*x9562)+(x9561*x9561)+(r02*r02)+(((-2.0)*x9561*x9562)))),-1);
if(!x9563.valid){
continue;
}
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9562))+x9561)),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9563.value)))+(x9564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9565=IKcos(j4);
IkReal x9566=IKsin(j4);
IkReal x9567=(gconst5*r10);
IkReal x9568=(gconst5*r00);
IkReal x9569=(gconst5*r20);
IkReal x9570=((1.0)*x9565);
IkReal x9571=(gconst4*x9566);
IkReal x9572=(gconst4*x9565);
IkReal x9573=((1.0)*x9566);
evalcond[0]=(((r21*x9572))+((r22*x9566))+(((-1.0)*x9569*x9570)));
evalcond[1]=((((-1.0)*x9567*x9570))+((r11*x9572))+((r12*x9566)));
evalcond[2]=((-1.0)+((r01*x9572))+(((-1.0)*x9568*x9570))+((r02*x9566)));
evalcond[3]=((((-1.0)*r02*x9570))+((r01*x9571))+(((-1.0)*x9568*x9573)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9567*x9573))+((cj1*sj2))+((r11*x9571))+(((-1.0)*r12*x9570)));
evalcond[5]=(((r21*x9571))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x9570))+(((-1.0)*x9569*x9573))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9574=((1.0)*gconst5);
CheckValue<IkReal> x9575 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9574)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9575.valid){
continue;
}
CheckValue<IkReal> x9576=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9574))+(((-1.0)*gconst4*r20)))),-1);
if(!x9576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9575.value)+(((1.5707963267949)*(x9576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9577=IKcos(j4);
IkReal x9578=IKsin(j4);
IkReal x9579=(gconst5*r10);
IkReal x9580=(gconst5*r00);
IkReal x9581=(gconst5*r20);
IkReal x9582=((1.0)*x9577);
IkReal x9583=(gconst4*x9578);
IkReal x9584=(gconst4*x9577);
IkReal x9585=((1.0)*x9578);
evalcond[0]=((((-1.0)*x9581*x9582))+((r22*x9578))+((r21*x9584)));
evalcond[1]=(((r11*x9584))+((r12*x9578))+(((-1.0)*x9579*x9582)));
evalcond[2]=((-1.0)+((r01*x9584))+(((-1.0)*x9580*x9582))+((r02*x9578)));
evalcond[3]=(((r01*x9583))+(((-1.0)*x9580*x9585))+(((-1.0)*r02*x9582)));
evalcond[4]=(((r11*x9583))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x9582))+(((-1.0)*x9579*x9585)));
evalcond[5]=((((-1.0)*x9581*x9585))+(((-1.0)*r22*x9582))+(((-1.0)*sj1*sj2))+((r21*x9583))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9586.valid){
continue;
}
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9586.value)))+(x9587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9588=IKcos(j4);
IkReal x9589=IKsin(j4);
IkReal x9590=(gconst5*r10);
IkReal x9591=(gconst5*r00);
IkReal x9592=(gconst5*r20);
IkReal x9593=((1.0)*x9588);
IkReal x9594=(gconst4*x9589);
IkReal x9595=(gconst4*x9588);
IkReal x9596=((1.0)*x9589);
evalcond[0]=((((-1.0)*x9592*x9593))+((r22*x9589))+((r21*x9595)));
evalcond[1]=(((r11*x9595))+(((-1.0)*x9590*x9593))+((r12*x9589)));
evalcond[2]=((-1.0)+((r01*x9595))+((r02*x9589))+(((-1.0)*x9591*x9593)));
evalcond[3]=(((r01*x9594))+(((-1.0)*x9591*x9596))+(((-1.0)*r02*x9593)));
evalcond[4]=(((cj2*sj1))+((r11*x9594))+(((-1.0)*x9590*x9596))+((cj1*sj2))+(((-1.0)*r12*x9593)));
evalcond[5]=((((-1.0)*r22*x9593))+(((-1.0)*x9592*x9596))+(((-1.0)*sj1*sj2))+((r21*x9594))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9597=((-1.0)*r21);
CheckValue<IkReal> x9600 = IKatan2WithCheck(IkReal(x9597),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9600.valid){
continue;
}
IkReal x9598=((1.0)*(x9600.value));
IkReal x9599=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9598)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9598)));
IkReal gconst4=(x9597*x9599);
IkReal gconst5=((1.0)*r20*x9599);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9601=((-1.0)*r21);
CheckValue<IkReal> x9604 = IKatan2WithCheck(IkReal(x9601),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9604.valid){
continue;
}
IkReal x9602=((1.0)*(x9604.value));
IkReal x9603=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9602)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9602)));
IkReal gconst4=(x9601*x9603);
IkReal gconst5=((1.0)*r20*x9603);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9605=((-1.0)*r21);
CheckValue<IkReal> x9608 = IKatan2WithCheck(IkReal(x9605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9608.valid){
continue;
}
IkReal x9606=((1.0)*(x9608.value));
IkReal x9607=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9606)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9606)));
IkReal gconst4=(x9605*x9607);
IkReal gconst5=((1.0)*r20*x9607);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9609=(gconst4*r01);
IkReal x9610=(gconst5*r00);
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9610))+x9609)),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
CheckValue<IkReal> x9612=IKPowWithIntegerCheck(IKsign(((x9609*x9609)+(x9610*x9610)+(((-2.0)*x9609*x9610))+(r02*r02))),-1);
if(!x9612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9611.value)+(((1.5707963267949)*(x9612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9613=IKcos(j4);
IkReal x9614=IKsin(j4);
IkReal x9615=(gconst4*r21);
IkReal x9616=(gconst4*r11);
IkReal x9617=(gconst4*r01);
IkReal x9618=((1.0)*x9614);
IkReal x9619=(gconst5*x9614);
IkReal x9620=((1.0)*gconst5*x9613);
evalcond[0]=(((r22*x9614))+(((-1.0)*r20*x9620))+((x9613*x9615)));
evalcond[1]=((((-1.0)*r10*x9620))+((r12*x9614))+((x9613*x9616)));
evalcond[2]=(((r00*x9619))+(((-1.0)*x9617*x9618))+((r02*x9613)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9620))+((r02*x9614))+((x9613*x9617)));
evalcond[4]=(((cj2*sj1))+((r10*x9619))+((cj1*sj2))+(((-1.0)*x9616*x9618))+((r12*x9613)));
evalcond[5]=(((r20*x9619))+(((-1.0)*x9615*x9618))+(((-1.0)*sj1*sj2))+((r22*x9613))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9621=((1.0)*gconst5);
CheckValue<IkReal> x9622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9621))+(((-1.0)*gconst4*r20)))),-1);
if(!x9622.valid){
continue;
}
CheckValue<IkReal> x9623 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9621))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9622.value)))+(x9623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9624=IKcos(j4);
IkReal x9625=IKsin(j4);
IkReal x9626=(gconst4*r21);
IkReal x9627=(gconst4*r11);
IkReal x9628=(gconst4*r01);
IkReal x9629=((1.0)*x9625);
IkReal x9630=(gconst5*x9625);
IkReal x9631=((1.0)*gconst5*x9624);
evalcond[0]=(((x9624*x9626))+((r22*x9625))+(((-1.0)*r20*x9631)));
evalcond[1]=(((x9624*x9627))+(((-1.0)*r10*x9631))+((r12*x9625)));
evalcond[2]=(((r00*x9630))+(((-1.0)*x9628*x9629))+((r02*x9624)));
evalcond[3]=((-1.0)+((x9624*x9628))+(((-1.0)*r00*x9631))+((r02*x9625)));
evalcond[4]=(((cj2*sj1))+((r10*x9630))+((cj1*sj2))+(((-1.0)*x9627*x9629))+((r12*x9624)));
evalcond[5]=((((-1.0)*x9626*x9629))+((r20*x9630))+(((-1.0)*sj1*sj2))+((r22*x9624))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9632=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9632.value)))+(x9633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9634=IKcos(j4);
IkReal x9635=IKsin(j4);
IkReal x9636=(gconst4*r21);
IkReal x9637=(gconst4*r11);
IkReal x9638=(gconst4*r01);
IkReal x9639=((1.0)*x9635);
IkReal x9640=(gconst5*x9635);
IkReal x9641=((1.0)*gconst5*x9634);
evalcond[0]=(((x9634*x9636))+(((-1.0)*r20*x9641))+((r22*x9635)));
evalcond[1]=(((x9634*x9637))+((r12*x9635))+(((-1.0)*r10*x9641)));
evalcond[2]=(((r00*x9640))+((r02*x9634))+(((-1.0)*x9638*x9639)));
evalcond[3]=((-1.0)+((x9634*x9638))+((r02*x9635))+(((-1.0)*r00*x9641)));
evalcond[4]=((((-1.0)*x9637*x9639))+((cj2*sj1))+((cj1*sj2))+((r12*x9634))+((r10*x9640)));
evalcond[5]=((((-1.0)*x9636*x9639))+(((-1.0)*sj1*sj2))+((r22*x9634))+((r20*x9640))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9642=((-1.0)*r21);
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal(x9642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
IkReal x9643=((1.0)*(x9645.value));
IkReal x9644=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9643)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9643)));
IkReal gconst4=(x9642*x9644);
IkReal gconst5=((1.0)*r20*x9644);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9646=((-1.0)*r21);
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal(x9646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
IkReal x9647=((1.0)*(x9649.value));
IkReal x9648=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9647)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9647)));
IkReal gconst4=(x9646*x9648);
IkReal gconst5=((1.0)*r20*x9648);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9650=((-1.0)*r21);
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal(x9650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
IkReal x9651=((1.0)*(x9653.value));
IkReal x9652=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9651)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9651)));
IkReal gconst4=(x9650*x9652);
IkReal gconst5=((1.0)*r20*x9652);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9654=(gconst4*r01);
IkReal x9655=(gconst5*r00);
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(r02),IkReal((x9654+(((-1.0)*x9655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
CheckValue<IkReal> x9657=IKPowWithIntegerCheck(IKsign(((x9655*x9655)+(((-2.0)*x9654*x9655))+(r02*r02)+(x9654*x9654))),-1);
if(!x9657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9656.value)+(((1.5707963267949)*(x9657.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9658=IKcos(j4);
IkReal x9659=IKsin(j4);
IkReal x9660=(gconst4*r21);
IkReal x9661=((1.0)*sj1);
IkReal x9662=(gconst4*r11);
IkReal x9663=(gconst4*r01);
IkReal x9664=((1.0)*x9659);
IkReal x9665=(gconst5*x9659);
IkReal x9666=((1.0)*gconst5*x9658);
evalcond[0]=((((-1.0)*r20*x9666))+((r22*x9659))+((x9658*x9660)));
evalcond[1]=((((-1.0)*r10*x9666))+((r12*x9659))+((x9658*x9662)));
evalcond[2]=((((-1.0)*x9663*x9664))+((r00*x9665))+((r02*x9658)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9666))+((r02*x9659))+((x9658*x9663)));
evalcond[4]=((((-1.0)*x9662*x9664))+((r12*x9658))+((r10*x9665))+((cj1*cj2))+(((-1.0)*sj2*x9661)));
evalcond[5]=((((-1.0)*cj2*x9661))+(((-1.0)*x9660*x9664))+((r20*x9665))+(((-1.0)*cj1*sj2))+((r22*x9658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9667=((1.0)*gconst5);
CheckValue<IkReal> x9668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9667))+(((-1.0)*gconst4*r20)))),-1);
if(!x9668.valid){
continue;
}
CheckValue<IkReal> x9669 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9667))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9668.value)))+(x9669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9670=IKcos(j4);
IkReal x9671=IKsin(j4);
IkReal x9672=(gconst4*r21);
IkReal x9673=((1.0)*sj1);
IkReal x9674=(gconst4*r11);
IkReal x9675=(gconst4*r01);
IkReal x9676=((1.0)*x9671);
IkReal x9677=(gconst5*x9671);
IkReal x9678=((1.0)*gconst5*x9670);
evalcond[0]=((((-1.0)*r20*x9678))+((x9670*x9672))+((r22*x9671)));
evalcond[1]=(((r12*x9671))+((x9670*x9674))+(((-1.0)*r10*x9678)));
evalcond[2]=(((r00*x9677))+((r02*x9670))+(((-1.0)*x9675*x9676)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9678))+((x9670*x9675))+((r02*x9671)));
evalcond[4]=((((-1.0)*sj2*x9673))+((r12*x9670))+(((-1.0)*x9674*x9676))+((r10*x9677))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x9673))+((r20*x9677))+(((-1.0)*cj1*sj2))+((r22*x9670))+(((-1.0)*x9672*x9676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9679=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9679.valid){
continue;
}
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9679.value)))+(x9680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9681=IKcos(j4);
IkReal x9682=IKsin(j4);
IkReal x9683=(gconst4*r21);
IkReal x9684=((1.0)*sj1);
IkReal x9685=(gconst4*r11);
IkReal x9686=(gconst4*r01);
IkReal x9687=((1.0)*x9682);
IkReal x9688=(gconst5*x9682);
IkReal x9689=((1.0)*gconst5*x9681);
evalcond[0]=(((r22*x9682))+((x9681*x9683))+(((-1.0)*r20*x9689)));
evalcond[1]=((((-1.0)*r10*x9689))+((x9681*x9685))+((r12*x9682)));
evalcond[2]=(((r02*x9681))+(((-1.0)*x9686*x9687))+((r00*x9688)));
evalcond[3]=((-1.0)+((r02*x9682))+((x9681*x9686))+(((-1.0)*r00*x9689)));
evalcond[4]=((((-1.0)*x9685*x9687))+(((-1.0)*sj2*x9684))+((r12*x9681))+((cj1*cj2))+((r10*x9688)));
evalcond[5]=(((r22*x9681))+(((-1.0)*cj1*sj2))+(((-1.0)*x9683*x9687))+((r20*x9688))+(((-1.0)*cj2*x9684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9690=((-1.0)*r21);
CheckValue<IkReal> x9693 = IKatan2WithCheck(IkReal(x9690),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9693.valid){
continue;
}
IkReal x9691=((1.0)*(x9693.value));
IkReal x9692=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9691)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9691)));
IkReal gconst4=(x9690*x9692);
IkReal gconst5=((1.0)*r20*x9692);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9694=((-1.0)*r21);
CheckValue<IkReal> x9697 = IKatan2WithCheck(IkReal(x9694),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9697.valid){
continue;
}
IkReal x9695=((1.0)*(x9697.value));
IkReal x9696=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9695)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9695)));
IkReal gconst4=(x9694*x9696);
IkReal gconst5=((1.0)*r20*x9696);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9698=((-1.0)*r21);
CheckValue<IkReal> x9701 = IKatan2WithCheck(IkReal(x9698),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9701.valid){
continue;
}
IkReal x9699=((1.0)*(x9701.value));
IkReal x9700=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9699)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9699)));
IkReal gconst4=(x9698*x9700);
IkReal gconst5=((1.0)*r20*x9700);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9702=(gconst4*r01);
IkReal x9703=(gconst5*r00);
CheckValue<IkReal> x9704 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9703))+x9702)),IKFAST_ATAN2_MAGTHRESH);
if(!x9704.valid){
continue;
}
CheckValue<IkReal> x9705=IKPowWithIntegerCheck(IKsign(((x9702*x9702)+(((-2.0)*x9702*x9703))+(r02*r02)+(x9703*x9703))),-1);
if(!x9705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9704.value)+(((1.5707963267949)*(x9705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9706=IKcos(j4);
IkReal x9707=IKsin(j4);
IkReal x9708=(gconst4*r11);
IkReal x9709=(gconst5*r10);
IkReal x9710=((1.0)*sj2);
IkReal x9711=(gconst5*r00);
IkReal x9712=(gconst5*r20);
IkReal x9713=((1.0)*x9706);
IkReal x9714=(gconst4*x9706);
IkReal x9715=((1.0)*x9707);
IkReal x9716=(gconst4*x9707);
evalcond[0]=(((r21*x9714))+(((-1.0)*x9712*x9713))+((r22*x9707)));
evalcond[1]=((((-1.0)*x9709*x9713))+((r12*x9707))+((x9706*x9708)));
evalcond[2]=((-1.0)+((r02*x9707))+(((-1.0)*x9711*x9713))+((r01*x9714)));
evalcond[3]=((((-1.0)*r02*x9713))+(((-1.0)*x9711*x9715))+((r01*x9716)));
evalcond[4]=((((-1.0)*x9709*x9715))+(((-1.0)*sj1*x9710))+(((-1.0)*r12*x9713))+((x9707*x9708))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9710))+(((-1.0)*cj2*sj1))+((r21*x9716))+(((-1.0)*r22*x9713))+(((-1.0)*x9712*x9715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9717=((1.0)*gconst5);
CheckValue<IkReal> x9718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9717))+(((-1.0)*gconst4*r20)))),-1);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9717))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9718.value)))+(x9719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9720=IKcos(j4);
IkReal x9721=IKsin(j4);
IkReal x9722=(gconst4*r11);
IkReal x9723=(gconst5*r10);
IkReal x9724=((1.0)*sj2);
IkReal x9725=(gconst5*r00);
IkReal x9726=(gconst5*r20);
IkReal x9727=((1.0)*x9720);
IkReal x9728=(gconst4*x9720);
IkReal x9729=((1.0)*x9721);
IkReal x9730=(gconst4*x9721);
evalcond[0]=((((-1.0)*x9726*x9727))+((r21*x9728))+((r22*x9721)));
evalcond[1]=(((r12*x9721))+((x9720*x9722))+(((-1.0)*x9723*x9727)));
evalcond[2]=((-1.0)+((r01*x9728))+(((-1.0)*x9725*x9727))+((r02*x9721)));
evalcond[3]=((((-1.0)*r02*x9727))+(((-1.0)*x9725*x9729))+((r01*x9730)));
evalcond[4]=((((-1.0)*r12*x9727))+(((-1.0)*sj1*x9724))+((cj1*cj2))+(((-1.0)*x9723*x9729))+((x9721*x9722)));
evalcond[5]=((((-1.0)*cj1*x9724))+(((-1.0)*cj2*sj1))+(((-1.0)*x9726*x9729))+(((-1.0)*r22*x9727))+((r21*x9730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9731=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9731.valid){
continue;
}
CheckValue<IkReal> x9732 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9731.value)))+(x9732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9733=IKcos(j4);
IkReal x9734=IKsin(j4);
IkReal x9735=(gconst4*r11);
IkReal x9736=(gconst5*r10);
IkReal x9737=((1.0)*sj2);
IkReal x9738=(gconst5*r00);
IkReal x9739=(gconst5*r20);
IkReal x9740=((1.0)*x9733);
IkReal x9741=(gconst4*x9733);
IkReal x9742=((1.0)*x9734);
IkReal x9743=(gconst4*x9734);
evalcond[0]=((((-1.0)*x9739*x9740))+((r21*x9741))+((r22*x9734)));
evalcond[1]=((((-1.0)*x9736*x9740))+((r12*x9734))+((x9733*x9735)));
evalcond[2]=((-1.0)+((r02*x9734))+((r01*x9741))+(((-1.0)*x9738*x9740)));
evalcond[3]=((((-1.0)*r02*x9740))+((r01*x9743))+(((-1.0)*x9738*x9742)));
evalcond[4]=(((x9734*x9735))+(((-1.0)*x9736*x9742))+(((-1.0)*sj1*x9737))+((cj1*cj2))+(((-1.0)*r12*x9740)));
evalcond[5]=((((-1.0)*x9739*x9742))+((r21*x9743))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9737))+(((-1.0)*r22*x9740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9744=((-1.0)*r21);
IkReal x9745=((-1.0)*r20);
CheckValue<IkReal> x9747 = IKatan2WithCheck(IkReal(x9744),IkReal(x9745),IKFAST_ATAN2_MAGTHRESH);
if(!x9747.valid){
continue;
}
IkReal x9746=((1.0)*(x9747.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9746)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9745);
rxp0_2=(py*r00);
rxp1_0=(py*x9744);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9746)));
IkReal gconst4=x9744;
IkReal gconst5=((1.0)*r20);
IkReal x9748=((1.0)*r01*r21);
IkReal x9749=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*sj3*x9749))+(((-1.0)*sj3*x9748)));
j4eval[1]=((((-1.0)*x9749))+(((-1.0)*x9748)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9750=((-1.0)*r21);
IkReal x9751=((-1.0)*r20);
CheckValue<IkReal> x9753 = IKatan2WithCheck(IkReal(x9750),IkReal(x9751),IKFAST_ATAN2_MAGTHRESH);
if(!x9753.valid){
continue;
}
IkReal x9752=((1.0)*(x9753.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9752)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9751);
rxp0_2=(py*r00);
rxp1_0=(py*x9750);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9752)));
IkReal gconst4=x9750;
IkReal gconst5=((1.0)*r20);
IkReal x9754=((1.0)*r01*r21);
IkReal x9755=((1.0)*r00*r20);
j4eval[0]=(((cj3*x9755))+((cj3*x9754)));
j4eval[1]=((((-1.0)*x9754))+(((-1.0)*x9755)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9756=((-1.0)*r21);
IkReal x9757=((-1.0)*r20);
CheckValue<IkReal> x9759 = IKatan2WithCheck(IkReal(x9756),IkReal(x9757),IKFAST_ATAN2_MAGTHRESH);
if(!x9759.valid){
continue;
}
IkReal x9758=((1.0)*(x9759.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9758)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9757);
rxp0_2=(py*r00);
rxp1_0=(py*x9756);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9758)));
IkReal gconst4=x9756;
IkReal gconst5=((1.0)*r20);
IkReal x9760=((1.0)*sj3);
j4eval[0]=((((-1.0)*r01*r21*x9760))+(((-1.0)*r00*r20*x9760)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9761=((1.0)*r00);
CheckValue<IkReal> x9762=IKPowWithIntegerCheck((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x9761))),-1);
if(!x9762.valid){
continue;
}
CheckValue<IkReal> x9763=IKPowWithIntegerCheck(r12,-1);
if(!x9763.valid){
continue;
}
CheckValue<IkReal> x9764=IKPowWithIntegerCheck(sj3,-1);
if(!x9764.valid){
continue;
}
if( IKabs(((x9762.value)*(((((-1.0)*cj3*gconst4*x9761))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9763.value)*(x9764.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9762.value)*(((((-1.0)*cj3*gconst4*x9761))+(((-1.0)*cj3*gconst5*r01))))))+IKsqr(((x9763.value)*(x9764.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9762.value)*(((((-1.0)*cj3*gconst4*x9761))+(((-1.0)*cj3*gconst5*r01))))), ((x9763.value)*(x9764.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9765=IKcos(j4);
IkReal x9766=IKsin(j4);
IkReal x9767=(cj1*cj2);
IkReal x9768=(gconst4*r21);
IkReal x9769=(gconst4*r01);
IkReal x9770=((1.0)*gconst5);
IkReal x9771=((1.0)*sj1);
IkReal x9772=(cj1*sj2);
IkReal x9773=(gconst5*sj3);
IkReal x9774=(cj3*gconst5);
IkReal x9775=(gconst4*r00);
IkReal x9776=(gconst4*r20);
IkReal x9777=(sj2*x9771);
IkReal x9778=(sj3*x9766);
IkReal x9779=(r12*x9765);
IkReal x9780=(x9766*x9774);
IkReal x9781=((1.0)*cj3*x9766);
evalcond[0]=(r12*x9766);
evalcond[1]=(((x9765*x9768))+(((-1.0)*r20*x9765*x9770)));
evalcond[2]=(((cj2*sj1))+x9772+(((-1.0)*sj3*x9779)));
evalcond[3]=(x9767+((cj3*x9779))+(((-1.0)*x9777)));
evalcond[4]=((-1.0)+((x9765*x9769))+(((-1.0)*r00*x9765*x9770)));
evalcond[5]=(((r01*x9774))+((x9769*x9778))+(((-1.0)*r00*x9770*x9778))+((cj3*x9775)));
evalcond[6]=(((r00*x9780))+((r01*x9773))+((sj3*x9775))+(((-1.0)*x9769*x9781)));
evalcond[7]=(((x9768*x9778))+x9767+((cj3*x9776))+(((-1.0)*r20*x9770*x9778))+((r21*x9774))+(((-1.0)*x9777)));
evalcond[8]=((((-1.0)*x9768*x9781))+(((-1.0)*x9772))+((r21*x9773))+((sj3*x9776))+((r20*x9780))+(((-1.0)*cj2*x9771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9782=((1.0)*r01);
IkReal x9783=(gconst5*r00);
CheckValue<IkReal> x9784=IKPowWithIntegerCheck((((cj3*x9783))+(((-1.0)*cj3*gconst4*x9782))),-1);
if(!x9784.valid){
continue;
}
CheckValue<IkReal> x9785=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x9783))),-1);
if(!x9785.valid){
continue;
}
if( IKabs(((x9784.value)*(((((-1.0)*gconst5*sj3*x9782))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9785.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9784.value)*(((((-1.0)*gconst5*sj3*x9782))+(((-1.0)*gconst4*r00*sj3))))))+IKsqr(x9785.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9784.value)*(((((-1.0)*gconst5*sj3*x9782))+(((-1.0)*gconst4*r00*sj3))))), x9785.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9786=IKcos(j4);
IkReal x9787=IKsin(j4);
IkReal x9788=(cj1*cj2);
IkReal x9789=(gconst4*r21);
IkReal x9790=(gconst4*r01);
IkReal x9791=((1.0)*gconst5);
IkReal x9792=((1.0)*sj1);
IkReal x9793=(cj1*sj2);
IkReal x9794=(gconst5*sj3);
IkReal x9795=(cj3*gconst5);
IkReal x9796=(gconst4*r00);
IkReal x9797=(gconst4*r20);
IkReal x9798=(sj2*x9792);
IkReal x9799=(sj3*x9787);
IkReal x9800=(r12*x9786);
IkReal x9801=(x9787*x9795);
IkReal x9802=((1.0)*cj3*x9787);
evalcond[0]=(r12*x9787);
evalcond[1]=((((-1.0)*r20*x9786*x9791))+((x9786*x9789)));
evalcond[2]=(((cj2*sj1))+x9793+(((-1.0)*sj3*x9800)));
evalcond[3]=(((cj3*x9800))+(((-1.0)*x9798))+x9788);
evalcond[4]=((-1.0)+((x9786*x9790))+(((-1.0)*r00*x9786*x9791)));
evalcond[5]=((((-1.0)*r00*x9791*x9799))+((cj3*x9796))+((x9790*x9799))+((r01*x9795)));
evalcond[6]=(((r00*x9801))+((sj3*x9796))+(((-1.0)*x9790*x9802))+((r01*x9794)));
evalcond[7]=(((cj3*x9797))+(((-1.0)*x9798))+((x9789*x9799))+x9788+((r21*x9795))+(((-1.0)*r20*x9791*x9799)));
evalcond[8]=(((sj3*x9797))+(((-1.0)*x9793))+((r21*x9794))+(((-1.0)*x9789*x9802))+((r20*x9801))+(((-1.0)*cj2*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9803=((1.0)*gconst5);
IkReal x9804=(gconst4*r01);
CheckValue<IkReal> x9805=IKPowWithIntegerCheck((((sj3*x9804))+(((-1.0)*r00*sj3*x9803))),-1);
if(!x9805.valid){
continue;
}
CheckValue<IkReal> x9806=IKPowWithIntegerCheck(((((-1.0)*r00*x9803))+x9804),-1);
if(!x9806.valid){
continue;
}
if( IKabs(((x9805.value)*(((((-1.0)*cj3*r01*x9803))+(((-1.0)*cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9806.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9805.value)*(((((-1.0)*cj3*r01*x9803))+(((-1.0)*cj3*gconst4*r00))))))+IKsqr(x9806.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9805.value)*(((((-1.0)*cj3*r01*x9803))+(((-1.0)*cj3*gconst4*r00))))), x9806.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9807=IKcos(j4);
IkReal x9808=IKsin(j4);
IkReal x9809=(cj1*cj2);
IkReal x9810=(gconst4*r21);
IkReal x9811=(gconst4*r01);
IkReal x9812=((1.0)*gconst5);
IkReal x9813=((1.0)*sj1);
IkReal x9814=(cj1*sj2);
IkReal x9815=(gconst5*sj3);
IkReal x9816=(cj3*gconst5);
IkReal x9817=(gconst4*r00);
IkReal x9818=(gconst4*r20);
IkReal x9819=(sj2*x9813);
IkReal x9820=(sj3*x9808);
IkReal x9821=(r12*x9807);
IkReal x9822=(x9808*x9816);
IkReal x9823=((1.0)*cj3*x9808);
evalcond[0]=(r12*x9808);
evalcond[1]=((((-1.0)*r20*x9807*x9812))+((x9807*x9810)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9821))+x9814);
evalcond[3]=((((-1.0)*x9819))+x9809+((cj3*x9821)));
evalcond[4]=((-1.0)+((x9807*x9811))+(((-1.0)*r00*x9807*x9812)));
evalcond[5]=((((-1.0)*r00*x9812*x9820))+((cj3*x9817))+((x9811*x9820))+((r01*x9816)));
evalcond[6]=((((-1.0)*x9811*x9823))+((sj3*x9817))+((r00*x9822))+((r01*x9815)));
evalcond[7]=(((r21*x9816))+(((-1.0)*x9819))+((cj3*x9818))+(((-1.0)*r20*x9812*x9820))+((x9810*x9820))+x9809);
evalcond[8]=(((r20*x9822))+((r21*x9815))+(((-1.0)*x9814))+((sj3*x9818))+(((-1.0)*x9810*x9823))+(((-1.0)*cj2*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9824=gconst4*gconst4;
IkReal x9825=gconst5*gconst5;
IkReal x9826=(gconst4*r00);
IkReal x9827=(gconst5*r01);
IkReal x9828=((1.0)*r20);
IkReal x9829=((1.0)*r22*sj3);
IkReal x9830=(r21*x9824);
CheckValue<IkReal> x9831=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst4*x9827*x9828))+((cj3*r00*r20*x9825))+(((-1.0)*cj3*gconst5*r21*x9826))+((cj3*r02*r22))+((cj3*r01*x9830)))),-1);
if(!x9831.valid){
continue;
}
CheckValue<IkReal> x9832 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*sj3*x9826*x9828))+(((-1.0)*r01*sj3*x9825*x9828))+((gconst4*r21*sj3*x9827))+((r00*sj3*x9830)))),IkReal(((((-1.0)*x9827*x9829))+(((-1.0)*x9826*x9829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9831.value)))+(x9832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9833=IKcos(j4);
IkReal x9834=IKsin(j4);
IkReal x9835=(cj1*cj2);
IkReal x9836=(gconst5*sj3);
IkReal x9837=((1.0)*r10);
IkReal x9838=((1.0)*sj1);
IkReal x9839=(cj1*sj2);
IkReal x9840=(cj3*gconst4);
IkReal x9841=(gconst4*sj3);
IkReal x9842=(cj3*gconst5);
IkReal x9843=(sj2*x9838);
IkReal x9844=(gconst4*x9833);
IkReal x9845=(gconst5*x9833);
IkReal x9846=((1.0)*x9834);
IkReal x9847=(cj3*x9833);
IkReal x9848=(x9834*x9841);
IkReal x9849=(x9834*x9842);
IkReal x9850=((1.0)*sj3*x9833);
evalcond[0]=(((r22*x9834))+(((-1.0)*r20*x9845))+((r21*x9844)));
evalcond[1]=(((r11*x9844))+((r12*x9834))+(((-1.0)*x9837*x9845)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9845))+((r01*x9844))+((r02*x9834)));
evalcond[3]=(((r02*x9847))+((r01*x9836))+(((-1.0)*r01*x9840*x9846))+((r00*x9849))+((r00*x9841)));
evalcond[4]=((((-1.0)*r02*x9850))+(((-1.0)*r00*x9836*x9846))+((r01*x9842))+((r01*x9848))+((r00*x9840)));
evalcond[5]=(((r11*x9848))+((r11*x9842))+((cj2*sj1))+((r10*x9840))+(((-1.0)*x9834*x9836*x9837))+x9839+(((-1.0)*r12*x9850)));
evalcond[6]=(((r11*x9836))+((r10*x9849))+((r10*x9841))+(((-1.0)*x9843))+((r12*x9847))+x9835+(((-1.0)*r11*x9840*x9846)));
evalcond[7]=((((-1.0)*r20*x9836*x9846))+((r20*x9840))+(((-1.0)*x9843))+(((-1.0)*r22*x9850))+x9835+((r21*x9848))+((r21*x9842)));
evalcond[8]=((((-1.0)*x9839))+((r21*x9836))+((r20*x9849))+((r20*x9841))+(((-1.0)*r21*x9840*x9846))+(((-1.0)*cj2*x9838))+((r22*x9847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9851=((1.0)*gconst5);
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9851))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
CheckValue<IkReal> x9853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9851))+(((-1.0)*gconst4*r20)))),-1);
if(!x9853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9852.value)+(((1.5707963267949)*(x9853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9854=IKcos(j4);
IkReal x9855=IKsin(j4);
IkReal x9856=(cj1*cj2);
IkReal x9857=(gconst5*sj3);
IkReal x9858=((1.0)*r10);
IkReal x9859=((1.0)*sj1);
IkReal x9860=(cj1*sj2);
IkReal x9861=(cj3*gconst4);
IkReal x9862=(gconst4*sj3);
IkReal x9863=(cj3*gconst5);
IkReal x9864=(sj2*x9859);
IkReal x9865=(gconst4*x9854);
IkReal x9866=(gconst5*x9854);
IkReal x9867=((1.0)*x9855);
IkReal x9868=(cj3*x9854);
IkReal x9869=(x9855*x9862);
IkReal x9870=(x9855*x9863);
IkReal x9871=((1.0)*sj3*x9854);
evalcond[0]=(((r21*x9865))+(((-1.0)*r20*x9866))+((r22*x9855)));
evalcond[1]=((((-1.0)*x9858*x9866))+((r11*x9865))+((r12*x9855)));
evalcond[2]=((-1.0)+((r02*x9855))+((r01*x9865))+(((-1.0)*r00*x9866)));
evalcond[3]=(((r00*x9862))+(((-1.0)*r01*x9861*x9867))+((r02*x9868))+((r01*x9857))+((r00*x9870)));
evalcond[4]=(((r00*x9861))+((r01*x9869))+((r01*x9863))+(((-1.0)*r02*x9871))+(((-1.0)*r00*x9857*x9867)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x9855*x9857*x9858))+((r11*x9863))+((r11*x9869))+((r10*x9861))+(((-1.0)*r12*x9871))+x9860);
evalcond[6]=(((r11*x9857))+(((-1.0)*x9864))+((r10*x9870))+(((-1.0)*r11*x9861*x9867))+((r12*x9868))+((r10*x9862))+x9856);
evalcond[7]=((((-1.0)*x9864))+(((-1.0)*r22*x9871))+(((-1.0)*r20*x9857*x9867))+((r21*x9863))+((r21*x9869))+((r20*x9861))+x9856);
evalcond[8]=(((r21*x9857))+((r22*x9868))+(((-1.0)*r21*x9861*x9867))+((r20*x9870))+(((-1.0)*x9860))+(((-1.0)*cj2*x9859))+((r20*x9862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9872=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9872.valid){
continue;
}
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9872.value)))+(x9873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9874=IKcos(j4);
IkReal x9875=IKsin(j4);
IkReal x9876=(cj1*cj2);
IkReal x9877=(gconst5*sj3);
IkReal x9878=((1.0)*r10);
IkReal x9879=((1.0)*sj1);
IkReal x9880=(cj1*sj2);
IkReal x9881=(cj3*gconst4);
IkReal x9882=(gconst4*sj3);
IkReal x9883=(cj3*gconst5);
IkReal x9884=(sj2*x9879);
IkReal x9885=(gconst4*x9874);
IkReal x9886=(gconst5*x9874);
IkReal x9887=((1.0)*x9875);
IkReal x9888=(cj3*x9874);
IkReal x9889=(x9875*x9882);
IkReal x9890=(x9875*x9883);
IkReal x9891=((1.0)*sj3*x9874);
evalcond[0]=(((r21*x9885))+((r22*x9875))+(((-1.0)*r20*x9886)));
evalcond[1]=(((r12*x9875))+(((-1.0)*x9878*x9886))+((r11*x9885)));
evalcond[2]=((-1.0)+((r02*x9875))+((r01*x9885))+(((-1.0)*r00*x9886)));
evalcond[3]=(((r00*x9890))+((r00*x9882))+(((-1.0)*r01*x9881*x9887))+((r01*x9877))+((r02*x9888)));
evalcond[4]=(((r01*x9889))+((r01*x9883))+((r00*x9881))+(((-1.0)*r00*x9877*x9887))+(((-1.0)*r02*x9891)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*x9875*x9877*x9878))+(((-1.0)*r12*x9891))+((r11*x9889))+((r11*x9883))+((r10*x9881))+x9880);
evalcond[6]=((((-1.0)*r11*x9881*x9887))+((r12*x9888))+(((-1.0)*x9884))+((r10*x9882))+((r10*x9890))+((r11*x9877))+x9876);
evalcond[7]=(((r20*x9881))+((r21*x9883))+((r21*x9889))+(((-1.0)*x9884))+(((-1.0)*r20*x9877*x9887))+x9876+(((-1.0)*r22*x9891)));
evalcond[8]=(((r20*x9882))+((r21*x9877))+((r22*x9888))+(((-1.0)*cj2*x9879))+((r20*x9890))+(((-1.0)*x9880))+(((-1.0)*r21*x9881*x9887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9892=((-1.0)*r21);
CheckValue<IkReal> x9895 = IKatan2WithCheck(IkReal(x9892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9895.valid){
continue;
}
IkReal x9893=((1.0)*(x9895.value));
IkReal x9894=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9893)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9893)));
IkReal gconst4=(x9892*x9894);
IkReal gconst5=((1.0)*r20*x9894);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9896=((-1.0)*r21);
CheckValue<IkReal> x9899 = IKatan2WithCheck(IkReal(x9896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9899.valid){
continue;
}
IkReal x9897=((1.0)*(x9899.value));
IkReal x9898=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9897)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9897)));
IkReal gconst4=(x9896*x9898);
IkReal gconst5=((1.0)*r20*x9898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9900=((-1.0)*r21);
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(x9900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
IkReal x9901=((1.0)*(x9903.value));
IkReal x9902=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9901)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9901)));
IkReal gconst4=(x9900*x9902);
IkReal gconst5=((1.0)*r20*x9902);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9904=((-1.0)*r21);
CheckValue<IkReal> x9907 = IKatan2WithCheck(IkReal(x9904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9907.valid){
continue;
}
IkReal x9905=((1.0)*(x9907.value));
IkReal x9906=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9905)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9905)));
IkReal gconst4=(x9904*x9906);
IkReal gconst5=((1.0)*r20*x9906);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9908=((-1.0)*r21);
CheckValue<IkReal> x9911 = IKatan2WithCheck(IkReal(x9908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9911.valid){
continue;
}
IkReal x9909=((1.0)*(x9911.value));
IkReal x9910=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9909)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9909)));
IkReal gconst4=(x9908*x9910);
IkReal gconst5=((1.0)*r20*x9910);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9912=((-1.0)*r21);
CheckValue<IkReal> x9915 = IKatan2WithCheck(IkReal(x9912),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9915.valid){
continue;
}
IkReal x9913=((1.0)*(x9915.value));
IkReal x9914=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9913)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9913)));
IkReal gconst4=(x9912*x9914);
IkReal gconst5=((1.0)*r20*x9914);
IkReal x9916=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(x9916,-1);
if(!x9920.valid){
continue;
}
IkReal x9917=x9920.value;
IkReal x9918=((1.0)*x9917);
IkReal x9919=((((-1.0)*(r02*r02)))+(((-1.0)*x9918*(r01*r01)*(r21*r21)))+(((-1.0)*x9918*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9917)));
j4eval[0]=x9919;
j4eval[1]=r02;
j4eval[2]=x9916;
j4eval[3]=IKsign(x9919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9921=(gconst4*r01);
IkReal x9922=(gconst5*r00);
CheckValue<IkReal> x9923=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9922*x9922)))+(((-1.0)*(x9921*x9921)))+(((2.0)*x9921*x9922)))),-1);
if(!x9923.valid){
continue;
}
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9922))+x9921)),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9923.value)))+(x9924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9925=IKcos(j4);
IkReal x9926=IKsin(j4);
IkReal x9927=(gconst5*r10);
IkReal x9928=((1.0)*sj2);
IkReal x9929=(gconst5*r00);
IkReal x9930=(gconst5*r20);
IkReal x9931=((1.0)*x9925);
IkReal x9932=(gconst4*x9926);
IkReal x9933=(gconst4*x9925);
IkReal x9934=((1.0)*x9926);
evalcond[0]=((((-1.0)*x9930*x9931))+((r21*x9933))+((r22*x9926)));
evalcond[1]=((((-1.0)*x9927*x9931))+((r11*x9933))+((r12*x9926)));
evalcond[2]=((1.0)+((r01*x9933))+((r02*x9926))+(((-1.0)*x9929*x9931)));
evalcond[3]=(((r01*x9932))+(((-1.0)*r02*x9931))+(((-1.0)*x9929*x9934)));
evalcond[4]=((((-1.0)*x9930*x9934))+(((-1.0)*r22*x9931))+((r21*x9932))+(((-1.0)*sj1*x9928))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9927*x9934))+((r11*x9932))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x9931))+(((-1.0)*cj1*x9928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9935=((1.0)*gconst5);
CheckValue<IkReal> x9936=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x9935)))),-1);
if(!x9936.valid){
continue;
}
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9935))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9936.value)))+(x9937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9938=IKcos(j4);
IkReal x9939=IKsin(j4);
IkReal x9940=(gconst5*r10);
IkReal x9941=((1.0)*sj2);
IkReal x9942=(gconst5*r00);
IkReal x9943=(gconst5*r20);
IkReal x9944=((1.0)*x9938);
IkReal x9945=(gconst4*x9939);
IkReal x9946=(gconst4*x9938);
IkReal x9947=((1.0)*x9939);
evalcond[0]=(((r22*x9939))+((r21*x9946))+(((-1.0)*x9943*x9944)));
evalcond[1]=((((-1.0)*x9940*x9944))+((r12*x9939))+((r11*x9946)));
evalcond[2]=((1.0)+((r01*x9946))+((r02*x9939))+(((-1.0)*x9942*x9944)));
evalcond[3]=(((r01*x9945))+(((-1.0)*r02*x9944))+(((-1.0)*x9942*x9947)));
evalcond[4]=((((-1.0)*r22*x9944))+(((-1.0)*sj1*x9941))+((r21*x9945))+((cj1*cj2))+(((-1.0)*x9943*x9947)));
evalcond[5]=((((-1.0)*x9940*x9947))+(((-1.0)*cj2*sj1))+((r11*x9945))+(((-1.0)*r12*x9944))+(((-1.0)*cj1*x9941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
CheckValue<IkReal> x9949=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9948.value)+(((1.5707963267949)*(x9949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9950=IKcos(j4);
IkReal x9951=IKsin(j4);
IkReal x9952=(gconst5*r10);
IkReal x9953=((1.0)*sj2);
IkReal x9954=(gconst5*r00);
IkReal x9955=(gconst5*r20);
IkReal x9956=((1.0)*x9950);
IkReal x9957=(gconst4*x9951);
IkReal x9958=(gconst4*x9950);
IkReal x9959=((1.0)*x9951);
evalcond[0]=((((-1.0)*x9955*x9956))+((r21*x9958))+((r22*x9951)));
evalcond[1]=(((r11*x9958))+((r12*x9951))+(((-1.0)*x9952*x9956)));
evalcond[2]=((1.0)+((r02*x9951))+(((-1.0)*x9954*x9956))+((r01*x9958)));
evalcond[3]=((((-1.0)*r02*x9956))+(((-1.0)*x9954*x9959))+((r01*x9957)));
evalcond[4]=((((-1.0)*x9955*x9959))+(((-1.0)*r22*x9956))+(((-1.0)*sj1*x9953))+((cj1*cj2))+((r21*x9957)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r11*x9957))+(((-1.0)*r12*x9956))+(((-1.0)*x9952*x9959))+(((-1.0)*cj1*x9953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9960=((-1.0)*r21);
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal(x9960),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
IkReal x9961=((1.0)*(x9963.value));
IkReal x9962=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9961)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9961)));
IkReal gconst4=(x9960*x9962);
IkReal gconst5=((1.0)*r20*x9962);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9964=((-1.0)*r21);
CheckValue<IkReal> x9967 = IKatan2WithCheck(IkReal(x9964),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9967.valid){
continue;
}
IkReal x9965=((1.0)*(x9967.value));
IkReal x9966=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9965)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9965)));
IkReal gconst4=(x9964*x9966);
IkReal gconst5=((1.0)*r20*x9966);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9968=((-1.0)*r21);
CheckValue<IkReal> x9971 = IKatan2WithCheck(IkReal(x9968),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9971.valid){
continue;
}
IkReal x9969=((1.0)*(x9971.value));
IkReal x9970=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9969)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9969)));
IkReal gconst4=(x9968*x9970);
IkReal gconst5=((1.0)*r20*x9970);
IkReal x9972=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9976=IKPowWithIntegerCheck(x9972,-1);
if(!x9976.valid){
continue;
}
IkReal x9973=x9976.value;
IkReal x9974=((1.0)*x9973);
IkReal x9975=((((-1.0)*x9974*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9973))+(((-1.0)*x9974*(r01*r01)*(r21*r21))));
j4eval[0]=x9975;
j4eval[1]=r02;
j4eval[2]=x9972;
j4eval[3]=IKsign(x9975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9977=(gconst4*r01);
IkReal x9978=(gconst5*r00);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9978))+x9977)),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
CheckValue<IkReal> x9980=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9978*x9978)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9977*x9977)))+(((2.0)*x9977*x9978)))),-1);
if(!x9980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9979.value)+(((1.5707963267949)*(x9980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9981=IKcos(j4);
IkReal x9982=IKsin(j4);
IkReal x9983=(gconst4*r21);
IkReal x9984=((1.0)*sj1);
IkReal x9985=(gconst4*r11);
IkReal x9986=(gconst4*r01);
IkReal x9987=((1.0)*x9982);
IkReal x9988=(gconst5*x9982);
IkReal x9989=((1.0)*gconst5*x9981);
evalcond[0]=(((r22*x9982))+(((-1.0)*r20*x9989))+((x9981*x9983)));
evalcond[1]=((((-1.0)*r10*x9989))+((r12*x9982))+((x9981*x9985)));
evalcond[2]=(((r00*x9988))+(((-1.0)*x9986*x9987))+((r02*x9981)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9989))+((r02*x9982))+((x9981*x9986)));
evalcond[4]=(((r22*x9981))+((r20*x9988))+((cj1*cj2))+(((-1.0)*sj2*x9984))+(((-1.0)*x9983*x9987)));
evalcond[5]=(((r10*x9988))+(((-1.0)*cj2*x9984))+((r12*x9981))+(((-1.0)*cj1*sj2))+(((-1.0)*x9985*x9987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9990=((1.0)*gconst5);
CheckValue<IkReal> x9991 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9990)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9991.valid){
continue;
}
CheckValue<IkReal> x9992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9990))+(((-1.0)*gconst4*r10)))),-1);
if(!x9992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9991.value)+(((1.5707963267949)*(x9992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9993=IKcos(j4);
IkReal x9994=IKsin(j4);
IkReal x9995=(gconst4*r21);
IkReal x9996=((1.0)*sj1);
IkReal x9997=(gconst4*r11);
IkReal x9998=(gconst4*r01);
IkReal x9999=((1.0)*x9994);
IkReal x10000=(gconst5*x9994);
IkReal x10001=((1.0)*gconst5*x9993);
evalcond[0]=((((-1.0)*r20*x10001))+((r22*x9994))+((x9993*x9995)));
evalcond[1]=(((r12*x9994))+((x9993*x9997))+(((-1.0)*r10*x10001)));
evalcond[2]=((((-1.0)*x9998*x9999))+((r02*x9993))+((r00*x10000)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10001))+((r02*x9994))+((x9993*x9998)));
evalcond[4]=(((r22*x9993))+(((-1.0)*x9995*x9999))+((cj1*cj2))+((r20*x10000))+(((-1.0)*sj2*x9996)));
evalcond[5]=((((-1.0)*cj2*x9996))+((r12*x9993))+(((-1.0)*cj1*sj2))+((r10*x10000))+(((-1.0)*x9997*x9999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10002 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10002.valid){
continue;
}
CheckValue<IkReal> x10003=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10002.value)+(((1.5707963267949)*(x10003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10004=IKcos(j4);
IkReal x10005=IKsin(j4);
IkReal x10006=(gconst4*r21);
IkReal x10007=((1.0)*sj1);
IkReal x10008=(gconst4*r11);
IkReal x10009=(gconst4*r01);
IkReal x10010=((1.0)*x10005);
IkReal x10011=(gconst5*x10005);
IkReal x10012=((1.0)*gconst5*x10004);
evalcond[0]=((((-1.0)*r20*x10012))+((r22*x10005))+((x10004*x10006)));
evalcond[1]=(((r12*x10005))+((x10004*x10008))+(((-1.0)*r10*x10012)));
evalcond[2]=(((r02*x10004))+(((-1.0)*x10009*x10010))+((r00*x10011)));
evalcond[3]=((1.0)+((r02*x10005))+((x10004*x10009))+(((-1.0)*r00*x10012)));
evalcond[4]=((((-1.0)*sj2*x10007))+((r22*x10004))+(((-1.0)*x10006*x10010))+((cj1*cj2))+((r20*x10011)));
evalcond[5]=(((r12*x10004))+(((-1.0)*x10008*x10010))+((r10*x10011))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10013=((-1.0)*r21);
CheckValue<IkReal> x10016 = IKatan2WithCheck(IkReal(x10013),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10016.valid){
continue;
}
IkReal x10014=((1.0)*(x10016.value));
IkReal x10015=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10014)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10014)));
IkReal gconst4=(x10013*x10015);
IkReal gconst5=((1.0)*r20*x10015);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10017=((-1.0)*r21);
CheckValue<IkReal> x10020 = IKatan2WithCheck(IkReal(x10017),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10020.valid){
continue;
}
IkReal x10018=((1.0)*(x10020.value));
IkReal x10019=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10018)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10018)));
IkReal gconst4=(x10017*x10019);
IkReal gconst5=((1.0)*r20*x10019);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10021=((-1.0)*r21);
CheckValue<IkReal> x10024 = IKatan2WithCheck(IkReal(x10021),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10024.valid){
continue;
}
IkReal x10022=((1.0)*(x10024.value));
IkReal x10023=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10022)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10022)));
IkReal gconst4=(x10021*x10023);
IkReal gconst5=((1.0)*r20*x10023);
IkReal x10025=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10029=IKPowWithIntegerCheck(x10025,-1);
if(!x10029.valid){
continue;
}
IkReal x10026=x10029.value;
IkReal x10027=((1.0)*x10026);
IkReal x10028=((((-2.0)*r00*r01*r20*r21*x10026))+(((-1.0)*x10027*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10027*(r00*r00)*(r20*r20))));
j4eval[0]=x10028;
j4eval[1]=r02;
j4eval[2]=x10025;
j4eval[3]=IKsign(x10028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10030=(gconst4*r01);
IkReal x10031=(gconst5*r00);
CheckValue<IkReal> x10032 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10031))+x10030)),IKFAST_ATAN2_MAGTHRESH);
if(!x10032.valid){
continue;
}
CheckValue<IkReal> x10033=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10031*x10031)))+(((2.0)*x10030*x10031))+(((-1.0)*(x10030*x10030))))),-1);
if(!x10033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10032.value)+(((1.5707963267949)*(x10033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10034=IKcos(j4);
IkReal x10035=IKsin(j4);
IkReal x10036=(gconst4*r21);
IkReal x10037=((1.0)*cj2);
IkReal x10038=(gconst4*r11);
IkReal x10039=(gconst4*r01);
IkReal x10040=((1.0)*x10035);
IkReal x10041=(gconst5*x10035);
IkReal x10042=((1.0)*gconst5*x10034);
evalcond[0]=(((x10034*x10036))+(((-1.0)*r20*x10042))+((r22*x10035)));
evalcond[1]=(((x10034*x10038))+(((-1.0)*r10*x10042))+((r12*x10035)));
evalcond[2]=(((r00*x10041))+(((-1.0)*x10039*x10040))+((r02*x10034)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10042))+((x10034*x10039))+((r02*x10035)));
evalcond[4]=(((r10*x10041))+(((-1.0)*x10038*x10040))+((sj1*sj2))+((r12*x10034))+(((-1.0)*cj1*x10037)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x10036*x10040))+((r20*x10041))+((r22*x10034))+(((-1.0)*sj1*x10037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10043=((1.0)*gconst5);
CheckValue<IkReal> x10044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10043))+(((-1.0)*gconst4*r10)))),-1);
if(!x10044.valid){
continue;
}
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10043)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10044.value)))+(x10045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10046=IKcos(j4);
IkReal x10047=IKsin(j4);
IkReal x10048=(gconst4*r21);
IkReal x10049=((1.0)*cj2);
IkReal x10050=(gconst4*r11);
IkReal x10051=(gconst4*r01);
IkReal x10052=((1.0)*x10047);
IkReal x10053=(gconst5*x10047);
IkReal x10054=((1.0)*gconst5*x10046);
evalcond[0]=(((x10046*x10048))+(((-1.0)*r20*x10054))+((r22*x10047)));
evalcond[1]=(((r12*x10047))+(((-1.0)*r10*x10054))+((x10046*x10050)));
evalcond[2]=(((r00*x10053))+(((-1.0)*x10051*x10052))+((r02*x10046)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10054))+((r02*x10047))+((x10046*x10051)));
evalcond[4]=(((r10*x10053))+((sj1*sj2))+(((-1.0)*x10050*x10052))+((r12*x10046))+(((-1.0)*cj1*x10049)));
evalcond[5]=((((-1.0)*sj1*x10049))+((r20*x10053))+(((-1.0)*cj1*sj2))+(((-1.0)*x10048*x10052))+((r22*x10046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10055.value)+(((1.5707963267949)*(x10056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10057=IKcos(j4);
IkReal x10058=IKsin(j4);
IkReal x10059=(gconst4*r21);
IkReal x10060=((1.0)*cj2);
IkReal x10061=(gconst4*r11);
IkReal x10062=(gconst4*r01);
IkReal x10063=((1.0)*x10058);
IkReal x10064=(gconst5*x10058);
IkReal x10065=((1.0)*gconst5*x10057);
evalcond[0]=(((x10057*x10059))+(((-1.0)*r20*x10065))+((r22*x10058)));
evalcond[1]=(((x10057*x10061))+(((-1.0)*r10*x10065))+((r12*x10058)));
evalcond[2]=(((r00*x10064))+((r02*x10057))+(((-1.0)*x10062*x10063)));
evalcond[3]=((1.0)+((r02*x10058))+(((-1.0)*r00*x10065))+((x10057*x10062)));
evalcond[4]=(((r10*x10064))+((sj1*sj2))+(((-1.0)*x10061*x10063))+(((-1.0)*cj1*x10060))+((r12*x10057)));
evalcond[5]=((((-1.0)*x10059*x10063))+((r20*x10064))+(((-1.0)*cj1*sj2))+((r22*x10057))+(((-1.0)*sj1*x10060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10066=((-1.0)*r21);
CheckValue<IkReal> x10069 = IKatan2WithCheck(IkReal(x10066),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10069.valid){
continue;
}
IkReal x10067=((1.0)*(x10069.value));
IkReal x10068=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10067)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10067)));
IkReal gconst4=(x10066*x10068);
IkReal gconst5=((1.0)*r20*x10068);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10070=((-1.0)*r21);
CheckValue<IkReal> x10073 = IKatan2WithCheck(IkReal(x10070),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10073.valid){
continue;
}
IkReal x10071=((1.0)*(x10073.value));
IkReal x10072=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10071)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10071)));
IkReal gconst4=(x10070*x10072);
IkReal gconst5=((1.0)*r20*x10072);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10074=((-1.0)*r21);
CheckValue<IkReal> x10077 = IKatan2WithCheck(IkReal(x10074),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10077.valid){
continue;
}
IkReal x10075=((1.0)*(x10077.value));
IkReal x10076=x8836;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10075)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10075)));
IkReal gconst4=(x10074*x10076);
IkReal gconst5=((1.0)*r20*x10076);
IkReal x10078=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10082=IKPowWithIntegerCheck(x10078,-1);
if(!x10082.valid){
continue;
}
IkReal x10079=x10082.value;
IkReal x10080=((1.0)*x10079);
IkReal x10081=((((-1.0)*x10080*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10079))+(((-1.0)*x10080*(r01*r01)*(r21*r21))));
j4eval[0]=x10081;
j4eval[1]=r02;
j4eval[2]=x10078;
j4eval[3]=IKsign(x10081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=(gconst4*r01);
IkReal x10084=(gconst5*r00);
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal(r02),IkReal((x10083+(((-1.0)*x10084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10083*x10083)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10084*x10084)))+(((2.0)*x10083*x10084)))),-1);
if(!x10086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10085.value)+(((1.5707963267949)*(x10086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10087=IKcos(j4);
IkReal x10088=IKsin(j4);
IkReal x10089=(gconst4*r11);
IkReal x10090=(gconst5*r10);
IkReal x10091=((1.0)*cj1);
IkReal x10092=(gconst5*r00);
IkReal x10093=(gconst5*r20);
IkReal x10094=((1.0)*x10087);
IkReal x10095=(gconst4*x10087);
IkReal x10096=((1.0)*x10088);
IkReal x10097=(gconst4*x10088);
evalcond[0]=((((-1.0)*x10093*x10094))+((r21*x10095))+((r22*x10088)));
evalcond[1]=(((x10087*x10089))+(((-1.0)*x10090*x10094))+((r12*x10088)));
evalcond[2]=((1.0)+(((-1.0)*x10092*x10094))+((r02*x10088))+((r01*x10095)));
evalcond[3]=((((-1.0)*x10092*x10096))+(((-1.0)*r02*x10094))+((r01*x10097)));
evalcond[4]=((((-1.0)*cj2*x10091))+((x10088*x10089))+(((-1.0)*r12*x10094))+((sj1*sj2))+(((-1.0)*x10090*x10096)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10091))+(((-1.0)*x10093*x10096))+((r21*x10097))+(((-1.0)*r22*x10094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10098=((1.0)*gconst5);
CheckValue<IkReal> x10099 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10098))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10099.valid){
continue;
}
CheckValue<IkReal> x10100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10098))+(((-1.0)*gconst4*r10)))),-1);
if(!x10100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10099.value)+(((1.5707963267949)*(x10100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10101=IKcos(j4);
IkReal x10102=IKsin(j4);
IkReal x10103=(gconst4*r11);
IkReal x10104=(gconst5*r10);
IkReal x10105=((1.0)*cj1);
IkReal x10106=(gconst5*r00);
IkReal x10107=(gconst5*r20);
IkReal x10108=((1.0)*x10101);
IkReal x10109=(gconst4*x10101);
IkReal x10110=((1.0)*x10102);
IkReal x10111=(gconst4*x10102);
evalcond[0]=(((r21*x10109))+((r22*x10102))+(((-1.0)*x10107*x10108)));
evalcond[1]=(((x10101*x10103))+(((-1.0)*x10104*x10108))+((r12*x10102)));
evalcond[2]=((1.0)+((r01*x10109))+(((-1.0)*x10106*x10108))+((r02*x10102)));
evalcond[3]=(((r01*x10111))+(((-1.0)*x10106*x10110))+(((-1.0)*r02*x10108)));
evalcond[4]=((((-1.0)*r12*x10108))+((x10102*x10103))+((sj1*sj2))+(((-1.0)*cj2*x10105))+(((-1.0)*x10104*x10110)));
evalcond[5]=(((r21*x10111))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x10108))+(((-1.0)*sj2*x10105))+(((-1.0)*x10107*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10112 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10112.valid){
continue;
}
CheckValue<IkReal> x10113=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10112.value)+(((1.5707963267949)*(x10113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10114=IKcos(j4);
IkReal x10115=IKsin(j4);
IkReal x10116=(gconst4*r11);
IkReal x10117=(gconst5*r10);
IkReal x10118=((1.0)*cj1);
IkReal x10119=(gconst5*r00);
IkReal x10120=(gconst5*r20);
IkReal x10121=((1.0)*x10114);
IkReal x10122=(gconst4*x10114);
IkReal x10123=((1.0)*x10115);
IkReal x10124=(gconst4*x10115);
evalcond[0]=((((-1.0)*x10120*x10121))+((r21*x10122))+((r22*x10115)));
evalcond[1]=((((-1.0)*x10117*x10121))+((r12*x10115))+((x10114*x10116)));
evalcond[2]=((1.0)+((r02*x10115))+((r01*x10122))+(((-1.0)*x10119*x10121)));
evalcond[3]=((((-1.0)*r02*x10121))+((r01*x10124))+(((-1.0)*x10119*x10123)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10117*x10123))+((x10115*x10116))+(((-1.0)*cj2*x10118))+(((-1.0)*r12*x10121)));
evalcond[5]=((((-1.0)*x10120*x10123))+((r21*x10124))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10118))+(((-1.0)*r22*x10121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10125=gconst4*gconst4;
IkReal x10126=gconst5*gconst5;
IkReal x10127=(gconst4*r00);
IkReal x10128=(gconst5*r01);
IkReal x10129=((1.0)*r20);
IkReal x10130=((1.0)*r22*sj3);
IkReal x10131=(r21*x10125);
CheckValue<IkReal> x10132 = IKatan2WithCheck(IkReal((((r00*sj3*x10131))+(((-1.0)*gconst5*sj3*x10127*x10129))+(((-1.0)*r01*sj3*x10126*x10129))+((gconst4*r21*sj3*x10128)))),IkReal(((((-1.0)*x10127*x10130))+(((-1.0)*x10128*x10130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10132.valid){
continue;
}
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst5*r21*x10127))+((cj3*r00*r20*x10126))+(((-1.0)*cj3*gconst4*x10128*x10129))+((cj3*r01*x10131))+((cj3*r02*r22)))),-1);
if(!x10133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10132.value)+(((1.5707963267949)*(x10133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10134=IKcos(j4);
IkReal x10135=IKsin(j4);
IkReal x10136=(gconst5*sj3);
IkReal x10137=(sj1*sj2);
IkReal x10138=((1.0)*r10);
IkReal x10139=((1.0)*cj2);
IkReal x10140=(cj3*gconst4);
IkReal x10141=(gconst4*sj3);
IkReal x10142=(cj3*gconst5);
IkReal x10143=((1.0)*cj1*sj2);
IkReal x10144=(sj1*x10139);
IkReal x10145=(gconst4*x10134);
IkReal x10146=(gconst5*x10134);
IkReal x10147=((1.0)*x10135);
IkReal x10148=(cj3*x10134);
IkReal x10149=(x10135*x10141);
IkReal x10150=(x10135*x10142);
IkReal x10151=((1.0)*sj3*x10134);
IkReal x10152=(x10143+x10144);
evalcond[0]=((((-1.0)*r20*x10146))+((r21*x10145))+((r22*x10135)));
evalcond[1]=((((-1.0)*x10138*x10146))+((r11*x10145))+((r12*x10135)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10146))+((r02*x10135))+((r01*x10145)));
evalcond[3]=(((r02*x10148))+((r01*x10136))+((r00*x10141))+((r00*x10150))+(((-1.0)*r01*x10140*x10147)));
evalcond[4]=((((-1.0)*r00*x10136*x10147))+(((-1.0)*r02*x10151))+((r00*x10140))+((r01*x10142))+((r01*x10149)));
evalcond[5]=(((r11*x10136))+((r12*x10148))+(((-1.0)*cj1*x10139))+((r10*x10141))+((r10*x10150))+x10137+(((-1.0)*r11*x10140*x10147)));
evalcond[6]=(((r21*x10149))+((r21*x10142))+(((-1.0)*x10137))+((cj1*cj2))+(((-1.0)*r22*x10151))+(((-1.0)*r20*x10136*x10147))+((r20*x10140)));
evalcond[7]=(((r21*x10136))+((r22*x10148))+(((-1.0)*x10152))+(((-1.0)*r21*x10140*x10147))+((r20*x10150))+((r20*x10141)));
evalcond[8]=(((r10*x10140))+(((-1.0)*x10152))+(((-1.0)*r12*x10151))+((r11*x10149))+((r11*x10142))+(((-1.0)*x10135*x10136*x10138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10153=((1.0)*gconst5);
CheckValue<IkReal> x10154 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10153)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10154.valid){
continue;
}
CheckValue<IkReal> x10155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10153))+(((-1.0)*gconst4*r10)))),-1);
if(!x10155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10154.value)+(((1.5707963267949)*(x10155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10156=IKcos(j4);
IkReal x10157=IKsin(j4);
IkReal x10158=(gconst5*sj3);
IkReal x10159=(sj1*sj2);
IkReal x10160=((1.0)*r10);
IkReal x10161=((1.0)*cj2);
IkReal x10162=(cj3*gconst4);
IkReal x10163=(gconst4*sj3);
IkReal x10164=(cj3*gconst5);
IkReal x10165=((1.0)*cj1*sj2);
IkReal x10166=(sj1*x10161);
IkReal x10167=(gconst4*x10156);
IkReal x10168=(gconst5*x10156);
IkReal x10169=((1.0)*x10157);
IkReal x10170=(cj3*x10156);
IkReal x10171=(x10157*x10163);
IkReal x10172=(x10157*x10164);
IkReal x10173=((1.0)*sj3*x10156);
IkReal x10174=(x10165+x10166);
evalcond[0]=(((r22*x10157))+(((-1.0)*r20*x10168))+((r21*x10167)));
evalcond[1]=(((r12*x10157))+(((-1.0)*x10160*x10168))+((r11*x10167)));
evalcond[2]=((1.0)+((r02*x10157))+((r01*x10167))+(((-1.0)*r00*x10168)));
evalcond[3]=(((r02*x10170))+((r00*x10163))+((r00*x10172))+(((-1.0)*r01*x10162*x10169))+((r01*x10158)));
evalcond[4]=((((-1.0)*r00*x10158*x10169))+((r01*x10164))+((r00*x10162))+((r01*x10171))+(((-1.0)*r02*x10173)));
evalcond[5]=(((r10*x10163))+((r10*x10172))+((r12*x10170))+x10159+((r11*x10158))+(((-1.0)*cj1*x10161))+(((-1.0)*r11*x10162*x10169)));
evalcond[6]=((((-1.0)*r22*x10173))+((r20*x10162))+((r21*x10171))+((cj1*cj2))+(((-1.0)*x10159))+((r21*x10164))+(((-1.0)*r20*x10158*x10169)));
evalcond[7]=(((r21*x10158))+((r22*x10170))+((r20*x10163))+(((-1.0)*x10174))+(((-1.0)*r21*x10162*x10169))+((r20*x10172)));
evalcond[8]=(((r10*x10162))+((r11*x10171))+((r11*x10164))+(((-1.0)*r12*x10173))+(((-1.0)*x10157*x10158*x10160))+(((-1.0)*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10175.value)+(((1.5707963267949)*(x10176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10177=IKcos(j4);
IkReal x10178=IKsin(j4);
IkReal x10179=(gconst5*sj3);
IkReal x10180=(sj1*sj2);
IkReal x10181=((1.0)*r10);
IkReal x10182=((1.0)*cj2);
IkReal x10183=(cj3*gconst4);
IkReal x10184=(gconst4*sj3);
IkReal x10185=(cj3*gconst5);
IkReal x10186=((1.0)*cj1*sj2);
IkReal x10187=(sj1*x10182);
IkReal x10188=(gconst4*x10177);
IkReal x10189=(gconst5*x10177);
IkReal x10190=((1.0)*x10178);
IkReal x10191=(cj3*x10177);
IkReal x10192=(x10178*x10184);
IkReal x10193=(x10178*x10185);
IkReal x10194=((1.0)*sj3*x10177);
IkReal x10195=(x10187+x10186);
evalcond[0]=((((-1.0)*r20*x10189))+((r22*x10178))+((r21*x10188)));
evalcond[1]=(((r11*x10188))+((r12*x10178))+(((-1.0)*x10181*x10189)));
evalcond[2]=((1.0)+((r02*x10178))+(((-1.0)*r00*x10189))+((r01*x10188)));
evalcond[3]=(((r02*x10191))+(((-1.0)*r01*x10183*x10190))+((r01*x10179))+((r00*x10184))+((r00*x10193)));
evalcond[4]=((((-1.0)*r02*x10194))+((r00*x10183))+((r01*x10192))+((r01*x10185))+(((-1.0)*r00*x10179*x10190)));
evalcond[5]=((((-1.0)*r11*x10183*x10190))+((r10*x10184))+(((-1.0)*cj1*x10182))+((r11*x10179))+((r10*x10193))+((r12*x10191))+x10180);
evalcond[6]=((((-1.0)*r20*x10179*x10190))+(((-1.0)*x10180))+((r21*x10192))+((r21*x10185))+((cj1*cj2))+((r20*x10183))+(((-1.0)*r22*x10194)));
evalcond[7]=((((-1.0)*r21*x10183*x10190))+((r22*x10191))+(((-1.0)*x10195))+((r21*x10179))+((r20*x10193))+((r20*x10184)));
evalcond[8]=((((-1.0)*x10178*x10179*x10181))+((r11*x10185))+((r10*x10183))+((r11*x10192))+(((-1.0)*x10195))+(((-1.0)*r12*x10194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10196=((-1.0)*r21);
IkReal x10197=((-1.0)*px);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10198=((1.0)*(x10199.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10198)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10197);
rxp1_1=(px*r21);
rxp1_2=(r11*x10197);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10198)));
IkReal gconst4=x10196;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10200=((-1.0)*r21);
IkReal x10201=((-1.0)*px);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10202=((1.0)*(x10203.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10201);
rxp1_1=(px*r21);
rxp1_2=(r11*x10201);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=x10200;
IkReal gconst5=((1.0)*r20);
IkReal x10204=((1.0)*sj3);
j4eval[0]=((((-1.0)*x10204*(r21*r21)))+(((-1.0)*x10204))+((x10204*(r10*r10))));
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10205=((-1.0)*r21);
IkReal x10206=((-1.0)*px);
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(x10205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
IkReal x10207=((1.0)*(x10208.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10207)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10206);
rxp1_1=(px*r21);
rxp1_2=(r11*x10206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10207)));
IkReal gconst4=x10205;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10209=((-1.0)*r21);
IkReal x10210=((-1.0)*px);
CheckValue<IkReal> x10212 = IKatan2WithCheck(IkReal(x10209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10212.valid){
continue;
}
IkReal x10211=((1.0)*(x10212.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10211)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10210);
rxp1_1=(px*r21);
rxp1_2=(r11*x10210);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10211)));
IkReal gconst4=x10209;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10213=((-1.0)*r21);
IkReal x10214=((-1.0)*px);
CheckValue<IkReal> x10216 = IKatan2WithCheck(IkReal(x10213),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10216.valid){
continue;
}
IkReal x10215=((1.0)*(x10216.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10215)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10214);
rxp1_1=(px*r21);
rxp1_2=(r11*x10214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10215)));
IkReal gconst4=x10213;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10217=((-1.0)*r21);
IkReal x10218=((-1.0)*px);
CheckValue<IkReal> x10220 = IKatan2WithCheck(IkReal(x10217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10220.valid){
continue;
}
IkReal x10219=((1.0)*(x10220.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10219)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10218);
rxp1_1=(px*r21);
rxp1_2=(r11*x10218);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10219)));
IkReal gconst4=x10217;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10223=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10223.valid){
continue;
}
IkReal x10221=x10223.value;
IkReal x10222=(sj0*x10221);
sj4array[0]=(((sj1*sj2*x10222))+(((-1.0)*cj1*cj2*x10222)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10224=IKcos(j4);
IkReal x10225=IKsin(j4);
IkReal x10226=(gconst5*r20);
IkReal x10227=(gconst4*x10224);
IkReal x10228=((1.0)*x10224);
evalcond[0]=(r02*x10224);
evalcond[1]=((((-1.0)*sj0))+((r02*x10225)));
evalcond[2]=((((-1.0)*x10226*x10228))+((r21*x10227)));
evalcond[3]=(((r11*x10227))+(((-1.0)*gconst5*r10*x10228)));
evalcond[4]=(((x10225*x10226))+(((-1.0)*gconst4*r21*x10225))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10230=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10230.valid){
continue;
}
IkReal x10229=x10230.value;
sj4array[0]=(((cj2*sj1*x10229))+((cj1*sj2*x10229)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10231=IKcos(j4);
IkReal x10232=IKsin(j4);
IkReal x10233=(gconst4*r11);
IkReal x10234=((1.0)*sj0);
IkReal x10235=(gconst5*r10);
IkReal x10236=((1.0)*x10231);
evalcond[0]=(r02*x10231);
evalcond[1]=(((r02*x10232))+(((-1.0)*x10234)));
evalcond[2]=(((gconst4*r21*x10231))+(((-1.0)*gconst5*r20*x10236)));
evalcond[3]=((((-1.0)*x10235*x10236))+((x10231*x10233)));
evalcond[4]=((((-1.0)*sj1*sj2*x10234))+((x10232*x10235))+(((-1.0)*x10232*x10233))+((cj1*cj2*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10237=IKPowWithIntegerCheck(r02,-1);
if(!x10237.valid){
continue;
}
sj4array[0]=(sj0*(x10237.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10238=IKcos(j4);
IkReal x10239=IKsin(j4);
IkReal x10240=(gconst4*r11);
IkReal x10241=(gconst4*r21);
IkReal x10242=((1.0)*sj2);
IkReal x10243=(gconst5*x10239);
IkReal x10244=((1.0)*x10239);
IkReal x10245=((1.0)*gconst5*x10238);
evalcond[0]=(r02*x10238);
evalcond[1]=((((-1.0)*r20*x10245))+((x10238*x10241)));
evalcond[2]=(((x10238*x10240))+(((-1.0)*r10*x10245)));
evalcond[3]=((((-1.0)*x10241*x10244))+(((-1.0)*cj1*x10242))+(((-1.0)*cj2*sj1))+((r20*x10243)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x10242))+(((-1.0)*x10240*x10244))+((r10*x10243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10246=((-1.0)*r21);
IkReal x10247=((-1.0)*px);
CheckValue<IkReal> x10249 = IKatan2WithCheck(IkReal(x10246),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10249.valid){
continue;
}
IkReal x10248=((1.0)*(x10249.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10248)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10247);
rxp1_1=(px*r21);
rxp1_2=(r11*x10247);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10248)));
IkReal gconst4=x10246;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10250=((-1.0)*r21);
IkReal x10251=((-1.0)*px);
CheckValue<IkReal> x10253 = IKatan2WithCheck(IkReal(x10250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10253.valid){
continue;
}
IkReal x10252=((1.0)*(x10253.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10252)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10251);
rxp1_1=(px*r21);
rxp1_2=(r11*x10251);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst4=x10250;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10254=((-1.0)*r21);
IkReal x10255=((-1.0)*px);
CheckValue<IkReal> x10257 = IKatan2WithCheck(IkReal(x10254),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10257.valid){
continue;
}
IkReal x10256=((1.0)*(x10257.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10256)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10255);
rxp1_1=(px*r21);
rxp1_2=(r11*x10255);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=x10254;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10260=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10260.valid){
continue;
}
IkReal x10258=x10260.value;
IkReal x10259=(sj0*x10258);
sj4array[0]=(((sj1*sj2*x10259))+(((-1.0)*cj1*cj2*x10259)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10261=IKcos(j4);
IkReal x10262=IKsin(j4);
IkReal x10263=((1.0)*gconst5);
IkReal x10264=(gconst4*x10261);
evalcond[0]=((-1.0)*r02*x10261);
evalcond[1]=((((-1.0)*sj0))+((r02*x10262)));
evalcond[2]=((((-1.0)*r20*x10261*x10263))+((r21*x10264)));
evalcond[3]=(((r11*x10264))+(((-1.0)*r10*x10261*x10263)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst4*r21*x10262))+(((-1.0)*r20*x10262*x10263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10266=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10266.valid){
continue;
}
IkReal x10265=x10266.value;
sj4array[0]=(((cj2*sj1*x10265))+((cj1*sj2*x10265)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10267=IKcos(j4);
IkReal x10268=IKsin(j4);
IkReal x10269=(gconst4*r11);
IkReal x10270=((1.0)*sj0);
IkReal x10271=((1.0)*gconst5*r10);
evalcond[0]=((-1.0)*r02*x10267);
evalcond[1]=(((r02*x10268))+(((-1.0)*x10270)));
evalcond[2]=(((gconst4*r21*x10267))+(((-1.0)*gconst5*r20*x10267)));
evalcond[3]=(((x10267*x10269))+(((-1.0)*x10267*x10271)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x10270))+(((-1.0)*x10268*x10271))+((x10268*x10269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(r02,-1);
if(!x10272.valid){
continue;
}
sj4array[0]=(sj0*(x10272.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10273=IKcos(j4);
IkReal x10274=IKsin(j4);
IkReal x10275=(gconst4*r11);
IkReal x10276=((1.0)*sj1);
IkReal x10277=(gconst4*r21);
IkReal x10278=((1.0)*gconst5*r10);
IkReal x10279=((1.0)*gconst5*r20);
evalcond[0]=((-1.0)*r02*x10273);
evalcond[1]=((((-1.0)*x10273*x10279))+((x10273*x10277)));
evalcond[2]=((((-1.0)*x10273*x10278))+((x10273*x10275)));
evalcond[3]=((((-1.0)*x10274*x10279))+(((-1.0)*cj1*sj2))+((x10274*x10277))+(((-1.0)*cj2*x10276)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x10274*x10278))+(((-1.0)*sj0*sj2*x10276))+((x10274*x10275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10281=IKPowWithIntegerCheck(r02,-1);
if(!x10281.valid){
continue;
}
IkReal x10280=x10281.value;
CheckValue<IkReal> x10282=IKPowWithIntegerCheck(sj3,-1);
if(!x10282.valid){
continue;
}
if( IKabs((sj0*x10280)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10280*(x10282.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10280))+IKsqr((x10280*(x10282.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10280), (x10280*(x10282.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10283=IKcos(j4);
IkReal x10284=IKsin(j4);
IkReal x10285=(gconst5*sj3);
IkReal x10286=(cj2*sj0);
IkReal x10287=(cj3*gconst5);
IkReal x10288=((1.0)*r10);
IkReal x10289=((1.0)*sj1);
IkReal x10290=(cj1*sj2);
IkReal x10291=(cj0*cj2);
IkReal x10292=(cj3*gconst4);
IkReal x10293=(gconst4*sj3);
IkReal x10294=(r20*x10284);
IkReal x10295=(gconst4*x10283);
IkReal x10296=(gconst5*x10283);
IkReal x10297=(r02*x10283);
IkReal x10298=(x10284*x10293);
IkReal x10299=((1.0)*x10284*x10292);
evalcond[0]=((((-1.0)*sj0))+((r02*x10284)));
evalcond[1]=((((-1.0)*r20*x10296))+((r21*x10295)));
evalcond[2]=(cj0+((r11*x10295))+(((-1.0)*x10288*x10296)));
evalcond[3]=((((-1.0)*sj3*x10297))+((sj1*x10291))+((cj0*x10290)));
evalcond[4]=(((cj1*x10291))+(((-1.0)*cj0*sj2*x10289))+((cj3*x10297)));
evalcond[5]=(((r20*x10292))+(((-1.0)*x10285*x10294))+((r21*x10298))+((cj1*cj2))+((r21*x10287))+(((-1.0)*sj2*x10289)));
evalcond[6]=(((r20*x10293))+(((-1.0)*x10290))+((x10287*x10294))+(((-1.0)*cj2*x10289))+(((-1.0)*r21*x10299))+((r21*x10285)));
evalcond[7]=(((sj0*x10290))+((r11*x10287))+((sj1*x10286))+(((-1.0)*x10284*x10285*x10288))+((r11*x10298))+((r10*x10292)));
evalcond[8]=(((r11*x10285))+(((-1.0)*sj0*sj2*x10289))+((cj1*x10286))+((r10*x10284*x10287))+(((-1.0)*r11*x10299))+((r10*x10293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10300=((1.0)*gconst5);
CheckValue<IkReal> x10301=IKPowWithIntegerCheck((((gconst4*r21*sj3))+(((-1.0)*r20*sj3*x10300))),-1);
if(!x10301.valid){
continue;
}
CheckValue<IkReal> x10302=IKPowWithIntegerCheck(((((-1.0)*r10*x10300))+((gconst4*r11))),-1);
if(!x10302.valid){
continue;
}
if( IKabs(((x10301.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10300)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10302.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10301.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10300))))))+IKsqr(((-1.0)*cj0*(x10302.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10301.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10300))))), ((-1.0)*cj0*(x10302.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10303=IKcos(j4);
IkReal x10304=IKsin(j4);
IkReal x10305=(gconst5*sj3);
IkReal x10306=(cj2*sj0);
IkReal x10307=(cj3*gconst5);
IkReal x10308=((1.0)*r10);
IkReal x10309=((1.0)*sj1);
IkReal x10310=(cj1*sj2);
IkReal x10311=(cj0*cj2);
IkReal x10312=(cj3*gconst4);
IkReal x10313=(gconst4*sj3);
IkReal x10314=(r20*x10304);
IkReal x10315=(gconst4*x10303);
IkReal x10316=(gconst5*x10303);
IkReal x10317=(r02*x10303);
IkReal x10318=(x10304*x10313);
IkReal x10319=((1.0)*x10304*x10312);
evalcond[0]=(((r02*x10304))+(((-1.0)*sj0)));
evalcond[1]=(((r21*x10315))+(((-1.0)*r20*x10316)));
evalcond[2]=(((r11*x10315))+cj0+(((-1.0)*x10308*x10316)));
evalcond[3]=(((cj0*x10310))+((sj1*x10311))+(((-1.0)*sj3*x10317)));
evalcond[4]=((((-1.0)*cj0*sj2*x10309))+((cj1*x10311))+((cj3*x10317)));
evalcond[5]=((((-1.0)*sj2*x10309))+((r21*x10318))+((r21*x10307))+((cj1*cj2))+((r20*x10312))+(((-1.0)*x10305*x10314)));
evalcond[6]=((((-1.0)*cj2*x10309))+(((-1.0)*r21*x10319))+(((-1.0)*x10310))+((r21*x10305))+((r20*x10313))+((x10307*x10314)));
evalcond[7]=(((sj0*x10310))+((r11*x10318))+(((-1.0)*x10304*x10305*x10308))+((sj1*x10306))+((r11*x10307))+((r10*x10312)));
evalcond[8]=((((-1.0)*sj0*sj2*x10309))+((r10*x10304*x10307))+((r11*x10305))+((r10*x10313))+(((-1.0)*r11*x10319))+((cj1*x10306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10320=IKPowWithIntegerCheck(r02,-1);
if(!x10320.valid){
continue;
}
CheckValue<IkReal> x10321=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10321.valid){
continue;
}
if( IKabs((sj0*(x10320.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10321.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10320.value)))+IKsqr(((-1.0)*cj0*(x10321.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10320.value)), ((-1.0)*cj0*(x10321.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10322=IKcos(j4);
IkReal x10323=IKsin(j4);
IkReal x10324=(gconst5*sj3);
IkReal x10325=(cj2*sj0);
IkReal x10326=(cj3*gconst5);
IkReal x10327=((1.0)*r10);
IkReal x10328=((1.0)*sj1);
IkReal x10329=(cj1*sj2);
IkReal x10330=(cj0*cj2);
IkReal x10331=(cj3*gconst4);
IkReal x10332=(gconst4*sj3);
IkReal x10333=(r20*x10323);
IkReal x10334=(gconst4*x10322);
IkReal x10335=(gconst5*x10322);
IkReal x10336=(r02*x10322);
IkReal x10337=(x10323*x10332);
IkReal x10338=((1.0)*x10323*x10331);
evalcond[0]=((((-1.0)*sj0))+((r02*x10323)));
evalcond[1]=(((r21*x10334))+(((-1.0)*r20*x10335)));
evalcond[2]=(cj0+((r11*x10334))+(((-1.0)*x10327*x10335)));
evalcond[3]=(((cj0*x10329))+(((-1.0)*sj3*x10336))+((sj1*x10330)));
evalcond[4]=((((-1.0)*cj0*sj2*x10328))+((cj3*x10336))+((cj1*x10330)));
evalcond[5]=((((-1.0)*sj2*x10328))+((r20*x10331))+(((-1.0)*x10324*x10333))+((r21*x10337))+((r21*x10326))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x10329))+((x10326*x10333))+(((-1.0)*cj2*x10328))+((r20*x10332))+((r21*x10324))+(((-1.0)*r21*x10338)));
evalcond[7]=(((sj1*x10325))+((sj0*x10329))+(((-1.0)*x10323*x10324*x10327))+((r11*x10326))+((r11*x10337))+((r10*x10331)));
evalcond[8]=(((r10*x10323*x10326))+(((-1.0)*r11*x10338))+((r11*x10324))+((cj1*x10325))+(((-1.0)*sj0*sj2*x10328))+((r10*x10332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10339=((1.0)*sj0);
IkReal x10340=((1.0)*gconst5);
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10340)))),-1);
if(!x10341.valid){
continue;
}
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r10*x10339))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x10340))+((gconst4*r11*sj0)))),IkReal(((((-1.0)*r12*x10339))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10341.value)))+(x10342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10343=IKcos(j4);
IkReal x10344=IKsin(j4);
IkReal x10345=(r11*sj3);
IkReal x10346=(r01*sj3);
IkReal x10347=(cj2*sj0);
IkReal x10348=((1.0)*cj3);
IkReal x10349=((1.0)*gconst5);
IkReal x10350=((1.0)*sj1);
IkReal x10351=(r21*sj3);
IkReal x10352=(cj1*sj2);
IkReal x10353=(cj0*cj2);
IkReal x10354=(gconst4*sj3);
IkReal x10355=(cj3*gconst5);
IkReal x10356=(cj3*gconst4);
IkReal x10357=(gconst4*x10344);
IkReal x10358=(gconst4*x10343);
IkReal x10359=(sj3*x10344);
IkReal x10360=(cj3*x10343);
IkReal x10361=(x10344*x10355);
IkReal x10362=((1.0)*sj3*x10343);
evalcond[0]=(((r21*x10358))+((r22*x10344))+(((-1.0)*r20*x10343*x10349)));
evalcond[1]=(cj0+((r12*x10344))+(((-1.0)*r10*x10343*x10349))+((r11*x10358)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10358))+(((-1.0)*r00*x10343*x10349))+((r02*x10344)));
evalcond[3]=(((r21*x10355))+((r20*x10356))+((x10351*x10357))+((cj1*cj2))+(((-1.0)*r20*x10349*x10359))+(((-1.0)*r22*x10362))+(((-1.0)*sj2*x10350)));
evalcond[4]=(((r22*x10360))+((r20*x10354))+(((-1.0)*cj2*x10350))+((gconst5*x10351))+((r20*x10361))+(((-1.0)*r21*x10348*x10357))+(((-1.0)*x10352)));
evalcond[5]=(((cj0*x10352))+((r00*x10356))+((r01*x10355))+(((-1.0)*r02*x10362))+((sj1*x10353))+(((-1.0)*r00*x10349*x10359))+((x10346*x10357)));
evalcond[6]=(((r00*x10361))+(((-1.0)*r01*x10348*x10357))+((r00*x10354))+(((-1.0)*cj0*sj2*x10350))+((gconst5*x10346))+((r02*x10360))+((cj1*x10353)));
evalcond[7]=(((sj1*x10347))+(((-1.0)*r10*x10349*x10359))+((x10345*x10357))+(((-1.0)*r12*x10362))+((r11*x10355))+((sj0*x10352))+((r10*x10356)));
evalcond[8]=((((-1.0)*r11*x10348*x10357))+((cj1*x10347))+((gconst5*x10345))+((r10*x10361))+(((-1.0)*sj0*sj2*x10350))+((r10*x10354))+((r12*x10360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10363=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10363.valid){
continue;
}
CheckValue<IkReal> x10364 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10363.value)))+(x10364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10365=IKcos(j4);
IkReal x10366=IKsin(j4);
IkReal x10367=(r11*sj3);
IkReal x10368=(r01*sj3);
IkReal x10369=(cj2*sj0);
IkReal x10370=((1.0)*cj3);
IkReal x10371=((1.0)*gconst5);
IkReal x10372=((1.0)*sj1);
IkReal x10373=(r21*sj3);
IkReal x10374=(cj1*sj2);
IkReal x10375=(cj0*cj2);
IkReal x10376=(gconst4*sj3);
IkReal x10377=(cj3*gconst5);
IkReal x10378=(cj3*gconst4);
IkReal x10379=(gconst4*x10366);
IkReal x10380=(gconst4*x10365);
IkReal x10381=(sj3*x10366);
IkReal x10382=(cj3*x10365);
IkReal x10383=(x10366*x10377);
IkReal x10384=((1.0)*sj3*x10365);
evalcond[0]=(((r22*x10366))+((r21*x10380))+(((-1.0)*r20*x10365*x10371)));
evalcond[1]=(cj0+((r11*x10380))+(((-1.0)*r10*x10365*x10371))+((r12*x10366)));
evalcond[2]=((((-1.0)*r00*x10365*x10371))+(((-1.0)*sj0))+((r02*x10366))+((r01*x10380)));
evalcond[3]=((((-1.0)*r20*x10371*x10381))+((x10373*x10379))+((r20*x10378))+((cj1*cj2))+(((-1.0)*r22*x10384))+(((-1.0)*sj2*x10372))+((r21*x10377)));
evalcond[4]=((((-1.0)*cj2*x10372))+((r22*x10382))+(((-1.0)*r21*x10370*x10379))+((r20*x10376))+(((-1.0)*x10374))+((gconst5*x10373))+((r20*x10383)));
evalcond[5]=(((r01*x10377))+((r00*x10378))+(((-1.0)*r02*x10384))+(((-1.0)*r00*x10371*x10381))+((x10368*x10379))+((sj1*x10375))+((cj0*x10374)));
evalcond[6]=(((r00*x10376))+((cj1*x10375))+(((-1.0)*cj0*sj2*x10372))+(((-1.0)*r01*x10370*x10379))+((r02*x10382))+((r00*x10383))+((gconst5*x10368)));
evalcond[7]=(((sj0*x10374))+((sj1*x10369))+((r10*x10378))+((x10367*x10379))+(((-1.0)*r12*x10384))+((r11*x10377))+(((-1.0)*r10*x10371*x10381)));
evalcond[8]=(((r12*x10382))+((cj1*x10369))+(((-1.0)*sj0*sj2*x10372))+(((-1.0)*r11*x10370*x10379))+((r10*x10383))+((r10*x10376))+((gconst5*x10367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10385=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10385.valid){
continue;
}
CheckValue<IkReal> x10386 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10385.value)))+(x10386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10387=IKcos(j4);
IkReal x10388=IKsin(j4);
IkReal x10389=(r11*sj3);
IkReal x10390=(r01*sj3);
IkReal x10391=(cj2*sj0);
IkReal x10392=((1.0)*cj3);
IkReal x10393=((1.0)*gconst5);
IkReal x10394=((1.0)*sj1);
IkReal x10395=(r21*sj3);
IkReal x10396=(cj1*sj2);
IkReal x10397=(cj0*cj2);
IkReal x10398=(gconst4*sj3);
IkReal x10399=(cj3*gconst5);
IkReal x10400=(cj3*gconst4);
IkReal x10401=(gconst4*x10388);
IkReal x10402=(gconst4*x10387);
IkReal x10403=(sj3*x10388);
IkReal x10404=(cj3*x10387);
IkReal x10405=(x10388*x10399);
IkReal x10406=((1.0)*sj3*x10387);
evalcond[0]=(((r21*x10402))+(((-1.0)*r20*x10387*x10393))+((r22*x10388)));
evalcond[1]=(((r12*x10388))+cj0+(((-1.0)*r10*x10387*x10393))+((r11*x10402)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10402))+((r02*x10388))+(((-1.0)*r00*x10387*x10393)));
evalcond[3]=(((r21*x10399))+(((-1.0)*r22*x10406))+((r20*x10400))+((x10395*x10401))+(((-1.0)*r20*x10393*x10403))+(((-1.0)*sj2*x10394))+((cj1*cj2)));
evalcond[4]=(((r22*x10404))+((gconst5*x10395))+(((-1.0)*cj2*x10394))+(((-1.0)*r21*x10392*x10401))+((r20*x10405))+(((-1.0)*x10396))+((r20*x10398)));
evalcond[5]=(((r01*x10399))+((x10390*x10401))+((r00*x10400))+(((-1.0)*r00*x10393*x10403))+((cj0*x10396))+((sj1*x10397))+(((-1.0)*r02*x10406)));
evalcond[6]=(((gconst5*x10390))+((r00*x10405))+(((-1.0)*r01*x10392*x10401))+((cj1*x10397))+((r02*x10404))+(((-1.0)*cj0*sj2*x10394))+((r00*x10398)));
evalcond[7]=(((sj0*x10396))+(((-1.0)*r10*x10393*x10403))+((r11*x10399))+((x10389*x10401))+(((-1.0)*r12*x10406))+((r10*x10400))+((sj1*x10391)));
evalcond[8]=((((-1.0)*sj0*sj2*x10394))+((gconst5*x10389))+((cj1*x10391))+(((-1.0)*r11*x10392*x10401))+((r10*x10398))+((r12*x10404))+((r10*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10408 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10408)==0){
continue;
}
IkReal x10407=pow(x10408,-0.5);
CheckValue<IkReal> x10409 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10409.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10409.value));
IkReal gconst7=((-1.0)*r11*x10407);
IkReal gconst8=(r10*x10407);
CheckValue<IkReal> x10410 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10410.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10410.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
IkReal x10411=((-1.0)*(x10413.value));
IkReal x10412=x10407;
sj5=gconst7;
cj5=gconst8;
j5=x10411;
IkReal gconst6=x10411;
IkReal gconst7=((-1.0)*r11*x10412);
IkReal gconst8=(r10*x10412);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10414=((1.0)*sj0);
IkReal x10415=((1.0)*gconst8);
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(((((-1.0)*gconst8*r10*x10414))+((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x10415)))),IkReal(((((-1.0)*r12*x10414))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x10415)))),-1);
if(!x10417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10416.value)+(((1.5707963267949)*(x10417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10418=IKcos(j4);
IkReal x10419=IKsin(j4);
IkReal x10420=(gconst7*sj3);
IkReal x10421=(cj3*gconst8);
IkReal x10422=(cj2*sj0);
IkReal x10423=(gconst8*sj3);
IkReal x10424=(cj0*cj2);
IkReal x10425=(cj3*gconst7);
IkReal x10426=((1.0)*sj1);
IkReal x10427=(cj1*sj2);
IkReal x10428=(r20*x10419);
IkReal x10429=(r11*x10419);
IkReal x10430=((1.0)*x10419);
IkReal x10431=(r22*x10418);
IkReal x10432=((1.0)*x10418);
IkReal x10433=(cj3*x10418);
IkReal x10434=(gconst7*x10418);
evalcond[0]=(((r22*x10419))+(((-1.0)*gconst8*r20*x10432))+((r21*x10434)));
evalcond[1]=(cj0+((r11*x10434))+((r12*x10419))+(((-1.0)*gconst8*r10*x10432)));
evalcond[2]=(((r01*x10434))+(((-1.0)*sj0))+(((-1.0)*gconst8*r00*x10432))+((r02*x10419)));
evalcond[3]=((((-1.0)*x10423*x10428))+(((-1.0)*sj3*x10431))+((r21*x10419*x10420))+(((-1.0)*sj2*x10426))+((cj1*cj2))+((r20*x10425))+((r21*x10421)));
evalcond[4]=((((-1.0)*cj2*x10426))+((x10421*x10428))+((cj3*x10431))+(((-1.0)*x10427))+((r20*x10420))+(((-1.0)*r21*x10425*x10430))+((r21*x10423)));
evalcond[5]=(((r01*x10421))+((cj0*x10427))+((r00*x10425))+(((-1.0)*r00*x10423*x10430))+((r01*x10419*x10420))+((sj1*x10424))+(((-1.0)*r02*sj3*x10432)));
evalcond[6]=(((r01*x10423))+((r00*x10420))+(((-1.0)*r01*x10425*x10430))+((r00*x10419*x10421))+((cj1*x10424))+((r02*x10433))+(((-1.0)*cj0*sj2*x10426)));
evalcond[7]=(((x10420*x10429))+(((-1.0)*r10*x10423*x10430))+(((-1.0)*r12*sj3*x10432))+((sj0*x10427))+((sj1*x10422))+((r10*x10425))+((r11*x10421)));
evalcond[8]=(((r10*x10419*x10421))+(((-1.0)*sj0*sj2*x10426))+(((-1.0)*x10425*x10429))+((cj1*x10422))+((r12*x10433))+((r10*x10420))+((r11*x10423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*gconst8*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x10436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10435.value)+(((1.5707963267949)*(x10436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10437=IKcos(j4);
IkReal x10438=IKsin(j4);
IkReal x10439=(gconst7*sj3);
IkReal x10440=(cj3*gconst8);
IkReal x10441=(cj2*sj0);
IkReal x10442=(gconst8*sj3);
IkReal x10443=(cj0*cj2);
IkReal x10444=(cj3*gconst7);
IkReal x10445=((1.0)*sj1);
IkReal x10446=(cj1*sj2);
IkReal x10447=(r20*x10438);
IkReal x10448=(r11*x10438);
IkReal x10449=((1.0)*x10438);
IkReal x10450=(r22*x10437);
IkReal x10451=((1.0)*x10437);
IkReal x10452=(cj3*x10437);
IkReal x10453=(gconst7*x10437);
evalcond[0]=((((-1.0)*gconst8*r20*x10451))+((r22*x10438))+((r21*x10453)));
evalcond[1]=(cj0+((r11*x10453))+((r12*x10438))+(((-1.0)*gconst8*r10*x10451)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10453))+((r02*x10438))+(((-1.0)*gconst8*r00*x10451)));
evalcond[3]=((((-1.0)*sj3*x10450))+(((-1.0)*x10442*x10447))+((r20*x10444))+((r21*x10440))+(((-1.0)*sj2*x10445))+((cj1*cj2))+((r21*x10438*x10439)));
evalcond[4]=((((-1.0)*x10446))+((cj3*x10450))+(((-1.0)*r21*x10444*x10449))+((r21*x10442))+((x10440*x10447))+((r20*x10439))+(((-1.0)*cj2*x10445)));
evalcond[5]=(((r01*x10438*x10439))+((sj1*x10443))+(((-1.0)*r00*x10442*x10449))+((cj0*x10446))+(((-1.0)*r02*sj3*x10451))+((r00*x10444))+((r01*x10440)));
evalcond[6]=((((-1.0)*r01*x10444*x10449))+(((-1.0)*cj0*sj2*x10445))+((r00*x10438*x10440))+((r01*x10442))+((r02*x10452))+((cj1*x10443))+((r00*x10439)));
evalcond[7]=(((sj1*x10441))+((sj0*x10446))+((r11*x10440))+(((-1.0)*r10*x10442*x10449))+((r10*x10444))+((x10439*x10448))+(((-1.0)*r12*sj3*x10451)));
evalcond[8]=(((r12*x10452))+((r10*x10439))+((r11*x10442))+(((-1.0)*x10444*x10448))+((cj1*x10441))+(((-1.0)*sj0*sj2*x10445))+((r10*x10438*x10440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10455 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10455)==0){
continue;
}
IkReal x10454=pow(x10455,-0.5);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10456.value))));
IkReal gconst10=((1.0)*r11*x10454);
IkReal gconst11=((-1.0)*r10*x10454);
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10457.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10460 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10460.valid){
continue;
}
IkReal x10458=((1.0)*(x10460.value));
IkReal x10459=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10458)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10458)));
IkReal gconst10=((1.0)*r11*x10459);
IkReal gconst11=((-1.0)*r10*x10459);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x10463 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10463.valid){
continue;
}
IkReal x10461=((1.0)*(x10463.value));
IkReal x10462=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10461)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10461)));
IkReal gconst10=((1.0)*r11*x10462);
IkReal gconst11=((-1.0)*r10*x10462);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
IkReal x10464=((1.0)*(x10466.value));
IkReal x10465=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10464)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10464)));
IkReal gconst10=((1.0)*r11*x10465);
IkReal gconst11=((-1.0)*r10*x10465);
IkReal x10467=r12*r12;
IkReal x10468=((1.0)*sj0);
IkReal x10469=(cj0*r02);
IkReal x10470=x10454;
j4eval[0]=((IKabs((((r12*x10469*x10470))+((sj0*x10467*x10470))+(((-1.0)*x10468*x10470)))))+(IKabs(((((-1.0)*x10469))+(((-1.0)*r12*x10468))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10471=(cj1*cj2);
IkReal x10472=(cj3*r02);
IkReal x10473=((2.0)*cj3);
IkReal x10474=(gconst10*r00*sj3);
IkReal x10475=(gconst11*r01*sj3);
IkReal x10476=((1.0)*sj1*sj2);
IkReal x10477=(x10475+x10474+x10471);
op[0]=((((-1.0)*x10472))+x10477+(((-1.0)*x10476)));
op[1]=(((gconst11*r00*x10473))+(((-1.0)*gconst10*r01*x10473)));
op[2]=(x10477+x10472+(((-1.0)*x10476)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10478=(gconst11*r10);
IkReal x10479=(gconst10*r11);
op[0]=((-1.0)+(((-1.0)*x10479))+x10478);
op[1]=((2.0)*r12);
op[2]=((-1.0)+(((-1.0)*x10478))+x10479);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
IkReal x10480=((1.0)*(x10482.value));
IkReal x10481=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10480)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10480)));
IkReal gconst10=((1.0)*r11*x10481);
IkReal gconst11=((-1.0)*r10*x10481);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
IkReal x10483=((1.0)*(x10485.value));
IkReal x10484=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10483)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10483)));
IkReal gconst10=((1.0)*r11*x10484);
IkReal gconst11=((-1.0)*r10*x10484);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10486=gconst10*gconst10;
IkReal x10487=gconst11*gconst11;
IkReal x10488=(r22*sj3);
IkReal x10489=(r00*sj3);
IkReal x10490=(cj3*r20);
IkReal x10491=(r01*sj3);
IkReal x10492=((1.0)*r00);
IkReal x10493=((1.0)*r20);
IkReal x10494=((1.0)*gconst11*r01);
IkReal x10495=(r21*x10486);
IkReal x10496=(gconst10*gconst11*r21);
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(((((-1.0)*x10487*x10491*x10493))+((x10489*x10495))+((x10491*x10496))+(((-1.0)*gconst10*gconst11*x10489*x10493)))),IkReal(((((-1.0)*x10488*x10494))+(((-1.0)*gconst10*x10488*x10492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(IKsign((((r00*x10487*x10490))+(((-1.0)*cj3*x10492*x10496))+(((-1.0)*gconst10*x10490*x10494))+((cj3*r01*x10495))+((cj3*r02*r22)))),-1);
if(!x10498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10497.value)+(((1.5707963267949)*(x10498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10499=IKcos(j4);
IkReal x10500=IKsin(j4);
IkReal x10501=(cj1*cj2);
IkReal x10502=(gconst10*sj3);
IkReal x10503=(cj3*gconst10);
IkReal x10504=(gconst11*r21);
IkReal x10505=(gconst11*r00);
IkReal x10506=(cj3*gconst11);
IkReal x10507=((1.0)*sj2);
IkReal x10508=(cj2*sj1);
IkReal x10509=(gconst11*sj3);
IkReal x10510=(sj1*x10507);
IkReal x10511=(gconst10*x10499);
IkReal x10512=((1.0)*x10499);
IkReal x10513=(r11*x10500);
IkReal x10514=(r21*x10500);
IkReal x10515=(cj3*x10499);
IkReal x10516=((1.0)*x10500);
evalcond[0]=((((-1.0)*gconst11*r20*x10512))+((r22*x10500))+((r21*x10511)));
evalcond[1]=((((-1.0)*gconst11*r10*x10512))+((r12*x10500))+((r11*x10511)));
evalcond[2]=((-1.0)+((r01*x10511))+((r02*x10500))+(((-1.0)*x10505*x10512)));
evalcond[3]=(((r01*x10509))+((r00*x10502))+((cj3*x10500*x10505))+(((-1.0)*r01*x10503*x10516))+((r02*x10515)));
evalcond[4]=(((r01*x10500*x10502))+(((-1.0)*r02*sj3*x10512))+((r01*x10506))+((r00*x10503))+(((-1.0)*sj3*x10505*x10516)));
evalcond[5]=(((cj1*sj2))+((r10*x10503))+((x10502*x10513))+x10508+(((-1.0)*r10*x10509*x10516))+(((-1.0)*r12*sj3*x10512))+((r11*x10506)));
evalcond[6]=(((r12*x10515))+((r10*x10500*x10506))+(((-1.0)*x10503*x10513))+((r10*x10502))+(((-1.0)*x10510))+x10501+((r11*x10509)));
evalcond[7]=(((r20*x10503))+(((-1.0)*r22*sj3*x10512))+(((-1.0)*r20*x10509*x10516))+((x10502*x10514))+((cj3*x10504))+(((-1.0)*x10510))+x10501);
evalcond[8]=(((r20*x10502))+(((-1.0)*x10503*x10514))+(((-1.0)*x10508))+((r22*x10515))+((sj3*x10504))+(((-1.0)*cj1*x10507))+((r20*x10500*x10506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10517=((1.0)*gconst11);
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10517))+(((-1.0)*gconst10*r20)))),-1);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*r10*x10517)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10518.value)))+(x10519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10520=IKcos(j4);
IkReal x10521=IKsin(j4);
IkReal x10522=(cj1*cj2);
IkReal x10523=(gconst10*sj3);
IkReal x10524=(cj3*gconst10);
IkReal x10525=(gconst11*r21);
IkReal x10526=(gconst11*r00);
IkReal x10527=(cj3*gconst11);
IkReal x10528=((1.0)*sj2);
IkReal x10529=(cj2*sj1);
IkReal x10530=(gconst11*sj3);
IkReal x10531=(sj1*x10528);
IkReal x10532=(gconst10*x10520);
IkReal x10533=((1.0)*x10520);
IkReal x10534=(r11*x10521);
IkReal x10535=(r21*x10521);
IkReal x10536=(cj3*x10520);
IkReal x10537=((1.0)*x10521);
evalcond[0]=(((r22*x10521))+(((-1.0)*gconst11*r20*x10533))+((r21*x10532)));
evalcond[1]=((((-1.0)*gconst11*r10*x10533))+((r12*x10521))+((r11*x10532)));
evalcond[2]=((-1.0)+((r02*x10521))+((r01*x10532))+(((-1.0)*x10526*x10533)));
evalcond[3]=(((r02*x10536))+((cj3*x10521*x10526))+(((-1.0)*r01*x10524*x10537))+((r01*x10530))+((r00*x10523)));
evalcond[4]=((((-1.0)*sj3*x10526*x10537))+((r01*x10521*x10523))+((r00*x10524))+(((-1.0)*r02*sj3*x10533))+((r01*x10527)));
evalcond[5]=(((r10*x10524))+((cj1*sj2))+((x10523*x10534))+(((-1.0)*r10*x10530*x10537))+x10529+((r11*x10527))+(((-1.0)*r12*sj3*x10533)));
evalcond[6]=((((-1.0)*x10531))+((r10*x10523))+((r10*x10521*x10527))+((r12*x10536))+x10522+((r11*x10530))+(((-1.0)*x10524*x10534)));
evalcond[7]=((((-1.0)*x10531))+((cj3*x10525))+((x10523*x10535))+(((-1.0)*r22*sj3*x10533))+(((-1.0)*r20*x10530*x10537))+x10522+((r20*x10524)));
evalcond[8]=((((-1.0)*cj1*x10528))+((r20*x10521*x10527))+((r22*x10536))+(((-1.0)*x10529))+((sj3*x10525))+(((-1.0)*x10524*x10535))+((r20*x10523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10538=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10538.valid){
continue;
}
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10538.value)))+(x10539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10540=IKcos(j4);
IkReal x10541=IKsin(j4);
IkReal x10542=(cj1*cj2);
IkReal x10543=(gconst10*sj3);
IkReal x10544=(cj3*gconst10);
IkReal x10545=(gconst11*r21);
IkReal x10546=(gconst11*r00);
IkReal x10547=(cj3*gconst11);
IkReal x10548=((1.0)*sj2);
IkReal x10549=(cj2*sj1);
IkReal x10550=(gconst11*sj3);
IkReal x10551=(sj1*x10548);
IkReal x10552=(gconst10*x10540);
IkReal x10553=((1.0)*x10540);
IkReal x10554=(r11*x10541);
IkReal x10555=(r21*x10541);
IkReal x10556=(cj3*x10540);
IkReal x10557=((1.0)*x10541);
evalcond[0]=((((-1.0)*gconst11*r20*x10553))+((r22*x10541))+((r21*x10552)));
evalcond[1]=(((r12*x10541))+(((-1.0)*gconst11*r10*x10553))+((r11*x10552)));
evalcond[2]=((-1.0)+(((-1.0)*x10546*x10553))+((r02*x10541))+((r01*x10552)));
evalcond[3]=(((r02*x10556))+((cj3*x10541*x10546))+((r00*x10543))+(((-1.0)*r01*x10544*x10557))+((r01*x10550)));
evalcond[4]=((((-1.0)*sj3*x10546*x10557))+((r00*x10544))+((r01*x10547))+(((-1.0)*r02*sj3*x10553))+((r01*x10541*x10543)));
evalcond[5]=((((-1.0)*r12*sj3*x10553))+(((-1.0)*r10*x10550*x10557))+((cj1*sj2))+((r11*x10547))+((x10543*x10554))+x10549+((r10*x10544)));
evalcond[6]=(((r10*x10541*x10547))+((r11*x10550))+x10542+((r10*x10543))+(((-1.0)*x10544*x10554))+((r12*x10556))+(((-1.0)*x10551)));
evalcond[7]=((((-1.0)*r20*x10550*x10557))+(((-1.0)*r22*sj3*x10553))+((x10543*x10555))+x10542+((cj3*x10545))+((r20*x10544))+(((-1.0)*x10551)));
evalcond[8]=(((r22*x10556))+(((-1.0)*cj1*x10548))+((sj3*x10545))+(((-1.0)*x10549))+((r20*x10541*x10547))+(((-1.0)*x10544*x10555))+((r20*x10543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
IkReal x10558=((1.0)*(x10560.value));
IkReal x10559=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10558)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10558)));
IkReal gconst10=((1.0)*r11*x10559);
IkReal gconst11=((-1.0)*r10*x10559);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
IkReal x10561=((1.0)*(x10563.value));
IkReal x10562=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10561)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10561)));
IkReal gconst10=((1.0)*r11*x10562);
IkReal gconst11=((-1.0)*r10*x10562);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10564=gconst10*gconst10;
IkReal x10565=gconst11*gconst11;
IkReal x10566=(r22*sj3);
IkReal x10567=(r00*sj3);
IkReal x10568=(cj3*r20);
IkReal x10569=(r01*sj3);
IkReal x10570=((1.0)*r00);
IkReal x10571=((1.0)*r20);
IkReal x10572=((1.0)*gconst11*r01);
IkReal x10573=(r21*x10564);
IkReal x10574=(gconst10*gconst11*r21);
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal(((((-1.0)*gconst10*gconst11*x10567*x10571))+(((-1.0)*x10565*x10569*x10571))+((x10569*x10574))+((x10567*x10573)))),IkReal(((((-1.0)*gconst10*x10566*x10570))+(((-1.0)*x10566*x10572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
CheckValue<IkReal> x10576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*x10568*x10572))+((cj3*r01*x10573))+((cj3*r02*r22))+((r00*x10565*x10568))+(((-1.0)*cj3*x10570*x10574)))),-1);
if(!x10576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10575.value)+(((1.5707963267949)*(x10576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10577=IKcos(j4);
IkReal x10578=IKsin(j4);
IkReal x10579=(gconst10*sj3);
IkReal x10580=(cj3*gconst10);
IkReal x10581=(sj1*sj2);
IkReal x10582=(gconst11*r21);
IkReal x10583=(gconst11*r00);
IkReal x10584=(cj3*gconst11);
IkReal x10585=(cj1*cj2);
IkReal x10586=(gconst11*sj3);
IkReal x10587=((1.0)*cj1*sj2);
IkReal x10588=((1.0)*cj2*sj1);
IkReal x10589=(gconst10*x10577);
IkReal x10590=((1.0)*x10577);
IkReal x10591=(r11*x10578);
IkReal x10592=(r21*x10578);
IkReal x10593=(cj3*x10577);
IkReal x10594=((1.0)*x10578);
IkReal x10595=(x10587+x10588);
evalcond[0]=((((-1.0)*gconst11*r20*x10590))+((r21*x10589))+((r22*x10578)));
evalcond[1]=((((-1.0)*gconst11*r10*x10590))+((r11*x10589))+((r12*x10578)));
evalcond[2]=((1.0)+((r02*x10578))+(((-1.0)*x10583*x10590))+((r01*x10589)));
evalcond[3]=(((r00*x10579))+((cj3*x10578*x10583))+(((-1.0)*r01*x10580*x10594))+((r02*x10593))+((r01*x10586)));
evalcond[4]=((((-1.0)*sj3*x10583*x10594))+(((-1.0)*r02*sj3*x10590))+((r01*x10578*x10579))+((r01*x10584))+((r00*x10580)));
evalcond[5]=(((r12*x10593))+((r10*x10579))+((r11*x10586))+(((-1.0)*x10580*x10591))+x10581+(((-1.0)*x10585))+((r10*x10578*x10584)));
evalcond[6]=((((-1.0)*r20*x10586*x10594))+((x10579*x10592))+((cj3*x10582))+(((-1.0)*r22*sj3*x10590))+x10585+(((-1.0)*x10581))+((r20*x10580)));
evalcond[7]=(((r20*x10579))+(((-1.0)*x10595))+(((-1.0)*x10580*x10592))+((sj3*x10582))+((r22*x10593))+((r20*x10578*x10584)));
evalcond[8]=(((r10*x10580))+(((-1.0)*x10595))+((r11*x10584))+((x10579*x10591))+(((-1.0)*r12*sj3*x10590))+(((-1.0)*r10*x10586*x10594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10596=((1.0)*gconst11);
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*r20*x10596)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10596))+(((-1.0)*gconst10*r10)))),-1);
if(!x10598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10597.value)+(((1.5707963267949)*(x10598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10599=IKcos(j4);
IkReal x10600=IKsin(j4);
IkReal x10601=(gconst10*sj3);
IkReal x10602=(cj3*gconst10);
IkReal x10603=(sj1*sj2);
IkReal x10604=(gconst11*r21);
IkReal x10605=(gconst11*r00);
IkReal x10606=(cj3*gconst11);
IkReal x10607=(cj1*cj2);
IkReal x10608=(gconst11*sj3);
IkReal x10609=((1.0)*cj1*sj2);
IkReal x10610=((1.0)*cj2*sj1);
IkReal x10611=(gconst10*x10599);
IkReal x10612=((1.0)*x10599);
IkReal x10613=(r11*x10600);
IkReal x10614=(r21*x10600);
IkReal x10615=(cj3*x10599);
IkReal x10616=((1.0)*x10600);
IkReal x10617=(x10609+x10610);
evalcond[0]=(((r22*x10600))+(((-1.0)*gconst11*r20*x10612))+((r21*x10611)));
evalcond[1]=(((r12*x10600))+(((-1.0)*gconst11*r10*x10612))+((r11*x10611)));
evalcond[2]=((1.0)+(((-1.0)*x10605*x10612))+((r02*x10600))+((r01*x10611)));
evalcond[3]=(((r01*x10608))+((r00*x10601))+((r02*x10615))+((cj3*x10600*x10605))+(((-1.0)*r01*x10602*x10616)));
evalcond[4]=(((r01*x10606))+((r00*x10602))+((r01*x10600*x10601))+(((-1.0)*sj3*x10605*x10616))+(((-1.0)*r02*sj3*x10612)));
evalcond[5]=(((r12*x10615))+(((-1.0)*x10602*x10613))+((r10*x10600*x10606))+((r11*x10608))+((r10*x10601))+(((-1.0)*x10607))+x10603);
evalcond[6]=(((cj3*x10604))+((x10601*x10614))+(((-1.0)*x10603))+(((-1.0)*r20*x10608*x10616))+((r20*x10602))+x10607+(((-1.0)*r22*sj3*x10612)));
evalcond[7]=(((r20*x10600*x10606))+(((-1.0)*x10602*x10614))+((r22*x10615))+((sj3*x10604))+(((-1.0)*x10617))+((r20*x10601)));
evalcond[8]=((((-1.0)*r10*x10608*x10616))+((r11*x10606))+((x10601*x10613))+((r10*x10602))+(((-1.0)*r12*sj3*x10612))+(((-1.0)*x10617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
CheckValue<IkReal> x10619=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x10619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10618.value)+(((1.5707963267949)*(x10619.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10620=IKcos(j4);
IkReal x10621=IKsin(j4);
IkReal x10622=(gconst10*sj3);
IkReal x10623=(cj3*gconst10);
IkReal x10624=(sj1*sj2);
IkReal x10625=(gconst11*r21);
IkReal x10626=(gconst11*r00);
IkReal x10627=(cj3*gconst11);
IkReal x10628=(cj1*cj2);
IkReal x10629=(gconst11*sj3);
IkReal x10630=((1.0)*cj1*sj2);
IkReal x10631=((1.0)*cj2*sj1);
IkReal x10632=(gconst10*x10620);
IkReal x10633=((1.0)*x10620);
IkReal x10634=(r11*x10621);
IkReal x10635=(r21*x10621);
IkReal x10636=(cj3*x10620);
IkReal x10637=((1.0)*x10621);
IkReal x10638=(x10631+x10630);
evalcond[0]=((((-1.0)*gconst11*r20*x10633))+((r22*x10621))+((r21*x10632)));
evalcond[1]=((((-1.0)*gconst11*r10*x10633))+((r11*x10632))+((r12*x10621)));
evalcond[2]=((1.0)+((r01*x10632))+(((-1.0)*x10626*x10633))+((r02*x10621)));
evalcond[3]=(((cj3*x10621*x10626))+((r00*x10622))+((r01*x10629))+((r02*x10636))+(((-1.0)*r01*x10623*x10637)));
evalcond[4]=(((r00*x10623))+((r01*x10621*x10622))+(((-1.0)*r02*sj3*x10633))+((r01*x10627))+(((-1.0)*sj3*x10626*x10637)));
evalcond[5]=(((r10*x10621*x10627))+(((-1.0)*x10623*x10634))+((r10*x10622))+(((-1.0)*x10628))+((r11*x10629))+((r12*x10636))+x10624);
evalcond[6]=((((-1.0)*r22*sj3*x10633))+((r20*x10623))+(((-1.0)*x10624))+((cj3*x10625))+x10628+((x10622*x10635))+(((-1.0)*r20*x10629*x10637)));
evalcond[7]=((((-1.0)*x10623*x10635))+((r20*x10622))+(((-1.0)*x10638))+((sj3*x10625))+((r22*x10636))+((r20*x10621*x10627)));
evalcond[8]=((((-1.0)*r10*x10629*x10637))+((r10*x10623))+(((-1.0)*x10638))+((r11*x10627))+((x10622*x10634))+(((-1.0)*r12*sj3*x10633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
IkReal x10639=((1.0)*(x10641.value));
IkReal x10640=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10639)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10640);
rxp1_1=(px*r21);
rxp1_2=(r11*x10640);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10639)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10644 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10644.valid){
continue;
}
IkReal x10642=((1.0)*(x10644.value));
IkReal x10643=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10642)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10643);
rxp1_1=(px*r21);
rxp1_2=(r11*x10643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10642)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x10645=((1.0)*sj3);
j4eval[0]=(((r11*r21*x10645))+((r10*r20*x10645)));
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10648 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10648.valid){
continue;
}
IkReal x10646=((1.0)*(x10648.value));
IkReal x10647=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10646)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10647);
rxp1_1=(px*r21);
rxp1_2=(r11*x10647);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10646)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10651 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10651.valid){
continue;
}
IkReal x10649=((1.0)*(x10651.value));
IkReal x10650=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10649)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10650);
rxp1_1=(px*r21);
rxp1_2=(r11*x10650);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10649)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10654 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10654.valid){
continue;
}
IkReal x10652=((1.0)*(x10654.value));
IkReal x10653=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10652)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10653);
rxp1_1=(px*r21);
rxp1_2=(r11*x10653);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10652)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
IkReal x10655=((1.0)*(x10657.value));
IkReal x10656=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10655)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10656);
rxp1_1=(px*r21);
rxp1_2=(r11*x10656);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10655)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x10660.valid){
continue;
}
IkReal x10658=x10660.value;
IkReal x10659=(sj0*x10658);
sj4array[0]=(((sj1*sj2*x10659))+(((-1.0)*cj1*cj2*x10659)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10661=IKcos(j4);
IkReal x10662=IKsin(j4);
IkReal x10663=(gconst11*r20);
IkReal x10664=(gconst10*x10661);
IkReal x10665=((1.0)*x10661);
evalcond[0]=(r02*x10661);
evalcond[1]=((((-1.0)*sj0))+((r02*x10662)));
evalcond[2]=((((-1.0)*x10663*x10665))+((r21*x10664)));
evalcond[3]=((((-1.0)*gconst11*r10*x10665))+((r11*x10664)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r21*x10662))+((x10662*x10663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10667=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x10667.valid){
continue;
}
IkReal x10666=x10667.value;
sj4array[0]=(((cj1*sj2*x10666))+((cj2*sj1*x10666)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10668=IKcos(j4);
IkReal x10669=IKsin(j4);
IkReal x10670=((1.0)*sj0);
IkReal x10671=(gconst10*x10668);
IkReal x10672=((1.0)*gconst11*x10668);
evalcond[0]=(r02*x10668);
evalcond[1]=(((r02*x10669))+(((-1.0)*x10670)));
evalcond[2]=((((-1.0)*r20*x10672))+((r21*x10671)));
evalcond[3]=(((r11*x10671))+(((-1.0)*r10*x10672)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst11*r10*x10669))+(((-1.0)*sj1*sj2*x10670))+(((-1.0)*gconst10*r11*x10669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10673=IKPowWithIntegerCheck(r02,-1);
if(!x10673.valid){
continue;
}
sj4array[0]=(sj0*(x10673.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10674=IKcos(j4);
IkReal x10675=IKsin(j4);
IkReal x10676=((1.0)*sj2);
IkReal x10677=(gconst10*x10674);
IkReal x10678=(gconst11*x10675);
IkReal x10679=((1.0)*gconst11*x10674);
IkReal x10680=((1.0)*gconst10*x10675);
evalcond[0]=(r02*x10674);
evalcond[1]=((((-1.0)*r20*x10679))+((r21*x10677)));
evalcond[2]=(((r11*x10677))+(((-1.0)*r10*x10679)));
evalcond[3]=((((-1.0)*r21*x10680))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10676))+((r20*x10678)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x10678))+(((-1.0)*r11*x10680))+(((-1.0)*sj0*sj1*x10676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10683 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10683.valid){
continue;
}
IkReal x10681=((1.0)*(x10683.value));
IkReal x10682=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10681)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10682);
rxp1_1=(px*r21);
rxp1_2=(r11*x10682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10681)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10686 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10686.valid){
continue;
}
IkReal x10684=((1.0)*(x10686.value));
IkReal x10685=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10684)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10685);
rxp1_1=(px*r21);
rxp1_2=(r11*x10685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10684)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10689 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10689.valid){
continue;
}
IkReal x10687=((1.0)*(x10689.value));
IkReal x10688=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10687)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10688);
rxp1_1=(px*r21);
rxp1_2=(r11*x10688);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10687)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10692=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10692.valid){
continue;
}
IkReal x10690=x10692.value;
IkReal x10691=(sj0*x10690);
sj4array[0]=(((sj1*sj2*x10691))+(((-1.0)*cj1*cj2*x10691)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10693=IKcos(j4);
IkReal x10694=IKsin(j4);
IkReal x10695=(gconst10*r21);
IkReal x10696=((1.0)*gconst11*x10693);
evalcond[0]=((-1.0)*r02*x10693);
evalcond[1]=((((-1.0)*sj0))+((r02*x10694)));
evalcond[2]=((((-1.0)*r20*x10696))+((x10693*x10695)));
evalcond[3]=(((gconst10*r11*x10693))+(((-1.0)*r10*x10696)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x10694*x10695))+(((-1.0)*gconst11*r20*x10694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10698=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x10698.valid){
continue;
}
IkReal x10697=x10698.value;
sj4array[0]=(((cj2*sj1*x10697))+((cj1*sj2*x10697)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10699=IKcos(j4);
IkReal x10700=IKsin(j4);
IkReal x10701=((1.0)*sj0);
IkReal x10702=(gconst10*x10699);
IkReal x10703=((1.0)*gconst11*x10699);
evalcond[0]=((-1.0)*r02*x10699);
evalcond[1]=(((r02*x10700))+(((-1.0)*x10701)));
evalcond[2]=(((r21*x10702))+(((-1.0)*r20*x10703)));
evalcond[3]=((((-1.0)*r10*x10703))+((r11*x10702)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst10*r11*x10700))+(((-1.0)*sj1*sj2*x10701))+(((-1.0)*gconst11*r10*x10700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10704=IKPowWithIntegerCheck(r02,-1);
if(!x10704.valid){
continue;
}
sj4array[0]=(sj0*(x10704.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10705=IKcos(j4);
IkReal x10706=IKsin(j4);
IkReal x10707=(gconst10*r21);
IkReal x10708=((1.0)*sj1);
IkReal x10709=(gconst10*r11);
IkReal x10710=((1.0)*gconst11*x10705);
IkReal x10711=((1.0)*gconst11*x10706);
evalcond[0]=((-1.0)*r02*x10705);
evalcond[1]=((((-1.0)*r20*x10710))+((x10705*x10707)));
evalcond[2]=((((-1.0)*r10*x10710))+((x10705*x10709)));
evalcond[3]=((((-1.0)*r20*x10711))+(((-1.0)*cj1*sj2))+((x10706*x10707))+(((-1.0)*cj2*x10708)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10708))+(((-1.0)*r10*x10711))+((x10706*x10709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10713=IKPowWithIntegerCheck(r02,-1);
if(!x10713.valid){
continue;
}
IkReal x10712=x10713.value;
CheckValue<IkReal> x10714=IKPowWithIntegerCheck(sj3,-1);
if(!x10714.valid){
continue;
}
if( IKabs((sj0*x10712)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10712*(x10714.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10712))+IKsqr((x10712*(x10714.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10712), (x10712*(x10714.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10715=IKcos(j4);
IkReal x10716=IKsin(j4);
IkReal x10717=(cj3*gconst10);
IkReal x10718=(gconst10*r21);
IkReal x10719=(cj2*sj0);
IkReal x10720=(gconst11*r21);
IkReal x10721=(gconst10*r11);
IkReal x10722=(gconst11*r11);
IkReal x10723=((1.0)*sj2);
IkReal x10724=(gconst10*sj3);
IkReal x10725=((1.0)*gconst11);
IkReal x10726=(cj0*cj2);
IkReal x10727=(cj1*sj2);
IkReal x10728=(sj3*x10716);
IkReal x10729=((1.0)*x10716);
IkReal x10730=(r02*x10715);
IkReal x10731=(cj3*gconst11*x10716);
evalcond[0]=((((-1.0)*sj0))+((r02*x10716)));
evalcond[1]=(((x10715*x10718))+(((-1.0)*r20*x10715*x10725)));
evalcond[2]=(cj0+((x10715*x10721))+(((-1.0)*r10*x10715*x10725)));
evalcond[3]=(((cj0*x10727))+(((-1.0)*sj3*x10730))+((sj1*x10726)));
evalcond[4]=(((cj1*x10726))+((cj3*x10730))+(((-1.0)*cj0*sj1*x10723)));
evalcond[5]=(((x10718*x10728))+(((-1.0)*r20*x10725*x10728))+((r20*x10717))+(((-1.0)*sj1*x10723))+((cj1*cj2))+((cj3*x10720)));
evalcond[6]=(((sj3*x10720))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10723))+((r20*x10731))+((r20*x10724))+(((-1.0)*r21*x10717*x10729)));
evalcond[7]=((((-1.0)*r10*x10725*x10728))+((sj0*x10727))+((r10*x10717))+((x10721*x10728))+((sj1*x10719))+((cj3*x10722)));
evalcond[8]=(((sj3*x10722))+((r10*x10724))+((cj1*x10719))+((r10*x10731))+(((-1.0)*sj0*sj1*x10723))+(((-1.0)*r11*x10717*x10729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10732=((1.0)*gconst11);
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x10732))+((gconst10*r21*sj3))),-1);
if(!x10733.valid){
continue;
}
CheckValue<IkReal> x10734=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x10732))),-1);
if(!x10734.valid){
continue;
}
if( IKabs(((x10733.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10732))+(((-1.0)*cj3*gconst10*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10734.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10733.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10732))+(((-1.0)*cj3*gconst10*r20))))))+IKsqr(((-1.0)*cj0*(x10734.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10733.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10732))+(((-1.0)*cj3*gconst10*r20))))), ((-1.0)*cj0*(x10734.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10735=IKcos(j4);
IkReal x10736=IKsin(j4);
IkReal x10737=(cj3*gconst10);
IkReal x10738=(gconst10*r21);
IkReal x10739=(cj2*sj0);
IkReal x10740=(gconst11*r21);
IkReal x10741=(gconst10*r11);
IkReal x10742=(gconst11*r11);
IkReal x10743=((1.0)*sj2);
IkReal x10744=(gconst10*sj3);
IkReal x10745=((1.0)*gconst11);
IkReal x10746=(cj0*cj2);
IkReal x10747=(cj1*sj2);
IkReal x10748=(sj3*x10736);
IkReal x10749=((1.0)*x10736);
IkReal x10750=(r02*x10735);
IkReal x10751=(cj3*gconst11*x10736);
evalcond[0]=((((-1.0)*sj0))+((r02*x10736)));
evalcond[1]=((((-1.0)*r20*x10735*x10745))+((x10735*x10738)));
evalcond[2]=(cj0+((x10735*x10741))+(((-1.0)*r10*x10735*x10745)));
evalcond[3]=((((-1.0)*sj3*x10750))+((cj0*x10747))+((sj1*x10746)));
evalcond[4]=(((cj3*x10750))+(((-1.0)*cj0*sj1*x10743))+((cj1*x10746)));
evalcond[5]=(((cj3*x10740))+((r20*x10737))+(((-1.0)*r20*x10745*x10748))+((cj1*cj2))+((x10738*x10748))+(((-1.0)*sj1*x10743)));
evalcond[6]=(((sj3*x10740))+(((-1.0)*cj2*sj1))+((r20*x10751))+((r20*x10744))+(((-1.0)*cj1*x10743))+(((-1.0)*r21*x10737*x10749)));
evalcond[7]=(((r10*x10737))+((cj3*x10742))+((sj0*x10747))+((sj1*x10739))+(((-1.0)*r10*x10745*x10748))+((x10741*x10748)));
evalcond[8]=(((sj3*x10742))+((r10*x10744))+((r10*x10751))+(((-1.0)*sj0*sj1*x10743))+((cj1*x10739))+(((-1.0)*r11*x10737*x10749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10752=IKPowWithIntegerCheck(r02,-1);
if(!x10752.valid){
continue;
}
CheckValue<IkReal> x10753=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10753.valid){
continue;
}
if( IKabs((sj0*(x10752.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10753.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10752.value)))+IKsqr(((-1.0)*cj0*(x10753.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10752.value)), ((-1.0)*cj0*(x10753.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10754=IKcos(j4);
IkReal x10755=IKsin(j4);
IkReal x10756=(cj3*gconst10);
IkReal x10757=(gconst10*r21);
IkReal x10758=(cj2*sj0);
IkReal x10759=(gconst11*r21);
IkReal x10760=(gconst10*r11);
IkReal x10761=(gconst11*r11);
IkReal x10762=((1.0)*sj2);
IkReal x10763=(gconst10*sj3);
IkReal x10764=((1.0)*gconst11);
IkReal x10765=(cj0*cj2);
IkReal x10766=(cj1*sj2);
IkReal x10767=(sj3*x10755);
IkReal x10768=((1.0)*x10755);
IkReal x10769=(r02*x10754);
IkReal x10770=(cj3*gconst11*x10755);
evalcond[0]=((((-1.0)*sj0))+((r02*x10755)));
evalcond[1]=((((-1.0)*r20*x10754*x10764))+((x10754*x10757)));
evalcond[2]=(cj0+(((-1.0)*r10*x10754*x10764))+((x10754*x10760)));
evalcond[3]=((((-1.0)*sj3*x10769))+((cj0*x10766))+((sj1*x10765)));
evalcond[4]=(((cj1*x10765))+((cj3*x10769))+(((-1.0)*cj0*sj1*x10762)));
evalcond[5]=(((cj3*x10759))+(((-1.0)*sj1*x10762))+((r20*x10756))+((x10757*x10767))+((cj1*cj2))+(((-1.0)*r20*x10764*x10767)));
evalcond[6]=(((sj3*x10759))+(((-1.0)*cj1*x10762))+(((-1.0)*r21*x10756*x10768))+((r20*x10770))+(((-1.0)*cj2*sj1))+((r20*x10763)));
evalcond[7]=(((r10*x10756))+((cj3*x10761))+((x10760*x10767))+(((-1.0)*r10*x10764*x10767))+((sj1*x10758))+((sj0*x10766)));
evalcond[8]=((((-1.0)*r11*x10756*x10768))+(((-1.0)*sj0*sj1*x10762))+((sj3*x10761))+((r10*x10763))+((r10*x10770))+((cj1*x10758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10773 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10773.valid){
continue;
}
IkReal x10771=((1.0)*(x10773.value));
IkReal x10772=x10454;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10771)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10771)));
IkReal gconst10=((1.0)*r11*x10772);
IkReal gconst11=((-1.0)*r10*x10772);
IkReal x10774=r12*r12;
IkReal x10775=((1.0)*sj0);
IkReal x10776=(cj0*r02);
IkReal x10777=x10454;
j4eval[0]=((IKabs((((sj0*x10774*x10777))+(((-1.0)*x10775*x10777))+((r12*x10776*x10777)))))+(IKabs(((((-1.0)*r12*x10775))+(((-1.0)*x10776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10778=(sj1*sj2);
IkReal x10779=(r21*sj3);
IkReal x10780=((1.0)*gconst11);
IkReal x10781=(cj3*r21);
IkReal x10782=(r20*sj3);
IkReal x10783=((1.0)*gconst10);
IkReal x10784=(cj3*r20);
IkReal x10785=(cj1*cj2);
CheckValue<IkReal> x10786=IKPowWithIntegerCheck(((((-1.0)*x10780*x10782))+((gconst10*x10779))),-1);
if(!x10786.valid){
continue;
}
CheckValue<IkReal> x10787=IKPowWithIntegerCheck((((r11*x10779*(gconst10*gconst10)))+(((-1.0)*gconst10*r11*x10780*x10782))+((r10*x10782*(gconst11*gconst11)))+(((-1.0)*gconst10*r10*x10779*x10780))),-1);
if(!x10787.valid){
continue;
}
if( IKabs(((x10786.value)*(((((-1.0)*x10783*x10784))+(((-1.0)*x10780*x10781))+(((-1.0)*x10785))+x10778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10787.value)*(((((-1.0)*r12*x10778))+((cj0*gconst11*x10782))+(((-1.0)*cj0*x10779*x10783))+((gconst11*r12*x10781))+((gconst10*r12*x10784))+((r12*x10785)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10786.value)*(((((-1.0)*x10783*x10784))+(((-1.0)*x10780*x10781))+(((-1.0)*x10785))+x10778))))+IKsqr(((x10787.value)*(((((-1.0)*r12*x10778))+((cj0*gconst11*x10782))+(((-1.0)*cj0*x10779*x10783))+((gconst11*r12*x10781))+((gconst10*r12*x10784))+((r12*x10785))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10786.value)*(((((-1.0)*x10783*x10784))+(((-1.0)*x10780*x10781))+(((-1.0)*x10785))+x10778))), ((x10787.value)*(((((-1.0)*r12*x10778))+((cj0*gconst11*x10782))+(((-1.0)*cj0*x10779*x10783))+((gconst11*r12*x10781))+((gconst10*r12*x10784))+((r12*x10785))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10788=IKcos(j4);
IkReal x10789=IKsin(j4);
IkReal x10790=(gconst10*sj3);
IkReal x10791=(cj3*gconst10);
IkReal x10792=(cj3*gconst11);
IkReal x10793=(cj2*sj0);
IkReal x10794=((1.0)*gconst11);
IkReal x10795=(gconst11*sj3);
IkReal x10796=((1.0)*sj2);
IkReal x10797=(cj0*cj2);
IkReal x10798=(cj1*sj2);
IkReal x10799=(gconst10*x10788);
IkReal x10800=(r00*x10789);
IkReal x10801=(r11*x10789);
IkReal x10802=(r21*x10789);
IkReal x10803=(sj3*x10789);
IkReal x10804=(r01*x10789);
IkReal x10805=(cj3*x10788);
IkReal x10806=((1.0)*sj3*x10788);
evalcond[0]=(((r21*x10799))+(((-1.0)*r20*x10788*x10794)));
evalcond[1]=(cj0+(((-1.0)*r10*x10788*x10794))+((r12*x10789))+((r11*x10799)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10789))+(((-1.0)*r00*x10788*x10794))+((r01*x10799)));
evalcond[3]=(((x10790*x10802))+((r21*x10792))+(((-1.0)*r20*x10794*x10803))+((r20*x10791))+((cj1*cj2))+(((-1.0)*sj1*x10796)));
evalcond[4]=(((r20*x10789*x10792))+(((-1.0)*cj2*sj1))+((r21*x10795))+(((-1.0)*cj1*x10796))+((r20*x10790))+(((-1.0)*x10791*x10802)));
evalcond[5]=(((x10790*x10804))+((cj0*x10798))+(((-1.0)*sj3*x10794*x10800))+(((-1.0)*r02*x10806))+((sj1*x10797))+((r00*x10791))+((r01*x10792)));
evalcond[6]=(((x10792*x10800))+(((-1.0)*cj0*sj1*x10796))+((r02*x10805))+((cj1*x10797))+((r00*x10790))+((r01*x10795))+(((-1.0)*x10791*x10804)));
evalcond[7]=(((r10*x10791))+((x10790*x10801))+(((-1.0)*r10*x10794*x10803))+((sj1*x10793))+((sj0*x10798))+(((-1.0)*r12*x10806))+((r11*x10792)));
evalcond[8]=(((r10*x10790))+(((-1.0)*sj0*sj1*x10796))+((r12*x10805))+((cj1*x10793))+((r11*x10795))+((r10*x10789*x10792))+(((-1.0)*x10791*x10801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10807=((1.0)*sj0);
IkReal x10808=((1.0)*cj0);
CheckValue<IkReal> x10809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10809.valid){
continue;
}
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r00*x10808))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r10*x10807)))),IkReal(((((-1.0)*r02*x10808))+(((-1.0)*r12*x10807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10809.value)))+(x10810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10811=IKcos(j4);
IkReal x10812=IKsin(j4);
IkReal x10813=(gconst10*sj3);
IkReal x10814=(cj3*gconst10);
IkReal x10815=(cj3*gconst11);
IkReal x10816=(cj2*sj0);
IkReal x10817=((1.0)*gconst11);
IkReal x10818=(gconst11*sj3);
IkReal x10819=((1.0)*sj2);
IkReal x10820=(cj0*cj2);
IkReal x10821=(cj1*sj2);
IkReal x10822=(gconst10*x10811);
IkReal x10823=(r00*x10812);
IkReal x10824=(r11*x10812);
IkReal x10825=(r21*x10812);
IkReal x10826=(sj3*x10812);
IkReal x10827=(r01*x10812);
IkReal x10828=(cj3*x10811);
IkReal x10829=((1.0)*sj3*x10811);
evalcond[0]=(((r21*x10822))+(((-1.0)*r20*x10811*x10817)));
evalcond[1]=(cj0+(((-1.0)*r10*x10811*x10817))+((r11*x10822))+((r12*x10812)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10812))+((r01*x10822))+(((-1.0)*r00*x10811*x10817)));
evalcond[3]=(((x10813*x10825))+(((-1.0)*r20*x10817*x10826))+((r20*x10814))+(((-1.0)*sj1*x10819))+((cj1*cj2))+((r21*x10815)));
evalcond[4]=((((-1.0)*cj1*x10819))+(((-1.0)*cj2*sj1))+(((-1.0)*x10814*x10825))+((r20*x10813))+((r20*x10812*x10815))+((r21*x10818)));
evalcond[5]=(((sj1*x10820))+(((-1.0)*sj3*x10817*x10823))+(((-1.0)*r02*x10829))+((x10813*x10827))+((cj0*x10821))+((r01*x10815))+((r00*x10814)));
evalcond[6]=((((-1.0)*cj0*sj1*x10819))+((r02*x10828))+((x10815*x10823))+(((-1.0)*x10814*x10827))+((r01*x10818))+((r00*x10813))+((cj1*x10820)));
evalcond[7]=((((-1.0)*r10*x10817*x10826))+((sj0*x10821))+((sj1*x10816))+((x10813*x10824))+(((-1.0)*r12*x10829))+((r10*x10814))+((r11*x10815)));
evalcond[8]=(((r12*x10828))+((cj1*x10816))+(((-1.0)*sj0*sj1*x10819))+(((-1.0)*x10814*x10824))+((r10*x10812*x10815))+((r10*x10813))+((r11*x10818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10830=((1.0)*sj0);
IkReal x10831=((1.0)*cj0);
CheckValue<IkReal> x10832=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10832.valid){
continue;
}
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x10830))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r00*x10831)))),IkReal(((((-1.0)*r12*x10830))+(((-1.0)*r02*x10831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10832.value)))+(x10833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10834=IKcos(j4);
IkReal x10835=IKsin(j4);
IkReal x10836=(gconst10*sj3);
IkReal x10837=(cj3*gconst10);
IkReal x10838=(cj3*gconst11);
IkReal x10839=(cj2*sj0);
IkReal x10840=((1.0)*gconst11);
IkReal x10841=(gconst11*sj3);
IkReal x10842=((1.0)*sj2);
IkReal x10843=(cj0*cj2);
IkReal x10844=(cj1*sj2);
IkReal x10845=(gconst10*x10834);
IkReal x10846=(r00*x10835);
IkReal x10847=(r11*x10835);
IkReal x10848=(r21*x10835);
IkReal x10849=(r22*x10834);
IkReal x10850=(sj3*x10835);
IkReal x10851=(r01*x10835);
IkReal x10852=(cj3*x10834);
IkReal x10853=((1.0)*sj3*x10834);
evalcond[0]=(((r22*x10835))+(((-1.0)*r20*x10834*x10840))+((r21*x10845)));
evalcond[1]=((((-1.0)*r10*x10834*x10840))+cj0+((r11*x10845))+((r12*x10835)));
evalcond[2]=(((r01*x10845))+(((-1.0)*sj0))+(((-1.0)*r00*x10834*x10840))+((r02*x10835)));
evalcond[3]=((((-1.0)*sj1*x10842))+(((-1.0)*sj3*x10849))+((r20*x10837))+(((-1.0)*r20*x10840*x10850))+((cj1*cj2))+((r21*x10838))+((x10836*x10848)));
evalcond[4]=((((-1.0)*cj1*x10842))+(((-1.0)*x10837*x10848))+(((-1.0)*cj2*sj1))+((cj3*x10849))+((r20*x10835*x10838))+((r21*x10841))+((r20*x10836)));
evalcond[5]=(((x10836*x10851))+((cj0*x10844))+((r01*x10838))+(((-1.0)*r02*x10853))+((sj1*x10843))+((r00*x10837))+(((-1.0)*sj3*x10840*x10846)));
evalcond[6]=(((r01*x10841))+((x10838*x10846))+(((-1.0)*cj0*sj1*x10842))+((cj1*x10843))+((r00*x10836))+((r02*x10852))+(((-1.0)*x10837*x10851)));
evalcond[7]=(((sj1*x10839))+(((-1.0)*r12*x10853))+((r10*x10837))+((sj0*x10844))+(((-1.0)*r10*x10840*x10850))+((x10836*x10847))+((r11*x10838)));
evalcond[8]=((((-1.0)*x10837*x10847))+((r12*x10852))+((r10*x10835*x10838))+(((-1.0)*sj0*sj1*x10842))+((r10*x10836))+((r11*x10841))+((cj1*x10839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
CheckValue<IkReal> x10855=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10854.value)+(((1.5707963267949)*(x10855.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10856=IKcos(j4);
IkReal x10857=IKsin(j4);
IkReal x10858=(gconst10*sj3);
IkReal x10859=(cj3*gconst10);
IkReal x10860=(cj3*gconst11);
IkReal x10861=(cj2*sj0);
IkReal x10862=((1.0)*gconst11);
IkReal x10863=(gconst11*sj3);
IkReal x10864=((1.0)*sj2);
IkReal x10865=(cj0*cj2);
IkReal x10866=(cj1*sj2);
IkReal x10867=(gconst10*x10856);
IkReal x10868=(r00*x10857);
IkReal x10869=(r11*x10857);
IkReal x10870=(r21*x10857);
IkReal x10871=(r22*x10856);
IkReal x10872=(sj3*x10857);
IkReal x10873=(r01*x10857);
IkReal x10874=(cj3*x10856);
IkReal x10875=((1.0)*sj3*x10856);
evalcond[0]=((((-1.0)*r20*x10856*x10862))+((r21*x10867))+((r22*x10857)));
evalcond[1]=(((r11*x10867))+cj0+((r12*x10857))+(((-1.0)*r10*x10856*x10862)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x10856*x10862))+((r01*x10867))+((r02*x10857)));
evalcond[3]=(((x10858*x10870))+(((-1.0)*sj3*x10871))+(((-1.0)*r20*x10862*x10872))+((r21*x10860))+((r20*x10859))+(((-1.0)*sj1*x10864))+((cj1*cj2)));
evalcond[4]=(((r20*x10857*x10860))+((cj3*x10871))+((r21*x10863))+(((-1.0)*x10859*x10870))+(((-1.0)*cj2*sj1))+((r20*x10858))+(((-1.0)*cj1*x10864)));
evalcond[5]=(((x10858*x10873))+((sj1*x10865))+(((-1.0)*sj3*x10862*x10868))+((cj0*x10866))+(((-1.0)*r02*x10875))+((r01*x10860))+((r00*x10859)));
evalcond[6]=(((r02*x10874))+((x10860*x10868))+(((-1.0)*x10859*x10873))+((cj1*x10865))+(((-1.0)*cj0*sj1*x10864))+((r01*x10863))+((r00*x10858)));
evalcond[7]=(((r11*x10860))+((sj1*x10861))+(((-1.0)*r12*x10875))+((sj0*x10866))+((r10*x10859))+(((-1.0)*r10*x10862*x10872))+((x10858*x10869)));
evalcond[8]=((((-1.0)*sj0*sj1*x10864))+((r12*x10874))+((r11*x10863))+((r10*x10857*x10860))+((r10*x10858))+(((-1.0)*x10859*x10869))+((cj1*x10861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10876.value)+(((1.5707963267949)*(x10877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10878=IKcos(j4);
IkReal x10879=IKsin(j4);
IkReal x10880=(gconst10*sj3);
IkReal x10881=(cj3*gconst10);
IkReal x10882=(cj3*gconst11);
IkReal x10883=(cj2*sj0);
IkReal x10884=((1.0)*gconst11);
IkReal x10885=(gconst11*sj3);
IkReal x10886=((1.0)*sj2);
IkReal x10887=(cj0*cj2);
IkReal x10888=(cj1*sj2);
IkReal x10889=(gconst10*x10878);
IkReal x10890=(r00*x10879);
IkReal x10891=(r11*x10879);
IkReal x10892=(r21*x10879);
IkReal x10893=(r22*x10878);
IkReal x10894=(sj3*x10879);
IkReal x10895=(r01*x10879);
IkReal x10896=(cj3*x10878);
IkReal x10897=((1.0)*sj3*x10878);
evalcond[0]=((((-1.0)*r20*x10878*x10884))+((r21*x10889))+((r22*x10879)));
evalcond[1]=(((r12*x10879))+cj0+((r11*x10889))+(((-1.0)*r10*x10878*x10884)));
evalcond[2]=(((r02*x10879))+(((-1.0)*sj0))+(((-1.0)*r00*x10878*x10884))+((r01*x10889)));
evalcond[3]=((((-1.0)*sj1*x10886))+((x10880*x10892))+(((-1.0)*r20*x10884*x10894))+((r21*x10882))+((cj1*cj2))+(((-1.0)*sj3*x10893))+((r20*x10881)));
evalcond[4]=((((-1.0)*x10881*x10892))+(((-1.0)*cj1*x10886))+(((-1.0)*cj2*sj1))+((r20*x10879*x10882))+((cj3*x10893))+((r21*x10885))+((r20*x10880)));
evalcond[5]=(((r00*x10881))+((x10880*x10895))+(((-1.0)*r02*x10897))+((cj0*x10888))+((sj1*x10887))+(((-1.0)*sj3*x10884*x10890))+((r01*x10882)));
evalcond[6]=(((r00*x10880))+((x10882*x10890))+((cj1*x10887))+(((-1.0)*x10881*x10895))+(((-1.0)*cj0*sj1*x10886))+((r02*x10896))+((r01*x10885)));
evalcond[7]=(((x10880*x10891))+(((-1.0)*r10*x10884*x10894))+((sj0*x10888))+((r11*x10882))+(((-1.0)*r12*x10897))+((sj1*x10883))+((r10*x10881)));
evalcond[8]=(((cj1*x10883))+(((-1.0)*x10881*x10891))+((r12*x10896))+(((-1.0)*sj0*sj1*x10886))+((r11*x10885))+((r10*x10880))+((r10*x10879*x10882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10898=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10898;
j4eval[1]=IKsign(x10898);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10899=((1.0)*cj5);
IkReal x10900=((((-1.0)*r21*x10899))+(((-1.0)*r20*sj5)));
j4eval[0]=x10900;
j4eval[1]=((IKabs(((((-1.0)*r00*x10899))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x10900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10901=cj5*cj5;
IkReal x10902=(cj3*r11*r21);
IkReal x10903=((1.0)*cj3*cj5*sj5);
IkReal x10904=(((cj3*r12*r22))+(((-1.0)*r11*r20*x10903))+(((-1.0)*x10901*x10902))+((cj3*r10*r20*x10901))+(((-1.0)*r10*r21*x10903))+x10902);
j4eval[0]=x10904;
j4eval[1]=IKsign(x10904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10905=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10905;
j4eval[1]=IKsign(x10905);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10906=((1.0)*cj5);
IkReal x10907=((((-1.0)*r21*x10906))+(((-1.0)*r20*sj5)));
j4eval[0]=x10907;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10906))))));
j4eval[2]=IKsign(x10907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10908=cj5*cj5;
IkReal x10909=r11*r11;
IkReal x10910=(cj5*r10);
IkReal x10911=(r11*sj5);
IkReal x10912=(((x10908*x10909))+(((-1.0)*x10908*(r10*r10)))+(((2.0)*x10910*x10911))+(((-1.0)*(r12*r12)))+(((-1.0)*x10909)));
j4eval[0]=x10912;
j4eval[1]=((IKabs(r12))+(IKabs((x10911+(((-1.0)*x10910))))));
j4eval[2]=IKsign(x10912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10913=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10913);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10914=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x10914)));
j4eval[1]=((((-1.0)*r10*x10914))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10915=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10915);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10916=((1.0)*sj2);
CheckValue<IkReal> x10917=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(r22,-1);
if(!x10918.valid){
continue;
}
if( IKabs(((x10917.value)*(((((-1.0)*cj1*x10916))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10918.value)*(((((-1.0)*sj1*x10916))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10917.value)*(((((-1.0)*cj1*x10916))+(((-1.0)*cj2*sj1))))))+IKsqr(((x10918.value)*(((((-1.0)*sj1*x10916))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10917.value)*(((((-1.0)*cj1*x10916))+(((-1.0)*cj2*sj1))))), ((x10918.value)*(((((-1.0)*sj1*x10916))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j4);
IkReal x10920=IKsin(j4);
IkReal x10921=(cj5*r00);
IkReal x10922=(cj5*r10);
IkReal x10923=((1.0)*x10919);
IkReal x10924=((1.0)*x10920);
IkReal x10925=(sj5*x10919);
IkReal x10926=(sj5*x10920);
evalcond[0]=(r22*x10920);
evalcond[1]=(((r01*x10925))+(((-1.0)*x10921*x10923)));
evalcond[2]=((((-1.0)*r22*x10923))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=(((r11*x10926))+(((-1.0)*x10922*x10924)));
evalcond[4]=((1.0)+((r11*x10925))+(((-1.0)*x10922*x10923)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r01*x10926))+(((-1.0)*x10921*x10924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10927=((1.0)*cj5);
CheckValue<IkReal> x10928=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x10927))),-1);
if(!x10928.valid){
continue;
}
CheckValue<IkReal> x10929=IKPowWithIntegerCheck(((((-1.0)*r10*x10927))+((r11*sj5))),-1);
if(!x10929.valid){
continue;
}
if( IKabs(((x10928.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10929.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10928.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x10929.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10928.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x10929.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10930=IKcos(j4);
IkReal x10931=IKsin(j4);
IkReal x10932=(cj5*r00);
IkReal x10933=(cj5*r10);
IkReal x10934=((1.0)*x10930);
IkReal x10935=((1.0)*x10931);
IkReal x10936=(sj5*x10930);
IkReal x10937=(sj5*x10931);
evalcond[0]=(r22*x10931);
evalcond[1]=(((r01*x10936))+(((-1.0)*x10932*x10934)));
evalcond[2]=((((-1.0)*r22*x10934))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=(((r11*x10937))+(((-1.0)*x10933*x10935)));
evalcond[4]=((1.0)+((r11*x10936))+(((-1.0)*x10933*x10934)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r01*x10937))+(((-1.0)*x10932*x10935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10938=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10938);
rxp1_1=(px*r21);
rxp1_2=(r11*x10938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10939=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10939);
rxp1_1=(px*r21);
rxp1_2=(r11*x10939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x10940=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x10940)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x10940)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10941=((1.0)*cj5);
CheckValue<IkReal> x10942=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x10941))),-1);
if(!x10942.valid){
continue;
}
CheckValue<IkReal> x10943=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x10941))),-1);
if(!x10943.valid){
continue;
}
if( IKabs(((x10942.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10943.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10942.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x10943.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10942.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x10943.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10944=IKcos(j4);
IkReal x10945=IKsin(j4);
IkReal x10946=(r21*sj5);
IkReal x10947=(cj5*r10);
IkReal x10948=(r11*sj5);
IkReal x10949=((1.0)*cj5*r20);
IkReal x10950=((1.0)*x10944);
evalcond[0]=(r02*x10945);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10950)));
evalcond[2]=(((x10944*x10946))+(((-1.0)*x10944*x10949)));
evalcond[3]=(((x10945*x10948))+(((-1.0)*x10945*x10947)));
evalcond[4]=((1.0)+(((-1.0)*x10947*x10950))+((x10944*x10948)));
evalcond[5]=((((-1.0)*x10945*x10949))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10945*x10946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10951=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x10951.valid){
continue;
}
CheckValue<IkReal> x10952=IKPowWithIntegerCheck(r02,-1);
if(!x10952.valid){
continue;
}
if( IKabs(((x10951.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10952.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10951.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10952.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10951.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10952.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10953=IKcos(j4);
IkReal x10954=IKsin(j4);
IkReal x10955=(r21*sj5);
IkReal x10956=(cj5*r10);
IkReal x10957=(r11*sj5);
IkReal x10958=((1.0)*cj5*r20);
IkReal x10959=((1.0)*x10953);
evalcond[0]=(r02*x10954);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10959)));
evalcond[2]=(((x10953*x10955))+(((-1.0)*x10953*x10958)));
evalcond[3]=((((-1.0)*x10954*x10956))+((x10954*x10957)));
evalcond[4]=((1.0)+((x10953*x10957))+(((-1.0)*x10956*x10959)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10954*x10955))+((cj1*cj2))+(((-1.0)*x10954*x10958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10960=cj5*cj5;
IkReal x10961=r11*r11;
IkReal x10962=(cj5*r10);
IkReal x10963=(r11*sj5);
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10962))+x10963)),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign(((((2.0)*x10962*x10963))+((x10960*x10961))+(((-1.0)*(r12*r12)))+(((-1.0)*x10961))+(((-1.0)*x10960*(r10*r10))))),-1);
if(!x10965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10964.value)+(((1.5707963267949)*(x10965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10966=IKcos(j4);
IkReal x10967=IKsin(j4);
IkReal x10968=(cj5*r00);
IkReal x10969=(cj5*r10);
IkReal x10970=(cj5*r20);
IkReal x10971=((1.0)*x10966);
IkReal x10972=((1.0)*x10967);
IkReal x10973=(sj5*x10966);
IkReal x10974=(sj5*x10967);
evalcond[0]=((((-1.0)*x10970*x10971))+((r22*x10967))+((r21*x10973)));
evalcond[1]=(((r02*x10967))+(((-1.0)*x10968*x10971))+((r01*x10973)));
evalcond[2]=((1.0)+((r11*x10973))+((r12*x10967))+(((-1.0)*x10969*x10971)));
evalcond[3]=(((r11*x10974))+(((-1.0)*x10969*x10972))+(((-1.0)*r12*x10971)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10968*x10972))+((r01*x10974))+((cj1*sj2))+(((-1.0)*r02*x10971)));
evalcond[5]=((((-1.0)*x10970*x10972))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10971))+((r21*x10974))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10975=((1.0)*cj5);
CheckValue<IkReal> x10976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10975))+(((-1.0)*r20*sj5)))),-1);
if(!x10976.valid){
continue;
}
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x10975)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10976.value)))+(x10977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10978=IKcos(j4);
IkReal x10979=IKsin(j4);
IkReal x10980=(cj5*r00);
IkReal x10981=(cj5*r10);
IkReal x10982=(cj5*r20);
IkReal x10983=((1.0)*x10978);
IkReal x10984=((1.0)*x10979);
IkReal x10985=(sj5*x10978);
IkReal x10986=(sj5*x10979);
evalcond[0]=(((r21*x10985))+((r22*x10979))+(((-1.0)*x10982*x10983)));
evalcond[1]=(((r02*x10979))+((r01*x10985))+(((-1.0)*x10980*x10983)));
evalcond[2]=((1.0)+((r11*x10985))+(((-1.0)*x10981*x10983))+((r12*x10979)));
evalcond[3]=(((r11*x10986))+(((-1.0)*r12*x10983))+(((-1.0)*x10981*x10984)));
evalcond[4]=(((cj2*sj1))+((r01*x10986))+((cj1*sj2))+(((-1.0)*r02*x10983))+(((-1.0)*x10980*x10984)));
evalcond[5]=(((r21*x10986))+(((-1.0)*r22*x10983))+(((-1.0)*sj1*sj2))+(((-1.0)*x10982*x10984))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x10987.valid){
continue;
}
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10987.value)))+(x10988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10989=IKcos(j4);
IkReal x10990=IKsin(j4);
IkReal x10991=(cj5*r00);
IkReal x10992=(cj5*r10);
IkReal x10993=(cj5*r20);
IkReal x10994=((1.0)*x10989);
IkReal x10995=((1.0)*x10990);
IkReal x10996=(sj5*x10989);
IkReal x10997=(sj5*x10990);
evalcond[0]=(((r22*x10990))+((r21*x10996))+(((-1.0)*x10993*x10994)));
evalcond[1]=(((r01*x10996))+(((-1.0)*x10991*x10994))+((r02*x10990)));
evalcond[2]=((1.0)+((r12*x10990))+(((-1.0)*x10992*x10994))+((r11*x10996)));
evalcond[3]=((((-1.0)*x10992*x10995))+((r11*x10997))+(((-1.0)*r12*x10994)));
evalcond[4]=(((cj2*sj1))+((r01*x10997))+(((-1.0)*x10991*x10995))+((cj1*sj2))+(((-1.0)*r02*x10994)));
evalcond[5]=(((r21*x10997))+(((-1.0)*x10993*x10995))+(((-1.0)*r22*x10994))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10998=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10998;
j4eval[1]=IKsign(x10998);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10999=((1.0)*cj5);
IkReal x11000=((((-1.0)*r21*x10999))+(((-1.0)*r20*sj5)));
j4eval[0]=x11000;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x10999)))))+(IKabs(r02)));
j4eval[2]=IKsign(x11000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11001=cj5*cj5;
IkReal x11002=r11*r11;
IkReal x11003=(cj5*r10);
IkReal x11004=(r11*sj5);
IkReal x11005=(((x11001*x11002))+(((-1.0)*x11001*(r10*r10)))+(((2.0)*x11003*x11004))+(((-1.0)*(r12*r12)))+(((-1.0)*x11002)));
j4eval[0]=x11005;
j4eval[1]=((IKabs(r12))+(IKabs((x11004+(((-1.0)*x11003))))));
j4eval[2]=IKsign(x11005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11006=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11006);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11006);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11007=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11007);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11007);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11008=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11008.valid){
continue;
}
CheckValue<IkReal> x11009=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11009.valid){
continue;
}
if( IKabs(((x11008.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11009.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11008.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x11009.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11008.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x11009.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11010=IKcos(j4);
IkReal x11011=IKsin(j4);
IkReal x11012=(cj5*r00);
IkReal x11013=(cj5*r10);
IkReal x11014=((1.0)*x11010);
IkReal x11015=(sj5*x11010);
IkReal x11016=((1.0)*sj5*x11011);
evalcond[0]=(r22*x11011);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x11010))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x11012*x11014))+((r01*x11015)));
evalcond[3]=((((-1.0)*r11*x11016))+((x11011*x11013)));
evalcond[4]=((1.0)+(((-1.0)*x11013*x11014))+((r11*x11015)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r01*x11016))+((cj1*sj2))+((x11011*x11012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11017=((1.0)*cj1);
CheckValue<IkReal> x11018=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11018.valid){
continue;
}
CheckValue<IkReal> x11019=IKPowWithIntegerCheck(r22,-1);
if(!x11019.valid){
continue;
}
if( IKabs(((x11018.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11017)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11019.value)*((((sj1*sj2))+(((-1.0)*cj2*x11017)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11018.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11017))))))+IKsqr(((x11019.value)*((((sj1*sj2))+(((-1.0)*cj2*x11017))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11018.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x11017))))), ((x11019.value)*((((sj1*sj2))+(((-1.0)*cj2*x11017))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11020=IKcos(j4);
IkReal x11021=IKsin(j4);
IkReal x11022=(cj5*r00);
IkReal x11023=(cj5*r10);
IkReal x11024=((1.0)*x11020);
IkReal x11025=(sj5*x11020);
IkReal x11026=((1.0)*sj5*x11021);
evalcond[0]=(r22*x11021);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x11020))+((cj1*cj2)));
evalcond[2]=(((r01*x11025))+(((-1.0)*x11022*x11024)));
evalcond[3]=(((x11021*x11023))+(((-1.0)*r11*x11026)));
evalcond[4]=((1.0)+(((-1.0)*x11023*x11024))+((r11*x11025)));
evalcond[5]=(((cj2*sj1))+((x11021*x11022))+((cj1*sj2))+(((-1.0)*r01*x11026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11027=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11027);
rxp1_1=(px*r21);
rxp1_2=(r11*x11027);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11028=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11028);
rxp1_1=(px*r21);
rxp1_2=(r11*x11028);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11029=((1.0)*cj2);
CheckValue<IkReal> x11030=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11030.valid){
continue;
}
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(r02,-1);
if(!x11031.valid){
continue;
}
if( IKabs(((x11030.value)*((((sj1*sj2))+(((-1.0)*cj1*x11029)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11031.value)*(((((-1.0)*sj1*x11029))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11030.value)*((((sj1*sj2))+(((-1.0)*cj1*x11029))))))+IKsqr(((x11031.value)*(((((-1.0)*sj1*x11029))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11030.value)*((((sj1*sj2))+(((-1.0)*cj1*x11029))))), ((x11031.value)*(((((-1.0)*sj1*x11029))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11032=IKcos(j4);
IkReal x11033=IKsin(j4);
IkReal x11034=(sj5*x11032);
IkReal x11035=(cj5*x11033);
IkReal x11036=((1.0)*sj5*x11033);
IkReal x11037=((1.0)*cj5*x11032);
evalcond[0]=(r02*x11033);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x11032)));
evalcond[2]=((((-1.0)*r20*x11037))+((r21*x11034)));
evalcond[3]=(((r10*x11035))+(((-1.0)*r11*x11036)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11037))+((r11*x11034)));
evalcond[5]=(((r20*x11035))+(((-1.0)*r21*x11036))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11038=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11039.valid){
continue;
}
if( IKabs(((x11038.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11039.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11038.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x11039.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11038.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x11039.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11040=IKcos(j4);
IkReal x11041=IKsin(j4);
IkReal x11042=(sj5*x11040);
IkReal x11043=(cj5*x11041);
IkReal x11044=((1.0)*sj5*x11041);
IkReal x11045=((1.0)*cj5*x11040);
evalcond[0]=(r02*x11041);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x11040)));
evalcond[2]=((((-1.0)*r20*x11045))+((r21*x11042)));
evalcond[3]=(((r10*x11043))+(((-1.0)*r11*x11044)));
evalcond[4]=((1.0)+((r11*x11042))+(((-1.0)*r10*x11045)));
evalcond[5]=(((r20*x11043))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11044))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11046=cj5*cj5;
IkReal x11047=r11*r11;
IkReal x11048=(cj5*r10);
IkReal x11049=(r11*sj5);
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal(r12),IkReal((x11049+(((-1.0)*x11048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
CheckValue<IkReal> x11051=IKPowWithIntegerCheck(IKsign(((((2.0)*x11048*x11049))+((x11046*x11047))+(((-1.0)*x11046*(r10*r10)))+(((-1.0)*x11047))+(((-1.0)*(r12*r12))))),-1);
if(!x11051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11050.value)+(((1.5707963267949)*(x11051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11052=IKcos(j4);
IkReal x11053=IKsin(j4);
IkReal x11054=(cj5*r00);
IkReal x11055=((1.0)*x11052);
IkReal x11056=(sj5*x11052);
IkReal x11057=(cj5*x11053);
IkReal x11058=((1.0)*sj5*x11053);
evalcond[0]=(((r22*x11053))+(((-1.0)*cj5*r20*x11055))+((r21*x11056)));
evalcond[1]=((((-1.0)*x11054*x11055))+((r01*x11056))+((r02*x11053)));
evalcond[2]=(((r12*x11052))+((r10*x11057))+(((-1.0)*r11*x11058)));
evalcond[3]=((1.0)+((r12*x11053))+((r11*x11056))+(((-1.0)*cj5*r10*x11055)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x11058))+((cj1*sj2))+((x11053*x11054))+((r02*x11052)));
evalcond[5]=(((r20*x11057))+((r22*x11052))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11058))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11059=((1.0)*cj5);
CheckValue<IkReal> x11060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11059))+(((-1.0)*r20*sj5)))),-1);
if(!x11060.valid){
continue;
}
CheckValue<IkReal> x11061 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11059)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11060.value)))+(x11061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11062=IKcos(j4);
IkReal x11063=IKsin(j4);
IkReal x11064=(cj5*r00);
IkReal x11065=((1.0)*x11062);
IkReal x11066=(sj5*x11062);
IkReal x11067=(cj5*x11063);
IkReal x11068=((1.0)*sj5*x11063);
evalcond[0]=((((-1.0)*cj5*r20*x11065))+((r21*x11066))+((r22*x11063)));
evalcond[1]=(((r01*x11066))+(((-1.0)*x11064*x11065))+((r02*x11063)));
evalcond[2]=(((r10*x11067))+(((-1.0)*r11*x11068))+((r12*x11062)));
evalcond[3]=((1.0)+((r11*x11066))+((r12*x11063))+(((-1.0)*cj5*r10*x11065)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x11068))+((x11063*x11064))+((cj1*sj2))+((r02*x11062)));
evalcond[5]=(((r20*x11067))+(((-1.0)*sj1*sj2))+((r22*x11062))+((cj1*cj2))+(((-1.0)*r21*x11068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11069=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11069.valid){
continue;
}
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11069.value)))+(x11070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11071=IKcos(j4);
IkReal x11072=IKsin(j4);
IkReal x11073=(cj5*r00);
IkReal x11074=((1.0)*x11071);
IkReal x11075=(sj5*x11071);
IkReal x11076=(cj5*x11072);
IkReal x11077=((1.0)*sj5*x11072);
evalcond[0]=(((r21*x11075))+(((-1.0)*cj5*r20*x11074))+((r22*x11072)));
evalcond[1]=((((-1.0)*x11073*x11074))+((r02*x11072))+((r01*x11075)));
evalcond[2]=((((-1.0)*r11*x11077))+((r12*x11071))+((r10*x11076)));
evalcond[3]=((1.0)+((r12*x11072))+((r11*x11075))+(((-1.0)*cj5*r10*x11074)));
evalcond[4]=(((cj2*sj1))+((x11072*x11073))+((cj1*sj2))+((r02*x11071))+(((-1.0)*r01*x11077)));
evalcond[5]=((((-1.0)*r21*x11077))+(((-1.0)*sj1*sj2))+((r20*x11076))+((cj1*cj2))+((r22*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11079 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11079)==0){
continue;
}
IkReal x11078=pow(x11079,-0.5);
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
IkReal gconst24=((-1.0)*(x11080.value));
IkReal gconst25=((-1.0)*r01*x11078);
IkReal gconst26=(r00*x11078);
CheckValue<IkReal> x11081 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11081.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11081.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11084 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11084.valid){
continue;
}
IkReal x11082=((-1.0)*(x11084.value));
IkReal x11083=x11078;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11082;
IkReal gconst24=x11082;
IkReal gconst25=((-1.0)*r01*x11083);
IkReal gconst26=(r00*x11083);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11087 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11087.valid){
continue;
}
IkReal x11085=((-1.0)*(x11087.value));
IkReal x11086=x11078;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11085;
IkReal gconst24=x11085;
IkReal gconst25=((-1.0)*r01*x11086);
IkReal gconst26=(r00*x11086);
CheckValue<IkReal> x11095=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11095.valid){
continue;
}
IkReal x11088=x11095.value;
IkReal x11089=(cj3*x11088);
IkReal x11090=(r21*x11089);
IkReal x11091=(r10*x11089);
IkReal x11092=(r11*x11089);
IkReal x11093=(r20*x11089);
IkReal x11094=(r00*r01*x11089);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x11092))+((r11*x11090*(r01*r01)))+((r20*x11091*(r00*r00)))+((r00*r01*r10*x11090))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11096=gconst25*gconst25;
IkReal x11097=gconst26*gconst26;
IkReal x11098=((1.0)*sj3);
IkReal x11099=(gconst25*r10);
IkReal x11100=(gconst26*r21);
IkReal x11101=((1.0)*cj3);
IkReal x11102=(gconst25*r11);
IkReal x11103=(gconst26*r20);
IkReal x11104=(r20*x11097);
IkReal x11105=(r21*x11096);
CheckValue<IkReal> x11106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11098))+(((-1.0)*r11*x11098*x11105))+((sj3*x11102*x11103))+(((-1.0)*r10*x11098*x11104))+((sj3*x11099*x11100)))),-1);
if(!x11106.valid){
continue;
}
CheckValue<IkReal> x11107 = IKatan2WithCheck(IkReal(((((-1.0)*x11099*x11101*x11103))+((cj3*x11100*x11102))+(((-1.0)*r11*x11101*x11104))+((cj3*r10*x11105)))),IkReal(((((-1.0)*r22*x11099*x11101))+(((-1.0)*gconst26*r11*r22*x11101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11106.value)))+(x11107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11108=IKcos(j4);
IkReal x11109=IKsin(j4);
IkReal x11110=(cj1*cj2);
IkReal x11111=(r11*sj3);
IkReal x11112=((1.0)*sj2);
IkReal x11113=(gconst25*sj3);
IkReal x11114=(cj3*gconst25);
IkReal x11115=(cj2*sj1);
IkReal x11116=(gconst26*sj3);
IkReal x11117=(cj3*gconst26);
IkReal x11118=(sj1*x11112);
IkReal x11119=(gconst25*x11108);
IkReal x11120=(cj3*x11108);
IkReal x11121=((1.0)*x11109);
IkReal x11122=((1.0)*gconst26*x11108);
IkReal x11123=((1.0)*sj3*x11108);
evalcond[0]=((((-1.0)*r20*x11122))+((r21*x11119))+((r22*x11109)));
evalcond[1]=(((r02*x11109))+(((-1.0)*r00*x11122))+((r01*x11119)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11122))+((r11*x11119))+((r12*x11109)));
evalcond[3]=((((-1.0)*r11*x11114*x11121))+((gconst26*x11111))+((r10*x11109*x11117))+((r10*x11113))+((r12*x11120)));
evalcond[4]=(((gconst25*x11109*x11111))+(((-1.0)*r12*x11123))+(((-1.0)*r10*x11116*x11121))+((r10*x11114))+((r11*x11117)));
evalcond[5]=((((-1.0)*r00*x11116*x11121))+((cj1*sj2))+x11115+(((-1.0)*r02*x11123))+((r00*x11114))+((r01*x11109*x11113))+((r01*x11117)));
evalcond[6]=(((r00*x11109*x11117))+x11110+((r02*x11120))+(((-1.0)*r01*x11114*x11121))+(((-1.0)*x11118))+((r00*x11113))+((r01*x11116)));
evalcond[7]=(x11110+(((-1.0)*r20*x11116*x11121))+((r21*x11117))+((r21*x11109*x11113))+(((-1.0)*r22*x11123))+((r20*x11114))+(((-1.0)*x11118)));
evalcond[8]=((((-1.0)*x11115))+(((-1.0)*cj1*x11112))+((r22*x11120))+((r20*x11109*x11117))+((r21*x11116))+((r20*x11113))+(((-1.0)*r21*x11114*x11121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11124=gconst25*gconst25;
IkReal x11125=gconst26*gconst26;
IkReal x11126=(cj3*r10);
IkReal x11127=(r10*sj3);
IkReal x11128=(cj3*r11);
IkReal x11129=(r11*sj3);
IkReal x11130=((1.0)*gconst25);
IkReal x11131=(gconst26*r20);
IkReal x11132=(r20*x11125);
IkReal x11133=(r21*x11124);
IkReal x11134=(gconst25*gconst26*r21);
CheckValue<IkReal> x11135=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11128*x11130*x11131))+((x11126*x11132))+((x11128*x11133))+(((-1.0)*gconst26*r21*x11126*x11130)))),-1);
if(!x11135.valid){
continue;
}
CheckValue<IkReal> x11136 = IKatan2WithCheck(IkReal((((x11127*x11133))+((x11129*x11134))+(((-1.0)*x11127*x11130*x11131))+(((-1.0)*x11129*x11132)))),IkReal(((((-1.0)*gconst26*r22*x11129))+(((-1.0)*r22*x11127*x11130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11135.value)))+(x11136.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11137=IKcos(j4);
IkReal x11138=IKsin(j4);
IkReal x11139=(cj1*cj2);
IkReal x11140=(r11*sj3);
IkReal x11141=((1.0)*sj2);
IkReal x11142=(gconst25*sj3);
IkReal x11143=(cj3*gconst25);
IkReal x11144=(cj2*sj1);
IkReal x11145=(gconst26*sj3);
IkReal x11146=(cj3*gconst26);
IkReal x11147=(sj1*x11141);
IkReal x11148=(gconst25*x11137);
IkReal x11149=(cj3*x11137);
IkReal x11150=((1.0)*x11138);
IkReal x11151=((1.0)*gconst26*x11137);
IkReal x11152=((1.0)*sj3*x11137);
evalcond[0]=(((r22*x11138))+((r21*x11148))+(((-1.0)*r20*x11151)));
evalcond[1]=(((r01*x11148))+((r02*x11138))+(((-1.0)*r00*x11151)));
evalcond[2]=((1.0)+((r11*x11148))+(((-1.0)*r10*x11151))+((r12*x11138)));
evalcond[3]=(((gconst26*x11140))+((r12*x11149))+(((-1.0)*r11*x11143*x11150))+((r10*x11142))+((r10*x11138*x11146)));
evalcond[4]=(((r11*x11146))+((r10*x11143))+(((-1.0)*r10*x11145*x11150))+(((-1.0)*r12*x11152))+((gconst25*x11138*x11140)));
evalcond[5]=(((r01*x11146))+((r00*x11143))+((cj1*sj2))+x11144+((r01*x11138*x11142))+(((-1.0)*r02*x11152))+(((-1.0)*r00*x11145*x11150)));
evalcond[6]=(((r01*x11145))+(((-1.0)*r01*x11143*x11150))+((r00*x11142))+((r02*x11149))+x11139+((r00*x11138*x11146))+(((-1.0)*x11147)));
evalcond[7]=(((r21*x11146))+((r21*x11138*x11142))+(((-1.0)*r20*x11145*x11150))+(((-1.0)*r22*x11152))+x11139+((r20*x11143))+(((-1.0)*x11147)));
evalcond[8]=(((r21*x11145))+((r22*x11149))+(((-1.0)*cj1*x11141))+(((-1.0)*x11144))+((r20*x11138*x11146))+(((-1.0)*r21*x11143*x11150))+((r20*x11142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11153=((1.0)*gconst26);
CheckValue<IkReal> x11154 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11153))+((gconst25*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11154.valid){
continue;
}
CheckValue<IkReal> x11155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11153))+(((-1.0)*gconst25*r20)))),-1);
if(!x11155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11154.value)+(((1.5707963267949)*(x11155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11156=IKcos(j4);
IkReal x11157=IKsin(j4);
IkReal x11158=(cj1*cj2);
IkReal x11159=(r11*sj3);
IkReal x11160=((1.0)*sj2);
IkReal x11161=(gconst25*sj3);
IkReal x11162=(cj3*gconst25);
IkReal x11163=(cj2*sj1);
IkReal x11164=(gconst26*sj3);
IkReal x11165=(cj3*gconst26);
IkReal x11166=(sj1*x11160);
IkReal x11167=(gconst25*x11156);
IkReal x11168=(cj3*x11156);
IkReal x11169=((1.0)*x11157);
IkReal x11170=((1.0)*gconst26*x11156);
IkReal x11171=((1.0)*sj3*x11156);
evalcond[0]=(((r22*x11157))+(((-1.0)*r20*x11170))+((r21*x11167)));
evalcond[1]=((((-1.0)*r00*x11170))+((r01*x11167))+((r02*x11157)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11170))+((r11*x11167))+((r12*x11157)));
evalcond[3]=(((r12*x11168))+((gconst26*x11159))+((r10*x11157*x11165))+(((-1.0)*r11*x11162*x11169))+((r10*x11161)));
evalcond[4]=((((-1.0)*r12*x11171))+((r11*x11165))+((gconst25*x11157*x11159))+((r10*x11162))+(((-1.0)*r10*x11164*x11169)));
evalcond[5]=(((r01*x11165))+((r00*x11162))+((cj1*sj2))+(((-1.0)*r00*x11164*x11169))+x11163+((r01*x11157*x11161))+(((-1.0)*r02*x11171)));
evalcond[6]=(((r01*x11164))+((r00*x11161))+(((-1.0)*x11166))+((r00*x11157*x11165))+x11158+(((-1.0)*r01*x11162*x11169))+((r02*x11168)));
evalcond[7]=(((r20*x11162))+(((-1.0)*r20*x11164*x11169))+(((-1.0)*x11166))+(((-1.0)*r22*x11171))+x11158+((r21*x11157*x11161))+((r21*x11165)));
evalcond[8]=(((r20*x11161))+(((-1.0)*r21*x11162*x11169))+((r20*x11157*x11165))+(((-1.0)*cj1*x11160))+(((-1.0)*x11163))+((r22*x11168))+((r21*x11164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11173 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11173)==0){
continue;
}
IkReal x11172=pow(x11173,-0.5);
CheckValue<IkReal> x11174 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11174.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x11174.value))));
IkReal gconst28=((1.0)*r01*x11172);
IkReal gconst29=((-1.0)*r00*x11172);
CheckValue<IkReal> x11175 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11175.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11178.valid){
continue;
}
IkReal x11176=((1.0)*(x11178.value));
IkReal x11177=x11172;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11176)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11176)));
IkReal gconst28=((1.0)*r01*x11177);
IkReal gconst29=((-1.0)*r00*x11177);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
IkReal x11179=((1.0)*(x11181.value));
IkReal x11180=x11172;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11179)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11179)));
IkReal gconst28=((1.0)*r01*x11180);
IkReal gconst29=((-1.0)*r00*x11180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11182=gconst28*gconst28;
IkReal x11183=gconst29*gconst29;
IkReal x11184=(r11*r21);
IkReal x11185=(gconst29*sj3);
IkReal x11186=((1.0)*r22);
IkReal x11187=(gconst28*r10);
IkReal x11188=((1.0)*r20);
IkReal x11189=((1.0)*cj3*gconst29);
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(((((-1.0)*x11185*x11187*x11188))+((r10*r21*sj3*x11182))+(((-1.0)*r11*sj3*x11183*x11188))+((gconst28*x11184*x11185)))),IkReal(((((-1.0)*sj3*x11186*x11187))+(((-1.0)*r11*x11185*x11186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
CheckValue<IkReal> x11191=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r21*x11187*x11189))+(((-1.0)*cj3*gconst28*gconst29*r11*x11188))+((cj3*r10*r20*x11183))+((cj3*x11182*x11184)))),-1);
if(!x11191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11190.value)+(((1.5707963267949)*(x11191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11192=IKcos(j4);
IkReal x11193=IKsin(j4);
IkReal x11194=(cj1*cj2);
IkReal x11195=(gconst29*sj3);
IkReal x11196=(gconst28*sj3);
IkReal x11197=(gconst28*r11);
IkReal x11198=((1.0)*sj2);
IkReal x11199=(cj3*gconst29);
IkReal x11200=(cj2*sj1);
IkReal x11201=(cj3*gconst28);
IkReal x11202=(gconst29*r20);
IkReal x11203=(gconst29*r00);
IkReal x11204=(sj1*x11198);
IkReal x11205=((1.0)*gconst29*r10);
IkReal x11206=(r21*x11193);
IkReal x11207=(cj3*x11193);
IkReal x11208=((1.0)*x11192);
IkReal x11209=(gconst28*x11192);
IkReal x11210=((1.0)*x11193);
IkReal x11211=(cj3*x11192);
evalcond[0]=(((r21*x11209))+((r22*x11193))+(((-1.0)*x11202*x11208)));
evalcond[1]=((((-1.0)*x11203*x11208))+((r02*x11193))+((r01*x11209)));
evalcond[2]=((1.0)+((x11192*x11197))+((r12*x11193))+(((-1.0)*x11192*x11205)));
evalcond[3]=(((r11*x11195))+((r10*x11193*x11199))+((r12*x11211))+(((-1.0)*x11197*x11207))+((r10*x11196)));
evalcond[4]=(((r11*x11199))+(((-1.0)*r10*x11195*x11210))+((r10*x11201))+((r11*x11193*x11196))+(((-1.0)*r12*sj3*x11208)));
evalcond[5]=((((-1.0)*r00*x11195*x11210))+x11200+((cj1*sj2))+((r01*x11199))+(((-1.0)*r02*sj3*x11208))+((r01*x11193*x11196))+((r00*x11201)));
evalcond[6]=(((r02*x11211))+(((-1.0)*x11204))+((r00*x11196))+((r01*x11195))+x11194+((r00*x11193*x11199))+(((-1.0)*r01*x11201*x11210)));
evalcond[7]=(((r21*x11199))+(((-1.0)*x11204))+((r20*x11201))+((x11196*x11206))+(((-1.0)*r22*sj3*x11208))+x11194+(((-1.0)*r20*x11195*x11210)));
evalcond[8]=(((r21*x11195))+((r20*x11196))+(((-1.0)*x11201*x11206))+(((-1.0)*cj1*x11198))+((r20*x11193*x11199))+(((-1.0)*x11200))+((r22*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11212=((1.0)*gconst29);
CheckValue<IkReal> x11213 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11212))+((gconst28*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11213.valid){
continue;
}
CheckValue<IkReal> x11214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11212))+(((-1.0)*gconst28*r20)))),-1);
if(!x11214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11213.value)+(((1.5707963267949)*(x11214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11215=IKcos(j4);
IkReal x11216=IKsin(j4);
IkReal x11217=(cj1*cj2);
IkReal x11218=(gconst29*sj3);
IkReal x11219=(gconst28*sj3);
IkReal x11220=(gconst28*r11);
IkReal x11221=((1.0)*sj2);
IkReal x11222=(cj3*gconst29);
IkReal x11223=(cj2*sj1);
IkReal x11224=(cj3*gconst28);
IkReal x11225=(gconst29*r20);
IkReal x11226=(gconst29*r00);
IkReal x11227=(sj1*x11221);
IkReal x11228=((1.0)*gconst29*r10);
IkReal x11229=(r21*x11216);
IkReal x11230=(cj3*x11216);
IkReal x11231=((1.0)*x11215);
IkReal x11232=(gconst28*x11215);
IkReal x11233=((1.0)*x11216);
IkReal x11234=(cj3*x11215);
evalcond[0]=((((-1.0)*x11225*x11231))+((r21*x11232))+((r22*x11216)));
evalcond[1]=(((r02*x11216))+(((-1.0)*x11226*x11231))+((r01*x11232)));
evalcond[2]=((1.0)+(((-1.0)*x11215*x11228))+((x11215*x11220))+((r12*x11216)));
evalcond[3]=(((r10*x11216*x11222))+(((-1.0)*x11220*x11230))+((r12*x11234))+((r11*x11218))+((r10*x11219)));
evalcond[4]=(((r11*x11222))+(((-1.0)*r10*x11218*x11233))+((r10*x11224))+((r11*x11216*x11219))+(((-1.0)*r12*sj3*x11231)));
evalcond[5]=((((-1.0)*r02*sj3*x11231))+x11223+((cj1*sj2))+(((-1.0)*r00*x11218*x11233))+((r01*x11216*x11219))+((r00*x11224))+((r01*x11222)));
evalcond[6]=(x11217+((r02*x11234))+(((-1.0)*x11227))+((r00*x11216*x11222))+((r01*x11218))+((r00*x11219))+(((-1.0)*r01*x11224*x11233)));
evalcond[7]=(x11217+(((-1.0)*x11227))+((r20*x11224))+(((-1.0)*r22*sj3*x11231))+((r21*x11222))+(((-1.0)*r20*x11218*x11233))+((x11219*x11229)));
evalcond[8]=(((r21*x11218))+((r22*x11234))+((r20*x11216*x11222))+((r20*x11219))+(((-1.0)*cj1*x11221))+(((-1.0)*x11224*x11229))+(((-1.0)*x11223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11235 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r20))+((gconst28*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11235.valid){
continue;
}
CheckValue<IkReal> x11236=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x11236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11235.value)+(((1.5707963267949)*(x11236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11237=IKcos(j4);
IkReal x11238=IKsin(j4);
IkReal x11239=(cj1*cj2);
IkReal x11240=(gconst29*sj3);
IkReal x11241=(gconst28*sj3);
IkReal x11242=(gconst28*r11);
IkReal x11243=((1.0)*sj2);
IkReal x11244=(cj3*gconst29);
IkReal x11245=(cj2*sj1);
IkReal x11246=(cj3*gconst28);
IkReal x11247=(gconst29*r20);
IkReal x11248=(gconst29*r00);
IkReal x11249=(sj1*x11243);
IkReal x11250=((1.0)*gconst29*r10);
IkReal x11251=(r21*x11238);
IkReal x11252=(cj3*x11238);
IkReal x11253=((1.0)*x11237);
IkReal x11254=(gconst28*x11237);
IkReal x11255=((1.0)*x11238);
IkReal x11256=(cj3*x11237);
evalcond[0]=(((r22*x11238))+(((-1.0)*x11247*x11253))+((r21*x11254)));
evalcond[1]=(((r02*x11238))+(((-1.0)*x11248*x11253))+((r01*x11254)));
evalcond[2]=((1.0)+((x11237*x11242))+((r12*x11238))+(((-1.0)*x11237*x11250)));
evalcond[3]=(((r10*x11238*x11244))+((r11*x11240))+(((-1.0)*x11242*x11252))+((r12*x11256))+((r10*x11241)));
evalcond[4]=((((-1.0)*r12*sj3*x11253))+((r11*x11244))+((r11*x11238*x11241))+((r10*x11246))+(((-1.0)*r10*x11240*x11255)));
evalcond[5]=(x11245+(((-1.0)*r02*sj3*x11253))+((cj1*sj2))+((r01*x11238*x11241))+(((-1.0)*r00*x11240*x11255))+((r01*x11244))+((r00*x11246)));
evalcond[6]=(x11239+(((-1.0)*x11249))+((r02*x11256))+((r00*x11238*x11244))+((r01*x11240))+(((-1.0)*r01*x11246*x11255))+((r00*x11241)));
evalcond[7]=(x11239+(((-1.0)*x11249))+((r20*x11246))+((x11241*x11251))+(((-1.0)*r22*sj3*x11253))+(((-1.0)*r20*x11240*x11255))+((r21*x11244)));
evalcond[8]=(((r22*x11256))+(((-1.0)*x11245))+(((-1.0)*x11246*x11251))+((r20*x11241))+(((-1.0)*cj1*x11243))+((r20*x11238*x11244))+((r21*x11240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11257=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11257);
rxp1_1=(px*r21);
rxp1_2=(r11*x11257);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11258=(r11*sj5);
IkReal x11259=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*sj3*x11259))+((sj3*x11258)));
j4eval[1]=(x11258+(((-1.0)*x11259)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11260=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11260);
rxp1_1=(px*r21);
rxp1_2=(r11*x11260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11261=(cj5*r10);
IkReal x11262=(r11*sj5);
j4eval[0]=(((cj3*x11261))+(((-1.0)*cj3*x11262)));
j4eval[1]=((((-1.0)*x11261))+x11262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11263=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11263);
rxp1_1=(px*r21);
rxp1_2=(r11*x11263);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11264=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11264);
rxp1_1=(px*r21);
rxp1_2=(r11*x11264);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11265=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11265);
rxp1_1=(px*r21);
rxp1_2=(r11*x11265);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11266=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11266.valid){
continue;
}
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11267.valid){
continue;
}
if( IKabs(((x11266.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11267.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11266.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11267.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11266.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11267.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11268=IKcos(j4);
IkReal x11269=IKsin(j4);
IkReal x11270=(cj5*r10);
IkReal x11271=(cj5*r20);
IkReal x11272=((1.0)*sj2);
IkReal x11273=((1.0)*x11268);
IkReal x11274=(sj5*x11268);
IkReal x11275=((1.0)*sj5*x11269);
evalcond[0]=(r02*x11269);
evalcond[1]=((((-1.0)*sj1*x11272))+((cj1*cj2))+((r02*x11268)));
evalcond[2]=(((r21*x11274))+(((-1.0)*x11271*x11273)));
evalcond[3]=((((-1.0)*r11*x11275))+((x11269*x11270)));
evalcond[4]=((1.0)+(((-1.0)*x11270*x11273))+((r11*x11274)));
evalcond[5]=((((-1.0)*r21*x11275))+(((-1.0)*cj2*sj1))+((x11269*x11271))+(((-1.0)*cj1*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11276=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11276.valid){
continue;
}
CheckValue<IkReal> x11277=IKPowWithIntegerCheck(r02,-1);
if(!x11277.valid){
continue;
}
if( IKabs(((x11276.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11277.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11276.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11277.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11276.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11277.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11278=IKcos(j4);
IkReal x11279=IKsin(j4);
IkReal x11280=(cj5*r10);
IkReal x11281=(cj5*r20);
IkReal x11282=((1.0)*sj2);
IkReal x11283=((1.0)*x11278);
IkReal x11284=(sj5*x11278);
IkReal x11285=((1.0)*sj5*x11279);
evalcond[0]=(r02*x11279);
evalcond[1]=(((r02*x11278))+((cj1*cj2))+(((-1.0)*sj1*x11282)));
evalcond[2]=(((r21*x11284))+(((-1.0)*x11281*x11283)));
evalcond[3]=((((-1.0)*r11*x11285))+((x11279*x11280)));
evalcond[4]=((1.0)+((r11*x11284))+(((-1.0)*x11280*x11283)));
evalcond[5]=((((-1.0)*cj1*x11282))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x11285))+((x11279*x11281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11286=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11286);
rxp1_1=(px*r21);
rxp1_2=(r11*x11286);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11287=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x11287)));
j4eval[1]=((((-1.0)*r10*x11287))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11288=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11288);
rxp1_1=(px*r21);
rxp1_2=(r11*x11288);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11289=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11289.valid){
continue;
}
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(r02,-1);
if(!x11290.valid){
continue;
}
if( IKabs(((x11289.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11290.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11289.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11290.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11289.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11290.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11291=IKcos(j4);
IkReal x11292=IKsin(j4);
IkReal x11293=((1.0)*sj1);
IkReal x11294=(r21*sj5);
IkReal x11295=(cj5*r10);
IkReal x11296=(r11*sj5);
IkReal x11297=((1.0)*cj5*r20);
IkReal x11298=((1.0)*x11291);
evalcond[0]=(r02*x11292);
evalcond[1]=((((-1.0)*x11291*x11297))+((x11291*x11294)));
evalcond[2]=((((-1.0)*r02*x11298))+((cj1*cj2))+(((-1.0)*sj2*x11293)));
evalcond[3]=((((-1.0)*x11292*x11295))+((x11292*x11296)));
evalcond[4]=((1.0)+(((-1.0)*x11295*x11298))+((x11291*x11296)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11293))+(((-1.0)*x11292*x11297))+((x11292*x11294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11299=((1.0)*cj5);
CheckValue<IkReal> x11300=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11299))),-1);
if(!x11300.valid){
continue;
}
CheckValue<IkReal> x11301=IKPowWithIntegerCheck(((((-1.0)*r10*x11299))+((r11*sj5))),-1);
if(!x11301.valid){
continue;
}
if( IKabs(((x11300.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11301.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11300.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11301.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11300.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11301.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11302=IKcos(j4);
IkReal x11303=IKsin(j4);
IkReal x11304=((1.0)*sj1);
IkReal x11305=(r21*sj5);
IkReal x11306=(cj5*r10);
IkReal x11307=(r11*sj5);
IkReal x11308=((1.0)*cj5*r20);
IkReal x11309=((1.0)*x11302);
evalcond[0]=(r02*x11303);
evalcond[1]=((((-1.0)*x11302*x11308))+((x11302*x11305)));
evalcond[2]=((((-1.0)*r02*x11309))+(((-1.0)*sj2*x11304))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11303*x11306))+((x11303*x11307)));
evalcond[4]=((1.0)+(((-1.0)*x11306*x11309))+((x11302*x11307)));
evalcond[5]=((((-1.0)*cj2*x11304))+(((-1.0)*x11303*x11308))+(((-1.0)*cj1*sj2))+((x11303*x11305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11310=((1.0)*cj5);
CheckValue<IkReal> x11311=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x11310))),-1);
if(!x11311.valid){
continue;
}
CheckValue<IkReal> x11312=IKPowWithIntegerCheck(r02,-1);
if(!x11312.valid){
continue;
}
CheckValue<IkReal> x11313=IKPowWithIntegerCheck(sj3,-1);
if(!x11313.valid){
continue;
}
if( IKabs(((x11311.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11310)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11312.value)*(x11313.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11311.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11310))))))+IKsqr(((x11312.value)*(x11313.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11311.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11310))))), ((x11312.value)*(x11313.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11314=IKcos(j4);
IkReal x11315=IKsin(j4);
IkReal x11316=(cj1*cj2);
IkReal x11317=(r21*sj5);
IkReal x11318=(cj5*sj3);
IkReal x11319=((1.0)*sj2);
IkReal x11320=(cj3*sj5);
IkReal x11321=(cj2*sj1);
IkReal x11322=(cj3*cj5);
IkReal x11323=(sj3*sj5);
IkReal x11324=(sj1*x11319);
IkReal x11325=((1.0)*x11315);
IkReal x11326=(r02*x11314);
IkReal x11327=((1.0)*cj5*x11314);
evalcond[0]=(r02*x11315);
evalcond[1]=((((-1.0)*r20*x11327))+((x11314*x11317)));
evalcond[2]=((((-1.0)*sj3*x11326))+((cj1*sj2))+x11321);
evalcond[3]=(x11316+((cj3*x11326))+(((-1.0)*x11324)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11327))+((r11*sj5*x11314)));
evalcond[5]=(((r10*x11320))+((r11*x11315*x11323))+(((-1.0)*r10*x11318*x11325))+((r11*x11322)));
evalcond[6]=(((r11*x11318))+(((-1.0)*r11*x11320*x11325))+((r10*x11323))+((r10*x11315*x11322)));
evalcond[7]=(x11316+((r21*x11322))+(((-1.0)*r20*x11318*x11325))+((sj3*x11315*x11317))+((r20*x11320))+(((-1.0)*x11324)));
evalcond[8]=(((r21*x11318))+(((-1.0)*cj3*x11317*x11325))+(((-1.0)*cj1*x11319))+((r20*x11315*x11322))+(((-1.0)*x11321))+((r20*x11323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11328=((1.0)*sj5);
IkReal x11329=(cj5*r10);
CheckValue<IkReal> x11330=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x11328))+((cj3*x11329))),-1);
if(!x11330.valid){
continue;
}
CheckValue<IkReal> x11331=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x11329))),-1);
if(!x11331.valid){
continue;
}
if( IKabs(((x11330.value)*(((((-1.0)*r10*sj3*x11328))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11331.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11330.value)*(((((-1.0)*r10*sj3*x11328))+(((-1.0)*cj5*r11*sj3))))))+IKsqr(((-1.0)*(x11331.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11330.value)*(((((-1.0)*r10*sj3*x11328))+(((-1.0)*cj5*r11*sj3))))), ((-1.0)*(x11331.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11332=IKcos(j4);
IkReal x11333=IKsin(j4);
IkReal x11334=(cj1*cj2);
IkReal x11335=(r21*sj5);
IkReal x11336=(cj5*sj3);
IkReal x11337=((1.0)*sj2);
IkReal x11338=(cj3*sj5);
IkReal x11339=(cj2*sj1);
IkReal x11340=(cj3*cj5);
IkReal x11341=(sj3*sj5);
IkReal x11342=(sj1*x11337);
IkReal x11343=((1.0)*x11333);
IkReal x11344=(r02*x11332);
IkReal x11345=((1.0)*cj5*x11332);
evalcond[0]=(r02*x11333);
evalcond[1]=(((x11332*x11335))+(((-1.0)*r20*x11345)));
evalcond[2]=(((cj1*sj2))+x11339+(((-1.0)*sj3*x11344)));
evalcond[3]=(x11334+((cj3*x11344))+(((-1.0)*x11342)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11345))+((r11*sj5*x11332)));
evalcond[5]=(((r11*x11340))+((r10*x11338))+(((-1.0)*r10*x11336*x11343))+((r11*x11333*x11341)));
evalcond[6]=(((r11*x11336))+((r10*x11341))+(((-1.0)*r11*x11338*x11343))+((r10*x11333*x11340)));
evalcond[7]=(x11334+((r20*x11338))+(((-1.0)*r20*x11336*x11343))+(((-1.0)*x11342))+((sj3*x11333*x11335))+((r21*x11340)));
evalcond[8]=(((r20*x11333*x11340))+(((-1.0)*cj3*x11335*x11343))+((r20*x11341))+(((-1.0)*cj1*x11337))+(((-1.0)*x11339))+((r21*x11336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11346=((1.0)*cj5);
IkReal x11347=(r11*sj5);
CheckValue<IkReal> x11348=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x11346))+((sj3*x11347))),-1);
if(!x11348.valid){
continue;
}
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(((((-1.0)*r10*x11346))+x11347),-1);
if(!x11349.valid){
continue;
}
if( IKabs(((x11348.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11349.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11348.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11346))))))+IKsqr(((-1.0)*(x11349.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11348.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11346))))), ((-1.0)*(x11349.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11350=IKcos(j4);
IkReal x11351=IKsin(j4);
IkReal x11352=(cj1*cj2);
IkReal x11353=(r21*sj5);
IkReal x11354=(cj5*sj3);
IkReal x11355=((1.0)*sj2);
IkReal x11356=(cj3*sj5);
IkReal x11357=(cj2*sj1);
IkReal x11358=(cj3*cj5);
IkReal x11359=(sj3*sj5);
IkReal x11360=(sj1*x11355);
IkReal x11361=((1.0)*x11351);
IkReal x11362=(r02*x11350);
IkReal x11363=((1.0)*cj5*x11350);
evalcond[0]=(r02*x11351);
evalcond[1]=((((-1.0)*r20*x11363))+((x11350*x11353)));
evalcond[2]=((((-1.0)*sj3*x11362))+((cj1*sj2))+x11357);
evalcond[3]=((((-1.0)*x11360))+((cj3*x11362))+x11352);
evalcond[4]=((1.0)+(((-1.0)*r10*x11363))+((r11*sj5*x11350)));
evalcond[5]=(((r10*x11356))+((r11*x11358))+((r11*x11351*x11359))+(((-1.0)*r10*x11354*x11361)));
evalcond[6]=(((r10*x11359))+((r11*x11354))+((r10*x11351*x11358))+(((-1.0)*r11*x11356*x11361)));
evalcond[7]=((((-1.0)*x11360))+x11352+(((-1.0)*r20*x11354*x11361))+((r20*x11356))+((sj3*x11351*x11353))+((r21*x11358)));
evalcond[8]=(((r20*x11351*x11358))+(((-1.0)*cj1*x11355))+((r20*x11359))+(((-1.0)*x11357))+((r21*x11354))+(((-1.0)*cj3*x11353*x11361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11364=cj5*cj5;
IkReal x11365=((1.0)*cj5);
IkReal x11366=(r11*sj3);
IkReal x11367=(cj3*sj5);
IkReal x11368=(r10*r21);
IkReal x11369=(cj3*r11*r21);
IkReal x11370=((1.0)*x11364);
IkReal x11371=(r10*sj3*sj5);
CheckValue<IkReal> x11372 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x11368*x11370))+(((-1.0)*r20*x11366*x11370))+(((-1.0)*r20*x11365*x11371))+((cj5*r21*sj5*x11366))+((sj3*x11368)))),IkReal(((((-1.0)*r22*x11371))+(((-1.0)*r22*x11365*x11366)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11372.valid){
continue;
}
CheckValue<IkReal> x11373=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*r20*x11364))+(((-1.0)*x11369*x11370))+x11369+(((-1.0)*r11*r20*x11365*x11367))+(((-1.0)*x11365*x11367*x11368)))),-1);
if(!x11373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11372.value)+(((1.5707963267949)*(x11373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11374=IKcos(j4);
IkReal x11375=IKsin(j4);
IkReal x11376=(cj1*cj2);
IkReal x11377=((1.0)*cj5);
IkReal x11378=(cj5*r01);
IkReal x11379=((1.0)*sj1);
IkReal x11380=(cj3*sj5);
IkReal x11381=(cj3*cj5);
IkReal x11382=(cj5*sj3);
IkReal x11383=(sj3*sj5);
IkReal x11384=(cj1*sj2);
IkReal x11385=(sj2*x11379);
IkReal x11386=(sj5*x11374);
IkReal x11387=(sj3*x11375);
IkReal x11388=((1.0)*x11375);
IkReal x11389=(cj3*x11374);
IkReal x11390=((1.0)*sj3*x11374);
evalcond[0]=(((r22*x11375))+((r21*x11386))+(((-1.0)*r20*x11374*x11377)));
evalcond[1]=(((r01*x11386))+(((-1.0)*r00*x11374*x11377))+((r02*x11375)));
evalcond[2]=((1.0)+((r11*x11386))+((r12*x11375))+(((-1.0)*r10*x11374*x11377)));
evalcond[3]=(((r11*x11382))+((r10*x11383))+((r12*x11389))+((r10*x11375*x11381))+(((-1.0)*r11*x11380*x11388)));
evalcond[4]=(((r11*x11381))+((r10*x11380))+(((-1.0)*r10*x11377*x11387))+(((-1.0)*r12*x11390))+((r11*x11375*x11383)));
evalcond[5]=(((cj2*sj1))+((cj3*x11378))+x11384+(((-1.0)*r02*x11390))+(((-1.0)*r00*x11377*x11387))+((r00*x11380))+((r01*x11375*x11383)));
evalcond[6]=(((r02*x11389))+((r00*x11375*x11381))+x11376+(((-1.0)*x11385))+(((-1.0)*r01*x11380*x11388))+((r00*x11383))+((sj3*x11378)));
evalcond[7]=((((-1.0)*r20*x11377*x11387))+((r20*x11380))+x11376+(((-1.0)*x11385))+(((-1.0)*r22*x11390))+((r21*x11381))+((r21*x11375*x11383)));
evalcond[8]=(((r20*x11375*x11381))+((r20*x11383))+(((-1.0)*r21*x11380*x11388))+((r21*x11382))+(((-1.0)*cj2*x11379))+((r22*x11389))+(((-1.0)*x11384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11391=((1.0)*cj5);
CheckValue<IkReal> x11392 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11391)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11392.valid){
continue;
}
CheckValue<IkReal> x11393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11391))+(((-1.0)*r20*sj5)))),-1);
if(!x11393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11392.value)+(((1.5707963267949)*(x11393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11394=IKcos(j4);
IkReal x11395=IKsin(j4);
IkReal x11396=(cj1*cj2);
IkReal x11397=((1.0)*cj5);
IkReal x11398=(cj5*r01);
IkReal x11399=((1.0)*sj1);
IkReal x11400=(cj3*sj5);
IkReal x11401=(cj3*cj5);
IkReal x11402=(cj5*sj3);
IkReal x11403=(sj3*sj5);
IkReal x11404=(cj1*sj2);
IkReal x11405=(sj2*x11399);
IkReal x11406=(sj5*x11394);
IkReal x11407=(sj3*x11395);
IkReal x11408=((1.0)*x11395);
IkReal x11409=(cj3*x11394);
IkReal x11410=((1.0)*sj3*x11394);
evalcond[0]=(((r21*x11406))+(((-1.0)*r20*x11394*x11397))+((r22*x11395)));
evalcond[1]=(((r02*x11395))+(((-1.0)*r00*x11394*x11397))+((r01*x11406)));
evalcond[2]=((1.0)+((r12*x11395))+((r11*x11406))+(((-1.0)*r10*x11394*x11397)));
evalcond[3]=(((r10*x11395*x11401))+((r10*x11403))+((r12*x11409))+((r11*x11402))+(((-1.0)*r11*x11400*x11408)));
evalcond[4]=((((-1.0)*r12*x11410))+((r10*x11400))+(((-1.0)*r10*x11397*x11407))+((r11*x11401))+((r11*x11395*x11403)));
evalcond[5]=(((cj2*sj1))+x11404+(((-1.0)*r00*x11397*x11407))+((r01*x11395*x11403))+((cj3*x11398))+(((-1.0)*r02*x11410))+((r00*x11400)));
evalcond[6]=(((sj3*x11398))+(((-1.0)*r01*x11400*x11408))+(((-1.0)*x11405))+x11396+((r00*x11395*x11401))+((r02*x11409))+((r00*x11403)));
evalcond[7]=(((r21*x11395*x11403))+((r21*x11401))+(((-1.0)*x11405))+x11396+((r20*x11400))+(((-1.0)*r20*x11397*x11407))+(((-1.0)*r22*x11410)));
evalcond[8]=(((r21*x11402))+((r22*x11409))+((r20*x11395*x11401))+(((-1.0)*r21*x11400*x11408))+(((-1.0)*cj2*x11399))+((r20*x11403))+(((-1.0)*x11404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11411.value)))+(x11412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11413=IKcos(j4);
IkReal x11414=IKsin(j4);
IkReal x11415=(cj1*cj2);
IkReal x11416=((1.0)*cj5);
IkReal x11417=(cj5*r01);
IkReal x11418=((1.0)*sj1);
IkReal x11419=(cj3*sj5);
IkReal x11420=(cj3*cj5);
IkReal x11421=(cj5*sj3);
IkReal x11422=(sj3*sj5);
IkReal x11423=(cj1*sj2);
IkReal x11424=(sj2*x11418);
IkReal x11425=(sj5*x11413);
IkReal x11426=(sj3*x11414);
IkReal x11427=((1.0)*x11414);
IkReal x11428=(cj3*x11413);
IkReal x11429=((1.0)*sj3*x11413);
evalcond[0]=(((r22*x11414))+((r21*x11425))+(((-1.0)*r20*x11413*x11416)));
evalcond[1]=((((-1.0)*r00*x11413*x11416))+((r01*x11425))+((r02*x11414)));
evalcond[2]=((1.0)+((r12*x11414))+((r11*x11425))+(((-1.0)*r10*x11413*x11416)));
evalcond[3]=((((-1.0)*r11*x11419*x11427))+((r10*x11422))+((r11*x11421))+((r12*x11428))+((r10*x11414*x11420)));
evalcond[4]=(((r10*x11419))+(((-1.0)*r12*x11429))+(((-1.0)*r10*x11416*x11426))+((r11*x11420))+((r11*x11414*x11422)));
evalcond[5]=(((cj2*sj1))+x11423+((cj3*x11417))+((r01*x11414*x11422))+((r00*x11419))+(((-1.0)*r02*x11429))+(((-1.0)*r00*x11416*x11426)));
evalcond[6]=(((r02*x11428))+x11415+((r00*x11422))+((r00*x11414*x11420))+(((-1.0)*x11424))+((sj3*x11417))+(((-1.0)*r01*x11419*x11427)));
evalcond[7]=(((r21*x11414*x11422))+x11415+(((-1.0)*r20*x11416*x11426))+((r21*x11420))+(((-1.0)*x11424))+((r20*x11419))+(((-1.0)*r22*x11429)));
evalcond[8]=(((r20*x11422))+((r20*x11414*x11420))+(((-1.0)*r21*x11419*x11427))+((r21*x11421))+(((-1.0)*x11423))+(((-1.0)*cj2*x11418))+((r22*x11428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11430=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11430;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11431=((1.0)*cj5);
IkReal x11432=((((-1.0)*r01*x11431))+(((-1.0)*r00*sj5)));
j4eval[0]=x11432;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x11431)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11433=cj5*cj5;
IkReal x11434=(cj3*r11*r21);
IkReal x11435=((1.0)*cj3*cj5*sj5);
IkReal x11436=(((cj3*r12*r22))+x11434+(((-1.0)*r10*r21*x11435))+((cj3*r10*r20*x11433))+(((-1.0)*x11433*x11434))+(((-1.0)*r11*r20*x11435)));
j4eval[0]=x11436;
j4eval[1]=IKsign(x11436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11437=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11437;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11438=((1.0)*cj5);
IkReal x11439=((((-1.0)*r01*x11438))+(((-1.0)*r00*sj5)));
j4eval[0]=x11439;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11438))))));
j4eval[2]=IKsign(x11439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11440=cj5*cj5;
IkReal x11441=r11*r11;
IkReal x11442=(r11*sj5);
IkReal x11443=(cj5*r10);
IkReal x11444=((r12*r12)+x11441+((x11440*(r10*r10)))+(((-1.0)*x11440*x11441))+(((-2.0)*x11442*x11443)));
j4eval[0]=x11444;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x11443))+x11442))));
j4eval[2]=IKsign(x11444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11445=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11445);
rxp1_1=(px*r21);
rxp1_2=(r11*x11445);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11446=((1.0)*cj5);
j4eval[0]=((((-1.0)*r20*x11446))+((r21*sj5)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11446)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11447=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11447);
rxp1_1=(px*r21);
rxp1_2=(r11*x11447);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11448=((1.0)*cj2);
CheckValue<IkReal> x11449=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11449.valid){
continue;
}
CheckValue<IkReal> x11450=IKPowWithIntegerCheck(r02,-1);
if(!x11450.valid){
continue;
}
if( IKabs(((x11449.value)*(((((-1.0)*cj1*x11448))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11450.value)*(((((-1.0)*sj1*x11448))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11449.value)*(((((-1.0)*cj1*x11448))+((sj1*sj2))))))+IKsqr(((x11450.value)*(((((-1.0)*sj1*x11448))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11449.value)*(((((-1.0)*cj1*x11448))+((sj1*sj2))))), ((x11450.value)*(((((-1.0)*sj1*x11448))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11451=IKcos(j4);
IkReal x11452=IKsin(j4);
IkReal x11453=((1.0)*sj1);
IkReal x11454=(r21*sj5);
IkReal x11455=(cj5*r10);
IkReal x11456=(r11*sj5);
IkReal x11457=((1.0)*cj5*r20);
IkReal x11458=((1.0)*x11451);
evalcond[0]=(r02*x11452);
evalcond[1]=(((x11451*x11454))+(((-1.0)*x11451*x11457)));
evalcond[2]=(((x11452*x11456))+(((-1.0)*x11452*x11455)));
evalcond[3]=((-1.0)+(((-1.0)*x11455*x11458))+((x11451*x11456)));
evalcond[4]=((((-1.0)*r02*x11458))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11453)));
evalcond[5]=((((-1.0)*sj2*x11453))+(((-1.0)*x11452*x11457))+((x11452*x11454))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11459=((1.0)*cj5);
CheckValue<IkReal> x11460=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11459))),-1);
if(!x11460.valid){
continue;
}
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(((((-1.0)*r10*x11459))+((r11*sj5))),-1);
if(!x11461.valid){
continue;
}
if( IKabs(((x11460.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11461.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11460.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11461.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11460.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11461.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11462=IKcos(j4);
IkReal x11463=IKsin(j4);
IkReal x11464=((1.0)*sj1);
IkReal x11465=(r21*sj5);
IkReal x11466=(cj5*r10);
IkReal x11467=(r11*sj5);
IkReal x11468=((1.0)*cj5*r20);
IkReal x11469=((1.0)*x11462);
evalcond[0]=(r02*x11463);
evalcond[1]=((((-1.0)*x11462*x11468))+((x11462*x11465)));
evalcond[2]=((((-1.0)*x11463*x11466))+((x11463*x11467)));
evalcond[3]=((-1.0)+(((-1.0)*x11466*x11469))+((x11462*x11467)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11464))+(((-1.0)*r02*x11469)));
evalcond[5]=((((-1.0)*x11463*x11468))+(((-1.0)*sj2*x11464))+((cj1*cj2))+((x11463*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11470=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11470);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11470);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11471=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x11471)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11471)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11472=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11472);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11472);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11473=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11473.valid){
continue;
}
CheckValue<IkReal> x11474=IKPowWithIntegerCheck(r22,-1);
if(!x11474.valid){
continue;
}
if( IKabs(((x11473.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11474.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11473.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11474.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11473.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11474.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11475=IKcos(j4);
IkReal x11476=IKsin(j4);
IkReal x11477=(cj5*r00);
IkReal x11478=((1.0)*sj1);
IkReal x11479=(cj5*r10);
IkReal x11480=((1.0)*x11475);
IkReal x11481=((1.0)*x11476);
IkReal x11482=(sj5*x11475);
IkReal x11483=(sj5*x11476);
evalcond[0]=(r22*x11476);
evalcond[1]=(((r01*x11482))+(((-1.0)*x11477*x11480)));
evalcond[2]=((((-1.0)*sj2*x11478))+(((-1.0)*r22*x11480))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11479*x11481))+((r11*x11483)));
evalcond[4]=((-1.0)+(((-1.0)*x11479*x11480))+((r11*x11482)));
evalcond[5]=((((-1.0)*cj2*x11478))+(((-1.0)*cj1*sj2))+((r01*x11483))+(((-1.0)*x11477*x11481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11484=((1.0)*cj5);
CheckValue<IkReal> x11485=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x11484))),-1);
if(!x11485.valid){
continue;
}
CheckValue<IkReal> x11486=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x11484))),-1);
if(!x11486.valid){
continue;
}
if( IKabs(((x11485.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11486.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11485.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11486.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11485.value)*((((cj2*sj1))+((cj1*sj2))))), x11486.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11487=IKcos(j4);
IkReal x11488=IKsin(j4);
IkReal x11489=(cj5*r00);
IkReal x11490=((1.0)*sj1);
IkReal x11491=(cj5*r10);
IkReal x11492=((1.0)*x11487);
IkReal x11493=((1.0)*x11488);
IkReal x11494=(sj5*x11487);
IkReal x11495=(sj5*x11488);
evalcond[0]=(r22*x11488);
evalcond[1]=((((-1.0)*x11489*x11492))+((r01*x11494)));
evalcond[2]=((((-1.0)*sj2*x11490))+(((-1.0)*r22*x11492))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11491*x11493))+((r11*x11495)));
evalcond[4]=((-1.0)+(((-1.0)*x11491*x11492))+((r11*x11494)));
evalcond[5]=((((-1.0)*cj2*x11490))+(((-1.0)*cj1*sj2))+(((-1.0)*x11489*x11493))+((r01*x11495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11496=cj5*cj5;
IkReal x11497=r11*r11;
IkReal x11498=(cj5*r10);
IkReal x11499=(r11*sj5);
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11497+((x11496*(r10*r10)))+(((-2.0)*x11498*x11499))+(((-1.0)*x11496*x11497)))),-1);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501 = IKatan2WithCheck(IkReal(r12),IkReal((x11499+(((-1.0)*x11498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11500.value)))+(x11501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11502=IKcos(j4);
IkReal x11503=IKsin(j4);
IkReal x11504=(cj5*r00);
IkReal x11505=(cj5*r10);
IkReal x11506=((1.0)*sj1);
IkReal x11507=(cj5*r20);
IkReal x11508=((1.0)*x11502);
IkReal x11509=((1.0)*x11503);
IkReal x11510=(sj5*x11502);
IkReal x11511=(sj5*x11503);
evalcond[0]=((((-1.0)*x11507*x11508))+((r21*x11510))+((r22*x11503)));
evalcond[1]=(((r01*x11510))+(((-1.0)*x11504*x11508))+((r02*x11503)));
evalcond[2]=((-1.0)+((r12*x11503))+(((-1.0)*x11505*x11508))+((r11*x11510)));
evalcond[3]=((((-1.0)*r12*x11508))+(((-1.0)*x11505*x11509))+((r11*x11511)));
evalcond[4]=((((-1.0)*x11507*x11509))+(((-1.0)*r22*x11508))+((cj1*cj2))+((r21*x11511))+(((-1.0)*sj2*x11506)));
evalcond[5]=(((r01*x11511))+(((-1.0)*r02*x11508))+(((-1.0)*cj2*x11506))+(((-1.0)*cj1*sj2))+(((-1.0)*x11504*x11509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11512=((1.0)*cj5);
CheckValue<IkReal> x11513 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x11512)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11513.valid){
continue;
}
CheckValue<IkReal> x11514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11512)))),-1);
if(!x11514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11513.value)+(((1.5707963267949)*(x11514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11515=IKcos(j4);
IkReal x11516=IKsin(j4);
IkReal x11517=(cj5*r00);
IkReal x11518=(cj5*r10);
IkReal x11519=((1.0)*sj1);
IkReal x11520=(cj5*r20);
IkReal x11521=((1.0)*x11515);
IkReal x11522=((1.0)*x11516);
IkReal x11523=(sj5*x11515);
IkReal x11524=(sj5*x11516);
evalcond[0]=(((r21*x11523))+((r22*x11516))+(((-1.0)*x11520*x11521)));
evalcond[1]=((((-1.0)*x11517*x11521))+((r02*x11516))+((r01*x11523)));
evalcond[2]=((-1.0)+((r11*x11523))+(((-1.0)*x11518*x11521))+((r12*x11516)));
evalcond[3]=(((r11*x11524))+(((-1.0)*x11518*x11522))+(((-1.0)*r12*x11521)));
evalcond[4]=((((-1.0)*sj2*x11519))+((r21*x11524))+(((-1.0)*r22*x11521))+(((-1.0)*x11520*x11522))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x11521))+(((-1.0)*x11517*x11522))+(((-1.0)*cj1*sj2))+((r01*x11524))+(((-1.0)*cj2*x11519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11525=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11525.valid){
continue;
}
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11525.value)))+(x11526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11527=IKcos(j4);
IkReal x11528=IKsin(j4);
IkReal x11529=(cj5*r00);
IkReal x11530=(cj5*r10);
IkReal x11531=((1.0)*sj1);
IkReal x11532=(cj5*r20);
IkReal x11533=((1.0)*x11527);
IkReal x11534=((1.0)*x11528);
IkReal x11535=(sj5*x11527);
IkReal x11536=(sj5*x11528);
evalcond[0]=(((r21*x11535))+(((-1.0)*x11532*x11533))+((r22*x11528)));
evalcond[1]=(((r01*x11535))+((r02*x11528))+(((-1.0)*x11529*x11533)));
evalcond[2]=((-1.0)+(((-1.0)*x11530*x11533))+((r12*x11528))+((r11*x11535)));
evalcond[3]=((((-1.0)*r12*x11533))+(((-1.0)*x11530*x11534))+((r11*x11536)));
evalcond[4]=((((-1.0)*sj2*x11531))+((r21*x11536))+(((-1.0)*x11532*x11534))+(((-1.0)*r22*x11533))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x11531))+(((-1.0)*cj1*sj2))+((r01*x11536))+(((-1.0)*r02*x11533))+(((-1.0)*x11529*x11534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11537=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11537;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11538=((1.0)*cj5);
IkReal x11539=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11538)));
j4eval[0]=x11539;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11538))))));
j4eval[2]=IKsign(x11539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11540=cj5*cj5;
IkReal x11541=r11*r11;
IkReal x11542=(r11*sj5);
IkReal x11543=(cj5*r10);
IkReal x11544=((r12*r12)+(((-2.0)*x11542*x11543))+x11541+(((-1.0)*x11540*x11541))+((x11540*(r10*r10))));
j4eval[0]=x11544;
j4eval[1]=((IKabs((x11542+(((-1.0)*x11543)))))+(IKabs(r12)));
j4eval[2]=IKsign(x11544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11545=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11545);
rxp1_1=(px*r21);
rxp1_2=(r11*x11545);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11546=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11546);
rxp1_1=(px*r21);
rxp1_2=(r11*x11546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11547=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11547.valid){
continue;
}
CheckValue<IkReal> x11548=IKPowWithIntegerCheck(r02,-1);
if(!x11548.valid){
continue;
}
if( IKabs(((x11547.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11548.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11547.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11548.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11547.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11548.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11549=IKcos(j4);
IkReal x11550=IKsin(j4);
IkReal x11551=((1.0)*sj1);
IkReal x11552=(sj5*x11549);
IkReal x11553=(cj5*x11550);
IkReal x11554=((1.0)*sj5*x11550);
IkReal x11555=((1.0)*cj5*x11549);
evalcond[0]=(r02*x11550);
evalcond[1]=(((r21*x11552))+(((-1.0)*r20*x11555)));
evalcond[2]=((((-1.0)*cj2*x11551))+(((-1.0)*cj1*sj2))+((r02*x11549)));
evalcond[3]=((((-1.0)*r11*x11554))+((r10*x11553)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x11555))+((r11*x11552)));
evalcond[5]=((((-1.0)*sj2*x11551))+(((-1.0)*r21*x11554))+((cj1*cj2))+((r20*x11553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11556=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11556.valid){
continue;
}
CheckValue<IkReal> x11557=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11557.valid){
continue;
}
if( IKabs(((x11556.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11557.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11556.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11557.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11556.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11557.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11558=IKcos(j4);
IkReal x11559=IKsin(j4);
IkReal x11560=((1.0)*sj1);
IkReal x11561=(sj5*x11558);
IkReal x11562=(cj5*x11559);
IkReal x11563=((1.0)*sj5*x11559);
IkReal x11564=((1.0)*cj5*x11558);
evalcond[0]=(r02*x11559);
evalcond[1]=((((-1.0)*r20*x11564))+((r21*x11561)));
evalcond[2]=(((r02*x11558))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11560)));
evalcond[3]=(((r10*x11562))+(((-1.0)*r11*x11563)));
evalcond[4]=((-1.0)+((r11*x11561))+(((-1.0)*r10*x11564)));
evalcond[5]=(((r20*x11562))+(((-1.0)*sj2*x11560))+(((-1.0)*r21*x11563))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11565=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11565);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11565);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11566=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11567=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11567.valid){
continue;
}
CheckValue<IkReal> x11568=IKPowWithIntegerCheck(r22,-1);
if(!x11568.valid){
continue;
}
if( IKabs(((x11567.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11568.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11567.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11568.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11567.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11568.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11569=IKcos(j4);
IkReal x11570=IKsin(j4);
IkReal x11571=(cj5*r00);
IkReal x11572=(cj5*r10);
IkReal x11573=((1.0)*sj2);
IkReal x11574=((1.0)*x11569);
IkReal x11575=(sj5*x11569);
IkReal x11576=((1.0)*sj5*x11570);
evalcond[0]=(r22*x11570);
evalcond[1]=(((r22*x11569))+(((-1.0)*sj1*x11573))+((cj1*cj2)));
evalcond[2]=(((r01*x11575))+(((-1.0)*x11571*x11574)));
evalcond[3]=(((x11570*x11572))+(((-1.0)*r11*x11576)));
evalcond[4]=((-1.0)+(((-1.0)*x11572*x11574))+((r11*x11575)));
evalcond[5]=((((-1.0)*r01*x11576))+(((-1.0)*cj2*sj1))+((x11570*x11571))+(((-1.0)*cj1*x11573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11577=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11577.valid){
continue;
}
CheckValue<IkReal> x11578=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11578.valid){
continue;
}
if( IKabs(((x11577.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11578.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11577.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11578.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11577.value)*((((cj2*sj1))+((cj1*sj2))))), x11578.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11579=IKcos(j4);
IkReal x11580=IKsin(j4);
IkReal x11581=(cj5*r00);
IkReal x11582=(cj5*r10);
IkReal x11583=((1.0)*sj2);
IkReal x11584=((1.0)*x11579);
IkReal x11585=(sj5*x11579);
IkReal x11586=((1.0)*sj5*x11580);
evalcond[0]=(r22*x11580);
evalcond[1]=(((cj1*cj2))+((r22*x11579))+(((-1.0)*sj1*x11583)));
evalcond[2]=(((r01*x11585))+(((-1.0)*x11581*x11584)));
evalcond[3]=(((x11580*x11582))+(((-1.0)*r11*x11586)));
evalcond[4]=((-1.0)+(((-1.0)*x11582*x11584))+((r11*x11585)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*x11586))+((x11580*x11581))+(((-1.0)*cj1*x11583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11587=cj5*cj5;
IkReal x11588=r11*r11;
IkReal x11589=(cj5*r10);
IkReal x11590=(r11*sj5);
CheckValue<IkReal> x11591 = IKatan2WithCheck(IkReal(r12),IkReal((x11590+(((-1.0)*x11589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11591.valid){
continue;
}
CheckValue<IkReal> x11592=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11588+(((-1.0)*x11587*x11588))+((x11587*(r10*r10)))+(((-2.0)*x11589*x11590)))),-1);
if(!x11592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11591.value)+(((1.5707963267949)*(x11592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11593=IKcos(j4);
IkReal x11594=IKsin(j4);
IkReal x11595=(cj5*r00);
IkReal x11596=((1.0)*sj2);
IkReal x11597=((1.0)*x11593);
IkReal x11598=(sj5*x11593);
IkReal x11599=(cj5*x11594);
IkReal x11600=((1.0)*sj5*x11594);
evalcond[0]=((((-1.0)*cj5*r20*x11597))+((r21*x11598))+((r22*x11594)));
evalcond[1]=(((r01*x11598))+(((-1.0)*x11595*x11597))+((r02*x11594)));
evalcond[2]=((((-1.0)*r11*x11600))+((r10*x11599))+((r12*x11593)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x11597))+((r11*x11598))+((r12*x11594)));
evalcond[4]=((((-1.0)*r21*x11600))+((r20*x11599))+(((-1.0)*sj1*x11596))+((r22*x11593))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r01*x11600))+(((-1.0)*cj2*sj1))+((x11594*x11595))+((r02*x11593))+(((-1.0)*cj1*x11596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11601=((1.0)*cj5);
CheckValue<IkReal> x11602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11601))+(((-1.0)*r00*sj5)))),-1);
if(!x11602.valid){
continue;
}
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11601))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11602.value)))+(x11603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11604=IKcos(j4);
IkReal x11605=IKsin(j4);
IkReal x11606=(cj5*r00);
IkReal x11607=((1.0)*sj2);
IkReal x11608=((1.0)*x11604);
IkReal x11609=(sj5*x11604);
IkReal x11610=(cj5*x11605);
IkReal x11611=((1.0)*sj5*x11605);
evalcond[0]=((((-1.0)*cj5*r20*x11608))+((r22*x11605))+((r21*x11609)));
evalcond[1]=(((r01*x11609))+((r02*x11605))+(((-1.0)*x11606*x11608)));
evalcond[2]=((((-1.0)*r11*x11611))+((r12*x11604))+((r10*x11610)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x11608))+((r11*x11609))+((r12*x11605)));
evalcond[4]=(((r22*x11604))+(((-1.0)*r21*x11611))+((cj1*cj2))+((r20*x11610))+(((-1.0)*sj1*x11607)));
evalcond[5]=((((-1.0)*cj1*x11607))+(((-1.0)*cj2*sj1))+((x11605*x11606))+((r02*x11604))+(((-1.0)*r01*x11611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11612=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11612.valid){
continue;
}
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11612.value)))+(x11613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11614=IKcos(j4);
IkReal x11615=IKsin(j4);
IkReal x11616=(cj5*r00);
IkReal x11617=((1.0)*sj2);
IkReal x11618=((1.0)*x11614);
IkReal x11619=(sj5*x11614);
IkReal x11620=(cj5*x11615);
IkReal x11621=((1.0)*sj5*x11615);
evalcond[0]=(((r21*x11619))+((r22*x11615))+(((-1.0)*cj5*r20*x11618)));
evalcond[1]=((((-1.0)*x11616*x11618))+((r02*x11615))+((r01*x11619)));
evalcond[2]=(((r12*x11614))+(((-1.0)*r11*x11621))+((r10*x11620)));
evalcond[3]=((-1.0)+((r12*x11615))+((r11*x11619))+(((-1.0)*cj5*r10*x11618)));
evalcond[4]=((((-1.0)*sj1*x11617))+((r22*x11614))+(((-1.0)*r21*x11621))+((cj1*cj2))+((r20*x11620)));
evalcond[5]=(((x11615*x11616))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11617))+((r02*x11614))+(((-1.0)*r01*x11621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11622=((-1.0)*r00);
IkReal x11624 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11624)==0){
continue;
}
IkReal x11623=pow(x11624,-0.5);
CheckValue<IkReal> x11625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11622),IKFAST_ATAN2_MAGTHRESH);
if(!x11625.valid){
continue;
}
IkReal gconst30=((-1.0)*(x11625.value));
IkReal gconst31=(r01*x11623);
IkReal gconst32=(x11622*x11623);
CheckValue<IkReal> x11626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11626.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11627=((-1.0)*r00);
IkReal x11628=x11623;
CheckValue<IkReal> x11630 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11627),IKFAST_ATAN2_MAGTHRESH);
if(!x11630.valid){
continue;
}
IkReal x11629=((-1.0)*(x11630.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11629;
IkReal gconst30=x11629;
IkReal gconst31=(r01*x11628);
IkReal gconst32=(x11627*x11628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11631=((-1.0)*r00);
IkReal x11632=x11623;
CheckValue<IkReal> x11634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11631),IKFAST_ATAN2_MAGTHRESH);
if(!x11634.valid){
continue;
}
IkReal x11633=((-1.0)*(x11634.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11633;
IkReal gconst30=x11633;
IkReal gconst31=(r01*x11632);
IkReal gconst32=(x11631*x11632);
CheckValue<IkReal> x11642=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11642.valid){
continue;
}
IkReal x11635=x11642.value;
IkReal x11636=(cj3*x11635);
IkReal x11637=(r21*x11636);
IkReal x11638=(r10*x11636);
IkReal x11639=(r11*x11636);
IkReal x11640=(r20*x11636);
IkReal x11641=(r00*r01*x11636);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x11639))+((r00*r01*r10*x11637))+((r20*x11638*(r00*r00)))+((r11*x11637*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11643=gconst31*gconst31;
IkReal x11644=gconst32*gconst32;
IkReal x11645=((1.0)*r22);
IkReal x11646=(cj3*r10);
IkReal x11647=(r11*r20);
IkReal x11648=(gconst31*gconst32);
IkReal x11649=(r10*sj3);
IkReal x11650=(cj3*r11);
IkReal x11651=(r21*x11643);
IkReal x11652=((1.0)*x11644);
CheckValue<IkReal> x11653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x11645))+((sj3*x11647*x11648))+(((-1.0)*r11*sj3*x11651))+((r21*x11648*x11649))+(((-1.0)*r20*x11649*x11652)))),-1);
if(!x11653.valid){
continue;
}
CheckValue<IkReal> x11654 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x11647*x11652))+((x11646*x11651))+((r21*x11648*x11650))+(((-1.0)*r20*x11646*x11648)))),IkReal(((((-1.0)*gconst31*x11645*x11646))+(((-1.0)*gconst32*x11645*x11650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11653.value)))+(x11654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11655=IKcos(j4);
IkReal x11656=IKsin(j4);
IkReal x11657=(gconst32*r21);
IkReal x11658=(cj3*gconst32);
IkReal x11659=(gconst31*sj3);
IkReal x11660=(sj1*sj2);
IkReal x11661=((1.0)*cj2);
IkReal x11662=(cj3*gconst31);
IkReal x11663=((1.0)*sj3);
IkReal x11664=(gconst32*sj3);
IkReal x11665=((1.0)*cj1*sj2);
IkReal x11666=(sj1*x11661);
IkReal x11667=(r00*x11656);
IkReal x11668=(r20*x11656);
IkReal x11669=(gconst31*x11655);
IkReal x11670=(r22*x11655);
IkReal x11671=(r21*x11656);
IkReal x11672=(r01*x11656);
IkReal x11673=(r12*x11655);
IkReal x11674=(r11*x11656);
IkReal x11675=(r10*x11656);
IkReal x11676=(r02*x11655);
IkReal x11677=((1.0)*gconst32*x11655);
IkReal x11678=(x11665+x11666);
evalcond[0]=(((r21*x11669))+(((-1.0)*r20*x11677))+((r22*x11656)));
evalcond[1]=(((r02*x11656))+((r01*x11669))+(((-1.0)*r00*x11677)));
evalcond[2]=((-1.0)+((r12*x11656))+(((-1.0)*r10*x11677))+((r11*x11669)));
evalcond[3]=((((-1.0)*x11662*x11674))+((x11658*x11675))+((r10*x11659))+((cj3*x11673))+((r11*x11664)));
evalcond[4]=(((r11*x11658))+(((-1.0)*x11663*x11673))+(((-1.0)*gconst32*x11663*x11675))+((x11659*x11674))+((r10*x11662)));
evalcond[5]=((((-1.0)*x11662*x11672))+x11660+(((-1.0)*cj1*x11661))+((r01*x11664))+((cj3*x11676))+((x11658*x11667))+((r00*x11659)));
evalcond[6]=(((r20*x11662))+((cj3*x11657))+(((-1.0)*x11663*x11670))+(((-1.0)*gconst32*x11663*x11668))+((x11659*x11671))+((cj1*cj2))+(((-1.0)*x11660)));
evalcond[7]=((((-1.0)*x11662*x11671))+((cj3*x11670))+((r20*x11659))+((sj3*x11657))+((x11658*x11668))+(((-1.0)*x11678)));
evalcond[8]=((((-1.0)*x11663*x11676))+((r00*x11662))+(((-1.0)*gconst32*x11663*x11667))+((x11659*x11672))+((r01*x11658))+(((-1.0)*x11678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11679=gconst31*gconst31;
IkReal x11680=gconst32*gconst32;
IkReal x11681=(r21*sj3);
IkReal x11682=(gconst31*gconst32);
IkReal x11683=((1.0)*r10);
IkReal x11684=(cj3*r21);
IkReal x11685=(r22*sj3);
IkReal x11686=((1.0)*r11);
IkReal x11687=(r20*sj3);
IkReal x11688=(cj3*r20);
CheckValue<IkReal> x11689 = IKatan2WithCheck(IkReal((((r10*x11679*x11681))+((r11*x11681*x11682))+(((-1.0)*x11680*x11686*x11687))+(((-1.0)*x11682*x11683*x11687)))),IkReal(((((-1.0)*gconst31*x11683*x11685))+(((-1.0)*gconst32*x11685*x11686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11689.valid){
continue;
}
CheckValue<IkReal> x11690=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((r11*x11679*x11684))+((r10*x11680*x11688))+(((-1.0)*x11682*x11686*x11688))+(((-1.0)*x11682*x11683*x11684)))),-1);
if(!x11690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11689.value)+(((1.5707963267949)*(x11690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11691=IKcos(j4);
IkReal x11692=IKsin(j4);
IkReal x11693=(gconst32*r21);
IkReal x11694=(cj3*gconst32);
IkReal x11695=(gconst31*sj3);
IkReal x11696=(sj1*sj2);
IkReal x11697=((1.0)*cj2);
IkReal x11698=(cj3*gconst31);
IkReal x11699=((1.0)*sj3);
IkReal x11700=(gconst32*sj3);
IkReal x11701=((1.0)*cj1*sj2);
IkReal x11702=(sj1*x11697);
IkReal x11703=(r00*x11692);
IkReal x11704=(r20*x11692);
IkReal x11705=(gconst31*x11691);
IkReal x11706=(r22*x11691);
IkReal x11707=(r21*x11692);
IkReal x11708=(r01*x11692);
IkReal x11709=(r12*x11691);
IkReal x11710=(r11*x11692);
IkReal x11711=(r10*x11692);
IkReal x11712=(r02*x11691);
IkReal x11713=((1.0)*gconst32*x11691);
IkReal x11714=(x11702+x11701);
evalcond[0]=((((-1.0)*r20*x11713))+((r21*x11705))+((r22*x11692)));
evalcond[1]=(((r01*x11705))+(((-1.0)*r00*x11713))+((r02*x11692)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11713))+((r12*x11692))+((r11*x11705)));
evalcond[3]=(((x11694*x11711))+(((-1.0)*x11698*x11710))+((cj3*x11709))+((r10*x11695))+((r11*x11700)));
evalcond[4]=(((r10*x11698))+((r11*x11694))+(((-1.0)*x11699*x11709))+((x11695*x11710))+(((-1.0)*gconst32*x11699*x11711)));
evalcond[5]=(x11696+((r01*x11700))+((r00*x11695))+(((-1.0)*cj1*x11697))+(((-1.0)*x11698*x11708))+((cj3*x11712))+((x11694*x11703)));
evalcond[6]=((((-1.0)*gconst32*x11699*x11704))+((r20*x11698))+(((-1.0)*x11696))+((cj1*cj2))+(((-1.0)*x11699*x11706))+((cj3*x11693))+((x11695*x11707)));
evalcond[7]=((((-1.0)*x11714))+((sj3*x11693))+((r20*x11695))+((cj3*x11706))+(((-1.0)*x11698*x11707))+((x11694*x11704)));
evalcond[8]=((((-1.0)*x11714))+(((-1.0)*gconst32*x11699*x11703))+(((-1.0)*x11699*x11712))+((r01*x11694))+((r00*x11698))+((x11695*x11708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11715=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x11715.valid){
continue;
}
CheckValue<IkReal> x11716 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11715.value)))+(x11716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11717=IKcos(j4);
IkReal x11718=IKsin(j4);
IkReal x11719=(gconst32*r21);
IkReal x11720=(cj3*gconst32);
IkReal x11721=(gconst31*sj3);
IkReal x11722=(sj1*sj2);
IkReal x11723=((1.0)*cj2);
IkReal x11724=(cj3*gconst31);
IkReal x11725=((1.0)*sj3);
IkReal x11726=(gconst32*sj3);
IkReal x11727=((1.0)*cj1*sj2);
IkReal x11728=(sj1*x11723);
IkReal x11729=(r00*x11718);
IkReal x11730=(r20*x11718);
IkReal x11731=(gconst31*x11717);
IkReal x11732=(r22*x11717);
IkReal x11733=(r21*x11718);
IkReal x11734=(r01*x11718);
IkReal x11735=(r12*x11717);
IkReal x11736=(r11*x11718);
IkReal x11737=(r10*x11718);
IkReal x11738=(r02*x11717);
IkReal x11739=((1.0)*gconst32*x11717);
IkReal x11740=(x11727+x11728);
evalcond[0]=((((-1.0)*r20*x11739))+((r21*x11731))+((r22*x11718)));
evalcond[1]=(((r01*x11731))+(((-1.0)*r00*x11739))+((r02*x11718)));
evalcond[2]=((-1.0)+((r11*x11731))+(((-1.0)*r10*x11739))+((r12*x11718)));
evalcond[3]=((((-1.0)*x11724*x11736))+((x11720*x11737))+((r10*x11721))+((cj3*x11735))+((r11*x11726)));
evalcond[4]=((((-1.0)*gconst32*x11725*x11737))+((r10*x11724))+((x11721*x11736))+(((-1.0)*x11725*x11735))+((r11*x11720)));
evalcond[5]=(x11722+((r00*x11721))+((r01*x11726))+(((-1.0)*x11724*x11734))+(((-1.0)*cj1*x11723))+((x11720*x11729))+((cj3*x11738)));
evalcond[6]=(((r20*x11724))+(((-1.0)*x11722))+(((-1.0)*gconst32*x11725*x11730))+((cj3*x11719))+((x11721*x11733))+((cj1*cj2))+(((-1.0)*x11725*x11732)));
evalcond[7]=((((-1.0)*x11724*x11733))+(((-1.0)*x11740))+((r20*x11721))+((x11720*x11730))+((cj3*x11732))+((sj3*x11719)));
evalcond[8]=(((r00*x11724))+((r01*x11720))+(((-1.0)*x11740))+(((-1.0)*gconst32*x11725*x11729))+((x11721*x11734))+(((-1.0)*x11725*x11738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11741=((-1.0)*r01);
IkReal x11743 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11743)==0){
continue;
}
IkReal x11742=pow(x11743,-0.5);
CheckValue<IkReal> x11744 = IKatan2WithCheck(IkReal(x11741),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11744.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x11744.value))));
IkReal gconst34=(x11741*x11742);
IkReal gconst35=((1.0)*r00*x11742);
CheckValue<IkReal> x11745 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11746=((-1.0)*r01);
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal(x11746),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
IkReal x11747=((1.0)*(x11749.value));
IkReal x11748=x11742;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11747)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11747)));
IkReal gconst34=(x11746*x11748);
IkReal gconst35=((1.0)*r00*x11748);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11750=((-1.0)*r01);
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal(x11750),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
IkReal x11751=((1.0)*(x11753.value));
IkReal x11752=x11742;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11751)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11751)));
IkReal gconst34=(x11750*x11752);
IkReal gconst35=((1.0)*r00*x11752);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11754=gconst35*gconst35;
IkReal x11755=gconst34*gconst34;
IkReal x11756=(r22*sj3);
IkReal x11757=(cj3*r20);
IkReal x11758=(r11*r21);
IkReal x11759=(r10*r21);
IkReal x11760=((1.0)*r10);
IkReal x11761=((1.0)*gconst35*r11);
IkReal x11762=(gconst34*gconst35*sj3);
CheckValue<IkReal> x11763 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11760*x11762))+(((-1.0)*r11*r20*sj3*x11754))+((x11758*x11762))+((sj3*x11755*x11759)))),IkReal(((((-1.0)*gconst34*x11756*x11760))+(((-1.0)*x11756*x11761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11763.valid){
continue;
}
CheckValue<IkReal> x11764=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*cj3*gconst34*gconst35*x11759))+(((-1.0)*gconst34*x11757*x11761))+((r10*x11754*x11757))+((cj3*x11755*x11758)))),-1);
if(!x11764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11763.value)+(((1.5707963267949)*(x11764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11765=IKcos(j4);
IkReal x11766=IKsin(j4);
IkReal x11767=((1.0)*cj1);
IkReal x11768=(gconst35*r10);
IkReal x11769=(cj3*gconst35);
IkReal x11770=(sj1*sj2);
IkReal x11771=(cj3*gconst34);
IkReal x11772=(gconst35*sj3);
IkReal x11773=(gconst34*sj3);
IkReal x11774=(sj2*x11767);
IkReal x11775=((1.0)*cj2*sj1);
IkReal x11776=((1.0)*x11765);
IkReal x11777=(gconst34*x11765);
IkReal x11778=(r20*x11766);
IkReal x11779=(cj3*x11765);
IkReal x11780=((1.0)*x11766);
IkReal x11781=(x11766*x11773);
IkReal x11782=(x11775+x11774);
evalcond[0]=(((r22*x11766))+((r21*x11777))+(((-1.0)*gconst35*r20*x11776)));
evalcond[1]=(((r02*x11766))+((r01*x11777))+(((-1.0)*gconst35*r00*x11776)));
evalcond[2]=((-1.0)+(((-1.0)*x11768*x11776))+((r12*x11766))+((r11*x11777)));
evalcond[3]=(((r10*x11773))+((r12*x11779))+((cj3*x11766*x11768))+((r11*x11772))+(((-1.0)*r11*x11771*x11780)));
evalcond[4]=(((r11*x11781))+((r11*x11769))+((r10*x11771))+(((-1.0)*r12*sj3*x11776))+(((-1.0)*sj3*x11768*x11780)));
evalcond[5]=(x11770+(((-1.0)*cj2*x11767))+((r02*x11779))+((r00*x11766*x11769))+(((-1.0)*r01*x11771*x11780))+((r01*x11772))+((r00*x11773)));
evalcond[6]=((((-1.0)*x11772*x11778))+((r21*x11781))+((r20*x11771))+(((-1.0)*x11770))+(((-1.0)*r22*sj3*x11776))+((cj1*cj2))+((r21*x11769)));
evalcond[7]=(((r20*x11773))+(((-1.0)*r21*x11771*x11780))+((x11769*x11778))+((r21*x11772))+((r22*x11779))+(((-1.0)*x11782)));
evalcond[8]=((((-1.0)*r02*sj3*x11776))+(((-1.0)*r00*x11772*x11780))+((r00*x11771))+((r01*x11769))+(((-1.0)*x11782))+((r01*x11781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11783=((1.0)*gconst35);
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11783))+((gconst34*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
CheckValue<IkReal> x11785=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00))+(((-1.0)*r01*x11783)))),-1);
if(!x11785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11784.value)+(((1.5707963267949)*(x11785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11786=IKcos(j4);
IkReal x11787=IKsin(j4);
IkReal x11788=((1.0)*cj1);
IkReal x11789=(gconst35*r10);
IkReal x11790=(cj3*gconst35);
IkReal x11791=(sj1*sj2);
IkReal x11792=(cj3*gconst34);
IkReal x11793=(gconst35*sj3);
IkReal x11794=(gconst34*sj3);
IkReal x11795=(sj2*x11788);
IkReal x11796=((1.0)*cj2*sj1);
IkReal x11797=((1.0)*x11786);
IkReal x11798=(gconst34*x11786);
IkReal x11799=(r20*x11787);
IkReal x11800=(cj3*x11786);
IkReal x11801=((1.0)*x11787);
IkReal x11802=(x11787*x11794);
IkReal x11803=(x11795+x11796);
evalcond[0]=(((r22*x11787))+(((-1.0)*gconst35*r20*x11797))+((r21*x11798)));
evalcond[1]=((((-1.0)*gconst35*r00*x11797))+((r02*x11787))+((r01*x11798)));
evalcond[2]=((-1.0)+((r12*x11787))+((r11*x11798))+(((-1.0)*x11789*x11797)));
evalcond[3]=(((r11*x11793))+((r10*x11794))+((cj3*x11787*x11789))+((r12*x11800))+(((-1.0)*r11*x11792*x11801)));
evalcond[4]=((((-1.0)*sj3*x11789*x11801))+((r11*x11790))+((r10*x11792))+((r11*x11802))+(((-1.0)*r12*sj3*x11797)));
evalcond[5]=(x11791+((r00*x11787*x11790))+((r02*x11800))+(((-1.0)*r01*x11792*x11801))+(((-1.0)*cj2*x11788))+((r01*x11793))+((r00*x11794)));
evalcond[6]=(((r21*x11802))+(((-1.0)*x11791))+((r20*x11792))+(((-1.0)*r22*sj3*x11797))+((cj1*cj2))+((r21*x11790))+(((-1.0)*x11793*x11799)));
evalcond[7]=(((r20*x11794))+((r22*x11800))+((x11790*x11799))+(((-1.0)*x11803))+(((-1.0)*r21*x11792*x11801))+((r21*x11793)));
evalcond[8]=((((-1.0)*r02*sj3*x11797))+(((-1.0)*r00*x11793*x11801))+(((-1.0)*x11803))+((r01*x11790))+((r01*x11802))+((r00*x11792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r00))+((gconst34*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
CheckValue<IkReal> x11805=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x11805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11804.value)+(((1.5707963267949)*(x11805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11806=IKcos(j4);
IkReal x11807=IKsin(j4);
IkReal x11808=((1.0)*cj1);
IkReal x11809=(gconst35*r10);
IkReal x11810=(cj3*gconst35);
IkReal x11811=(sj1*sj2);
IkReal x11812=(cj3*gconst34);
IkReal x11813=(gconst35*sj3);
IkReal x11814=(gconst34*sj3);
IkReal x11815=(sj2*x11808);
IkReal x11816=((1.0)*cj2*sj1);
IkReal x11817=((1.0)*x11806);
IkReal x11818=(gconst34*x11806);
IkReal x11819=(r20*x11807);
IkReal x11820=(cj3*x11806);
IkReal x11821=((1.0)*x11807);
IkReal x11822=(x11807*x11814);
IkReal x11823=(x11816+x11815);
evalcond[0]=(((r22*x11807))+((r21*x11818))+(((-1.0)*gconst35*r20*x11817)));
evalcond[1]=(((r01*x11818))+(((-1.0)*gconst35*r00*x11817))+((r02*x11807)));
evalcond[2]=((-1.0)+(((-1.0)*x11809*x11817))+((r12*x11807))+((r11*x11818)));
evalcond[3]=(((cj3*x11807*x11809))+(((-1.0)*r11*x11812*x11821))+((r12*x11820))+((r10*x11814))+((r11*x11813)));
evalcond[4]=(((r10*x11812))+((r11*x11822))+(((-1.0)*r12*sj3*x11817))+((r11*x11810))+(((-1.0)*sj3*x11809*x11821)));
evalcond[5]=(((r00*x11807*x11810))+((r01*x11813))+((r00*x11814))+((r02*x11820))+(((-1.0)*cj2*x11808))+(((-1.0)*r01*x11812*x11821))+x11811);
evalcond[6]=((((-1.0)*r22*sj3*x11817))+(((-1.0)*x11811))+((r21*x11810))+(((-1.0)*x11813*x11819))+((cj1*cj2))+((r20*x11812))+((r21*x11822)));
evalcond[7]=((((-1.0)*r21*x11812*x11821))+((r21*x11813))+((r22*x11820))+(((-1.0)*x11823))+((r20*x11814))+((x11810*x11819)));
evalcond[8]=(((r01*x11810))+(((-1.0)*r00*x11813*x11821))+((r00*x11812))+(((-1.0)*x11823))+((r01*x11822))+(((-1.0)*r02*sj3*x11817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11825 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11825)==0){
continue;
}
IkReal x11824=pow(x11825,-0.5);
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal gconst36=((-1.0)*(x11826.value));
IkReal gconst37=((-1.0)*r21*x11824);
IkReal gconst38=(r20*x11824);
CheckValue<IkReal> x11827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11827.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11827.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
IkReal x11828=((-1.0)*(x11830.value));
IkReal x11829=x11824;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11828;
IkReal gconst36=x11828;
IkReal gconst37=((-1.0)*r21*x11829);
IkReal gconst38=(r20*x11829);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((-1.0)*(x11833.value));
IkReal x11832=x11824;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11831;
IkReal gconst36=x11831;
IkReal gconst37=((-1.0)*r21*x11832);
IkReal gconst38=(r20*x11832);
CheckValue<IkReal> x11841=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x11841.valid){
continue;
}
IkReal x11834=x11841.value;
IkReal x11835=(cj3*x11834);
IkReal x11836=(r11*x11835);
IkReal x11837=(r01*x11835);
IkReal x11838=(r00*x11835);
IkReal x11839=(r10*x11835);
IkReal x11840=(r20*r21*x11835);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x11836*(r21*r21)))+((r10*x11838*(r20*r20)))+((r00*r20*r21*x11836))+((r10*r20*r21*x11837))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11842=gconst37*gconst37;
IkReal x11843=gconst38*gconst38;
IkReal x11844=(r01*r10);
IkReal x11845=(cj3*r11);
IkReal x11846=((1.0)*r02);
IkReal x11847=(gconst37*gconst38);
IkReal x11848=(r11*sj3);
IkReal x11849=(cj3*r10);
IkReal x11850=((1.0)*r00*x11843);
CheckValue<IkReal> x11851 = IKatan2WithCheck(IkReal((((r01*x11845*x11847))+(((-1.0)*x11845*x11850))+((cj3*x11842*x11844))+(((-1.0)*r00*x11847*x11849)))),IkReal(((((-1.0)*gconst37*x11846*x11849))+(((-1.0)*gconst38*x11845*x11846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11851.valid){
continue;
}
CheckValue<IkReal> x11852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x11846))+(((-1.0)*r01*x11842*x11848))+(((-1.0)*r10*sj3*x11850))+((r00*x11847*x11848))+((sj3*x11844*x11847)))),-1);
if(!x11852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11851.value)+(((1.5707963267949)*(x11852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11853=IKcos(j4);
IkReal x11854=IKsin(j4);
IkReal x11855=(gconst37*r11);
IkReal x11856=(gconst38*r21);
IkReal x11857=((1.0)*gconst38);
IkReal x11858=(cj3*gconst37);
IkReal x11859=(gconst37*r21);
IkReal x11860=(sj1*sj2);
IkReal x11861=((1.0)*cj1);
IkReal x11862=(gconst37*r01);
IkReal x11863=(gconst38*r01);
IkReal x11864=(gconst38*r11);
IkReal x11865=(gconst37*sj3);
IkReal x11866=(sj2*x11861);
IkReal x11867=((1.0)*cj2*sj1);
IkReal x11868=(sj3*x11854);
IkReal x11869=((1.0)*x11854);
IkReal x11870=(cj3*x11853);
IkReal x11871=((1.0)*sj3*x11853);
IkReal x11872=(cj3*gconst38*x11854);
IkReal x11873=(x11867+x11866);
evalcond[0]=((((-1.0)*r20*x11853*x11857))+((x11853*x11859))+((r22*x11854)));
evalcond[1]=((((-1.0)*r00*x11853*x11857))+((x11853*x11862))+((r02*x11854)));
evalcond[2]=((-1.0)+((x11853*x11855))+((r12*x11854))+(((-1.0)*r10*x11853*x11857)));
evalcond[3]=(((sj3*x11864))+(((-1.0)*cj3*x11855*x11869))+((r12*x11870))+((r10*x11865))+((r10*x11872)));
evalcond[4]=((((-1.0)*r10*x11857*x11868))+((cj3*x11864))+(((-1.0)*r12*x11871))+((x11855*x11868))+((r10*x11858)));
evalcond[5]=(((sj3*x11863))+((r00*x11865))+((r00*x11872))+(((-1.0)*r01*x11858*x11869))+(((-1.0)*cj2*x11861))+x11860+((r02*x11870)));
evalcond[6]=((((-1.0)*r22*x11871))+((r20*x11858))+(((-1.0)*x11860))+((x11859*x11868))+(((-1.0)*r20*x11857*x11868))+((cj3*x11856))+((cj1*cj2)));
evalcond[7]=((((-1.0)*x11873))+((r20*x11872))+((r20*x11865))+(((-1.0)*r21*x11858*x11869))+((r22*x11870))+((sj3*x11856)));
evalcond[8]=((((-1.0)*x11873))+(((-1.0)*r00*x11857*x11868))+((x11862*x11868))+((r00*x11858))+((cj3*x11863))+(((-1.0)*r02*x11871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11874=gconst37*gconst37;
IkReal x11875=gconst38*gconst38;
IkReal x11876=((1.0)*r02);
IkReal x11877=(cj3*r10);
IkReal x11878=(cj3*r11);
IkReal x11879=(gconst37*r01);
IkReal x11880=((1.0)*gconst38);
IkReal x11881=(gconst37*r00);
IkReal x11882=(r10*sj3);
IkReal x11883=(gconst38*r11*sj3);
IkReal x11884=(r00*x11875);
IkReal x11885=(r01*x11874);
CheckValue<IkReal> x11886=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x11877*x11884))+(((-1.0)*x11877*x11879*x11880))+(((-1.0)*x11878*x11880*x11881))+((x11878*x11885)))),-1);
if(!x11886.valid){
continue;
}
CheckValue<IkReal> x11887 = IKatan2WithCheck(IkReal((((x11882*x11885))+(((-1.0)*r11*sj3*x11884))+(((-1.0)*x11880*x11881*x11882))+((x11879*x11883)))),IkReal(((((-1.0)*gconst37*x11876*x11882))+(((-1.0)*x11876*x11883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11886.value)))+(x11887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11888=IKcos(j4);
IkReal x11889=IKsin(j4);
IkReal x11890=(gconst37*r11);
IkReal x11891=(gconst38*r21);
IkReal x11892=((1.0)*gconst38);
IkReal x11893=(cj3*gconst37);
IkReal x11894=(gconst37*r21);
IkReal x11895=(sj1*sj2);
IkReal x11896=((1.0)*cj1);
IkReal x11897=(gconst37*r01);
IkReal x11898=(gconst38*r01);
IkReal x11899=(gconst38*r11);
IkReal x11900=(gconst37*sj3);
IkReal x11901=(sj2*x11896);
IkReal x11902=((1.0)*cj2*sj1);
IkReal x11903=(sj3*x11889);
IkReal x11904=((1.0)*x11889);
IkReal x11905=(cj3*x11888);
IkReal x11906=((1.0)*sj3*x11888);
IkReal x11907=(cj3*gconst38*x11889);
IkReal x11908=(x11901+x11902);
evalcond[0]=(((x11888*x11894))+((r22*x11889))+(((-1.0)*r20*x11888*x11892)));
evalcond[1]=(((x11888*x11897))+(((-1.0)*r00*x11888*x11892))+((r02*x11889)));
evalcond[2]=((-1.0)+((x11888*x11890))+(((-1.0)*r10*x11888*x11892))+((r12*x11889)));
evalcond[3]=(((r12*x11905))+(((-1.0)*cj3*x11890*x11904))+((r10*x11907))+((r10*x11900))+((sj3*x11899)));
evalcond[4]=((((-1.0)*r12*x11906))+((r10*x11893))+((x11890*x11903))+(((-1.0)*r10*x11892*x11903))+((cj3*x11899)));
evalcond[5]=(((r00*x11900))+((r00*x11907))+(((-1.0)*cj2*x11896))+(((-1.0)*r01*x11893*x11904))+((r02*x11905))+((sj3*x11898))+x11895);
evalcond[6]=(((x11894*x11903))+(((-1.0)*x11895))+(((-1.0)*r22*x11906))+((cj1*cj2))+((r20*x11893))+(((-1.0)*r20*x11892*x11903))+((cj3*x11891)));
evalcond[7]=(((r22*x11905))+(((-1.0)*x11908))+(((-1.0)*r21*x11893*x11904))+((sj3*x11891))+((r20*x11907))+((r20*x11900)));
evalcond[8]=((((-1.0)*r02*x11906))+((x11897*x11903))+((r00*x11893))+(((-1.0)*x11908))+(((-1.0)*r00*x11892*x11903))+((cj3*x11898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11909=((1.0)*gconst38);
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11909))+(((-1.0)*gconst37*r00)))),-1);
if(!x11910.valid){
continue;
}
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x11909)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11910.value)))+(x11911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11912=IKcos(j4);
IkReal x11913=IKsin(j4);
IkReal x11914=(gconst37*r11);
IkReal x11915=(gconst38*r21);
IkReal x11916=((1.0)*gconst38);
IkReal x11917=(cj3*gconst37);
IkReal x11918=(gconst37*r21);
IkReal x11919=(sj1*sj2);
IkReal x11920=((1.0)*cj1);
IkReal x11921=(gconst37*r01);
IkReal x11922=(gconst38*r01);
IkReal x11923=(gconst38*r11);
IkReal x11924=(gconst37*sj3);
IkReal x11925=(sj2*x11920);
IkReal x11926=((1.0)*cj2*sj1);
IkReal x11927=(sj3*x11913);
IkReal x11928=((1.0)*x11913);
IkReal x11929=(cj3*x11912);
IkReal x11930=((1.0)*sj3*x11912);
IkReal x11931=(cj3*gconst38*x11913);
IkReal x11932=(x11926+x11925);
evalcond[0]=((((-1.0)*r20*x11912*x11916))+((r22*x11913))+((x11912*x11918)));
evalcond[1]=((((-1.0)*r00*x11912*x11916))+((x11912*x11921))+((r02*x11913)));
evalcond[2]=((-1.0)+((x11912*x11914))+(((-1.0)*r10*x11912*x11916))+((r12*x11913)));
evalcond[3]=(((r10*x11931))+((r10*x11924))+((r12*x11929))+(((-1.0)*cj3*x11914*x11928))+((sj3*x11923)));
evalcond[4]=((((-1.0)*r10*x11916*x11927))+((r10*x11917))+((cj3*x11923))+(((-1.0)*r12*x11930))+((x11914*x11927)));
evalcond[5]=(x11919+((r02*x11929))+(((-1.0)*r01*x11917*x11928))+((r00*x11931))+(((-1.0)*cj2*x11920))+((r00*x11924))+((sj3*x11922)));
evalcond[6]=(((cj3*x11915))+(((-1.0)*x11919))+((x11918*x11927))+(((-1.0)*r22*x11930))+((cj1*cj2))+(((-1.0)*r20*x11916*x11927))+((r20*x11917)));
evalcond[7]=(((r20*x11924))+(((-1.0)*x11932))+((r20*x11931))+(((-1.0)*r21*x11917*x11928))+((sj3*x11915))+((r22*x11929)));
evalcond[8]=(((r00*x11917))+(((-1.0)*r00*x11916*x11927))+(((-1.0)*x11932))+(((-1.0)*r02*x11930))+((x11921*x11927))+((cj3*x11922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11934 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11934)==0){
continue;
}
IkReal x11933=pow(x11934,-0.5);
CheckValue<IkReal> x11935 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11935.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x11935.value))));
IkReal gconst40=((1.0)*r21*x11933);
IkReal gconst41=((-1.0)*r20*x11933);
CheckValue<IkReal> x11936 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11936.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11936.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11939 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11939.valid){
continue;
}
IkReal x11937=((1.0)*(x11939.value));
IkReal x11938=x11933;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11937)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11937)));
IkReal gconst40=((1.0)*r21*x11938);
IkReal gconst41=((-1.0)*r20*x11938);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11942 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11942.valid){
continue;
}
IkReal x11940=((1.0)*(x11942.value));
IkReal x11941=x11933;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11940)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11940)));
IkReal gconst40=((1.0)*r21*x11941);
IkReal gconst41=((-1.0)*r20*x11941);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11945 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11945.valid){
continue;
}
IkReal x11943=((1.0)*(x11945.value));
IkReal x11944=x11933;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11943)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11943)));
IkReal gconst40=((1.0)*r21*x11944);
IkReal gconst41=((-1.0)*r20*x11944);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11946=gconst40*gconst40;
IkReal x11947=gconst41*gconst41;
IkReal x11948=(r11*r21);
IkReal x11949=(cj3*r10);
IkReal x11950=((1.0)*r20);
IkReal x11951=(r10*sj3);
IkReal x11952=(gconst40*gconst41);
IkReal x11953=((1.0)*r11*sj3);
IkReal x11954=(r20*x11947);
IkReal x11955=(sj3*x11952);
CheckValue<IkReal> x11956=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x11946*x11948))+((x11949*x11954))+(((-1.0)*cj3*r11*x11950*x11952))+(((-1.0)*r21*x11949*x11952)))),-1);
if(!x11956.valid){
continue;
}
CheckValue<IkReal> x11957 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj3*x11947*x11950))+((r21*x11946*x11951))+((x11948*x11955))+(((-1.0)*x11950*x11951*x11952)))),IkReal(((((-1.0)*gconst40*r22*x11951))+(((-1.0)*gconst41*r22*x11953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11956.value)))+(x11957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11958=IKcos(j4);
IkReal x11959=IKsin(j4);
IkReal x11960=(gconst40*sj3);
IkReal x11961=(gconst40*r11);
IkReal x11962=(gconst41*r11);
IkReal x11963=(cj3*gconst40);
IkReal x11964=(sj1*sj2);
IkReal x11965=(gconst41*sj3);
IkReal x11966=((1.0)*cj1);
IkReal x11967=(cj3*gconst41);
IkReal x11968=(sj2*x11966);
IkReal x11969=((1.0)*cj2*sj1);
IkReal x11970=(r21*x11959);
IkReal x11971=((1.0)*x11959);
IkReal x11972=(gconst40*x11958);
IkReal x11973=(cj3*x11958);
IkReal x11974=((1.0)*gconst41*x11958);
IkReal x11975=((1.0)*sj3*x11958);
IkReal x11976=(x11968+x11969);
evalcond[0]=((((-1.0)*r20*x11974))+((r22*x11959))+((r21*x11972)));
evalcond[1]=(((r01*x11972))+((r02*x11959))+(((-1.0)*r00*x11974)));
evalcond[2]=((-1.0)+((r12*x11959))+(((-1.0)*r10*x11974))+((x11958*x11961)));
evalcond[3]=(((r10*x11959*x11967))+((sj3*x11962))+((r12*x11973))+((r10*x11960))+(((-1.0)*cj3*x11961*x11971)));
evalcond[4]=((((-1.0)*r12*x11975))+((cj3*x11962))+((r10*x11963))+((r11*x11959*x11960))+(((-1.0)*r10*x11965*x11971)));
evalcond[5]=(x11964+((r01*x11965))+((r00*x11960))+((r02*x11973))+(((-1.0)*r01*x11963*x11971))+(((-1.0)*cj2*x11966))+((r00*x11959*x11967)));
evalcond[6]=((((-1.0)*x11964))+(((-1.0)*r20*x11965*x11971))+((r20*x11963))+(((-1.0)*r22*x11975))+((x11960*x11970))+((cj1*cj2))+((r21*x11967)));
evalcond[7]=(((r20*x11959*x11967))+((r20*x11960))+(((-1.0)*x11976))+(((-1.0)*x11963*x11970))+((r21*x11965))+((r22*x11973)));
evalcond[8]=(((r01*x11967))+((r00*x11963))+(((-1.0)*r00*x11965*x11971))+(((-1.0)*x11976))+((r01*x11959*x11960))+(((-1.0)*r02*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11977=((1.0)*gconst41);
CheckValue<IkReal> x11978=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r00))+(((-1.0)*r01*x11977)))),-1);
if(!x11978.valid){
continue;
}
CheckValue<IkReal> x11979 = IKatan2WithCheck(IkReal((((gconst40*r21))+(((-1.0)*r20*x11977)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11978.value)))+(x11979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11980=IKcos(j4);
IkReal x11981=IKsin(j4);
IkReal x11982=(gconst40*sj3);
IkReal x11983=(gconst40*r11);
IkReal x11984=(gconst41*r11);
IkReal x11985=(cj3*gconst40);
IkReal x11986=(sj1*sj2);
IkReal x11987=(gconst41*sj3);
IkReal x11988=((1.0)*cj1);
IkReal x11989=(cj3*gconst41);
IkReal x11990=(sj2*x11988);
IkReal x11991=((1.0)*cj2*sj1);
IkReal x11992=(r21*x11981);
IkReal x11993=((1.0)*x11981);
IkReal x11994=(gconst40*x11980);
IkReal x11995=(cj3*x11980);
IkReal x11996=((1.0)*gconst41*x11980);
IkReal x11997=((1.0)*sj3*x11980);
IkReal x11998=(x11991+x11990);
evalcond[0]=(((r21*x11994))+(((-1.0)*r20*x11996))+((r22*x11981)));
evalcond[1]=(((r02*x11981))+((r01*x11994))+(((-1.0)*r00*x11996)));
evalcond[2]=((-1.0)+((x11980*x11983))+((r12*x11981))+(((-1.0)*r10*x11996)));
evalcond[3]=(((sj3*x11984))+((r10*x11982))+((r10*x11981*x11989))+(((-1.0)*cj3*x11983*x11993))+((r12*x11995)));
evalcond[4]=(((r10*x11985))+((r11*x11981*x11982))+(((-1.0)*r12*x11997))+((cj3*x11984))+(((-1.0)*r10*x11987*x11993)));
evalcond[5]=(x11986+(((-1.0)*cj2*x11988))+(((-1.0)*r01*x11985*x11993))+((r00*x11982))+((r02*x11995))+((r01*x11987))+((r00*x11981*x11989)));
evalcond[6]=(((r21*x11989))+((r20*x11985))+((x11982*x11992))+(((-1.0)*x11986))+((cj1*cj2))+(((-1.0)*r20*x11987*x11993))+(((-1.0)*r22*x11997)));
evalcond[7]=(((r21*x11987))+((r22*x11995))+(((-1.0)*x11985*x11992))+((r20*x11982))+((r20*x11981*x11989))+(((-1.0)*x11998)));
evalcond[8]=((((-1.0)*r02*x11997))+(((-1.0)*r00*x11987*x11993))+((r00*x11985))+((r01*x11981*x11982))+((r01*x11989))+(((-1.0)*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11999=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x11999.valid){
continue;
}
CheckValue<IkReal> x12000 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r00))+((gconst40*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11999.value)))+(x12000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12001=IKcos(j4);
IkReal x12002=IKsin(j4);
IkReal x12003=(gconst40*sj3);
IkReal x12004=(gconst40*r11);
IkReal x12005=(gconst41*r11);
IkReal x12006=(cj3*gconst40);
IkReal x12007=(sj1*sj2);
IkReal x12008=(gconst41*sj3);
IkReal x12009=((1.0)*cj1);
IkReal x12010=(cj3*gconst41);
IkReal x12011=(sj2*x12009);
IkReal x12012=((1.0)*cj2*sj1);
IkReal x12013=(r21*x12002);
IkReal x12014=((1.0)*x12002);
IkReal x12015=(gconst40*x12001);
IkReal x12016=(cj3*x12001);
IkReal x12017=((1.0)*gconst41*x12001);
IkReal x12018=((1.0)*sj3*x12001);
IkReal x12019=(x12012+x12011);
evalcond[0]=(((r21*x12015))+((r22*x12002))+(((-1.0)*r20*x12017)));
evalcond[1]=(((r01*x12015))+((r02*x12002))+(((-1.0)*r00*x12017)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12017))+((x12001*x12004))+((r12*x12002)));
evalcond[3]=(((r12*x12016))+((r10*x12002*x12010))+(((-1.0)*cj3*x12004*x12014))+((r10*x12003))+((sj3*x12005)));
evalcond[4]=((((-1.0)*r10*x12008*x12014))+(((-1.0)*r12*x12018))+((r11*x12002*x12003))+((cj3*x12005))+((r10*x12006)));
evalcond[5]=(((r00*x12002*x12010))+(((-1.0)*cj2*x12009))+((r00*x12003))+((r01*x12008))+((r02*x12016))+x12007+(((-1.0)*r01*x12006*x12014)));
evalcond[6]=((((-1.0)*x12007))+((r21*x12010))+((r20*x12006))+(((-1.0)*r20*x12008*x12014))+(((-1.0)*r22*x12018))+((cj1*cj2))+((x12003*x12013)));
evalcond[7]=(((r22*x12016))+(((-1.0)*x12006*x12013))+((r20*x12003))+((r20*x12002*x12010))+(((-1.0)*x12019))+((r21*x12008)));
evalcond[8]=((((-1.0)*r02*x12018))+((r01*x12002*x12003))+((r00*x12006))+(((-1.0)*r00*x12008*x12014))+(((-1.0)*x12019))+((r01*x12010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12020=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12020);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12020);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12021=(r11*sj5);
IkReal x12022=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*sj3*x12022))+((sj3*x12021)));
j4eval[1]=((((-1.0)*x12022))+x12021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12023=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12023);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12023);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12024=(cj5*r10);
IkReal x12025=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x12025))+((cj3*x12024)));
j4eval[1]=((((-1.0)*x12024))+x12025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12026=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12026);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12026);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12027=((1.0)*cj5);
CheckValue<IkReal> x12028=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x12027))),-1);
if(!x12028.valid){
continue;
}
CheckValue<IkReal> x12029=IKPowWithIntegerCheck(r22,-1);
if(!x12029.valid){
continue;
}
CheckValue<IkReal> x12030=IKPowWithIntegerCheck(sj3,-1);
if(!x12030.valid){
continue;
}
if( IKabs(((x12028.value)*(((((-1.0)*cj3*r11*x12027))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12029.value)*(x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12028.value)*(((((-1.0)*cj3*r11*x12027))+(((-1.0)*cj3*r10*sj5))))))+IKsqr(((x12029.value)*(x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12028.value)*(((((-1.0)*cj3*r11*x12027))+(((-1.0)*cj3*r10*sj5))))), ((x12029.value)*(x12030.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12031=IKcos(j4);
IkReal x12032=IKsin(j4);
IkReal x12033=((1.0)*cj5);
IkReal x12034=(sj1*sj2);
IkReal x12035=(cj5*r01);
IkReal x12036=(cj3*sj5);
IkReal x12037=(cj3*cj5);
IkReal x12038=((1.0)*cj2);
IkReal x12039=(sj3*sj5);
IkReal x12040=(r01*sj5);
IkReal x12041=(r11*sj5);
IkReal x12042=((1.0)*cj1*sj2);
IkReal x12043=(sj1*x12038);
IkReal x12044=(sj3*x12032);
IkReal x12045=(r22*x12031);
IkReal x12046=((1.0)*x12032);
IkReal x12047=(x12042+x12043);
evalcond[0]=(r22*x12032);
evalcond[1]=((((-1.0)*r00*x12031*x12033))+((x12031*x12040)));
evalcond[2]=((-1.0)+((x12031*x12041))+(((-1.0)*r10*x12031*x12033)));
evalcond[3]=((((-1.0)*x12034))+((cj1*cj2))+(((-1.0)*sj3*x12045)));
evalcond[4]=((((-1.0)*x12047))+((cj3*x12045)));
evalcond[5]=(((r11*x12032*x12039))+(((-1.0)*r10*x12033*x12044))+((r10*x12036))+((r11*x12037)));
evalcond[6]=(((r10*x12032*x12037))+((cj5*r11*sj3))+(((-1.0)*r11*x12036*x12046))+((r10*x12039)));
evalcond[7]=((((-1.0)*cj1*x12038))+((r00*x12039))+x12034+(((-1.0)*r01*x12036*x12046))+((r00*x12032*x12037))+((sj3*x12035)));
evalcond[8]=(((r01*x12032*x12039))+((r00*x12036))+(((-1.0)*x12047))+((cj3*x12035))+(((-1.0)*r00*x12033*x12044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12048=((1.0)*sj5);
IkReal x12049=(cj5*r10);
CheckValue<IkReal> x12050=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x12048))+((cj3*x12049))),-1);
if(!x12050.valid){
continue;
}
CheckValue<IkReal> x12051=IKPowWithIntegerCheck(((((-1.0)*x12049))+((r11*sj5))),-1);
if(!x12051.valid){
continue;
}
if( IKabs(((x12050.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12048)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12051.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12050.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12048))))))+IKsqr(x12051.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12050.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12048))))), x12051.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12052=IKcos(j4);
IkReal x12053=IKsin(j4);
IkReal x12054=((1.0)*cj5);
IkReal x12055=(sj1*sj2);
IkReal x12056=(cj5*r01);
IkReal x12057=(cj3*sj5);
IkReal x12058=(cj3*cj5);
IkReal x12059=((1.0)*cj2);
IkReal x12060=(sj3*sj5);
IkReal x12061=(r01*sj5);
IkReal x12062=(r11*sj5);
IkReal x12063=((1.0)*cj1*sj2);
IkReal x12064=(sj1*x12059);
IkReal x12065=(sj3*x12053);
IkReal x12066=(r22*x12052);
IkReal x12067=((1.0)*x12053);
IkReal x12068=(x12063+x12064);
evalcond[0]=(r22*x12053);
evalcond[1]=(((x12052*x12061))+(((-1.0)*r00*x12052*x12054)));
evalcond[2]=((-1.0)+((x12052*x12062))+(((-1.0)*r10*x12052*x12054)));
evalcond[3]=((((-1.0)*sj3*x12066))+(((-1.0)*x12055))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x12068))+((cj3*x12066)));
evalcond[5]=(((r10*x12057))+(((-1.0)*r10*x12054*x12065))+((r11*x12058))+((r11*x12053*x12060)));
evalcond[6]=(((r10*x12053*x12058))+((cj5*r11*sj3))+((r10*x12060))+(((-1.0)*r11*x12057*x12067)));
evalcond[7]=(((r00*x12060))+(((-1.0)*cj1*x12059))+((r00*x12053*x12058))+x12055+((sj3*x12056))+(((-1.0)*r01*x12057*x12067)));
evalcond[8]=(((r01*x12053*x12060))+(((-1.0)*r00*x12054*x12065))+((r00*x12057))+(((-1.0)*x12068))+((cj3*x12056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12069=((1.0)*cj5);
IkReal x12070=(r11*sj5);
CheckValue<IkReal> x12071=IKPowWithIntegerCheck((((sj3*x12070))+(((-1.0)*r10*sj3*x12069))),-1);
if(!x12071.valid){
continue;
}
CheckValue<IkReal> x12072=IKPowWithIntegerCheck(((((-1.0)*r10*x12069))+x12070),-1);
if(!x12072.valid){
continue;
}
if( IKabs(((x12071.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12069)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12072.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12071.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12069))))))+IKsqr(x12072.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12071.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x12069))))), x12072.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12073=IKcos(j4);
IkReal x12074=IKsin(j4);
IkReal x12075=((1.0)*cj5);
IkReal x12076=(sj1*sj2);
IkReal x12077=(cj5*r01);
IkReal x12078=(cj3*sj5);
IkReal x12079=(cj3*cj5);
IkReal x12080=((1.0)*cj2);
IkReal x12081=(sj3*sj5);
IkReal x12082=(r01*sj5);
IkReal x12083=(r11*sj5);
IkReal x12084=((1.0)*cj1*sj2);
IkReal x12085=(sj1*x12080);
IkReal x12086=(sj3*x12074);
IkReal x12087=(r22*x12073);
IkReal x12088=((1.0)*x12074);
IkReal x12089=(x12084+x12085);
evalcond[0]=(r22*x12074);
evalcond[1]=(((x12073*x12082))+(((-1.0)*r00*x12073*x12075)));
evalcond[2]=((-1.0)+((x12073*x12083))+(((-1.0)*r10*x12073*x12075)));
evalcond[3]=((((-1.0)*x12076))+(((-1.0)*sj3*x12087))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x12089))+((cj3*x12087)));
evalcond[5]=((((-1.0)*r10*x12075*x12086))+((r11*x12079))+((r10*x12078))+((r11*x12074*x12081)));
evalcond[6]=((((-1.0)*r11*x12078*x12088))+((cj5*r11*sj3))+((r10*x12074*x12079))+((r10*x12081)));
evalcond[7]=((((-1.0)*r01*x12078*x12088))+((r00*x12081))+x12076+((sj3*x12077))+(((-1.0)*cj1*x12080))+((r00*x12074*x12079)));
evalcond[8]=(((r01*x12074*x12081))+(((-1.0)*x12089))+(((-1.0)*r00*x12075*x12086))+((cj3*x12077))+((r00*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12090=cj5*cj5;
IkReal x12091=((1.0)*cj5);
IkReal x12092=(r11*sj3);
IkReal x12093=(cj3*sj5);
IkReal x12094=(r10*r21);
IkReal x12095=(cj3*r11*r21);
IkReal x12096=((1.0)*x12090);
IkReal x12097=(r10*sj3*sj5);
CheckValue<IkReal> x12098=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12095*x12096))+x12095+(((-1.0)*x12091*x12093*x12094))+(((-1.0)*r11*r20*x12091*x12093))+((cj3*r10*r20*x12090)))),-1);
if(!x12098.valid){
continue;
}
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal((((cj5*r21*sj5*x12092))+(((-1.0)*r20*x12091*x12097))+(((-1.0)*r20*x12092*x12096))+((sj3*x12094))+(((-1.0)*sj3*x12094*x12096)))),IkReal(((((-1.0)*r22*x12097))+(((-1.0)*r22*x12091*x12092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12098.value)))+(x12099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12100=IKcos(j4);
IkReal x12101=IKsin(j4);
IkReal x12102=((1.0)*cj5);
IkReal x12103=(sj1*sj2);
IkReal x12104=(cj5*r01);
IkReal x12105=((1.0)*cj1);
IkReal x12106=(cj3*sj5);
IkReal x12107=(cj3*cj5);
IkReal x12108=(cj5*sj3);
IkReal x12109=(sj3*sj5);
IkReal x12110=(sj2*x12105);
IkReal x12111=((1.0)*cj2*sj1);
IkReal x12112=(sj5*x12100);
IkReal x12113=(sj3*x12101);
IkReal x12114=((1.0)*x12101);
IkReal x12115=(cj3*x12100);
IkReal x12116=((1.0)*sj3*x12100);
IkReal x12117=(x12110+x12111);
evalcond[0]=((((-1.0)*r20*x12100*x12102))+((r21*x12112))+((r22*x12101)));
evalcond[1]=(((r02*x12101))+(((-1.0)*r00*x12100*x12102))+((r01*x12112)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12100*x12102))+((r12*x12101))+((r11*x12112)));
evalcond[3]=((((-1.0)*r11*x12106*x12114))+((r10*x12109))+((r10*x12101*x12107))+((r12*x12115))+((r11*x12108)));
evalcond[4]=(((r11*x12101*x12109))+((r10*x12106))+(((-1.0)*r12*x12116))+(((-1.0)*r10*x12102*x12113))+((r11*x12107)));
evalcond[5]=(((r02*x12115))+(((-1.0)*r01*x12106*x12114))+((r00*x12109))+x12103+((sj3*x12104))+(((-1.0)*cj2*x12105))+((r00*x12101*x12107)));
evalcond[6]=((((-1.0)*r20*x12102*x12113))+((r21*x12101*x12109))+(((-1.0)*r22*x12116))+((r20*x12106))+((cj1*cj2))+((r21*x12107))+(((-1.0)*x12103)));
evalcond[7]=((((-1.0)*r21*x12106*x12114))+((r20*x12101*x12107))+((r20*x12109))+(((-1.0)*x12117))+((r21*x12108))+((r22*x12115)));
evalcond[8]=(((r01*x12101*x12109))+((cj3*x12104))+((r00*x12106))+(((-1.0)*x12117))+(((-1.0)*r02*x12116))+(((-1.0)*r00*x12102*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12118=((1.0)*cj5);
CheckValue<IkReal> x12119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12118))+(((-1.0)*r00*sj5)))),-1);
if(!x12119.valid){
continue;
}
CheckValue<IkReal> x12120 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12118)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12119.value)))+(x12120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12121=IKcos(j4);
IkReal x12122=IKsin(j4);
IkReal x12123=((1.0)*cj5);
IkReal x12124=(sj1*sj2);
IkReal x12125=(cj5*r01);
IkReal x12126=((1.0)*cj1);
IkReal x12127=(cj3*sj5);
IkReal x12128=(cj3*cj5);
IkReal x12129=(cj5*sj3);
IkReal x12130=(sj3*sj5);
IkReal x12131=(sj2*x12126);
IkReal x12132=((1.0)*cj2*sj1);
IkReal x12133=(sj5*x12121);
IkReal x12134=(sj3*x12122);
IkReal x12135=((1.0)*x12122);
IkReal x12136=(cj3*x12121);
IkReal x12137=((1.0)*sj3*x12121);
IkReal x12138=(x12131+x12132);
evalcond[0]=(((r21*x12133))+((r22*x12122))+(((-1.0)*r20*x12121*x12123)));
evalcond[1]=(((r01*x12133))+((r02*x12122))+(((-1.0)*r00*x12121*x12123)));
evalcond[2]=((-1.0)+((r12*x12122))+((r11*x12133))+(((-1.0)*r10*x12121*x12123)));
evalcond[3]=(((r12*x12136))+((r10*x12122*x12128))+((r10*x12130))+((r11*x12129))+(((-1.0)*r11*x12127*x12135)));
evalcond[4]=((((-1.0)*r12*x12137))+(((-1.0)*r10*x12123*x12134))+((r11*x12122*x12130))+((r10*x12127))+((r11*x12128)));
evalcond[5]=(((sj3*x12125))+((r00*x12130))+x12124+((r00*x12122*x12128))+((r02*x12136))+(((-1.0)*r01*x12127*x12135))+(((-1.0)*cj2*x12126)));
evalcond[6]=(((r21*x12122*x12130))+(((-1.0)*r20*x12123*x12134))+((r21*x12128))+(((-1.0)*r22*x12137))+((cj1*cj2))+(((-1.0)*x12124))+((r20*x12127)));
evalcond[7]=((((-1.0)*r21*x12127*x12135))+(((-1.0)*x12138))+((r21*x12129))+((r22*x12136))+((r20*x12122*x12128))+((r20*x12130)));
evalcond[8]=(((r00*x12127))+((cj3*x12125))+(((-1.0)*x12138))+(((-1.0)*r00*x12123*x12134))+(((-1.0)*r02*x12137))+((r01*x12122*x12130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12139.valid){
continue;
}
CheckValue<IkReal> x12140 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12139.value)))+(x12140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12141=IKcos(j4);
IkReal x12142=IKsin(j4);
IkReal x12143=((1.0)*cj5);
IkReal x12144=(sj1*sj2);
IkReal x12145=(cj5*r01);
IkReal x12146=((1.0)*cj1);
IkReal x12147=(cj3*sj5);
IkReal x12148=(cj3*cj5);
IkReal x12149=(cj5*sj3);
IkReal x12150=(sj3*sj5);
IkReal x12151=(sj2*x12146);
IkReal x12152=((1.0)*cj2*sj1);
IkReal x12153=(sj5*x12141);
IkReal x12154=(sj3*x12142);
IkReal x12155=((1.0)*x12142);
IkReal x12156=(cj3*x12141);
IkReal x12157=((1.0)*sj3*x12141);
IkReal x12158=(x12152+x12151);
evalcond[0]=((((-1.0)*r20*x12141*x12143))+((r22*x12142))+((r21*x12153)));
evalcond[1]=(((r02*x12142))+((r01*x12153))+(((-1.0)*r00*x12141*x12143)));
evalcond[2]=((-1.0)+((r12*x12142))+((r11*x12153))+(((-1.0)*r10*x12141*x12143)));
evalcond[3]=((((-1.0)*r11*x12147*x12155))+((r10*x12150))+((r12*x12156))+((r11*x12149))+((r10*x12142*x12148)));
evalcond[4]=((((-1.0)*r10*x12143*x12154))+((r11*x12142*x12150))+((r10*x12147))+(((-1.0)*r12*x12157))+((r11*x12148)));
evalcond[5]=(((r00*x12142*x12148))+((r02*x12156))+(((-1.0)*r01*x12147*x12155))+x12144+((r00*x12150))+(((-1.0)*cj2*x12146))+((sj3*x12145)));
evalcond[6]=((((-1.0)*r22*x12157))+(((-1.0)*x12144))+((r20*x12147))+((r21*x12148))+((cj1*cj2))+((r21*x12142*x12150))+(((-1.0)*r20*x12143*x12154)));
evalcond[7]=(((r20*x12142*x12148))+((r22*x12156))+(((-1.0)*r21*x12147*x12155))+((r20*x12150))+((r21*x12149))+(((-1.0)*x12158)));
evalcond[8]=((((-1.0)*r02*x12157))+((r00*x12147))+((r01*x12142*x12150))+(((-1.0)*r00*x12143*x12154))+(((-1.0)*x12158))+((cj3*x12145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12160 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12160)==0){
continue;
}
IkReal x12159=pow(x12160,-0.5);
CheckValue<IkReal> x12161 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12161.valid){
continue;
}
IkReal gconst12=((-1.0)*(x12161.value));
IkReal gconst13=((-1.0)*r01*x12159);
IkReal gconst14=(r00*x12159);
CheckValue<IkReal> x12162 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12162.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
IkReal x12163=((-1.0)*(x12165.value));
IkReal x12164=x12159;
sj5=gconst13;
cj5=gconst14;
j5=x12163;
IkReal gconst12=x12163;
IkReal gconst13=((-1.0)*r01*x12164);
IkReal gconst14=(r00*x12164);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12166=((1.0)*sj0);
IkReal x12167=((1.0)*cj0);
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r10*x12166))+((cj0*gconst13*r01))+(((-1.0)*gconst14*r00*x12167))+((gconst13*r11*sj0)))),IkReal(((((-1.0)*r12*x12166))+(((-1.0)*r02*x12167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
CheckValue<IkReal> x12169=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x12169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12168.value)+(((1.5707963267949)*(x12169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12170=IKcos(j4);
IkReal x12171=IKsin(j4);
IkReal x12172=(cj3*r11);
IkReal x12173=(gconst13*sj3);
IkReal x12174=(sj0*sj1);
IkReal x12175=((1.0)*sj2);
IkReal x12176=(gconst14*sj3);
IkReal x12177=(cj3*gconst14);
IkReal x12178=(cj2*sj1);
IkReal x12179=(cj3*gconst13);
IkReal x12180=(cj1*cj2);
IkReal x12181=(cj1*sj2);
IkReal x12182=((1.0)*gconst14*r00);
IkReal x12183=((1.0)*x12171);
IkReal x12184=(gconst13*x12170);
IkReal x12185=(cj3*x12170);
IkReal x12186=((1.0)*x12170);
evalcond[0]=((((-1.0)*gconst14*r20*x12186))+((r21*x12184))+((r22*x12171)));
evalcond[1]=(cj0+((r11*x12184))+(((-1.0)*gconst14*r10*x12186))+((r12*x12171)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x12170*x12182))+((r01*x12184))+((r02*x12171)));
evalcond[3]=(((r21*x12177))+((r20*x12179))+((r21*x12171*x12173))+(((-1.0)*sj1*x12175))+x12180+(((-1.0)*r22*sj3*x12186))+(((-1.0)*r20*x12176*x12183)));
evalcond[4]=(((r21*x12176))+(((-1.0)*x12178))+((r20*x12173))+(((-1.0)*r21*x12179*x12183))+((r22*x12185))+(((-1.0)*cj1*x12175))+((r20*x12171*x12177)));
evalcond[5]=((((-1.0)*r00*x12176*x12183))+(((-1.0)*r02*sj3*x12186))+((cj0*x12178))+((r01*x12171*x12173))+((r01*x12177))+((r00*x12179))+((cj0*x12181)));
evalcond[6]=((((-1.0)*cj0*sj1*x12175))+((r00*x12171*x12177))+((r01*x12176))+((r00*x12173))+((r02*x12185))+(((-1.0)*r01*x12179*x12183))+((cj0*x12180)));
evalcond[7]=(((r11*x12171*x12173))+((r10*x12179))+(((-1.0)*r12*sj3*x12186))+((gconst14*x12172))+((sj0*x12181))+(((-1.0)*r10*x12176*x12183))+((cj2*x12174)));
evalcond[8]=(((r10*x12171*x12177))+((r12*x12185))+((r10*x12173))+(((-1.0)*x12174*x12175))+((r11*x12176))+(((-1.0)*gconst13*x12172*x12183))+((sj0*x12180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x12187.valid){
continue;
}
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r20*sj0))+((gconst13*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12187.value)))+(x12188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12189=IKcos(j4);
IkReal x12190=IKsin(j4);
IkReal x12191=(cj3*r11);
IkReal x12192=(gconst13*sj3);
IkReal x12193=(sj0*sj1);
IkReal x12194=((1.0)*sj2);
IkReal x12195=(gconst14*sj3);
IkReal x12196=(cj3*gconst14);
IkReal x12197=(cj2*sj1);
IkReal x12198=(cj3*gconst13);
IkReal x12199=(cj1*cj2);
IkReal x12200=(cj1*sj2);
IkReal x12201=((1.0)*gconst14*r00);
IkReal x12202=((1.0)*x12190);
IkReal x12203=(gconst13*x12189);
IkReal x12204=(cj3*x12189);
IkReal x12205=((1.0)*x12189);
evalcond[0]=(((r22*x12190))+((r21*x12203))+(((-1.0)*gconst14*r20*x12205)));
evalcond[1]=(((r12*x12190))+cj0+(((-1.0)*gconst14*r10*x12205))+((r11*x12203)));
evalcond[2]=((((-1.0)*sj0))+((r02*x12190))+((r01*x12203))+(((-1.0)*x12189*x12201)));
evalcond[3]=(((r21*x12196))+(((-1.0)*r22*sj3*x12205))+x12199+((r20*x12198))+(((-1.0)*sj1*x12194))+((r21*x12190*x12192))+(((-1.0)*r20*x12195*x12202)));
evalcond[4]=(((r22*x12204))+((r21*x12195))+(((-1.0)*r21*x12198*x12202))+(((-1.0)*x12197))+((r20*x12192))+((r20*x12190*x12196))+(((-1.0)*cj1*x12194)));
evalcond[5]=(((cj0*x12200))+(((-1.0)*r00*x12195*x12202))+((r01*x12190*x12192))+((cj0*x12197))+((r01*x12196))+(((-1.0)*r02*sj3*x12205))+((r00*x12198)));
evalcond[6]=(((r02*x12204))+((r00*x12190*x12196))+((cj0*x12199))+(((-1.0)*r01*x12198*x12202))+((r01*x12195))+((r00*x12192))+(((-1.0)*cj0*sj1*x12194)));
evalcond[7]=(((r11*x12190*x12192))+(((-1.0)*r12*sj3*x12205))+((cj2*x12193))+((r10*x12198))+((gconst14*x12191))+((sj0*x12200))+(((-1.0)*r10*x12195*x12202)));
evalcond[8]=(((r12*x12204))+(((-1.0)*gconst13*x12191*x12202))+((r11*x12195))+((r10*x12190*x12196))+((r10*x12192))+((sj0*x12199))+(((-1.0)*x12193*x12194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12207 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12207)==0){
continue;
}
IkReal x12206=pow(x12207,-0.5);
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x12208.value))));
IkReal gconst16=((1.0)*r01*x12206);
IkReal gconst17=((-1.0)*r00*x12206);
CheckValue<IkReal> x12209 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12209.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12209.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x12212 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12212.valid){
continue;
}
IkReal x12210=((1.0)*(x12212.value));
IkReal x12211=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12210)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12210)));
IkReal gconst16=((1.0)*r01*x12211);
IkReal gconst17=((-1.0)*r00*x12211);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12215 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12215.valid){
continue;
}
IkReal x12213=((1.0)*(x12215.value));
IkReal x12214=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12213)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12213)));
IkReal gconst16=((1.0)*r01*x12214);
IkReal gconst17=((-1.0)*r00*x12214);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
IkReal x12216=((1.0)*(x12218.value));
IkReal x12217=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12216)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12216)));
IkReal gconst16=((1.0)*r01*x12217);
IkReal gconst17=((-1.0)*r00*x12217);
IkReal x12219=r02*r02;
IkReal x12220=(r12*sj0);
IkReal x12221=((1.0)*cj0);
IkReal x12222=x12206;
j4eval[0]=((IKabs(((((-1.0)*r02*x12221))+(((-1.0)*x12220)))))+(IKabs((((cj0*x12219*x12222))+((r02*x12220*x12222))+(((-1.0)*x12221*x12222))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
IkReal x12223=((1.0)*(x12225.value));
IkReal x12224=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12223)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst16=((1.0)*r01*x12224);
IkReal gconst17=((-1.0)*r00*x12224);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12228 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12228.valid){
continue;
}
IkReal x12226=((1.0)*(x12228.value));
IkReal x12227=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12226)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12226)));
IkReal gconst16=((1.0)*r01*x12227);
IkReal gconst17=((-1.0)*r00*x12227);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12229=gconst16*gconst16;
IkReal x12230=gconst17*gconst17;
IkReal x12231=(cj3*r11);
IkReal x12232=((1.0)*sj3);
IkReal x12233=(gconst16*r10);
IkReal x12234=(gconst17*r20);
IkReal x12235=(gconst17*r11);
IkReal x12236=(r21*x12229);
IkReal x12237=(r20*x12230);
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal((((r10*sj3*x12236))+(((-1.0)*r11*x12232*x12237))+(((-1.0)*x12232*x12233*x12234))+((gconst16*r21*sj3*x12235)))),IkReal(((((-1.0)*r22*x12232*x12233))+(((-1.0)*r22*x12232*x12235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
CheckValue<IkReal> x12239=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst17*r21*x12233))+((cj3*r12*r22))+((x12231*x12236))+((cj3*r10*x12237))+(((-1.0)*gconst16*x12231*x12234)))),-1);
if(!x12239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12238.value)+(((1.5707963267949)*(x12239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12240=IKcos(j4);
IkReal x12241=IKsin(j4);
IkReal x12242=((1.0)*cj1);
IkReal x12243=(r21*sj3);
IkReal x12244=(cj3*gconst16);
IkReal x12245=(sj1*sj2);
IkReal x12246=(r11*sj3);
IkReal x12247=((1.0)*cj3);
IkReal x12248=(r01*sj3);
IkReal x12249=(cj3*gconst17);
IkReal x12250=(gconst17*r20);
IkReal x12251=(gconst16*sj3);
IkReal x12252=(sj2*x12242);
IkReal x12253=((1.0)*cj2*sj1);
IkReal x12254=(gconst16*x12241);
IkReal x12255=((1.0)*x12240);
IkReal x12256=(cj3*x12240);
IkReal x12257=(gconst16*x12240);
IkReal x12258=(x12241*x12249);
IkReal x12259=((1.0)*gconst17*sj3*x12241);
IkReal x12260=(x12253+x12252);
evalcond[0]=((((-1.0)*x12250*x12255))+((r21*x12257))+((r22*x12241)));
evalcond[1]=((((-1.0)*gconst17*r00*x12255))+((r01*x12257))+((r02*x12241)));
evalcond[2]=((-1.0)+((r11*x12257))+((r12*x12241))+(((-1.0)*gconst17*r10*x12255)));
evalcond[3]=(((r12*x12256))+((r10*x12258))+((r10*x12251))+(((-1.0)*r11*x12241*x12244))+((gconst17*x12246)));
evalcond[4]=(((r11*x12249))+((x12246*x12254))+((r10*x12244))+(((-1.0)*r10*x12259))+(((-1.0)*r12*sj3*x12255)));
evalcond[5]=(x12245+(((-1.0)*r01*x12241*x12244))+((r00*x12258))+((r00*x12251))+(((-1.0)*cj2*x12242))+((r02*x12256))+((gconst17*x12248)));
evalcond[6]=((((-1.0)*sj3*x12241*x12250))+((r20*x12244))+(((-1.0)*x12245))+((cj1*cj2))+((x12243*x12254))+(((-1.0)*r22*sj3*x12255))+((r21*x12249)));
evalcond[7]=(((r22*x12256))+(((-1.0)*r21*x12241*x12244))+((r20*x12258))+((r20*x12251))+(((-1.0)*x12260))+((gconst17*x12243)));
evalcond[8]=(((r00*x12244))+((r01*x12249))+((x12248*x12254))+(((-1.0)*x12260))+(((-1.0)*r00*x12259))+(((-1.0)*r02*sj3*x12255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12261=((1.0)*gconst17);
CheckValue<IkReal> x12262 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12261))+((gconst16*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12262.valid){
continue;
}
CheckValue<IkReal> x12263=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x12261)))),-1);
if(!x12263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12262.value)+(((1.5707963267949)*(x12263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12264=IKcos(j4);
IkReal x12265=IKsin(j4);
IkReal x12266=((1.0)*cj1);
IkReal x12267=(r21*sj3);
IkReal x12268=(cj3*gconst16);
IkReal x12269=(sj1*sj2);
IkReal x12270=(r11*sj3);
IkReal x12271=((1.0)*cj3);
IkReal x12272=(r01*sj3);
IkReal x12273=(cj3*gconst17);
IkReal x12274=(gconst17*r20);
IkReal x12275=(gconst16*sj3);
IkReal x12276=(sj2*x12266);
IkReal x12277=((1.0)*cj2*sj1);
IkReal x12278=(gconst16*x12265);
IkReal x12279=((1.0)*x12264);
IkReal x12280=(cj3*x12264);
IkReal x12281=(gconst16*x12264);
IkReal x12282=(x12265*x12273);
IkReal x12283=((1.0)*gconst17*sj3*x12265);
IkReal x12284=(x12277+x12276);
evalcond[0]=((((-1.0)*x12274*x12279))+((r22*x12265))+((r21*x12281)));
evalcond[1]=(((r01*x12281))+(((-1.0)*gconst17*r00*x12279))+((r02*x12265)));
evalcond[2]=((-1.0)+((r12*x12265))+(((-1.0)*gconst17*r10*x12279))+((r11*x12281)));
evalcond[3]=(((gconst17*x12270))+((r12*x12280))+((r10*x12275))+(((-1.0)*r11*x12265*x12268))+((r10*x12282)));
evalcond[4]=(((x12270*x12278))+(((-1.0)*r10*x12283))+(((-1.0)*r12*sj3*x12279))+((r10*x12268))+((r11*x12273)));
evalcond[5]=((((-1.0)*r01*x12265*x12268))+((gconst17*x12272))+((r02*x12280))+x12269+((r00*x12282))+((r00*x12275))+(((-1.0)*cj2*x12266)));
evalcond[6]=(((r21*x12273))+((x12267*x12278))+(((-1.0)*x12269))+(((-1.0)*r22*sj3*x12279))+((r20*x12268))+(((-1.0)*sj3*x12265*x12274))+((cj1*cj2)));
evalcond[7]=(((r20*x12275))+((r22*x12280))+(((-1.0)*r21*x12265*x12268))+((gconst17*x12267))+((r20*x12282))+(((-1.0)*x12284)));
evalcond[8]=((((-1.0)*r02*sj3*x12279))+((x12272*x12278))+((r00*x12268))+(((-1.0)*r00*x12283))+((r01*x12273))+(((-1.0)*x12284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12285 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r00))+((gconst16*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12285.valid){
continue;
}
CheckValue<IkReal> x12286=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x12286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12285.value)+(((1.5707963267949)*(x12286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12287=IKcos(j4);
IkReal x12288=IKsin(j4);
IkReal x12289=((1.0)*cj1);
IkReal x12290=(r21*sj3);
IkReal x12291=(cj3*gconst16);
IkReal x12292=(sj1*sj2);
IkReal x12293=(r11*sj3);
IkReal x12294=((1.0)*cj3);
IkReal x12295=(r01*sj3);
IkReal x12296=(cj3*gconst17);
IkReal x12297=(gconst17*r20);
IkReal x12298=(gconst16*sj3);
IkReal x12299=(sj2*x12289);
IkReal x12300=((1.0)*cj2*sj1);
IkReal x12301=(gconst16*x12288);
IkReal x12302=((1.0)*x12287);
IkReal x12303=(cj3*x12287);
IkReal x12304=(gconst16*x12287);
IkReal x12305=(x12288*x12296);
IkReal x12306=((1.0)*gconst17*sj3*x12288);
IkReal x12307=(x12300+x12299);
evalcond[0]=((((-1.0)*x12297*x12302))+((r22*x12288))+((r21*x12304)));
evalcond[1]=(((r02*x12288))+(((-1.0)*gconst17*r00*x12302))+((r01*x12304)));
evalcond[2]=((-1.0)+((r11*x12304))+((r12*x12288))+(((-1.0)*gconst17*r10*x12302)));
evalcond[3]=(((r10*x12305))+((r10*x12298))+((r12*x12303))+(((-1.0)*r11*x12288*x12291))+((gconst17*x12293)));
evalcond[4]=((((-1.0)*r12*sj3*x12302))+((x12293*x12301))+((r10*x12291))+((r11*x12296))+(((-1.0)*r10*x12306)));
evalcond[5]=((((-1.0)*r01*x12288*x12291))+(((-1.0)*cj2*x12289))+((r00*x12298))+x12292+((gconst17*x12295))+((r00*x12305))+((r02*x12303)));
evalcond[6]=(((r21*x12296))+((x12290*x12301))+(((-1.0)*r22*sj3*x12302))+(((-1.0)*sj3*x12288*x12297))+((r20*x12291))+(((-1.0)*x12292))+((cj1*cj2)));
evalcond[7]=(((r20*x12298))+((r20*x12305))+(((-1.0)*x12307))+((gconst17*x12290))+((r22*x12303))+(((-1.0)*r21*x12288*x12291)));
evalcond[8]=(((r01*x12296))+((r00*x12291))+((x12295*x12301))+(((-1.0)*r00*x12306))+(((-1.0)*r02*sj3*x12302))+(((-1.0)*x12307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12308=(gconst17*r20);
IkReal x12309=(gconst16*r21);
op[0]=((((-1.0)*x12309))+x12308);
op[1]=((2.0)*r22);
op[2]=((((-1.0)*x12308))+x12309);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12310=(gconst17*r20);
IkReal x12311=(gconst16*r21);
op[0]=(x12310+(((-1.0)*x12311)));
op[1]=((2.0)*r22);
op[2]=(x12311+(((-1.0)*x12310)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12314 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12314.valid){
continue;
}
IkReal x12312=((1.0)*(x12314.value));
IkReal x12313=x12206;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12312)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12312)));
IkReal gconst16=((1.0)*r01*x12313);
IkReal gconst17=((-1.0)*r00*x12313);
IkReal x12315=r02*r02;
IkReal x12316=(r12*sj0);
IkReal x12317=((1.0)*cj0);
IkReal x12318=x12206;
j4eval[0]=((IKabs((((r02*x12316*x12318))+(((-1.0)*x12317*x12318))+((cj0*x12315*x12318)))))+(IKabs(((((-1.0)*x12316))+(((-1.0)*r02*x12317))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12319=(sj1*sj2);
IkReal x12320=((1.0)*r21);
IkReal x12321=(gconst16*sj3);
IkReal x12322=(cj3*gconst17);
IkReal x12323=(gconst17*r20);
IkReal x12324=(cj1*cj2);
IkReal x12325=(cj3*gconst16*r20);
CheckValue<IkReal> x12326=IKPowWithIntegerCheck(((((-1.0)*sj3*x12323))+((r21*x12321))),-1);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck((((gconst17*r10*sj3*x12323))+((gconst16*r11*r21*x12321))+(((-1.0)*r11*x12321*x12323))+(((-1.0)*gconst17*r10*x12320*x12321))),-1);
if(!x12327.valid){
continue;
}
if( IKabs(((x12326.value)*(((((-1.0)*x12320*x12322))+x12319+(((-1.0)*x12325))+(((-1.0)*x12324)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12327.value)*(((((-1.0)*r12*x12319))+((r12*x12325))+((r12*x12324))+((cj0*sj3*x12323))+((r12*r21*x12322))+(((-1.0)*cj0*x12320*x12321)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12326.value)*(((((-1.0)*x12320*x12322))+x12319+(((-1.0)*x12325))+(((-1.0)*x12324))))))+IKsqr(((x12327.value)*(((((-1.0)*r12*x12319))+((r12*x12325))+((r12*x12324))+((cj0*sj3*x12323))+((r12*r21*x12322))+(((-1.0)*cj0*x12320*x12321))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12326.value)*(((((-1.0)*x12320*x12322))+x12319+(((-1.0)*x12325))+(((-1.0)*x12324))))), ((x12327.value)*(((((-1.0)*r12*x12319))+((r12*x12325))+((r12*x12324))+((cj0*sj3*x12323))+((r12*r21*x12322))+(((-1.0)*cj0*x12320*x12321))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12328=IKcos(j4);
IkReal x12329=IKsin(j4);
IkReal x12330=(gconst17*sj3);
IkReal x12331=(cj3*r20);
IkReal x12332=(cj2*sj0);
IkReal x12333=((1.0)*sj0);
IkReal x12334=((1.0)*sj1);
IkReal x12335=(cj3*gconst17);
IkReal x12336=(gconst16*sj3);
IkReal x12337=(cj3*gconst16);
IkReal x12338=(cj1*sj2);
IkReal x12339=(cj0*cj2);
IkReal x12340=(gconst17*x12329);
IkReal x12341=((1.0)*x12329);
IkReal x12342=(gconst16*x12328);
IkReal x12343=((1.0)*x12328);
IkReal x12344=(cj3*x12328);
IkReal x12345=(x12329*x12336);
evalcond[0]=((((-1.0)*gconst17*r20*x12343))+((r21*x12342)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x12343))+((r11*x12342))+((r12*x12329)));
evalcond[2]=((((-1.0)*gconst17*r00*x12343))+(((-1.0)*x12333))+((r01*x12342))+((r02*x12329)));
evalcond[3]=((((-1.0)*r20*x12330*x12341))+((r21*x12335))+((gconst16*x12331))+((r21*x12345))+(((-1.0)*sj2*x12334))+((cj1*cj2)));
evalcond[4]=(((r20*x12336))+((r21*x12330))+(((-1.0)*cj2*x12334))+(((-1.0)*r21*x12337*x12341))+((x12331*x12340))+(((-1.0)*x12338)));
evalcond[5]=(((cj0*x12338))+((r01*x12335))+((r00*x12337))+((r01*x12345))+(((-1.0)*r00*x12330*x12341))+((sj1*x12339))+(((-1.0)*r02*sj3*x12343)));
evalcond[6]=(((r00*x12329*x12335))+((r01*x12330))+((r00*x12336))+((cj1*x12339))+(((-1.0)*r01*x12337*x12341))+((r02*x12344))+(((-1.0)*cj0*sj2*x12334)));
evalcond[7]=((((-1.0)*r10*x12330*x12341))+((r11*x12345))+((r10*x12337))+((sj0*x12338))+(((-1.0)*r12*sj3*x12343))+((sj1*x12332))+((r11*x12335)));
evalcond[8]=(((r10*x12329*x12335))+(((-1.0)*r11*x12337*x12341))+((cj1*x12332))+((r10*x12336))+(((-1.0)*sj1*sj2*x12333))+((r11*x12330))+((r12*x12344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12346=((1.0)*sj0);
IkReal x12347=((1.0)*gconst17);
CheckValue<IkReal> x12348 = IKatan2WithCheck(IkReal((((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x12346))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x12347)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12348.valid){
continue;
}
CheckValue<IkReal> x12349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12347)))),-1);
if(!x12349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12348.value)+(((1.5707963267949)*(x12349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12350=IKcos(j4);
IkReal x12351=IKsin(j4);
IkReal x12352=(gconst17*sj3);
IkReal x12353=(cj3*r20);
IkReal x12354=(cj2*sj0);
IkReal x12355=((1.0)*sj0);
IkReal x12356=((1.0)*sj1);
IkReal x12357=(cj3*gconst17);
IkReal x12358=(gconst16*sj3);
IkReal x12359=(cj3*gconst16);
IkReal x12360=(cj1*sj2);
IkReal x12361=(cj0*cj2);
IkReal x12362=(gconst17*x12351);
IkReal x12363=((1.0)*x12351);
IkReal x12364=(gconst16*x12350);
IkReal x12365=((1.0)*x12350);
IkReal x12366=(cj3*x12350);
IkReal x12367=(x12351*x12358);
evalcond[0]=(((r21*x12364))+(((-1.0)*gconst17*r20*x12365)));
evalcond[1]=(((r11*x12364))+cj0+(((-1.0)*gconst17*r10*x12365))+((r12*x12351)));
evalcond[2]=((((-1.0)*gconst17*r00*x12365))+(((-1.0)*x12355))+((r02*x12351))+((r01*x12364)));
evalcond[3]=(((gconst16*x12353))+((r21*x12367))+(((-1.0)*r20*x12352*x12363))+(((-1.0)*sj2*x12356))+((r21*x12357))+((cj1*cj2)));
evalcond[4]=(((x12353*x12362))+((r20*x12358))+(((-1.0)*r21*x12359*x12363))+(((-1.0)*cj2*x12356))+((r21*x12352))+(((-1.0)*x12360)));
evalcond[5]=((((-1.0)*r02*sj3*x12365))+((r01*x12357))+((r00*x12359))+(((-1.0)*r00*x12352*x12363))+((cj0*x12360))+((sj1*x12361))+((r01*x12367)));
evalcond[6]=((((-1.0)*cj0*sj2*x12356))+((r01*x12352))+((cj1*x12361))+((r00*x12351*x12357))+((r00*x12358))+(((-1.0)*r01*x12359*x12363))+((r02*x12366)));
evalcond[7]=(((r11*x12367))+(((-1.0)*r10*x12352*x12363))+((r11*x12357))+((r10*x12359))+((sj0*x12360))+(((-1.0)*r12*sj3*x12365))+((sj1*x12354)));
evalcond[8]=((((-1.0)*r11*x12359*x12363))+((cj1*x12354))+((r11*x12352))+((r10*x12351*x12357))+((r10*x12358))+(((-1.0)*sj1*sj2*x12355))+((r12*x12366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12368=((1.0)*sj0);
IkReal x12369=((1.0)*gconst17);
CheckValue<IkReal> x12370 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x12369))+((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x12368))+((cj0*gconst16*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12370.valid){
continue;
}
CheckValue<IkReal> x12371=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12369)))),-1);
if(!x12371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12370.value)+(((1.5707963267949)*(x12371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12372=IKcos(j4);
IkReal x12373=IKsin(j4);
IkReal x12374=(gconst17*sj3);
IkReal x12375=(cj3*r20);
IkReal x12376=(cj2*sj0);
IkReal x12377=((1.0)*sj0);
IkReal x12378=((1.0)*sj1);
IkReal x12379=(cj3*gconst17);
IkReal x12380=(cj3*gconst16);
IkReal x12381=(cj1*sj2);
IkReal x12382=(cj0*cj2);
IkReal x12383=(gconst16*sj3);
IkReal x12384=(gconst17*x12373);
IkReal x12385=(r22*x12372);
IkReal x12386=((1.0)*x12373);
IkReal x12387=(gconst16*x12372);
IkReal x12388=((1.0)*x12372);
IkReal x12389=(cj3*x12372);
IkReal x12390=(x12373*x12383);
evalcond[0]=(((r21*x12387))+((r22*x12373))+(((-1.0)*gconst17*r20*x12388)));
evalcond[1]=(((r11*x12387))+cj0+(((-1.0)*gconst17*r10*x12388))+((r12*x12373)));
evalcond[2]=((((-1.0)*x12377))+((r01*x12387))+((r02*x12373))+(((-1.0)*gconst17*r00*x12388)));
evalcond[3]=(((r21*x12379))+((r21*x12390))+(((-1.0)*sj2*x12378))+((cj1*cj2))+(((-1.0)*r20*x12374*x12386))+(((-1.0)*sj3*x12385))+((gconst16*x12375)));
evalcond[4]=(((cj3*x12385))+(((-1.0)*r21*x12380*x12386))+((r21*x12374))+((r20*x12383))+(((-1.0)*cj2*x12378))+(((-1.0)*x12381))+((x12375*x12384)));
evalcond[5]=((((-1.0)*r00*x12374*x12386))+((r00*x12380))+((r01*x12390))+(((-1.0)*r02*sj3*x12388))+((cj0*x12381))+((sj1*x12382))+((r01*x12379)));
evalcond[6]=((((-1.0)*cj0*sj2*x12378))+((r02*x12389))+((cj1*x12382))+((r00*x12383))+((r00*x12373*x12379))+((r01*x12374))+(((-1.0)*r01*x12380*x12386)));
evalcond[7]=(((r11*x12379))+((r11*x12390))+((r10*x12380))+(((-1.0)*r12*sj3*x12388))+(((-1.0)*r10*x12374*x12386))+((sj0*x12381))+((sj1*x12376)));
evalcond[8]=(((r12*x12389))+((r11*x12374))+((r10*x12383))+((r10*x12373*x12379))+((cj1*x12376))+(((-1.0)*sj1*sj2*x12377))+(((-1.0)*r11*x12380*x12386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12391 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r20*sj0))+((gconst16*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x12392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12391.value)+(((1.5707963267949)*(x12392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12393=IKcos(j4);
IkReal x12394=IKsin(j4);
IkReal x12395=(gconst17*sj3);
IkReal x12396=(cj3*r20);
IkReal x12397=(cj2*sj0);
IkReal x12398=((1.0)*sj0);
IkReal x12399=((1.0)*sj1);
IkReal x12400=(cj3*gconst17);
IkReal x12401=(cj3*gconst16);
IkReal x12402=(cj1*sj2);
IkReal x12403=(cj0*cj2);
IkReal x12404=(gconst16*sj3);
IkReal x12405=(gconst17*x12394);
IkReal x12406=(r22*x12393);
IkReal x12407=((1.0)*x12394);
IkReal x12408=(gconst16*x12393);
IkReal x12409=((1.0)*x12393);
IkReal x12410=(cj3*x12393);
IkReal x12411=(x12394*x12404);
evalcond[0]=(((r22*x12394))+(((-1.0)*gconst17*r20*x12409))+((r21*x12408)));
evalcond[1]=((((-1.0)*gconst17*r10*x12409))+cj0+((r11*x12408))+((r12*x12394)));
evalcond[2]=(((r02*x12394))+(((-1.0)*gconst17*r00*x12409))+(((-1.0)*x12398))+((r01*x12408)));
evalcond[3]=(((r21*x12411))+(((-1.0)*sj2*x12399))+((r21*x12400))+(((-1.0)*sj3*x12406))+(((-1.0)*r20*x12395*x12407))+((cj1*cj2))+((gconst16*x12396)));
evalcond[4]=(((x12396*x12405))+((r21*x12395))+((cj3*x12406))+((r20*x12404))+(((-1.0)*x12402))+(((-1.0)*r21*x12401*x12407))+(((-1.0)*cj2*x12399)));
evalcond[5]=(((r01*x12411))+((sj1*x12403))+(((-1.0)*r02*sj3*x12409))+((r01*x12400))+((r00*x12401))+(((-1.0)*r00*x12395*x12407))+((cj0*x12402)));
evalcond[6]=((((-1.0)*cj0*sj2*x12399))+((r00*x12394*x12400))+((cj1*x12403))+((r01*x12395))+((r02*x12410))+(((-1.0)*r01*x12401*x12407))+((r00*x12404)));
evalcond[7]=(((r11*x12411))+((sj0*x12402))+(((-1.0)*r12*sj3*x12409))+((r10*x12401))+(((-1.0)*r10*x12395*x12407))+((r11*x12400))+((sj1*x12397)));
evalcond[8]=((((-1.0)*sj1*sj2*x12398))+((r11*x12395))+((cj1*x12397))+((r12*x12410))+(((-1.0)*r11*x12401*x12407))+((r10*x12404))+((r10*x12394*x12400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12412=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x12412.valid){
continue;
}
CheckValue<IkReal> x12413 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12412.value)))+(x12413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12414=IKcos(j4);
IkReal x12415=IKsin(j4);
IkReal x12416=(gconst17*sj3);
IkReal x12417=(cj3*r20);
IkReal x12418=(cj2*sj0);
IkReal x12419=((1.0)*sj0);
IkReal x12420=((1.0)*sj1);
IkReal x12421=(cj3*gconst17);
IkReal x12422=(cj3*gconst16);
IkReal x12423=(cj1*sj2);
IkReal x12424=(cj0*cj2);
IkReal x12425=(gconst16*sj3);
IkReal x12426=(gconst17*x12415);
IkReal x12427=(r22*x12414);
IkReal x12428=((1.0)*x12415);
IkReal x12429=(gconst16*x12414);
IkReal x12430=((1.0)*x12414);
IkReal x12431=(cj3*x12414);
IkReal x12432=(x12415*x12425);
evalcond[0]=(((r21*x12429))+(((-1.0)*gconst17*r20*x12430))+((r22*x12415)));
evalcond[1]=((((-1.0)*gconst17*r10*x12430))+cj0+((r12*x12415))+((r11*x12429)));
evalcond[2]=((((-1.0)*x12419))+((r02*x12415))+(((-1.0)*gconst17*r00*x12430))+((r01*x12429)));
evalcond[3]=(((r21*x12421))+((r21*x12432))+(((-1.0)*sj3*x12427))+((gconst16*x12417))+(((-1.0)*r20*x12416*x12428))+(((-1.0)*sj2*x12420))+((cj1*cj2)));
evalcond[4]=(((r20*x12425))+(((-1.0)*x12423))+((r21*x12416))+(((-1.0)*r21*x12422*x12428))+((cj3*x12427))+(((-1.0)*cj2*x12420))+((x12417*x12426)));
evalcond[5]=(((sj1*x12424))+(((-1.0)*r02*sj3*x12430))+(((-1.0)*r00*x12416*x12428))+((r01*x12421))+((r00*x12422))+((r01*x12432))+((cj0*x12423)));
evalcond[6]=(((r01*x12416))+((cj1*x12424))+(((-1.0)*cj0*sj2*x12420))+((r02*x12431))+(((-1.0)*r01*x12422*x12428))+((r00*x12415*x12421))+((r00*x12425)));
evalcond[7]=(((sj0*x12423))+(((-1.0)*r10*x12416*x12428))+(((-1.0)*r12*sj3*x12430))+((r10*x12422))+((r11*x12432))+((r11*x12421))+((sj1*x12418)));
evalcond[8]=((((-1.0)*r11*x12422*x12428))+(((-1.0)*sj1*sj2*x12419))+((r11*x12416))+((r12*x12431))+((r10*x12425))+((r10*x12415*x12421))+((cj1*x12418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12433=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12433;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12434=((1.0)*cj5);
IkReal x12435=((((-1.0)*r21*x12434))+(((-1.0)*r20*sj5)));
j4eval[0]=x12435;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12434))+((r11*sj5))))));
j4eval[2]=IKsign(x12435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12436=cj5*cj5;
IkReal x12437=(cj3*r00);
IkReal x12438=(cj3*r01);
IkReal x12439=((1.0)*cj5*sj5);
IkReal x12440=((((-1.0)*r20*x12438*x12439))+(((-1.0)*r21*x12436*x12438))+((r21*x12438))+(((-1.0)*r21*x12437*x12439))+((r20*x12436*x12437))+((cj3*r02*r22)));
j4eval[0]=x12440;
j4eval[1]=IKsign(x12440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12441=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12441;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12442=((1.0)*cj5);
IkReal x12443=((((-1.0)*r21*x12442))+(((-1.0)*r20*sj5)));
j4eval[0]=x12443;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12442))+((r11*sj5))))));
j4eval[2]=IKsign(x12443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12444=cj5*cj5;
IkReal x12445=r01*r01;
IkReal x12446=(cj5*r00);
IkReal x12447=(r01*sj5);
IkReal x12448=((((-1.0)*x12444*x12445))+((x12444*(r00*r00)))+(r02*r02)+x12445+(((-2.0)*x12446*x12447)));
j4eval[0]=x12448;
j4eval[1]=IKsign(x12448);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12446))+x12447))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12449=cj5*cj5;
IkReal x12450=r01*r01;
IkReal x12451=(r01*sj5);
IkReal x12452=(cj5*r00);
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(IKsign((((x12449*(r00*r00)))+(((-1.0)*x12449*x12450))+(r02*r02)+x12450+(((-2.0)*x12451*x12452)))),-1);
if(!x12453.valid){
continue;
}
CheckValue<IkReal> x12454 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12452))+x12451)),IKFAST_ATAN2_MAGTHRESH);
if(!x12454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12453.value)))+(x12454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12455=IKcos(j4);
IkReal x12456=IKsin(j4);
IkReal x12457=(cj5*r00);
IkReal x12458=(cj5*r10);
IkReal x12459=(cj5*r20);
IkReal x12460=((1.0)*x12455);
IkReal x12461=((1.0)*x12456);
IkReal x12462=(sj5*x12455);
IkReal x12463=(sj5*x12456);
evalcond[0]=(((r22*x12456))+(((-1.0)*x12459*x12460))+((r21*x12462)));
evalcond[1]=((((-1.0)*x12458*x12460))+((r11*x12462))+((r12*x12456)));
evalcond[2]=((-1.0)+((r02*x12456))+((r01*x12462))+(((-1.0)*x12457*x12460)));
evalcond[3]=((((-1.0)*r02*x12460))+((r01*x12463))+(((-1.0)*x12457*x12461)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12458*x12461))+((r11*x12463))+(((-1.0)*r12*x12460)));
evalcond[5]=((((-1.0)*r22*x12460))+(((-1.0)*sj1*sj2))+(((-1.0)*x12459*x12461))+((cj1*cj2))+((r21*x12463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12464=((1.0)*cj5);
CheckValue<IkReal> x12465 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12464)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12464))+(((-1.0)*r20*sj5)))),-1);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12465.value)+(((1.5707963267949)*(x12466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKcos(j4);
IkReal x12468=IKsin(j4);
IkReal x12469=(cj5*r00);
IkReal x12470=(cj5*r10);
IkReal x12471=(cj5*r20);
IkReal x12472=((1.0)*x12467);
IkReal x12473=((1.0)*x12468);
IkReal x12474=(sj5*x12467);
IkReal x12475=(sj5*x12468);
evalcond[0]=((((-1.0)*x12471*x12472))+((r22*x12468))+((r21*x12474)));
evalcond[1]=(((r12*x12468))+((r11*x12474))+(((-1.0)*x12470*x12472)));
evalcond[2]=((-1.0)+((r01*x12474))+((r02*x12468))+(((-1.0)*x12469*x12472)));
evalcond[3]=(((r01*x12475))+(((-1.0)*r02*x12472))+(((-1.0)*x12469*x12473)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x12475))+(((-1.0)*x12470*x12473))+(((-1.0)*r12*x12472)));
evalcond[5]=((((-1.0)*r22*x12472))+(((-1.0)*sj1*sj2))+(((-1.0)*x12471*x12473))+((cj1*cj2))+((r21*x12475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12476 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12476.valid){
continue;
}
CheckValue<IkReal> x12477=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12476.value)+(((1.5707963267949)*(x12477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12478=IKcos(j4);
IkReal x12479=IKsin(j4);
IkReal x12480=(cj5*r00);
IkReal x12481=(cj5*r10);
IkReal x12482=(cj5*r20);
IkReal x12483=((1.0)*x12478);
IkReal x12484=((1.0)*x12479);
IkReal x12485=(sj5*x12478);
IkReal x12486=(sj5*x12479);
evalcond[0]=((((-1.0)*x12482*x12483))+((r22*x12479))+((r21*x12485)));
evalcond[1]=(((r12*x12479))+(((-1.0)*x12481*x12483))+((r11*x12485)));
evalcond[2]=((-1.0)+(((-1.0)*x12480*x12483))+((r01*x12485))+((r02*x12479)));
evalcond[3]=((((-1.0)*x12480*x12484))+(((-1.0)*r02*x12483))+((r01*x12486)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12483))+((cj1*sj2))+(((-1.0)*x12481*x12484))+((r11*x12486)));
evalcond[5]=((((-1.0)*x12482*x12484))+(((-1.0)*r22*x12483))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x12486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12487=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12487;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12488=((1.0)*cj5);
IkReal x12489=((((-1.0)*r21*x12488))+(((-1.0)*r20*sj5)));
j4eval[0]=x12489;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12488))+((r11*sj5))))));
j4eval[2]=IKsign(x12489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12490=cj5*cj5;
IkReal x12491=r01*r01;
IkReal x12492=(cj5*r00);
IkReal x12493=(r01*sj5);
IkReal x12494=(((x12490*(r00*r00)))+(((-2.0)*x12492*x12493))+(r02*r02)+x12491+(((-1.0)*x12490*x12491)));
j4eval[0]=x12494;
j4eval[1]=IKsign(x12494);
j4eval[2]=((IKabs(r02))+(IKabs((x12493+(((-1.0)*x12492))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12495=cj5*cj5;
IkReal x12496=r01*r01;
IkReal x12497=(r01*sj5);
IkReal x12498=(cj5*r00);
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12497*x12498))+((x12495*(r00*r00)))+(((-1.0)*x12495*x12496))+(r02*r02)+x12496)),-1);
if(!x12499.valid){
continue;
}
CheckValue<IkReal> x12500 = IKatan2WithCheck(IkReal(r02),IkReal((x12497+(((-1.0)*x12498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12499.value)))+(x12500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12501=IKcos(j4);
IkReal x12502=IKsin(j4);
IkReal x12503=(cj5*r00);
IkReal x12504=((1.0)*x12501);
IkReal x12505=(sj5*x12501);
IkReal x12506=(cj5*x12502);
IkReal x12507=((1.0)*sj5*x12502);
evalcond[0]=((((-1.0)*cj5*r20*x12504))+((r21*x12505))+((r22*x12502)));
evalcond[1]=(((r11*x12505))+((r12*x12502))+(((-1.0)*cj5*r10*x12504)));
evalcond[2]=((((-1.0)*r01*x12507))+((r02*x12501))+((x12502*x12503)));
evalcond[3]=((-1.0)+((r01*x12505))+(((-1.0)*x12503*x12504))+((r02*x12502)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12507))+((r10*x12506))+((r12*x12501)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x12506))+(((-1.0)*r21*x12507))+((cj1*cj2))+((r22*x12501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12508=((1.0)*cj5);
CheckValue<IkReal> x12509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12508))+(((-1.0)*r20*sj5)))),-1);
if(!x12509.valid){
continue;
}
CheckValue<IkReal> x12510 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12508)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12509.value)))+(x12510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12511=IKcos(j4);
IkReal x12512=IKsin(j4);
IkReal x12513=(cj5*r00);
IkReal x12514=((1.0)*x12511);
IkReal x12515=(sj5*x12511);
IkReal x12516=(cj5*x12512);
IkReal x12517=((1.0)*sj5*x12512);
evalcond[0]=((((-1.0)*cj5*r20*x12514))+((r22*x12512))+((r21*x12515)));
evalcond[1]=(((r12*x12512))+(((-1.0)*cj5*r10*x12514))+((r11*x12515)));
evalcond[2]=((((-1.0)*r01*x12517))+((x12512*x12513))+((r02*x12511)));
evalcond[3]=((-1.0)+(((-1.0)*x12513*x12514))+((r01*x12515))+((r02*x12512)));
evalcond[4]=(((cj2*sj1))+((r12*x12511))+(((-1.0)*r11*x12517))+((cj1*sj2))+((r10*x12516)));
evalcond[5]=(((r20*x12516))+(((-1.0)*sj1*sj2))+((r22*x12511))+((cj1*cj2))+(((-1.0)*r21*x12517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12518 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12518.valid){
continue;
}
CheckValue<IkReal> x12519=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12518.value)+(((1.5707963267949)*(x12519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12520=IKcos(j4);
IkReal x12521=IKsin(j4);
IkReal x12522=(cj5*r00);
IkReal x12523=((1.0)*x12520);
IkReal x12524=(sj5*x12520);
IkReal x12525=(cj5*x12521);
IkReal x12526=((1.0)*sj5*x12521);
evalcond[0]=(((r22*x12521))+((r21*x12524))+(((-1.0)*cj5*r20*x12523)));
evalcond[1]=((((-1.0)*cj5*r10*x12523))+((r11*x12524))+((r12*x12521)));
evalcond[2]=(((x12521*x12522))+(((-1.0)*r01*x12526))+((r02*x12520)));
evalcond[3]=((-1.0)+(((-1.0)*x12522*x12523))+((r01*x12524))+((r02*x12521)));
evalcond[4]=(((r10*x12525))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x12526))+((r12*x12520)));
evalcond[5]=(((r22*x12520))+(((-1.0)*r21*x12526))+(((-1.0)*sj1*sj2))+((r20*x12525))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12527=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12527);
rxp0_2=(py*r00);
rxp1_0=(r21*x12527);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12528=(r01*sj5);
IkReal x12529=((1.0)*cj5*r00);
j4eval[0]=(((sj3*x12528))+(((-1.0)*sj3*x12529)));
j4eval[1]=((((-1.0)*x12529))+x12528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12530=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12530);
rxp0_2=(py*r00);
rxp1_0=(r21*x12530);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12531=(cj5*r00);
IkReal x12532=(r01*sj5);
j4eval[0]=((((-1.0)*cj3*x12532))+((cj3*x12531)));
j4eval[1]=((((-1.0)*x12531))+x12532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12533=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12533);
rxp0_2=(py*r00);
rxp1_0=(r21*x12533);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12534=((1.0)*cj3);
CheckValue<IkReal> x12535=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x12535.valid){
continue;
}
CheckValue<IkReal> x12536=IKPowWithIntegerCheck(r12,-1);
if(!x12536.valid){
continue;
}
CheckValue<IkReal> x12537=IKPowWithIntegerCheck(sj3,-1);
if(!x12537.valid){
continue;
}
if( IKabs(((x12535.value)*(((((-1.0)*r00*sj5*x12534))+(((-1.0)*cj5*r01*x12534)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12536.value)*(x12537.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12535.value)*(((((-1.0)*r00*sj5*x12534))+(((-1.0)*cj5*r01*x12534))))))+IKsqr(((x12536.value)*(x12537.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12535.value)*(((((-1.0)*r00*sj5*x12534))+(((-1.0)*cj5*r01*x12534))))), ((x12536.value)*(x12537.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12538=IKcos(j4);
IkReal x12539=IKsin(j4);
IkReal x12540=(cj1*cj2);
IkReal x12541=(cj5*r00);
IkReal x12542=(cj5*r01);
IkReal x12543=((1.0)*sj1);
IkReal x12544=(r01*sj5);
IkReal x12545=(cj5*r20);
IkReal x12546=(cj1*sj2);
IkReal x12547=(r00*sj5);
IkReal x12548=(cj5*r21);
IkReal x12549=(r20*sj5);
IkReal x12550=(r21*sj5);
IkReal x12551=(sj2*x12543);
IkReal x12552=((1.0)*x12538);
IkReal x12553=(sj5*x12538);
IkReal x12554=(cj3*x12539);
IkReal x12555=(sj3*x12539);
evalcond[0]=(r12*x12539);
evalcond[1]=((((-1.0)*x12545*x12552))+((x12538*x12550)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12552))+x12546);
evalcond[3]=(((cj3*r12*x12538))+x12540+(((-1.0)*x12551)));
evalcond[4]=((-1.0)+(((-1.0)*x12541*x12552))+((x12538*x12544)));
evalcond[5]=(((cj3*x12547))+((cj3*x12542))+(((-1.0)*x12541*x12555))+((x12544*x12555)));
evalcond[6]=((((-1.0)*x12544*x12554))+((sj3*x12542))+((sj3*x12547))+((x12541*x12554)));
evalcond[7]=(((x12550*x12555))+((cj3*x12549))+((cj3*x12548))+(((-1.0)*x12545*x12555))+x12540+(((-1.0)*x12551)));
evalcond[8]=((((-1.0)*x12546))+((x12545*x12554))+((sj3*x12548))+((sj3*x12549))+(((-1.0)*x12550*x12554))+(((-1.0)*cj2*x12543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12556=(cj5*r00);
IkReal x12557=(r01*sj5);
IkReal x12558=((1.0)*sj3);
CheckValue<IkReal> x12559=IKPowWithIntegerCheck((((cj3*x12556))+(((-1.0)*cj3*x12557))),-1);
if(!x12559.valid){
continue;
}
CheckValue<IkReal> x12560=IKPowWithIntegerCheck(((((-1.0)*x12556))+x12557),-1);
if(!x12560.valid){
continue;
}
if( IKabs(((x12559.value)*(((((-1.0)*r00*sj5*x12558))+(((-1.0)*cj5*r01*x12558)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12560.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12559.value)*(((((-1.0)*r00*sj5*x12558))+(((-1.0)*cj5*r01*x12558))))))+IKsqr(x12560.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12559.value)*(((((-1.0)*r00*sj5*x12558))+(((-1.0)*cj5*r01*x12558))))), x12560.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12561=IKcos(j4);
IkReal x12562=IKsin(j4);
IkReal x12563=(cj1*cj2);
IkReal x12564=(cj5*r00);
IkReal x12565=(cj5*r01);
IkReal x12566=((1.0)*sj1);
IkReal x12567=(r01*sj5);
IkReal x12568=(cj5*r20);
IkReal x12569=(cj1*sj2);
IkReal x12570=(r00*sj5);
IkReal x12571=(cj5*r21);
IkReal x12572=(r20*sj5);
IkReal x12573=(r21*sj5);
IkReal x12574=(sj2*x12566);
IkReal x12575=((1.0)*x12561);
IkReal x12576=(sj5*x12561);
IkReal x12577=(cj3*x12562);
IkReal x12578=(sj3*x12562);
evalcond[0]=(r12*x12562);
evalcond[1]=(((x12561*x12573))+(((-1.0)*x12568*x12575)));
evalcond[2]=(((cj2*sj1))+x12569+(((-1.0)*r12*sj3*x12575)));
evalcond[3]=((((-1.0)*x12574))+x12563+((cj3*r12*x12561)));
evalcond[4]=((-1.0)+(((-1.0)*x12564*x12575))+((x12561*x12567)));
evalcond[5]=(((cj3*x12565))+(((-1.0)*x12564*x12578))+((x12567*x12578))+((cj3*x12570)));
evalcond[6]=(((sj3*x12570))+(((-1.0)*x12567*x12577))+((x12564*x12577))+((sj3*x12565)));
evalcond[7]=((((-1.0)*x12568*x12578))+(((-1.0)*x12574))+((x12573*x12578))+x12563+((cj3*x12571))+((cj3*x12572)));
evalcond[8]=(((sj3*x12571))+((sj3*x12572))+((x12568*x12577))+(((-1.0)*x12569))+(((-1.0)*cj2*x12566))+(((-1.0)*x12573*x12577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12579=((1.0)*cj3);
IkReal x12580=(r01*sj5);
IkReal x12581=((1.0)*cj5*r00);
CheckValue<IkReal> x12582=IKPowWithIntegerCheck(((((-1.0)*sj3*x12581))+((sj3*x12580))),-1);
if(!x12582.valid){
continue;
}
CheckValue<IkReal> x12583=IKPowWithIntegerCheck((x12580+(((-1.0)*x12581))),-1);
if(!x12583.valid){
continue;
}
if( IKabs(((x12582.value)*(((((-1.0)*r00*sj5*x12579))+(((-1.0)*cj5*r01*x12579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12583.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12582.value)*(((((-1.0)*r00*sj5*x12579))+(((-1.0)*cj5*r01*x12579))))))+IKsqr(x12583.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12582.value)*(((((-1.0)*r00*sj5*x12579))+(((-1.0)*cj5*r01*x12579))))), x12583.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12584=IKcos(j4);
IkReal x12585=IKsin(j4);
IkReal x12586=(cj1*cj2);
IkReal x12587=(cj5*r00);
IkReal x12588=(cj5*r01);
IkReal x12589=((1.0)*sj1);
IkReal x12590=(r01*sj5);
IkReal x12591=(cj5*r20);
IkReal x12592=(cj1*sj2);
IkReal x12593=(r00*sj5);
IkReal x12594=(cj5*r21);
IkReal x12595=(r20*sj5);
IkReal x12596=(r21*sj5);
IkReal x12597=(sj2*x12589);
IkReal x12598=((1.0)*x12584);
IkReal x12599=(sj5*x12584);
IkReal x12600=(cj3*x12585);
IkReal x12601=(sj3*x12585);
evalcond[0]=(r12*x12585);
evalcond[1]=((((-1.0)*x12591*x12598))+((x12584*x12596)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12598))+x12592);
evalcond[3]=((((-1.0)*x12597))+x12586+((cj3*r12*x12584)));
evalcond[4]=((-1.0)+((x12584*x12590))+(((-1.0)*x12587*x12598)));
evalcond[5]=(((cj3*x12588))+((cj3*x12593))+((x12590*x12601))+(((-1.0)*x12587*x12601)));
evalcond[6]=((((-1.0)*x12590*x12600))+((sj3*x12588))+((sj3*x12593))+((x12587*x12600)));
evalcond[7]=((((-1.0)*x12591*x12601))+((cj3*x12594))+((cj3*x12595))+(((-1.0)*x12597))+x12586+((x12596*x12601)));
evalcond[8]=(((x12591*x12600))+(((-1.0)*cj2*x12589))+(((-1.0)*x12596*x12600))+((sj3*x12595))+((sj3*x12594))+(((-1.0)*x12592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12602=cj5*cj5;
IkReal x12603=((1.0)*r00);
IkReal x12604=(r01*sj3);
IkReal x12605=(sj3*sj5);
IkReal x12606=(r21*sj3);
IkReal x12607=((1.0)*cj5);
IkReal x12608=(cj5*r21*sj5);
IkReal x12609=(cj3*r01*r21);
IkReal x12610=(r20*x12602);
CheckValue<IkReal> x12611=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12602*x12609))+(((-1.0)*cj3*x12603*x12608))+x12609+((cj3*r00*x12610))+((cj3*r02*r22))+(((-1.0)*cj3*r01*r20*sj5*x12607)))),-1);
if(!x12611.valid){
continue;
}
CheckValue<IkReal> x12612 = IKatan2WithCheck(IkReal((((r00*x12606))+((x12604*x12608))+(((-1.0)*x12604*x12610))+(((-1.0)*x12602*x12603*x12606))+(((-1.0)*cj5*r20*x12603*x12605)))),IkReal(((((-1.0)*r22*x12603*x12605))+(((-1.0)*r22*x12604*x12607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12611.value)))+(x12612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12613=IKcos(j4);
IkReal x12614=IKsin(j4);
IkReal x12615=(cj1*cj2);
IkReal x12616=((1.0)*cj5);
IkReal x12617=(cj5*r01);
IkReal x12618=((1.0)*sj1);
IkReal x12619=(cj3*sj5);
IkReal x12620=(cj3*cj5);
IkReal x12621=(cj5*sj3);
IkReal x12622=(sj3*sj5);
IkReal x12623=(cj1*sj2);
IkReal x12624=(sj2*x12618);
IkReal x12625=(sj5*x12613);
IkReal x12626=(sj3*x12614);
IkReal x12627=((1.0)*x12614);
IkReal x12628=(cj3*x12613);
IkReal x12629=((1.0)*sj3*x12613);
evalcond[0]=(((r21*x12625))+(((-1.0)*r20*x12613*x12616))+((r22*x12614)));
evalcond[1]=((((-1.0)*r10*x12613*x12616))+((r11*x12625))+((r12*x12614)));
evalcond[2]=((-1.0)+((r02*x12614))+(((-1.0)*r00*x12613*x12616))+((r01*x12625)));
evalcond[3]=(((r02*x12628))+((sj3*x12617))+(((-1.0)*r01*x12619*x12627))+((r00*x12614*x12620))+((r00*x12622)));
evalcond[4]=((((-1.0)*r02*x12629))+(((-1.0)*r00*x12616*x12626))+((cj3*x12617))+((r01*x12614*x12622))+((r00*x12619)));
evalcond[5]=(((cj2*sj1))+((r11*x12614*x12622))+(((-1.0)*r12*x12629))+x12623+(((-1.0)*r10*x12616*x12626))+((r11*x12620))+((r10*x12619)));
evalcond[6]=((((-1.0)*x12624))+(((-1.0)*r11*x12619*x12627))+((r10*x12614*x12620))+x12615+((r12*x12628))+((r10*x12622))+((r11*x12621)));
evalcond[7]=((((-1.0)*x12624))+(((-1.0)*r22*x12629))+((r21*x12620))+(((-1.0)*r20*x12616*x12626))+((r20*x12619))+x12615+((r21*x12614*x12622)));
evalcond[8]=((((-1.0)*cj2*x12618))+((r22*x12628))+((r21*x12621))+(((-1.0)*x12623))+(((-1.0)*r21*x12619*x12627))+((r20*x12614*x12620))+((r20*x12622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12630=((1.0)*cj5);
CheckValue<IkReal> x12631 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12630)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12630))+(((-1.0)*r20*sj5)))),-1);
if(!x12632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12631.value)+(((1.5707963267949)*(x12632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12633=IKcos(j4);
IkReal x12634=IKsin(j4);
IkReal x12635=(cj1*cj2);
IkReal x12636=((1.0)*cj5);
IkReal x12637=(cj5*r01);
IkReal x12638=((1.0)*sj1);
IkReal x12639=(cj3*sj5);
IkReal x12640=(cj3*cj5);
IkReal x12641=(cj5*sj3);
IkReal x12642=(sj3*sj5);
IkReal x12643=(cj1*sj2);
IkReal x12644=(sj2*x12638);
IkReal x12645=(sj5*x12633);
IkReal x12646=(sj3*x12634);
IkReal x12647=((1.0)*x12634);
IkReal x12648=(cj3*x12633);
IkReal x12649=((1.0)*sj3*x12633);
evalcond[0]=((((-1.0)*r20*x12633*x12636))+((r22*x12634))+((r21*x12645)));
evalcond[1]=(((r12*x12634))+(((-1.0)*r10*x12633*x12636))+((r11*x12645)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12633*x12636))+((r01*x12645))+((r02*x12634)));
evalcond[3]=(((sj3*x12637))+(((-1.0)*r01*x12639*x12647))+((r00*x12642))+((r00*x12634*x12640))+((r02*x12648)));
evalcond[4]=((((-1.0)*r02*x12649))+(((-1.0)*r00*x12636*x12646))+((r00*x12639))+((cj3*x12637))+((r01*x12634*x12642)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12636*x12646))+((r11*x12634*x12642))+x12643+((r10*x12639))+(((-1.0)*r12*x12649))+((r11*x12640)));
evalcond[6]=(((r12*x12648))+x12635+(((-1.0)*x12644))+((r10*x12642))+((r10*x12634*x12640))+(((-1.0)*r11*x12639*x12647))+((r11*x12641)));
evalcond[7]=(((r21*x12634*x12642))+((r20*x12639))+(((-1.0)*r20*x12636*x12646))+(((-1.0)*r22*x12649))+x12635+(((-1.0)*x12644))+((r21*x12640)));
evalcond[8]=(((r20*x12634*x12640))+(((-1.0)*r21*x12639*x12647))+(((-1.0)*x12643))+(((-1.0)*cj2*x12638))+((r20*x12642))+((r22*x12648))+((r21*x12641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12650 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12650.valid){
continue;
}
CheckValue<IkReal> x12651=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12650.value)+(((1.5707963267949)*(x12651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12652=IKcos(j4);
IkReal x12653=IKsin(j4);
IkReal x12654=(cj1*cj2);
IkReal x12655=((1.0)*cj5);
IkReal x12656=(cj5*r01);
IkReal x12657=((1.0)*sj1);
IkReal x12658=(cj3*sj5);
IkReal x12659=(cj3*cj5);
IkReal x12660=(cj5*sj3);
IkReal x12661=(sj3*sj5);
IkReal x12662=(cj1*sj2);
IkReal x12663=(sj2*x12657);
IkReal x12664=(sj5*x12652);
IkReal x12665=(sj3*x12653);
IkReal x12666=((1.0)*x12653);
IkReal x12667=(cj3*x12652);
IkReal x12668=((1.0)*sj3*x12652);
evalcond[0]=(((r21*x12664))+((r22*x12653))+(((-1.0)*r20*x12652*x12655)));
evalcond[1]=(((r11*x12664))+((r12*x12653))+(((-1.0)*r10*x12652*x12655)));
evalcond[2]=((-1.0)+((r02*x12653))+(((-1.0)*r00*x12652*x12655))+((r01*x12664)));
evalcond[3]=((((-1.0)*r01*x12658*x12666))+((r02*x12667))+((sj3*x12656))+((r00*x12653*x12659))+((r00*x12661)));
evalcond[4]=(((cj3*x12656))+(((-1.0)*r02*x12668))+(((-1.0)*r00*x12655*x12665))+((r01*x12653*x12661))+((r00*x12658)));
evalcond[5]=(((cj2*sj1))+((r10*x12658))+((r11*x12653*x12661))+((r11*x12659))+(((-1.0)*r10*x12655*x12665))+(((-1.0)*r12*x12668))+x12662);
evalcond[6]=(((r10*x12661))+(((-1.0)*x12663))+((r12*x12667))+(((-1.0)*r11*x12658*x12666))+((r11*x12660))+x12654+((r10*x12653*x12659)));
evalcond[7]=((((-1.0)*r22*x12668))+(((-1.0)*x12663))+((r21*x12659))+x12654+(((-1.0)*r20*x12655*x12665))+((r20*x12658))+((r21*x12653*x12661)));
evalcond[8]=(((r21*x12660))+((r22*x12667))+((r20*x12653*x12659))+(((-1.0)*x12662))+(((-1.0)*r21*x12658*x12666))+((r20*x12661))+(((-1.0)*cj2*x12657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12669=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12669;
j4eval[1]=IKsign(x12669);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12670=((1.0)*cj5);
IkReal x12671=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12670)));
j4eval[0]=x12671;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12670)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12672=cj5*cj5;
IkReal x12673=(cj3*r00);
IkReal x12674=(cj3*r01);
IkReal x12675=((1.0)*cj5*sj5);
IkReal x12676=(((r21*x12674))+((r20*x12672*x12673))+(((-1.0)*r21*x12672*x12674))+((cj3*r02*r22))+(((-1.0)*r21*x12673*x12675))+(((-1.0)*r20*x12674*x12675)));
j4eval[0]=x12676;
j4eval[1]=IKsign(x12676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12677=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12677;
j4eval[1]=IKsign(x12677);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12678=((1.0)*cj5);
IkReal x12679=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12678)));
j4eval[0]=x12679;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12678)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12680=cj5*cj5;
IkReal x12681=r01*r01;
IkReal x12682=(r01*sj5);
IkReal x12683=(cj5*r00);
IkReal x12684=((((-1.0)*(r02*r02)))+(((2.0)*x12682*x12683))+(((-1.0)*x12680*(r00*r00)))+((x12680*x12681))+(((-1.0)*x12681)));
j4eval[0]=x12684;
j4eval[1]=IKsign(x12684);
j4eval[2]=((IKabs(r02))+(IKabs((x12682+(((-1.0)*x12683))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12685=cj5*cj5;
IkReal x12686=r01*r01;
IkReal x12687=(r01*sj5);
IkReal x12688=(cj5*r00);
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal(r02),IkReal((x12687+(((-1.0)*x12688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x12687*x12688))+((x12685*x12686))+(((-1.0)*x12685*(r00*r00)))+(((-1.0)*x12686)))),-1);
if(!x12690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12689.value)+(((1.5707963267949)*(x12690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12691=IKcos(j4);
IkReal x12692=IKsin(j4);
IkReal x12693=(cj5*r00);
IkReal x12694=(cj5*r10);
IkReal x12695=((1.0)*sj1);
IkReal x12696=(cj5*r20);
IkReal x12697=((1.0)*x12691);
IkReal x12698=((1.0)*x12692);
IkReal x12699=(sj5*x12691);
IkReal x12700=(sj5*x12692);
evalcond[0]=(((r22*x12692))+((r21*x12699))+(((-1.0)*x12696*x12697)));
evalcond[1]=(((r11*x12699))+((r12*x12692))+(((-1.0)*x12694*x12697)));
evalcond[2]=((1.0)+((r02*x12692))+(((-1.0)*x12693*x12697))+((r01*x12699)));
evalcond[3]=((((-1.0)*r02*x12697))+((r01*x12700))+(((-1.0)*x12693*x12698)));
evalcond[4]=((((-1.0)*r22*x12697))+((r21*x12700))+(((-1.0)*sj2*x12695))+(((-1.0)*x12696*x12698))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x12697))+((r11*x12700))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12695))+(((-1.0)*x12694*x12698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12701=((1.0)*cj5);
CheckValue<IkReal> x12702 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12701)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12701))+(((-1.0)*r10*sj5)))),-1);
if(!x12703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12702.value)+(((1.5707963267949)*(x12703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12704=IKcos(j4);
IkReal x12705=IKsin(j4);
IkReal x12706=(cj5*r00);
IkReal x12707=(cj5*r10);
IkReal x12708=((1.0)*sj1);
IkReal x12709=(cj5*r20);
IkReal x12710=((1.0)*x12704);
IkReal x12711=((1.0)*x12705);
IkReal x12712=(sj5*x12704);
IkReal x12713=(sj5*x12705);
evalcond[0]=(((r21*x12712))+((r22*x12705))+(((-1.0)*x12709*x12710)));
evalcond[1]=((((-1.0)*x12707*x12710))+((r12*x12705))+((r11*x12712)));
evalcond[2]=((1.0)+(((-1.0)*x12706*x12710))+((r02*x12705))+((r01*x12712)));
evalcond[3]=((((-1.0)*x12706*x12711))+((r01*x12713))+(((-1.0)*r02*x12710)));
evalcond[4]=(((r21*x12713))+(((-1.0)*sj2*x12708))+(((-1.0)*r22*x12710))+(((-1.0)*x12709*x12711))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r12*x12710))+(((-1.0)*cj2*x12708))+(((-1.0)*x12707*x12711))+((r11*x12713))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12714.value)))+(x12715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKcos(j4);
IkReal x12717=IKsin(j4);
IkReal x12718=(cj5*r00);
IkReal x12719=(cj5*r10);
IkReal x12720=((1.0)*sj1);
IkReal x12721=(cj5*r20);
IkReal x12722=((1.0)*x12716);
IkReal x12723=((1.0)*x12717);
IkReal x12724=(sj5*x12716);
IkReal x12725=(sj5*x12717);
evalcond[0]=(((r22*x12717))+((r21*x12724))+(((-1.0)*x12721*x12722)));
evalcond[1]=(((r12*x12717))+((r11*x12724))+(((-1.0)*x12719*x12722)));
evalcond[2]=((1.0)+((r02*x12717))+(((-1.0)*x12718*x12722))+((r01*x12724)));
evalcond[3]=((((-1.0)*r02*x12722))+(((-1.0)*x12718*x12723))+((r01*x12725)));
evalcond[4]=((((-1.0)*sj2*x12720))+((r21*x12725))+(((-1.0)*r22*x12722))+((cj1*cj2))+(((-1.0)*x12721*x12723)));
evalcond[5]=(((r11*x12725))+(((-1.0)*cj1*sj2))+(((-1.0)*x12719*x12723))+(((-1.0)*r12*x12722))+(((-1.0)*cj2*x12720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12726=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12726;
j4eval[1]=IKsign(x12726);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12727=((1.0)*cj5);
IkReal x12728=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12727)));
j4eval[0]=x12728;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12727))))));
j4eval[2]=IKsign(x12728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12729=cj5*cj5;
IkReal x12730=r01*r01;
IkReal x12731=(r01*sj5);
IkReal x12732=(cj5*r00);
IkReal x12733=((((-1.0)*x12729*(r00*r00)))+(((-1.0)*x12730))+(((-1.0)*(r02*r02)))+((x12729*x12730))+(((2.0)*x12731*x12732)));
j4eval[0]=x12733;
j4eval[1]=IKsign(x12733);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12732))+x12731))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12734=cj5*cj5;
IkReal x12735=r01*r01;
IkReal x12736=(r01*sj5);
IkReal x12737=(cj5*r00);
CheckValue<IkReal> x12738 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12737))+x12736)),IKFAST_ATAN2_MAGTHRESH);
if(!x12738.valid){
continue;
}
CheckValue<IkReal> x12739=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12735))+((x12734*x12735))+(((-1.0)*(r02*r02)))+(((2.0)*x12736*x12737))+(((-1.0)*x12734*(r00*r00))))),-1);
if(!x12739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12738.value)+(((1.5707963267949)*(x12739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12740=IKcos(j4);
IkReal x12741=IKsin(j4);
IkReal x12742=(cj5*r00);
IkReal x12743=((1.0)*sj2);
IkReal x12744=((1.0)*x12740);
IkReal x12745=(sj5*x12740);
IkReal x12746=(cj5*x12741);
IkReal x12747=((1.0)*sj5*x12741);
evalcond[0]=(((r22*x12741))+(((-1.0)*cj5*r20*x12744))+((r21*x12745)));
evalcond[1]=(((r11*x12745))+(((-1.0)*cj5*r10*x12744))+((r12*x12741)));
evalcond[2]=(((r02*x12740))+((x12741*x12742))+(((-1.0)*r01*x12747)));
evalcond[3]=((1.0)+((r02*x12741))+(((-1.0)*x12742*x12744))+((r01*x12745)));
evalcond[4]=(((r22*x12740))+(((-1.0)*sj1*x12743))+((r20*x12746))+((cj1*cj2))+(((-1.0)*r21*x12747)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r11*x12747))+((r10*x12746))+(((-1.0)*cj1*x12743))+((r12*x12740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12748=((1.0)*cj5);
CheckValue<IkReal> x12749 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12748)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12749.valid){
continue;
}
CheckValue<IkReal> x12750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12748)))),-1);
if(!x12750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12749.value)+(((1.5707963267949)*(x12750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12751=IKcos(j4);
IkReal x12752=IKsin(j4);
IkReal x12753=(cj5*r00);
IkReal x12754=((1.0)*sj2);
IkReal x12755=((1.0)*x12751);
IkReal x12756=(sj5*x12751);
IkReal x12757=(cj5*x12752);
IkReal x12758=((1.0)*sj5*x12752);
evalcond[0]=(((r22*x12752))+(((-1.0)*cj5*r20*x12755))+((r21*x12756)));
evalcond[1]=(((r11*x12756))+(((-1.0)*cj5*r10*x12755))+((r12*x12752)));
evalcond[2]=(((r02*x12751))+((x12752*x12753))+(((-1.0)*r01*x12758)));
evalcond[3]=((1.0)+(((-1.0)*x12753*x12755))+((r02*x12752))+((r01*x12756)));
evalcond[4]=((((-1.0)*sj1*x12754))+((r22*x12751))+((r20*x12757))+((cj1*cj2))+(((-1.0)*r21*x12758)));
evalcond[5]=((((-1.0)*r11*x12758))+(((-1.0)*cj2*sj1))+((r10*x12757))+((r12*x12751))+(((-1.0)*cj1*x12754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12759=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12759.valid){
continue;
}
CheckValue<IkReal> x12760 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12759.value)))+(x12760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12761=IKcos(j4);
IkReal x12762=IKsin(j4);
IkReal x12763=(cj5*r00);
IkReal x12764=((1.0)*sj2);
IkReal x12765=((1.0)*x12761);
IkReal x12766=(sj5*x12761);
IkReal x12767=(cj5*x12762);
IkReal x12768=((1.0)*sj5*x12762);
evalcond[0]=(((r21*x12766))+((r22*x12762))+(((-1.0)*cj5*r20*x12765)));
evalcond[1]=(((r12*x12762))+(((-1.0)*cj5*r10*x12765))+((r11*x12766)));
evalcond[2]=((((-1.0)*r01*x12768))+((x12762*x12763))+((r02*x12761)));
evalcond[3]=((1.0)+(((-1.0)*x12763*x12765))+((r02*x12762))+((r01*x12766)));
evalcond[4]=((((-1.0)*r21*x12768))+((r22*x12761))+(((-1.0)*sj1*x12764))+((r20*x12767))+((cj1*cj2)));
evalcond[5]=(((r12*x12761))+(((-1.0)*r11*x12768))+(((-1.0)*cj2*sj1))+((r10*x12767))+(((-1.0)*cj1*x12764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12769=((-1.0)*r10);
IkReal x12771 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12771)==0){
continue;
}
IkReal x12770=pow(x12771,-0.5);
CheckValue<IkReal> x12772 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12769),IKFAST_ATAN2_MAGTHRESH);
if(!x12772.valid){
continue;
}
IkReal gconst54=((-1.0)*(x12772.value));
IkReal gconst55=(r11*x12770);
IkReal gconst56=(x12769*x12770);
CheckValue<IkReal> x12773 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12773.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12773.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12774=((-1.0)*r10);
IkReal x12775=x12770;
CheckValue<IkReal> x12777 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12774),IKFAST_ATAN2_MAGTHRESH);
if(!x12777.valid){
continue;
}
IkReal x12776=((-1.0)*(x12777.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12776;
IkReal gconst54=x12776;
IkReal gconst55=(r11*x12775);
IkReal gconst56=(x12774*x12775);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12778=((-1.0)*r10);
IkReal x12779=x12770;
CheckValue<IkReal> x12781 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12778),IKFAST_ATAN2_MAGTHRESH);
if(!x12781.valid){
continue;
}
IkReal x12780=((-1.0)*(x12781.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12780;
IkReal gconst54=x12780;
IkReal gconst55=(r11*x12779);
IkReal gconst56=(x12778*x12779);
CheckValue<IkReal> x12789=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12789.valid){
continue;
}
IkReal x12782=x12789.value;
IkReal x12783=(cj3*x12782);
IkReal x12784=(r00*x12783);
IkReal x12785=(r21*x12783);
IkReal x12786=(r20*x12783);
IkReal x12787=(r01*x12783);
IkReal x12788=(r10*r11*x12783);
j4eval[0]=IKsign((((r20*x12784*(r10*r10)))+((r10*r11*r21*x12784))+((r01*x12785*(r11*r11)))+((r01*r10*r11*x12786))+((cj3*r02*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12790=gconst56*gconst56;
IkReal x12791=gconst55*gconst55;
IkReal x12792=(r01*sj3);
IkReal x12793=(cj3*r00);
IkReal x12794=((1.0)*sj3);
IkReal x12795=(cj3*r01);
IkReal x12796=((1.0)*r22);
IkReal x12797=(gconst55*gconst56*r20);
IkReal x12798=(gconst55*gconst56*r21);
IkReal x12799=(r21*x12791);
IkReal x12800=(r20*x12790);
CheckValue<IkReal> x12801 = IKatan2WithCheck(IkReal(((((-1.0)*x12793*x12797))+(((-1.0)*x12795*x12800))+((x12795*x12798))+((x12793*x12799)))),IkReal(((((-1.0)*gconst55*x12793*x12796))+(((-1.0)*gconst56*x12795*x12796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12801.valid){
continue;
}
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign((((x12792*x12797))+(((-1.0)*r02*r22*x12794))+((r00*sj3*x12798))+(((-1.0)*x12792*x12799))+(((-1.0)*r00*x12794*x12800)))),-1);
if(!x12802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12801.value)+(((1.5707963267949)*(x12802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12803=IKcos(j4);
IkReal x12804=IKsin(j4);
IkReal x12805=((1.0)*cj3);
IkReal x12806=(cj3*gconst56);
IkReal x12807=(sj1*sj2);
IkReal x12808=(gconst55*r10);
IkReal x12809=(gconst55*sj3);
IkReal x12810=((1.0)*cj1);
IkReal x12811=(gconst56*sj3);
IkReal x12812=(cj3*gconst55);
IkReal x12813=(sj2*x12810);
IkReal x12814=((1.0)*cj2*sj1);
IkReal x12815=(r00*x12804);
IkReal x12816=(gconst55*x12803);
IkReal x12817=((1.0)*x12803);
IkReal x12818=(cj3*x12803);
IkReal x12819=(r01*x12804);
IkReal x12820=(r10*x12804);
IkReal x12821=(r20*x12804);
IkReal x12822=(r11*x12804);
IkReal x12823=(gconst55*r21*x12804);
IkReal x12824=(x12814+x12813);
evalcond[0]=(((r21*x12816))+(((-1.0)*gconst56*r20*x12817))+((r22*x12804)));
evalcond[1]=((((-1.0)*gconst56*r10*x12817))+((r12*x12804))+((r11*x12816)));
evalcond[2]=((1.0)+((r02*x12804))+((r01*x12816))+(((-1.0)*gconst56*r00*x12817)));
evalcond[3]=(((x12806*x12815))+((r02*x12818))+((r01*x12811))+(((-1.0)*gconst55*x12805*x12819))+((r00*x12809)));
evalcond[4]=((((-1.0)*x12811*x12815))+((r00*x12812))+((r01*x12806))+((x12809*x12819))+(((-1.0)*r02*sj3*x12817)));
evalcond[5]=(x12807+((r12*x12818))+((x12806*x12820))+((r11*x12811))+(((-1.0)*cj2*x12810))+(((-1.0)*gconst55*x12805*x12822))+((sj3*x12808)));
evalcond[6]=((((-1.0)*x12811*x12821))+((r20*x12812))+(((-1.0)*r22*sj3*x12817))+((r21*x12806))+((r21*x12804*x12809))+(((-1.0)*x12807))+((cj1*cj2)));
evalcond[7]=(((r20*x12809))+((r21*x12811))+((x12806*x12821))+(((-1.0)*x12805*x12823))+(((-1.0)*x12824))+((r22*x12818)));
evalcond[8]=((((-1.0)*x12811*x12820))+((cj3*x12808))+((r11*x12806))+(((-1.0)*r12*sj3*x12817))+((x12809*x12822))+(((-1.0)*x12824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12825=gconst55*gconst55;
IkReal x12826=gconst56*gconst56;
IkReal x12827=(r01*r21);
IkReal x12828=(gconst55*gconst56);
IkReal x12829=(cj3*r00);
IkReal x12830=((1.0)*sj3);
IkReal x12831=(r20*x12826);
CheckValue<IkReal> x12832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12828*x12829))+(((-1.0)*cj3*r01*r20*x12828))+((cj3*x12825*x12827))+((cj3*r02*r22))+((x12829*x12831)))),-1);
if(!x12832.valid){
continue;
}
CheckValue<IkReal> x12833 = IKatan2WithCheck(IkReal(((((-1.0)*r00*r20*x12828*x12830))+((sj3*x12827*x12828))+((r00*r21*sj3*x12825))+(((-1.0)*r01*x12830*x12831)))),IkReal(((((-1.0)*gconst56*r01*r22*x12830))+(((-1.0)*gconst55*r00*r22*x12830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12832.value)))+(x12833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12834=IKcos(j4);
IkReal x12835=IKsin(j4);
IkReal x12836=((1.0)*cj3);
IkReal x12837=(cj3*gconst56);
IkReal x12838=(sj1*sj2);
IkReal x12839=(gconst55*r10);
IkReal x12840=(gconst55*sj3);
IkReal x12841=((1.0)*cj1);
IkReal x12842=(gconst56*sj3);
IkReal x12843=(cj3*gconst55);
IkReal x12844=(sj2*x12841);
IkReal x12845=((1.0)*cj2*sj1);
IkReal x12846=(r00*x12835);
IkReal x12847=(gconst55*x12834);
IkReal x12848=((1.0)*x12834);
IkReal x12849=(cj3*x12834);
IkReal x12850=(r01*x12835);
IkReal x12851=(r10*x12835);
IkReal x12852=(r20*x12835);
IkReal x12853=(r11*x12835);
IkReal x12854=(gconst55*r21*x12835);
IkReal x12855=(x12844+x12845);
evalcond[0]=(((r22*x12835))+(((-1.0)*gconst56*r20*x12848))+((r21*x12847)));
evalcond[1]=((((-1.0)*gconst56*r10*x12848))+((r12*x12835))+((r11*x12847)));
evalcond[2]=((1.0)+((r01*x12847))+(((-1.0)*gconst56*r00*x12848))+((r02*x12835)));
evalcond[3]=(((x12837*x12846))+((r01*x12842))+((r00*x12840))+((r02*x12849))+(((-1.0)*gconst55*x12836*x12850)));
evalcond[4]=(((x12840*x12850))+(((-1.0)*r02*sj3*x12848))+((r00*x12843))+(((-1.0)*x12842*x12846))+((r01*x12837)));
evalcond[5]=(((x12837*x12851))+x12838+((sj3*x12839))+(((-1.0)*cj2*x12841))+((r11*x12842))+((r12*x12849))+(((-1.0)*gconst55*x12836*x12853)));
evalcond[6]=(((r21*x12835*x12840))+((r21*x12837))+(((-1.0)*x12842*x12852))+((r20*x12843))+((cj1*cj2))+(((-1.0)*x12838))+(((-1.0)*r22*sj3*x12848)));
evalcond[7]=(((x12837*x12852))+((r22*x12849))+(((-1.0)*x12836*x12854))+((r21*x12842))+((r20*x12840))+(((-1.0)*x12855)));
evalcond[8]=(((cj3*x12839))+((x12840*x12853))+((r11*x12837))+(((-1.0)*x12842*x12851))+(((-1.0)*x12855))+(((-1.0)*r12*sj3*x12848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12856=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x12856.valid){
continue;
}
CheckValue<IkReal> x12857 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*r10))+((gconst55*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12856.value)))+(x12857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12858=IKcos(j4);
IkReal x12859=IKsin(j4);
IkReal x12860=((1.0)*cj3);
IkReal x12861=(cj3*gconst56);
IkReal x12862=(sj1*sj2);
IkReal x12863=(gconst55*r10);
IkReal x12864=(gconst55*sj3);
IkReal x12865=((1.0)*cj1);
IkReal x12866=(gconst56*sj3);
IkReal x12867=(cj3*gconst55);
IkReal x12868=(sj2*x12865);
IkReal x12869=((1.0)*cj2*sj1);
IkReal x12870=(r00*x12859);
IkReal x12871=(gconst55*x12858);
IkReal x12872=((1.0)*x12858);
IkReal x12873=(cj3*x12858);
IkReal x12874=(r01*x12859);
IkReal x12875=(r10*x12859);
IkReal x12876=(r20*x12859);
IkReal x12877=(r11*x12859);
IkReal x12878=(gconst55*r21*x12859);
IkReal x12879=(x12868+x12869);
evalcond[0]=(((r22*x12859))+(((-1.0)*gconst56*r20*x12872))+((r21*x12871)));
evalcond[1]=((((-1.0)*gconst56*r10*x12872))+((r11*x12871))+((r12*x12859)));
evalcond[2]=((1.0)+((r01*x12871))+(((-1.0)*gconst56*r00*x12872))+((r02*x12859)));
evalcond[3]=(((x12861*x12870))+(((-1.0)*gconst55*x12860*x12874))+((r02*x12873))+((r01*x12866))+((r00*x12864)));
evalcond[4]=((((-1.0)*r02*sj3*x12872))+(((-1.0)*x12866*x12870))+((x12864*x12874))+((r01*x12861))+((r00*x12867)));
evalcond[5]=(x12862+((r11*x12866))+((x12861*x12875))+(((-1.0)*gconst55*x12860*x12877))+((r12*x12873))+(((-1.0)*cj2*x12865))+((sj3*x12863)));
evalcond[6]=((((-1.0)*x12862))+((r21*x12861))+((r20*x12867))+((r21*x12859*x12864))+(((-1.0)*x12866*x12876))+((cj1*cj2))+(((-1.0)*r22*sj3*x12872)));
evalcond[7]=(((r21*x12866))+((x12861*x12876))+((r22*x12873))+((r20*x12864))+(((-1.0)*x12879))+(((-1.0)*x12860*x12878)));
evalcond[8]=(((r11*x12861))+((cj3*x12863))+(((-1.0)*x12866*x12875))+(((-1.0)*x12879))+((x12864*x12877))+(((-1.0)*r12*sj3*x12872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12880=((-1.0)*r11);
IkReal x12882 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12882)==0){
continue;
}
IkReal x12881=pow(x12882,-0.5);
CheckValue<IkReal> x12883 = IKatan2WithCheck(IkReal(x12880),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12883.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x12883.value))));
IkReal gconst58=(x12880*x12881);
IkReal gconst59=((1.0)*r10*x12881);
CheckValue<IkReal> x12884 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12884.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12884.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12885=((-1.0)*r11);
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal(x12885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
IkReal x12886=((1.0)*(x12888.value));
IkReal x12887=x12881;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12886)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12886)));
IkReal gconst58=(x12885*x12887);
IkReal gconst59=((1.0)*r10*x12887);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12889=((-1.0)*r11);
CheckValue<IkReal> x12892 = IKatan2WithCheck(IkReal(x12889),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12892.valid){
continue;
}
IkReal x12890=((1.0)*(x12892.value));
IkReal x12891=x12881;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12890)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12890)));
IkReal gconst58=(x12889*x12891);
IkReal gconst59=((1.0)*r10*x12891);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12893=gconst58*gconst58;
IkReal x12894=gconst59*gconst59;
IkReal x12895=(cj3*r00);
IkReal x12896=(gconst59*r20);
IkReal x12897=(cj3*r01);
IkReal x12898=((1.0)*gconst58);
IkReal x12899=(gconst59*r21);
IkReal x12900=((1.0)*r01*sj3);
IkReal x12901=(r20*x12894);
IkReal x12902=(r21*x12893);
IkReal x12903=(r00*sj3*x12898);
CheckValue<IkReal> x12904 = IKatan2WithCheck(IkReal((((gconst58*r01*sj3*x12899))+(((-1.0)*x12900*x12901))+((r00*sj3*x12902))+(((-1.0)*x12896*x12903)))),IkReal(((((-1.0)*gconst59*r22*x12900))+(((-1.0)*r22*x12903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12904.valid){
continue;
}
CheckValue<IkReal> x12905=IKPowWithIntegerCheck(IKsign((((x12895*x12901))+(((-1.0)*x12895*x12898*x12899))+(((-1.0)*x12896*x12897*x12898))+((x12897*x12902))+((cj3*r02*r22)))),-1);
if(!x12905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12904.value)+(((1.5707963267949)*(x12905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12906=IKcos(j4);
IkReal x12907=IKsin(j4);
IkReal x12908=((1.0)*r00);
IkReal x12909=(cj3*r10);
IkReal x12910=(sj1*sj2);
IkReal x12911=(cj3*gconst58);
IkReal x12912=((1.0)*r20);
IkReal x12913=((1.0)*cj2);
IkReal x12914=(gconst58*sj3);
IkReal x12915=((1.0)*sj3);
IkReal x12916=(cj3*gconst59);
IkReal x12917=(gconst59*sj3);
IkReal x12918=((1.0)*cj1*sj2);
IkReal x12919=(sj1*x12913);
IkReal x12920=(gconst59*x12907);
IkReal x12921=(gconst59*x12906);
IkReal x12922=(gconst58*x12906);
IkReal x12923=(r22*x12906);
IkReal x12924=(r21*x12907);
IkReal x12925=((1.0)*x12907);
IkReal x12926=(r12*x12906);
IkReal x12927=(r02*x12906);
IkReal x12928=(x12918+x12919);
evalcond[0]=((((-1.0)*x12912*x12921))+((r21*x12922))+((r22*x12907)));
evalcond[1]=(((r11*x12922))+(((-1.0)*r10*x12921))+((r12*x12907)));
evalcond[2]=((1.0)+(((-1.0)*x12908*x12921))+((r02*x12907))+((r01*x12922)));
evalcond[3]=(((r00*x12914))+((r00*x12907*x12916))+((cj3*x12927))+(((-1.0)*r01*x12911*x12925))+((r01*x12917)));
evalcond[4]=(((r00*x12911))+(((-1.0)*x12915*x12927))+((r01*x12916))+(((-1.0)*x12907*x12908*x12917))+((r01*x12907*x12914)));
evalcond[5]=(x12910+(((-1.0)*r11*x12911*x12925))+((cj3*x12926))+((x12909*x12920))+((r10*x12914))+((r11*x12917))+(((-1.0)*cj1*x12913)));
evalcond[6]=((((-1.0)*x12915*x12923))+(((-1.0)*x12910))+((r20*x12911))+((r21*x12916))+(((-1.0)*x12907*x12912*x12917))+((cj1*cj2))+((x12914*x12924)));
evalcond[7]=(((r20*x12907*x12916))+((cj3*x12923))+(((-1.0)*x12911*x12924))+((r20*x12914))+((r21*x12917))+(((-1.0)*x12928)));
evalcond[8]=(((r11*x12907*x12914))+(((-1.0)*x12915*x12926))+(((-1.0)*r10*x12915*x12920))+((gconst58*x12909))+((r11*x12916))+(((-1.0)*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12929=((1.0)*gconst59);
CheckValue<IkReal> x12930=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r10))+(((-1.0)*r11*x12929)))),-1);
if(!x12930.valid){
continue;
}
CheckValue<IkReal> x12931 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12929))+((gconst58*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12930.value)))+(x12931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12932=IKcos(j4);
IkReal x12933=IKsin(j4);
IkReal x12934=((1.0)*r00);
IkReal x12935=(cj3*r10);
IkReal x12936=(sj1*sj2);
IkReal x12937=(cj3*gconst58);
IkReal x12938=((1.0)*r20);
IkReal x12939=((1.0)*cj2);
IkReal x12940=(gconst58*sj3);
IkReal x12941=((1.0)*sj3);
IkReal x12942=(cj3*gconst59);
IkReal x12943=(gconst59*sj3);
IkReal x12944=((1.0)*cj1*sj2);
IkReal x12945=(sj1*x12939);
IkReal x12946=(gconst59*x12933);
IkReal x12947=(gconst59*x12932);
IkReal x12948=(gconst58*x12932);
IkReal x12949=(r22*x12932);
IkReal x12950=(r21*x12933);
IkReal x12951=((1.0)*x12933);
IkReal x12952=(r12*x12932);
IkReal x12953=(r02*x12932);
IkReal x12954=(x12945+x12944);
evalcond[0]=(((r21*x12948))+((r22*x12933))+(((-1.0)*x12938*x12947)));
evalcond[1]=(((r12*x12933))+(((-1.0)*r10*x12947))+((r11*x12948)));
evalcond[2]=((1.0)+((r02*x12933))+((r01*x12948))+(((-1.0)*x12934*x12947)));
evalcond[3]=(((cj3*x12953))+((r00*x12940))+((r01*x12943))+(((-1.0)*r01*x12937*x12951))+((r00*x12933*x12942)));
evalcond[4]=((((-1.0)*x12933*x12934*x12943))+((r01*x12942))+((r01*x12933*x12940))+(((-1.0)*x12941*x12953))+((r00*x12937)));
evalcond[5]=(x12936+((r10*x12940))+((cj3*x12952))+((x12935*x12946))+(((-1.0)*r11*x12937*x12951))+((r11*x12943))+(((-1.0)*cj1*x12939)));
evalcond[6]=(((r20*x12937))+((x12940*x12950))+(((-1.0)*x12936))+((r21*x12942))+((cj1*cj2))+(((-1.0)*x12933*x12938*x12943))+(((-1.0)*x12941*x12949)));
evalcond[7]=(((cj3*x12949))+((r20*x12933*x12942))+(((-1.0)*x12937*x12950))+((r21*x12943))+(((-1.0)*x12954))+((r20*x12940)));
evalcond[8]=((((-1.0)*r10*x12941*x12946))+((r11*x12942))+(((-1.0)*x12954))+((r11*x12933*x12940))+((gconst58*x12935))+(((-1.0)*x12941*x12952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12955=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x12955.valid){
continue;
}
CheckValue<IkReal> x12956 = IKatan2WithCheck(IkReal((((gconst58*r11))+(((-1.0)*gconst59*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12955.value)))+(x12956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12957=IKcos(j4);
IkReal x12958=IKsin(j4);
IkReal x12959=((1.0)*r00);
IkReal x12960=(cj3*r10);
IkReal x12961=(sj1*sj2);
IkReal x12962=(cj3*gconst58);
IkReal x12963=((1.0)*r20);
IkReal x12964=((1.0)*cj2);
IkReal x12965=(gconst58*sj3);
IkReal x12966=((1.0)*sj3);
IkReal x12967=(cj3*gconst59);
IkReal x12968=(gconst59*sj3);
IkReal x12969=((1.0)*cj1*sj2);
IkReal x12970=(sj1*x12964);
IkReal x12971=(gconst59*x12958);
IkReal x12972=(gconst59*x12957);
IkReal x12973=(gconst58*x12957);
IkReal x12974=(r22*x12957);
IkReal x12975=(r21*x12958);
IkReal x12976=((1.0)*x12958);
IkReal x12977=(r12*x12957);
IkReal x12978=(r02*x12957);
IkReal x12979=(x12969+x12970);
evalcond[0]=(((r22*x12958))+((r21*x12973))+(((-1.0)*x12963*x12972)));
evalcond[1]=((((-1.0)*r10*x12972))+((r12*x12958))+((r11*x12973)));
evalcond[2]=((1.0)+((r01*x12973))+(((-1.0)*x12959*x12972))+((r02*x12958)));
evalcond[3]=(((r00*x12958*x12967))+(((-1.0)*r01*x12962*x12976))+((r00*x12965))+((r01*x12968))+((cj3*x12978)));
evalcond[4]=(((r00*x12962))+((r01*x12967))+(((-1.0)*x12966*x12978))+((r01*x12958*x12965))+(((-1.0)*x12958*x12959*x12968)));
evalcond[5]=(x12961+(((-1.0)*cj1*x12964))+((cj3*x12977))+((x12960*x12971))+(((-1.0)*r11*x12962*x12976))+((r11*x12968))+((r10*x12965)));
evalcond[6]=((((-1.0)*x12958*x12963*x12968))+(((-1.0)*x12966*x12974))+(((-1.0)*x12961))+((r20*x12962))+((cj1*cj2))+((x12965*x12975))+((r21*x12967)));
evalcond[7]=(((r20*x12958*x12967))+(((-1.0)*x12962*x12975))+(((-1.0)*x12979))+((cj3*x12974))+((r20*x12965))+((r21*x12968)));
evalcond[8]=((((-1.0)*x12979))+(((-1.0)*x12966*x12977))+((r11*x12958*x12965))+((gconst58*x12960))+(((-1.0)*r10*x12966*x12971))+((r11*x12967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12981 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12981)==0){
continue;
}
IkReal x12980=pow(x12981,-0.5);
CheckValue<IkReal> x12982 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12982.valid){
continue;
}
IkReal gconst60=((-1.0)*(x12982.value));
IkReal gconst61=((-1.0)*r21*x12980);
IkReal gconst62=(r20*x12980);
CheckValue<IkReal> x12983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12983.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12983.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
IkReal x12984=((-1.0)*(x12986.value));
IkReal x12985=x12980;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12984;
IkReal gconst60=x12984;
IkReal gconst61=((-1.0)*r21*x12985);
IkReal gconst62=(r20*x12985);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
IkReal x12987=((-1.0)*(x12989.value));
IkReal x12988=x12980;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12987;
IkReal gconst60=x12987;
IkReal gconst61=((-1.0)*r21*x12988);
IkReal gconst62=(r20*x12988);
CheckValue<IkReal> x12997=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12997.valid){
continue;
}
IkReal x12990=x12997.value;
IkReal x12991=(cj3*x12990);
IkReal x12992=(r11*x12991);
IkReal x12993=(r01*x12991);
IkReal x12994=(r00*x12991);
IkReal x12995=(r10*x12991);
IkReal x12996=(r20*r21*x12991);
j4eval[0]=IKsign((((r10*x12994*(r20*r20)))+((cj3*r02*r12))+((r01*x12992*(r21*r21)))+((r00*r20*r21*x12992))+((r10*r20*r21*x12993))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12998=gconst62*gconst62;
IkReal x12999=gconst61*gconst61;
IkReal x13000=((1.0)*sj3);
IkReal x13001=(r01*r11);
IkReal x13002=(gconst62*r01);
IkReal x13003=(gconst61*r10);
IkReal x13004=((1.0)*cj3);
IkReal x13005=(gconst61*gconst62);
IkReal x13006=(r00*r11);
IkReal x13007=(r10*x12998);
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal((((cj3*x13001*x13005))+((cj3*x12999*x13006))+(((-1.0)*r01*x13004*x13007))+(((-1.0)*gconst62*r00*x13003*x13004)))),IkReal(((((-1.0)*gconst61*r00*r12*x13004))+(((-1.0)*r12*x13002*x13004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
CheckValue<IkReal> x13009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x13000*x13007))+(((-1.0)*x12999*x13000*x13001))+((sj3*x13002*x13003))+(((-1.0)*r02*r12*x13000))+((sj3*x13005*x13006)))),-1);
if(!x13009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13008.value)+(((1.5707963267949)*(x13009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13010=IKcos(j4);
IkReal x13011=IKsin(j4);
IkReal x13012=(gconst62*r00);
IkReal x13013=(cj3*r20);
IkReal x13014=(gconst61*sj3);
IkReal x13015=(cj3*gconst62);
IkReal x13016=(sj1*sj2);
IkReal x13017=(cj1*cj2);
IkReal x13018=((1.0)*sj3);
IkReal x13019=(cj3*gconst61);
IkReal x13020=(gconst62*sj3);
IkReal x13021=((1.0)*cj1*sj2);
IkReal x13022=((1.0)*cj2*sj1);
IkReal x13023=((1.0)*x13010);
IkReal x13024=(gconst62*x13011);
IkReal x13025=(r21*x13011);
IkReal x13026=(cj3*x13010);
IkReal x13027=(gconst61*x13010);
IkReal x13028=((1.0)*x13011);
IkReal x13029=(x13021+x13022);
evalcond[0]=(((r21*x13027))+(((-1.0)*gconst62*r20*x13023))+((r22*x13011)));
evalcond[1]=((((-1.0)*gconst62*r10*x13023))+((r11*x13027))+((r12*x13011)));
evalcond[2]=((1.0)+((r01*x13027))+((r02*x13011))+(((-1.0)*x13012*x13023)));
evalcond[3]=(((r01*x13020))+((r00*x13014))+(((-1.0)*r01*x13019*x13028))+((cj3*x13011*x13012))+((r02*x13026)));
evalcond[4]=(((r00*x13019))+((r01*x13015))+(((-1.0)*r02*x13010*x13018))+(((-1.0)*x13011*x13012*x13018))+((r01*x13011*x13014)));
evalcond[5]=((((-1.0)*r11*x13019*x13028))+((r10*x13011*x13015))+(((-1.0)*x13017))+((r11*x13020))+x13016+((r12*x13026))+((r10*x13014)));
evalcond[6]=(((r21*x13015))+((gconst61*x13013))+(((-1.0)*r22*x13010*x13018))+(((-1.0)*x13016))+x13017+((x13014*x13025))+(((-1.0)*r20*x13018*x13024)));
evalcond[7]=(((r21*x13020))+(((-1.0)*x13029))+((r20*x13014))+((x13013*x13024))+(((-1.0)*x13019*x13025))+((r22*x13026)));
evalcond[8]=((((-1.0)*r12*x13010*x13018))+(((-1.0)*x13029))+((r11*x13011*x13014))+((r11*x13015))+(((-1.0)*r10*x13018*x13024))+((r10*x13019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13030=gconst61*gconst61;
IkReal x13031=gconst62*gconst62;
IkReal x13032=(gconst62*r11);
IkReal x13033=(r12*sj3);
IkReal x13034=((1.0)*r01);
IkReal x13035=(r10*sj3);
IkReal x13036=(cj3*r10);
IkReal x13037=((1.0)*gconst61*r00);
IkReal x13038=(r11*x13030);
CheckValue<IkReal> x13039=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*cj3*x13032*x13037))+((r00*x13031*x13036))+((cj3*r01*x13038))+(((-1.0)*gconst61*gconst62*x13034*x13036)))),-1);
if(!x13039.valid){
continue;
}
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal(((((-1.0)*gconst62*x13035*x13037))+((r00*sj3*x13038))+(((-1.0)*x13031*x13034*x13035))+((gconst61*r01*sj3*x13032)))),IkReal(((((-1.0)*x13033*x13037))+(((-1.0)*gconst62*x13033*x13034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13039.value)))+(x13040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13041=IKcos(j4);
IkReal x13042=IKsin(j4);
IkReal x13043=(gconst62*r00);
IkReal x13044=(cj3*r20);
IkReal x13045=(gconst61*sj3);
IkReal x13046=(cj3*gconst62);
IkReal x13047=(sj1*sj2);
IkReal x13048=(cj1*cj2);
IkReal x13049=((1.0)*sj3);
IkReal x13050=(cj3*gconst61);
IkReal x13051=(gconst62*sj3);
IkReal x13052=((1.0)*cj1*sj2);
IkReal x13053=((1.0)*cj2*sj1);
IkReal x13054=((1.0)*x13041);
IkReal x13055=(gconst62*x13042);
IkReal x13056=(r21*x13042);
IkReal x13057=(cj3*x13041);
IkReal x13058=(gconst61*x13041);
IkReal x13059=((1.0)*x13042);
IkReal x13060=(x13052+x13053);
evalcond[0]=(((r21*x13058))+((r22*x13042))+(((-1.0)*gconst62*r20*x13054)));
evalcond[1]=((((-1.0)*gconst62*r10*x13054))+((r12*x13042))+((r11*x13058)));
evalcond[2]=((1.0)+((r02*x13042))+(((-1.0)*x13043*x13054))+((r01*x13058)));
evalcond[3]=(((cj3*x13042*x13043))+((r02*x13057))+((r00*x13045))+((r01*x13051))+(((-1.0)*r01*x13050*x13059)));
evalcond[4]=(((r01*x13042*x13045))+(((-1.0)*x13042*x13043*x13049))+(((-1.0)*r02*x13041*x13049))+((r01*x13046))+((r00*x13050)));
evalcond[5]=(((r12*x13057))+((r10*x13042*x13046))+(((-1.0)*x13048))+((r10*x13045))+x13047+(((-1.0)*r11*x13050*x13059))+((r11*x13051)));
evalcond[6]=((((-1.0)*x13047))+((r21*x13046))+(((-1.0)*r22*x13041*x13049))+((x13045*x13056))+((gconst61*x13044))+x13048+(((-1.0)*r20*x13049*x13055)));
evalcond[7]=(((r20*x13045))+(((-1.0)*x13050*x13056))+((x13044*x13055))+((r21*x13051))+((r22*x13057))+(((-1.0)*x13060)));
evalcond[8]=(((r11*x13046))+(((-1.0)*r12*x13041*x13049))+((r10*x13050))+((r11*x13042*x13045))+(((-1.0)*r10*x13049*x13055))+(((-1.0)*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13061=((1.0)*gconst62);
CheckValue<IkReal> x13062 = IKatan2WithCheck(IkReal((((gconst61*r21))+(((-1.0)*r20*x13061)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13062.valid){
continue;
}
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r10))+(((-1.0)*r11*x13061)))),-1);
if(!x13063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13062.value)+(((1.5707963267949)*(x13063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13064=IKcos(j4);
IkReal x13065=IKsin(j4);
IkReal x13066=(gconst62*r00);
IkReal x13067=(cj3*r20);
IkReal x13068=(gconst61*sj3);
IkReal x13069=(cj3*gconst62);
IkReal x13070=(sj1*sj2);
IkReal x13071=(cj1*cj2);
IkReal x13072=((1.0)*sj3);
IkReal x13073=(cj3*gconst61);
IkReal x13074=(gconst62*sj3);
IkReal x13075=((1.0)*cj1*sj2);
IkReal x13076=((1.0)*cj2*sj1);
IkReal x13077=((1.0)*x13064);
IkReal x13078=(gconst62*x13065);
IkReal x13079=(r21*x13065);
IkReal x13080=(cj3*x13064);
IkReal x13081=(gconst61*x13064);
IkReal x13082=((1.0)*x13065);
IkReal x13083=(x13076+x13075);
evalcond[0]=((((-1.0)*gconst62*r20*x13077))+((r22*x13065))+((r21*x13081)));
evalcond[1]=(((r12*x13065))+((r11*x13081))+(((-1.0)*gconst62*r10*x13077)));
evalcond[2]=((1.0)+((r02*x13065))+(((-1.0)*x13066*x13077))+((r01*x13081)));
evalcond[3]=(((r02*x13080))+((r01*x13074))+(((-1.0)*r01*x13073*x13082))+((r00*x13068))+((cj3*x13065*x13066)));
evalcond[4]=(((r01*x13065*x13068))+((r00*x13073))+(((-1.0)*x13065*x13066*x13072))+((r01*x13069))+(((-1.0)*r02*x13064*x13072)));
evalcond[5]=(((r11*x13074))+((r12*x13080))+((r10*x13068))+(((-1.0)*x13071))+x13070+((r10*x13065*x13069))+(((-1.0)*r11*x13073*x13082)));
evalcond[6]=(((r21*x13069))+((x13068*x13079))+(((-1.0)*x13070))+x13071+(((-1.0)*r22*x13064*x13072))+(((-1.0)*r20*x13072*x13078))+((gconst61*x13067)));
evalcond[7]=((((-1.0)*x13083))+((r21*x13074))+((r20*x13068))+((x13067*x13078))+(((-1.0)*x13073*x13079))+((r22*x13080)));
evalcond[8]=((((-1.0)*x13083))+(((-1.0)*r10*x13072*x13078))+((r10*x13073))+(((-1.0)*r12*x13064*x13072))+((r11*x13065*x13068))+((r11*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13085 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13085)==0){
continue;
}
IkReal x13084=pow(x13085,-0.5);
CheckValue<IkReal> x13086 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13086.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x13086.value))));
IkReal gconst64=((1.0)*r21*x13084);
IkReal gconst65=((-1.0)*r20*x13084);
CheckValue<IkReal> x13087 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13087.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13087.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
IkReal x13088=((1.0)*(x13090.value));
IkReal x13089=x13084;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13088)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13088)));
IkReal gconst64=((1.0)*r21*x13089);
IkReal gconst65=((-1.0)*r20*x13089);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
IkReal x13091=((1.0)*(x13093.value));
IkReal x13092=x13084;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13091)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13091)));
IkReal gconst64=((1.0)*r21*x13092);
IkReal gconst65=((-1.0)*r20*x13092);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13096 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13096.valid){
continue;
}
IkReal x13094=((1.0)*(x13096.value));
IkReal x13095=x13084;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13094)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13094)));
IkReal gconst64=((1.0)*r21*x13095);
IkReal gconst65=((-1.0)*r20*x13095);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13097=gconst64*gconst64;
IkReal x13098=gconst65*gconst65;
IkReal x13099=((1.0)*gconst64);
IkReal x13100=(gconst65*r01);
IkReal x13101=(cj3*r20);
IkReal x13102=(r22*sj3);
IkReal x13103=(r21*sj3);
IkReal x13104=(gconst65*r00);
IkReal x13105=(cj3*r21);
IkReal x13106=(r20*sj3);
CheckValue<IkReal> x13107 = IKatan2WithCheck(IkReal(((((-1.0)*x13099*x13104*x13106))+(((-1.0)*r01*x13098*x13106))+((gconst64*x13100*x13103))+((r00*x13097*x13103)))),IkReal(((((-1.0)*x13100*x13102))+(((-1.0)*r00*x13099*x13102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13107.valid){
continue;
}
CheckValue<IkReal> x13108=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13099*x13104*x13105))+((r01*x13097*x13105))+((r00*x13098*x13101))+(((-1.0)*x13099*x13100*x13101))+((cj3*r02*r22)))),-1);
if(!x13108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13107.value)+(((1.5707963267949)*(x13108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13109=IKcos(j4);
IkReal x13110=IKsin(j4);
IkReal x13111=(cj3*r00);
IkReal x13112=(gconst64*sj3);
IkReal x13113=(cj3*gconst64);
IkReal x13114=((1.0)*sj3);
IkReal x13115=(sj1*sj2);
IkReal x13116=(gconst65*r11);
IkReal x13117=((1.0)*cj2);
IkReal x13118=(gconst65*r21);
IkReal x13119=(gconst65*r01);
IkReal x13120=((1.0)*cj1*sj2);
IkReal x13121=(sj1*x13117);
IkReal x13122=(gconst65*x13110);
IkReal x13123=(r01*x13110);
IkReal x13124=(r12*x13109);
IkReal x13125=(r22*x13109);
IkReal x13126=((1.0)*x13110);
IkReal x13127=(gconst64*x13109);
IkReal x13128=(r02*x13109);
IkReal x13129=((1.0)*gconst65*x13109);
IkReal x13130=(x13120+x13121);
evalcond[0]=(((r22*x13110))+(((-1.0)*r20*x13129))+((r21*x13127)));
evalcond[1]=(((r12*x13110))+((r11*x13127))+(((-1.0)*r10*x13129)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13129))+((r02*x13110))+((r01*x13127)));
evalcond[3]=(((cj3*x13128))+((x13111*x13122))+((sj3*x13119))+((r00*x13112))+(((-1.0)*x13113*x13123)));
evalcond[4]=((((-1.0)*x13114*x13128))+((x13112*x13123))+((cj3*x13119))+((gconst64*x13111))+(((-1.0)*r00*x13114*x13122)));
evalcond[5]=((((-1.0)*r11*x13113*x13126))+((cj3*r10*x13122))+((cj3*x13124))+((r10*x13112))+x13115+(((-1.0)*cj1*x13117))+((sj3*x13116)));
evalcond[6]=((((-1.0)*x13114*x13125))+((r21*x13110*x13112))+(((-1.0)*x13115))+((cj3*x13118))+((cj1*cj2))+((r20*x13113))+(((-1.0)*r20*x13114*x13122)));
evalcond[7]=(((cj3*x13125))+((cj3*r20*x13122))+(((-1.0)*r21*x13113*x13126))+(((-1.0)*x13130))+((r20*x13112))+((sj3*x13118)));
evalcond[8]=((((-1.0)*x13114*x13124))+((r11*x13110*x13112))+((cj3*x13116))+((r10*x13113))+(((-1.0)*x13130))+(((-1.0)*r10*x13114*x13122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13131=((1.0)*gconst65);
CheckValue<IkReal> x13132 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13131))+((gconst64*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r10))+(((-1.0)*r11*x13131)))),-1);
if(!x13133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13132.value)+(((1.5707963267949)*(x13133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13134=IKcos(j4);
IkReal x13135=IKsin(j4);
IkReal x13136=(cj3*r00);
IkReal x13137=(gconst64*sj3);
IkReal x13138=(cj3*gconst64);
IkReal x13139=((1.0)*sj3);
IkReal x13140=(sj1*sj2);
IkReal x13141=(gconst65*r11);
IkReal x13142=((1.0)*cj2);
IkReal x13143=(gconst65*r21);
IkReal x13144=(gconst65*r01);
IkReal x13145=((1.0)*cj1*sj2);
IkReal x13146=(sj1*x13142);
IkReal x13147=(gconst65*x13135);
IkReal x13148=(r01*x13135);
IkReal x13149=(r12*x13134);
IkReal x13150=(r22*x13134);
IkReal x13151=((1.0)*x13135);
IkReal x13152=(gconst64*x13134);
IkReal x13153=(r02*x13134);
IkReal x13154=((1.0)*gconst65*x13134);
IkReal x13155=(x13146+x13145);
evalcond[0]=((((-1.0)*r20*x13154))+((r21*x13152))+((r22*x13135)));
evalcond[1]=(((r12*x13135))+(((-1.0)*r10*x13154))+((r11*x13152)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13154))+((r01*x13152))+((r02*x13135)));
evalcond[3]=((((-1.0)*x13138*x13148))+((r00*x13137))+((x13136*x13147))+((cj3*x13153))+((sj3*x13144)));
evalcond[4]=((((-1.0)*x13139*x13153))+((cj3*x13144))+((x13137*x13148))+((gconst64*x13136))+(((-1.0)*r00*x13139*x13147)));
evalcond[5]=(((r10*x13137))+((cj3*x13149))+((cj3*r10*x13147))+(((-1.0)*r11*x13138*x13151))+(((-1.0)*cj1*x13142))+((sj3*x13141))+x13140);
evalcond[6]=((((-1.0)*x13139*x13150))+((r20*x13138))+((cj3*x13143))+(((-1.0)*r20*x13139*x13147))+((cj1*cj2))+((r21*x13135*x13137))+(((-1.0)*x13140)));
evalcond[7]=(((r20*x13137))+(((-1.0)*x13155))+(((-1.0)*r21*x13138*x13151))+((cj3*x13150))+((sj3*x13143))+((cj3*r20*x13147)));
evalcond[8]=(((r10*x13138))+(((-1.0)*r10*x13139*x13147))+(((-1.0)*x13139*x13149))+(((-1.0)*x13155))+((cj3*x13141))+((r11*x13135*x13137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13156 = IKatan2WithCheck(IkReal((((gconst64*r11))+(((-1.0)*gconst65*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13156.valid){
continue;
}
CheckValue<IkReal> x13157=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x13157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13156.value)+(((1.5707963267949)*(x13157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13158=IKcos(j4);
IkReal x13159=IKsin(j4);
IkReal x13160=(cj3*r00);
IkReal x13161=(gconst64*sj3);
IkReal x13162=(cj3*gconst64);
IkReal x13163=((1.0)*sj3);
IkReal x13164=(sj1*sj2);
IkReal x13165=(gconst65*r11);
IkReal x13166=((1.0)*cj2);
IkReal x13167=(gconst65*r21);
IkReal x13168=(gconst65*r01);
IkReal x13169=((1.0)*cj1*sj2);
IkReal x13170=(sj1*x13166);
IkReal x13171=(gconst65*x13159);
IkReal x13172=(r01*x13159);
IkReal x13173=(r12*x13158);
IkReal x13174=(r22*x13158);
IkReal x13175=((1.0)*x13159);
IkReal x13176=(gconst64*x13158);
IkReal x13177=(r02*x13158);
IkReal x13178=((1.0)*gconst65*x13158);
IkReal x13179=(x13170+x13169);
evalcond[0]=(((r21*x13176))+((r22*x13159))+(((-1.0)*r20*x13178)));
evalcond[1]=(((r12*x13159))+(((-1.0)*r10*x13178))+((r11*x13176)));
evalcond[2]=((1.0)+((r01*x13176))+(((-1.0)*r00*x13178))+((r02*x13159)));
evalcond[3]=(((sj3*x13168))+((r00*x13161))+((x13160*x13171))+((cj3*x13177))+(((-1.0)*x13162*x13172)));
evalcond[4]=(((cj3*x13168))+(((-1.0)*x13163*x13177))+((gconst64*x13160))+(((-1.0)*r00*x13163*x13171))+((x13161*x13172)));
evalcond[5]=((((-1.0)*cj1*x13166))+((sj3*x13165))+(((-1.0)*r11*x13162*x13175))+((cj3*x13173))+((cj3*r10*x13171))+x13164+((r10*x13161)));
evalcond[6]=(((r20*x13162))+(((-1.0)*r20*x13163*x13171))+((cj3*x13167))+(((-1.0)*x13163*x13174))+((r21*x13159*x13161))+(((-1.0)*x13164))+((cj1*cj2)));
evalcond[7]=(((r20*x13161))+((sj3*x13167))+((cj3*r20*x13171))+(((-1.0)*r21*x13162*x13175))+(((-1.0)*x13179))+((cj3*x13174)));
evalcond[8]=(((cj3*x13165))+(((-1.0)*x13163*x13173))+(((-1.0)*x13179))+(((-1.0)*r10*x13163*x13171))+((r10*x13162))+((r11*x13159*x13161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13180=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13181=(r01*sj5);
IkReal x13182=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*sj3*x13182))+((sj3*x13181)));
j4eval[1]=((((-1.0)*x13182))+x13181);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13183=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13184=(cj5*r00);
IkReal x13185=(r01*sj5);
j4eval[0]=(((cj3*x13184))+(((-1.0)*cj3*x13185)));
j4eval[1]=((((-1.0)*x13184))+x13185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13186=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13186);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13186);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13187=((1.0)*cj3);
CheckValue<IkReal> x13188=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x13188.valid){
continue;
}
CheckValue<IkReal> x13189=IKPowWithIntegerCheck(r22,-1);
if(!x13189.valid){
continue;
}
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(sj3,-1);
if(!x13190.valid){
continue;
}
if( IKabs(((x13188.value)*(((((-1.0)*r00*sj5*x13187))+(((-1.0)*cj5*r01*x13187)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13189.value)*(x13190.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13188.value)*(((((-1.0)*r00*sj5*x13187))+(((-1.0)*cj5*r01*x13187))))))+IKsqr(((x13189.value)*(x13190.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13188.value)*(((((-1.0)*r00*sj5*x13187))+(((-1.0)*cj5*r01*x13187))))), ((x13189.value)*(x13190.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13191=IKcos(j4);
IkReal x13192=IKsin(j4);
IkReal x13193=((1.0)*cj5);
IkReal x13194=(sj1*sj2);
IkReal x13195=(cj5*r01);
IkReal x13196=(cj3*sj5);
IkReal x13197=(cj3*cj5);
IkReal x13198=((1.0)*cj2);
IkReal x13199=(sj3*sj5);
IkReal x13200=(r01*sj5);
IkReal x13201=(r11*sj5);
IkReal x13202=((1.0)*cj1*sj2);
IkReal x13203=(sj1*x13198);
IkReal x13204=(sj3*x13192);
IkReal x13205=(r22*x13191);
IkReal x13206=((1.0)*x13192);
IkReal x13207=(x13203+x13202);
evalcond[0]=(r22*x13192);
evalcond[1]=(((x13191*x13201))+(((-1.0)*r10*x13191*x13193)));
evalcond[2]=((1.0)+((x13191*x13200))+(((-1.0)*r00*x13191*x13193)));
evalcond[3]=((((-1.0)*x13194))+((cj1*cj2))+(((-1.0)*sj3*x13205)));
evalcond[4]=((((-1.0)*x13207))+((cj3*x13205)));
evalcond[5]=((((-1.0)*r00*x13193*x13204))+((r00*x13196))+((r01*x13192*x13199))+((cj3*x13195)));
evalcond[6]=((((-1.0)*r01*x13196*x13206))+((r00*x13199))+((r00*x13192*x13197))+((sj3*x13195)));
evalcond[7]=(((r10*x13192*x13197))+((cj5*r11*sj3))+((r10*x13199))+(((-1.0)*cj1*x13198))+(((-1.0)*r11*x13196*x13206))+x13194);
evalcond[8]=(((r11*x13192*x13199))+(((-1.0)*r10*x13193*x13204))+((r11*x13197))+((r10*x13196))+(((-1.0)*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13208=(cj5*r00);
IkReal x13209=(r01*sj5);
IkReal x13210=((1.0)*sj3);
CheckValue<IkReal> x13211=IKPowWithIntegerCheck(((((-1.0)*cj3*x13209))+((cj3*x13208))),-1);
if(!x13211.valid){
continue;
}
CheckValue<IkReal> x13212=IKPowWithIntegerCheck((x13209+(((-1.0)*x13208))),-1);
if(!x13212.valid){
continue;
}
if( IKabs(((x13211.value)*(((((-1.0)*r00*sj5*x13210))+(((-1.0)*cj5*r01*x13210)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13212.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13211.value)*(((((-1.0)*r00*sj5*x13210))+(((-1.0)*cj5*r01*x13210))))))+IKsqr(((-1.0)*(x13212.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13211.value)*(((((-1.0)*r00*sj5*x13210))+(((-1.0)*cj5*r01*x13210))))), ((-1.0)*(x13212.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13213=IKcos(j4);
IkReal x13214=IKsin(j4);
IkReal x13215=((1.0)*cj5);
IkReal x13216=(sj1*sj2);
IkReal x13217=(cj5*r01);
IkReal x13218=(cj3*sj5);
IkReal x13219=(cj3*cj5);
IkReal x13220=((1.0)*cj2);
IkReal x13221=(sj3*sj5);
IkReal x13222=(r01*sj5);
IkReal x13223=(r11*sj5);
IkReal x13224=((1.0)*cj1*sj2);
IkReal x13225=(sj1*x13220);
IkReal x13226=(sj3*x13214);
IkReal x13227=(r22*x13213);
IkReal x13228=((1.0)*x13214);
IkReal x13229=(x13225+x13224);
evalcond[0]=(r22*x13214);
evalcond[1]=((((-1.0)*r10*x13213*x13215))+((x13213*x13223)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13213*x13215))+((x13213*x13222)));
evalcond[3]=((((-1.0)*x13216))+(((-1.0)*sj3*x13227))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x13229))+((cj3*x13227)));
evalcond[5]=((((-1.0)*r00*x13215*x13226))+((r00*x13218))+((r01*x13214*x13221))+((cj3*x13217)));
evalcond[6]=(((sj3*x13217))+((r00*x13221))+(((-1.0)*r01*x13218*x13228))+((r00*x13214*x13219)));
evalcond[7]=((((-1.0)*cj1*x13220))+((cj5*r11*sj3))+((r10*x13214*x13219))+((r10*x13221))+x13216+(((-1.0)*r11*x13218*x13228)));
evalcond[8]=((((-1.0)*r10*x13215*x13226))+((r11*x13219))+((r10*x13218))+((r11*x13214*x13221))+(((-1.0)*x13229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13230=((1.0)*cj3);
IkReal x13231=(r01*sj5);
IkReal x13232=((1.0)*cj5*r00);
CheckValue<IkReal> x13233=IKPowWithIntegerCheck((((sj3*x13231))+(((-1.0)*sj3*x13232))),-1);
if(!x13233.valid){
continue;
}
CheckValue<IkReal> x13234=IKPowWithIntegerCheck((x13231+(((-1.0)*x13232))),-1);
if(!x13234.valid){
continue;
}
if( IKabs(((x13233.value)*(((((-1.0)*r00*sj5*x13230))+(((-1.0)*cj5*r01*x13230)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13234.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13233.value)*(((((-1.0)*r00*sj5*x13230))+(((-1.0)*cj5*r01*x13230))))))+IKsqr(((-1.0)*(x13234.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13233.value)*(((((-1.0)*r00*sj5*x13230))+(((-1.0)*cj5*r01*x13230))))), ((-1.0)*(x13234.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13235=IKcos(j4);
IkReal x13236=IKsin(j4);
IkReal x13237=((1.0)*cj5);
IkReal x13238=(sj1*sj2);
IkReal x13239=(cj5*r01);
IkReal x13240=(cj3*sj5);
IkReal x13241=(cj3*cj5);
IkReal x13242=((1.0)*cj2);
IkReal x13243=(sj3*sj5);
IkReal x13244=(r01*sj5);
IkReal x13245=(r11*sj5);
IkReal x13246=((1.0)*cj1*sj2);
IkReal x13247=(sj1*x13242);
IkReal x13248=(sj3*x13236);
IkReal x13249=(r22*x13235);
IkReal x13250=((1.0)*x13236);
IkReal x13251=(x13247+x13246);
evalcond[0]=(r22*x13236);
evalcond[1]=(((x13235*x13245))+(((-1.0)*r10*x13235*x13237)));
evalcond[2]=((1.0)+((x13235*x13244))+(((-1.0)*r00*x13235*x13237)));
evalcond[3]=((((-1.0)*sj3*x13249))+((cj1*cj2))+(((-1.0)*x13238)));
evalcond[4]=(((cj3*x13249))+(((-1.0)*x13251)));
evalcond[5]=(((r01*x13236*x13243))+((r00*x13240))+((cj3*x13239))+(((-1.0)*r00*x13237*x13248)));
evalcond[6]=(((r00*x13236*x13241))+((sj3*x13239))+((r00*x13243))+(((-1.0)*r01*x13240*x13250)));
evalcond[7]=(((cj5*r11*sj3))+((r10*x13243))+(((-1.0)*r11*x13240*x13250))+((r10*x13236*x13241))+x13238+(((-1.0)*cj1*x13242)));
evalcond[8]=(((r10*x13240))+((r11*x13241))+((r11*x13236*x13243))+(((-1.0)*r10*x13237*x13248))+(((-1.0)*x13251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13252=cj5*cj5;
IkReal x13253=((1.0)*r00);
IkReal x13254=(r01*sj3);
IkReal x13255=(sj3*sj5);
IkReal x13256=(r21*sj3);
IkReal x13257=((1.0)*cj5);
IkReal x13258=(cj5*r21*sj5);
IkReal x13259=(cj3*r01*r21);
IkReal x13260=(r20*x13252);
CheckValue<IkReal> x13261=IKPowWithIntegerCheck(IKsign((((cj3*r00*x13260))+(((-1.0)*cj3*r01*r20*sj5*x13257))+((cj3*r02*r22))+x13259+(((-1.0)*x13252*x13259))+(((-1.0)*cj3*x13253*x13258)))),-1);
if(!x13261.valid){
continue;
}
CheckValue<IkReal> x13262 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*x13253*x13255))+(((-1.0)*x13252*x13253*x13256))+((r00*x13256))+((x13254*x13258))+(((-1.0)*x13254*x13260)))),IkReal(((((-1.0)*r22*x13253*x13255))+(((-1.0)*r22*x13254*x13257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13261.value)))+(x13262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13263=IKcos(j4);
IkReal x13264=IKsin(j4);
IkReal x13265=(cj5*r00);
IkReal x13266=(sj1*sj2);
IkReal x13267=(cj5*r01);
IkReal x13268=((1.0)*cj1);
IkReal x13269=(cj3*sj5);
IkReal x13270=(cj5*sj3);
IkReal x13271=(sj3*sj5);
IkReal x13272=(cj3*cj5);
IkReal x13273=(cj5*r10);
IkReal x13274=(cj5*r20);
IkReal x13275=(sj2*x13268);
IkReal x13276=((1.0)*cj2*sj1);
IkReal x13277=((1.0)*x13263);
IkReal x13278=(sj5*x13263);
IkReal x13279=(cj3*x13264);
IkReal x13280=(cj3*x13263);
IkReal x13281=((1.0)*x13264);
IkReal x13282=(x13275+x13276);
evalcond[0]=(((r21*x13278))+(((-1.0)*x13274*x13277))+((r22*x13264)));
evalcond[1]=(((r11*x13278))+((r12*x13264))+(((-1.0)*x13273*x13277)));
evalcond[2]=((1.0)+(((-1.0)*x13265*x13277))+((r01*x13278))+((r02*x13264)));
evalcond[3]=((((-1.0)*r01*x13269*x13281))+((r00*x13271))+((sj3*x13267))+((x13265*x13279))+((r02*x13280)));
evalcond[4]=(((r01*x13264*x13271))+((r00*x13269))+((cj3*x13267))+(((-1.0)*sj3*x13265*x13281))+(((-1.0)*r02*sj3*x13277)));
evalcond[5]=(((r12*x13280))+((r11*x13270))+((r10*x13271))+(((-1.0)*r11*x13269*x13281))+(((-1.0)*cj2*x13268))+x13266+((r10*x13264*x13272)));
evalcond[6]=(((r21*x13264*x13271))+((r21*x13272))+(((-1.0)*x13266))+((r20*x13269))+(((-1.0)*r22*sj3*x13277))+(((-1.0)*r20*x13270*x13281))+((cj1*cj2)));
evalcond[7]=(((r21*x13270))+(((-1.0)*r21*x13269*x13281))+((r20*x13271))+((r22*x13280))+((r20*x13264*x13272))+(((-1.0)*x13282)));
evalcond[8]=(((r11*x13272))+((r10*x13269))+(((-1.0)*r10*x13270*x13281))+((r11*x13264*x13271))+(((-1.0)*x13282))+(((-1.0)*r12*sj3*x13277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13283=((1.0)*cj5);
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13283))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
CheckValue<IkReal> x13285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13283)))),-1);
if(!x13285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13284.value)+(((1.5707963267949)*(x13285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13286=IKcos(j4);
IkReal x13287=IKsin(j4);
IkReal x13288=(cj5*r00);
IkReal x13289=(sj1*sj2);
IkReal x13290=(cj5*r01);
IkReal x13291=((1.0)*cj1);
IkReal x13292=(cj3*sj5);
IkReal x13293=(cj5*sj3);
IkReal x13294=(sj3*sj5);
IkReal x13295=(cj3*cj5);
IkReal x13296=(cj5*r10);
IkReal x13297=(cj5*r20);
IkReal x13298=(sj2*x13291);
IkReal x13299=((1.0)*cj2*sj1);
IkReal x13300=((1.0)*x13286);
IkReal x13301=(sj5*x13286);
IkReal x13302=(cj3*x13287);
IkReal x13303=(cj3*x13286);
IkReal x13304=((1.0)*x13287);
IkReal x13305=(x13298+x13299);
evalcond[0]=(((r21*x13301))+(((-1.0)*x13297*x13300))+((r22*x13287)));
evalcond[1]=(((r12*x13287))+(((-1.0)*x13296*x13300))+((r11*x13301)));
evalcond[2]=((1.0)+(((-1.0)*x13288*x13300))+((r02*x13287))+((r01*x13301)));
evalcond[3]=(((sj3*x13290))+((x13288*x13302))+(((-1.0)*r01*x13292*x13304))+((r02*x13303))+((r00*x13294)));
evalcond[4]=(((r01*x13287*x13294))+(((-1.0)*sj3*x13288*x13304))+(((-1.0)*r02*sj3*x13300))+((cj3*x13290))+((r00*x13292)));
evalcond[5]=(((r11*x13293))+((r12*x13303))+((r10*x13287*x13295))+(((-1.0)*r11*x13292*x13304))+(((-1.0)*cj2*x13291))+((r10*x13294))+x13289);
evalcond[6]=(((r20*x13292))+((r21*x13287*x13294))+(((-1.0)*x13289))+(((-1.0)*r22*sj3*x13300))+((cj1*cj2))+(((-1.0)*r20*x13293*x13304))+((r21*x13295)));
evalcond[7]=(((r20*x13294))+((r20*x13287*x13295))+(((-1.0)*r21*x13292*x13304))+((r22*x13303))+(((-1.0)*x13305))+((r21*x13293)));
evalcond[8]=((((-1.0)*r12*sj3*x13300))+((r11*x13295))+(((-1.0)*r10*x13293*x13304))+((r11*x13287*x13294))+((r10*x13292))+(((-1.0)*x13305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13306=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13306.valid){
continue;
}
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13306.value)))+(x13307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13308=IKcos(j4);
IkReal x13309=IKsin(j4);
IkReal x13310=(cj5*r00);
IkReal x13311=(sj1*sj2);
IkReal x13312=(cj5*r01);
IkReal x13313=((1.0)*cj1);
IkReal x13314=(cj3*sj5);
IkReal x13315=(cj5*sj3);
IkReal x13316=(sj3*sj5);
IkReal x13317=(cj3*cj5);
IkReal x13318=(cj5*r10);
IkReal x13319=(cj5*r20);
IkReal x13320=(sj2*x13313);
IkReal x13321=((1.0)*cj2*sj1);
IkReal x13322=((1.0)*x13308);
IkReal x13323=(sj5*x13308);
IkReal x13324=(cj3*x13309);
IkReal x13325=(cj3*x13308);
IkReal x13326=((1.0)*x13309);
IkReal x13327=(x13320+x13321);
evalcond[0]=((((-1.0)*x13319*x13322))+((r22*x13309))+((r21*x13323)));
evalcond[1]=(((r12*x13309))+(((-1.0)*x13318*x13322))+((r11*x13323)));
evalcond[2]=((1.0)+((r01*x13323))+(((-1.0)*x13310*x13322))+((r02*x13309)));
evalcond[3]=(((r02*x13325))+((r00*x13316))+((sj3*x13312))+((x13310*x13324))+(((-1.0)*r01*x13314*x13326)));
evalcond[4]=((((-1.0)*sj3*x13310*x13326))+((r00*x13314))+(((-1.0)*r02*sj3*x13322))+((cj3*x13312))+((r01*x13309*x13316)));
evalcond[5]=(((r12*x13325))+(((-1.0)*r11*x13314*x13326))+((r11*x13315))+((r10*x13316))+((r10*x13309*x13317))+(((-1.0)*cj2*x13313))+x13311);
evalcond[6]=((((-1.0)*r20*x13315*x13326))+((r20*x13314))+((r21*x13309*x13316))+((cj1*cj2))+((r21*x13317))+(((-1.0)*x13311))+(((-1.0)*r22*sj3*x13322)));
evalcond[7]=(((r20*x13316))+(((-1.0)*r21*x13314*x13326))+(((-1.0)*x13327))+((r21*x13315))+((r20*x13309*x13317))+((r22*x13325)));
evalcond[8]=(((r11*x13317))+((r10*x13314))+((r11*x13309*x13316))+(((-1.0)*r10*x13315*x13326))+(((-1.0)*x13327))+(((-1.0)*r12*sj3*x13322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13328=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13328);
rxp1_1=(px*r21);
rxp1_2=(r11*x13328);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13329=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13329);
rxp1_1=(px*r21);
rxp1_2=(r11*x13329);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13330=((1.0)*cj5);
j4eval[0]=((((-1.0)*r20*sj3*x13330))+((r21*sj3*sj5)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x13330)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13331=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13331);
rxp1_1=(px*r21);
rxp1_2=(r11*x13331);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13332=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13332);
rxp1_1=(px*r21);
rxp1_2=(r11*x13332);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13333=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13333);
rxp1_1=(px*r21);
rxp1_2=(r11*x13333);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13334=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13334);
rxp1_1=(px*r21);
rxp1_2=(r11*x13334);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13337=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13337.valid){
continue;
}
IkReal x13335=x13337.value;
IkReal x13336=(sj0*x13335);
sj4array[0]=((((-1.0)*cj1*cj2*x13336))+((sj1*sj2*x13336)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13338=IKcos(j4);
IkReal x13339=IKsin(j4);
IkReal x13340=(r21*sj5);
IkReal x13341=((1.0)*cj5*x13338);
evalcond[0]=(r02*x13338);
evalcond[1]=((((-1.0)*sj0))+((r02*x13339)));
evalcond[2]=(((x13338*x13340))+(((-1.0)*r20*x13341)));
evalcond[3]=(((r11*sj5*x13338))+(((-1.0)*r10*x13341)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x13339*x13340))+((cj5*r20*x13339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13343=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13343.valid){
continue;
}
IkReal x13342=x13343.value;
sj4array[0]=(((cj1*sj2*x13342))+((cj2*sj1*x13342)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13344=IKcos(j4);
IkReal x13345=IKsin(j4);
IkReal x13346=((1.0)*sj0);
IkReal x13347=(r11*sj5);
IkReal x13348=((1.0)*cj5*x13344);
evalcond[0]=(r02*x13344);
evalcond[1]=((((-1.0)*x13346))+((r02*x13345)));
evalcond[2]=(((r21*sj5*x13344))+(((-1.0)*r20*x13348)));
evalcond[3]=(((x13344*x13347))+(((-1.0)*r10*x13348)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x13346))+((cj5*r10*x13345))+(((-1.0)*x13345*x13347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13349=IKPowWithIntegerCheck(r02,-1);
if(!x13349.valid){
continue;
}
sj4array[0]=(sj0*(x13349.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13350=IKcos(j4);
IkReal x13351=IKsin(j4);
IkReal x13352=((1.0)*sj1);
IkReal x13353=(sj5*x13350);
IkReal x13354=(cj5*x13351);
IkReal x13355=((1.0)*sj5*x13351);
IkReal x13356=((1.0)*cj5*x13350);
evalcond[0]=(r02*x13350);
evalcond[1]=(((r21*x13353))+(((-1.0)*r20*x13356)));
evalcond[2]=(((r11*x13353))+(((-1.0)*r10*x13356)));
evalcond[3]=(((r20*x13354))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13352))+(((-1.0)*r21*x13355)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x13355))+((r10*x13354))+(((-1.0)*sj0*sj2*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13357=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13357);
rxp1_1=(px*r21);
rxp1_2=(r11*x13357);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13358=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13358);
rxp1_1=(px*r21);
rxp1_2=(r11*x13358);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13359=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13359);
rxp1_1=(px*r21);
rxp1_2=(r11*x13359);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13362=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13362.valid){
continue;
}
IkReal x13360=x13362.value;
IkReal x13361=(sj0*x13360);
sj4array[0]=(((sj1*sj2*x13361))+(((-1.0)*cj1*cj2*x13361)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13363=IKcos(j4);
IkReal x13364=IKsin(j4);
IkReal x13365=(r21*sj5);
IkReal x13366=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x13363);
evalcond[1]=((((-1.0)*sj0))+((r02*x13364)));
evalcond[2]=((((-1.0)*x13363*x13366))+((x13363*x13365)));
evalcond[3]=((((-1.0)*cj5*r10*x13363))+((r11*sj5*x13363)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*x13364*x13366))+(((-1.0)*cj1*sj2))+((x13364*x13365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13368=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13368.valid){
continue;
}
IkReal x13367=x13368.value;
sj4array[0]=(((cj2*sj1*x13367))+((cj1*sj2*x13367)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13369=IKcos(j4);
IkReal x13370=IKsin(j4);
IkReal x13371=((1.0)*sj0);
IkReal x13372=((1.0)*cj5);
IkReal x13373=(sj5*x13369);
evalcond[0]=((-1.0)*r02*x13369);
evalcond[1]=(((r02*x13370))+(((-1.0)*x13371)));
evalcond[2]=((((-1.0)*r20*x13369*x13372))+((r21*x13373)));
evalcond[3]=(((r11*x13373))+(((-1.0)*r10*x13369*x13372)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x13371))+(((-1.0)*r10*x13370*x13372))+((r11*sj5*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(r02,-1);
if(!x13374.valid){
continue;
}
sj4array[0]=(sj0*(x13374.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13375=IKcos(j4);
IkReal x13376=IKsin(j4);
IkReal x13377=((1.0)*sj1);
IkReal x13378=(r21*sj5);
IkReal x13379=(r11*sj5);
IkReal x13380=((1.0)*cj5*x13376);
IkReal x13381=((1.0)*cj5*x13375);
evalcond[0]=((-1.0)*r02*x13375);
evalcond[1]=((((-1.0)*r20*x13381))+((x13375*x13378)));
evalcond[2]=((((-1.0)*r10*x13381))+((x13375*x13379)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x13376*x13378))+(((-1.0)*r20*x13380))+(((-1.0)*cj2*x13377)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x13377))+(((-1.0)*r10*x13380))+((x13376*x13379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x13382 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13382.valid){
continue;
}
IkReal gconst66=((-1.0)*(x13382.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13383.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13384=((-1.0)*r10);
CheckValue<IkReal> x13386 = IKatan2WithCheck(IkReal(x13384),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13386.valid){
continue;
}
IkReal x13385=((-1.0)*(x13386.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13384);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13385;
IkReal gconst66=x13385;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13387=((-1.0)*r10);
CheckValue<IkReal> x13389 = IKatan2WithCheck(IkReal(x13387),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13389.valid){
continue;
}
IkReal x13388=((-1.0)*(x13389.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13387);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13388;
IkReal gconst66=x13388;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13390=((-1.0)*r10);
CheckValue<IkReal> x13392 = IKatan2WithCheck(IkReal(x13390),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13392.valid){
continue;
}
IkReal x13391=((-1.0)*(x13392.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13390);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13391;
IkReal gconst66=x13391;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=((((-1.0)*r11*r20*sj3))+((r10*r21*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13393=((1.0)*cj3);
CheckValue<IkReal> x13394=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(r02,-1);
if(!x13395.valid){
continue;
}
CheckValue<IkReal> x13396=IKPowWithIntegerCheck(sj3,-1);
if(!x13396.valid){
continue;
}
if( IKabs(((x13394.value)*(((((-1.0)*gconst68*r21*x13393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13393)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13395.value)*(x13396.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13394.value)*(((((-1.0)*gconst68*r21*x13393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13393))))))+IKsqr(((x13395.value)*(x13396.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13394.value)*(((((-1.0)*gconst68*r21*x13393))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13393))))), ((x13395.value)*(x13396.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13397=IKcos(j4);
IkReal x13398=IKsin(j4);
IkReal x13399=(cj2*sj0);
IkReal x13400=(gconst68*sj3);
IkReal x13401=(cj0*cj2);
IkReal x13402=(gconst67*sj3);
IkReal x13403=(cj1*sj2);
IkReal x13404=(cj3*r20);
IkReal x13405=(cj3*gconst68);
IkReal x13406=(cj3*r10);
IkReal x13407=((1.0)*sj1*sj2);
IkReal x13408=(gconst67*x13397);
IkReal x13409=(gconst68*x13398);
IkReal x13410=(r02*x13397);
IkReal x13411=((1.0)*x13398);
IkReal x13412=((1.0)*gconst68*x13397);
IkReal x13413=(cj3*gconst67*x13411);
evalcond[0]=((((-1.0)*sj0))+((r02*x13398)));
evalcond[1]=((((-1.0)*r20*x13412))+((r21*x13408)));
evalcond[2]=((((-1.0)*r10*x13412))+cj0+((r11*x13408)));
evalcond[3]=(((sj1*x13401))+((cj0*x13403))+(((-1.0)*sj3*x13410)));
evalcond[4]=(((cj1*x13401))+((cj3*x13410))+(((-1.0)*cj0*x13407)));
evalcond[5]=((((-1.0)*r20*x13400*x13411))+((r21*x13398*x13402))+((r21*x13405))+(((-1.0)*x13407))+((cj1*cj2))+((gconst67*x13404)));
evalcond[6]=((((-1.0)*r21*x13413))+(((-1.0)*cj2*sj1))+((r21*x13400))+((x13404*x13409))+(((-1.0)*x13403))+((r20*x13402)));
evalcond[7]=(((sj1*x13399))+((r11*x13405))+((sj0*x13403))+(((-1.0)*r10*x13400*x13411))+((r11*x13398*x13402))+((gconst67*x13406)));
evalcond[8]=((((-1.0)*r11*x13413))+((r10*x13398*x13405))+((r11*x13400))+((r10*x13402))+((cj1*x13399))+(((-1.0)*sj0*x13407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13415=IKPowWithIntegerCheck(r02,-1);
if(!x13415.valid){
continue;
}
IkReal x13414=x13415.value;
CheckValue<IkReal> x13416=IKPowWithIntegerCheck(cj3,-1);
if(!x13416.valid){
continue;
}
if( IKabs((sj0*x13414)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13414*(x13416.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13414))+IKsqr((x13414*(x13416.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13414), (x13414*(x13416.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13417=IKcos(j4);
IkReal x13418=IKsin(j4);
IkReal x13419=(cj2*sj0);
IkReal x13420=(gconst68*sj3);
IkReal x13421=(cj0*cj2);
IkReal x13422=(gconst67*sj3);
IkReal x13423=(cj1*sj2);
IkReal x13424=(cj3*r20);
IkReal x13425=(cj3*gconst68);
IkReal x13426=(cj3*r10);
IkReal x13427=((1.0)*sj1*sj2);
IkReal x13428=(gconst67*x13417);
IkReal x13429=(gconst68*x13418);
IkReal x13430=(r02*x13417);
IkReal x13431=((1.0)*x13418);
IkReal x13432=((1.0)*gconst68*x13417);
IkReal x13433=(cj3*gconst67*x13431);
evalcond[0]=(((r02*x13418))+(((-1.0)*sj0)));
evalcond[1]=((((-1.0)*r20*x13432))+((r21*x13428)));
evalcond[2]=(cj0+((r11*x13428))+(((-1.0)*r10*x13432)));
evalcond[3]=(((cj0*x13423))+(((-1.0)*sj3*x13430))+((sj1*x13421)));
evalcond[4]=((((-1.0)*cj0*x13427))+((cj1*x13421))+((cj3*x13430)));
evalcond[5]=(((r21*x13418*x13422))+(((-1.0)*x13427))+((r21*x13425))+((cj1*cj2))+(((-1.0)*r20*x13420*x13431))+((gconst67*x13424)));
evalcond[6]=((((-1.0)*x13423))+(((-1.0)*cj2*sj1))+((x13424*x13429))+(((-1.0)*r21*x13433))+((r21*x13420))+((r20*x13422)));
evalcond[7]=(((sj0*x13423))+((r11*x13425))+((r11*x13418*x13422))+((gconst67*x13426))+(((-1.0)*r10*x13420*x13431))+((sj1*x13419)));
evalcond[8]=((((-1.0)*sj0*x13427))+((r10*x13418*x13425))+(((-1.0)*r11*x13433))+((r11*x13420))+((cj1*x13419))+((r10*x13422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13435=IKPowWithIntegerCheck(r02,-1);
if(!x13435.valid){
continue;
}
IkReal x13434=x13435.value;
CheckValue<IkReal> x13436=IKPowWithIntegerCheck(sj3,-1);
if(!x13436.valid){
continue;
}
if( IKabs((sj0*x13434)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13434*(x13436.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13434))+IKsqr((x13434*(x13436.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13434), (x13434*(x13436.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13437=IKcos(j4);
IkReal x13438=IKsin(j4);
IkReal x13439=(cj2*sj0);
IkReal x13440=(gconst68*sj3);
IkReal x13441=(cj0*cj2);
IkReal x13442=(gconst67*sj3);
IkReal x13443=(cj1*sj2);
IkReal x13444=(cj3*r20);
IkReal x13445=(cj3*gconst68);
IkReal x13446=(cj3*r10);
IkReal x13447=((1.0)*sj1*sj2);
IkReal x13448=(gconst67*x13437);
IkReal x13449=(gconst68*x13438);
IkReal x13450=(r02*x13437);
IkReal x13451=((1.0)*x13438);
IkReal x13452=((1.0)*gconst68*x13437);
IkReal x13453=(cj3*gconst67*x13451);
evalcond[0]=((((-1.0)*sj0))+((r02*x13438)));
evalcond[1]=((((-1.0)*r20*x13452))+((r21*x13448)));
evalcond[2]=(cj0+(((-1.0)*r10*x13452))+((r11*x13448)));
evalcond[3]=((((-1.0)*sj3*x13450))+((cj0*x13443))+((sj1*x13441)));
evalcond[4]=((((-1.0)*cj0*x13447))+((cj1*x13441))+((cj3*x13450)));
evalcond[5]=((((-1.0)*r20*x13440*x13451))+(((-1.0)*x13447))+((gconst67*x13444))+((r21*x13438*x13442))+((cj1*cj2))+((r21*x13445)));
evalcond[6]=(((x13444*x13449))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x13453))+((r20*x13442))+(((-1.0)*x13443))+((r21*x13440)));
evalcond[7]=((((-1.0)*r10*x13440*x13451))+((gconst67*x13446))+((sj1*x13439))+((r11*x13438*x13442))+((r11*x13445))+((sj0*x13443)));
evalcond[8]=(((cj1*x13439))+(((-1.0)*sj0*x13447))+((r10*x13442))+((r10*x13438*x13445))+((r11*x13440))+(((-1.0)*r11*x13453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13454=((-1.0)*r10);
CheckValue<IkReal> x13455 = IKatan2WithCheck(IkReal(x13454),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13455.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x13455.value))));
IkReal gconst70=x13454;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x13456 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13456.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13456.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13457=((-1.0)*r10);
IkReal x13458=((-1.0)*r11);
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(x13457),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
IkReal x13459=((1.0)*(x13460.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13457);
rxp1_1=(px*r21);
rxp1_2=(px*x13458);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13459)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13459)));
IkReal gconst70=x13457;
IkReal gconst71=x13458;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13461=((-1.0)*r10);
IkReal x13462=((-1.0)*r11);
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(x13461),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
IkReal x13463=((1.0)*(x13464.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13461);
rxp1_1=(px*r21);
rxp1_2=(px*x13462);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13463)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13463)));
IkReal gconst70=x13461;
IkReal gconst71=x13462;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13465=((-1.0)*r10);
IkReal x13466=((-1.0)*r11);
CheckValue<IkReal> x13468 = IKatan2WithCheck(IkReal(x13465),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13468.valid){
continue;
}
IkReal x13467=((1.0)*(x13468.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13465);
rxp1_1=(px*r21);
rxp1_2=(px*x13466);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13467)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13467)));
IkReal gconst70=x13465;
IkReal gconst71=x13466;
IkReal x13469=((1.0)*sj3);
j4eval[0]=(((r11*r20*x13469))+(((-1.0)*r10*r21*x13469)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13470=((1.0)*r20);
CheckValue<IkReal> x13471=IKPowWithIntegerCheck(((((-1.0)*gconst71*sj3*x13470))+((gconst70*r21*sj3))),-1);
if(!x13471.valid){
continue;
}
CheckValue<IkReal> x13472=IKPowWithIntegerCheck(r02,-1);
if(!x13472.valid){
continue;
}
CheckValue<IkReal> x13473=IKPowWithIntegerCheck(sj3,-1);
if(!x13473.valid){
continue;
}
if( IKabs(((x13471.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13470))+(((-1.0)*cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13472.value)*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13471.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13470))+(((-1.0)*cj3*gconst71*r21))))))+IKsqr(((x13472.value)*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13471.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13470))+(((-1.0)*cj3*gconst71*r21))))), ((x13472.value)*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13474=IKcos(j4);
IkReal x13475=IKsin(j4);
IkReal x13476=(cj2*sj0);
IkReal x13477=(cj3*r20);
IkReal x13478=((1.0)*sj0);
IkReal x13479=((1.0)*sj1);
IkReal x13480=(gconst71*r21);
IkReal x13481=(gconst70*sj3);
IkReal x13482=(cj3*gconst70);
IkReal x13483=(cj1*sj2);
IkReal x13484=(gconst71*r11);
IkReal x13485=(cj0*cj2);
IkReal x13486=((1.0)*sj3);
IkReal x13487=(gconst71*x13475);
IkReal x13488=((1.0)*x13475);
IkReal x13489=(gconst70*x13474);
IkReal x13490=(r02*x13474);
IkReal x13491=(x13475*x13481);
IkReal x13492=((1.0)*gconst71*x13474);
evalcond[0]=((((-1.0)*x13478))+((r02*x13475)));
evalcond[1]=((((-1.0)*r20*x13492))+((r21*x13489)));
evalcond[2]=((((-1.0)*r10*x13492))+cj0+((r11*x13489)));
evalcond[3]=(((cj0*x13483))+(((-1.0)*x13486*x13490))+((sj1*x13485)));
evalcond[4]=((((-1.0)*cj0*sj2*x13479))+((cj3*x13490))+((cj1*x13485)));
evalcond[5]=(((cj3*x13480))+(((-1.0)*sj2*x13479))+(((-1.0)*r20*x13486*x13487))+((cj1*cj2))+((gconst70*x13477))+((r21*x13491)));
evalcond[6]=((((-1.0)*x13483))+(((-1.0)*r21*x13482*x13488))+((x13477*x13487))+((sj3*x13480))+((r20*x13481))+(((-1.0)*cj2*x13479)));
evalcond[7]=(((cj3*x13484))+((sj1*x13476))+((r10*x13482))+((r11*x13491))+((sj0*x13483))+(((-1.0)*r10*x13486*x13487)));
evalcond[8]=(((cj1*x13476))+((sj3*x13484))+(((-1.0)*sj1*sj2*x13478))+(((-1.0)*r11*x13482*x13488))+((r10*x13481))+((cj3*r10*x13487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(r02,-1);
if(!x13494.valid){
continue;
}
IkReal x13493=x13494.value;
CheckValue<IkReal> x13495=IKPowWithIntegerCheck(cj3,-1);
if(!x13495.valid){
continue;
}
if( IKabs((sj0*x13493)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13493*(x13495.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13493))+IKsqr((x13493*(x13495.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13493), (x13493*(x13495.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13496=IKcos(j4);
IkReal x13497=IKsin(j4);
IkReal x13498=(cj2*sj0);
IkReal x13499=(cj3*r20);
IkReal x13500=((1.0)*sj0);
IkReal x13501=((1.0)*sj1);
IkReal x13502=(gconst71*r21);
IkReal x13503=(gconst70*sj3);
IkReal x13504=(cj3*gconst70);
IkReal x13505=(cj1*sj2);
IkReal x13506=(gconst71*r11);
IkReal x13507=(cj0*cj2);
IkReal x13508=((1.0)*sj3);
IkReal x13509=(gconst71*x13497);
IkReal x13510=((1.0)*x13497);
IkReal x13511=(gconst70*x13496);
IkReal x13512=(r02*x13496);
IkReal x13513=(x13497*x13503);
IkReal x13514=((1.0)*gconst71*x13496);
evalcond[0]=(((r02*x13497))+(((-1.0)*x13500)));
evalcond[1]=(((r21*x13511))+(((-1.0)*r20*x13514)));
evalcond[2]=(cj0+(((-1.0)*r10*x13514))+((r11*x13511)));
evalcond[3]=((((-1.0)*x13508*x13512))+((cj0*x13505))+((sj1*x13507)));
evalcond[4]=(((cj1*x13507))+(((-1.0)*cj0*sj2*x13501))+((cj3*x13512)));
evalcond[5]=(((r21*x13513))+(((-1.0)*sj2*x13501))+((gconst70*x13499))+(((-1.0)*r20*x13508*x13509))+((cj1*cj2))+((cj3*x13502)));
evalcond[6]=(((r20*x13503))+((x13499*x13509))+(((-1.0)*cj2*x13501))+(((-1.0)*x13505))+((sj3*x13502))+(((-1.0)*r21*x13504*x13510)));
evalcond[7]=(((r10*x13504))+((r11*x13513))+((sj0*x13505))+((cj3*x13506))+(((-1.0)*r10*x13508*x13509))+((sj1*x13498)));
evalcond[8]=(((r10*x13503))+(((-1.0)*sj1*sj2*x13500))+((cj3*r10*x13509))+(((-1.0)*r11*x13504*x13510))+((cj1*x13498))+((sj3*x13506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13516=IKPowWithIntegerCheck(r02,-1);
if(!x13516.valid){
continue;
}
IkReal x13515=x13516.value;
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(sj3,-1);
if(!x13517.valid){
continue;
}
if( IKabs((sj0*x13515)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13515*(x13517.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13515))+IKsqr((x13515*(x13517.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13515), (x13515*(x13517.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13518=IKcos(j4);
IkReal x13519=IKsin(j4);
IkReal x13520=(cj2*sj0);
IkReal x13521=(cj3*r20);
IkReal x13522=((1.0)*sj0);
IkReal x13523=((1.0)*sj1);
IkReal x13524=(gconst71*r21);
IkReal x13525=(gconst70*sj3);
IkReal x13526=(cj3*gconst70);
IkReal x13527=(cj1*sj2);
IkReal x13528=(gconst71*r11);
IkReal x13529=(cj0*cj2);
IkReal x13530=((1.0)*sj3);
IkReal x13531=(gconst71*x13519);
IkReal x13532=((1.0)*x13519);
IkReal x13533=(gconst70*x13518);
IkReal x13534=(r02*x13518);
IkReal x13535=(x13519*x13525);
IkReal x13536=((1.0)*gconst71*x13518);
evalcond[0]=(((r02*x13519))+(((-1.0)*x13522)));
evalcond[1]=((((-1.0)*r20*x13536))+((r21*x13533)));
evalcond[2]=(cj0+(((-1.0)*r10*x13536))+((r11*x13533)));
evalcond[3]=(((cj0*x13527))+(((-1.0)*x13530*x13534))+((sj1*x13529)));
evalcond[4]=(((cj1*x13529))+(((-1.0)*cj0*sj2*x13523))+((cj3*x13534)));
evalcond[5]=((((-1.0)*r20*x13530*x13531))+(((-1.0)*sj2*x13523))+((cj3*x13524))+((cj1*cj2))+((r21*x13535))+((gconst70*x13521)));
evalcond[6]=(((r20*x13525))+(((-1.0)*x13527))+(((-1.0)*cj2*x13523))+(((-1.0)*r21*x13526*x13532))+((sj3*x13524))+((x13521*x13531)));
evalcond[7]=((((-1.0)*r10*x13530*x13531))+((cj3*x13528))+((sj1*x13520))+((sj0*x13527))+((r11*x13535))+((r10*x13526)));
evalcond[8]=(((cj3*r10*x13531))+((cj1*x13520))+(((-1.0)*r11*x13526*x13532))+((sj3*x13528))+((r10*x13525))+(((-1.0)*sj1*sj2*x13522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13538=IKPowWithIntegerCheck(r02,-1);
if(!x13538.valid){
continue;
}
IkReal x13537=x13538.value;
CheckValue<IkReal> x13539=IKPowWithIntegerCheck(sj3,-1);
if(!x13539.valid){
continue;
}
if( IKabs((sj0*x13537)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13537*(x13539.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13537))+IKsqr((x13537*(x13539.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13537), (x13537*(x13539.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13540=IKcos(j4);
IkReal x13541=IKsin(j4);
IkReal x13542=(cj2*sj0);
IkReal x13543=(cj3*cj5);
IkReal x13544=(cj0*cj2);
IkReal x13545=((1.0)*sj1);
IkReal x13546=(cj3*sj5);
IkReal x13547=(cj1*sj2);
IkReal x13548=(sj3*sj5);
IkReal x13549=(cj5*sj3);
IkReal x13550=(sj5*x13540);
IkReal x13551=(r02*x13540);
IkReal x13552=(r11*x13541);
IkReal x13553=(r21*x13541);
IkReal x13554=((1.0)*cj5*x13540);
IkReal x13555=((1.0)*x13541*x13549);
evalcond[0]=((((-1.0)*sj0))+((r02*x13541)));
evalcond[1]=(((r21*x13550))+(((-1.0)*r20*x13554)));
evalcond[2]=(cj0+((r11*x13550))+(((-1.0)*r10*x13554)));
evalcond[3]=(((sj1*x13544))+((cj0*x13547))+(((-1.0)*sj3*x13551)));
evalcond[4]=((((-1.0)*cj0*sj2*x13545))+((cj3*x13551))+((cj1*x13544)));
evalcond[5]=(((r21*x13543))+((x13548*x13553))+((r20*x13546))+(((-1.0)*sj2*x13545))+((cj1*cj2))+(((-1.0)*r20*x13555)));
evalcond[6]=((((-1.0)*x13546*x13553))+(((-1.0)*cj2*x13545))+((r21*x13549))+((r20*x13548))+((r20*x13541*x13543))+(((-1.0)*x13547)));
evalcond[7]=(((sj0*x13547))+((sj1*x13542))+((r10*x13546))+((r11*x13543))+((x13548*x13552))+(((-1.0)*r10*x13555)));
evalcond[8]=((((-1.0)*x13546*x13552))+((r10*x13548))+((r11*x13549))+((r10*x13541*x13543))+((cj1*x13542))+(((-1.0)*sj0*sj2*x13545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13556=((1.0)*cj5);
CheckValue<IkReal> x13557=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x13556))+((r21*sj3*sj5))),-1);
if(!x13557.valid){
continue;
}
CheckValue<IkReal> x13558=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13556))),-1);
if(!x13558.valid){
continue;
}
if( IKabs(((x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r20*sj5))+(((-1.0)*cj3*r21*x13556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13558.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r20*sj5))+(((-1.0)*cj3*r21*x13556))))))+IKsqr(((-1.0)*cj0*(x13558.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13557.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r20*sj5))+(((-1.0)*cj3*r21*x13556))))), ((-1.0)*cj0*(x13558.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13559=IKcos(j4);
IkReal x13560=IKsin(j4);
IkReal x13561=(cj2*sj0);
IkReal x13562=(cj3*cj5);
IkReal x13563=(cj0*cj2);
IkReal x13564=((1.0)*sj1);
IkReal x13565=(cj3*sj5);
IkReal x13566=(cj1*sj2);
IkReal x13567=(sj3*sj5);
IkReal x13568=(cj5*sj3);
IkReal x13569=(sj5*x13559);
IkReal x13570=(r02*x13559);
IkReal x13571=(r11*x13560);
IkReal x13572=(r21*x13560);
IkReal x13573=((1.0)*cj5*x13559);
IkReal x13574=((1.0)*x13560*x13568);
evalcond[0]=((((-1.0)*sj0))+((r02*x13560)));
evalcond[1]=((((-1.0)*r20*x13573))+((r21*x13569)));
evalcond[2]=((((-1.0)*r10*x13573))+cj0+((r11*x13569)));
evalcond[3]=((((-1.0)*sj3*x13570))+((cj0*x13566))+((sj1*x13563)));
evalcond[4]=((((-1.0)*cj0*sj2*x13564))+((cj3*x13570))+((cj1*x13563)));
evalcond[5]=((((-1.0)*sj2*x13564))+((r20*x13565))+((x13567*x13572))+(((-1.0)*r20*x13574))+((cj1*cj2))+((r21*x13562)));
evalcond[6]=((((-1.0)*x13565*x13572))+((r20*x13567))+(((-1.0)*cj2*x13564))+(((-1.0)*x13566))+((r21*x13568))+((r20*x13560*x13562)));
evalcond[7]=((((-1.0)*r10*x13574))+((r10*x13565))+((r11*x13562))+((sj1*x13561))+((x13567*x13571))+((sj0*x13566)));
evalcond[8]=(((r10*x13567))+(((-1.0)*x13565*x13571))+((r10*x13560*x13562))+((r11*x13568))+((cj1*x13561))+(((-1.0)*sj0*sj2*x13564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13575=IKPowWithIntegerCheck(r02,-1);
if(!x13575.valid){
continue;
}
CheckValue<IkReal> x13576=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13576.valid){
continue;
}
if( IKabs((sj0*(x13575.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13576.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x13575.value)))+IKsqr(((-1.0)*cj0*(x13576.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x13575.value)), ((-1.0)*cj0*(x13576.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13577=IKcos(j4);
IkReal x13578=IKsin(j4);
IkReal x13579=(cj2*sj0);
IkReal x13580=(cj3*cj5);
IkReal x13581=(cj0*cj2);
IkReal x13582=((1.0)*sj1);
IkReal x13583=(cj3*sj5);
IkReal x13584=(cj1*sj2);
IkReal x13585=(sj3*sj5);
IkReal x13586=(cj5*sj3);
IkReal x13587=(sj5*x13577);
IkReal x13588=(r02*x13577);
IkReal x13589=(r11*x13578);
IkReal x13590=(r21*x13578);
IkReal x13591=((1.0)*cj5*x13577);
IkReal x13592=((1.0)*x13578*x13586);
evalcond[0]=((((-1.0)*sj0))+((r02*x13578)));
evalcond[1]=((((-1.0)*r20*x13591))+((r21*x13587)));
evalcond[2]=(cj0+(((-1.0)*r10*x13591))+((r11*x13587)));
evalcond[3]=(((cj0*x13584))+((sj1*x13581))+(((-1.0)*sj3*x13588)));
evalcond[4]=((((-1.0)*cj0*sj2*x13582))+((cj1*x13581))+((cj3*x13588)));
evalcond[5]=((((-1.0)*r20*x13592))+(((-1.0)*sj2*x13582))+((r21*x13580))+((r20*x13583))+((cj1*cj2))+((x13585*x13590)));
evalcond[6]=(((r20*x13578*x13580))+(((-1.0)*x13583*x13590))+(((-1.0)*x13584))+((r21*x13586))+(((-1.0)*cj2*x13582))+((r20*x13585)));
evalcond[7]=(((r10*x13583))+((sj0*x13584))+((sj1*x13579))+(((-1.0)*r10*x13592))+((x13585*x13589))+((r11*x13580)));
evalcond[8]=(((r10*x13585))+(((-1.0)*sj0*sj2*x13582))+(((-1.0)*x13583*x13589))+((r10*x13578*x13580))+((cj1*x13579))+((r11*x13586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13593=((1.0)*sj0);
IkReal x13594=((1.0)*cj0);
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x13594))+(((-1.0)*cj5*r10*x13593))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r12*x13593))+(((-1.0)*r02*x13594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
CheckValue<IkReal> x13596=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x13596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13595.value)+(((1.5707963267949)*(x13596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13597=IKcos(j4);
IkReal x13598=IKsin(j4);
IkReal x13599=((1.0)*cj5);
IkReal x13600=(cj2*sj0);
IkReal x13601=(cj5*r01);
IkReal x13602=((1.0)*sj0);
IkReal x13603=((1.0)*sj1);
IkReal x13604=(cj3*sj5);
IkReal x13605=(cj3*cj5);
IkReal x13606=(cj1*sj2);
IkReal x13607=(sj3*sj5);
IkReal x13608=(cj0*cj2);
IkReal x13609=(cj5*sj3);
IkReal x13610=(sj5*x13597);
IkReal x13611=(sj3*x13598);
IkReal x13612=(cj3*x13597);
IkReal x13613=((1.0)*x13598);
IkReal x13614=((1.0)*sj3*x13597);
evalcond[0]=(((r21*x13610))+((r22*x13598))+(((-1.0)*r20*x13597*x13599)));
evalcond[1]=(cj0+((r11*x13610))+(((-1.0)*r10*x13597*x13599))+((r12*x13598)));
evalcond[2]=(((r01*x13610))+(((-1.0)*r00*x13597*x13599))+(((-1.0)*x13602))+((r02*x13598)));
evalcond[3]=((((-1.0)*r20*x13599*x13611))+(((-1.0)*sj2*x13603))+((r21*x13598*x13607))+((r21*x13605))+((cj1*cj2))+((r20*x13604))+(((-1.0)*r22*x13614)));
evalcond[4]=((((-1.0)*x13606))+(((-1.0)*r21*x13604*x13613))+((r20*x13598*x13605))+(((-1.0)*cj2*x13603))+((r21*x13609))+((r20*x13607))+((r22*x13612)));
evalcond[5]=(((cj0*x13606))+((r01*x13598*x13607))+(((-1.0)*r00*x13599*x13611))+(((-1.0)*r02*x13614))+((sj1*x13608))+((cj3*x13601))+((r00*x13604)));
evalcond[6]=(((r00*x13598*x13605))+((sj3*x13601))+((cj1*x13608))+(((-1.0)*r01*x13604*x13613))+((r02*x13612))+((r00*x13607))+(((-1.0)*cj0*sj2*x13603)));
evalcond[7]=(((r11*x13605))+((r10*x13604))+(((-1.0)*r10*x13599*x13611))+((r11*x13598*x13607))+((sj1*x13600))+((sj0*x13606))+(((-1.0)*r12*x13614)));
evalcond[8]=(((r11*x13609))+((r10*x13607))+((r10*x13598*x13605))+((r12*x13612))+(((-1.0)*r11*x13604*x13613))+(((-1.0)*sj1*sj2*x13602))+((cj1*x13600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13615 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x13615.valid){
continue;
}
CheckValue<IkReal> x13616=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13615.value)+(((1.5707963267949)*(x13616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13617=IKcos(j4);
IkReal x13618=IKsin(j4);
IkReal x13619=((1.0)*cj5);
IkReal x13620=(cj2*sj0);
IkReal x13621=(cj5*r01);
IkReal x13622=((1.0)*sj0);
IkReal x13623=((1.0)*sj1);
IkReal x13624=(cj3*sj5);
IkReal x13625=(cj3*cj5);
IkReal x13626=(cj1*sj2);
IkReal x13627=(sj3*sj5);
IkReal x13628=(cj0*cj2);
IkReal x13629=(cj5*sj3);
IkReal x13630=(sj5*x13617);
IkReal x13631=(sj3*x13618);
IkReal x13632=(cj3*x13617);
IkReal x13633=((1.0)*x13618);
IkReal x13634=((1.0)*sj3*x13617);
evalcond[0]=((((-1.0)*r20*x13617*x13619))+((r21*x13630))+((r22*x13618)));
evalcond[1]=(((r11*x13630))+cj0+((r12*x13618))+(((-1.0)*r10*x13617*x13619)));
evalcond[2]=((((-1.0)*r00*x13617*x13619))+(((-1.0)*x13622))+((r02*x13618))+((r01*x13630)));
evalcond[3]=((((-1.0)*r20*x13619*x13631))+((r21*x13625))+((r21*x13618*x13627))+(((-1.0)*sj2*x13623))+(((-1.0)*r22*x13634))+((cj1*cj2))+((r20*x13624)));
evalcond[4]=((((-1.0)*r21*x13624*x13633))+((r22*x13632))+((r21*x13629))+(((-1.0)*cj2*x13623))+((r20*x13618*x13625))+((r20*x13627))+(((-1.0)*x13626)));
evalcond[5]=(((cj0*x13626))+(((-1.0)*r02*x13634))+((r01*x13618*x13627))+(((-1.0)*r00*x13619*x13631))+((sj1*x13628))+((r00*x13624))+((cj3*x13621)));
evalcond[6]=((((-1.0)*r01*x13624*x13633))+((r00*x13618*x13625))+((r02*x13632))+(((-1.0)*cj0*sj2*x13623))+((cj1*x13628))+((r00*x13627))+((sj3*x13621)));
evalcond[7]=(((r10*x13624))+((r11*x13618*x13627))+((r11*x13625))+((sj0*x13626))+(((-1.0)*r12*x13634))+((sj1*x13620))+(((-1.0)*r10*x13619*x13631)));
evalcond[8]=(((r10*x13627))+((r11*x13629))+((r12*x13632))+(((-1.0)*r11*x13624*x13633))+(((-1.0)*sj1*sj2*x13622))+((r10*x13618*x13625))+((cj1*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13635 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13635.value)+(((1.5707963267949)*(x13636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13637=IKcos(j4);
IkReal x13638=IKsin(j4);
IkReal x13639=((1.0)*cj5);
IkReal x13640=(cj2*sj0);
IkReal x13641=(cj5*r01);
IkReal x13642=((1.0)*sj0);
IkReal x13643=((1.0)*sj1);
IkReal x13644=(cj3*sj5);
IkReal x13645=(cj3*cj5);
IkReal x13646=(cj1*sj2);
IkReal x13647=(sj3*sj5);
IkReal x13648=(cj0*cj2);
IkReal x13649=(cj5*sj3);
IkReal x13650=(sj5*x13637);
IkReal x13651=(sj3*x13638);
IkReal x13652=(cj3*x13637);
IkReal x13653=((1.0)*x13638);
IkReal x13654=((1.0)*sj3*x13637);
evalcond[0]=(((r22*x13638))+((r21*x13650))+(((-1.0)*r20*x13637*x13639)));
evalcond[1]=(cj0+((r12*x13638))+(((-1.0)*r10*x13637*x13639))+((r11*x13650)));
evalcond[2]=(((r01*x13650))+(((-1.0)*r00*x13637*x13639))+(((-1.0)*x13642))+((r02*x13638)));
evalcond[3]=((((-1.0)*sj2*x13643))+(((-1.0)*r22*x13654))+((r20*x13644))+((cj1*cj2))+(((-1.0)*r20*x13639*x13651))+((r21*x13638*x13647))+((r21*x13645)));
evalcond[4]=((((-1.0)*r21*x13644*x13653))+((r20*x13647))+((r22*x13652))+((r20*x13638*x13645))+(((-1.0)*x13646))+(((-1.0)*cj2*x13643))+((r21*x13649)));
evalcond[5]=((((-1.0)*r02*x13654))+((r00*x13644))+((r01*x13638*x13647))+((sj1*x13648))+(((-1.0)*r00*x13639*x13651))+((cj0*x13646))+((cj3*x13641)));
evalcond[6]=((((-1.0)*cj0*sj2*x13643))+((sj3*x13641))+((r00*x13647))+((cj1*x13648))+((r02*x13652))+((r00*x13638*x13645))+(((-1.0)*r01*x13644*x13653)));
evalcond[7]=((((-1.0)*r10*x13639*x13651))+((r11*x13638*x13647))+((r11*x13645))+(((-1.0)*r12*x13654))+((r10*x13644))+((sj1*x13640))+((sj0*x13646)));
evalcond[8]=((((-1.0)*sj1*sj2*x13642))+((r12*x13652))+(((-1.0)*r11*x13644*x13653))+((r11*x13649))+((cj1*x13640))+((r10*x13638*x13645))+((r10*x13647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13655=r21*r21;
IkReal x13656=cj5*cj5;
IkReal x13657=r20*r20;
IkReal x13658=(cj3*r20);
IkReal x13659=((1.0)*sj5);
IkReal x13660=(sj1*sj2);
IkReal x13661=((1.0)*sj3);
IkReal x13662=(cj3*cj5);
IkReal x13663=(cj1*cj2);
IkReal x13664=(cj5*r20);
IkReal x13665=(r21*sj5);
IkReal x13666=((1.0)*r22);
IkReal x13667=(sj3*x13655);
CheckValue<IkReal> x13668=IKPowWithIntegerCheck(IKsign(((((2.0)*sj3*x13664*x13665))+(((-1.0)*x13661*(r22*r22)))+((x13656*x13667))+(((-1.0)*x13655*x13661))+(((-1.0)*x13656*x13657*x13661)))),-1);
if(!x13668.valid){
continue;
}
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal(((((-2.0)*r21*x13656*x13658))+(((-1.0)*r21*x13659*x13660))+(((-1.0)*x13657*x13659*x13662))+((sj5*x13655*x13662))+((r21*x13658))+((x13660*x13664))+(((-1.0)*x13663*x13664))+((x13663*x13665)))),IkReal((((r22*x13660))+(((-1.0)*r22*x13658*x13659))+(((-1.0)*x13663*x13666))+(((-1.0)*r21*x13662*x13666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13668.value)))+(x13669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13670=IKcos(j4);
IkReal x13671=IKsin(j4);
IkReal x13672=(cj5*r21);
IkReal x13673=((1.0)*sj2);
IkReal x13674=(r20*sj5);
IkReal x13675=(r21*sj5);
IkReal x13676=(cj5*r20);
IkReal x13677=(r22*x13670);
IkReal x13678=(sj3*x13671);
IkReal x13679=(cj3*x13671);
evalcond[0]=(((r22*x13671))+(((-1.0)*x13670*x13676))+((x13670*x13675)));
evalcond[1]=((((-1.0)*x13676*x13678))+((cj3*x13672))+((cj3*x13674))+(((-1.0)*sj1*x13673))+(((-1.0)*sj3*x13677))+((x13675*x13678))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x13675*x13679))+((cj3*x13677))+(((-1.0)*cj2*sj1))+((sj3*x13672))+((sj3*x13674))+((x13676*x13679))+(((-1.0)*cj1*x13673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13680=(cj4*cj5);
IkReal x13681=(cj4*sj5);
if( IKabs((((r02*sj4))+((r01*x13681))+(((-1.0)*r00*x13680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x13681))+((r10*x13680))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+((r01*x13681))+(((-1.0)*r00*x13680))))+IKsqr(((((-1.0)*r11*x13681))+((r10*x13680))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+((r01*x13681))+(((-1.0)*r00*x13680))), ((((-1.0)*r11*x13681))+((r10*x13680))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13682=IKcos(j0);
IkReal x13683=IKsin(j0);
IkReal x13684=(cj3*cj4);
IkReal x13685=((1.0)*sj2);
IkReal x13686=(cj5*r01);
IkReal x13687=(cj1*cj2);
IkReal x13688=((0.24)*cj2);
IkReal x13689=(sj3*sj4);
IkReal x13690=(r01*sj5);
IkReal x13691=(cj5*r11);
IkReal x13692=(r00*sj5);
IkReal x13693=(r11*sj5);
IkReal x13694=(cj3*r10);
IkReal x13695=(cj5*sj4);
IkReal x13696=(r10*sj5);
IkReal x13697=(sj1*x13683);
IkReal x13698=((1.0)*cj4*sj3);
IkReal x13699=((1.0)*cj5*r00);
IkReal x13700=(sj1*x13682);
IkReal x13701=((1.0)*cj3*sj4);
IkReal x13702=((1.0)*cj5*r10);
IkReal x13703=(cj1*sj2*x13682);
IkReal x13704=(cj1*sj2*x13683);
evalcond[0]=(x13682+((cj4*x13693))+((r12*sj4))+(((-1.0)*cj4*x13702)));
evalcond[1]=((((-1.0)*cj4*x13699))+((cj4*x13690))+((r02*sj4))+(((-1.0)*x13683)));
evalcond[2]=((((-0.095)*x13692))+(((0.265)*x13700))+(((-1.0)*px))+(((-0.11)*x13683))+(((-0.095)*x13686))+(((0.24)*x13703))+((x13688*x13700)));
evalcond[3]=((((-0.095)*x13696))+(((-0.095)*x13691))+(((-1.0)*py))+(((0.265)*x13697))+((x13688*x13697))+(((0.24)*x13704))+(((0.11)*x13682)));
evalcond[4]=(x13703+((cj3*x13686))+(((-1.0)*r02*x13698))+((cj2*x13700))+((x13689*x13690))+(((-1.0)*x13689*x13699))+((cj3*x13692)));
evalcond[5]=(((sj3*x13692))+(((-1.0)*x13690*x13701))+((r02*x13684))+((cj3*r00*x13695))+((x13682*x13687))+((sj3*x13686))+(((-1.0)*x13685*x13700)));
evalcond[6]=(((sj5*x13694))+x13704+(((-1.0)*x13689*x13702))+((x13689*x13693))+((cj3*x13691))+((cj2*x13697))+(((-1.0)*r12*x13698)));
evalcond[7]=(((sj3*x13691))+((sj3*x13696))+((r12*x13684))+((x13683*x13687))+(((-1.0)*x13693*x13701))+((x13694*x13695))+(((-1.0)*x13685*x13697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13705=r21*r21;
IkReal x13706=cj5*cj5;
IkReal x13707=r20*r20;
IkReal x13708=(r20*r21);
IkReal x13709=(cj5*sj5);
IkReal x13710=((1.0)*sj3);
IkReal x13711=(cj1*sj2);
IkReal x13712=(cj5*r20);
IkReal x13713=(cj2*sj1);
IkReal x13714=(cj3*x13706);
IkReal x13715=((1.0)*r21*sj5);
CheckValue<IkReal> x13716 = IKatan2WithCheck(IkReal(((((-1.0)*x13713*x13715))+((sj3*x13708))+(((-2.0)*sj3*x13706*x13708))+((sj3*x13705*x13709))+((x13712*x13713))+((x13711*x13712))+(((-1.0)*x13707*x13709*x13710))+(((-1.0)*x13711*x13715)))),IkReal((((r22*x13713))+((r22*x13711))+(((-1.0)*cj5*r21*r22*x13710))+(((-1.0)*r20*r22*sj5*x13710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13716.valid){
continue;
}
CheckValue<IkReal> x13717=IKPowWithIntegerCheck(IKsign((((x13707*x13714))+(((-1.0)*x13705*x13714))+((cj3*(r22*r22)))+((cj3*x13705))+(((-2.0)*cj3*x13708*x13709)))),-1);
if(!x13717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13716.value)+(((1.5707963267949)*(x13717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13718=IKcos(j4);
IkReal x13719=IKsin(j4);
IkReal x13720=(cj5*r21);
IkReal x13721=((1.0)*sj2);
IkReal x13722=(r20*sj5);
IkReal x13723=(r21*sj5);
IkReal x13724=(cj5*r20);
IkReal x13725=(r22*x13718);
IkReal x13726=(sj3*x13719);
IkReal x13727=(cj3*x13719);
evalcond[0]=((((-1.0)*x13718*x13724))+((x13718*x13723))+((r22*x13719)));
evalcond[1]=((((-1.0)*sj3*x13725))+(((-1.0)*x13724*x13726))+(((-1.0)*sj1*x13721))+((x13723*x13726))+((cj1*cj2))+((cj3*x13722))+((cj3*x13720)));
evalcond[2]=((((-1.0)*x13723*x13727))+(((-1.0)*cj1*x13721))+((x13724*x13727))+(((-1.0)*cj2*sj1))+((cj3*x13725))+((sj3*x13720))+((sj3*x13722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13728=(cj4*cj5);
IkReal x13729=(cj4*sj5);
if( IKabs((((r01*x13729))+((r02*sj4))+(((-1.0)*r00*x13728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13728))+(((-1.0)*r11*x13729))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13729))+((r02*sj4))+(((-1.0)*r00*x13728))))+IKsqr((((r10*x13728))+(((-1.0)*r11*x13729))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x13729))+((r02*sj4))+(((-1.0)*r00*x13728))), (((r10*x13728))+(((-1.0)*r11*x13729))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13730=IKcos(j0);
IkReal x13731=IKsin(j0);
IkReal x13732=(cj3*cj4);
IkReal x13733=((1.0)*sj2);
IkReal x13734=(cj5*r01);
IkReal x13735=(cj1*cj2);
IkReal x13736=((0.24)*cj2);
IkReal x13737=(sj3*sj4);
IkReal x13738=(r01*sj5);
IkReal x13739=(cj5*r11);
IkReal x13740=(r00*sj5);
IkReal x13741=(r11*sj5);
IkReal x13742=(cj3*r10);
IkReal x13743=(cj5*sj4);
IkReal x13744=(r10*sj5);
IkReal x13745=(sj1*x13731);
IkReal x13746=((1.0)*cj4*sj3);
IkReal x13747=((1.0)*cj5*r00);
IkReal x13748=(sj1*x13730);
IkReal x13749=((1.0)*cj3*sj4);
IkReal x13750=((1.0)*cj5*r10);
IkReal x13751=(cj1*sj2*x13730);
IkReal x13752=(cj1*sj2*x13731);
evalcond[0]=((((-1.0)*cj4*x13750))+x13730+((cj4*x13741))+((r12*sj4)));
evalcond[1]=((((-1.0)*cj4*x13747))+((cj4*x13738))+((r02*sj4))+(((-1.0)*x13731)));
evalcond[2]=(((x13736*x13748))+(((-0.095)*x13734))+(((-1.0)*px))+(((-0.11)*x13731))+(((0.24)*x13751))+(((-0.095)*x13740))+(((0.265)*x13748)));
evalcond[3]=(((x13736*x13745))+(((-0.095)*x13739))+(((-1.0)*py))+(((0.24)*x13752))+(((-0.095)*x13744))+(((0.265)*x13745))+(((0.11)*x13730)));
evalcond[4]=((((-1.0)*r02*x13746))+x13751+(((-1.0)*x13737*x13747))+((x13737*x13738))+((cj3*x13740))+((cj3*x13734))+((cj2*x13748)));
evalcond[5]=((((-1.0)*x13733*x13748))+((x13730*x13735))+((r02*x13732))+((sj3*x13734))+((cj3*r00*x13743))+(((-1.0)*x13738*x13749))+((sj3*x13740)));
evalcond[6]=((((-1.0)*r12*x13746))+x13752+((sj5*x13742))+(((-1.0)*x13737*x13750))+((cj3*x13739))+((cj2*x13745))+((x13737*x13741)));
evalcond[7]=((((-1.0)*x13733*x13745))+((x13731*x13735))+((x13742*x13743))+((r12*x13732))+((sj3*x13739))+(((-1.0)*x13741*x13749))+((sj3*x13744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - elerobot (4efc8eb373551087c6a86e7a4ba76cd5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
