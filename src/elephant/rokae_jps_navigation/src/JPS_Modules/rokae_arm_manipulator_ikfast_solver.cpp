/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-04-03 15:49:40.623047
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "JPS_Modules/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.172)*x5);
x13=((0.238)*x10);
x14=((0.172)*x6);
x15=((1.0)*x5);
x16=((1.0)*x0);
x17=((0.238)*x0);
x18=((0.172)*x11);
x19=((0.095)*x10);
x20=((0.095)*x0);
x21=((1.0)*x10);
x22=((1.0)*x11);
x23=((1.0)*x6);
x24=((0.265)*x1);
x25=(x10*x9);
x26=(x1*x4);
x27=(x3*x4);
x28=((-1.0)*x5);
x29=(x2*x3);
x30=(x1*x2);
x31=((-1.0)*x6);
x32=(x19*x2);
x33=(x16*x30);
x34=(x21*x30);
x35=((((-1.0)*x27))+(((1.0)*x30)));
x36=((((1.0)*x26))+(((1.0)*x29)));
x37=((-1.0)*x36);
x38=(x35*x5);
x39=((((-1.0)*x33))+((x0*x27)));
x40=((((-1.0)*x34))+((x10*x27)));
x41=(x37*x6);
x42=(x16*(((((-1.0)*x26))+(((-1.0)*x29)))));
x43=(x21*(((((-1.0)*x26))+(((-1.0)*x29)))));
x44=(x42*x5);
x45=(((x35*x6))+((x36*x5)));
x46=(((x42*x6))+((x5*(((((-1.0)*x16*x27))+x33)))));
x47=(((x43*x6))+((x5*(((((-1.0)*x21*x27))+x34)))));
x48=((((-1.0)*x15*x42))+(((-1.0)*x23*x39)));
x49=((((-1.0)*x15*x43))+(((-1.0)*x23*x40)));
x50=(x11*x49);
eerot[0]=(((x7*(((((-1.0)*x25))+((x11*((((x28*x42))+((x31*x39))))))))))+((x46*x8)));
eerot[1]=(((x8*((((x21*x9))+(((-1.0)*x22*x48))))))+((x46*x7)));
eerot[2]=(((x48*x9))+((x10*x11)));
eetrans[0]=(((x0*x24))+(((-0.113)*x10))+((x9*(((((-1.0)*x12*x42))+(((-1.0)*x14*x39))))))+((x5*(((((-1.0)*x20*x30))+((x20*x27))))))+((x17*x29))+((x17*x26))+((x6*((((x20*x29))+((x20*x26))))))+((x10*x18)));
eerot[3]=(((x47*x8))+((x7*((((x0*x9))+x50)))));
eerot[4]=(((x47*x7))+((x8*(((((-1.0)*x16*x9))+(((-1.0)*x22*x49)))))));
eerot[5]=((((-1.0)*x11*x16))+((x49*x9)));
eetrans[1]=(((x5*((((x19*x27))+(((-1.0)*x19*x30))))))+(((0.113)*x0))+(((-1.0)*x0*x18))+((x10*x24))+((x13*x29))+((x13*x26))+((x6*((((x19*x29))+((x19*x26))))))+((x9*(((((-1.0)*x12*x43))+(((-1.0)*x14*x40)))))));
eerot[6]=(((x11*x7*((((x28*x35))+((x31*x37))))))+((x45*x8)));
eerot[7]=(((x11*x8*((x38+x41))))+((x45*x7)));
eerot[8]=(x9*(((((-1.0)*x23*x37))+(((-1.0)*x15*x35)))));
eetrans[2]=((0.107)+(((0.265)*x3))+(((-0.238)*x30))+(((0.238)*x27))+((x9*(((((-1.0)*x12*x35))+(((-1.0)*x14*x37))))))+((x5*(((((-0.095)*x29))+(((-0.095)*x26))))))+((x6*(((((0.095)*x27))+(((-0.095)*x30)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.172)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.172)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.107)+(((-0.172)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x51=((1.0)*px);
IkReal x52=((1.0)*pz);
IkReal x53=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x53))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x52)));
rxp0_2=((((-1.0)*r10*x51))+((py*r00)));
rxp1_0=((((-1.0)*r21*x53))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x52)));
rxp1_2=((((-1.0)*r11*x51))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x53)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x52)));
rxp2_2=((((-1.0)*r12*x51))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x54=((0.19)*npx);
IkReal x55=((0.19)*npy);
IkReal x56=((0.095)*r20);
IkReal x57=((0.095)*r22);
IkReal x58=((-0.095)*r20);
IkReal x59=((-1.0)*r20);
IkReal x60=((-1.0)*rxp0_2);
IkReal x61=((-0.095)*r21);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*rxp1_2);
IkReal x64=((-1.0)*rxp2_2);
IkReal x65=((-1.0)*npx);
matrixinvcoeffs[0]=x58;
matrixinvcoeffs[1]=x54;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x59;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x60;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x58;
matrixinvcoeffs[19]=x54;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x59;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x60;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x55;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x62;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x63;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x55;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x62;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x64;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-0.095)*r22);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x64;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x57;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=((-1.0)*npy);
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=r21;
matrixinvcoeffs[108]=x61;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=rxp1_2;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=npy;
matrixinvcoeffs[122]=x62;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x61;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x63;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npx;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=x59;
matrixinvcoeffs[140]=x56;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x60;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x65;
matrixinvcoeffs[154]=r20;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x56;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp0_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=((-1.0)*r22);
matrixinvcoeffs[172]=x57;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x64;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=((-1.0)*npz);
matrixinvcoeffs[186]=r22;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x57;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=r21;
matrixinvcoeffs[197]=npy;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x63;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x61;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=r21;
matrixinvcoeffs[215]=npy;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x63;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((0.095)*r21);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x59;
matrixinvcoeffs[229]=x65;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp0_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x56;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x59;
matrixinvcoeffs[247]=x65;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp0_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x58;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_10=matrixinvcoeffs[165], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_10=matrixinvcoeffs[173], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_10=matrixinvcoeffs[175], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=(gclwh8_8*r20);
IkReal x68=((0.1007)*rxp1_2);
IkReal x69=(npy*pz);
IkReal x70=((4.0)*gclwh12_11);
IkReal x71=(gclwh15_13*r20);
IkReal x72=((0.09044)*rxp1_2);
IkReal x73=(gclwh5_0*pz);
IkReal x74=((0.009025)*r22);
IkReal x75=((0.38)*rxp2_2);
IkReal x76=((0.38)*rxp0_2);
IkReal x77=(gclwh14_2*r20);
IkReal x78=(npz*pz);
IkReal x79=(gclwh15_0*r20);
IkReal x80=((0.952)*pp);
IkReal x81=(pp*pz);
IkReal x82=(pp*r22);
IkReal x83=(gclwh6_14*r21);
IkReal x84=((0.0042959)*r21);
IkReal x85=((2.0)*gclwh4_11);
IkReal x86=((0.01805)*r22);
IkReal x87=((0.19)*rxp0_2);
IkReal x88=(npx*pz);
IkReal x89=(gclwh10_14*rxp2_2);
IkReal x90=((0.0361)*r22);
IkReal x91=((0.02147)*rxp1_2);
IkReal x92=((0.02147)*rxp2_2);
IkReal x93=(gclwh8_3*rxp0_2);
IkReal x94=((0.1007)*rxp0_2);
IkReal x95=((0.19)*rxp2_2);
IkReal x96=((0.09557)*rxp2_2);
IkReal x97=(pp*r20);
IkReal x98=((2.0)*gclwh15_10);
IkReal x99=((0.009025)*r21);
IkReal x100=((0.0042959)*r20);
IkReal x101=(gclwh13_0*r21);
IkReal x102=((4.0)*gclwh14_11);
IkReal x103=(gclwh8_2*rxp0_2);
IkReal x104=((0.027)*pp);
IkReal x105=((2.0)*gclwh13_10);
IkReal x106=((0.0042959)*r22);
IkReal x107=((0.04294)*rxp1_2);
IkReal x108=(gclwh5_0*r22);
IkReal x109=((0.19)*rxp1_2);
IkReal x110=(gclwh12_12*r21);
IkReal x111=((0.1007)*rxp2_2);
IkReal x112=(gclwh7_7*r21);
IkReal x113=((0.113)*pp);
IkReal x114=(gclwh14_12*r20);
IkReal x115=(gclwh10_12*rxp2_2);
IkReal x116=((0.00478325)*r21);
IkReal x117=((0.38)*rxp1_2);
IkReal x118=(gclwh10_14*r22);
IkReal x119=((0.04878307)*rxp2_2);
IkReal x120=((4.0)*gclwh15_10);
IkReal x121=(gclwh4_2*r22);
IkReal x122=(pp*r21);
IkReal x123=((0.02147)*rxp0_2);
IkReal x124=(gclwh7_0*rxp1_2);
IkReal x125=((0.09044)*rxp2_2);
IkReal x126=(gclwh6_8*rxp1_2);
IkReal x127=(gclwh9_13*rxp0_2);
IkReal x128=((0.01805)*r21);
IkReal x129=(gclwh9_0*rxp0_2);
IkReal x130=(gclwh15_10*r20);
IkReal x131=(gclwh12_2*r21);
IkReal x132=((0.76)*rxp1_2);
IkReal x133=(gclwh13_7*r21);
IkReal x134=(gclwh6_12*rxp1_2);
IkReal x135=((0.226)*gclwh7_15);
IkReal x136=(gclwh7_9*rxp1_2);
IkReal x137=(gclwh8_8*rxp0_2);
IkReal x138=((0.001019825)*r21);
IkReal x139=((0.001019825)*r22);
IkReal x140=((0.00203965)*r20);
IkReal x141=((0.01805)*r20);
IkReal x142=((0.226)*gclwh8_14);
IkReal x143=((0.04294)*rxp0_2);
IkReal x144=((2.0)*gclwh5_10);
IkReal x145=((0.009025)*pz);
IkReal x146=((4.0)*gclwh4_11);
IkReal x147=((0.226)*gclwh10_14);
IkReal x148=((4.0)*gclwh5_10);
IkReal x149=((2.0)*gclwh12_11);
IkReal x150=((0.00478325)*r22);
IkReal x151=(gclwh4_12*r22);
IkReal x152=(gclwh8_12*rxp0_2);
IkReal x153=(gclwh10_8*rxp2_2);
IkReal x154=((0.001019825)*r20);
IkReal x155=(gclwh6_2*rxp1_2);
IkReal x156=((0.226)*gclwh9_15);
IkReal x157=((0.0361)*r21);
IkReal x158=((0.04878307)*rxp1_2);
IkReal x159=(gclwh11_0*rxp2_2);
IkReal x160=((0.76)*rxp0_2);
IkReal x161=((0.226)*gclwh11_15);
IkReal x162=((0.503)*pp);
IkReal x163=((4.0)*gclwh13_10);
IkReal x164=((0.09044)*rxp0_2);
IkReal x165=(gclwh11_9*rxp2_2);
IkReal x166=((0.00084987)*rxp1_2);
IkReal x167=(gclwh9_9*rxp0_2);
IkReal x168=(gclwh9_1*rxp0_2);
IkReal x169=((0.00084987)*rxp2_2);
IkReal x170=((0.76)*rxp2_2);
IkReal x171=(gclwh14_11*r20);
IkReal x172=(gclwh10_2*rxp2_2);
IkReal x173=(gclwh7_15*r21);
IkReal x174=((2.0)*gclwh14_11);
IkReal x175=(gclwh4_5*x139);
IkReal x176=(gclwh10_5*x92);
IkReal x177=(gclwh12_5*x138);
IkReal x178=(gclwh8_14*x123);
IkReal x179=((0.02147)*x89);
IkReal x180=(gclwh8_5*x123);
IkReal x181=(gclwh14_5*x154);
IkReal x182=(gclwh6_14*x91);
IkReal x183=(gclwh6_5*x91);
IkReal x184=(gclwh6_11*x109);
IkReal x185=((0.009025)*x171);
IkReal x186=(gclwh4_11*x74);
IkReal x187=(gclwh10_11*x95);
IkReal x188=(gclwh8_11*x87);
IkReal x189=(gclwh12_11*x99);
IkReal x190=(gclwh9_10*x87);
IkReal x191=(gclwh13_10*x99);
IkReal x192=(gclwh11_10*x95);
IkReal x193=(gclwh5_10*x74);
IkReal x194=(gclwh7_10*x109);
IkReal x195=((0.009025)*x130);
IkReal x196=(gclwh5_7*x139);
IkReal x197=((0.001019825)*x133);
IkReal x198=(gclwh9_15*x123);
IkReal x199=(gclwh11_7*x92);
IkReal x200=(gclwh9_7*x123);
IkReal x201=(gclwh11_15*x92);
IkReal x202=(gclwh15_7*x154);
IkReal x203=(gclwh7_7*x91);
IkReal x204=(gclwh7_15*x91);
IkReal x205=(gclwh8_5*x154);
IkReal x206=(gclwh8_14*x154);
IkReal x207=(gclwh14_5*x123);
IkReal x208=(gclwh10_5*x139);
IkReal x209=((0.001019825)*x118);
IkReal x210=(gclwh4_5*x92);
IkReal x211=(gclwh6_5*x138);
IkReal x212=((0.001019825)*x83);
IkReal x213=(gclwh12_5*x91);
IkReal x214=((0.001019825)*x112);
IkReal x215=(gclwh7_15*x138);
IkReal x216=(gclwh5_7*x92);
IkReal x217=(gclwh13_7*x91);
IkReal x218=(gclwh9_15*x154);
IkReal x219=(gclwh11_7*x139);
IkReal x220=(gclwh9_7*x154);
IkReal x221=(gclwh15_7*x123);
IkReal x222=(gclwh11_15*x139);
IkReal x223=(gclwh10_11*x75);
IkReal x224=(gclwh12_11*x128);
IkReal x225=(gclwh8_11*x76);
IkReal x226=(gclwh4_11*x86);
IkReal x227=(gclwh6_11*x117);
IkReal x228=(gclwh14_11*x141);
IkReal x229=(gclwh6_14*x107);
IkReal x230=(gclwh13_10*x128);
IkReal x231=(gclwh9_10*x76);
IkReal x232=(gclwh11_10*x75);
IkReal x233=(gclwh5_10*x86);
IkReal x234=(gclwh7_10*x117);
IkReal x235=((0.01805)*x130);
IkReal x236=(pp*x110);
IkReal x237=((0.226)*gclwh14_5*x88);
IkReal x238=((0.113)*gclwh4_5*x82);
IkReal x239=(gclwh12_5*r21*x113);
IkReal x240=((0.113)*gclwh14_5*x97);
IkReal x241=((0.226)*gclwh4_5*x78);
IkReal x242=((0.226)*gclwh12_5*x69);
IkReal x243=(x77*x81);
IkReal x244=(gclwh10_3*pp*x95);
IkReal x245=(x78*x85);
IkReal x246=(gclwh8_3*pp*x87);
IkReal x247=(x145*x77);
IkReal x248=(gclwh6_2*pz*x109);
IkReal x249=(x149*x69);
IkReal x250=(gclwh8_2*pz*x87);
IkReal x251=(x174*x88);
IkReal x252=(gclwh6_3*pp*x109);
IkReal x253=(gclwh10_2*pz*x95);
IkReal x254=(gclwh12_2*pz*x99);
IkReal x255=(gclwh4_2*pz*x74);
IkReal x256=(x79*x81);
IkReal x257=(gclwh9_1*pp*x87);
IkReal x258=(gclwh7_0*pz*x109);
IkReal x259=(gclwh11_1*pp*x95);
IkReal x260=(x88*x98);
IkReal x261=(x145*x79);
IkReal x262=(gclwh11_0*pz*x95);
IkReal x263=(gclwh9_0*pz*x87);
IkReal x264=(gclwh13_0*pz*x99);
IkReal x265=(x73*x74);
IkReal x266=(x144*x78);
IkReal x267=(x105*x69);
IkReal x268=(gclwh7_1*pp*x109);
IkReal x269=(x113*x133);
IkReal x270=((0.226)*gclwh15_7*x88);
IkReal x271=((0.113)*gclwh5_7*x82);
IkReal x272=((0.113)*gclwh15_7*x97);
IkReal x273=((0.226)*gclwh13_7*x69);
IkReal x274=((0.226)*gclwh5_7*x78);
IkReal x275=((0.226)*gclwh6_5*x69);
IkReal x276=((0.113)*gclwh8_5*x97);
IkReal x277=((0.226)*gclwh6_14*x69);
IkReal x278=((0.113)*gclwh8_14*x97);
IkReal x279=((0.113)*gclwh10_5*x82);
IkReal x280=((0.113)*gclwh10_14*x82);
IkReal x281=(x142*x88);
IkReal x282=(gclwh6_5*r21*x113);
IkReal x283=((0.226)*gclwh8_5*x88);
IkReal x284=((0.226)*gclwh10_5*x78);
IkReal x285=(x147*x78);
IkReal x286=(x113*x83);
IkReal x287=(x112*x113);
IkReal x288=(x113*x173);
IkReal x289=(x161*x78);
IkReal x290=((0.226)*gclwh9_7*x88);
IkReal x291=(x156*x88);
IkReal x292=((0.226)*gclwh11_7*x78);
IkReal x293=(x135*x69);
IkReal x294=((0.113)*gclwh11_15*x82);
IkReal x295=((0.226)*gclwh7_7*x69);
IkReal x296=((0.113)*gclwh9_15*x97);
IkReal x297=((0.113)*gclwh9_7*x97);
IkReal x298=((0.113)*gclwh11_7*x82);
IkReal x299=(x82*x85);
IkReal x300=(x122*x149);
IkReal x301=(x102*x88);
IkReal x302=(x174*x97);
IkReal x303=(x69*x70);
IkReal x304=(x146*x78);
IkReal x305=(x105*x122);
IkReal x306=(x120*x88);
IkReal x307=(x144*x82);
IkReal x308=(x97*x98);
IkReal x309=(x148*x78);
IkReal x310=(x163*x69);
IkReal x311=((2.0)*npz*x66);
IkReal x312=((2.0)*npx*x66);
IkReal x313=((2.0)*npy*x66);
IkReal x314=(gclwh12_2*x313);
IkReal x315=(gclwh4_2*x311);
IkReal x316=((1.0)*x131*x81);
IkReal x317=((1.0)*x121*x81);
IkReal x318=(gclwh14_2*x312);
IkReal x319=(gclwh5_0*x311);
IkReal x320=(gclwh13_0*x313);
IkReal x321=((1.0)*x73*x82);
IkReal x322=(gclwh15_0*x312);
IkReal x323=((1.0)*x101*x81);
IkReal x324=((((0.04294)*x89))+((gclwh8_14*x143)));
IkReal x325=(x179+x178);
IkReal x326=(x198+x201);
IkReal x327=(x324+(((-1.0)*x229)));
IkReal x328=((((-0.04294)*gclwh11_15*rxp2_2))+(((-1.0)*gclwh9_15*x143))+((gclwh7_15*x107)));
IkReal x329=(x195+x194+x267+x266);
IkReal x330=(x184+x185+x245+x249);
IkReal x331=(x212+x286+x285+x281);
IkReal x332=(x215+x291+x289+x288);
IkReal x333=(x186+x187+x188+x189+x251);
IkReal x334=(x193+x192+x191+x190+x260);
IkReal x335=(x181+x183+x242+x241+x240);
IkReal x336=(x304+x302+x303+x228+x227);
IkReal x337=(x203+x202+x274+x272+x273);
IkReal x338=(x308+x309+x310+x234+x235);
IkReal x339=(x206+x209+x277+x278+x280);
IkReal x340=(x218+x222+x293+x294+x296);
IkReal x341=(x207+x205+x208+x276+x275+x279);
IkReal x342=(x210+x211+x213+x284+x283+x282);
IkReal x343=(x219+x221+x220+x298+x295+x297);
IkReal x344=(x214+x216+x217+x290+x292+x287);
IkReal x345=(x300+x301+x223+x225+x224+x226+x299);
IkReal x346=(x199+x197+x196+x200+x269+x270+x271);
IkReal x347=(x306+x307+x305+x232+x233+x230+x231);
IkReal x348=(x175+x177+x176+x180+x238+x239+x237);
IkReal x349=(x320+x319+x258+x259+x256+x257+x261);
IkReal x350=(x315+x314+x243+x247+x246+x244+x248);
IkReal x351=(x321+x322+x323+x265+x264+x263+x262+x268);
IkReal x352=(x318+x317+x316+x254+x255+x250+x252+x253);
op[0]=((0.113678)+(((-1.0)*x325))+x182+x348+(((-1.0)*x335)));
op[1]=((((0.09557)*x103))+(((0.004539575)*x131))+(((0.07752)*x126))+(((-1.006)*gclwh4_2*x78))+(((-0.07752)*x153))+(((0.004539575)*x121))+(((-1.0)*gclwh14_11*x97))+(((-0.09557)*x155))+(((1.006)*gclwh14_2*x88))+(((-1.0)*x352))+(((0.503)*gclwh4_2*x82))+((gclwh6_3*x158))+(((-1.0)*x162*x77))+((gclwh4_11*x82))+(((-0.004539575)*x77))+x333+x350+(((-1.0)*gclwh10_3*x119))+(((-1.006)*gclwh12_2*x69))+(((0.503)*gclwh12_2*x122))+(((-1.0)*x330))+(((-0.07752)*x137))+((gclwh10_2*x96))+(((-0.04878307)*x93))+((gclwh12_11*x122)));
op[2]=((((-0.952)*gclwh4_12*x78))+((gclwh6_8*x68))+(((-1.0)*gclwh14_12*x100))+(((0.476)*x236))+(((0.09044)*x115))+(((0.476)*gclwh4_12*x82))+x345+(((-0.952)*gclwh12_12*x69))+(((0.952)*gclwh14_12*x88))+(((0.09044)*x152))+((gclwh4_12*x106))+(((-1.0)*x336))+(((-1.0)*gclwh10_8*x111))+(((-0.476)*gclwh14_12*x97))+(((-1.0)*gclwh6_12*x72))+((gclwh12_12*x84))+(((-1.0)*gclwh8_8*x94)));
op[3]=x327;
op[4]=((0.006102)+(((-1.0)*x182))+x325+x348+(((-1.0)*x335)));
op[5]=((((0.02318)*x137))+(((-1.0)*gclwh4_11*x82))+((gclwh6_3*x166))+(((-0.054)*gclwh4_2*x78))+(((-1.0)*x352))+(((0.00513)*x172))+(((0.027)*gclwh4_2*x82))+(((-1.0)*gclwh12_11*x122))+(((-0.00084987)*x93))+x330+x350+(((0.00513)*x103))+(((0.02318)*x153))+(((-0.00513)*x155))+((gclwh14_11*x97))+((x104*x131))+(((-1.0)*x333))+(((-1.0)*gclwh10_3*x169))+(((-0.000243675)*x77))+(((-0.02318)*x126))+(((-1.0)*x104*x77))+(((-0.054)*gclwh12_2*x69))+(((0.000243675)*x121))+(((0.054)*gclwh14_2*x88))+(((0.000243675)*x131)));
op[6]=(((gclwh7_1*x158))+(((-1.0)*gclwh5_10*x82))+(((0.09557)*x129))+(((1.006)*gclwh15_0*x88))+(((-1.006)*gclwh13_0*x69))+(((-1.0)*x351))+(((0.004539575)*x101))+(((0.004539575)*x108))+((x101*x162))+(((-1.0)*gclwh13_10*x122))+(((-1.0)*x162*x79))+(((-0.004539575)*x79))+x329+x349+(((-0.11362)*x136))+(((-1.0)*gclwh11_1*x119))+((gclwh11_0*x96))+(((-0.09557)*x124))+(((-1.0)*x334))+(((0.503)*gclwh5_0*x82))+(((0.11362)*x165))+(((0.11362)*x167))+(((-0.04878307)*x168))+((gclwh15_10*x97))+(((-1.006)*npz*x73)));
op[7]=((0.113678)+(((-1.0)*x326))+x346+x204+(((-1.0)*x337)));
op[8]=x328;
op[9]=((((-0.0042959)*x71))+(((0.476)*gclwh5_13*x82))+(((-1.0)*gclwh7_13*x72))+(((-0.952)*gclwh13_13*x69))+((gclwh5_13*x106))+(((0.952)*gclwh15_13*x88))+(((-0.952)*gclwh5_13*x78))+(((0.476)*gclwh13_13*x122))+(((-0.476)*pp*x71))+x347+(((0.09044)*x127))+((gclwh11_13*x125))+(((-1.0)*x338))+(((-1.0)*gclwh9_9*x94))+((gclwh13_13*x84))+((gclwh7_9*x68))+(((-1.0)*gclwh11_9*x111)));
op[10]=((((-0.054)*npz*x73))+(((-0.00084987)*x168))+((gclwh5_10*x82))+(((-0.01292)*x136))+(((0.00513)*x159))+(((-0.054)*gclwh13_0*x69))+(((0.027)*gclwh5_0*x82))+(((-1.0)*x351))+(((-1.0)*x329))+x334+x349+(((0.01292)*x167))+(((0.01292)*x165))+(((-1.0)*gclwh11_1*x169))+((gclwh13_10*x122))+(((-0.00513)*x124))+(((0.054)*gclwh15_0*x88))+(((-1.0)*gclwh15_10*x97))+(((0.00513)*x129))+(((0.000243675)*x101))+(((0.000243675)*x108))+(((-0.000243675)*x79))+((gclwh7_1*x166))+(((-1.0)*x104*x79))+((x101*x104)));
op[11]=((0.006102)+(((-1.0)*x204))+x326+x346+(((-1.0)*x337)));
op[12]=(x331+x341+(((-1.0)*x339))+(((-1.0)*x342)));
op[13]=((-0.24024)+(((0.0036822)*gclwh6_8*r21))+(((-0.09557)*gclwh12_2*rxp1_2))+(((-0.004539575)*gclwh6_2*r21))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.513506)*gclwh3_3*npy*pz))+(((-0.09557)*gclwh4_2*rxp2_2))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.002317195825)*gclwh3_3*r21))+(((0.19)*pz))+(((-0.0036822)*gclwh10_8*r22))+(((-2.0)*gclwh8_11*npx*pz))+(((-0.408)*gclwh8_8*pp*r20))+(((-1.0)*gclwh1_2*pp*pz*r20))+((gclwh6_2*pp*pz*r21))+(((0.004539575)*gclwh8_2*r20))+(((2.0)*gclwh6_3*npy*pp*pz))+(((0.247728)*gclwh6_3*pp*r21))+(((0.816)*gclwh8_8*npx*pz))+(((-1.006)*gclwh3_2*npy*pz))+(((-0.503)*gclwh6_2*pp*r21))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((-0.004539575)*gclwh3_2*r21))+(((2.0)*gclwh6_11*npy*pz))+(((0.009025)*gclwh3_2*pz*r21))+(((-0.247728)*gclwh8_3*pp*r20))+((gclwh8_11*pp*r20))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.265778)*gclwh3_3*pp*r21))+(((1.006)*gclwh6_2*npy*pz))+(((-0.002317195825)*gclwh10_3*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.19)*gclwh14_11*rxp0_2))+(((0.09557)*gclwh14_2*rxp0_2))+(((-0.408)*gclwh10_8*pp*r22))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((0.503)*gclwh10_2*pp*r22))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.408)*gclwh6_8*pp*r21))+(((-0.513506)*gclwh6_3*npy*pz))+(((0.503)*gclwh8_2*pp*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.816)*gclwh6_8*npy*pz))+(((-1.006)*gclwh10_2*npz*pz))+(((-2.0)*gclwh10_11*npz*pz))+(((0.009025)*gclwh10_11*r22))+(((0.503)*gclwh1_2*pp*r20))+(((0.004539575)*gclwh10_2*r22))+(((0.513506)*gclwh1_3*npx*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((0.513506)*gclwh10_3*npz*pz))+(((-0.265778)*gclwh1_3*pp*r20))+(((-1.006)*gclwh8_2*npx*pz))+(((-0.247728)*gclwh10_3*pp*r22))+(((-0.009025)*gclwh10_2*pz*r22))+(((-1.006)*gclwh1_2*npx*pz))+(((0.503)*gclwh3_2*pp*r21))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.004539575)*gclwh1_2*r20))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+(((0.002317195825)*gclwh6_3*r21))+((gclwh10_11*pp*r22))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((0.513506)*gclwh8_3*npx*pz))+(((-0.0036822)*gclwh8_8*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.002317195825)*gclwh1_3*r20))+(((-0.002317195825)*gclwh8_3*r20))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp)))+(((0.816)*gclwh10_8*npz*pz)));
op[14]=((-0.001624)+(((4.0)*gclwh6_11*x69))+(((-0.00478325)*x67))+(((-2.0)*gclwh6_11*x122))+((gclwh8_12*x100))+(((-1.0)*gclwh4_12*x125))+((gclwh10_12*x106))+(((2.0)*gclwh10_11*x82))+(((1.06)*gclwh10_8*x78))+(((-4.0)*gclwh8_11*x88))+(((-1.0)*gclwh12_11*x117))+(((-1.0)*gclwh4_11*x75))+(((2.0)*gclwh8_11*x97))+(((-0.53)*gclwh10_8*x82))+(((-1.0)*gclwh10_8*x150))+((gclwh6_8*x116))+(((-1.06)*gclwh6_8*x69))+(((-4.0)*gclwh10_11*x78))+(((-0.952)*gclwh10_12*x78))+((gclwh14_11*x76))+(((-0.53)*pp*x67))+(((0.53)*gclwh6_8*x122))+(((-1.0)*gclwh12_12*x72))+((gclwh8_11*x141))+(((1.06)*gclwh8_8*x88))+((gclwh14_12*x164))+(((-0.476)*gclwh6_12*x122))+(((-1.0)*gclwh6_11*x128))+(((0.476)*gclwh8_12*x97))+(((0.952)*gclwh6_12*x69))+(((0.476)*gclwh10_12*x82))+(((-0.952)*gclwh8_12*x88))+((gclwh10_11*x86))+(((-1.0)*gclwh6_12*x84)));
op[15]=((((-0.452)*gclwh8_14*x88))+(((0.452)*gclwh6_14*x69))+((x147*x82))+(((-0.00203965)*x83))+((gclwh8_14*x140))+((x142*x97))+(((0.00203965)*x118))+(((-0.452)*gclwh10_14*x78))+(((-0.226)*pp*x83)));
op[16]=(x339+x341+(((-1.0)*x331))+(((-1.0)*x342)));
op[17]=((-0.01204)+(((-0.19)*gclwh14_11*rxp0_2))+(((0.244)*gclwh6_8*npy*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((4.0368825e-5)*gclwh6_3*r21))+(((0.000243675)*gclwh8_2*r20))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((-0.00513)*gclwh12_2*rxp1_2))+(((0.008946)*gclwh3_3*npy*pz))+(((0.19)*gclwh4_11*rxp2_2))+(((-1.0)*gclwh8_11*pp*r20))+(((-0.00513)*gclwh4_2*rxp2_2))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((-0.008946)*gclwh6_3*npy*pz))+((gclwh6_2*pp*pz*r21))+(((0.008946)*gclwh1_3*npx*pz))+(((0.027)*gclwh1_2*pp*r20))+(((2.0)*gclwh6_3*npy*pp*pz))+(((0.000243675)*gclwh10_2*r22))+(((0.00110105)*gclwh10_8*r22))+(((0.027)*gclwh8_2*pp*r20))+(((0.054)*gclwh6_2*npy*pz))+(((-0.009025)*gclwh8_11*r20))+(((-4.0368825e-5)*gclwh8_3*r20))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((-0.244)*gclwh10_8*npz*pz))+(((0.027)*gclwh3_2*pp*r21))+(((0.009025)*gclwh3_2*pz*r21))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.013498)*gclwh1_3*pp*r20))+(((2.0)*gclwh10_11*npz*pz))+(((-0.004552)*gclwh6_3*pp*r21))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.122)*gclwh10_8*pp*r22))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.244)*gclwh8_8*npx*pz))+(((-0.000243675)*gclwh3_2*r21))+(((0.008946)*gclwh8_3*npx*pz))+(((0.008946)*gclwh10_3*npz*pz))+(((-4.0368825e-5)*gclwh10_3*r22))+(((-0.000243675)*gclwh6_2*r21))+(((0.027)*gclwh10_2*pp*r22))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.004552)*gclwh8_3*pp*r20))+(((-0.054)*gclwh3_2*npy*pz))+(((0.19)*gclwh12_11*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((0.004552)*gclwh10_3*pp*r22))+(((-2.0)*gclwh6_11*npy*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.122)*gclwh6_8*pp*r21))+(((4.0368825e-5)*gclwh1_3*r20))+(((4.0368825e-5)*gclwh3_3*r21))+(((0.00110105)*gclwh8_8*r20))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.009025)*gclwh10_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.054)*gclwh1_2*npx*pz))+(((-0.000243675)*gclwh1_2*r20))+(((0.009025)*gclwh6_2*pz*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((-0.054)*gclwh10_2*npz*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.009025)*gclwh6_11*r21))+(((-0.027)*gclwh6_2*pp*r21))+(((0.122)*gclwh8_8*pp*r20))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((0.00513)*gclwh14_2*rxp0_2))+((gclwh8_3*r20*(pp*pp)))+(((-0.054)*gclwh8_2*npx*pz))+(((-0.013498)*gclwh3_3*pp*r21))+(((-0.00110105)*gclwh6_8*r21)));
op[18]=((0.24024)+(((0.598)*gclwh7_9*pp*r21))+(((-0.00539695)*gclwh11_9*r22))+(((0.247728)*gclwh11_1*pp*r22))+(((0.513506)*gclwh0_1*npx*pz))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((0.002317195825)*gclwh0_1*r20))+(((1.196)*gclwh11_9*npz*pz))+(((-0.19)*gclwh5_10*rxp2_2))+(((0.009025)*gclwh11_10*r22))+(((0.19)*pz))+(((-0.503)*gclwh11_0*pp*r22))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.002317195825)*gclwh2_1*r21))+(((-2.0)*gclwh11_10*npz*pz))+((gclwh7_1*r21*(pp*pp)))+(((-1.196)*gclwh7_9*npy*pz))+(((-0.00539695)*gclwh9_9*r20))+(((-0.265778)*gclwh2_1*pp*r21))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.002317195825)*gclwh7_1*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.247728)*gclwh9_1*pp*r20))+(((-0.513506)*gclwh11_1*npz*pz))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.503)*gclwh9_0*pp*r20))+(((0.513506)*gclwh2_1*npy*pz))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-1.0)*gclwh7_10*pp*r21))+(((0.009025)*gclwh0_0*pz*r20))+(((0.00539695)*gclwh7_9*r21))+(((-1.006)*gclwh7_0*npy*pz))+(((-0.004539575)*gclwh11_0*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((0.09557)*gclwh13_0*rxp1_2))+(((-0.004539575)*gclwh0_0*r20))+(((0.004539575)*gclwh7_0*r21))+(((0.513506)*gclwh7_1*npy*pz))+(((-1.006)*gclwh0_0*npx*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.598)*gclwh11_9*pp*r22))+(((-0.004539575)*gclwh9_0*r20))+(((0.009025)*gclwh11_0*pz*r22))+(((0.002317195825)*gclwh11_1*r22))+(((0.002317195825)*gclwh9_1*r20))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.247728)*gclwh7_1*pp*r21))+(((1.006)*gclwh9_0*npx*pz))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((0.503)*gclwh0_0*pp*r20))+(((0.09557)*gclwh5_0*rxp2_2))+(((-0.265778)*gclwh0_1*pp*r20))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((1.196)*gclwh9_9*npx*pz))+(((0.503)*gclwh7_0*pp*r21))+(((0.19)*gclwh15_10*rxp0_2))+(((-0.09557)*gclwh15_0*rxp0_2))+(((-0.009025)*gclwh7_10*r21))+(((-0.598)*gclwh9_9*pp*r20))+(((2.0)*gclwh7_10*npy*pz))+(((-0.004539575)*gclwh2_0*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.503)*gclwh2_0*pp*r21))+(((-1.006)*gclwh2_0*npy*pz))+(((-0.513506)*gclwh9_1*npx*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-2.0)*gclwh9_10*npx*pz))+(((1.006)*gclwh11_0*npz*pz))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+((gclwh9_0*pp*pz*r20)));
op[19]=(x340+x344+(((-1.0)*x332))+(((-1.0)*x343)));
op[20]=((((-1.0)*x122*x135))+(((-0.452)*gclwh9_15*x88))+((gclwh9_15*x140))+(((0.00203965)*gclwh11_15*r22))+((x161*x82))+(((0.452)*gclwh7_15*x69))+((x156*x97))+(((-0.00203965)*x173))+(((-0.452)*gclwh11_15*x78)));
op[21]=((-0.001624)+(((-1.0)*gclwh7_9*x116))+(((-1.06)*gclwh9_9*x88))+((gclwh7_10*x128))+(((-0.952)*gclwh7_13*x69))+(((0.53)*gclwh11_9*x82))+(((-0.476)*gclwh11_13*x82))+(((-1.0)*gclwh15_13*x164))+(((-1.0)*gclwh11_10*x86))+(((-1.0)*gclwh9_10*x141))+(((-4.0)*gclwh7_10*x69))+(((2.0)*gclwh7_10*x122))+(((-1.0)*gclwh11_13*x106))+(((1.06)*gclwh7_9*x69))+((gclwh5_13*x125))+(((4.0)*gclwh11_10*x78))+(((0.53)*gclwh9_9*x97))+((gclwh13_13*x72))+(((-2.0)*gclwh11_10*x82))+(((0.952)*gclwh9_13*x88))+(((-1.0)*gclwh9_13*x100))+((gclwh5_10*x75))+(((0.952)*gclwh11_13*x78))+(((0.476)*gclwh7_13*x122))+((gclwh13_10*x117))+(((-1.06)*gclwh11_9*x78))+(((-1.0)*gclwh15_10*x76))+(((-2.0)*gclwh9_10*x97))+(((-0.53)*gclwh7_9*x122))+((gclwh7_13*x84))+(((-0.476)*gclwh9_13*x97))+(((4.0)*gclwh9_10*x88))+((gclwh11_9*x150))+(((0.00478325)*gclwh9_9*r20)));
op[22]=((0.01204)+(((0.19)*gclwh5_10*rxp2_2))+(((-0.013498)*gclwh0_1*pp*r20))+(((-0.054)*gclwh0_0*npx*pz))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((2.0)*gclwh11_10*npz*pz))+(((-0.004552)*gclwh11_1*pp*r22))+(((0.027)*gclwh7_0*pp*r21))+(((0.19)*pz))+(((2.0)*gclwh9_10*npx*pz))+(((-0.027)*gclwh11_0*pp*r22))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.008946)*gclwh0_1*npx*pz))+((gclwh7_1*r21*(pp*pp)))+(((-0.0006137)*gclwh11_9*r22))+(((-2.0)*gclwh7_10*npy*pz))+(((0.136)*gclwh9_9*npx*pz))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.027)*gclwh2_0*pp*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((4.0368825e-5)*gclwh2_1*r21))+(((-0.008946)*gclwh11_1*npz*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.000243675)*gclwh7_0*r21))+(((0.008946)*gclwh2_1*npy*pz))+(((4.0368825e-5)*gclwh11_1*r22))+(((0.00513)*gclwh5_0*rxp2_2))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.008946)*gclwh9_1*npx*pz))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((-0.00513)*gclwh15_0*rxp0_2))+(((0.009025)*gclwh7_10*r21))+(((0.068)*gclwh7_9*pp*r21))+(((-0.000243675)*gclwh2_0*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((4.0368825e-5)*gclwh9_1*r20))+(((-0.027)*gclwh9_0*pp*r20))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.054)*gclwh2_0*npy*pz))+(((-0.009025)*gclwh11_10*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.054)*gclwh7_0*npy*pz))+(((-4.0368825e-5)*gclwh7_1*r21))+((gclwh7_10*pp*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((-0.0006137)*gclwh9_9*r20))+(((0.009025)*gclwh9_0*pz*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.027)*gclwh0_0*pp*r20))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.19)*gclwh15_10*rxp0_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+((gclwh2_1*r21*(pp*pp)))+(((0.0006137)*gclwh7_9*r21))+(((-0.000243675)*gclwh0_0*r20))+(((-0.068)*gclwh9_9*pp*r20))+(((0.004552)*gclwh7_1*pp*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.013498)*gclwh2_1*pp*r21))+(((-0.000243675)*gclwh11_0*r22))+(((0.008946)*gclwh7_1*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.004552)*gclwh9_1*pp*r20))+(((0.054)*gclwh9_0*npx*pz))+(((0.19)*gclwh13_10*rxp1_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+(((-0.136)*gclwh7_9*npy*pz))+((gclwh9_0*pp*pz*r20))+(((0.136)*gclwh11_9*npz*pz))+(((0.00513)*gclwh13_0*rxp1_2))+(((0.054)*gclwh11_0*npz*pz))+(((4.0368825e-5)*gclwh0_1*r20))+(((-0.000243675)*gclwh9_0*r20))+(((-0.068)*gclwh11_9*pp*r22)));
op[23]=(x332+x344+(((-1.0)*x340))+(((-1.0)*x343)));
op[24]=((((-0.00907915)*x114))+(((0.00907915)*x110))+(((0.19114)*x115))+(((1.006)*x236))+(((0.00907915)*x151))+(((-1.006)*gclwh14_12*x97))+x345+(((-2.012)*gclwh4_12*x78))+(((-2.012)*gclwh12_12*x69))+(((-1.0)*x336))+(((1.006)*gclwh4_12*x82))+(((0.19114)*x152))+(((-0.19114)*x134))+(((2.012)*gclwh14_12*x88)));
op[25]=x327;
op[26]=((-0.215152)+(((0.08588)*gclwh8_14*rxp0_2))+(((-0.08588)*gclwh6_14*rxp1_2))+(((0.08588)*x89)));
op[27]=((((0.0085918)*x77))+((x77*x80))+(((-1.0)*x122*x70))+((gclwh6_11*x132))+(((-0.18088)*x103))+(((8.0)*gclwh4_11*x78))+(((1.904)*gclwh12_2*x69))+((x102*x97))+(((-0.18088)*x172))+(((1.904)*gclwh4_2*x78))+(((-1.0)*gclwh8_11*x160))+(((8.0)*gclwh12_11*x69))+(((-1.0)*gclwh12_11*x157))+(((0.18088)*x155))+(((-8.0)*gclwh14_11*x88))+(((-1.0)*x131*x80))+(((-1.904)*gclwh14_2*x88))+(((-0.0085918)*x121))+(((-1.0)*x121*x80))+(((0.0361)*x171))+(((-1.0)*gclwh4_11*x90))+(((-0.0085918)*x131))+(((-1.0)*gclwh10_11*x170))+(((-1.0)*x146*x82)));
op[28]=((((0.01026)*x152))+(((0.108)*gclwh14_12*x88))+(((-0.00048735)*x114))+(((0.054)*gclwh4_12*x82))+(((-0.108)*gclwh12_12*x69))+(((-0.054)*gclwh14_12*x97))+(((0.00048735)*x110))+x336+(((-0.01026)*x134))+(((0.054)*x236))+(((0.00048735)*x151))+(((0.01026)*x115))+(((-1.0)*x345))+(((-0.108)*gclwh4_12*x78)));
op[29]=((((-1.0)*x324))+x229);
op[30]=x328;
op[31]=((((-0.19114)*gclwh7_13*rxp1_2))+(((0.00907915)*gclwh5_13*r22))+(((1.006)*gclwh5_13*x82))+(((-2.012)*gclwh5_13*x78))+(((2.012)*gclwh15_13*x88))+(((-1.006)*pp*x71))+x347+(((-2.012)*gclwh13_13*x69))+(((0.19114)*gclwh11_13*rxp2_2))+(((-0.00907915)*x71))+(((0.00907915)*gclwh13_13*r21))+(((1.006)*gclwh13_13*x122))+(((-1.0)*x338))+(((0.19114)*x127)));
op[32]=(((gclwh5_10*x90))+(((-0.18088)*x129))+(((0.0085918)*x79))+((x79*x80))+((x122*x163))+((gclwh11_10*x170))+(((-0.0361)*x130))+(((-8.0)*gclwh5_10*x78))+((x148*x82))+((gclwh9_10*x160))+(((1.904)*npz*x73))+((gclwh13_10*x157))+(((-8.0)*gclwh13_10*x69))+(((-1.0)*gclwh7_10*x132))+(((0.18088)*x124))+(((8.0)*gclwh15_10*x88))+(((-0.18088)*x159))+(((-0.0085918)*x101))+(((-0.0085918)*x108))+(((-1.904)*gclwh15_0*x88))+(((1.904)*gclwh13_0*x69))+(((-1.0)*x108*x80))+(((-1.0)*x101*x80))+(((-1.0)*x120*x97)));
IkReal x353=pz*pz;
IkReal x354=(npy*pz);
IkReal x355=((0.00907915)*r20);
IkReal x356=(pp*r21);
IkReal x357=((0.18088)*rxp2_2);
IkReal x358=(gclwh5_0*pz);
IkReal x359=((0.009025)*r22);
IkReal x360=(gclwh8_8*r20);
IkReal x361=(gclwh5_10*rxp2_2);
IkReal x362=((0.38)*rxp0_2);
IkReal x363=(gclwh15_0*r20);
IkReal x364=(gclwh13_10*rxp1_2);
IkReal x365=(gclwh14_2*pz);
IkReal x366=(pp*r20);
IkReal x367=(gclwh6_14*r21);
IkReal x368=(gclwh13_13*r21);
IkReal x369=(npz*pz);
IkReal x370=((2.0)*gclwh4_11);
IkReal x371=(gclwh11_10*r22);
IkReal x372=((0.19)*rxp0_2);
IkReal x373=((0.19114)*rxp2_2);
IkReal x374=(npx*pz);
IkReal x375=((0.04294)*rxp2_2);
IkReal x376=(gclwh9_10*r20);
IkReal x377=((2.0)*pp);
IkReal x378=(gclwh4_11*rxp2_2);
IkReal x379=((0.02147)*rxp1_2);
IkReal x380=((0.02147)*rxp2_2);
IkReal x381=(gclwh8_3*rxp0_2);
IkReal x382=((0.1007)*rxp0_2);
IkReal x383=(pp*r22);
IkReal x384=((0.19)*rxp2_2);
IkReal x385=((0.00048735)*r21);
IkReal x386=((0.09557)*rxp2_2);
IkReal x387=((2.0)*gclwh15_10);
IkReal x388=((0.0042959)*r20);
IkReal x389=((0.452)*gclwh11_15);
IkReal x390=(gclwh13_13*rxp1_2);
IkReal x391=((2.0)*gclwh13_10);
IkReal x392=(gclwh10_14*r22);
IkReal x393=((0.0361)*r21);
IkReal x394=((0.0042959)*r22);
IkReal x395=((0.0085918)*r21);
IkReal x396=((0.0042959)*r21);
IkReal x397=(gclwh14_2*r20);
IkReal x398=((0.04294)*rxp1_2);
IkReal x399=(gclwh5_0*r22);
IkReal x400=((0.19)*rxp1_2);
IkReal x401=((0.1007)*rxp2_2);
IkReal x402=(gclwh8_11*r20);
IkReal x403=((0.452)*gclwh9_15);
IkReal x404=((0.001019825)*r21);
IkReal x405=((0.01805)*r22);
IkReal x406=((0.452)*gclwh6_14);
IkReal x407=(gclwh10_12*r22);
IkReal x408=((0.38)*rxp1_2);
IkReal x409=((0.04878307)*rxp2_2);
IkReal x410=((0.0085918)*r20);
IkReal x411=(gclwh7_9*rxp1_2);
IkReal x412=((0.18088)*rxp1_2);
IkReal x413=((4.0)*gclwh8_11);
IkReal x414=(gclwh8_14*r20);
IkReal x415=((0.02147)*rxp0_2);
IkReal x416=(gclwh12_12*rxp1_2);
IkReal x417=(gclwh6_8*rxp1_2);
IkReal x418=(gclwh11_13*rxp2_2);
IkReal x419=((0.01805)*r21);
IkReal x420=((0.00513)*rxp0_2);
IkReal x421=(gclwh9_9*rxp0_2);
IkReal x422=((4.0)*gclwh9_10);
IkReal x423=((0.76)*rxp0_2);
IkReal x424=((0.009025)*r20);
IkReal x425=((4.0)*gclwh7_10);
IkReal x426=((0.452)*gclwh8_14);
IkReal x427=((0.00513)*rxp1_2);
IkReal x428=(gclwh8_8*rxp0_2);
IkReal x429=((0.001019825)*r22);
IkReal x430=((0.09044)*rxp0_2);
IkReal x431=((0.09557)*rxp0_2);
IkReal x432=((0.226)*gclwh6_14);
IkReal x433=((0.00478325)*r21);
IkReal x434=((0.009025)*r21);
IkReal x435=((0.00048735)*r20);
IkReal x436=((0.226)*gclwh8_14);
IkReal x437=((0.04294)*rxp0_2);
IkReal x438=((0.000243675)*r21);
IkReal x439=(gclwh10_11*r22);
IkReal x440=((0.09044)*rxp1_2);
IkReal x441=((0.226)*gclwh10_14);
IkReal x442=((0.09044)*rxp2_2);
IkReal x443=((0.01805)*r20);
IkReal x444=((0.452)*gclwh7_15);
IkReal x445=((2.0)*gclwh12_11);
IkReal x446=(gclwh9_15*r20);
IkReal x447=((0.00478325)*r22);
IkReal x448=(gclwh10_8*rxp2_2);
IkReal x449=((0.001019825)*r20);
IkReal x450=((0.38)*rxp2_2);
IkReal x451=((0.226)*gclwh9_15);
IkReal x452=(gclwh4_2*r22);
IkReal x453=((0.00907915)*r21);
IkReal x454=((0.04878307)*rxp1_2);
IkReal x455=((0.226)*gclwh7_15);
IkReal x456=((0.00513)*rxp2_2);
IkReal x457=((0.01026)*rxp0_2);
IkReal x458=((0.226)*gclwh11_15);
IkReal x459=((0.09557)*rxp1_2);
IkReal x460=((4.0)*gclwh10_11);
IkReal x461=(gclwh11_9*rxp2_2);
IkReal x462=((1.0)*pz);
IkReal x463=((4.0)*gclwh6_11);
IkReal x464=((0.00084987)*rxp1_2);
IkReal x465=((0.00084987)*rxp2_2);
IkReal x466=(gclwh9_1*rxp0_2);
IkReal x467=((0.0085918)*r22);
IkReal x468=((0.00048735)*r22);
IkReal x469=(gclwh7_15*r21);
IkReal x470=((0.01026)*rxp2_2);
IkReal x471=((0.19114)*rxp0_2);
IkReal x472=((0.452)*gclwh10_14);
IkReal x473=(gclwh11_15*r22);
IkReal x474=((0.18088)*rxp0_2);
IkReal x475=((0.004539575)*r21);
IkReal x476=((2.0)*gclwh14_11);
IkReal x477=((0.38)*x378);
IkReal x478=(gclwh6_11*x419);
IkReal x479=(gclwh12_11*x408);
IkReal x480=(gclwh10_11*x405);
IkReal x481=(gclwh14_11*x362);
IkReal x482=((0.01805)*x402);
IkReal x483=((0.01805)*x371);
IkReal x484=((0.01805)*x376);
IkReal x485=(gclwh15_10*x362);
IkReal x486=((0.38)*x361);
IkReal x487=((0.38)*x364);
IkReal x488=(gclwh7_10*x419);
IkReal x489=(gclwh4_5*x429);
IkReal x490=(gclwh10_5*x380);
IkReal x491=(gclwh6_14*x379);
IkReal x492=(gclwh12_5*x404);
IkReal x493=(gclwh8_5*x415);
IkReal x494=(gclwh14_5*x449);
IkReal x495=(gclwh6_5*x379);
IkReal x496=(gclwh8_14*x415);
IkReal x497=(gclwh10_14*x380);
IkReal x498=(gclwh4_11*x359);
IkReal x499=(gclwh10_11*x384);
IkReal x500=(gclwh8_11*x372);
IkReal x501=(gclwh12_11*x434);
IkReal x502=(gclwh6_11*x400);
IkReal x503=(gclwh14_11*x424);
IkReal x504=(gclwh7_10*x408);
IkReal x505=(gclwh15_10*x443);
IkReal x506=(gclwh13_10*x419);
IkReal x507=(gclwh9_10*x362);
IkReal x508=(gclwh11_10*x450);
IkReal x509=(gclwh5_10*x405);
IkReal x510=(gclwh7_10*x400);
IkReal x511=(gclwh15_10*x424);
IkReal x512=(gclwh9_10*x372);
IkReal x513=(gclwh13_10*x434);
IkReal x514=(gclwh11_10*x384);
IkReal x515=(gclwh5_10*x359);
IkReal x516=(gclwh5_7*x429);
IkReal x517=(gclwh7_15*x379);
IkReal x518=(gclwh13_7*x404);
IkReal x519=(gclwh11_7*x380);
IkReal x520=(gclwh9_7*x415);
IkReal x521=(gclwh15_7*x449);
IkReal x522=(gclwh7_7*x379);
IkReal x523=(gclwh9_15*x415);
IkReal x524=(gclwh11_15*x380);
IkReal x525=(gclwh8_5*x449);
IkReal x526=(gclwh14_5*x415);
IkReal x527=(gclwh10_5*x429);
IkReal x528=((0.001019825)*x367);
IkReal x529=((0.001019825)*x414);
IkReal x530=(gclwh4_5*x380);
IkReal x531=(gclwh6_5*x404);
IkReal x532=(gclwh12_5*x379);
IkReal x533=((0.001019825)*x392);
IkReal x534=(pz*x434);
IkReal x535=(x374*x413);
IkReal x536=((2.0)*gclwh6_11*x356);
IkReal x537=(x369*x460);
IkReal x538=((2.0)*gclwh8_11*x366);
IkReal x539=(x377*x439);
IkReal x540=(x354*x463);
IkReal x541=(x371*x377);
IkReal x542=(x354*x425);
IkReal x543=((2.0)*gclwh9_10*x366);
IkReal x544=((2.0)*gclwh7_10*x356);
IkReal x545=(x374*x422);
IkReal x546=((4.0)*gclwh11_10*x369);
IkReal x547=((0.226)*gclwh14_5*x374);
IkReal x548=((0.113)*gclwh4_5*x383);
IkReal x549=((0.113)*gclwh12_5*x356);
IkReal x550=((0.113)*gclwh14_5*x366);
IkReal x551=((0.226)*gclwh4_5*x369);
IkReal x552=((0.226)*gclwh12_5*x354);
IkReal x553=(x365*x366);
IkReal x554=(gclwh10_3*pp*x384);
IkReal x555=(x374*x476);
IkReal x556=(gclwh8_3*pp*x372);
IkReal x557=(x365*x424);
IkReal x558=(gclwh6_2*pz*x400);
IkReal x559=(gclwh8_2*pz*x372);
IkReal x560=(x369*x370);
IkReal x561=(gclwh6_3*pp*x400);
IkReal x562=(gclwh10_2*pz*x384);
IkReal x563=(gclwh12_2*x534);
IkReal x564=(gclwh4_2*pz*x359);
IkReal x565=(x354*x445);
IkReal x566=(x366*x387);
IkReal x567=((4.0)*gclwh5_10*x369);
IkReal x568=((4.0)*gclwh13_10*x354);
IkReal x569=(x356*x391);
IkReal x570=((4.0)*gclwh15_10*x374);
IkReal x571=(gclwh5_10*r22*x377);
IkReal x572=(pp*pz*x363);
IkReal x573=(gclwh9_1*pp*x372);
IkReal x574=(gclwh7_0*pz*x400);
IkReal x575=(gclwh11_1*pp*x384);
IkReal x576=((0.009025)*pz*x363);
IkReal x577=((2.0)*gclwh5_10*x369);
IkReal x578=(x354*x391);
IkReal x579=(gclwh11_0*pz*x384);
IkReal x580=(gclwh9_0*pz*x372);
IkReal x581=(gclwh13_0*x534);
IkReal x582=(x358*x359);
IkReal x583=(x374*x387);
IkReal x584=(gclwh7_1*pp*x400);
IkReal x585=((0.113)*gclwh13_7*x356);
IkReal x586=((0.226)*gclwh15_7*x374);
IkReal x587=((0.113)*gclwh5_7*x383);
IkReal x588=((0.113)*gclwh15_7*x366);
IkReal x589=((0.226)*gclwh13_7*x354);
IkReal x590=((0.226)*gclwh5_7*x369);
IkReal x591=((0.226)*gclwh6_5*x354);
IkReal x592=(x374*x436);
IkReal x593=((0.113)*gclwh8_5*x366);
IkReal x594=((0.113)*gclwh10_5*x383);
IkReal x595=(x369*x441);
IkReal x596=((0.113)*gclwh6_14*x356);
IkReal x597=((0.113)*gclwh6_5*x356);
IkReal x598=((0.226)*gclwh8_5*x374);
IkReal x599=(x354*x432);
IkReal x600=((0.113)*gclwh8_14*x366);
IkReal x601=((0.226)*gclwh10_5*x369);
IkReal x602=((0.113)*gclwh10_14*x383);
IkReal x603=((2.0)*npz*x353);
IkReal x604=((2.0)*npx*x353);
IkReal x605=((2.0)*npy*x353);
IkReal x606=(gclwh12_2*x605);
IkReal x607=(gclwh4_2*x603);
IkReal x608=(gclwh12_2*x356*x462);
IkReal x609=(gclwh4_2*x383*x462);
IkReal x610=(gclwh14_2*x604);
IkReal x611=(gclwh5_0*x603);
IkReal x612=(gclwh13_0*x605);
IkReal x613=((1.0)*x358*x383);
IkReal x614=(gclwh15_0*x604);
IkReal x615=(gclwh13_0*x356*x462);
IkReal x616=(x523+x524);
IkReal x617=(x496+x497);
IkReal x618=((((-1.0)*gclwh7_15*x398))+((gclwh9_15*x437))+((gclwh11_15*x375)));
IkReal x619=(x502+x503+x565+x560);
IkReal x620=(x511+x510+x578+x577);
IkReal x621=(((x374*x426))+((x356*x432))+((x369*x472))+(((0.00203965)*x367)));
IkReal x622=(((x374*x403))+((x356*x455))+(((0.00203965)*x469))+((x369*x389)));
IkReal x623=(x528+x596+x595+x592);
IkReal x624=(x515+x514+x513+x512+x583);
IkReal x625=(x498+x499+x500+x501+x555);
IkReal x626=(((x354*x406))+(((0.00203965)*x392))+(((0.00203965)*x414))+((x366*x436))+((x383*x441)));
IkReal x627=((((0.00203965)*x473))+(((0.00203965)*x446))+((x383*x458))+((x366*x451))+((x354*x444)));
IkReal x628=(x504+x505+x568+x566+x567);
IkReal x629=(x522+x521+x588+x589+x590);
IkReal x630=(x533+x529+x599+x602+x600);
IkReal x631=(x494+x495+x552+x551+x550);
IkReal x632=(x481+x480+x482+x540+x539+x538);
IkReal x633=(x488+x487+x486+x544+x545+x546);
IkReal x634=(x483+x485+x484+x541+x542+x543);
IkReal x635=(x477+x478+x479+x535+x537+x536);
IkReal x636=(x531+x530+x532+x597+x598+x601);
IkReal x637=(x526+x527+x525+x594+x593+x591);
IkReal x638=(x520+x519+x518+x516+x585+x586+x587);
IkReal x639=(x508+x509+x506+x507+x571+x570+x569);
IkReal x640=(x489+x492+x493+x490+x547+x548+x549);
IkReal x641=(x575+x574+x576+x573+x572+x611+x612);
IkReal x642=(x558+x553+x557+x556+x554+x607+x606);
IkReal x643=((((-1.0)*x626))+x621);
IkReal x644=((((-1.0)*x627))+x622);
IkReal x645=(x579+x580+x581+x582+x584+x614+x615+x613);
IkReal x646=(x559+x564+x562+x563+x561+x609+x608+x610);
op[33]=((-0.215152)+(((0.08588)*gclwh9_15*rxp0_2))+(((-0.08588)*gclwh7_15*rxp1_2))+(((0.08588)*gclwh11_15*rxp2_2)));
op[34]=x618;
op[35]=((((0.054)*gclwh13_13*x356))+((gclwh9_13*x457))+((gclwh5_13*x468))+(((-0.108)*gclwh5_13*x369))+(((-1.0)*x639))+(((0.01026)*x418))+(((-1.0)*gclwh15_13*x435))+(((0.054)*gclwh5_13*x383))+(((-0.108)*gclwh13_13*x354))+x628+(((-0.01026)*gclwh7_13*rxp1_2))+(((0.00048735)*x368))+(((0.108)*gclwh15_13*x374))+(((-0.054)*gclwh15_13*x366)));
op[36]=((0.531556)+(((-0.19114)*x416))+(((-1.006)*gclwh6_12*x356))+(((0.00907915)*x407))+(((1.006)*gclwh10_12*x383))+(((-1.0)*x635))+((gclwh14_12*x471))+((gclwh8_12*x355))+(((-1.0)*gclwh6_12*x453))+(((-2.012)*gclwh8_12*x374))+x632+(((-1.0)*gclwh4_12*x373))+(((1.006)*gclwh8_12*x366))+(((2.012)*gclwh6_12*x354))+(((-2.012)*gclwh10_12*x369)));
op[37]=((((-1.0)*x621))+x626);
op[38]=((((-0.904)*gclwh8_14*x374))+(((-1.0)*x356*x406))+(((-0.0040793)*x367))+((x383*x472))+(((0.904)*gclwh6_14*x354))+(((0.0040793)*x392))+(((-0.904)*gclwh10_14*x369))+(((0.0040793)*x414))+((x366*x426)));
op[39]=((-0.1054)+(((-1.0)*gclwh14_11*x423))+(((-0.0361)*x439))+(((-1.0)*x366*x413))+(((-0.952)*gclwh10_2*x383))+(((1.904)*gclwh3_2*x354))+(((8.0)*gclwh8_11*x374))+(((1.904)*gclwh8_2*x374))+(((-1.0)*x383*x460))+((gclwh6_2*x395))+(((0.952)*gclwh6_2*x356))+(((0.76)*gclwh12_11*rxp1_2))+(((-0.952)*gclwh1_2*x366))+(((-0.952)*gclwh3_2*x356))+((gclwh3_2*x395))+(((-0.952)*gclwh8_2*x366))+(((-1.0)*gclwh14_2*x474))+((gclwh4_2*x357))+((gclwh12_2*x412))+(((1.904)*gclwh1_2*x374))+(((-1.904)*gclwh6_2*x354))+(((-8.0)*gclwh6_11*x354))+(((1.904)*gclwh10_2*x369))+(((0.76)*x378))+((gclwh6_11*x393))+(((-1.0)*gclwh10_2*x467))+(((-0.0361)*x402))+((x356*x463))+(((8.0)*gclwh10_11*x369))+(((-1.0)*gclwh8_2*x410))+((gclwh1_2*x410)));
op[40]=((-0.026996)+(((0.054)*gclwh10_12*x383))+(((0.054)*gclwh8_12*x366))+(((0.00048735)*x407))+(((-1.0)*x632))+(((-1.0)*gclwh6_12*x385))+((gclwh14_12*x457))+(((0.108)*gclwh6_12*x354))+((gclwh8_12*x435))+(((-0.01026)*x416))+x635+(((-0.108)*gclwh10_12*x369))+(((-0.054)*gclwh6_12*x356))+(((-1.0)*gclwh4_12*x470))+(((-0.108)*gclwh8_12*x374)));
op[41]=x643;
op[42]=((((-1.0)*x622))+x627);
op[43]=((0.531556)+(((1.006)*gclwh7_13*x356))+(((-0.00907915)*gclwh11_13*r22))+(((0.19114)*x390))+(((-1.006)*gclwh11_13*x383))+(((-1.0)*x634))+((gclwh7_13*x453))+(((-1.0)*gclwh9_13*x355))+(((2.012)*gclwh9_13*x374))+x633+((gclwh5_13*x373))+(((-1.0)*gclwh15_13*x471))+(((-2.012)*gclwh7_13*x354))+(((2.012)*gclwh11_13*x369))+(((-1.006)*gclwh9_13*x366)));
op[44]=((0.1054)+(((-0.952)*gclwh7_0*x356))+((x356*x425))+(((-1.904)*gclwh9_0*x374))+(((-1.904)*gclwh11_0*x369))+(((1.904)*gclwh0_0*x374))+(((0.952)*gclwh9_0*x366))+(((1.904)*gclwh7_0*x354))+((gclwh2_0*x395))+((gclwh11_0*x467))+(((-4.0)*pp*x371))+(((-0.0361)*x371))+(((-0.0361)*x376))+(((-1.0)*gclwh5_0*x357))+((gclwh0_0*x410))+((gclwh9_0*x410))+(((-8.0)*gclwh7_10*x354))+(((0.952)*gclwh11_0*x383))+(((-0.952)*gclwh0_0*x366))+(((1.904)*gclwh2_0*x354))+(((-1.0)*gclwh13_0*x412))+(((-0.952)*gclwh2_0*x356))+(((-1.0)*gclwh7_0*x395))+(((-1.0)*gclwh15_10*x423))+((gclwh7_10*x393))+(((0.76)*x361))+(((0.76)*x364))+(((-1.0)*x366*x422))+(((8.0)*gclwh11_10*x369))+((gclwh15_0*x474))+(((8.0)*gclwh9_10*x374)));
op[45]=((((0.904)*gclwh9_15*x374))+(((-0.0040793)*x446))+(((-1.0)*x366*x403))+((x356*x444))+(((-0.0040793)*x473))+(((-0.904)*gclwh7_15*x354))+(((0.904)*gclwh11_15*x369))+(((0.0040793)*x469))+(((-1.0)*x383*x389)));
op[46]=x644;
op[47]=((-0.026996)+((gclwh5_13*x470))+(((-0.054)*gclwh9_13*x366))+(((-0.108)*gclwh7_13*x354))+((gclwh7_13*x385))+(((-1.0)*x633))+(((-0.054)*gclwh11_13*x383))+(((0.01026)*x390))+(((-1.0)*gclwh11_13*x468))+(((0.054)*gclwh7_13*x356))+(((0.108)*gclwh9_13*x374))+x634+(((0.108)*gclwh11_13*x369))+(((-1.0)*gclwh9_13*x435))+(((-1.0)*gclwh15_13*x457)));
op[48]=((-0.113678)+(((-1.0)*x491))+(((-1.0)*x631))+x640+x617);
op[49]=((((-0.503)*gclwh12_2*x356))+(((-1.0)*gclwh8_2*x431))+(((0.503)*gclwh14_2*x366))+(((-1.0)*x625))+(((-1.006)*npx*x365))+(((-0.503)*gclwh4_2*x383))+(((-0.004539575)*x452))+(((-1.0)*gclwh10_2*x386))+(((0.004539575)*x397))+(((-1.0)*x646))+((gclwh6_2*x459))+(((-1.0)*gclwh12_11*x356))+(((-1.0)*gclwh12_2*x475))+(((-1.0)*gclwh10_3*x409))+(((1.006)*gclwh12_2*x354))+x642+x619+(((-0.07752)*x428))+(((-1.0)*gclwh4_11*x383))+(((0.07752)*x417))+((gclwh14_11*x366))+(((1.006)*gclwh4_2*x369))+(((-0.04878307)*x381))+(((-0.07752)*x448))+((gclwh6_3*x454)));
op[50]=((((-1.0)*gclwh8_12*x430))+((gclwh6_11*x408))+((x366*x476))+(((-1.0)*x356*x445))+(((0.952)*gclwh4_12*x369))+(((-0.476)*gclwh12_12*x356))+(((-1.0)*gclwh4_11*x405))+(((0.1007)*x417))+(((-0.476)*gclwh4_12*x383))+(((-1.0)*gclwh12_12*x396))+(((4.0)*gclwh4_11*x369))+((gclwh14_12*x388))+(((0.476)*gclwh14_12*x366))+(((-1.0)*gclwh10_8*x401))+(((-1.0)*gclwh10_12*x442))+((gclwh14_11*x443))+(((-0.952)*gclwh14_12*x374))+(((-1.0)*gclwh12_11*x419))+(((-4.0)*gclwh14_11*x374))+((gclwh6_12*x440))+(((4.0)*gclwh12_11*x354))+(((-1.0)*gclwh8_11*x362))+(((-1.0)*x370*x383))+(((-1.0)*gclwh10_11*x450))+(((0.952)*gclwh12_12*x354))+(((-1.0)*gclwh8_8*x382))+(((-1.0)*gclwh4_12*x394)));
op[51]=((((-1.0)*gclwh10_14*x375))+((gclwh6_14*x398))+(((-1.0)*gclwh8_14*x437)));
op[52]=((-0.006102)+(((-1.0)*x631))+x491+(((-1.0)*x617))+x640);
op[53]=((((-1.0)*gclwh10_3*x465))+(((-0.027)*gclwh4_2*x383))+((gclwh12_11*x356))+(((-0.027)*gclwh12_2*x356))+(((-1.0)*gclwh8_2*x420))+(((-1.0)*gclwh12_2*x438))+((gclwh6_2*x427))+(((-1.0)*x646))+(((0.000243675)*x397))+(((-0.00084987)*x381))+((gclwh4_11*x383))+(((-1.0)*gclwh14_11*x366))+(((-0.000243675)*x452))+(((-1.0)*x619))+(((0.054)*gclwh12_2*x354))+(((-0.02318)*x417))+x642+x625+(((0.02318)*x428))+(((0.02318)*x448))+(((-1.0)*gclwh10_2*x456))+(((0.054)*gclwh4_2*x369))+(((0.027)*gclwh14_2*x366))+(((-0.054)*npx*x365))+((gclwh6_3*x464)));
op[54]=((((-1.0)*gclwh11_0*x386))+(((-0.004539575)*x399))+(((-1.0)*gclwh13_0*x475))+((gclwh5_10*x383))+(((0.11362)*x421))+(((0.503)*pp*x363))+(((-1.0)*x620))+(((-0.04878307)*x466))+(((0.004539575)*x363))+(((-0.503)*gclwh13_0*x356))+(((-1.0)*gclwh11_1*x409))+((gclwh7_0*x459))+(((0.11362)*x461))+((gclwh7_1*x454))+(((-1.0)*x645))+(((-1.0)*gclwh15_10*x366))+(((-0.11362)*x411))+x641+x624+(((1.006)*npz*x358))+(((1.006)*gclwh13_0*x354))+(((-0.503)*gclwh5_0*x383))+(((-1.006)*gclwh15_0*x374))+(((-1.0)*gclwh9_0*x431))+((gclwh13_10*x356)));
op[55]=((-0.113678)+(((-1.0)*x629))+x616+x638+(((-1.0)*x517)));
op[56]=x618;
op[57]=((((-1.0)*gclwh5_13*x394))+(((-0.0042959)*x368))+(((-0.952)*gclwh15_13*x374))+(((-0.476)*gclwh5_13*x383))+(((0.1007)*x411))+(((-1.0)*gclwh9_9*x382))+(((-1.0)*x639))+((gclwh7_13*x440))+(((-0.09044)*x418))+(((-0.476)*gclwh13_13*x356))+(((0.952)*gclwh13_13*x354))+x628+(((0.476)*gclwh15_13*x366))+(((-1.0)*gclwh9_13*x430))+(((-1.0)*gclwh11_9*x401))+(((0.952)*gclwh5_13*x369))+((gclwh15_13*x388)));
op[58]=(((gclwh7_0*x427))+(((-1.0)*gclwh13_10*x356))+(((-1.0)*gclwh11_1*x465))+(((-0.027)*gclwh5_0*x383))+(((-0.027)*gclwh13_0*x356))+((gclwh15_10*x366))+(((-1.0)*x624))+((gclwh7_1*x464))+(((0.027)*pp*x363))+(((-1.0)*x645))+(((-0.01292)*x411))+(((-1.0)*gclwh13_0*x438))+(((0.01292)*x421))+(((-1.0)*gclwh5_10*x383))+(((0.000243675)*x363))+(((-1.0)*gclwh11_0*x456))+(((-1.0)*gclwh9_0*x420))+x641+x620+(((0.01292)*x461))+(((0.054)*gclwh13_0*x354))+(((-0.000243675)*x399))+(((-0.054)*gclwh15_0*x374))+(((0.054)*npz*x358))+(((-0.00084987)*x466)));
op[59]=((-0.006102)+(((-1.0)*x629))+x517+(((-1.0)*x616))+x638);
op[60]=((((-1.0)*x623))+(((-1.0)*x636))+x637+x630);
op[61]=((0.24024)+(((0.0036822)*gclwh6_8*r21))+(((-0.004539575)*gclwh10_2*r22))+(((0.004539575)*gclwh1_2*r20))+(((-0.19)*gclwh14_11*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((0.513506)*gclwh3_3*npy*pz))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((1.006)*gclwh3_2*npy*pz))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.002317195825)*gclwh3_3*r21))+(((0.09557)*gclwh12_2*rxp1_2))+(((0.19)*pz))+(((-0.0036822)*gclwh10_8*r22))+(((0.19)*gclwh4_11*rxp2_2))+(((-0.004539575)*gclwh8_2*r20))+(((1.006)*gclwh10_2*npz*pz))+(((-1.0)*gclwh8_11*pp*r20))+(((-0.408)*gclwh8_8*pp*r20))+(((-1.0)*gclwh1_2*pp*pz*r20))+((gclwh6_2*pp*pz*r21))+(((-0.503)*gclwh10_2*pp*r22))+(((2.0)*gclwh6_3*npy*pp*pz))+(((1.006)*gclwh1_2*npx*pz))+(((0.247728)*gclwh6_3*pp*r21))+(((0.816)*gclwh8_8*npx*pz))+(((-0.009025)*gclwh8_11*r20))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.004539575)*gclwh3_2*r21))+(((0.009025)*gclwh3_2*pz*r21))+(((-0.247728)*gclwh8_3*pp*r20))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.265778)*gclwh3_3*pp*r21))+(((2.0)*gclwh10_11*npz*pz))+(((-0.002317195825)*gclwh10_3*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((-0.408)*gclwh10_8*pp*r22))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.503)*gclwh8_2*pp*r20))+(((0.004539575)*gclwh6_2*r21))+(((-0.503)*gclwh3_2*pp*r21))+(((0.09557)*gclwh4_2*rxp2_2))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.503)*gclwh1_2*pp*r20))+(((-0.009025)*gclwh8_2*pz*r20))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((0.503)*gclwh6_2*pp*r21))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.408)*gclwh6_8*pp*r21))+(((-0.513506)*gclwh6_3*npy*pz))+(((1.006)*gclwh8_2*npx*pz))+(((0.19)*gclwh12_11*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.816)*gclwh6_8*npy*pz))+(((0.513506)*gclwh1_3*npx*pz))+(((-2.0)*gclwh6_11*npy*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.09557)*gclwh14_2*rxp0_2))+(((0.513506)*gclwh10_3*npz*pz))+(((-0.265778)*gclwh1_3*pp*r20))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.247728)*gclwh10_3*pp*r22))+(((-0.009025)*gclwh10_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.009025)*gclwh6_2*pz*r21))+(((0.002317195825)*gclwh6_3*r21))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((0.513506)*gclwh8_3*npx*pz))+(((-0.0036822)*gclwh8_8*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.002317195825)*gclwh1_3*r20))+(((-1.006)*gclwh6_2*npy*pz))+(((-0.002317195825)*gclwh8_3*r20))+(((0.009025)*gclwh6_11*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp)))+(((0.816)*gclwh10_8*npz*pz)));
op[62]=((0.001624)+(((1.06)*gclwh8_8*x374))+(((-0.00478325)*x360))+(((-1.0)*gclwh14_12*x430))+(((0.476)*gclwh6_12*x356))+(((-1.0)*x632))+(((0.53)*gclwh6_8*x356))+((gclwh6_12*x396))+(((-0.53)*pp*x360))+(((-0.952)*gclwh6_12*x354))+(((0.952)*gclwh10_12*x369))+((gclwh6_8*x433))+(((-0.476)*gclwh8_12*x366))+(((-1.0)*gclwh8_12*x388))+(((1.06)*gclwh10_8*x369))+(((-1.06)*gclwh6_8*x354))+(((0.952)*gclwh8_12*x374))+x635+(((0.09044)*x416))+((gclwh4_12*x442))+(((-0.476)*gclwh10_12*x383))+(((-1.0)*gclwh10_8*x447))+(((-0.53)*gclwh10_8*x383))+(((-1.0)*gclwh10_12*x394)));
op[63]=x643;
op[64]=((((-1.0)*x636))+(((-1.0)*x630))+x623+x637);
op[65]=((0.01204)+(((0.00513)*gclwh4_2*rxp2_2))+(((0.244)*gclwh6_8*npy*pz))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.027)*gclwh6_2*pp*r21))+(((0.054)*gclwh1_2*npx*pz))+(((4.0368825e-5)*gclwh6_3*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.008946)*gclwh3_3*npy*pz))+(((-2.0)*gclwh8_11*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.054)*gclwh3_2*npy*pz))+(((-0.008946)*gclwh6_3*npy*pz))+((gclwh6_2*pp*pz*r21))+(((0.008946)*gclwh1_3*npx*pz))+(((2.0)*gclwh6_3*npy*pp*pz))+(((0.00110105)*gclwh10_8*r22))+(((0.054)*gclwh8_2*npx*pz))+(((-4.0368825e-5)*gclwh8_3*r20))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((-0.244)*gclwh10_8*npz*pz))+(((2.0)*gclwh6_11*npy*pz))+(((0.009025)*gclwh3_2*pz*r21))+((gclwh8_11*pp*r20))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.013498)*gclwh1_3*pp*r20))+(((0.00513)*gclwh12_2*rxp1_2))+(((-0.004552)*gclwh6_3*pp*r21))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.122)*gclwh10_8*pp*r22))+(((0.19)*gclwh14_11*rxp0_2))+(((0.000243675)*gclwh1_2*r20))+(((-0.000243675)*gclwh10_2*r22))+((gclwh10_3*r22*(pp*pp)))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.244)*gclwh8_8*npx*pz))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((0.008946)*gclwh8_3*npx*pz))+(((0.054)*gclwh10_2*npz*pz))+(((0.008946)*gclwh10_3*npz*pz))+(((-4.0368825e-5)*gclwh10_3*r22))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((-0.027)*gclwh3_2*pp*r21))+(((-0.00513)*gclwh14_2*rxp0_2))+(((0.004552)*gclwh8_3*pp*r20))+(((-0.027)*gclwh1_2*pp*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-2.0)*gclwh10_11*npz*pz))+(((0.009025)*gclwh10_11*r22))+(((0.004552)*gclwh10_3*pp*r22))+(((-0.000243675)*gclwh8_2*r20))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((-0.027)*gclwh10_2*pp*r22))+(((-0.122)*gclwh6_8*pp*r21))+(((4.0368825e-5)*gclwh1_3*r20))+(((4.0368825e-5)*gclwh3_3*r21))+(((0.000243675)*gclwh3_2*r21))+(((0.00110105)*gclwh8_8*r20))+(((-0.009025)*gclwh10_2*pz*r22))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+((gclwh10_11*pp*r22))+(((-0.054)*gclwh6_2*npy*pz))+(((-2.0)*gclwh10_3*npz*pp*pz))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.000243675)*gclwh6_2*r21))+(((-0.027)*gclwh8_2*pp*r20))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.122)*gclwh8_8*pp*r20))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp)))+(((-0.013498)*gclwh3_3*pp*r21))+(((-0.00110105)*gclwh6_8*r21)));
op[66]=((-0.24024)+(((0.598)*gclwh7_9*pp*r21))+(((-0.00539695)*gclwh11_9*r22))+(((0.247728)*gclwh11_1*pp*r22))+(((0.513506)*gclwh0_1*npx*pz))+(((0.19)*gclwh5_10*rxp2_2))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((0.002317195825)*gclwh0_1*r20))+(((1.196)*gclwh11_9*npz*pz))+(((0.503)*gclwh11_0*pp*r22))+(((2.0)*gclwh11_10*npz*pz))+(((-0.503)*gclwh2_0*pp*r21))+(((0.004539575)*gclwh2_0*r21))+(((0.004539575)*gclwh9_0*r20))+(((0.19)*pz))+(((2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.002317195825)*gclwh2_1*r21))+((gclwh7_1*r21*(pp*pp)))+(((-1.196)*gclwh7_9*npy*pz))+(((-2.0)*gclwh7_10*npy*pz))+(((-0.00539695)*gclwh9_9*r20))+(((-0.265778)*gclwh2_1*pp*r21))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-0.004539575)*gclwh7_0*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((1.006)*gclwh0_0*npx*pz))+(((-0.002317195825)*gclwh7_1*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.247728)*gclwh9_1*pp*r20))+(((-0.513506)*gclwh11_1*npz*pz))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((0.004539575)*gclwh0_0*r20))+(((0.513506)*gclwh2_1*npy*pz))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((0.009025)*gclwh7_10*r21))+(((1.006)*gclwh7_0*npy*pz))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.09557)*gclwh13_0*rxp1_2))+(((0.009025)*gclwh0_0*pz*r20))+(((0.00539695)*gclwh7_9*r21))+(((-0.009025)*gclwh11_10*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.513506)*gclwh7_1*npy*pz))+((gclwh7_10*pp*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.598)*gclwh11_9*pp*r22))+(((0.009025)*gclwh11_0*pz*r22))+(((0.002317195825)*gclwh11_1*r22))+(((0.002317195825)*gclwh9_1*r20))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-0.247728)*gclwh7_1*pp*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-0.503)*gclwh7_0*pp*r21))+(((-1.006)*gclwh9_0*npx*pz))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.503)*gclwh0_0*pp*r20))+(((-0.09557)*gclwh5_0*rxp2_2))+(((-0.19)*gclwh15_10*rxp0_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((1.006)*gclwh2_0*npy*pz))+(((-1.006)*gclwh11_0*npz*pz))+(((-0.265778)*gclwh0_1*pp*r20))+((gclwh2_1*r21*(pp*pp)))+(((1.196)*gclwh9_9*npx*pz))+(((0.004539575)*gclwh11_0*r22))+(((-0.598)*gclwh9_9*pp*r20))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.503)*gclwh9_0*pp*r20))+(((0.09557)*gclwh15_0*rxp0_2))+(((-0.513506)*gclwh9_1*npx*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.19)*gclwh13_10*rxp1_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+((gclwh9_0*pp*pz*r20)));
op[67]=((((-1.0)*gclwh9_7*x449))+(((-1.0)*gclwh11_7*x429))+(((-0.113)*gclwh11_15*x383))+((gclwh5_7*x380))+((x369*x458))+(((-1.0)*gclwh15_7*x415))+(((-1.0)*gclwh11_15*x429))+(((-1.0)*x354*x455))+(((0.113)*gclwh7_15*x356))+(((0.113)*gclwh7_7*x356))+((gclwh7_15*x404))+((gclwh13_7*x379))+(((0.226)*gclwh9_7*x374))+(((0.226)*gclwh11_7*x369))+((x374*x451))+(((-0.113)*gclwh11_7*x383))+((gclwh7_7*x404))+(((-0.226)*gclwh7_7*x354))+(((-0.001019825)*x446))+(((-0.113)*gclwh9_7*x366))+(((-0.113)*gclwh9_15*x366)));
op[68]=x644;
op[69]=((0.001624)+(((0.53)*gclwh9_9*x366))+(((-0.09044)*x390))+((gclwh11_9*x447))+(((-0.952)*gclwh9_13*x374))+(((0.53)*gclwh11_9*x383))+(((-1.0)*gclwh7_9*x433))+(((-0.476)*gclwh7_13*x356))+(((-1.0)*x633))+((gclwh15_13*x430))+(((-1.0)*gclwh7_13*x396))+(((-1.06)*gclwh9_9*x374))+((gclwh11_13*x394))+(((0.476)*gclwh11_13*x383))+(((-1.0)*gclwh5_13*x442))+((gclwh9_13*x388))+x634+(((-0.952)*gclwh11_13*x369))+(((-0.53)*gclwh7_9*x356))+(((1.06)*gclwh7_9*x354))+(((0.952)*gclwh7_13*x354))+(((-1.06)*gclwh11_9*x369))+(((0.476)*gclwh9_13*x366))+(((0.00478325)*gclwh9_9*r20)));
IkReal x647=((0.001019825)*r22);
IkReal x648=((0.226)*pz);
IkReal x649=((0.001019825)*r20);
IkReal x650=((0.113)*pp);
IkReal x651=((0.001019825)*r21);
IkReal x652=(r21*x650);
op[70]=((-0.01204)+(((-0.013498)*gclwh0_1*pp*r20))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((-0.19)*gclwh5_10*rxp2_2))+(((-0.004552)*gclwh11_1*pp*r22))+(((0.009025)*gclwh11_10*r22))+(((0.19)*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.00513)*gclwh5_0*rxp2_2))+(((0.027)*gclwh11_0*pp*r22))+(((0.008946)*gclwh0_1*npx*pz))+(((-2.0)*gclwh11_10*npz*pz))+(((-0.000243675)*gclwh7_0*r21))+((gclwh7_1*r21*(pp*pp)))+(((-0.0006137)*gclwh11_9*r22))+(((-0.027)*gclwh2_0*pp*r21))+(((0.136)*gclwh9_9*npx*pz))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.027)*gclwh9_0*pp*r20))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((4.0368825e-5)*gclwh2_1*r21))+(((-0.008946)*gclwh11_1*npz*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.008946)*gclwh2_1*npy*pz))+(((4.0368825e-5)*gclwh11_1*r22))+(((-0.027)*gclwh0_0*pp*r20))+(((0.054)*gclwh2_0*npy*pz))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.008946)*gclwh9_1*npx*pz))+(((0.054)*gclwh0_0*npx*pz))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((0.000243675)*gclwh0_0*r20))+(((0.068)*gclwh7_9*pp*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-1.0)*gclwh7_10*pp*r21))+(((4.0368825e-5)*gclwh9_1*r20))+(((0.000243675)*gclwh11_0*r22))+(((0.009025)*gclwh0_0*pz*r20))+(((0.00513)*gclwh15_0*rxp0_2))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((-4.0368825e-5)*gclwh7_1*r21))+(((-0.00513)*gclwh13_0*rxp1_2))+(((-0.054)*gclwh9_0*npx*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((-0.0006137)*gclwh9_9*r20))+(((0.009025)*gclwh9_0*pz*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.000243675)*gclwh9_0*r20))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((0.0006137)*gclwh7_9*r21))+(((-0.068)*gclwh9_9*pp*r20))+(((0.19)*gclwh15_10*rxp0_2))+(((-0.054)*gclwh11_0*npz*pz))+(((-0.009025)*gclwh7_10*r21))+(((2.0)*gclwh7_10*npy*pz))+(((0.004552)*gclwh7_1*pp*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.013498)*gclwh2_1*pp*r21))+(((-0.027)*gclwh7_0*pp*r21))+(((0.008946)*gclwh7_1*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.004552)*gclwh9_1*pp*r20))+(((-2.0)*gclwh9_10*npx*pz))+(((0.000243675)*gclwh2_0*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+(((-0.136)*gclwh7_9*npy*pz))+((gclwh9_0*pp*pz*r20))+(((0.136)*gclwh11_9*npz*pz))+(((0.054)*gclwh7_0*npy*pz))+(((4.0368825e-5)*gclwh0_1*r20))+(((-0.068)*gclwh11_9*pp*r22)));
op[71]=((((0.02147)*gclwh5_7*rxp2_2))+((gclwh9_15*r20*x650))+(((-1.0)*gclwh9_7*r20*x650))+((gclwh9_7*npx*x648))+(((-1.0)*gclwh9_7*x649))+((gclwh11_7*npz*x648))+(((-1.0)*gclwh7_7*npy*x648))+(((-1.0)*gclwh11_15*npz*x648))+(((-0.02147)*gclwh15_7*rxp0_2))+(((-1.0)*gclwh9_15*npx*x648))+((gclwh11_15*r22*x650))+((gclwh7_15*npy*x648))+(((-1.0)*gclwh11_7*r22*x650))+(((0.02147)*gclwh13_7*rxp1_2))+(((-1.0)*gclwh11_7*x647))+(((-1.0)*gclwh7_15*x651))+(((-1.0)*gclwh7_15*x652))+((gclwh9_15*x649))+((gclwh11_15*x647))+((gclwh7_7*x651))+((gclwh7_7*x652)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x653=htj1*htj1;
CheckValue<IkReal> x654=IKPowWithIntegerCheck(((1.0)+x653),-1);
if(!x654.valid){
continue;
}
cj1array[numsolutions]=((x654.value)*(((1.0)+(((-1.0)*x653)))));
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x655.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x655.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x656=htj2*htj2;
CheckValue<IkReal> x657=IKPowWithIntegerCheck(((1.0)+x656),-1);
if(!x657.valid){
continue;
}
cj2array[numsolutions]=((x657.value)*(((1.0)+(((-1.0)*x656)))));
CheckValue<IkReal> x658=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x658.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x658.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x659=htj3*htj3;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(((1.0)+x659),-1);
if(!x660.valid){
continue;
}
cj3array[numsolutions]=((x660.value)*(((1.0)+(((-1.0)*x659)))));
CheckValue<IkReal> x661=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x661.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x661.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x662=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x662);
rxp1_0=(pz*r11);
rxp1_1=(r01*x662);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x663=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x663);
rxp1_0=(pz*r11);
rxp1_1=(r01*x663);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x664=IKPowWithIntegerCheck(cj3,-1);
if(!x664.valid){
continue;
}
CheckValue<IkReal> x665=IKPowWithIntegerCheck(r22,-1);
if(!x665.valid){
continue;
}
cj4array[0]=((-1.0)*(x664.value)*(x665.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x666=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x666);
rxp1_0=(pz*r11);
rxp1_1=(r01*x666);
IkReal x667=((4.0)*r00);
IkReal x668=(cj3*sj4);
IkReal x669=((4.0)*sj3);
IkReal x670=((8.0)*r01);
IkReal x671=(sj1*sj2);
IkReal x672=(r02*sj4);
IkReal x673=((4.0)*r10);
IkReal x674=((16.0)*r11);
IkReal x675=(r12*sj4);
IkReal x676=((16.0)*sj3);
IkReal x677=(cj3*cj4);
IkReal x678=((16.0)*r01);
IkReal x679=((8.0)*sj3);
IkReal x680=((8.0)*r11);
IkReal x681=(r01*x669);
IkReal x682=(r11*x669);
IkReal x683=(cj1*cj2*cj4);
IkReal x684=((4.0)*cj1*cj2);
IkReal x685=((12.0)*cj1*cj2);
IkReal x686=((12.0)*r02*x677);
IkReal x687=(x667*x668);
IkReal x688=(x668*x673);
IkReal x689=((12.0)*r12*x677);
IkReal x690=(cj4*r01*x671);
IkReal x691=(cj4*x671*x673);
IkReal x692=(x675*x685);
IkReal x693=((12.0)*x671*x675);
IkReal x694=(x673*x683);
IkReal x695=(x667*x683);
IkReal x696=(cj4*x667*x671);
IkReal x697=((12.0)*x671*x672);
IkReal x698=(x672*x685);
IkReal x699=(x689+x698);
IkReal x700=(x686+x693);
IkReal x701=(x688+x682+x696);
IkReal x702=(x681+x687+x694);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x700))+x692+(((-1.0)*x691))+x702)))))+(((0.5)*(IKabs((x697+(((-1.0)*x695))+(((-1.0)*x699))+x701)))))+(((0.5)*(IKabs(((((-4.0)*x671*x675))+(((-1.0)*x691))+(((-4.0)*r02*x677))+x702+((x675*x684)))))))+(IKabs(((((-1.0)*cj4*x671*x680))+((x668*x670))+((x680*x683))+(((-1.0)*r00*x679)))))+(((0.5)*(IKabs(((((-1.0)*cj4*x671*x674))+((x674*x683))+((x668*x678))+(((-1.0)*r00*x676)))))))+(IKabs(((((-1.0)*x670*x683))+((cj4*x670*x671))+(((-1.0)*r10*x679))+((x668*x680)))))+(((0.5)*(IKabs(((((-1.0)*x678*x683))+((x668*x674))+((cj4*x671*x678))+(((-1.0)*r10*x676)))))))+(((0.5)*(IKabs(((((-1.0)*x702))+(((-1.0)*x700))+x691+x692)))))+(((0.5)*(IKabs(((((-4.0)*r12*x677))+(((-1.0)*x695))+x701+(((-1.0)*x672*x684))+(((4.0)*x671*x672)))))))+(((0.5)*(IKabs(((((-1.0)*x701))+x695+x697+(((-1.0)*x699))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x703=(cj1*cj2);
IkReal x704=(sj1*sj2);
IkReal x705=(r10*sj3);
IkReal x706=((4.0)*r11*sj3);
IkReal x707=(cj3*cj4*r12);
IkReal x708=((4.0)*r02*sj4);
IkReal x709=((16.0)*cj4*r01);
IkReal x710=((12.0)*r02*sj4);
IkReal x711=(cj3*r11*sj4);
IkReal x712=((8.0)*cj4*r01);
IkReal x713=((4.0)*cj4*r00);
IkReal x714=((4.0)*cj3*r10*sj4);
IkReal x715=((12.0)*x707);
IkReal x716=((4.0)*x707);
IkReal x717=(x704*x713);
IkReal x718=(x703*x713);
IkReal x719=(x704*x710);
IkReal x720=(x703*x710);
IkReal x721=(x704*x708);
IkReal x722=(x703*x708);
IkReal x723=(x715+x720);
IkReal x724=(x716+x722);
IkReal x725=(x714+x717+x706);
IkReal x726=((((-8.0)*x705))+(((-1.0)*x703*x712))+((x704*x712))+(((8.0)*x711)));
op[0]=((((-1.0)*x724))+(((-1.0)*x718))+x721+x725);
op[1]=x726;
op[2]=((((-1.0)*x723))+(((-1.0)*x718))+x719+x725);
op[3]=((((16.0)*x711))+(((-1.0)*x703*x709))+((x704*x709))+(((-16.0)*x705)));
op[4]=((((-1.0)*x725))+(((-1.0)*x723))+x719+x718);
op[5]=x726;
op[6]=((((-1.0)*x725))+(((-1.0)*x724))+x718+x721);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x727=(sj1*sj2);
IkReal x728=(r12*sj4);
IkReal x729=(cj1*cj2);
IkReal x730=(cj4*r11);
IkReal x731=(r00*sj3);
IkReal x732=(cj3*sj4);
IkReal x733=((4.0)*r01*sj3);
IkReal x734=((4.0)*cj4*r10);
IkReal x735=(cj3*cj4*r02);
IkReal x736=((4.0)*r00*x732);
IkReal x737=((12.0)*x735);
IkReal x738=((4.0)*x735);
IkReal x739=(x727*x734);
IkReal x740=((4.0)*x728*x729);
IkReal x741=(x729*x734);
IkReal x742=((12.0)*x728*x729);
IkReal x743=((12.0)*x727*x728);
IkReal x744=((4.0)*x727*x728);
IkReal x745=(x738+x744);
IkReal x746=(x737+x743);
IkReal x747=(x736+x733+x741);
IkReal x748=((((-8.0)*x731))+(((-8.0)*x727*x730))+(((8.0)*x729*x730))+(((8.0)*r01*x732)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x739))+x747+x742+(((-1.0)*x746))))))+((htj5*x748))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x739))+x747+x740+(((-1.0)*x745))))))+x739+x740+(((-1.0)*x745))+(((-1.0)*x747))+((x748*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((16.0)*x729*x730))+(((-16.0)*x727*x730))+(((-16.0)*x731))+(((16.0)*r01*x732))))))+(((htj5*htj5)*((x739+x742+(((-1.0)*x746))+(((-1.0)*x747)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x749=(cj4*cj5);
IkReal x750=(cj4*sj5);
if( IKabs((((r02*sj4))+((r01*x750))+(((-1.0)*r00*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x750))+((r10*x749))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+((r01*x750))+(((-1.0)*r00*x749))))+IKsqr(((((-1.0)*r11*x750))+((r10*x749))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+((r01*x750))+(((-1.0)*r00*x749))), ((((-1.0)*r11*x750))+((r10*x749))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x751=IKcos(j0);
IkReal x752=IKsin(j0);
IkReal x753=((0.238)*sj2);
IkReal x754=((1.0)*cj4);
IkReal x755=(cj3*cj4);
IkReal x756=((0.238)*cj2);
IkReal x757=((1.0)*sj2);
IkReal x758=(cj5*r01);
IkReal x759=(cj5*r00);
IkReal x760=(sj3*sj4);
IkReal x761=(r01*sj5);
IkReal x762=(cj5*r11);
IkReal x763=(r00*sj5);
IkReal x764=(r11*sj5);
IkReal x765=(cj3*r10);
IkReal x766=(cj3*sj4);
IkReal x767=(r10*sj5);
IkReal x768=(cj5*r10);
IkReal x769=(sj1*x752);
IkReal x770=(cj1*x751);
IkReal x771=(cj1*x752);
IkReal x772=(sj1*x751);
evalcond[0]=((((-1.0)*x754*x768))+((cj4*x764))+((r12*sj4))+x751);
evalcond[1]=((((-1.0)*x754*x759))+((r02*sj4))+((cj4*x761))+(((-1.0)*x752)));
evalcond[2]=(((x756*x772))+(((-0.113)*x752))+(((0.265)*x772))+(((-1.0)*px))+(((-0.095)*x763))+((x753*x770))+(((-0.095)*x758)));
evalcond[3]=((((0.113)*x751))+(((0.265)*x769))+(((-1.0)*py))+((x756*x769))+(((-0.095)*x767))+(((-0.095)*x762))+((x753*x771)));
evalcond[4]=(((cj3*x763))+((x760*x761))+((cj2*x772))+((cj3*x758))+((sj2*x770))+(((-1.0)*x759*x760))+(((-1.0)*r02*sj3*x754)));
evalcond[5]=((((-1.0)*x761*x766))+((sj3*x763))+(((-1.0)*x757*x772))+((r02*x755))+((cj2*x770))+((x759*x766))+((sj3*x758)));
evalcond[6]=(((cj3*x762))+((cj2*x769))+((x760*x764))+((sj2*x771))+(((-1.0)*x760*x768))+(((-1.0)*r12*sj3*x754))+((sj5*x765)));
evalcond[7]=(((sj3*x767))+((sj3*x762))+((cj5*sj4*x765))+((cj2*x771))+((r12*x755))+(((-1.0)*x757*x769))+(((-1.0)*x764*x766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x773=IKPowWithIntegerCheck(r22,-1);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(sj3,-1);
if(!x774.valid){
continue;
}
cj4array[0]=((x773.value)*(x774.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x775=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x775);
rxp1_0=(pz*r11);
rxp1_1=(r01*x775);
IkReal x776=((4.0)*r00);
IkReal x777=(cj3*sj4);
IkReal x778=((4.0)*sj3);
IkReal x779=((8.0)*r01);
IkReal x780=(sj1*sj2);
IkReal x781=(r02*sj4);
IkReal x782=((4.0)*r10);
IkReal x783=((16.0)*r11);
IkReal x784=(r12*sj4);
IkReal x785=((16.0)*sj3);
IkReal x786=(cj3*cj4);
IkReal x787=((16.0)*r01);
IkReal x788=((8.0)*sj3);
IkReal x789=((8.0)*r11);
IkReal x790=(r01*x778);
IkReal x791=(r11*x778);
IkReal x792=(cj1*cj2*cj4);
IkReal x793=((4.0)*cj1*cj2);
IkReal x794=((12.0)*cj1*cj2);
IkReal x795=((12.0)*r02*x786);
IkReal x796=(x776*x777);
IkReal x797=(x777*x782);
IkReal x798=((12.0)*r12*x786);
IkReal x799=(cj4*r01*x780);
IkReal x800=(cj4*x780*x782);
IkReal x801=(x784*x794);
IkReal x802=((12.0)*x780*x784);
IkReal x803=(x782*x792);
IkReal x804=(x776*x792);
IkReal x805=(cj4*x776*x780);
IkReal x806=((12.0)*x780*x781);
IkReal x807=(x781*x794);
IkReal x808=(x798+x807);
IkReal x809=(x795+x802);
IkReal x810=(x791+x797+x805);
IkReal x811=(x790+x796+x803);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x811))+x801+x800+(((-1.0)*x809)))))))+(((0.5)*(IKabs((x811+x801+(((-1.0)*x809))+(((-1.0)*x800)))))))+(IKabs((((x777*x779))+(((-1.0)*r00*x788))+(((-1.0)*cj4*x780*x789))+((x789*x792)))))+(((0.5)*(IKabs(((((-4.0)*x780*x784))+(((-4.0)*r02*x786))+((x784*x793))+x811+(((-1.0)*x800)))))))+(((0.5)*(IKabs(((((-1.0)*x787*x792))+(((-1.0)*r10*x785))+((cj4*x780*x787))+((x777*x783)))))))+(IKabs(((((-1.0)*x779*x792))+((cj4*x779*x780))+(((-1.0)*r10*x788))+((x777*x789)))))+(((0.5)*(IKabs(((((-1.0)*r00*x785))+(((-1.0)*cj4*x780*x783))+((x783*x792))+((x777*x787)))))))+(((0.5)*(IKabs(((((-1.0)*x810))+x804+x806+(((-1.0)*x808)))))))+(((0.5)*(IKabs((x810+x806+(((-1.0)*x808))+(((-1.0)*x804)))))))+(((0.5)*(IKabs(((((-4.0)*r12*x786))+(((-1.0)*x781*x793))+x810+(((-1.0)*x804))+(((4.0)*x780*x781))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x812=(cj1*cj2);
IkReal x813=(sj1*sj2);
IkReal x814=(r10*sj3);
IkReal x815=((4.0)*r11*sj3);
IkReal x816=(cj3*cj4*r12);
IkReal x817=((4.0)*r02*sj4);
IkReal x818=((16.0)*cj4*r01);
IkReal x819=((12.0)*r02*sj4);
IkReal x820=(cj3*r11*sj4);
IkReal x821=((8.0)*cj4*r01);
IkReal x822=((4.0)*cj4*r00);
IkReal x823=((4.0)*cj3*r10*sj4);
IkReal x824=((12.0)*x816);
IkReal x825=((4.0)*x816);
IkReal x826=(x813*x822);
IkReal x827=(x812*x822);
IkReal x828=(x813*x819);
IkReal x829=(x812*x819);
IkReal x830=(x813*x817);
IkReal x831=(x812*x817);
IkReal x832=(x829+x824);
IkReal x833=(x825+x831);
IkReal x834=(x815+x823+x826);
IkReal x835=((((8.0)*x820))+(((-1.0)*x812*x821))+(((-8.0)*x814))+((x813*x821)));
op[0]=((((-1.0)*x827))+(((-1.0)*x833))+x834+x830);
op[1]=x835;
op[2]=((((-1.0)*x827))+(((-1.0)*x832))+x828+x834);
op[3]=((((-1.0)*x812*x818))+(((-16.0)*x814))+((x813*x818))+(((16.0)*x820)));
op[4]=((((-1.0)*x834))+(((-1.0)*x832))+x828+x827);
op[5]=x835;
op[6]=((((-1.0)*x834))+(((-1.0)*x833))+x827+x830);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x836=(sj1*sj2);
IkReal x837=(r12*sj4);
IkReal x838=(cj1*cj2);
IkReal x839=(cj4*r11);
IkReal x840=(r00*sj3);
IkReal x841=(cj3*sj4);
IkReal x842=((4.0)*r01*sj3);
IkReal x843=((4.0)*cj4*r10);
IkReal x844=(cj3*cj4*r02);
IkReal x845=((4.0)*r00*x841);
IkReal x846=((12.0)*x844);
IkReal x847=((4.0)*x844);
IkReal x848=(x836*x843);
IkReal x849=((4.0)*x837*x838);
IkReal x850=(x838*x843);
IkReal x851=((12.0)*x837*x838);
IkReal x852=((12.0)*x836*x837);
IkReal x853=((4.0)*x836*x837);
IkReal x854=(x853+x847);
IkReal x855=(x852+x846);
IkReal x856=(x850+x842+x845);
IkReal x857=((((-8.0)*x836*x839))+(((8.0)*x838*x839))+(((-8.0)*x840))+(((8.0)*r01*x841)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x854))+(((-1.0)*x848))+x856+x849))))+(((-1.0)*x854))+(((-1.0)*x856))+((x857*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x857))+(((htj5*htj5)*(((((-1.0)*x855))+(((-1.0)*x856))+x851+x848))))+x849+x848+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x855))+(((-1.0)*x848))+x851+x856))))+(((htj5*htj5*htj5)*(((((16.0)*r01*x841))+(((-16.0)*x836*x839))+(((-16.0)*x840))+(((16.0)*x838*x839)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x858=(cj4*cj5);
IkReal x859=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x858))+((r02*sj4))+((r01*x859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x858))+(((-1.0)*r11*x859))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x858))+((r02*sj4))+((r01*x859))))+IKsqr((((r10*x858))+(((-1.0)*r11*x859))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x858))+((r02*sj4))+((r01*x859))), (((r10*x858))+(((-1.0)*r11*x859))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x860=IKcos(j0);
IkReal x861=IKsin(j0);
IkReal x862=((0.238)*sj2);
IkReal x863=((1.0)*cj4);
IkReal x864=(cj3*cj4);
IkReal x865=((0.238)*cj2);
IkReal x866=((1.0)*sj2);
IkReal x867=(cj5*r01);
IkReal x868=(cj5*r00);
IkReal x869=(sj3*sj4);
IkReal x870=(r01*sj5);
IkReal x871=(cj5*r11);
IkReal x872=(r00*sj5);
IkReal x873=(r11*sj5);
IkReal x874=(cj3*r10);
IkReal x875=(cj3*sj4);
IkReal x876=(r10*sj5);
IkReal x877=(cj5*r10);
IkReal x878=(sj1*x861);
IkReal x879=(cj1*x860);
IkReal x880=(cj1*x861);
IkReal x881=(sj1*x860);
evalcond[0]=(((r12*sj4))+((cj4*x873))+x860+(((-1.0)*x863*x877)));
evalcond[1]=((((-1.0)*x861))+((r02*sj4))+((cj4*x870))+(((-1.0)*x863*x868)));
evalcond[2]=(((x865*x881))+(((-0.095)*x872))+(((-1.0)*px))+(((-0.095)*x867))+((x862*x879))+(((-0.113)*x861))+(((0.265)*x881)));
evalcond[3]=((((0.113)*x860))+(((0.265)*x878))+(((-0.095)*x871))+(((-0.095)*x876))+(((-1.0)*py))+((x862*x880))+((x865*x878)));
evalcond[4]=(((cj2*x881))+((sj2*x879))+((cj3*x867))+((cj3*x872))+(((-1.0)*x868*x869))+((x869*x870))+(((-1.0)*r02*sj3*x863)));
evalcond[5]=(((sj3*x867))+((cj2*x879))+((sj3*x872))+((x868*x875))+(((-1.0)*x870*x875))+((r02*x864))+(((-1.0)*x866*x881)));
evalcond[6]=(((cj2*x878))+((sj5*x874))+((cj3*x871))+(((-1.0)*x869*x877))+(((-1.0)*r12*sj3*x863))+((sj2*x880))+((x869*x873)));
evalcond[7]=(((cj2*x880))+((sj3*x876))+((sj3*x871))+(((-1.0)*x866*x878))+((r12*x864))+(((-1.0)*x873*x875))+((cj5*sj4*x874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x882=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x882);
rxp1_0=(pz*r11);
rxp1_1=(r01*x882);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x883=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x883);
rxp1_0=(pz*r11);
rxp1_1=(r01*x883);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x884=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x884);
rxp1_0=(pz*r11);
rxp1_1=(r01*x884);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x885=IKPowWithIntegerCheck(r22,-1);
if(!x885.valid){
continue;
}
cj4array[0]=((x885.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x886=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x886);
rxp1_0=(pz*r11);
rxp1_1=(r01*x886);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x888 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x888.valid){
continue;
}
IkReal x887=x888.value;
j5array[0]=((-1.0)*x887);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x887)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x889=(cj4*cj5);
IkReal x890=(cj4*sj5);
if( IKabs((((r01*x890))+(((-1.0)*r00*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x890))+((r10*x889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x890))+(((-1.0)*r00*x889))))+IKsqr(((((-1.0)*r11*x890))+((r10*x889))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x890))+(((-1.0)*r00*x889))), ((((-1.0)*r11*x890))+((r10*x889))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x891=IKcos(j0);
IkReal x892=IKsin(j0);
IkReal x893=(cj5*r01);
IkReal x894=((1.0)*sj2);
IkReal x895=(cj1*cj2);
IkReal x896=(r00*sj5);
IkReal x897=(cj5*r11);
IkReal x898=(cj4*sj5);
IkReal x899=(r10*sj5);
IkReal x900=(sj1*x892);
IkReal x901=((1.0)*cj4*cj5);
IkReal x902=(sj1*x891);
evalcond[0]=(((r11*x898))+x891+(((-1.0)*r10*x901)));
evalcond[1]=(((r01*x898))+(((-1.0)*x892))+(((-1.0)*r00*x901)));
evalcond[2]=((((-1.0)*x894*x902))+((x891*x895))+x896+x893);
evalcond[3]=((((-1.0)*x894*x900))+((x892*x895))+x897+x899);
evalcond[4]=((((-0.095)*x896))+(((-0.095)*x893))+(((-0.113)*x892))+(((-1.0)*px))+(((0.265)*x902)));
evalcond[5]=((((-0.095)*x897))+(((-0.095)*x899))+(((0.113)*x891))+(((-1.0)*py))+(((0.265)*x900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x903=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x903);
rxp1_0=(pz*r11);
rxp1_1=(r01*x903);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(r22,-1);
if(!x904.valid){
continue;
}
cj4array[0]=((-1.0)*(x904.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x905=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x905);
rxp1_0=(pz*r11);
rxp1_1=(r01*x905);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal x906=x907.value;
j5array[0]=((-1.0)*x906);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x906)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x908=(cj4*cj5);
IkReal x909=(cj4*sj5);
if( IKabs((((r01*x909))+(((-1.0)*r00*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x909))+((r10*x908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x909))+(((-1.0)*r00*x908))))+IKsqr(((((-1.0)*r11*x909))+((r10*x908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x909))+(((-1.0)*r00*x908))), ((((-1.0)*r11*x909))+((r10*x908))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x910=IKcos(j0);
IkReal x911=IKsin(j0);
IkReal x912=((1.0)*sj2);
IkReal x913=(cj1*cj2);
IkReal x914=((1.0)*cj5);
IkReal x915=(r00*sj5);
IkReal x916=((0.095)*cj5);
IkReal x917=(r10*sj5);
IkReal x918=(cj4*sj5);
IkReal x919=(sj1*x911);
IkReal x920=(sj1*x910);
evalcond[0]=((((-1.0)*cj4*r10*x914))+((r11*x918))+x910);
evalcond[1]=((((-1.0)*x911))+(((-1.0)*cj4*r00*x914))+((r01*x918)));
evalcond[2]=(((x910*x913))+(((-1.0)*x912*x920))+(((-1.0)*r01*x914))+(((-1.0)*x915)));
evalcond[3]=(((x911*x913))+(((-1.0)*r11*x914))+(((-1.0)*x917))+(((-1.0)*x912*x919)));
evalcond[4]=((((0.265)*x920))+(((-1.0)*r01*x916))+(((-0.095)*x915))+(((-1.0)*px))+(((-0.113)*x911)));
evalcond[5]=((((-0.095)*x917))+(((-1.0)*py))+(((-1.0)*r11*x916))+(((0.265)*x919))+(((0.113)*x910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x921=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x921);
rxp1_0=(pz*r11);
rxp1_1=(r01*x921);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x922=IKPowWithIntegerCheck(r22,-1);
if(!x922.valid){
continue;
}
cj4array[0]=((-1.0)*(x922.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x923=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x923);
rxp1_0=(pz*r11);
rxp1_1=(r01*x923);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
IkReal x924=x925.value;
j5array[0]=((-1.0)*x924);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x924)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x926=(cj4*cj5);
IkReal x927=(cj4*sj5);
if( IKabs((((r01*x927))+(((-1.0)*r00*x926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x926))+(((-1.0)*r11*x927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x927))+(((-1.0)*r00*x926))))+IKsqr((((r10*x926))+(((-1.0)*r11*x927))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x927))+(((-1.0)*r00*x926))), (((r10*x926))+(((-1.0)*r11*x927))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x928=IKcos(j0);
IkReal x929=IKsin(j0);
IkReal x930=(cj1*sj2);
IkReal x931=(r00*sj5);
IkReal x932=(cj5*r01);
IkReal x933=(cj2*sj1);
IkReal x934=(cj5*r11);
IkReal x935=(cj4*sj5);
IkReal x936=(r10*sj5);
IkReal x937=(sj1*x929);
IkReal x938=((0.238)*x928);
IkReal x939=((1.0)*cj4*cj5);
evalcond[0]=((((-1.0)*r10*x939))+((r11*x935))+x928);
evalcond[1]=((((-1.0)*x929))+((r01*x935))+(((-1.0)*r00*x939)));
evalcond[2]=(((x928*x930))+((x928*x933))+x931+x932);
evalcond[3]=(x934+x936+((x929*x933))+((x929*x930)));
evalcond[4]=((((-0.113)*x929))+(((-1.0)*px))+((x930*x938))+(((0.265)*sj1*x928))+(((-0.095)*x931))+(((-0.095)*x932))+((x933*x938)));
evalcond[5]=((((0.238)*x929*x933))+(((0.238)*x929*x930))+(((0.265)*x937))+(((-1.0)*py))+(((0.113)*x928))+(((-0.095)*x934))+(((-0.095)*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x940=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x940);
rxp1_0=(pz*r11);
rxp1_1=(r01*x940);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(r22,-1);
if(!x941.valid){
continue;
}
cj4array[0]=((x941.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x942=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x942);
rxp1_0=(pz*r11);
rxp1_1=(r01*x942);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
IkReal x943=x944.value;
j5array[0]=((-1.0)*x943);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x943)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x945=(cj4*cj5);
IkReal x946=(cj4*sj5);
if( IKabs((((r01*x946))+(((-1.0)*r00*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x946))+((r10*x945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x946))+(((-1.0)*r00*x945))))+IKsqr(((((-1.0)*r11*x946))+((r10*x945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x946))+(((-1.0)*r00*x945))), ((((-1.0)*r11*x946))+((r10*x945))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x947=IKcos(j0);
IkReal x948=IKsin(j0);
IkReal x949=(cj1*sj2);
IkReal x950=(r00*sj5);
IkReal x951=((1.0)*cj5);
IkReal x952=(cj2*sj1);
IkReal x953=((0.095)*cj5);
IkReal x954=(r10*sj5);
IkReal x955=(cj4*sj5);
IkReal x956=(sj1*x948);
IkReal x957=((0.238)*x947);
evalcond[0]=((((-1.0)*cj4*r10*x951))+((r11*x955))+x947);
evalcond[1]=((((-1.0)*cj4*r00*x951))+((r01*x955))+(((-1.0)*x948)));
evalcond[2]=((((-1.0)*r01*x951))+((x947*x949))+(((-1.0)*x950))+((x947*x952)));
evalcond[3]=(((x948*x949))+(((-1.0)*x954))+((x948*x952))+(((-1.0)*r11*x951)));
evalcond[4]=((((0.265)*sj1*x947))+((x952*x957))+(((-0.095)*x950))+(((-1.0)*r01*x953))+((x949*x957))+(((-1.0)*px))+(((-0.113)*x948)));
evalcond[5]=((((0.238)*x948*x952))+(((0.265)*x956))+(((-0.095)*x954))+(((-1.0)*py))+(((0.238)*x948*x949))+(((-1.0)*r11*x953))+(((0.113)*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x958=IKPowWithIntegerCheck(cj3,-1);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959=IKPowWithIntegerCheck(r22,-1);
if(!x959.valid){
continue;
}
cj4array[0]=((-1.0)*(x958.value)*(x959.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x960=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x960);
rxp1_0=(pz*r11);
rxp1_1=(r01*x960);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x961=((0.38)*r11);
IkReal x962=((12.0)*py);
IkReal x963=((0.38)*r01);
IkReal x964=((12.0)*px);
IkReal x965=(cj4*r11);
IkReal x966=(cj1*sj2);
IkReal x967=(cj4*r01);
IkReal x968=((0.452)*cj4);
IkReal x969=(cj2*sj1);
IkReal x970=((2.12)*sj1);
IkReal x971=((4.24)*sj1);
IkReal x972=(r10*x968);
IkReal x973=(r00*x968);
IkReal x974=((0.952)*cj4*r10);
IkReal x975=((1.06)*cj4*sj1);
IkReal x976=((0.952)*cj4*r00);
IkReal x977=(r00*x975);
IkReal x978=(r10*x975);
IkReal x979=(x969*x976);
IkReal x980=(x966*x976);
IkReal x981=(x969*x974);
IkReal x982=(x966*x974);
IkReal x983=(x980+x977+x979+x961);
IkReal x984=(x981+x982+x973+x978);
j5eval[0]=((((0.5)*(IKabs((x983+(((-1.0)*x962))+(((-1.0)*x972)))))))+(((0.5)*(IKabs(((((-1.0)*x965*x971))+(((-1.52)*r00))+(((-1.808)*x967))+(((-3.808)*x965*x966))+(((-3.808)*x965*x969)))))))+(((0.5)*(IKabs(((((-1.0)*x984))+x963+(((-1.0)*x964)))))))+(((0.5)*(IKabs(((((-1.0)*x984))+(((-4.0)*px))+x963)))))+(IKabs(((((1.904)*x966*x967))+(((-0.904)*x965))+((x967*x970))+(((-0.76)*r10))+(((1.904)*x967*x969)))))+(((0.5)*(IKabs(((((-1.52)*r10))+(((3.808)*x967*x969))+(((3.808)*x966*x967))+(((-1.808)*x965))+((x967*x971)))))))+(((0.5)*(IKabs(((((-1.0)*x983))+x972+(((-1.0)*x962)))))))+(((0.5)*(IKabs((x984+(((-1.0)*x964))+(((-1.0)*x963)))))))+(((0.5)*(IKabs(((((-4.0)*py))+x983+(((-1.0)*x972)))))))+(IKabs(((((-1.0)*x965*x970))+(((-0.904)*x967))+(((-1.904)*x965*x966))+(((-1.904)*x965*x969))+(((-0.76)*r00))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x985=((12.0)*py);
IkReal x986=((0.38)*r11);
IkReal x987=((4.0)*py);
IkReal x988=(cj4*r11);
IkReal x989=(cj4*r01);
IkReal x990=(cj1*sj2);
IkReal x991=(cj4*r00);
IkReal x992=(cj2*sj1);
IkReal x993=((0.452)*cj4*r10);
IkReal x994=((1.06)*sj1*x991);
IkReal x995=((0.952)*x991*x992);
IkReal x996=((0.952)*x990*x991);
IkReal x997=(x996+x995+x994+x986);
IkReal x998=((((2.12)*sj1*x989))+(((-0.904)*x988))+(((1.904)*x989*x990))+(((1.904)*x989*x992))+(((-0.76)*r10)));
op[0]=((((-1.0)*x987))+(((-1.0)*x993))+x997);
op[1]=x998;
op[2]=((((-1.0)*x985))+(((-1.0)*x993))+x997);
op[3]=((((3.808)*x989*x990))+(((3.808)*x989*x992))+(((-1.52)*r10))+(((-1.808)*x988))+(((4.24)*sj1*x989)));
op[4]=((((-1.0)*x985))+(((-1.0)*x997))+x993);
op[5]=x998;
op[6]=((((-1.0)*x987))+(((-1.0)*x997))+x993);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x999=((0.38)*r01);
IkReal x1000=((12.0)*px);
IkReal x1001=((4.0)*px);
IkReal x1002=((0.952)*r10);
IkReal x1003=(cj4*r01);
IkReal x1004=((0.452)*cj4*r00);
IkReal x1005=(cj2*cj4*sj1);
IkReal x1006=(cj4*r11*sj1);
IkReal x1007=((1.06)*cj4*r10*sj1);
IkReal x1008=(cj1*cj4*r11*sj2);
IkReal x1009=(x1002*x1005);
IkReal x1010=(cj1*cj4*sj2*x1002);
IkReal x1011=(x1010+x1009+x1007+x1004);
IkReal x1012=((((-1.904)*r11*x1005))+(((-0.904)*x1003))+(((-2.12)*x1006))+(((-1.904)*x1008))+(((-0.76)*r00)));
j5evalpoly[0]=(x1011+(((-1.0)*x1001))+(((-1.0)*x999))+(((htj5*htj5*htj5)*(((((-3.808)*r11*x1005))+(((-3.808)*x1008))+(((-1.52)*r00))+(((-1.808)*x1003))+(((-4.24)*x1006))))))+(((htj5*htj5)*((x1011+(((-1.0)*x1000))+(((-1.0)*x999))))))+((x1012*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x1011))+x999))))+((htj5*x1012))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x1011))+x999)))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1013=(cj4*cj5);
IkReal x1014=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x1013))+((r01*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1013))+(((-1.0)*r11*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1013))+((r01*x1014))))+IKsqr((((r10*x1013))+(((-1.0)*r11*x1014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1013))+((r01*x1014))), (((r10*x1013))+(((-1.0)*r11*x1014))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1015=IKcos(j0);
IkReal x1016=IKsin(j0);
IkReal x1017=((0.238)*sj2);
IkReal x1018=(r00*sj5);
IkReal x1019=((0.238)*cj2);
IkReal x1020=((1.0)*sj2);
IkReal x1021=(cj5*r01);
IkReal x1022=(sj3*sj4);
IkReal x1023=(r01*sj5);
IkReal x1024=(cj5*r11);
IkReal x1025=(r11*sj5);
IkReal x1026=(cj3*r10);
IkReal x1027=(cj5*sj4);
IkReal x1028=(r10*sj5);
IkReal x1029=(sj1*x1016);
IkReal x1030=(cj1*x1015);
IkReal x1031=(cj1*x1016);
IkReal x1032=((1.0)*cj5*r00);
IkReal x1033=(sj1*x1015);
IkReal x1034=((1.0)*cj3*sj4);
IkReal x1035=((1.0)*cj5*r10);
evalcond[0]=((((-1.0)*cj4*x1035))+x1015+((cj4*x1025)));
evalcond[1]=((((-1.0)*cj4*x1032))+((cj4*x1023))+(((-1.0)*x1016)));
evalcond[2]=(((cj2*x1033))+((cj3*x1018))+(((-1.0)*x1022*x1032))+((sj2*x1030))+((x1022*x1023))+((cj3*x1021)));
evalcond[3]=(((cj2*x1029))+(((-1.0)*x1022*x1035))+((sj2*x1031))+((x1022*x1025))+((sj5*x1026))+((cj3*x1024)));
evalcond[4]=(((cj2*x1030))+(((-1.0)*x1020*x1033))+(((-1.0)*x1023*x1034))+((sj3*x1018))+((cj3*r00*x1027))+((sj3*x1021)));
evalcond[5]=(((cj2*x1031))+(((-1.0)*x1025*x1034))+(((-1.0)*x1020*x1029))+((x1026*x1027))+((sj3*x1024))+((sj3*x1028)));
evalcond[6]=(((x1017*x1030))+(((-0.095)*x1021))+(((0.265)*x1033))+(((-0.095)*x1018))+(((-0.113)*x1016))+(((-1.0)*px))+((x1019*x1033)));
evalcond[7]=(((x1017*x1031))+(((-0.095)*x1024))+(((-0.095)*x1028))+(((-1.0)*py))+((x1019*x1029))+(((0.265)*x1029))+(((0.113)*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(r22,-1);
if(!x1036.valid){
continue;
}
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(sj3,-1);
if(!x1037.valid){
continue;
}
cj4array[0]=((x1036.value)*(x1037.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1038=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1038);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1038);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1039=((0.38)*r11);
IkReal x1040=((12.0)*py);
IkReal x1041=((0.38)*r01);
IkReal x1042=((12.0)*px);
IkReal x1043=(cj4*r11);
IkReal x1044=(cj1*sj2);
IkReal x1045=(cj4*r01);
IkReal x1046=((0.452)*cj4);
IkReal x1047=(cj2*sj1);
IkReal x1048=((2.12)*sj1);
IkReal x1049=((4.24)*sj1);
IkReal x1050=(r10*x1046);
IkReal x1051=(r00*x1046);
IkReal x1052=((0.952)*cj4*r10);
IkReal x1053=((1.06)*cj4*sj1);
IkReal x1054=((0.952)*cj4*r00);
IkReal x1055=(r00*x1053);
IkReal x1056=(r10*x1053);
IkReal x1057=(x1047*x1054);
IkReal x1058=(x1044*x1054);
IkReal x1059=(x1047*x1052);
IkReal x1060=(x1044*x1052);
IkReal x1061=(x1055+x1057+x1058+x1039);
IkReal x1062=(x1051+x1056+x1059+x1060);
j5eval[0]=((IKabs(((((-0.904)*x1043))+((x1045*x1048))+(((-0.76)*r10))+(((1.904)*x1045*x1047))+(((1.904)*x1044*x1045)))))+(IKabs(((((-1.0)*x1043*x1048))+(((-1.904)*x1043*x1044))+(((-1.904)*x1043*x1047))+(((-0.904)*x1045))+(((-0.76)*r00)))))+(((0.5)*(IKabs(((((-1.0)*x1050))+x1061+(((-4.0)*py)))))))+(((0.5)*(IKabs(((((-1.52)*r00))+(((-1.0)*x1043*x1049))+(((-3.808)*x1043*x1047))+(((-3.808)*x1043*x1044))+(((-1.808)*x1045)))))))+(((0.5)*(IKabs((x1041+(((-1.0)*x1062))+(((-4.0)*px)))))))+(((0.5)*(IKabs(((((-1.0)*x1050))+x1061+(((-1.0)*x1040)))))))+(((0.5)*(IKabs((x1062+(((-1.0)*x1041))+(((-1.0)*x1042)))))))+(((0.5)*(IKabs(((((3.808)*x1045*x1047))+(((3.808)*x1044*x1045))+(((-1.52)*r10))+((x1045*x1049))+(((-1.808)*x1043)))))))+(((0.5)*(IKabs((x1041+(((-1.0)*x1062))+(((-1.0)*x1042)))))))+(((0.5)*(IKabs((x1050+(((-1.0)*x1061))+(((-1.0)*x1040))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1063=((12.0)*py);
IkReal x1064=((0.38)*r11);
IkReal x1065=((4.0)*py);
IkReal x1066=(cj4*r11);
IkReal x1067=(cj4*r01);
IkReal x1068=(cj1*sj2);
IkReal x1069=(cj4*r00);
IkReal x1070=(cj2*sj1);
IkReal x1071=((0.452)*cj4*r10);
IkReal x1072=((1.06)*sj1*x1069);
IkReal x1073=((0.952)*x1069*x1070);
IkReal x1074=((0.952)*x1068*x1069);
IkReal x1075=(x1074+x1072+x1073+x1064);
IkReal x1076=((((1.904)*x1067*x1070))+(((-0.904)*x1066))+(((2.12)*sj1*x1067))+(((-0.76)*r10))+(((1.904)*x1067*x1068)));
op[0]=(x1075+(((-1.0)*x1065))+(((-1.0)*x1071)));
op[1]=x1076;
op[2]=(x1075+(((-1.0)*x1063))+(((-1.0)*x1071)));
op[3]=((((-1.808)*x1066))+(((-1.52)*r10))+(((4.24)*sj1*x1067))+(((3.808)*x1067*x1068))+(((3.808)*x1067*x1070)));
op[4]=(x1071+(((-1.0)*x1063))+(((-1.0)*x1075)));
op[5]=x1076;
op[6]=(x1071+(((-1.0)*x1065))+(((-1.0)*x1075)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1077=((0.38)*r01);
IkReal x1078=((12.0)*px);
IkReal x1079=((4.0)*px);
IkReal x1080=((0.952)*r10);
IkReal x1081=(cj4*r01);
IkReal x1082=((0.452)*cj4*r00);
IkReal x1083=(cj2*cj4*sj1);
IkReal x1084=(cj4*r11*sj1);
IkReal x1085=((1.06)*cj4*r10*sj1);
IkReal x1086=(cj1*cj4*r11*sj2);
IkReal x1087=(x1080*x1083);
IkReal x1088=(cj1*cj4*sj2*x1080);
IkReal x1089=(x1087+x1085+x1082+x1088);
IkReal x1090=((((-0.904)*x1081))+(((-1.904)*r11*x1083))+(((-1.904)*x1086))+(((-2.12)*x1084))+(((-0.76)*r00)));
j5evalpoly[0]=(((htj5*x1090))+(((htj5*htj5*htj5*htj5)*((x1077+(((-1.0)*x1089))+(((-1.0)*x1078))))))+x1089+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1077+(((-1.0)*x1089))+(((-1.0)*x1079))))))+(((htj5*htj5)*((x1089+(((-1.0)*x1077))+(((-1.0)*x1078))))))+(((htj5*htj5*htj5)*(((((-1.808)*x1081))+(((-4.24)*x1084))+(((-1.52)*r00))+(((-3.808)*r11*x1083))+(((-3.808)*x1086))))))+((x1090*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x1077))+(((-1.0)*x1079)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1091=(cj4*cj5);
IkReal x1092=(cj4*sj5);
if( IKabs((((r01*x1092))+(((-1.0)*r00*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1091))+(((-1.0)*r11*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1092))+(((-1.0)*r00*x1091))))+IKsqr((((r10*x1091))+(((-1.0)*r11*x1092))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1092))+(((-1.0)*r00*x1091))), (((r10*x1091))+(((-1.0)*r11*x1092))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1093=IKcos(j0);
IkReal x1094=IKsin(j0);
IkReal x1095=((0.238)*sj2);
IkReal x1096=(r00*sj5);
IkReal x1097=((0.238)*cj2);
IkReal x1098=((1.0)*sj2);
IkReal x1099=(cj5*r01);
IkReal x1100=(sj3*sj4);
IkReal x1101=(r01*sj5);
IkReal x1102=(cj5*r11);
IkReal x1103=(r11*sj5);
IkReal x1104=(cj3*r10);
IkReal x1105=(cj5*sj4);
IkReal x1106=(r10*sj5);
IkReal x1107=(sj1*x1094);
IkReal x1108=(cj1*x1093);
IkReal x1109=(cj1*x1094);
IkReal x1110=((1.0)*cj5*r00);
IkReal x1111=(sj1*x1093);
IkReal x1112=((1.0)*cj3*sj4);
IkReal x1113=((1.0)*cj5*r10);
evalcond[0]=(x1093+(((-1.0)*cj4*x1113))+((cj4*x1103)));
evalcond[1]=((((-1.0)*cj4*x1110))+((cj4*x1101))+(((-1.0)*x1094)));
evalcond[2]=(((sj2*x1108))+(((-1.0)*x1100*x1110))+((x1100*x1101))+((cj2*x1111))+((cj3*x1096))+((cj3*x1099)));
evalcond[3]=(((sj2*x1109))+(((-1.0)*x1100*x1113))+((x1100*x1103))+((cj2*x1107))+((cj3*x1102))+((sj5*x1104)));
evalcond[4]=((((-1.0)*x1098*x1111))+((cj3*r00*x1105))+((cj2*x1108))+((sj3*x1096))+((sj3*x1099))+(((-1.0)*x1101*x1112)));
evalcond[5]=((((-1.0)*x1103*x1112))+(((-1.0)*x1098*x1107))+((sj3*x1106))+((sj3*x1102))+((x1104*x1105))+((cj2*x1109)));
evalcond[6]=((((-0.095)*x1096))+(((-0.095)*x1099))+((x1097*x1111))+(((0.265)*x1111))+(((-1.0)*px))+(((-0.113)*x1094))+((x1095*x1108)));
evalcond[7]=(((x1097*x1107))+(((0.265)*x1107))+(((0.113)*x1093))+(((-0.095)*x1106))+(((-0.095)*x1102))+(((-1.0)*py))+((x1095*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1116 = IKatan2WithCheck(IkReal(((-0.095)*r21)),IkReal(((-0.095)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1116.valid){
continue;
}
IkReal x1114=((1.0)*(x1116.value));
if((((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1117=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20)))))),-1);
if(!x1117.valid){
continue;
}
if( (((x1117.value)*(((((-1.0)*pz))+(((0.265)*cj1))+(((0.238)*cj1*cj2))+(((-0.238)*sj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1117.value)*(((((-1.0)*pz))+(((0.265)*cj1))+(((0.238)*cj1*cj2))+(((-0.238)*sj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1115=IKasin(((x1117.value)*(((((-1.0)*pz))+(((0.265)*cj1))+(((0.238)*cj1*cj2))+(((-0.238)*sj1*sj2))))));
j5array[0]=((((-1.0)*x1115))+(((-1.0)*x1114)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1115+(((-1.0)*x1114)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1118=cj5*cj5;
IkReal x1119=r21*r21;
IkReal x1120=(cj3*x1118);
IkReal x1121=((((-2.0)*cj3*cj5*r20*r21*sj5))+(((-1.0)*x1119*x1120))+((cj3*(r22*r22)))+((x1120*(r20*r20)))+((cj3*x1119)));
j4eval[0]=x1121;
j4eval[1]=IKsign(x1121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1122=r21*r21;
IkReal x1123=cj5*cj5;
IkReal x1124=((1.0)*sj3);
IkReal x1125=(sj3*x1123);
IkReal x1126=((((-1.0)*x1122*x1124))+(((-1.0)*x1124*(r22*r22)))+((x1122*x1125))+(((2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1123*x1124*(r20*r20))));
j4eval[0]=x1126;
j4eval[1]=IKsign(x1126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1127=cj1*cj1;
IkReal x1128=cj2*cj2;
IkReal x1129=((9.28797584861203)*cj2);
IkReal x1130=((126140.0)*cj2);
IkReal x1131=(cj1*sj1*sj2);
IkReal x1132=(cj2*x1131);
IkReal x1133=(x1127*x1128);
j0eval[0]=((6.11103747883072)+x1129+(((-8.3416537810176)*x1133))+(((-1.0)*x1127*x1129))+(((4.1708268905088)*x1128))+(((9.28797584861203)*x1131))+(((-1.0)*x1127))+(((8.3416537810176)*x1132)));
j0eval[1]=IKsign(((82994.0)+(((-13581.0)*x1127))+x1130+(((-1.0)*x1127*x1130))+(((56644.0)*x1128))+(((126140.0)*x1131))+(((-113288.0)*x1133))+(((113288.0)*x1132))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1134=((1.0)*cj5);
IkReal x1135=((1.0)*sj5);
IkReal x1136=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1136;
j0eval[1]=((IKabs(((((-1.0)*r01*x1134))+(((-1.0)*r00*x1135)))))+(IKabs(((((-1.0)*r11*x1134))+(((-1.0)*r10*x1135))))));
j0eval[2]=IKsign(x1136);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1137=cj5*cj5;
IkReal x1138=r21*r21;
IkReal x1139=(cj1*sj2);
IkReal x1140=(cj5*r20);
IkReal x1141=(r21*sj5);
IkReal x1142=(cj2*sj1);
IkReal x1143=(x1138+(r22*r22)+((x1137*(r20*r20)))+(((-2.0)*x1140*x1141))+(((-1.0)*x1137*x1138)));
j4eval[0]=x1143;
j4eval[1]=IKsign(x1143);
j4eval[2]=((IKabs((((r22*x1142))+((r22*x1139)))))+(IKabs((((x1140*x1142))+(((-1.0)*x1139*x1141))+(((-1.0)*x1141*x1142))+((x1139*x1140))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1144;
j4eval[1]=IKsign(x1144);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1145=cj5*cj5;
IkReal x1146=(r11*r21);
IkReal x1147=((1.0)*r20);
IkReal x1148=(cj5*sj5);
IkReal x1149=(((x1145*x1146))+(((-1.0)*r10*x1145*x1147))+(((-1.0)*r12*r22))+((r11*r20*x1148))+(((-1.0)*x1146))+((r10*r21*x1148)));
j4eval[0]=x1149;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1147)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1150=cj5*cj5;
IkReal x1151=((1.0)*r21);
IkReal x1152=(cj5*sj5);
IkReal x1153=((1.0)*r20);
IkReal x1154=((((-1.0)*r01*x1152*x1153))+((r01*r21))+((r00*r20*x1150))+(((-1.0)*r00*x1151*x1152))+((r02*r22))+(((-1.0)*r01*x1150*x1151)));
j4eval[0]=x1154;
j4eval[1]=IKsign(x1154);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1153)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1155=cj5*cj5;
IkReal x1156=((1.0)*r21);
IkReal x1157=(cj5*sj5);
IkReal x1158=((1.0)*r20);
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1157*x1158))+((r01*r21))+((r00*r20*x1155))+(((-1.0)*r00*x1156*x1157))+(((-1.0)*r01*x1155*x1156))+((r02*r22)))),-1);
if(!x1159.valid){
continue;
}
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1158)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1159.value)))+(x1160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1161=IKcos(j4);
IkReal x1162=IKsin(j4);
IkReal x1163=(cj5*r00);
IkReal x1164=(r01*sj5);
IkReal x1165=(r11*sj5);
IkReal x1166=(r21*sj5);
IkReal x1167=(cj5*r10);
IkReal x1168=(cj5*r20);
IkReal x1169=((1.0)*x1161);
IkReal x1170=((1.0)*x1162);
evalcond[0]=((((-1.0)*x1168*x1169))+((r22*x1162))+((x1161*x1166)));
evalcond[1]=(((x1162*x1168))+((r22*x1161))+(((-1.0)*x1166*x1170)));
evalcond[2]=(cj0+((r12*x1162))+(((-1.0)*x1167*x1169))+((x1161*x1165)));
evalcond[3]=(((r02*x1161))+cj0+((x1162*x1163))+(((-1.0)*x1164*x1170)));
evalcond[4]=((((-1.0)*x1165*x1170))+sj0+((x1162*x1167))+((r12*x1161)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1162))+(((-1.0)*x1163*x1169))+((x1161*x1164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1171=cj5*cj5;
IkReal x1172=(r11*r21);
IkReal x1173=((1.0)*r20);
IkReal x1174=(cj5*sj5);
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1171*x1173))+(((-1.0)*r12*r22))+((r10*r21*x1174))+((x1171*x1172))+((r11*r20*x1174))+(((-1.0)*x1172)))),-1);
if(!x1175.valid){
continue;
}
CheckValue<IkReal> x1176 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1175.value)))+(x1176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1177=IKcos(j4);
IkReal x1178=IKsin(j4);
IkReal x1179=(cj5*r00);
IkReal x1180=(r01*sj5);
IkReal x1181=(r11*sj5);
IkReal x1182=(r21*sj5);
IkReal x1183=(cj5*r10);
IkReal x1184=(cj5*r20);
IkReal x1185=((1.0)*x1177);
IkReal x1186=((1.0)*x1178);
evalcond[0]=(((x1177*x1182))+(((-1.0)*x1184*x1185))+((r22*x1178)));
evalcond[1]=(((x1178*x1184))+(((-1.0)*x1182*x1186))+((r22*x1177)));
evalcond[2]=(cj0+((x1177*x1181))+((r12*x1178))+(((-1.0)*x1183*x1185)));
evalcond[3]=(((r02*x1177))+cj0+(((-1.0)*x1180*x1186))+((x1178*x1179)));
evalcond[4]=((((-1.0)*x1181*x1186))+sj0+((x1178*x1183))+((r12*x1177)));
evalcond[5]=(((r02*x1178))+(((-1.0)*sj0))+(((-1.0)*x1179*x1185))+((x1177*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
CheckValue<IkReal> x1188=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1187.value)+(((1.5707963267949)*(x1188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1189=IKcos(j4);
IkReal x1190=IKsin(j4);
IkReal x1191=(cj5*r00);
IkReal x1192=(r01*sj5);
IkReal x1193=(r11*sj5);
IkReal x1194=(r21*sj5);
IkReal x1195=(cj5*r10);
IkReal x1196=(cj5*r20);
IkReal x1197=((1.0)*x1189);
IkReal x1198=((1.0)*x1190);
evalcond[0]=(((x1189*x1194))+((r22*x1190))+(((-1.0)*x1196*x1197)));
evalcond[1]=((((-1.0)*x1194*x1198))+((r22*x1189))+((x1190*x1196)));
evalcond[2]=(cj0+(((-1.0)*x1195*x1197))+((x1189*x1193))+((r12*x1190)));
evalcond[3]=(cj0+((r02*x1189))+(((-1.0)*x1192*x1198))+((x1190*x1191)));
evalcond[4]=((((-1.0)*x1193*x1198))+sj0+((x1190*x1195))+((r12*x1189)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1191*x1197))+((x1189*x1192))+((r02*x1190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1199=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1199;
j4eval[1]=IKsign(x1199);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1200=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1200;
j4eval[1]=IKsign(x1200);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1201=cj5*cj5;
IkReal x1202=(r11*r21);
IkReal x1203=((1.0)*r20);
IkReal x1204=(cj5*sj5);
IkReal x1205=((((-1.0)*r12*r22))+((r11*r20*x1204))+(((-1.0)*x1202))+((r10*r21*x1204))+((x1201*x1202))+(((-1.0)*r10*x1201*x1203)));
j4eval[0]=x1205;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1203)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1206=cj5*cj5;
IkReal x1207=(r11*r21);
IkReal x1208=((1.0)*r20);
IkReal x1209=(cj5*sj5);
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1206*x1208))+(((-1.0)*r12*r22))+((r11*r20*x1209))+(((-1.0)*x1207))+((r10*r21*x1209))+((x1206*x1207)))),-1);
if(!x1210.valid){
continue;
}
CheckValue<IkReal> x1211 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1210.value)))+(x1211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1212=IKcos(j4);
IkReal x1213=IKsin(j4);
IkReal x1214=((1.0)*sj0);
IkReal x1215=(cj5*r00);
IkReal x1216=(cj5*r10);
IkReal x1217=(cj5*r20);
IkReal x1218=((1.0)*x1212);
IkReal x1219=(sj5*x1212);
IkReal x1220=((1.0)*sj5*x1213);
evalcond[0]=(((r22*x1213))+(((-1.0)*x1217*x1218))+((r21*x1219)));
evalcond[1]=(((r22*x1212))+((x1213*x1217))+(((-1.0)*r21*x1220)));
evalcond[2]=(((r12*x1213))+((r11*x1219))+cj0+(((-1.0)*x1216*x1218)));
evalcond[3]=((((-1.0)*x1215*x1218))+((r02*x1213))+((r01*x1219))+(((-1.0)*x1214)));
evalcond[4]=((((-1.0)*r01*x1220))+((x1213*x1215))+((r02*x1212))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1212))+((x1213*x1216))+(((-1.0)*r11*x1220))+(((-1.0)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1221.value)+(((1.5707963267949)*(x1222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1223=IKcos(j4);
IkReal x1224=IKsin(j4);
IkReal x1225=((1.0)*sj0);
IkReal x1226=(cj5*r00);
IkReal x1227=(cj5*r10);
IkReal x1228=(cj5*r20);
IkReal x1229=((1.0)*x1223);
IkReal x1230=(sj5*x1223);
IkReal x1231=((1.0)*sj5*x1224);
evalcond[0]=(((r22*x1224))+(((-1.0)*x1228*x1229))+((r21*x1230)));
evalcond[1]=(((x1224*x1228))+(((-1.0)*r21*x1231))+((r22*x1223)));
evalcond[2]=(cj0+(((-1.0)*x1227*x1229))+((r11*x1230))+((r12*x1224)));
evalcond[3]=((((-1.0)*x1225))+((r01*x1230))+(((-1.0)*x1226*x1229))+((r02*x1224)));
evalcond[4]=((((-1.0)*r01*x1231))+((x1224*x1226))+((r02*x1223))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1225))+((x1224*x1227))+(((-1.0)*r11*x1231))+((r12*x1223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1232.value)+(((1.5707963267949)*(x1233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1234=IKcos(j4);
IkReal x1235=IKsin(j4);
IkReal x1236=((1.0)*sj0);
IkReal x1237=(cj5*r00);
IkReal x1238=(cj5*r10);
IkReal x1239=(cj5*r20);
IkReal x1240=((1.0)*x1234);
IkReal x1241=(sj5*x1234);
IkReal x1242=((1.0)*sj5*x1235);
evalcond[0]=((((-1.0)*x1239*x1240))+((r22*x1235))+((r21*x1241)));
evalcond[1]=(((x1235*x1239))+(((-1.0)*r21*x1242))+((r22*x1234)));
evalcond[2]=(cj0+(((-1.0)*x1238*x1240))+((r11*x1241))+((r12*x1235)));
evalcond[3]=((((-1.0)*x1236))+((r01*x1241))+((r02*x1235))+(((-1.0)*x1237*x1240)));
evalcond[4]=(((x1235*x1237))+((r02*x1234))+(((-1.0)*r01*x1242))+(((-1.0)*cj0)));
evalcond[5]=(((x1235*x1238))+(((-1.0)*x1236))+(((-1.0)*r11*x1242))+((r12*x1234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1243=IKsin(j0);
IkReal x1244=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.265)*x1244))+(((-0.113)*x1243)));
evalcond[1]=((((0.113)*x1244))+(((-1.0)*py))+(((0.265)*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1245=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1245;
j4eval[1]=IKsign(x1245);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1246=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1246;
j4eval[1]=IKsign(x1246);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1247=cj5*cj5;
IkReal x1248=(r11*r21);
IkReal x1249=((1.0)*r20);
IkReal x1250=(cj5*sj5);
IkReal x1251=((((-1.0)*r10*x1247*x1249))+(((-1.0)*r12*r22))+(((-1.0)*x1248))+((r10*r21*x1250))+((x1247*x1248))+((r11*r20*x1250)));
j4eval[0]=x1251;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1249)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1252=cj5*cj5;
IkReal x1253=(r11*r21);
IkReal x1254=((1.0)*r20);
IkReal x1255=(cj5*sj5);
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x1252*x1254))+((r10*r21*x1255))+((x1252*x1253))+((r11*r20*x1255))+(((-1.0)*x1253)))),-1);
if(!x1256.valid){
continue;
}
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1256.value)))+(x1257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1258=IKcos(j4);
IkReal x1259=IKsin(j4);
IkReal x1260=((1.0)*sj0);
IkReal x1261=(cj5*r00);
IkReal x1262=(cj5*r10);
IkReal x1263=(cj5*r20);
IkReal x1264=((1.0)*x1258);
IkReal x1265=(sj5*x1258);
IkReal x1266=((1.0)*sj5*x1259);
evalcond[0]=(((r22*x1259))+((r21*x1265))+(((-1.0)*x1263*x1264)));
evalcond[1]=((((-1.0)*r21*x1266))+((r22*x1258))+((x1259*x1263)));
evalcond[2]=(((r11*x1265))+cj0+((r12*x1259))+(((-1.0)*x1262*x1264)));
evalcond[3]=((((-1.0)*x1261*x1264))+((r02*x1259))+((r01*x1265))+(((-1.0)*x1260)));
evalcond[4]=(((r02*x1258))+(((-1.0)*r01*x1266))+((x1259*x1261))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1266))+((r12*x1258))+((x1259*x1262))+(((-1.0)*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1267.value)+(((1.5707963267949)*(x1268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1269=IKcos(j4);
IkReal x1270=IKsin(j4);
IkReal x1271=((1.0)*sj0);
IkReal x1272=(cj5*r00);
IkReal x1273=(cj5*r10);
IkReal x1274=(cj5*r20);
IkReal x1275=((1.0)*x1269);
IkReal x1276=(sj5*x1269);
IkReal x1277=((1.0)*sj5*x1270);
evalcond[0]=(((r21*x1276))+((r22*x1270))+(((-1.0)*x1274*x1275)));
evalcond[1]=(((r22*x1269))+((x1270*x1274))+(((-1.0)*r21*x1277)));
evalcond[2]=(((r12*x1270))+cj0+((r11*x1276))+(((-1.0)*x1273*x1275)));
evalcond[3]=((((-1.0)*x1271))+((r02*x1270))+(((-1.0)*x1272*x1275))+((r01*x1276)));
evalcond[4]=((((-1.0)*r01*x1277))+((r02*x1269))+((x1270*x1272))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1271))+((r12*x1269))+(((-1.0)*r11*x1277))+((x1270*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1278 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1278.valid){
continue;
}
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1278.value)+(((1.5707963267949)*(x1279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1280=IKcos(j4);
IkReal x1281=IKsin(j4);
IkReal x1282=((1.0)*sj0);
IkReal x1283=(cj5*r00);
IkReal x1284=(cj5*r10);
IkReal x1285=(cj5*r20);
IkReal x1286=((1.0)*x1280);
IkReal x1287=(sj5*x1280);
IkReal x1288=((1.0)*sj5*x1281);
evalcond[0]=((((-1.0)*x1285*x1286))+((r22*x1281))+((r21*x1287)));
evalcond[1]=(((r22*x1280))+(((-1.0)*r21*x1288))+((x1281*x1285)));
evalcond[2]=(((r11*x1287))+cj0+(((-1.0)*x1284*x1286))+((r12*x1281)));
evalcond[3]=(((r02*x1281))+((r01*x1287))+(((-1.0)*x1282))+(((-1.0)*x1283*x1286)));
evalcond[4]=(((r02*x1280))+(((-1.0)*r01*x1288))+((x1281*x1283))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1282))+(((-1.0)*r11*x1288))+((x1281*x1284))+((r12*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1289=IKsin(j0);
IkReal x1290=IKcos(j0);
evalcond[0]=((((0.265)*x1290))+(((-1.0)*px))+(((-0.113)*x1289)));
evalcond[1]=((((-1.0)*py))+(((0.113)*x1290))+(((0.265)*x1289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1291=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1291;
j4eval[1]=IKsign(x1291);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1292=cj5*cj5;
IkReal x1293=(r11*r21);
IkReal x1294=((1.0)*r20);
IkReal x1295=(cj5*sj5);
IkReal x1296=((((-1.0)*r12*r22))+((r11*r20*x1295))+(((-1.0)*x1293))+((r10*r21*x1295))+(((-1.0)*r10*x1292*x1294))+((x1292*x1293)));
j4eval[0]=x1296;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1294)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1297=cj5*cj5;
IkReal x1298=((1.0)*r21);
IkReal x1299=(cj5*sj5);
IkReal x1300=((1.0)*r20);
IkReal x1301=((((-1.0)*r01*x1299*x1300))+((r01*r21))+((r00*r20*x1297))+(((-1.0)*r01*x1297*x1298))+((r02*r22))+(((-1.0)*r00*x1298*x1299)));
j4eval[0]=x1301;
j4eval[1]=IKsign(x1301);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1300)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1302=cj5*cj5;
IkReal x1303=((1.0)*r21);
IkReal x1304=(cj5*sj5);
IkReal x1305=((1.0)*r20);
CheckValue<IkReal> x1306 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1305)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1306.valid){
continue;
}
CheckValue<IkReal> x1307=IKPowWithIntegerCheck(IKsign((((r00*r20*x1302))+((r01*r21))+(((-1.0)*r00*x1303*x1304))+(((-1.0)*r01*x1302*x1303))+(((-1.0)*r01*x1304*x1305))+((r02*r22)))),-1);
if(!x1307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1306.value)+(((1.5707963267949)*(x1307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1308=IKcos(j4);
IkReal x1309=IKsin(j4);
IkReal x1310=(cj5*r00);
IkReal x1311=(r01*sj5);
IkReal x1312=(r11*sj5);
IkReal x1313=(r21*sj5);
IkReal x1314=(cj5*r10);
IkReal x1315=(cj5*r20);
IkReal x1316=((1.0)*x1308);
IkReal x1317=((1.0)*x1309);
evalcond[0]=((((-1.0)*x1315*x1316))+((x1308*x1313))+((r22*x1309)));
evalcond[1]=((((-1.0)*x1313*x1317))+((x1309*x1315))+((r22*x1308)));
evalcond[2]=(cj0+((x1308*x1312))+((r12*x1309))+(((-1.0)*x1314*x1316)));
evalcond[3]=((((-1.0)*x1311*x1317))+cj0+((x1309*x1310))+((r02*x1308)));
evalcond[4]=(sj0+((r12*x1308))+((x1309*x1314))+(((-1.0)*x1312*x1317)));
evalcond[5]=((((-1.0)*sj0))+((x1308*x1311))+(((-1.0)*x1310*x1316))+((r02*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1318=cj5*cj5;
IkReal x1319=(r11*r21);
IkReal x1320=((1.0)*r20);
IkReal x1321=(cj5*sj5);
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(IKsign((((x1318*x1319))+(((-1.0)*r10*x1318*x1320))+(((-1.0)*r12*r22))+(((-1.0)*x1319))+((r11*r20*x1321))+((r10*r21*x1321)))),-1);
if(!x1322.valid){
continue;
}
CheckValue<IkReal> x1323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1322.value)))+(x1323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1324=IKcos(j4);
IkReal x1325=IKsin(j4);
IkReal x1326=(cj5*r00);
IkReal x1327=(r01*sj5);
IkReal x1328=(r11*sj5);
IkReal x1329=(r21*sj5);
IkReal x1330=(cj5*r10);
IkReal x1331=(cj5*r20);
IkReal x1332=((1.0)*x1324);
IkReal x1333=((1.0)*x1325);
evalcond[0]=(((x1324*x1329))+((r22*x1325))+(((-1.0)*x1331*x1332)));
evalcond[1]=(((x1325*x1331))+((r22*x1324))+(((-1.0)*x1329*x1333)));
evalcond[2]=(cj0+((x1324*x1328))+(((-1.0)*x1330*x1332))+((r12*x1325)));
evalcond[3]=((((-1.0)*x1327*x1333))+cj0+((r02*x1324))+((x1325*x1326)));
evalcond[4]=(sj0+(((-1.0)*x1328*x1333))+((x1325*x1330))+((r12*x1324)));
evalcond[5]=((((-1.0)*x1326*x1332))+(((-1.0)*sj0))+((x1324*x1327))+((r02*x1325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1334.value)+(((1.5707963267949)*(x1335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1336=IKcos(j4);
IkReal x1337=IKsin(j4);
IkReal x1338=(cj5*r00);
IkReal x1339=(r01*sj5);
IkReal x1340=(r11*sj5);
IkReal x1341=(r21*sj5);
IkReal x1342=(cj5*r10);
IkReal x1343=(cj5*r20);
IkReal x1344=((1.0)*x1336);
IkReal x1345=((1.0)*x1337);
evalcond[0]=(((r22*x1337))+((x1336*x1341))+(((-1.0)*x1343*x1344)));
evalcond[1]=((((-1.0)*x1341*x1345))+((x1337*x1343))+((r22*x1336)));
evalcond[2]=(((r12*x1337))+cj0+((x1336*x1340))+(((-1.0)*x1342*x1344)));
evalcond[3]=(((x1337*x1338))+cj0+(((-1.0)*x1339*x1345))+((r02*x1336)));
evalcond[4]=(((r12*x1336))+(((-1.0)*x1340*x1345))+sj0+((x1337*x1342)));
evalcond[5]=((((-1.0)*sj0))+((x1336*x1339))+(((-1.0)*x1338*x1344))+((r02*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1346=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1346;
j4eval[1]=IKsign(x1346);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1347=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1348=cj5*cj5;
IkReal x1349=(r11*r21);
IkReal x1350=((1.0)*r20);
IkReal x1351=(cj5*sj5);
IkReal x1352=(((r11*r20*x1351))+((r10*r21*x1351))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1348*x1350))+((x1348*x1349))+(((-1.0)*x1349)));
j4eval[0]=x1352;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1350)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1353=cj5*cj5;
IkReal x1354=(r11*r21);
IkReal x1355=((1.0)*r20);
IkReal x1356=(cj5*sj5);
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
CheckValue<IkReal> x1358=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1354))+((r11*r20*x1356))+(((-1.0)*r10*x1353*x1355))+((r10*r21*x1356))+(((-1.0)*r12*r22))+((x1353*x1354)))),-1);
if(!x1358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1357.value)+(((1.5707963267949)*(x1358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1359=IKcos(j4);
IkReal x1360=IKsin(j4);
IkReal x1361=((1.0)*sj0);
IkReal x1362=(cj5*r00);
IkReal x1363=(cj5*r10);
IkReal x1364=(cj5*r20);
IkReal x1365=((1.0)*x1359);
IkReal x1366=(sj5*x1359);
IkReal x1367=((1.0)*sj5*x1360);
evalcond[0]=((((-1.0)*x1364*x1365))+((r22*x1360))+((r21*x1366)));
evalcond[1]=(((r22*x1359))+((x1360*x1364))+(((-1.0)*r21*x1367)));
evalcond[2]=(cj0+((r11*x1366))+((r12*x1360))+(((-1.0)*x1363*x1365)));
evalcond[3]=(((r02*x1360))+(((-1.0)*x1362*x1365))+((r01*x1366))+(((-1.0)*x1361)));
evalcond[4]=(((x1360*x1362))+((r02*x1359))+(((-1.0)*r01*x1367))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1367))+((x1360*x1363))+((r12*x1359))+(((-1.0)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1368 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1368.value)+(((1.5707963267949)*(x1369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1370=IKcos(j4);
IkReal x1371=IKsin(j4);
IkReal x1372=((1.0)*sj0);
IkReal x1373=(cj5*r00);
IkReal x1374=(cj5*r10);
IkReal x1375=(cj5*r20);
IkReal x1376=((1.0)*x1370);
IkReal x1377=(sj5*x1370);
IkReal x1378=((1.0)*sj5*x1371);
evalcond[0]=((((-1.0)*x1375*x1376))+((r22*x1371))+((r21*x1377)));
evalcond[1]=((((-1.0)*r21*x1378))+((r22*x1370))+((x1371*x1375)));
evalcond[2]=(cj0+((r12*x1371))+((r11*x1377))+(((-1.0)*x1374*x1376)));
evalcond[3]=((((-1.0)*x1372))+((r02*x1371))+(((-1.0)*x1373*x1376))+((r01*x1377)));
evalcond[4]=((((-1.0)*r01*x1378))+((x1371*x1373))+((r02*x1370))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1370))+(((-1.0)*x1372))+((x1371*x1374))+(((-1.0)*r11*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1379.value)+(((1.5707963267949)*(x1380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1381=IKcos(j4);
IkReal x1382=IKsin(j4);
IkReal x1383=((1.0)*sj0);
IkReal x1384=(cj5*r00);
IkReal x1385=(cj5*r10);
IkReal x1386=(cj5*r20);
IkReal x1387=((1.0)*x1381);
IkReal x1388=(sj5*x1381);
IkReal x1389=((1.0)*sj5*x1382);
evalcond[0]=(((r21*x1388))+((r22*x1382))+(((-1.0)*x1386*x1387)));
evalcond[1]=((((-1.0)*r21*x1389))+((r22*x1381))+((x1382*x1386)));
evalcond[2]=(cj0+((r11*x1388))+((r12*x1382))+(((-1.0)*x1385*x1387)));
evalcond[3]=((((-1.0)*x1383))+(((-1.0)*x1384*x1387))+((r01*x1388))+((r02*x1382)));
evalcond[4]=((((-1.0)*r01*x1389))+(((-1.0)*cj0))+((x1382*x1384))+((r02*x1381)));
evalcond[5]=((((-1.0)*x1383))+(((-1.0)*r11*x1389))+((r12*x1381))+((x1382*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1390=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1390;
j4eval[1]=IKsign(x1390);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1391=cj5*cj5;
IkReal x1392=(r11*r21);
IkReal x1393=((1.0)*r20);
IkReal x1394=(cj5*sj5);
IkReal x1395=((((-1.0)*r10*x1391*x1393))+(((-1.0)*r12*r22))+((r11*r20*x1394))+((x1391*x1392))+(((-1.0)*x1392))+((r10*r21*x1394)));
j4eval[0]=x1395;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1393)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1396=cj5*cj5;
IkReal x1397=((1.0)*r21);
IkReal x1398=(cj5*sj5);
IkReal x1399=((1.0)*r20);
IkReal x1400=((((-1.0)*r01*x1398*x1399))+((r01*r21))+(((-1.0)*r01*x1396*x1397))+(((-1.0)*r00*x1397*x1398))+((r02*r22))+((r00*r20*x1396)));
j4eval[0]=x1400;
j4eval[1]=IKsign(x1400);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1399)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1401=cj5*cj5;
IkReal x1402=((1.0)*r21);
IkReal x1403=(cj5*sj5);
IkReal x1404=((1.0)*r20);
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1404)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1403*x1404))+(((-1.0)*r01*x1401*x1402))+((r01*r21))+(((-1.0)*r00*x1402*x1403))+((r00*r20*x1401))+((r02*r22)))),-1);
if(!x1406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1405.value)+(((1.5707963267949)*(x1406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1407=IKcos(j4);
IkReal x1408=IKsin(j4);
IkReal x1409=(cj5*r00);
IkReal x1410=(r01*sj5);
IkReal x1411=(r11*sj5);
IkReal x1412=(r21*sj5);
IkReal x1413=(cj5*r10);
IkReal x1414=(cj5*r20);
IkReal x1415=((1.0)*x1407);
IkReal x1416=((1.0)*x1408);
evalcond[0]=(((x1407*x1412))+(((-1.0)*x1414*x1415))+((r22*x1408)));
evalcond[1]=((((-1.0)*x1412*x1416))+((r22*x1407))+((x1408*x1414)));
evalcond[2]=(((x1407*x1411))+cj0+(((-1.0)*x1413*x1415))+((r12*x1408)));
evalcond[3]=(cj0+((r02*x1407))+(((-1.0)*x1410*x1416))+((x1408*x1409)));
evalcond[4]=(sj0+((r12*x1407))+(((-1.0)*x1411*x1416))+((x1408*x1413)));
evalcond[5]=((((-1.0)*sj0))+((x1407*x1410))+((r02*x1408))+(((-1.0)*x1409*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1417=cj5*cj5;
IkReal x1418=(r11*r21);
IkReal x1419=((1.0)*r20);
IkReal x1420=(cj5*sj5);
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign((((x1417*x1418))+(((-1.0)*r12*r22))+((r11*r20*x1420))+(((-1.0)*r10*x1417*x1419))+((r10*r21*x1420))+(((-1.0)*x1418)))),-1);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1421.value)))+(x1422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1423=IKcos(j4);
IkReal x1424=IKsin(j4);
IkReal x1425=(cj5*r00);
IkReal x1426=(r01*sj5);
IkReal x1427=(r11*sj5);
IkReal x1428=(r21*sj5);
IkReal x1429=(cj5*r10);
IkReal x1430=(cj5*r20);
IkReal x1431=((1.0)*x1423);
IkReal x1432=((1.0)*x1424);
evalcond[0]=(((x1423*x1428))+((r22*x1424))+(((-1.0)*x1430*x1431)));
evalcond[1]=(((r22*x1423))+(((-1.0)*x1428*x1432))+((x1424*x1430)));
evalcond[2]=(cj0+((x1423*x1427))+(((-1.0)*x1429*x1431))+((r12*x1424)));
evalcond[3]=(((x1424*x1425))+cj0+((r02*x1423))+(((-1.0)*x1426*x1432)));
evalcond[4]=(((x1424*x1429))+sj0+(((-1.0)*x1427*x1432))+((r12*x1423)));
evalcond[5]=((((-1.0)*sj0))+((x1423*x1426))+((r02*x1424))+(((-1.0)*x1425*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1433 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1433.value)+(((1.5707963267949)*(x1434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1435=IKcos(j4);
IkReal x1436=IKsin(j4);
IkReal x1437=(cj5*r00);
IkReal x1438=(r01*sj5);
IkReal x1439=(r11*sj5);
IkReal x1440=(r21*sj5);
IkReal x1441=(cj5*r10);
IkReal x1442=(cj5*r20);
IkReal x1443=((1.0)*x1435);
IkReal x1444=((1.0)*x1436);
evalcond[0]=(((x1435*x1440))+(((-1.0)*x1442*x1443))+((r22*x1436)));
evalcond[1]=(((x1436*x1442))+((r22*x1435))+(((-1.0)*x1440*x1444)));
evalcond[2]=(cj0+((r12*x1436))+((x1435*x1439))+(((-1.0)*x1441*x1443)));
evalcond[3]=(((r02*x1435))+((x1436*x1437))+cj0+(((-1.0)*x1438*x1444)));
evalcond[4]=(sj0+((r12*x1435))+(((-1.0)*x1439*x1444))+((x1436*x1441)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1436))+((x1435*x1438))+(((-1.0)*x1437*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((-3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((-3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1445=IKcos(j0);
IkReal x1446=IKsin(j0);
evalcond[0]=((((-0.113)*x1446))+(((-0.265)*x1445))+(((-1.0)*px)));
evalcond[1]=((((-0.265)*x1446))+(((-1.0)*py))+(((0.113)*x1445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1447=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1447;
j4eval[1]=IKsign(x1447);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1448=cj5*cj5;
IkReal x1449=(r11*r21);
IkReal x1450=((1.0)*r20);
IkReal x1451=(cj5*sj5);
IkReal x1452=(((r10*r21*x1451))+(((-1.0)*r12*r22))+(((-1.0)*x1449))+((r11*r20*x1451))+(((-1.0)*r10*x1448*x1450))+((x1448*x1449)));
j4eval[0]=x1452;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1450)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1453=cj5*cj5;
IkReal x1454=((1.0)*r21);
IkReal x1455=(cj5*sj5);
IkReal x1456=((1.0)*r20);
IkReal x1457=((((-1.0)*r01*x1455*x1456))+((r01*r21))+((r00*r20*x1453))+(((-1.0)*r01*x1453*x1454))+((r02*r22))+(((-1.0)*r00*x1454*x1455)));
j4eval[0]=x1457;
j4eval[1]=IKsign(x1457);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1456)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1458=cj5*cj5;
IkReal x1459=((1.0)*r21);
IkReal x1460=(cj5*sj5);
IkReal x1461=((1.0)*r20);
CheckValue<IkReal> x1462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1460*x1461))+(((-1.0)*r01*x1458*x1459))+((r01*r21))+((r00*r20*x1458))+(((-1.0)*r00*x1459*x1460))+((r02*r22)))),-1);
if(!x1462.valid){
continue;
}
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1461)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1462.value)))+(x1463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1464=IKcos(j4);
IkReal x1465=IKsin(j4);
IkReal x1466=(cj5*r00);
IkReal x1467=(r01*sj5);
IkReal x1468=(r11*sj5);
IkReal x1469=(r21*sj5);
IkReal x1470=(cj5*r10);
IkReal x1471=(cj5*r20);
IkReal x1472=((1.0)*x1464);
IkReal x1473=((1.0)*x1465);
evalcond[0]=((((-1.0)*x1471*x1472))+((x1464*x1469))+((r22*x1465)));
evalcond[1]=((((-1.0)*x1469*x1473))+((r22*x1464))+((x1465*x1471)));
evalcond[2]=((((-1.0)*x1470*x1472))+cj0+((x1464*x1468))+((r12*x1465)));
evalcond[3]=(cj0+((x1465*x1466))+(((-1.0)*x1467*x1473))+((r02*x1464)));
evalcond[4]=(sj0+((r12*x1464))+(((-1.0)*x1468*x1473))+((x1465*x1470)));
evalcond[5]=((((-1.0)*sj0))+((x1464*x1467))+((r02*x1465))+(((-1.0)*x1466*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1474=cj5*cj5;
IkReal x1475=(r11*r21);
IkReal x1476=((1.0)*r20);
IkReal x1477=(cj5*sj5);
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(IKsign((((r11*r20*x1477))+(((-1.0)*r12*r22))+((x1474*x1475))+(((-1.0)*r10*x1474*x1476))+(((-1.0)*x1475))+((r10*r21*x1477)))),-1);
if(!x1479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1478.value)+(((1.5707963267949)*(x1479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1480=IKcos(j4);
IkReal x1481=IKsin(j4);
IkReal x1482=(cj5*r00);
IkReal x1483=(r01*sj5);
IkReal x1484=(r11*sj5);
IkReal x1485=(r21*sj5);
IkReal x1486=(cj5*r10);
IkReal x1487=(cj5*r20);
IkReal x1488=((1.0)*x1480);
IkReal x1489=((1.0)*x1481);
evalcond[0]=((((-1.0)*x1487*x1488))+((x1480*x1485))+((r22*x1481)));
evalcond[1]=((((-1.0)*x1485*x1489))+((x1481*x1487))+((r22*x1480)));
evalcond[2]=(cj0+((x1480*x1484))+((r12*x1481))+(((-1.0)*x1486*x1488)));
evalcond[3]=(cj0+((x1481*x1482))+(((-1.0)*x1483*x1489))+((r02*x1480)));
evalcond[4]=(sj0+(((-1.0)*x1484*x1489))+((r12*x1480))+((x1481*x1486)));
evalcond[5]=((((-1.0)*x1482*x1488))+(((-1.0)*sj0))+((x1480*x1483))+((r02*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1492=IKcos(j4);
IkReal x1493=IKsin(j4);
IkReal x1494=(cj5*r00);
IkReal x1495=(r01*sj5);
IkReal x1496=(r11*sj5);
IkReal x1497=(r21*sj5);
IkReal x1498=(cj5*r10);
IkReal x1499=(cj5*r20);
IkReal x1500=((1.0)*x1492);
IkReal x1501=((1.0)*x1493);
evalcond[0]=((((-1.0)*x1499*x1500))+((x1492*x1497))+((r22*x1493)));
evalcond[1]=(((x1493*x1499))+(((-1.0)*x1497*x1501))+((r22*x1492)));
evalcond[2]=((((-1.0)*x1498*x1500))+cj0+((r12*x1493))+((x1492*x1496)));
evalcond[3]=(cj0+((x1493*x1494))+(((-1.0)*x1495*x1501))+((r02*x1492)));
evalcond[4]=(sj0+((r12*x1492))+((x1493*x1498))+(((-1.0)*x1496*x1501)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1494*x1500))+((x1492*x1495))+((r02*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((-3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((-3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1502=IKcos(j0);
IkReal x1503=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.265)*x1502))+(((-0.113)*x1503)));
evalcond[1]=((((-1.0)*py))+(((-0.265)*x1503))+(((0.113)*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1504=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1504;
j4eval[1]=IKsign(x1504);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1505=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1505;
j4eval[1]=IKsign(x1505);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1506=cj5*cj5;
IkReal x1507=(r11*r21);
IkReal x1508=((1.0)*r20);
IkReal x1509=(cj5*sj5);
IkReal x1510=((((-1.0)*x1507))+(((-1.0)*r12*r22))+((x1506*x1507))+((r11*r20*x1509))+((r10*r21*x1509))+(((-1.0)*r10*x1506*x1508)));
j4eval[0]=x1510;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1508)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1511=cj5*cj5;
IkReal x1512=(r11*r21);
IkReal x1513=((1.0)*r20);
IkReal x1514=(cj5*sj5);
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
CheckValue<IkReal> x1516=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1512))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1511*x1513))+((r11*r20*x1514))+((r10*r21*x1514))+((x1511*x1512)))),-1);
if(!x1516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1515.value)+(((1.5707963267949)*(x1516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1517=IKcos(j4);
IkReal x1518=IKsin(j4);
IkReal x1519=((1.0)*sj0);
IkReal x1520=(cj5*r00);
IkReal x1521=(cj5*r10);
IkReal x1522=(cj5*r20);
IkReal x1523=((1.0)*x1517);
IkReal x1524=(sj5*x1517);
IkReal x1525=((1.0)*sj5*x1518);
evalcond[0]=(((r21*x1524))+((r22*x1518))+(((-1.0)*x1522*x1523)));
evalcond[1]=(((x1518*x1522))+((r22*x1517))+(((-1.0)*r21*x1525)));
evalcond[2]=(cj0+((r12*x1518))+((r11*x1524))+(((-1.0)*x1521*x1523)));
evalcond[3]=((((-1.0)*x1519))+((r01*x1524))+((r02*x1518))+(((-1.0)*x1520*x1523)));
evalcond[4]=((((-1.0)*r01*x1525))+((x1518*x1520))+((r02*x1517))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1519))+(((-1.0)*r11*x1525))+((r12*x1517))+((x1518*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1526 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1526.valid){
continue;
}
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1526.value)+(((1.5707963267949)*(x1527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1528=IKcos(j4);
IkReal x1529=IKsin(j4);
IkReal x1530=((1.0)*sj0);
IkReal x1531=(cj5*r00);
IkReal x1532=(cj5*r10);
IkReal x1533=(cj5*r20);
IkReal x1534=((1.0)*x1528);
IkReal x1535=(sj5*x1528);
IkReal x1536=((1.0)*sj5*x1529);
evalcond[0]=(((r21*x1535))+(((-1.0)*x1533*x1534))+((r22*x1529)));
evalcond[1]=(((x1529*x1533))+((r22*x1528))+(((-1.0)*r21*x1536)));
evalcond[2]=(cj0+((r12*x1529))+((r11*x1535))+(((-1.0)*x1532*x1534)));
evalcond[3]=((((-1.0)*x1531*x1534))+(((-1.0)*x1530))+((r01*x1535))+((r02*x1529)));
evalcond[4]=((((-1.0)*r01*x1536))+((x1529*x1531))+((r02*x1528))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1536))+((r12*x1528))+(((-1.0)*x1530))+((x1529*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1537.value)+(((1.5707963267949)*(x1538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1539=IKcos(j4);
IkReal x1540=IKsin(j4);
IkReal x1541=((1.0)*sj0);
IkReal x1542=(cj5*r00);
IkReal x1543=(cj5*r10);
IkReal x1544=(cj5*r20);
IkReal x1545=((1.0)*x1539);
IkReal x1546=(sj5*x1539);
IkReal x1547=((1.0)*sj5*x1540);
evalcond[0]=(((r21*x1546))+((r22*x1540))+(((-1.0)*x1544*x1545)));
evalcond[1]=((((-1.0)*r21*x1547))+((x1540*x1544))+((r22*x1539)));
evalcond[2]=((((-1.0)*x1543*x1545))+cj0+((r12*x1540))+((r11*x1546)));
evalcond[3]=(((r02*x1540))+(((-1.0)*x1542*x1545))+(((-1.0)*x1541))+((r01*x1546)));
evalcond[4]=((((-1.0)*r01*x1547))+((x1540*x1542))+((r02*x1539))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1539))+((x1540*x1543))+(((-1.0)*r11*x1547))+(((-1.0)*x1541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1548=(cj1*sj2);
IkReal x1549=((1000.0)*px);
IkReal x1550=(cj2*sj1);
IkReal x1551=(cj5*r01);
IkReal x1552=((265.0)*sj1);
IkReal x1553=(r00*sj5);
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(((((113.0)*x1550))+(((113.0)*x1548))),-1);
if(!x1554.valid){
continue;
}
CheckValue<IkReal> x1555=IKPowWithIntegerCheck((x1548+x1550),-1);
if(!x1555.valid){
continue;
}
if( IKabs(((x1554.value)*(((((-1.0)*x1548*x1549))+(((-1.0)*x1549*x1550))+(((-1.0)*x1552*x1553))+(((-333.0)*x1548*x1553))+(((-333.0)*x1548*x1551))+(((-1.0)*x1551*x1552))+(((-333.0)*x1550*x1551))+(((-333.0)*x1550*x1553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1555.value)*(((((-1.0)*x1553))+(((-1.0)*x1551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1554.value)*(((((-1.0)*x1548*x1549))+(((-1.0)*x1549*x1550))+(((-1.0)*x1552*x1553))+(((-333.0)*x1548*x1553))+(((-333.0)*x1548*x1551))+(((-1.0)*x1551*x1552))+(((-333.0)*x1550*x1551))+(((-333.0)*x1550*x1553))))))+IKsqr(((x1555.value)*(((((-1.0)*x1553))+(((-1.0)*x1551))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1554.value)*(((((-1.0)*x1548*x1549))+(((-1.0)*x1549*x1550))+(((-1.0)*x1552*x1553))+(((-333.0)*x1548*x1553))+(((-333.0)*x1548*x1551))+(((-1.0)*x1551*x1552))+(((-333.0)*x1550*x1551))+(((-333.0)*x1550*x1553))))), ((x1555.value)*(((((-1.0)*x1553))+(((-1.0)*x1551))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1556=IKcos(j0);
IkReal x1557=IKsin(j0);
IkReal x1558=(cj1*sj2);
IkReal x1559=(r00*sj5);
IkReal x1560=(cj5*r01);
IkReal x1561=(cj2*sj1);
IkReal x1562=(cj5*r11);
IkReal x1563=(r10*sj5);
IkReal x1564=(sj1*x1557);
IkReal x1565=((0.238)*x1556);
evalcond[0]=(((x1556*x1561))+((x1556*x1558))+x1560+x1559);
evalcond[1]=(((x1557*x1558))+x1562+x1563+((x1557*x1561)));
evalcond[2]=((((-0.095)*x1560))+(((0.265)*sj1*x1556))+(((-0.095)*x1559))+(((-1.0)*px))+((x1561*x1565))+(((-0.113)*x1557))+((x1558*x1565)));
evalcond[3]=((((0.265)*x1564))+(((-0.095)*x1563))+(((-0.095)*x1562))+(((-1.0)*py))+(((0.238)*x1557*x1561))+(((0.238)*x1557*x1558))+(((0.113)*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1566=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1566;
j4eval[1]=IKsign(x1566);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1567=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1567;
j4eval[1]=IKsign(x1567);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1568=((1.0)*sj0);
IkReal x1569=((1.0)*cj0);
IkReal x1570=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1570;
j4eval[1]=((IKabs(((((-1.0)*r02*x1569))+(((-1.0)*r12*x1568)))))+(IKabs(((((-1.0)*cj5*r10*x1568))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x1569))))));
j4eval[2]=IKsign(x1570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1571=((-1.0)*r20);
IkReal x1573 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1573)==0){
continue;
}
IkReal x1572=pow(x1573,-0.5);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1571),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1574.value));
IkReal gconst79=(r21*x1572);
IkReal gconst80=(x1571*x1572);
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1576=((-1.0)*r20);
IkReal x1577=x1572;
CheckValue<IkReal> x1579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1576),IKFAST_ATAN2_MAGTHRESH);
if(!x1579.valid){
continue;
}
IkReal x1578=((-1.0)*(x1579.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1578;
IkReal gconst78=x1578;
IkReal gconst79=(r21*x1577);
IkReal gconst80=(x1576*x1577);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1580=((-1.0)*r20);
IkReal x1581=x1572;
CheckValue<IkReal> x1583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1580),IKFAST_ATAN2_MAGTHRESH);
if(!x1583.valid){
continue;
}
IkReal x1582=((-1.0)*(x1583.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1582;
IkReal gconst78=x1582;
IkReal gconst79=(r21*x1581);
IkReal gconst80=(x1580*x1581);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1584=((-1.0)*r20);
IkReal x1585=x1572;
CheckValue<IkReal> x1587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1584),IKFAST_ATAN2_MAGTHRESH);
if(!x1587.valid){
continue;
}
IkReal x1586=((-1.0)*(x1587.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1586;
IkReal gconst78=x1586;
IkReal gconst79=(r21*x1585);
IkReal gconst80=(x1584*x1585);
IkReal x1588=r22*r22;
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1588))),-1);
if(!x1591.valid){
continue;
}
IkReal x1589=x1591.value;
IkReal x1590=(((x1589*(r21*r21*r21*r21)))+((x1589*(r20*r20*r20*r20)))+x1588+(((2.0)*x1589*(r20*r20)*(r21*r21))));
j4eval[0]=x1590;
j4eval[1]=IKsign(x1590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1592=(gconst80*r20);
IkReal x1593=(cj1*sj2);
IkReal x1594=(cj2*sj1);
IkReal x1595=((1.0)*gconst79*r21);
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal((((x1592*x1594))+((x1592*x1593))+(((-1.0)*x1593*x1595))+(((-1.0)*x1594*x1595)))),IkReal((((r22*x1594))+((r22*x1593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x1592))+(((gconst79*gconst79)*(r21*r21)))+(x1592*x1592))),-1);
if(!x1597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1596.value)+(((1.5707963267949)*(x1597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1598=IKcos(j4);
IkReal x1599=IKsin(j4);
IkReal x1600=(cj1*cj2);
IkReal x1601=((1.0)*sj1);
IkReal x1602=(gconst80*x1599);
IkReal x1603=(gconst79*x1598);
IkReal x1604=((1.0)*gconst80*x1598);
IkReal x1605=((1.0)*gconst79*x1599);
evalcond[0]=((((-1.0)*r20*x1604))+((r21*x1603))+((r22*x1599)));
evalcond[1]=(cj0+((r12*x1599))+((r11*x1603))+(((-1.0)*r10*x1604)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1603))+(((-1.0)*r00*x1604))+((r02*x1599)));
evalcond[3]=((((-1.0)*r21*x1605))+(((-1.0)*cj1*sj2))+((r22*x1598))+(((-1.0)*cj2*x1601))+((r20*x1602)));
evalcond[4]=(((r00*x1602))+((cj0*x1600))+(((-1.0)*r01*x1605))+((r02*x1598))+(((-1.0)*cj0*sj2*x1601)));
evalcond[5]=(((r12*x1598))+((sj0*x1600))+(((-1.0)*sj0*sj2*x1601))+((r10*x1602))+(((-1.0)*r11*x1605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1606 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1606.value)+(((1.5707963267949)*(x1607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1608=IKcos(j4);
IkReal x1609=IKsin(j4);
IkReal x1610=(cj1*cj2);
IkReal x1611=((1.0)*sj1);
IkReal x1612=(gconst80*x1609);
IkReal x1613=(gconst79*x1608);
IkReal x1614=((1.0)*gconst80*x1608);
IkReal x1615=((1.0)*gconst79*x1609);
evalcond[0]=((((-1.0)*r20*x1614))+((r21*x1613))+((r22*x1609)));
evalcond[1]=(cj0+((r11*x1613))+((r12*x1609))+(((-1.0)*r10*x1614)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1613))+(((-1.0)*r00*x1614))+((r02*x1609)));
evalcond[3]=(((r20*x1612))+(((-1.0)*r21*x1615))+(((-1.0)*cj1*sj2))+((r22*x1608))+(((-1.0)*cj2*x1611)));
evalcond[4]=(((r00*x1612))+((cj0*x1610))+(((-1.0)*r01*x1615))+(((-1.0)*cj0*sj2*x1611))+((r02*x1608)));
evalcond[5]=((((-1.0)*r11*x1615))+((sj0*x1610))+(((-1.0)*sj0*sj2*x1611))+((r12*x1608))+((r10*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1616.valid){
continue;
}
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1616.value)))+(x1617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1618=IKcos(j4);
IkReal x1619=IKsin(j4);
IkReal x1620=(cj1*cj2);
IkReal x1621=((1.0)*sj1);
IkReal x1622=(gconst80*x1619);
IkReal x1623=(gconst79*x1618);
IkReal x1624=((1.0)*gconst80*x1618);
IkReal x1625=((1.0)*gconst79*x1619);
evalcond[0]=((((-1.0)*r20*x1624))+((r21*x1623))+((r22*x1619)));
evalcond[1]=(cj0+((r12*x1619))+((r11*x1623))+(((-1.0)*r10*x1624)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1623))+(((-1.0)*r00*x1624))+((r02*x1619)));
evalcond[3]=((((-1.0)*cj2*x1621))+((r20*x1622))+(((-1.0)*r21*x1625))+(((-1.0)*cj1*sj2))+((r22*x1618)));
evalcond[4]=(((r00*x1622))+((cj0*x1620))+(((-1.0)*r01*x1625))+(((-1.0)*cj0*sj2*x1621))+((r02*x1618)));
evalcond[5]=((((-1.0)*r11*x1625))+((sj0*x1620))+((r12*x1618))+(((-1.0)*sj0*sj2*x1621))+((r10*x1622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1626=((-1.0)*r21);
IkReal x1628 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1628)==0){
continue;
}
IkReal x1627=pow(x1628,-0.5);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(x1626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1629.value))));
IkReal gconst82=(x1626*x1627);
IkReal gconst83=((1.0)*r20*x1627);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1630.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1631=((-1.0)*r21);
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(x1631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
IkReal x1632=((1.0)*(x1634.value));
IkReal x1633=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1632)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1632)));
IkReal gconst82=(x1631*x1633);
IkReal gconst83=((1.0)*r20*x1633);
IkReal x1635=r22*r22;
IkReal x1636=((1.0)*x1635);
CheckValue<IkReal> x1640=IKPowWithIntegerCheck(((-1.0)+x1635),-1);
if(!x1640.valid){
continue;
}
IkReal x1637=x1640.value;
if((((1.0)+(((-1.0)*x1636)))) < -0.00001)
continue;
IkReal x1638=IKsqrt(((1.0)+(((-1.0)*x1636))));
IkReal x1639=(cj0*x1637*x1638);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1639+(((-1.0)*x1636*x1639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1641=((-1.0)*r21);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal(x1641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
IkReal x1642=((1.0)*(x1644.value));
IkReal x1643=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1642)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1642)));
IkReal gconst82=(x1641*x1643);
IkReal gconst83=((1.0)*r20*x1643);
IkReal x1645=r22*r22;
IkReal x1646=((1.0)*x1645);
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(((-1.0)+x1645),-1);
if(!x1650.valid){
continue;
}
IkReal x1647=x1650.value;
if((((1.0)+(((-1.0)*x1646)))) < -0.00001)
continue;
IkReal x1648=IKsqrt(((1.0)+(((-1.0)*x1646))));
IkReal x1649=(sj0*x1647*x1648);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1646*x1649))+x1649))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1651=((-1.0)*r21);
CheckValue<IkReal> x1654 = IKatan2WithCheck(IkReal(x1651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1654.valid){
continue;
}
IkReal x1652=((1.0)*(x1654.value));
IkReal x1653=x1627;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1652)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1652)));
IkReal gconst82=(x1651*x1653);
IkReal gconst83=((1.0)*r20*x1653);
IkReal x1655=r22*r22;
IkReal x1656=((1.0)*r12*sj0);
IkReal x1657=((1.0)*cj0*r02);
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(((-1.0)+x1655),-1);
if(!x1661.valid){
continue;
}
IkReal x1658=x1661.value;
if((((1.0)+(((-1.0)*x1655)))) < -0.00001)
continue;
IkReal x1659=IKsqrt(((1.0)+(((-1.0)*x1655))));
IkReal x1660=(r22*x1658*x1659);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1656*x1660))+(((-1.0)*x1657*x1660)))))+(IKabs(((((-1.0)*x1657))+(((-1.0)*x1656))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1662=((1.0)*sj0);
IkReal x1663=((1.0)*cj0);
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1664.valid){
continue;
}
CheckValue<IkReal> x1665 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r00*x1663))+((gconst82*r11*sj0))+(((-1.0)*gconst83*r10*x1662))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r12*x1662))+(((-1.0)*r02*x1663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1664.value)))+(x1665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1666=IKcos(j4);
IkReal x1667=IKsin(j4);
IkReal x1668=(cj1*cj2);
IkReal x1669=((1.0)*sj1);
IkReal x1670=(gconst82*x1666);
IkReal x1671=(gconst83*x1667);
IkReal x1672=((1.0)*gconst82*x1667);
IkReal x1673=((1.0)*gconst83*x1666);
evalcond[0]=(((r21*x1670))+(((-1.0)*r20*x1673))+((r22*x1667)));
evalcond[1]=(cj0+((r12*x1667))+(((-1.0)*r10*x1673))+((r11*x1670)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1667))+(((-1.0)*r00*x1673))+((r01*x1670)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x1671))+(((-1.0)*cj2*x1669))+(((-1.0)*r21*x1672))+((r22*x1666)));
evalcond[4]=(((r00*x1671))+((r02*x1666))+(((-1.0)*cj0*sj2*x1669))+((cj0*x1668))+(((-1.0)*r01*x1672)));
evalcond[5]=(((sj0*x1668))+((r12*x1666))+(((-1.0)*r11*x1672))+((r10*x1671))+(((-1.0)*sj0*sj2*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1674.value)))+(x1675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKcos(j4);
IkReal x1677=IKsin(j4);
IkReal x1678=(cj1*cj2);
IkReal x1679=((1.0)*sj1);
IkReal x1680=(gconst82*x1676);
IkReal x1681=(gconst83*x1677);
IkReal x1682=((1.0)*gconst82*x1677);
IkReal x1683=((1.0)*gconst83*x1676);
evalcond[0]=((((-1.0)*r20*x1683))+((r21*x1680))+((r22*x1677)));
evalcond[1]=(((r11*x1680))+cj0+(((-1.0)*r10*x1683))+((r12*x1677)));
evalcond[2]=(((r02*x1677))+(((-1.0)*sj0))+((r01*x1680))+(((-1.0)*r00*x1683)));
evalcond[3]=((((-1.0)*r21*x1682))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1679))+((r22*x1676))+((r20*x1681)));
evalcond[4]=(((cj0*x1678))+(((-1.0)*r01*x1682))+((r02*x1676))+((r00*x1681))+(((-1.0)*cj0*sj2*x1679)));
evalcond[5]=(((sj0*x1678))+(((-1.0)*r11*x1682))+((r10*x1681))+(((-1.0)*sj0*sj2*x1679))+((r12*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1684=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1684.valid){
continue;
}
CheckValue<IkReal> x1685 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1684.value)))+(x1685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1686=IKcos(j4);
IkReal x1687=IKsin(j4);
IkReal x1688=(cj1*cj2);
IkReal x1689=((1.0)*sj1);
IkReal x1690=(gconst82*x1686);
IkReal x1691=(gconst83*x1687);
IkReal x1692=((1.0)*gconst82*x1687);
IkReal x1693=((1.0)*gconst83*x1686);
evalcond[0]=(((r21*x1690))+(((-1.0)*r20*x1693))+((r22*x1687)));
evalcond[1]=(cj0+((r11*x1690))+((r12*x1687))+(((-1.0)*r10*x1693)));
evalcond[2]=(((r01*x1690))+(((-1.0)*sj0))+((r02*x1687))+(((-1.0)*r00*x1693)));
evalcond[3]=(((r20*x1691))+(((-1.0)*r21*x1692))+((r22*x1686))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1689)));
evalcond[4]=(((r00*x1691))+((r02*x1686))+(((-1.0)*cj0*sj2*x1689))+((cj0*x1688))+(((-1.0)*r01*x1692)));
evalcond[5]=((((-1.0)*sj0*sj2*x1689))+((r10*x1691))+(((-1.0)*r11*x1692))+((r12*x1686))+((sj0*x1688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1695 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1695)==0){
continue;
}
IkReal x1694=pow(x1695,-0.5);
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1696.value));
IkReal gconst85=((-1.0)*r11*x1694);
IkReal gconst86=(r10*x1694);
CheckValue<IkReal> x1697 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
IkReal x1698=((-1.0)*(x1700.value));
IkReal x1699=x1694;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1698;
IkReal gconst84=x1698;
IkReal gconst85=((-1.0)*r11*x1699);
IkReal gconst86=(r10*x1699);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=((1.0)*sj0);
IkReal x1702=((1.0)*gconst86);
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1702)))),-1);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r10*x1701))+(((-1.0)*cj0*r00*x1702))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1703.value)))+(x1704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKcos(j4);
IkReal x1706=IKsin(j4);
IkReal x1707=(cj1*cj2);
IkReal x1708=((1.0)*sj1);
IkReal x1709=(gconst86*x1706);
IkReal x1710=(gconst85*x1705);
IkReal x1711=((1.0)*gconst85*x1706);
IkReal x1712=((1.0)*gconst86*x1705);
evalcond[0]=(((r22*x1706))+(((-1.0)*r20*x1712))+((r21*x1710)));
evalcond[1]=(((r12*x1706))+cj0+((r11*x1710))+(((-1.0)*r10*x1712)));
evalcond[2]=((((-1.0)*r00*x1712))+(((-1.0)*sj0))+((r02*x1706))+((r01*x1710)));
evalcond[3]=((((-1.0)*cj2*x1708))+((r22*x1705))+(((-1.0)*cj1*sj2))+((r20*x1709))+(((-1.0)*r21*x1711)));
evalcond[4]=((((-1.0)*cj0*sj2*x1708))+((r02*x1705))+((cj0*x1707))+((r00*x1709))+(((-1.0)*r01*x1711)));
evalcond[5]=(((r12*x1705))+(((-1.0)*sj0*sj2*x1708))+((r10*x1709))+(((-1.0)*r11*x1711))+((sj0*x1707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1713.value)))+(x1714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1715=IKcos(j4);
IkReal x1716=IKsin(j4);
IkReal x1717=(cj1*cj2);
IkReal x1718=((1.0)*sj1);
IkReal x1719=(gconst86*x1716);
IkReal x1720=(gconst85*x1715);
IkReal x1721=((1.0)*gconst85*x1716);
IkReal x1722=((1.0)*gconst86*x1715);
evalcond[0]=(((r22*x1716))+((r21*x1720))+(((-1.0)*r20*x1722)));
evalcond[1]=(cj0+(((-1.0)*r10*x1722))+((r12*x1716))+((r11*x1720)));
evalcond[2]=(((r02*x1716))+((r01*x1720))+(((-1.0)*sj0))+(((-1.0)*r00*x1722)));
evalcond[3]=(((r22*x1715))+((r20*x1719))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1721))+(((-1.0)*cj2*x1718)));
evalcond[4]=(((r02*x1715))+(((-1.0)*cj0*sj2*x1718))+(((-1.0)*r01*x1721))+((cj0*x1717))+((r00*x1719)));
evalcond[5]=((((-1.0)*r11*x1721))+((r12*x1715))+(((-1.0)*sj0*sj2*x1718))+((r10*x1719))+((sj0*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1724 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1724)==0){
continue;
}
IkReal x1723=pow(x1724,-0.5);
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1725.value))));
IkReal gconst88=((1.0)*r11*x1723);
IkReal gconst89=((-1.0)*r10*x1723);
CheckValue<IkReal> x1726 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1726.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1726.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
IkReal x1727=((1.0)*(x1729.value));
IkReal x1728=x1723;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1727)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1727)));
IkReal gconst88=((1.0)*r11*x1728);
IkReal gconst89=((-1.0)*r10*x1728);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
IkReal x1730=((1.0)*(x1732.value));
IkReal x1731=x1723;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1730)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1730)));
IkReal gconst88=((1.0)*r11*x1731);
IkReal gconst89=((-1.0)*r10*x1731);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
IkReal x1733=((1.0)*(x1735.value));
IkReal x1734=x1723;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1733)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1733)));
IkReal gconst88=((1.0)*r11*x1734);
IkReal gconst89=((-1.0)*r10*x1734);
IkReal x1736=r12*r12;
IkReal x1737=((1.0)*sj0);
IkReal x1738=(cj0*r02);
IkReal x1739=x1723;
j4eval[0]=((IKabs(((((-1.0)*x1737*x1739))+((sj0*x1736*x1739))+((r12*x1738*x1739)))))+(IKabs(((((-1.0)*r12*x1737))+(((-1.0)*x1738))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1740=((1.0)*sj0);
IkReal x1741=((1.0)*gconst89);
CheckValue<IkReal> x1742=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1741)))),-1);
if(!x1742.valid){
continue;
}
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1741))+(((-1.0)*gconst89*r10*x1740)))),IkReal(((((-1.0)*r12*x1740))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1742.value)))+(x1743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1744=IKcos(j4);
IkReal x1745=IKsin(j4);
IkReal x1746=(gconst88*r11);
IkReal x1747=(cj1*cj2);
IkReal x1748=((1.0)*sj1);
IkReal x1749=((1.0)*x1745);
IkReal x1750=(gconst89*x1745);
IkReal x1751=(gconst88*x1744);
IkReal x1752=((1.0)*gconst89*x1744);
evalcond[0]=(((r22*x1745))+((r21*x1751))+(((-1.0)*r20*x1752)));
evalcond[1]=(((r12*x1745))+cj0+((x1744*x1746))+(((-1.0)*r10*x1752)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1745))+(((-1.0)*r00*x1752))+((r01*x1751)));
evalcond[3]=(((r22*x1744))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x1749))+((r20*x1750))+(((-1.0)*cj2*x1748)));
evalcond[4]=((((-1.0)*cj0*sj2*x1748))+((r02*x1744))+(((-1.0)*gconst88*r01*x1749))+((cj0*x1747))+((r00*x1750)));
evalcond[5]=(((r12*x1744))+(((-1.0)*x1746*x1749))+((sj0*x1747))+(((-1.0)*sj0*sj2*x1748))+((r10*x1750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1753 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1753.valid){
continue;
}
CheckValue<IkReal> x1754=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1753.value)+(((1.5707963267949)*(x1754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1755=IKcos(j4);
IkReal x1756=IKsin(j4);
IkReal x1757=(gconst88*r11);
IkReal x1758=(cj1*cj2);
IkReal x1759=((1.0)*sj1);
IkReal x1760=((1.0)*x1756);
IkReal x1761=(gconst89*x1756);
IkReal x1762=(gconst88*x1755);
IkReal x1763=((1.0)*gconst89*x1755);
evalcond[0]=(((r21*x1762))+(((-1.0)*r20*x1763))+((r22*x1756)));
evalcond[1]=(cj0+(((-1.0)*r10*x1763))+((r12*x1756))+((x1755*x1757)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1763))+((r02*x1756))+((r01*x1762)));
evalcond[3]=(((r20*x1761))+((r22*x1755))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1759))+(((-1.0)*gconst88*r21*x1760)));
evalcond[4]=(((r02*x1755))+((r00*x1761))+((cj0*x1758))+(((-1.0)*cj0*sj2*x1759))+(((-1.0)*gconst88*r01*x1760)));
evalcond[5]=(((r10*x1761))+(((-1.0)*x1757*x1760))+((sj0*x1758))+(((-1.0)*sj0*sj2*x1759))+((r12*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1766=IKcos(j4);
IkReal x1767=IKsin(j4);
IkReal x1768=(gconst88*r11);
IkReal x1769=(cj1*cj2);
IkReal x1770=((1.0)*sj1);
IkReal x1771=((1.0)*x1767);
IkReal x1772=(gconst89*x1767);
IkReal x1773=(gconst88*x1766);
IkReal x1774=((1.0)*gconst89*x1766);
evalcond[0]=((((-1.0)*r20*x1774))+((r21*x1773))+((r22*x1767)));
evalcond[1]=(cj0+(((-1.0)*r10*x1774))+((r12*x1767))+((x1766*x1768)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1773))+((r02*x1767))+(((-1.0)*r00*x1774)));
evalcond[3]=((((-1.0)*cj2*x1770))+(((-1.0)*gconst88*r21*x1771))+(((-1.0)*cj1*sj2))+((r20*x1772))+((r22*x1766)));
evalcond[4]=((((-1.0)*cj0*sj2*x1770))+(((-1.0)*gconst88*r01*x1771))+((cj0*x1769))+((r00*x1772))+((r02*x1766)));
evalcond[5]=(((sj0*x1769))+(((-1.0)*sj0*sj2*x1770))+((r12*x1766))+((r10*x1772))+(((-1.0)*x1768*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1775=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1775;
j4eval[1]=IKsign(x1775);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1776=((1.0)*cj5);
IkReal x1777=((((-1.0)*r21*x1776))+(((-1.0)*r20*sj5)));
j4eval[0]=x1777;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1776))))));
j4eval[2]=IKsign(x1777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1778=cj5*cj5;
IkReal x1779=r11*r11;
IkReal x1780=(cj5*r10);
IkReal x1781=(r11*sj5);
IkReal x1782=((((-1.0)*x1779))+(((-1.0)*(r12*r12)))+(((2.0)*x1780*x1781))+(((-1.0)*x1778*(r10*r10)))+((x1778*x1779)));
j4eval[0]=x1782;
j4eval[1]=((IKabs(r12))+(IKabs((x1781+(((-1.0)*x1780))))));
j4eval[2]=IKsign(x1782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1783=cj5*cj5;
IkReal x1784=r11*r11;
IkReal x1785=(cj5*r10);
IkReal x1786=(r11*sj5);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(IKsign((((x1783*x1784))+(((2.0)*x1785*x1786))+(((-1.0)*(r12*r12)))+(((-1.0)*x1784))+(((-1.0)*x1783*(r10*r10))))),-1);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal(r12),IkReal((x1786+(((-1.0)*x1785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1787.value)))+(x1788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKcos(j4);
IkReal x1790=IKsin(j4);
IkReal x1791=(cj5*r00);
IkReal x1792=((1.0)*sj2);
IkReal x1793=((1.0)*x1789);
IkReal x1794=(sj5*x1789);
IkReal x1795=(cj5*x1790);
IkReal x1796=((1.0)*sj5*x1790);
evalcond[0]=(((r21*x1794))+(((-1.0)*cj5*r20*x1793))+((r22*x1790)));
evalcond[1]=(((r02*x1790))+((r01*x1794))+(((-1.0)*x1791*x1793)));
evalcond[2]=(((r10*x1795))+(((-1.0)*r11*x1796))+((r12*x1789)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1793))+((r12*x1790))+((r11*x1794)));
evalcond[4]=((((-1.0)*r01*x1796))+((r02*x1789))+((cj1*cj2))+((x1790*x1791))+(((-1.0)*sj1*x1792)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x1789))+(((-1.0)*cj1*x1792))+(((-1.0)*r21*x1796))+((r20*x1795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1797=((1.0)*cj5);
CheckValue<IkReal> x1798 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1797)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1798.valid){
continue;
}
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1797))+(((-1.0)*r20*sj5)))),-1);
if(!x1799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1798.value)+(((1.5707963267949)*(x1799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1800=IKcos(j4);
IkReal x1801=IKsin(j4);
IkReal x1802=(cj5*r00);
IkReal x1803=((1.0)*sj2);
IkReal x1804=((1.0)*x1800);
IkReal x1805=(sj5*x1800);
IkReal x1806=(cj5*x1801);
IkReal x1807=((1.0)*sj5*x1801);
evalcond[0]=((((-1.0)*cj5*r20*x1804))+((r22*x1801))+((r21*x1805)));
evalcond[1]=((((-1.0)*x1802*x1804))+((r02*x1801))+((r01*x1805)));
evalcond[2]=(((r12*x1800))+((r10*x1806))+(((-1.0)*r11*x1807)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1804))+((r12*x1801))+((r11*x1805)));
evalcond[4]=((((-1.0)*r01*x1807))+((x1801*x1802))+((r02*x1800))+(((-1.0)*sj1*x1803))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*x1807))+(((-1.0)*cj2*sj1))+((r22*x1800))+(((-1.0)*cj1*x1803))+((r20*x1806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1808.value)))+(x1809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1810=IKcos(j4);
IkReal x1811=IKsin(j4);
IkReal x1812=(cj5*r00);
IkReal x1813=((1.0)*sj2);
IkReal x1814=((1.0)*x1810);
IkReal x1815=(sj5*x1810);
IkReal x1816=(cj5*x1811);
IkReal x1817=((1.0)*sj5*x1811);
evalcond[0]=(((r22*x1811))+(((-1.0)*cj5*r20*x1814))+((r21*x1815)));
evalcond[1]=(((r02*x1811))+(((-1.0)*x1812*x1814))+((r01*x1815)));
evalcond[2]=((((-1.0)*r11*x1817))+((r10*x1816))+((r12*x1810)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1814))+((r11*x1815))+((r12*x1811)));
evalcond[4]=(((r02*x1810))+(((-1.0)*sj1*x1813))+(((-1.0)*r01*x1817))+((cj1*cj2))+((x1811*x1812)));
evalcond[5]=(((r22*x1810))+(((-1.0)*cj2*sj1))+((r20*x1816))+(((-1.0)*cj1*x1813))+(((-1.0)*r21*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1818=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1818;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1819=((1.0)*cj5);
IkReal x1820=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1819)));
j4eval[0]=x1820;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x1819)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1821=cj5*cj5;
IkReal x1822=r11*r11;
IkReal x1823=(r11*sj5);
IkReal x1824=(cj5*r10);
IkReal x1825=((r12*r12)+(((-1.0)*x1821*x1822))+x1822+((x1821*(r10*r10)))+(((-2.0)*x1823*x1824)));
j4eval[0]=x1825;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1824))+x1823))));
j4eval[2]=IKsign(x1825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1826=cj5*cj5;
IkReal x1827=r11*r11;
IkReal x1828=(cj5*r10);
IkReal x1829=(r11*sj5);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x1828))+x1829)),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
CheckValue<IkReal> x1831=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x1828*x1829))+((x1826*(r10*r10)))+x1827+(((-1.0)*x1826*x1827)))),-1);
if(!x1831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1830.value)+(((1.5707963267949)*(x1831.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1832=IKcos(j4);
IkReal x1833=IKsin(j4);
IkReal x1834=(cj5*r00);
IkReal x1835=((1.0)*cj1);
IkReal x1836=(cj5*r20);
IkReal x1837=(cj5*r10);
IkReal x1838=((1.0)*x1832);
IkReal x1839=(sj5*x1832);
IkReal x1840=((1.0)*sj5*x1833);
evalcond[0]=((((-1.0)*x1836*x1838))+((r22*x1833))+((r21*x1839)));
evalcond[1]=(((r01*x1839))+(((-1.0)*x1834*x1838))+((r02*x1833)));
evalcond[2]=((((-1.0)*r11*x1840))+((r12*x1832))+((x1833*x1837)));
evalcond[3]=((-1.0)+(((-1.0)*x1837*x1838))+((r11*x1839))+((r12*x1833)));
evalcond[4]=((((-1.0)*r01*x1840))+((sj1*sj2))+((r02*x1832))+((x1833*x1834))+(((-1.0)*cj2*x1835)));
evalcond[5]=(((r22*x1832))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x1835))+((x1833*x1836))+(((-1.0)*r21*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1841=((1.0)*cj5);
CheckValue<IkReal> x1842 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x1841)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1842.valid){
continue;
}
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1841)))),-1);
if(!x1843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1842.value)+(((1.5707963267949)*(x1843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1844=IKcos(j4);
IkReal x1845=IKsin(j4);
IkReal x1846=(cj5*r00);
IkReal x1847=((1.0)*cj1);
IkReal x1848=(cj5*r20);
IkReal x1849=(cj5*r10);
IkReal x1850=((1.0)*x1844);
IkReal x1851=(sj5*x1844);
IkReal x1852=((1.0)*sj5*x1845);
evalcond[0]=(((r22*x1845))+(((-1.0)*x1848*x1850))+((r21*x1851)));
evalcond[1]=(((r01*x1851))+((r02*x1845))+(((-1.0)*x1846*x1850)));
evalcond[2]=(((x1845*x1849))+(((-1.0)*r11*x1852))+((r12*x1844)));
evalcond[3]=((-1.0)+(((-1.0)*x1849*x1850))+((r11*x1851))+((r12*x1845)));
evalcond[4]=(((x1845*x1846))+((r02*x1844))+((sj1*sj2))+(((-1.0)*cj2*x1847))+(((-1.0)*r01*x1852)));
evalcond[5]=(((r22*x1844))+((x1845*x1848))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x1847))+(((-1.0)*r21*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1853.value)))+(x1854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1855=IKcos(j4);
IkReal x1856=IKsin(j4);
IkReal x1857=(cj5*r00);
IkReal x1858=((1.0)*cj1);
IkReal x1859=(cj5*r20);
IkReal x1860=(cj5*r10);
IkReal x1861=((1.0)*x1855);
IkReal x1862=(sj5*x1855);
IkReal x1863=((1.0)*sj5*x1856);
evalcond[0]=(((r22*x1856))+(((-1.0)*x1859*x1861))+((r21*x1862)));
evalcond[1]=(((r02*x1856))+((r01*x1862))+(((-1.0)*x1857*x1861)));
evalcond[2]=((((-1.0)*r11*x1863))+((x1856*x1860))+((r12*x1855)));
evalcond[3]=((-1.0)+((r11*x1862))+(((-1.0)*x1860*x1861))+((r12*x1856)));
evalcond[4]=((((-1.0)*cj2*x1858))+((sj1*sj2))+((x1856*x1857))+((r02*x1855))+(((-1.0)*r01*x1863)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x1856*x1859))+((r22*x1855))+(((-1.0)*r21*x1863))+(((-1.0)*sj2*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1865 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1865)==0){
continue;
}
IkReal x1864=pow(x1865,-0.5);
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1866.value));
IkReal gconst91=((-1.0)*r01*x1864);
IkReal gconst92=(r00*x1864);
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1867.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
IkReal x1868=((-1.0)*(x1870.value));
IkReal x1869=x1864;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1868;
IkReal gconst90=x1868;
IkReal gconst91=((-1.0)*r01*x1869);
IkReal gconst92=(r00*x1869);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1871=((1.0)*sj0);
IkReal x1872=((1.0)*gconst92);
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x1872)))),-1);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x1872))+(((-1.0)*gconst92*r10*x1871))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1873.value)))+(x1874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1875=IKcos(j4);
IkReal x1876=IKsin(j4);
IkReal x1877=(cj1*cj2);
IkReal x1878=(gconst92*r00);
IkReal x1879=((1.0)*sj1);
IkReal x1880=(gconst92*r10);
IkReal x1881=(gconst92*r20);
IkReal x1882=(gconst91*x1875);
IkReal x1883=((1.0)*x1875);
IkReal x1884=((1.0)*gconst91*x1876);
evalcond[0]=(((r21*x1882))+((r22*x1876))+(((-1.0)*x1881*x1883)));
evalcond[1]=((((-1.0)*x1880*x1883))+cj0+((r12*x1876))+((r11*x1882)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1876))+(((-1.0)*x1878*x1883))+((r01*x1882)));
evalcond[3]=(((r22*x1875))+((x1876*x1881))+(((-1.0)*cj2*x1879))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1884)));
evalcond[4]=(((x1876*x1878))+((r02*x1875))+(((-1.0)*cj0*sj2*x1879))+(((-1.0)*r01*x1884))+((cj0*x1877)));
evalcond[5]=(((x1876*x1880))+(((-1.0)*r11*x1884))+(((-1.0)*sj0*sj2*x1879))+((sj0*x1877))+((r12*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
CheckValue<IkReal> x1886=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x1886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1885.value)+(((1.5707963267949)*(x1886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1887=IKcos(j4);
IkReal x1888=IKsin(j4);
IkReal x1889=(cj1*cj2);
IkReal x1890=(gconst92*r00);
IkReal x1891=((1.0)*sj1);
IkReal x1892=(gconst92*r10);
IkReal x1893=(gconst92*r20);
IkReal x1894=(gconst91*x1887);
IkReal x1895=((1.0)*x1887);
IkReal x1896=((1.0)*gconst91*x1888);
evalcond[0]=((((-1.0)*x1893*x1895))+((r22*x1888))+((r21*x1894)));
evalcond[1]=((((-1.0)*x1892*x1895))+((r12*x1888))+cj0+((r11*x1894)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1894))+(((-1.0)*x1890*x1895))+((r02*x1888)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x1888*x1893))+(((-1.0)*r21*x1896))+(((-1.0)*cj2*x1891))+((r22*x1887)));
evalcond[4]=(((x1888*x1890))+(((-1.0)*r01*x1896))+(((-1.0)*cj0*sj2*x1891))+((cj0*x1889))+((r02*x1887)));
evalcond[5]=(((r12*x1887))+(((-1.0)*sj0*sj2*x1891))+((x1888*x1892))+(((-1.0)*r11*x1896))+((sj0*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1898 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1898)==0){
continue;
}
IkReal x1897=pow(x1898,-0.5);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1899.value))));
IkReal gconst94=((1.0)*r01*x1897);
IkReal gconst95=((-1.0)*r00*x1897);
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1900.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x1903 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1903.valid){
continue;
}
IkReal x1901=((1.0)*(x1903.value));
IkReal x1902=x1897;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1901)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1901)));
IkReal gconst94=((1.0)*r01*x1902);
IkReal gconst95=((-1.0)*r00*x1902);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
IkReal x1904=((1.0)*(x1906.value));
IkReal x1905=x1897;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1904)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1904)));
IkReal gconst94=((1.0)*r01*x1905);
IkReal gconst95=((-1.0)*r00*x1905);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
IkReal x1907=((1.0)*(x1909.value));
IkReal x1908=x1897;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1907)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1907)));
IkReal gconst94=((1.0)*r01*x1908);
IkReal gconst95=((-1.0)*r00*x1908);
IkReal x1910=r02*r02;
IkReal x1911=(r12*sj0);
IkReal x1912=((1.0)*cj0);
IkReal x1913=x1897;
j4eval[0]=((IKabs((((cj0*x1910*x1913))+(((-1.0)*x1912*x1913))+((r02*x1911*x1913)))))+(IKabs(((((-1.0)*r02*x1912))+(((-1.0)*x1911))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1914=((1.0)*sj0);
IkReal x1915=((1.0)*gconst95);
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x1915))+((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*gconst95*r10*x1914)))),IkReal(((((-1.0)*r12*x1914))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
CheckValue<IkReal> x1917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1915))+(((-1.0)*gconst94*r20)))),-1);
if(!x1917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1916.value)+(((1.5707963267949)*(x1917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1918=IKcos(j4);
IkReal x1919=IKsin(j4);
IkReal x1920=(cj1*cj2);
IkReal x1921=((1.0)*sj1);
IkReal x1922=(gconst95*x1919);
IkReal x1923=(gconst94*x1918);
IkReal x1924=((1.0)*gconst95*x1918);
IkReal x1925=((1.0)*gconst94*x1919);
evalcond[0]=(((r22*x1919))+(((-1.0)*r20*x1924))+((r21*x1923)));
evalcond[1]=(cj0+((r12*x1919))+((r11*x1923))+(((-1.0)*r10*x1924)));
evalcond[2]=(((r01*x1923))+(((-1.0)*sj0))+(((-1.0)*r00*x1924))+((r02*x1919)));
evalcond[3]=((((-1.0)*r21*x1925))+((r22*x1918))+(((-1.0)*cj1*sj2))+((r20*x1922))+(((-1.0)*cj2*x1921)));
evalcond[4]=(((r00*x1922))+(((-1.0)*r01*x1925))+((cj0*x1920))+(((-1.0)*cj0*sj2*x1921))+((r02*x1918)));
evalcond[5]=((((-1.0)*r11*x1925))+(((-1.0)*sj0*sj2*x1921))+((r12*x1918))+((r10*x1922))+((sj0*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1926=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x1926.valid){
continue;
}
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1926.value)))+(x1927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1928=IKcos(j4);
IkReal x1929=IKsin(j4);
IkReal x1930=(cj1*cj2);
IkReal x1931=((1.0)*sj1);
IkReal x1932=(gconst95*x1929);
IkReal x1933=(gconst94*x1928);
IkReal x1934=((1.0)*gconst95*x1928);
IkReal x1935=((1.0)*gconst94*x1929);
evalcond[0]=(((r22*x1929))+(((-1.0)*r20*x1934))+((r21*x1933)));
evalcond[1]=(cj0+(((-1.0)*r10*x1934))+((r11*x1933))+((r12*x1929)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1933))+((r02*x1929))+(((-1.0)*r00*x1934)));
evalcond[3]=(((r22*x1928))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1935))+(((-1.0)*cj2*x1931))+((r20*x1932)));
evalcond[4]=((((-1.0)*r01*x1935))+((r00*x1932))+(((-1.0)*cj0*sj2*x1931))+((r02*x1928))+((cj0*x1930)));
evalcond[5]=(((sj0*x1930))+(((-1.0)*r11*x1935))+(((-1.0)*sj0*sj2*x1931))+((r10*x1932))+((r12*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1936 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1936.valid){
continue;
}
CheckValue<IkReal> x1937=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x1937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1936.value)+(((1.5707963267949)*(x1937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1938=IKcos(j4);
IkReal x1939=IKsin(j4);
IkReal x1940=(cj1*cj2);
IkReal x1941=((1.0)*sj1);
IkReal x1942=(gconst95*x1939);
IkReal x1943=(gconst94*x1938);
IkReal x1944=((1.0)*gconst95*x1938);
IkReal x1945=((1.0)*gconst94*x1939);
evalcond[0]=(((r22*x1939))+((r21*x1943))+(((-1.0)*r20*x1944)));
evalcond[1]=(cj0+((r11*x1943))+((r12*x1939))+(((-1.0)*r10*x1944)));
evalcond[2]=(((r02*x1939))+(((-1.0)*sj0))+(((-1.0)*r00*x1944))+((r01*x1943)));
evalcond[3]=((((-1.0)*r21*x1945))+((r20*x1942))+(((-1.0)*cj1*sj2))+((r22*x1938))+(((-1.0)*cj2*x1941)));
evalcond[4]=(((r02*x1938))+((cj0*x1940))+(((-1.0)*cj0*sj2*x1941))+((r00*x1942))+(((-1.0)*r01*x1945)));
evalcond[5]=((((-1.0)*sj0*sj2*x1941))+((r10*x1942))+((r12*x1938))+((sj0*x1940))+(((-1.0)*r11*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1946=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1946;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1947=((1.0)*cj5);
IkReal x1948=((((-1.0)*r21*x1947))+(((-1.0)*r20*sj5)));
j4eval[0]=x1948;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x1947))))));
j4eval[2]=IKsign(x1948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1949=cj5*cj5;
IkReal x1950=r01*r01;
IkReal x1951=(cj5*r00);
IkReal x1952=(r01*sj5);
IkReal x1953=(((x1949*(r00*r00)))+(((-2.0)*x1951*x1952))+x1950+(((-1.0)*x1949*x1950))+(r02*r02));
j4eval[0]=x1953;
j4eval[1]=IKsign(x1953);
j4eval[2]=((IKabs(r02))+(IKabs((x1952+(((-1.0)*x1951))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1954=cj5*cj5;
IkReal x1955=r01*r01;
IkReal x1956=(r01*sj5);
IkReal x1957=(cj5*r00);
CheckValue<IkReal> x1958 = IKatan2WithCheck(IkReal(r02),IkReal((x1956+(((-1.0)*x1957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1956*x1957))+(((-1.0)*x1954*x1955))+x1955+((x1954*(r00*r00)))+(r02*r02))),-1);
if(!x1959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1958.value)+(((1.5707963267949)*(x1959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1960=IKcos(j4);
IkReal x1961=IKsin(j4);
IkReal x1962=(cj5*r00);
IkReal x1963=((1.0)*sj2);
IkReal x1964=((1.0)*x1960);
IkReal x1965=(sj5*x1960);
IkReal x1966=(cj5*x1961);
IkReal x1967=((1.0)*sj5*x1961);
evalcond[0]=((((-1.0)*cj5*r20*x1964))+((r21*x1965))+((r22*x1961)));
evalcond[1]=(((r12*x1961))+(((-1.0)*cj5*r10*x1964))+((r11*x1965)));
evalcond[2]=(((r02*x1960))+(((-1.0)*r01*x1967))+((x1961*x1962)));
evalcond[3]=((-1.0)+((r02*x1961))+((r01*x1965))+(((-1.0)*x1962*x1964)));
evalcond[4]=(((r10*x1966))+((r12*x1960))+(((-1.0)*sj1*x1963))+((cj1*cj2))+(((-1.0)*r11*x1967)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x1966))+((r22*x1960))+(((-1.0)*cj1*x1963))+(((-1.0)*r21*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1968=((1.0)*cj5);
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1968))+(((-1.0)*r20*sj5)))),-1);
if(!x1969.valid){
continue;
}
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x1968)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1969.value)))+(x1970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1971=IKcos(j4);
IkReal x1972=IKsin(j4);
IkReal x1973=(cj5*r00);
IkReal x1974=((1.0)*sj2);
IkReal x1975=((1.0)*x1971);
IkReal x1976=(sj5*x1971);
IkReal x1977=(cj5*x1972);
IkReal x1978=((1.0)*sj5*x1972);
evalcond[0]=((((-1.0)*cj5*r20*x1975))+((r21*x1976))+((r22*x1972)));
evalcond[1]=(((r12*x1972))+(((-1.0)*cj5*r10*x1975))+((r11*x1976)));
evalcond[2]=(((r02*x1971))+((x1972*x1973))+(((-1.0)*r01*x1978)));
evalcond[3]=((-1.0)+((r02*x1972))+(((-1.0)*x1973*x1975))+((r01*x1976)));
evalcond[4]=(((r12*x1971))+((r10*x1977))+(((-1.0)*sj1*x1974))+((cj1*cj2))+(((-1.0)*r11*x1978)));
evalcond[5]=(((r20*x1977))+(((-1.0)*cj2*sj1))+((r22*x1971))+(((-1.0)*cj1*x1974))+(((-1.0)*r21*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1979 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1979.value)+(((1.5707963267949)*(x1980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1981=IKcos(j4);
IkReal x1982=IKsin(j4);
IkReal x1983=(cj5*r00);
IkReal x1984=((1.0)*sj2);
IkReal x1985=((1.0)*x1981);
IkReal x1986=(sj5*x1981);
IkReal x1987=(cj5*x1982);
IkReal x1988=((1.0)*sj5*x1982);
evalcond[0]=(((r21*x1986))+((r22*x1982))+(((-1.0)*cj5*r20*x1985)));
evalcond[1]=(((r11*x1986))+((r12*x1982))+(((-1.0)*cj5*r10*x1985)));
evalcond[2]=(((x1982*x1983))+(((-1.0)*r01*x1988))+((r02*x1981)));
evalcond[3]=((-1.0)+(((-1.0)*x1983*x1985))+((r01*x1986))+((r02*x1982)));
evalcond[4]=((((-1.0)*sj1*x1984))+((r10*x1987))+(((-1.0)*r11*x1988))+((r12*x1981))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x1981))+(((-1.0)*cj1*x1984))+(((-1.0)*r21*x1988))+((r20*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1989=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1989;
j4eval[1]=IKsign(x1989);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1990=((1.0)*cj5);
IkReal x1991=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1990)));
j4eval[0]=x1991;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1990))))));
j4eval[2]=IKsign(x1991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1992=cj5*cj5;
IkReal x1993=r01*r01;
IkReal x1994=(r01*sj5);
IkReal x1995=(cj5*r00);
IkReal x1996=((((-1.0)*x1992*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x1994*x1995))+(((-1.0)*x1993))+((x1992*x1993)));
j4eval[0]=x1996;
j4eval[1]=IKsign(x1996);
j4eval[2]=((IKabs(r02))+(IKabs((x1994+(((-1.0)*x1995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1997=cj5*cj5;
IkReal x1998=r01*r01;
IkReal x1999=(r01*sj5);
IkReal x2000=(cj5*r00);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(r02),IkReal((x1999+(((-1.0)*x2000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
CheckValue<IkReal> x2002=IKPowWithIntegerCheck(IKsign(((((2.0)*x1999*x2000))+(((-1.0)*(r02*r02)))+(((-1.0)*x1998))+(((-1.0)*x1997*(r00*r00)))+((x1997*x1998)))),-1);
if(!x2002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2001.value)+(((1.5707963267949)*(x2002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2003=IKcos(j4);
IkReal x2004=IKsin(j4);
IkReal x2005=(cj5*r00);
IkReal x2006=((1.0)*cj1);
IkReal x2007=((1.0)*x2003);
IkReal x2008=(sj5*x2003);
IkReal x2009=(cj5*x2004);
IkReal x2010=((1.0)*sj5*x2004);
evalcond[0]=(((r22*x2004))+((r21*x2008))+(((-1.0)*cj5*r20*x2007)));
evalcond[1]=(((r11*x2008))+((r12*x2004))+(((-1.0)*cj5*r10*x2007)));
evalcond[2]=(((r02*x2003))+((x2004*x2005))+(((-1.0)*r01*x2010)));
evalcond[3]=((1.0)+(((-1.0)*x2005*x2007))+((r01*x2008))+((r02*x2004)));
evalcond[4]=(((r12*x2003))+((r10*x2009))+((sj1*sj2))+(((-1.0)*r11*x2010))+(((-1.0)*cj2*x2006)));
evalcond[5]=(((r22*x2003))+(((-1.0)*r21*x2010))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2006))+((r20*x2009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2011=((1.0)*cj5);
CheckValue<IkReal> x2012 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2011))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2012.valid){
continue;
}
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2011)))),-1);
if(!x2013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2012.value)+(((1.5707963267949)*(x2013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2014=IKcos(j4);
IkReal x2015=IKsin(j4);
IkReal x2016=(cj5*r00);
IkReal x2017=((1.0)*cj1);
IkReal x2018=((1.0)*x2014);
IkReal x2019=(sj5*x2014);
IkReal x2020=(cj5*x2015);
IkReal x2021=((1.0)*sj5*x2015);
evalcond[0]=(((r22*x2015))+((r21*x2019))+(((-1.0)*cj5*r20*x2018)));
evalcond[1]=((((-1.0)*cj5*r10*x2018))+((r12*x2015))+((r11*x2019)));
evalcond[2]=(((x2015*x2016))+(((-1.0)*r01*x2021))+((r02*x2014)));
evalcond[3]=((1.0)+((r01*x2019))+(((-1.0)*x2016*x2018))+((r02*x2015)));
evalcond[4]=(((r10*x2020))+(((-1.0)*r11*x2021))+((sj1*sj2))+((r12*x2014))+(((-1.0)*cj2*x2017)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x2014))+(((-1.0)*r21*x2021))+(((-1.0)*sj2*x2017))+((r20*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2022.valid){
continue;
}
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2022.value)))+(x2023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2024=IKcos(j4);
IkReal x2025=IKsin(j4);
IkReal x2026=(cj5*r00);
IkReal x2027=((1.0)*cj1);
IkReal x2028=((1.0)*x2024);
IkReal x2029=(sj5*x2024);
IkReal x2030=(cj5*x2025);
IkReal x2031=((1.0)*sj5*x2025);
evalcond[0]=(((r22*x2025))+(((-1.0)*cj5*r20*x2028))+((r21*x2029)));
evalcond[1]=((((-1.0)*cj5*r10*x2028))+((r11*x2029))+((r12*x2025)));
evalcond[2]=(((x2025*x2026))+(((-1.0)*r01*x2031))+((r02*x2024)));
evalcond[3]=((1.0)+((r01*x2029))+((r02*x2025))+(((-1.0)*x2026*x2028)));
evalcond[4]=((((-1.0)*cj2*x2027))+((r10*x2030))+(((-1.0)*r11*x2031))+((sj1*sj2))+((r12*x2024)));
evalcond[5]=(((r22*x2024))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2027))+((r20*x2030))+(((-1.0)*r21*x2031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2032=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2032);
rxp1_1=(px*r21);
rxp1_2=(r11*x2032);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2033=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2033);
rxp1_1=(px*r21);
rxp1_2=(r11*x2033);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2034=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2034);
rxp1_1=(px*r21);
rxp1_2=(r11*x2034);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2037=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2037.valid){
continue;
}
IkReal x2035=x2037.value;
IkReal x2036=(sj0*x2035);
sj4array[0]=(((sj1*sj2*x2036))+(((-1.0)*cj1*cj2*x2036)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2038=IKcos(j4);
IkReal x2039=IKsin(j4);
IkReal x2040=(r21*sj5);
IkReal x2041=((1.0)*cj5*x2038);
evalcond[0]=(r02*x2038);
evalcond[1]=((((-1.0)*sj0))+((r02*x2039)));
evalcond[2]=((((-1.0)*r20*x2041))+((x2038*x2040)));
evalcond[3]=((((-1.0)*r10*x2041))+((r11*sj5*x2038)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2039))+(((-1.0)*x2039*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2043=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2043.valid){
continue;
}
IkReal x2042=x2043.value;
sj4array[0]=(((cj2*sj1*x2042))+((cj1*sj2*x2042)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2044=IKcos(j4);
IkReal x2045=IKsin(j4);
IkReal x2046=((1.0)*sj0);
IkReal x2047=(r11*sj5);
IkReal x2048=((1.0)*cj5*x2044);
evalcond[0]=(r02*x2044);
evalcond[1]=((((-1.0)*x2046))+((r02*x2045)));
evalcond[2]=((((-1.0)*r20*x2048))+((r21*sj5*x2044)));
evalcond[3]=((((-1.0)*r10*x2048))+((x2044*x2047)));
evalcond[4]=(((cj5*r10*x2045))+((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x2046))+(((-1.0)*x2045*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2049=IKPowWithIntegerCheck(r02,-1);
if(!x2049.valid){
continue;
}
sj4array[0]=(sj0*(x2049.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2050=IKcos(j4);
IkReal x2051=IKsin(j4);
IkReal x2052=((1.0)*sj1);
IkReal x2053=(sj5*x2050);
IkReal x2054=(cj5*x2051);
IkReal x2055=((1.0)*sj5*x2051);
IkReal x2056=((1.0)*cj5*x2050);
evalcond[0]=(r02*x2050);
evalcond[1]=((((-1.0)*r20*x2056))+((r21*x2053)));
evalcond[2]=(((r11*x2053))+(((-1.0)*r10*x2056)));
evalcond[3]=((((-1.0)*cj2*x2052))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2055))+((r20*x2054)));
evalcond[4]=(((r10*x2054))+((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x2052))+(((-1.0)*r11*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2057=((1.0)*sj0);
IkReal x2058=((1.0)*cj0);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x2057))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2058)))),IkReal(((((-1.0)*r12*x2057))+(((-1.0)*r02*x2058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2059.value)+(((1.5707963267949)*(x2060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2061=IKcos(j4);
IkReal x2062=IKsin(j4);
IkReal x2063=(cj5*r00);
IkReal x2064=(cj1*cj2);
IkReal x2065=((1.0)*sj1);
IkReal x2066=((1.0)*x2061);
IkReal x2067=(sj5*x2061);
IkReal x2068=(cj5*x2062);
IkReal x2069=((1.0)*sj5*x2062);
evalcond[0]=(((r22*x2062))+((r21*x2067))+(((-1.0)*cj5*r20*x2066)));
evalcond[1]=((((-1.0)*cj5*r10*x2066))+cj0+((r12*x2062))+((r11*x2067)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2063*x2066))+((r02*x2062))+((r01*x2067)));
evalcond[3]=(((r22*x2061))+(((-1.0)*cj2*x2065))+(((-1.0)*cj1*sj2))+((r20*x2068))+(((-1.0)*r21*x2069)));
evalcond[4]=(((cj0*x2064))+(((-1.0)*cj0*sj2*x2065))+((r02*x2061))+(((-1.0)*r01*x2069))+((x2062*x2063)));
evalcond[5]=((((-1.0)*sj0*sj2*x2065))+(((-1.0)*r11*x2069))+((r12*x2061))+((r10*x2068))+((sj0*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2070.value)+(((1.5707963267949)*(x2071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2072=IKcos(j4);
IkReal x2073=IKsin(j4);
IkReal x2074=(cj5*r00);
IkReal x2075=(cj1*cj2);
IkReal x2076=((1.0)*sj1);
IkReal x2077=((1.0)*x2072);
IkReal x2078=(sj5*x2072);
IkReal x2079=(cj5*x2073);
IkReal x2080=((1.0)*sj5*x2073);
evalcond[0]=(((r22*x2073))+(((-1.0)*cj5*r20*x2077))+((r21*x2078)));
evalcond[1]=((((-1.0)*cj5*r10*x2077))+cj0+((r12*x2073))+((r11*x2078)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2073))+(((-1.0)*x2074*x2077))+((r01*x2078)));
evalcond[3]=((((-1.0)*r21*x2080))+((r22*x2072))+(((-1.0)*cj2*x2076))+((r20*x2079))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*cj0*sj2*x2076))+((r02*x2072))+(((-1.0)*r01*x2080))+((x2073*x2074))+((cj0*x2075)));
evalcond[5]=((((-1.0)*sj0*sj2*x2076))+((r12*x2072))+((sj0*x2075))+(((-1.0)*r11*x2080))+((r10*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2081 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2081.valid){
continue;
}
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2081.value)+(((1.5707963267949)*(x2082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2083=IKcos(j4);
IkReal x2084=IKsin(j4);
IkReal x2085=(cj5*r00);
IkReal x2086=(cj1*cj2);
IkReal x2087=((1.0)*sj1);
IkReal x2088=((1.0)*x2083);
IkReal x2089=(sj5*x2083);
IkReal x2090=(cj5*x2084);
IkReal x2091=((1.0)*sj5*x2084);
evalcond[0]=((((-1.0)*cj5*r20*x2088))+((r21*x2089))+((r22*x2084)));
evalcond[1]=((((-1.0)*cj5*r10*x2088))+cj0+((r11*x2089))+((r12*x2084)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2084))+(((-1.0)*x2085*x2088))+((r01*x2089)));
evalcond[3]=((((-1.0)*r21*x2091))+((r20*x2090))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2087))+((r22*x2083)));
evalcond[4]=(((r02*x2083))+((x2084*x2085))+(((-1.0)*cj0*sj2*x2087))+((cj0*x2086))+(((-1.0)*r01*x2091)));
evalcond[5]=(((sj0*x2086))+((r10*x2090))+(((-1.0)*r11*x2091))+(((-1.0)*sj0*sj2*x2087))+((r12*x2083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2092=cj5*cj5;
IkReal x2093=r21*r21;
IkReal x2094=(cj1*sj2);
IkReal x2095=(cj5*r20);
IkReal x2096=(r21*sj5);
IkReal x2097=(cj2*sj1);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2095*x2096))+(r22*r22)+x2093+((x2092*(r20*r20)))+(((-1.0)*x2092*x2093)))),-1);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal((((x2094*x2095))+(((-1.0)*x2096*x2097))+((x2095*x2097))+(((-1.0)*x2094*x2096)))),IkReal((((r22*x2094))+((r22*x2097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2098.value)))+(x2099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2100=IKcos(j4);
IkReal x2101=IKsin(j4);
IkReal x2102=(r21*sj5);
IkReal x2103=(cj5*r20);
evalcond[0]=((((-1.0)*x2100*x2103))+((x2100*x2102))+((r22*x2101)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x2101*x2103))+((r22*x2100))+(((-1.0)*x2101*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2104=(cj4*cj5);
IkReal x2105=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r00*x2104))+((r01*x2105)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2105))+((r10*x2104))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r00*x2104))+((r01*x2105))))+IKsqr(((((-1.0)*r11*x2105))+((r10*x2104))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r00*x2104))+((r01*x2105))), ((((-1.0)*r11*x2105))+((r10*x2104))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2106=IKcos(j0);
IkReal x2107=IKsin(j0);
IkReal x2108=((0.238)*sj2);
IkReal x2109=(r00*sj5);
IkReal x2110=(cj5*r00);
IkReal x2111=(cj5*r01);
IkReal x2112=((1.0)*sj2);
IkReal x2113=((1.0)*cj4);
IkReal x2114=(cj5*r11);
IkReal x2115=(cj5*r10);
IkReal x2116=(cj4*sj5);
IkReal x2117=(r10*sj5);
IkReal x2118=(sj1*x2107);
IkReal x2119=(cj1*x2106);
IkReal x2120=((1.0)*sj4*sj5);
IkReal x2121=(cj1*x2107);
IkReal x2122=(sj1*x2106);
IkReal x2123=(cj2*x2122);
evalcond[0]=(x2106+((r12*sj4))+((r11*x2116))+(((-1.0)*x2113*x2115)));
evalcond[1]=(((r01*x2116))+((r02*sj4))+(((-1.0)*x2110*x2113))+(((-1.0)*x2107)));
evalcond[2]=(((sj2*x2119))+x2123+x2111+x2109);
evalcond[3]=(((sj2*x2121))+x2114+x2117+((cj2*x2118)));
evalcond[4]=((((-1.0)*r01*x2120))+(((-1.0)*x2112*x2122))+((sj4*x2110))+((cj2*x2119))+((cj4*r02)));
evalcond[5]=((((-1.0)*x2112*x2118))+((cj2*x2121))+(((-1.0)*r11*x2120))+((sj4*x2115))+((cj4*r12)));
evalcond[6]=((((-0.113)*x2107))+(((0.238)*x2123))+(((-0.095)*x2109))+(((-1.0)*px))+(((0.265)*x2122))+(((-0.095)*x2111))+((x2108*x2119)));
evalcond[7]=((((0.113)*x2106))+(((0.238)*cj2*x2118))+((x2108*x2121))+(((-1.0)*py))+(((0.265)*x2118))+(((-0.095)*x2114))+(((-0.095)*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2124=((1.0)*cj5);
IkReal x2125=((1.0)*sj5);
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2125))+(((-1.0)*r11*x2124)))),IkReal(((((-1.0)*r01*x2124))+(((-1.0)*r00*x2125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2126.value)))+(x2127.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2128=IKcos(j0);
IkReal x2129=IKsin(j0);
IkReal x2130=(cj1*sj2);
IkReal x2131=(r00*sj5);
IkReal x2132=(cj5*r01);
IkReal x2133=(cj2*sj1);
IkReal x2134=(cj5*r11);
IkReal x2135=(r10*sj5);
IkReal x2136=(sj1*x2129);
IkReal x2137=((0.238)*x2128);
evalcond[0]=(x2132+x2131+((x2128*x2130))+((x2128*x2133)));
evalcond[1]=(x2134+x2135+((x2129*x2133))+((x2129*x2130)));
evalcond[2]=((((-0.095)*x2132))+(((-0.095)*x2131))+(((-1.0)*px))+(((0.265)*sj1*x2128))+((x2133*x2137))+(((-0.113)*x2129))+((x2130*x2137)));
evalcond[3]=((((0.238)*x2129*x2130))+(((0.238)*x2129*x2133))+(((-0.095)*x2135))+(((-0.095)*x2134))+(((0.113)*x2128))+(((-1.0)*py))+(((0.265)*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2138=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2138;
j4eval[1]=IKsign(x2138);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2139;
j4eval[1]=IKsign(x2139);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2140=((1.0)*sj0);
IkReal x2141=((1.0)*cj0);
IkReal x2142=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2142;
j4eval[1]=((IKabs(((((-1.0)*r02*x2141))+(((-1.0)*r12*x2140)))))+(IKabs(((((-1.0)*cj5*r00*x2141))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x2140))))));
j4eval[2]=IKsign(x2142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2143=((-1.0)*r20);
IkReal x2145 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2145)==0){
continue;
}
IkReal x2144=pow(x2145,-0.5);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2143),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2146.value));
IkReal gconst79=(r21*x2144);
IkReal gconst80=(x2143*x2144);
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2148=((-1.0)*r20);
IkReal x2149=x2144;
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2148),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
IkReal x2150=((-1.0)*(x2151.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2150;
IkReal gconst78=x2150;
IkReal gconst79=(r21*x2149);
IkReal gconst80=(x2148*x2149);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2152=((-1.0)*r20);
IkReal x2153=x2144;
CheckValue<IkReal> x2155 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2152),IKFAST_ATAN2_MAGTHRESH);
if(!x2155.valid){
continue;
}
IkReal x2154=((-1.0)*(x2155.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2154;
IkReal gconst78=x2154;
IkReal gconst79=(r21*x2153);
IkReal gconst80=(x2152*x2153);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2156=((-1.0)*r20);
IkReal x2157=x2144;
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2156),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
IkReal x2158=((-1.0)*(x2159.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2158;
IkReal gconst78=x2158;
IkReal gconst79=(r21*x2157);
IkReal gconst80=(x2156*x2157);
IkReal x2160=r22*r22;
CheckValue<IkReal> x2163=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2160))),-1);
if(!x2163.valid){
continue;
}
IkReal x2161=x2163.value;
IkReal x2162=(((x2161*(r20*r20*r20*r20)))+x2160+((x2161*(r21*r21*r21*r21)))+(((2.0)*x2161*(r20*r20)*(r21*r21))));
j4eval[0]=x2162;
j4eval[1]=IKsign(x2162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2164=(gconst80*r20);
IkReal x2165=(cj1*sj2);
IkReal x2166=(cj2*sj1);
IkReal x2167=((1.0)*gconst79*r21);
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal((((x2164*x2166))+((x2164*x2165))+(((-1.0)*x2166*x2167))+(((-1.0)*x2165*x2167)))),IkReal((((r22*x2165))+((r22*x2166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst79*r21*x2164))+(r22*r22)+(((gconst79*gconst79)*(r21*r21)))+(x2164*x2164))),-1);
if(!x2169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2168.value)+(((1.5707963267949)*(x2169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2170=IKcos(j4);
IkReal x2171=IKsin(j4);
IkReal x2172=(cj1*cj2);
IkReal x2173=((1.0)*sj1);
IkReal x2174=(gconst80*x2171);
IkReal x2175=(gconst79*x2170);
IkReal x2176=((1.0)*gconst80*x2170);
IkReal x2177=((1.0)*gconst79*x2171);
evalcond[0]=(((r22*x2171))+(((-1.0)*r20*x2176))+((r21*x2175)));
evalcond[1]=(((r11*x2175))+cj0+(((-1.0)*r10*x2176))+((r12*x2171)));
evalcond[2]=(((r01*x2175))+(((-1.0)*sj0))+((r02*x2171))+(((-1.0)*r00*x2176)));
evalcond[3]=((((-1.0)*r21*x2177))+(((-1.0)*cj2*x2173))+((r22*x2170))+(((-1.0)*cj1*sj2))+((r20*x2174)));
evalcond[4]=((((-1.0)*cj0*sj2*x2173))+((r00*x2174))+((cj0*x2172))+((r02*x2170))+(((-1.0)*r01*x2177)));
evalcond[5]=((((-1.0)*sj0*sj2*x2173))+((r10*x2174))+(((-1.0)*r11*x2177))+((r12*x2170))+((sj0*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2178.value)+(((1.5707963267949)*(x2179.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2180=IKcos(j4);
IkReal x2181=IKsin(j4);
IkReal x2182=(cj1*cj2);
IkReal x2183=((1.0)*sj1);
IkReal x2184=(gconst80*x2181);
IkReal x2185=(gconst79*x2180);
IkReal x2186=((1.0)*gconst80*x2180);
IkReal x2187=((1.0)*gconst79*x2181);
evalcond[0]=(((r22*x2181))+(((-1.0)*r20*x2186))+((r21*x2185)));
evalcond[1]=(cj0+(((-1.0)*r10*x2186))+((r12*x2181))+((r11*x2185)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2181))+((r01*x2185))+(((-1.0)*r00*x2186)));
evalcond[3]=(((r22*x2180))+(((-1.0)*r21*x2187))+((r20*x2184))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2183)));
evalcond[4]=(((cj0*x2182))+(((-1.0)*cj0*sj2*x2183))+((r02*x2180))+(((-1.0)*r01*x2187))+((r00*x2184)));
evalcond[5]=((((-1.0)*sj0*sj2*x2183))+((sj0*x2182))+((r12*x2180))+(((-1.0)*r11*x2187))+((r10*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2188.value)))+(x2189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2190=IKcos(j4);
IkReal x2191=IKsin(j4);
IkReal x2192=(cj1*cj2);
IkReal x2193=((1.0)*sj1);
IkReal x2194=(gconst80*x2191);
IkReal x2195=(gconst79*x2190);
IkReal x2196=((1.0)*gconst80*x2190);
IkReal x2197=((1.0)*gconst79*x2191);
evalcond[0]=(((r22*x2191))+(((-1.0)*r20*x2196))+((r21*x2195)));
evalcond[1]=(cj0+(((-1.0)*r10*x2196))+((r12*x2191))+((r11*x2195)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2191))+((r01*x2195))+(((-1.0)*r00*x2196)));
evalcond[3]=(((r22*x2190))+(((-1.0)*r21*x2197))+(((-1.0)*cj1*sj2))+((r20*x2194))+(((-1.0)*cj2*x2193)));
evalcond[4]=((((-1.0)*r01*x2197))+((cj0*x2192))+(((-1.0)*cj0*sj2*x2193))+((r02*x2190))+((r00*x2194)));
evalcond[5]=((((-1.0)*sj0*sj2*x2193))+((sj0*x2192))+((r12*x2190))+(((-1.0)*r11*x2197))+((r10*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2198=((-1.0)*r21);
IkReal x2200 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2200)==0){
continue;
}
IkReal x2199=pow(x2200,-0.5);
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal(x2198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2201.value))));
IkReal gconst82=(x2198*x2199);
IkReal gconst83=((1.0)*r20*x2199);
CheckValue<IkReal> x2202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2202.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2203=((-1.0)*r21);
CheckValue<IkReal> x2206 = IKatan2WithCheck(IkReal(x2203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2206.valid){
continue;
}
IkReal x2204=((1.0)*(x2206.value));
IkReal x2205=x2199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2204)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2204)));
IkReal gconst82=(x2203*x2205);
IkReal gconst83=((1.0)*r20*x2205);
IkReal x2207=r22*r22;
IkReal x2208=((1.0)*x2207);
CheckValue<IkReal> x2212=IKPowWithIntegerCheck(((-1.0)+x2207),-1);
if(!x2212.valid){
continue;
}
IkReal x2209=x2212.value;
if((((1.0)+(((-1.0)*x2208)))) < -0.00001)
continue;
IkReal x2210=IKsqrt(((1.0)+(((-1.0)*x2208))));
IkReal x2211=(cj0*x2209*x2210);
j4eval[0]=((IKabs(((((-1.0)*x2208*x2211))+x2211)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2213=((-1.0)*r21);
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(x2213),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
IkReal x2214=((1.0)*(x2216.value));
IkReal x2215=x2199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2214)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2214)));
IkReal gconst82=(x2213*x2215);
IkReal gconst83=((1.0)*r20*x2215);
IkReal x2217=r22*r22;
IkReal x2218=((1.0)*x2217);
CheckValue<IkReal> x2222=IKPowWithIntegerCheck(((-1.0)+x2217),-1);
if(!x2222.valid){
continue;
}
IkReal x2219=x2222.value;
if((((1.0)+(((-1.0)*x2218)))) < -0.00001)
continue;
IkReal x2220=IKsqrt(((1.0)+(((-1.0)*x2218))));
IkReal x2221=(sj0*x2219*x2220);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2221+(((-1.0)*x2218*x2221))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2223=((-1.0)*r21);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(x2223),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
IkReal x2224=((1.0)*(x2226.value));
IkReal x2225=x2199;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2224)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2224)));
IkReal gconst82=(x2223*x2225);
IkReal gconst83=((1.0)*r20*x2225);
IkReal x2227=r22*r22;
IkReal x2228=((1.0)*r12*sj0);
IkReal x2229=((1.0)*cj0*r02);
CheckValue<IkReal> x2233=IKPowWithIntegerCheck(((-1.0)+x2227),-1);
if(!x2233.valid){
continue;
}
IkReal x2230=x2233.value;
if((((1.0)+(((-1.0)*x2227)))) < -0.00001)
continue;
IkReal x2231=IKsqrt(((1.0)+(((-1.0)*x2227))));
IkReal x2232=(r22*x2230*x2231);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2229))+(((-1.0)*x2228)))))+(IKabs(((((-1.0)*x2229*x2232))+(((-1.0)*x2228*x2232))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2234=((1.0)*sj0);
IkReal x2235=((1.0)*cj0);
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r00*x2235))+((gconst82*r11*sj0))+(((-1.0)*gconst83*r10*x2234))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r02*x2235))+(((-1.0)*r12*x2234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2236.value)))+(x2237.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2238=IKcos(j4);
IkReal x2239=IKsin(j4);
IkReal x2240=(cj1*cj2);
IkReal x2241=((1.0)*sj1);
IkReal x2242=(gconst82*x2238);
IkReal x2243=(gconst83*x2239);
IkReal x2244=((1.0)*gconst82*x2239);
IkReal x2245=((1.0)*gconst83*x2238);
evalcond[0]=(((r22*x2239))+((r21*x2242))+(((-1.0)*r20*x2245)));
evalcond[1]=(cj0+((r11*x2242))+(((-1.0)*r10*x2245))+((r12*x2239)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2239))+(((-1.0)*r00*x2245))+((r01*x2242)));
evalcond[3]=(((r22*x2238))+(((-1.0)*cj1*sj2))+((r20*x2243))+(((-1.0)*cj2*x2241))+(((-1.0)*r21*x2244)));
evalcond[4]=(((r02*x2238))+(((-1.0)*r01*x2244))+((r00*x2243))+(((-1.0)*cj0*sj2*x2241))+((cj0*x2240)));
evalcond[5]=(((r10*x2243))+(((-1.0)*sj0*sj2*x2241))+((sj0*x2240))+(((-1.0)*r11*x2244))+((r12*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2246.value)))+(x2247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2248=IKcos(j4);
IkReal x2249=IKsin(j4);
IkReal x2250=(cj1*cj2);
IkReal x2251=((1.0)*sj1);
IkReal x2252=(gconst82*x2248);
IkReal x2253=(gconst83*x2249);
IkReal x2254=((1.0)*gconst82*x2249);
IkReal x2255=((1.0)*gconst83*x2248);
evalcond[0]=(((r21*x2252))+((r22*x2249))+(((-1.0)*r20*x2255)));
evalcond[1]=(cj0+(((-1.0)*r10*x2255))+((r12*x2249))+((r11*x2252)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2255))+((r01*x2252))+((r02*x2249)));
evalcond[3]=((((-1.0)*r21*x2254))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2251))+((r20*x2253))+((r22*x2248)));
evalcond[4]=(((cj0*x2250))+(((-1.0)*cj0*sj2*x2251))+(((-1.0)*r01*x2254))+((r00*x2253))+((r02*x2248)));
evalcond[5]=(((r10*x2253))+(((-1.0)*sj0*sj2*x2251))+(((-1.0)*r11*x2254))+((sj0*x2250))+((r12*x2248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2256=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2256.valid){
continue;
}
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2256.value)))+(x2257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2258=IKcos(j4);
IkReal x2259=IKsin(j4);
IkReal x2260=(cj1*cj2);
IkReal x2261=((1.0)*sj1);
IkReal x2262=(gconst82*x2258);
IkReal x2263=(gconst83*x2259);
IkReal x2264=((1.0)*gconst82*x2259);
IkReal x2265=((1.0)*gconst83*x2258);
evalcond[0]=(((r21*x2262))+(((-1.0)*r20*x2265))+((r22*x2259)));
evalcond[1]=(cj0+((r12*x2259))+((r11*x2262))+(((-1.0)*r10*x2265)));
evalcond[2]=(((r01*x2262))+(((-1.0)*sj0))+(((-1.0)*r00*x2265))+((r02*x2259)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x2264))+((r22*x2258))+((r20*x2263))+(((-1.0)*cj2*x2261)));
evalcond[4]=(((r00*x2263))+(((-1.0)*r01*x2264))+((cj0*x2260))+(((-1.0)*cj0*sj2*x2261))+((r02*x2258)));
evalcond[5]=(((sj0*x2260))+((r12*x2258))+((r10*x2263))+(((-1.0)*sj0*sj2*x2261))+(((-1.0)*r11*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2267 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2267)==0){
continue;
}
IkReal x2266=pow(x2267,-0.5);
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2268.value));
IkReal gconst85=((-1.0)*r11*x2266);
IkReal gconst86=(r10*x2266);
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
IkReal x2270=((-1.0)*(x2272.value));
IkReal x2271=x2266;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2270;
IkReal gconst84=x2270;
IkReal gconst85=((-1.0)*r11*x2271);
IkReal gconst86=(r10*x2271);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2273=((1.0)*sj0);
IkReal x2274=((1.0)*gconst86);
CheckValue<IkReal> x2275=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2274)))),-1);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2274))+((gconst85*r11*sj0))+((cj0*gconst85*r01))+(((-1.0)*gconst86*r10*x2273)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2275.value)))+(x2276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2277=IKcos(j4);
IkReal x2278=IKsin(j4);
IkReal x2279=(cj1*cj2);
IkReal x2280=((1.0)*sj1);
IkReal x2281=(gconst86*x2278);
IkReal x2282=(gconst85*x2277);
IkReal x2283=((1.0)*gconst85*x2278);
IkReal x2284=((1.0)*gconst86*x2277);
evalcond[0]=(((r22*x2278))+((r21*x2282))+(((-1.0)*r20*x2284)));
evalcond[1]=(((r11*x2282))+cj0+(((-1.0)*r10*x2284))+((r12*x2278)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2278))+((r01*x2282))+(((-1.0)*r00*x2284)));
evalcond[3]=((((-1.0)*cj2*x2280))+((r20*x2281))+(((-1.0)*cj1*sj2))+((r22*x2277))+(((-1.0)*r21*x2283)));
evalcond[4]=(((cj0*x2279))+((r02*x2277))+((r00*x2281))+(((-1.0)*r01*x2283))+(((-1.0)*cj0*sj2*x2280)));
evalcond[5]=((((-1.0)*sj0*sj2*x2280))+((sj0*x2279))+((r10*x2281))+(((-1.0)*r11*x2283))+((r12*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2285.valid){
continue;
}
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2285.value)))+(x2286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2287=IKcos(j4);
IkReal x2288=IKsin(j4);
IkReal x2289=(cj1*cj2);
IkReal x2290=((1.0)*sj1);
IkReal x2291=(gconst86*x2288);
IkReal x2292=(gconst85*x2287);
IkReal x2293=((1.0)*gconst85*x2288);
IkReal x2294=((1.0)*gconst86*x2287);
evalcond[0]=(((r21*x2292))+(((-1.0)*r20*x2294))+((r22*x2288)));
evalcond[1]=(cj0+((r12*x2288))+(((-1.0)*r10*x2294))+((r11*x2292)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2294))+((r01*x2292))+((r02*x2288)));
evalcond[3]=((((-1.0)*cj2*x2290))+(((-1.0)*cj1*sj2))+((r20*x2291))+((r22*x2287))+(((-1.0)*r21*x2293)));
evalcond[4]=(((cj0*x2289))+(((-1.0)*r01*x2293))+(((-1.0)*cj0*sj2*x2290))+((r00*x2291))+((r02*x2287)));
evalcond[5]=((((-1.0)*sj0*sj2*x2290))+((r10*x2291))+((r12*x2287))+((sj0*x2289))+(((-1.0)*r11*x2293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2296 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2296)==0){
continue;
}
IkReal x2295=pow(x2296,-0.5);
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2297.value))));
IkReal gconst88=((1.0)*r11*x2295);
IkReal gconst89=((-1.0)*r10*x2295);
CheckValue<IkReal> x2298 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2298.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2298.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
IkReal x2299=((1.0)*(x2301.value));
IkReal x2300=x2295;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2299)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2299)));
IkReal gconst88=((1.0)*r11*x2300);
IkReal gconst89=((-1.0)*r10*x2300);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
IkReal x2302=((1.0)*(x2304.value));
IkReal x2303=x2295;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2302)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2302)));
IkReal gconst88=((1.0)*r11*x2303);
IkReal gconst89=((-1.0)*r10*x2303);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
IkReal x2305=((1.0)*(x2307.value));
IkReal x2306=x2295;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2305)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2305)));
IkReal gconst88=((1.0)*r11*x2306);
IkReal gconst89=((-1.0)*r10*x2306);
IkReal x2308=r12*r12;
IkReal x2309=((1.0)*sj0);
IkReal x2310=(cj0*r02);
IkReal x2311=x2295;
j4eval[0]=((IKabs(((((-1.0)*x2309*x2311))+((r12*x2310*x2311))+((sj0*x2308*x2311)))))+(IKabs(((((-1.0)*x2310))+(((-1.0)*r12*x2309))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2312=((1.0)*sj0);
IkReal x2313=((1.0)*gconst89);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*gconst89*r10*x2312))+(((-1.0)*cj0*r00*x2313)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
CheckValue<IkReal> x2315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x2313)))),-1);
if(!x2315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2314.value)+(((1.5707963267949)*(x2315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2316=IKcos(j4);
IkReal x2317=IKsin(j4);
IkReal x2318=(gconst88*r11);
IkReal x2319=(cj1*cj2);
IkReal x2320=((1.0)*sj1);
IkReal x2321=((1.0)*x2317);
IkReal x2322=(gconst89*x2317);
IkReal x2323=(gconst88*x2316);
IkReal x2324=((1.0)*gconst89*x2316);
evalcond[0]=(((r21*x2323))+((r22*x2317))+(((-1.0)*r20*x2324)));
evalcond[1]=(((x2316*x2318))+cj0+((r12*x2317))+(((-1.0)*r10*x2324)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2324))+((r01*x2323))+((r02*x2317)));
evalcond[3]=((((-1.0)*gconst88*r21*x2321))+((r22*x2316))+(((-1.0)*cj2*x2320))+(((-1.0)*cj1*sj2))+((r20*x2322)));
evalcond[4]=((((-1.0)*gconst88*r01*x2321))+(((-1.0)*cj0*sj2*x2320))+((r00*x2322))+((r02*x2316))+((cj0*x2319)));
evalcond[5]=(((r10*x2322))+(((-1.0)*x2318*x2321))+((sj0*x2319))+((r12*x2316))+(((-1.0)*sj0*sj2*x2320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKcos(j4);
IkReal x2328=IKsin(j4);
IkReal x2329=(gconst88*r11);
IkReal x2330=(cj1*cj2);
IkReal x2331=((1.0)*sj1);
IkReal x2332=((1.0)*x2328);
IkReal x2333=(gconst89*x2328);
IkReal x2334=(gconst88*x2327);
IkReal x2335=((1.0)*gconst89*x2327);
evalcond[0]=(((r21*x2334))+((r22*x2328))+(((-1.0)*r20*x2335)));
evalcond[1]=(cj0+(((-1.0)*r10*x2335))+((x2327*x2329))+((r12*x2328)));
evalcond[2]=(((r02*x2328))+(((-1.0)*sj0))+((r01*x2334))+(((-1.0)*r00*x2335)));
evalcond[3]=(((r22*x2327))+(((-1.0)*gconst88*r21*x2332))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2331))+((r20*x2333)));
evalcond[4]=(((r02*x2327))+(((-1.0)*gconst88*r01*x2332))+(((-1.0)*cj0*sj2*x2331))+((r00*x2333))+((cj0*x2330)));
evalcond[5]=(((sj0*x2330))+((r12*x2327))+(((-1.0)*x2329*x2332))+(((-1.0)*sj0*sj2*x2331))+((r10*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2336.value)))+(x2337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKcos(j4);
IkReal x2339=IKsin(j4);
IkReal x2340=(gconst88*r11);
IkReal x2341=(cj1*cj2);
IkReal x2342=((1.0)*sj1);
IkReal x2343=((1.0)*x2339);
IkReal x2344=(gconst89*x2339);
IkReal x2345=(gconst88*x2338);
IkReal x2346=((1.0)*gconst89*x2338);
evalcond[0]=((((-1.0)*r20*x2346))+((r22*x2339))+((r21*x2345)));
evalcond[1]=(cj0+((r12*x2339))+((x2338*x2340))+(((-1.0)*r10*x2346)));
evalcond[2]=(((r02*x2339))+(((-1.0)*sj0))+((r01*x2345))+(((-1.0)*r00*x2346)));
evalcond[3]=((((-1.0)*cj2*x2342))+(((-1.0)*cj1*sj2))+((r22*x2338))+(((-1.0)*gconst88*r21*x2343))+((r20*x2344)));
evalcond[4]=(((r02*x2338))+((r00*x2344))+(((-1.0)*gconst88*r01*x2343))+(((-1.0)*cj0*sj2*x2342))+((cj0*x2341)));
evalcond[5]=(((sj0*x2341))+(((-1.0)*sj0*sj2*x2342))+((r10*x2344))+(((-1.0)*x2340*x2343))+((r12*x2338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2347=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2347;
j4eval[1]=IKsign(x2347);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2348=((1.0)*cj5);
IkReal x2349=((((-1.0)*r21*x2348))+(((-1.0)*r20*sj5)));
j4eval[0]=x2349;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2348))))));
j4eval[2]=IKsign(x2349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2350=cj5*cj5;
IkReal x2351=r11*r11;
IkReal x2352=(cj5*r10);
IkReal x2353=(r11*sj5);
IkReal x2354=((((-1.0)*x2351))+(((2.0)*x2352*x2353))+((x2350*x2351))+(((-1.0)*(r12*r12)))+(((-1.0)*x2350*(r10*r10))));
j4eval[0]=x2354;
j4eval[1]=((IKabs(r12))+(IKabs((x2353+(((-1.0)*x2352))))));
j4eval[2]=IKsign(x2354);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2355=cj5*cj5;
IkReal x2356=r11*r11;
IkReal x2357=(cj5*r10);
IkReal x2358=(r11*sj5);
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2355*(r10*r10)))+(((2.0)*x2357*x2358))+(((-1.0)*x2356))+((x2355*x2356))+(((-1.0)*(r12*r12))))),-1);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(r12),IkReal((x2358+(((-1.0)*x2357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2359.value)))+(x2360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2361=IKcos(j4);
IkReal x2362=IKsin(j4);
IkReal x2363=(cj5*r00);
IkReal x2364=((1.0)*sj2);
IkReal x2365=((1.0)*x2361);
IkReal x2366=(sj5*x2361);
IkReal x2367=(cj5*x2362);
IkReal x2368=((1.0)*sj5*x2362);
evalcond[0]=(((r22*x2362))+(((-1.0)*cj5*r20*x2365))+((r21*x2366)));
evalcond[1]=(((r02*x2362))+((r01*x2366))+(((-1.0)*x2363*x2365)));
evalcond[2]=(((r12*x2361))+((r10*x2367))+(((-1.0)*r11*x2368)));
evalcond[3]=((1.0)+((r11*x2366))+((r12*x2362))+(((-1.0)*cj5*r10*x2365)));
evalcond[4]=(((r02*x2361))+(((-1.0)*r01*x2368))+((cj1*cj2))+((x2362*x2363))+(((-1.0)*sj1*x2364)));
evalcond[5]=(((r20*x2367))+(((-1.0)*r21*x2368))+(((-1.0)*cj2*sj1))+((r22*x2361))+(((-1.0)*cj1*x2364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2369=((1.0)*cj5);
CheckValue<IkReal> x2370=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2369))+(((-1.0)*r20*sj5)))),-1);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x2369)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2370.value)))+(x2371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2372=IKcos(j4);
IkReal x2373=IKsin(j4);
IkReal x2374=(cj5*r00);
IkReal x2375=((1.0)*sj2);
IkReal x2376=((1.0)*x2372);
IkReal x2377=(sj5*x2372);
IkReal x2378=(cj5*x2373);
IkReal x2379=((1.0)*sj5*x2373);
evalcond[0]=(((r22*x2373))+(((-1.0)*cj5*r20*x2376))+((r21*x2377)));
evalcond[1]=(((r02*x2373))+(((-1.0)*x2374*x2376))+((r01*x2377)));
evalcond[2]=(((r12*x2372))+((r10*x2378))+(((-1.0)*r11*x2379)));
evalcond[3]=((1.0)+((r12*x2373))+(((-1.0)*cj5*r10*x2376))+((r11*x2377)));
evalcond[4]=(((x2373*x2374))+((r02*x2372))+(((-1.0)*r01*x2379))+((cj1*cj2))+(((-1.0)*sj1*x2375)));
evalcond[5]=(((r20*x2378))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2379))+((r22*x2372))+(((-1.0)*cj1*x2375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2380.valid){
continue;
}
CheckValue<IkReal> x2381 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2380.value)))+(x2381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2382=IKcos(j4);
IkReal x2383=IKsin(j4);
IkReal x2384=(cj5*r00);
IkReal x2385=((1.0)*sj2);
IkReal x2386=((1.0)*x2382);
IkReal x2387=(sj5*x2382);
IkReal x2388=(cj5*x2383);
IkReal x2389=((1.0)*sj5*x2383);
evalcond[0]=((((-1.0)*cj5*r20*x2386))+((r21*x2387))+((r22*x2383)));
evalcond[1]=(((r01*x2387))+((r02*x2383))+(((-1.0)*x2384*x2386)));
evalcond[2]=(((r10*x2388))+(((-1.0)*r11*x2389))+((r12*x2382)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x2386))+((r11*x2387))+((r12*x2383)));
evalcond[4]=((((-1.0)*r01*x2389))+(((-1.0)*sj1*x2385))+((r02*x2382))+((x2383*x2384))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x2385))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2389))+((r20*x2388))+((r22*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2390=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2390;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x2390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2391=((1.0)*cj5);
IkReal x2392=((((-1.0)*r01*x2391))+(((-1.0)*r00*sj5)));
j4eval[0]=x2392;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2391)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2393=cj5*cj5;
IkReal x2394=r11*r11;
IkReal x2395=(r11*sj5);
IkReal x2396=(cj5*r10);
IkReal x2397=((r12*r12)+x2394+((x2393*(r10*r10)))+(((-1.0)*x2393*x2394))+(((-2.0)*x2395*x2396)));
j4eval[0]=x2397;
j4eval[1]=((IKabs(r12))+(IKabs((x2395+(((-1.0)*x2396))))));
j4eval[2]=IKsign(x2397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2398=cj5*cj5;
IkReal x2399=r11*r11;
IkReal x2400=(cj5*r10);
IkReal x2401=(r11*sj5);
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x2400))+x2401)),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(IKsign((((x2398*(r10*r10)))+(((-2.0)*x2400*x2401))+(r12*r12)+x2399+(((-1.0)*x2398*x2399)))),-1);
if(!x2403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2402.value)+(((1.5707963267949)*(x2403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2404=IKcos(j4);
IkReal x2405=IKsin(j4);
IkReal x2406=(cj5*r00);
IkReal x2407=((1.0)*cj1);
IkReal x2408=(cj5*r20);
IkReal x2409=(cj5*r10);
IkReal x2410=((1.0)*x2404);
IkReal x2411=(sj5*x2404);
IkReal x2412=((1.0)*sj5*x2405);
evalcond[0]=((((-1.0)*x2408*x2410))+((r21*x2411))+((r22*x2405)));
evalcond[1]=((((-1.0)*x2406*x2410))+((r01*x2411))+((r02*x2405)));
evalcond[2]=(((r12*x2404))+(((-1.0)*r11*x2412))+((x2405*x2409)));
evalcond[3]=((-1.0)+((r11*x2411))+((r12*x2405))+(((-1.0)*x2409*x2410)));
evalcond[4]=((((-1.0)*cj2*x2407))+((r02*x2404))+((sj1*sj2))+((x2405*x2406))+(((-1.0)*r01*x2412)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2407))+((r22*x2404))+((x2405*x2408))+(((-1.0)*r21*x2412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2413=((1.0)*cj5);
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x2413))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2413)))),-1);
if(!x2415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2414.value)+(((1.5707963267949)*(x2415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2416=IKcos(j4);
IkReal x2417=IKsin(j4);
IkReal x2418=(cj5*r00);
IkReal x2419=((1.0)*cj1);
IkReal x2420=(cj5*r20);
IkReal x2421=(cj5*r10);
IkReal x2422=((1.0)*x2416);
IkReal x2423=(sj5*x2416);
IkReal x2424=((1.0)*sj5*x2417);
evalcond[0]=(((r22*x2417))+((r21*x2423))+(((-1.0)*x2420*x2422)));
evalcond[1]=(((r01*x2423))+(((-1.0)*x2418*x2422))+((r02*x2417)));
evalcond[2]=(((x2417*x2421))+(((-1.0)*r11*x2424))+((r12*x2416)));
evalcond[3]=((-1.0)+(((-1.0)*x2421*x2422))+((r11*x2423))+((r12*x2417)));
evalcond[4]=((((-1.0)*r01*x2424))+((sj1*sj2))+((x2417*x2418))+((r02*x2416))+(((-1.0)*cj2*x2419)));
evalcond[5]=(((r22*x2416))+((x2417*x2420))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2424))+(((-1.0)*sj2*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2425=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2425.valid){
continue;
}
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2425.value)))+(x2426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2427=IKcos(j4);
IkReal x2428=IKsin(j4);
IkReal x2429=(cj5*r00);
IkReal x2430=((1.0)*cj1);
IkReal x2431=(cj5*r20);
IkReal x2432=(cj5*r10);
IkReal x2433=((1.0)*x2427);
IkReal x2434=(sj5*x2427);
IkReal x2435=((1.0)*sj5*x2428);
evalcond[0]=(((r22*x2428))+(((-1.0)*x2431*x2433))+((r21*x2434)));
evalcond[1]=(((r01*x2434))+(((-1.0)*x2429*x2433))+((r02*x2428)));
evalcond[2]=(((x2428*x2432))+((r12*x2427))+(((-1.0)*r11*x2435)));
evalcond[3]=((-1.0)+((r11*x2434))+(((-1.0)*x2432*x2433))+((r12*x2428)));
evalcond[4]=((((-1.0)*cj2*x2430))+((sj1*sj2))+(((-1.0)*r01*x2435))+((x2428*x2429))+((r02*x2427)));
evalcond[5]=(((x2428*x2431))+((r22*x2427))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2430))+(((-1.0)*r21*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2437 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2437)==0){
continue;
}
IkReal x2436=pow(x2437,-0.5);
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2438.value));
IkReal gconst91=((-1.0)*r01*x2436);
IkReal gconst92=(r00*x2436);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2439.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
IkReal x2440=((-1.0)*(x2442.value));
IkReal x2441=x2436;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2440;
IkReal gconst90=x2440;
IkReal gconst91=((-1.0)*r01*x2441);
IkReal gconst92=(r00*x2441);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=((1.0)*sj0);
IkReal x2444=((1.0)*gconst92);
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2444))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*gconst92*r10*x2443)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2444)))),-1);
if(!x2446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2445.value)+(((1.5707963267949)*(x2446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2447=IKcos(j4);
IkReal x2448=IKsin(j4);
IkReal x2449=(cj1*cj2);
IkReal x2450=(gconst92*r00);
IkReal x2451=((1.0)*sj1);
IkReal x2452=(gconst92*r10);
IkReal x2453=(gconst92*r20);
IkReal x2454=(gconst91*x2447);
IkReal x2455=((1.0)*x2447);
IkReal x2456=((1.0)*gconst91*x2448);
evalcond[0]=((((-1.0)*x2453*x2455))+((r22*x2448))+((r21*x2454)));
evalcond[1]=(cj0+(((-1.0)*x2452*x2455))+((r12*x2448))+((r11*x2454)));
evalcond[2]=((((-1.0)*x2450*x2455))+((r02*x2448))+(((-1.0)*sj0))+((r01*x2454)));
evalcond[3]=(((r22*x2447))+(((-1.0)*r21*x2456))+(((-1.0)*cj1*sj2))+((x2448*x2453))+(((-1.0)*cj2*x2451)));
evalcond[4]=(((r02*x2447))+((x2448*x2450))+(((-1.0)*cj0*sj2*x2451))+((cj0*x2449))+(((-1.0)*r01*x2456)));
evalcond[5]=(((sj0*x2449))+(((-1.0)*r11*x2456))+((x2448*x2452))+((r12*x2447))+(((-1.0)*sj0*sj2*x2451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
CheckValue<IkReal> x2458=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2457.value)+(((1.5707963267949)*(x2458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2459=IKcos(j4);
IkReal x2460=IKsin(j4);
IkReal x2461=(cj1*cj2);
IkReal x2462=(gconst92*r00);
IkReal x2463=((1.0)*sj1);
IkReal x2464=(gconst92*r10);
IkReal x2465=(gconst92*r20);
IkReal x2466=(gconst91*x2459);
IkReal x2467=((1.0)*x2459);
IkReal x2468=((1.0)*gconst91*x2460);
evalcond[0]=((((-1.0)*x2465*x2467))+((r21*x2466))+((r22*x2460)));
evalcond[1]=((((-1.0)*x2464*x2467))+cj0+((r12*x2460))+((r11*x2466)));
evalcond[2]=(((r01*x2466))+(((-1.0)*sj0))+((r02*x2460))+(((-1.0)*x2462*x2467)));
evalcond[3]=(((x2460*x2465))+((r22*x2459))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2468))+(((-1.0)*cj2*x2463)));
evalcond[4]=(((r02*x2459))+((x2460*x2462))+(((-1.0)*r01*x2468))+(((-1.0)*cj0*sj2*x2463))+((cj0*x2461)));
evalcond[5]=(((x2460*x2464))+(((-1.0)*r11*x2468))+((r12*x2459))+((sj0*x2461))+(((-1.0)*sj0*sj2*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2470 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2470)==0){
continue;
}
IkReal x2469=pow(x2470,-0.5);
CheckValue<IkReal> x2471 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2471.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2471.value))));
IkReal gconst94=((1.0)*r01*x2469);
IkReal gconst95=((-1.0)*r00*x2469);
CheckValue<IkReal> x2472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2472.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2475 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2475.valid){
continue;
}
IkReal x2473=((1.0)*(x2475.value));
IkReal x2474=x2469;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2473)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2473)));
IkReal gconst94=((1.0)*r01*x2474);
IkReal gconst95=((-1.0)*r00*x2474);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2478 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2478.valid){
continue;
}
IkReal x2476=((1.0)*(x2478.value));
IkReal x2477=x2469;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2476)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2476)));
IkReal gconst94=((1.0)*r01*x2477);
IkReal gconst95=((-1.0)*r00*x2477);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2481 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2481.valid){
continue;
}
IkReal x2479=((1.0)*(x2481.value));
IkReal x2480=x2469;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2479)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2479)));
IkReal gconst94=((1.0)*r01*x2480);
IkReal gconst95=((-1.0)*r00*x2480);
IkReal x2482=r02*r02;
IkReal x2483=(r12*sj0);
IkReal x2484=((1.0)*cj0);
IkReal x2485=x2469;
j4eval[0]=((IKabs(((((-1.0)*x2483))+(((-1.0)*r02*x2484)))))+(IKabs((((cj0*x2482*x2485))+((r02*x2483*x2485))+(((-1.0)*x2484*x2485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2486=((1.0)*sj0);
IkReal x2487=((1.0)*gconst95);
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2487))+(((-1.0)*gconst94*r20)))),-1);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489 = IKatan2WithCheck(IkReal(((((-1.0)*gconst95*r10*x2486))+((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x2487))+((cj0*gconst94*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2488.value)))+(x2489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2490=IKcos(j4);
IkReal x2491=IKsin(j4);
IkReal x2492=(cj1*cj2);
IkReal x2493=((1.0)*sj1);
IkReal x2494=(gconst95*x2491);
IkReal x2495=(gconst94*x2490);
IkReal x2496=((1.0)*gconst95*x2490);
IkReal x2497=((1.0)*gconst94*x2491);
evalcond[0]=(((r22*x2491))+(((-1.0)*r20*x2496))+((r21*x2495)));
evalcond[1]=(cj0+(((-1.0)*r10*x2496))+((r11*x2495))+((r12*x2491)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2491))+(((-1.0)*r00*x2496))+((r01*x2495)));
evalcond[3]=(((r22*x2490))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2497))+(((-1.0)*cj2*x2493))+((r20*x2494)));
evalcond[4]=(((r00*x2494))+((r02*x2490))+(((-1.0)*r01*x2497))+(((-1.0)*cj0*sj2*x2493))+((cj0*x2492)));
evalcond[5]=(((r12*x2490))+(((-1.0)*sj0*sj2*x2493))+(((-1.0)*r11*x2497))+((r10*x2494))+((sj0*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2498.valid){
continue;
}
CheckValue<IkReal> x2499 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2498.value)))+(x2499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2500=IKcos(j4);
IkReal x2501=IKsin(j4);
IkReal x2502=(cj1*cj2);
IkReal x2503=((1.0)*sj1);
IkReal x2504=(gconst95*x2501);
IkReal x2505=(gconst94*x2500);
IkReal x2506=((1.0)*gconst95*x2500);
IkReal x2507=((1.0)*gconst94*x2501);
evalcond[0]=(((r22*x2501))+((r21*x2505))+(((-1.0)*r20*x2506)));
evalcond[1]=(((r12*x2501))+cj0+(((-1.0)*r10*x2506))+((r11*x2505)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2501))+(((-1.0)*r00*x2506))+((r01*x2505)));
evalcond[3]=((((-1.0)*cj2*x2503))+((r22*x2500))+(((-1.0)*cj1*sj2))+((r20*x2504))+(((-1.0)*r21*x2507)));
evalcond[4]=((((-1.0)*cj0*sj2*x2503))+((r02*x2500))+((cj0*x2502))+(((-1.0)*r01*x2507))+((r00*x2504)));
evalcond[5]=((((-1.0)*sj0*sj2*x2503))+((r12*x2500))+((r10*x2504))+(((-1.0)*r11*x2507))+((sj0*x2502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2508.value)+(((1.5707963267949)*(x2509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2510=IKcos(j4);
IkReal x2511=IKsin(j4);
IkReal x2512=(cj1*cj2);
IkReal x2513=((1.0)*sj1);
IkReal x2514=(gconst95*x2511);
IkReal x2515=(gconst94*x2510);
IkReal x2516=((1.0)*gconst95*x2510);
IkReal x2517=((1.0)*gconst94*x2511);
evalcond[0]=(((r22*x2511))+((r21*x2515))+(((-1.0)*r20*x2516)));
evalcond[1]=(((r11*x2515))+cj0+(((-1.0)*r10*x2516))+((r12*x2511)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2511))+(((-1.0)*r00*x2516))+((r01*x2515)));
evalcond[3]=((((-1.0)*cj2*x2513))+((r22*x2510))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2517))+((r20*x2514)));
evalcond[4]=(((cj0*x2512))+((r02*x2510))+(((-1.0)*r01*x2517))+(((-1.0)*cj0*sj2*x2513))+((r00*x2514)));
evalcond[5]=((((-1.0)*sj0*sj2*x2513))+((r10*x2514))+((sj0*x2512))+(((-1.0)*r11*x2517))+((r12*x2510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2518=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2518;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2519=((1.0)*cj5);
IkReal x2520=((((-1.0)*r21*x2519))+(((-1.0)*r20*sj5)));
j4eval[0]=x2520;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2519))))));
j4eval[2]=IKsign(x2520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2521=cj5*cj5;
IkReal x2522=r01*r01;
IkReal x2523=(cj5*r00);
IkReal x2524=(r01*sj5);
IkReal x2525=(x2522+((x2521*(r00*r00)))+(((-1.0)*x2521*x2522))+(r02*r02)+(((-2.0)*x2523*x2524)));
j4eval[0]=x2525;
j4eval[1]=IKsign(x2525);
j4eval[2]=((IKabs(r02))+(IKabs((x2524+(((-1.0)*x2523))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2526=cj5*cj5;
IkReal x2527=r01*r01;
IkReal x2528=(r01*sj5);
IkReal x2529=(cj5*r00);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(r02),IkReal((x2528+(((-1.0)*x2529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(IKsign((x2527+((x2526*(r00*r00)))+(((-2.0)*x2528*x2529))+(((-1.0)*x2526*x2527))+(r02*r02))),-1);
if(!x2531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2530.value)+(((1.5707963267949)*(x2531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2532=IKcos(j4);
IkReal x2533=IKsin(j4);
IkReal x2534=(cj5*r00);
IkReal x2535=((1.0)*sj2);
IkReal x2536=((1.0)*x2532);
IkReal x2537=(sj5*x2532);
IkReal x2538=(cj5*x2533);
IkReal x2539=((1.0)*sj5*x2533);
evalcond[0]=((((-1.0)*cj5*r20*x2536))+((r21*x2537))+((r22*x2533)));
evalcond[1]=((((-1.0)*cj5*r10*x2536))+((r12*x2533))+((r11*x2537)));
evalcond[2]=((((-1.0)*r01*x2539))+((r02*x2532))+((x2533*x2534)));
evalcond[3]=((-1.0)+((r01*x2537))+(((-1.0)*x2534*x2536))+((r02*x2533)));
evalcond[4]=((((-1.0)*sj1*x2535))+((r10*x2538))+((cj1*cj2))+((r12*x2532))+(((-1.0)*r11*x2539)));
evalcond[5]=((((-1.0)*r21*x2539))+((r20*x2538))+(((-1.0)*cj2*sj1))+((r22*x2532))+(((-1.0)*cj1*x2535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2540=((1.0)*cj5);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2540))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2540))+(((-1.0)*r20*sj5)))),-1);
if(!x2542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2541.value)+(((1.5707963267949)*(x2542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2543=IKcos(j4);
IkReal x2544=IKsin(j4);
IkReal x2545=(cj5*r00);
IkReal x2546=((1.0)*sj2);
IkReal x2547=((1.0)*x2543);
IkReal x2548=(sj5*x2543);
IkReal x2549=(cj5*x2544);
IkReal x2550=((1.0)*sj5*x2544);
evalcond[0]=(((r21*x2548))+(((-1.0)*cj5*r20*x2547))+((r22*x2544)));
evalcond[1]=(((r11*x2548))+((r12*x2544))+(((-1.0)*cj5*r10*x2547)));
evalcond[2]=((((-1.0)*r01*x2550))+((r02*x2543))+((x2544*x2545)));
evalcond[3]=((-1.0)+(((-1.0)*x2545*x2547))+((r01*x2548))+((r02*x2544)));
evalcond[4]=((((-1.0)*r11*x2550))+((r12*x2543))+(((-1.0)*sj1*x2546))+((cj1*cj2))+((r10*x2549)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x2550))+((r20*x2549))+(((-1.0)*cj1*x2546))+((r22*x2543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2551 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2551.valid){
continue;
}
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2551.value)+(((1.5707963267949)*(x2552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2553=IKcos(j4);
IkReal x2554=IKsin(j4);
IkReal x2555=(cj5*r00);
IkReal x2556=((1.0)*sj2);
IkReal x2557=((1.0)*x2553);
IkReal x2558=(sj5*x2553);
IkReal x2559=(cj5*x2554);
IkReal x2560=((1.0)*sj5*x2554);
evalcond[0]=(((r22*x2554))+(((-1.0)*cj5*r20*x2557))+((r21*x2558)));
evalcond[1]=(((r12*x2554))+((r11*x2558))+(((-1.0)*cj5*r10*x2557)));
evalcond[2]=((((-1.0)*r01*x2560))+((x2554*x2555))+((r02*x2553)));
evalcond[3]=((-1.0)+(((-1.0)*x2555*x2557))+((r01*x2558))+((r02*x2554)));
evalcond[4]=(((r12*x2553))+(((-1.0)*sj1*x2556))+((cj1*cj2))+((r10*x2559))+(((-1.0)*r11*x2560)));
evalcond[5]=(((r22*x2553))+(((-1.0)*r21*x2560))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2556))+((r20*x2559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2561=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2561;
j4eval[1]=IKsign(x2561);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2562=((1.0)*cj5);
IkReal x2563=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2562)));
j4eval[0]=x2563;
j4eval[1]=((IKabs(((((-1.0)*r20*x2562))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2564=cj5*cj5;
IkReal x2565=r01*r01;
IkReal x2566=(r01*sj5);
IkReal x2567=(cj5*r00);
IkReal x2568=((((-1.0)*x2565))+(((-1.0)*x2564*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2566*x2567))+((x2564*x2565)));
j4eval[0]=x2568;
j4eval[1]=IKsign(x2568);
j4eval[2]=((IKabs(r02))+(IKabs((x2566+(((-1.0)*x2567))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2569=cj5*cj5;
IkReal x2570=r01*r01;
IkReal x2571=(r01*sj5);
IkReal x2572=(cj5*r00);
CheckValue<IkReal> x2573 = IKatan2WithCheck(IkReal(r02),IkReal((x2571+(((-1.0)*x2572)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(IKsign(((((2.0)*x2571*x2572))+(((-1.0)*(r02*r02)))+(((-1.0)*x2570))+(((-1.0)*x2569*(r00*r00)))+((x2569*x2570)))),-1);
if(!x2574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2573.value)+(((1.5707963267949)*(x2574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2575=IKcos(j4);
IkReal x2576=IKsin(j4);
IkReal x2577=(cj5*r00);
IkReal x2578=((1.0)*cj1);
IkReal x2579=((1.0)*x2575);
IkReal x2580=(sj5*x2575);
IkReal x2581=(cj5*x2576);
IkReal x2582=((1.0)*sj5*x2576);
evalcond[0]=(((r21*x2580))+((r22*x2576))+(((-1.0)*cj5*r20*x2579)));
evalcond[1]=(((r12*x2576))+(((-1.0)*cj5*r10*x2579))+((r11*x2580)));
evalcond[2]=((((-1.0)*r01*x2582))+((x2576*x2577))+((r02*x2575)));
evalcond[3]=((1.0)+((r01*x2580))+((r02*x2576))+(((-1.0)*x2577*x2579)));
evalcond[4]=((((-1.0)*cj2*x2578))+((r12*x2575))+((sj1*sj2))+((r10*x2581))+(((-1.0)*r11*x2582)));
evalcond[5]=((((-1.0)*r21*x2582))+(((-1.0)*cj2*sj1))+((r20*x2581))+(((-1.0)*sj2*x2578))+((r22*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2583=((1.0)*cj5);
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2583)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2583)))),-1);
if(!x2585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2584.value)+(((1.5707963267949)*(x2585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2586=IKcos(j4);
IkReal x2587=IKsin(j4);
IkReal x2588=(cj5*r00);
IkReal x2589=((1.0)*cj1);
IkReal x2590=((1.0)*x2586);
IkReal x2591=(sj5*x2586);
IkReal x2592=(cj5*x2587);
IkReal x2593=((1.0)*sj5*x2587);
evalcond[0]=(((r22*x2587))+(((-1.0)*cj5*r20*x2590))+((r21*x2591)));
evalcond[1]=(((r12*x2587))+((r11*x2591))+(((-1.0)*cj5*r10*x2590)));
evalcond[2]=((((-1.0)*r01*x2593))+((x2587*x2588))+((r02*x2586)));
evalcond[3]=((1.0)+((r01*x2591))+(((-1.0)*x2588*x2590))+((r02*x2587)));
evalcond[4]=(((sj1*sj2))+((r10*x2592))+((r12*x2586))+(((-1.0)*cj2*x2589))+(((-1.0)*r11*x2593)));
evalcond[5]=(((r22*x2586))+(((-1.0)*r21*x2593))+(((-1.0)*cj2*sj1))+((r20*x2592))+(((-1.0)*sj2*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2594.valid){
continue;
}
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2594.value)))+(x2595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2596=IKcos(j4);
IkReal x2597=IKsin(j4);
IkReal x2598=(cj5*r00);
IkReal x2599=((1.0)*cj1);
IkReal x2600=((1.0)*x2596);
IkReal x2601=(sj5*x2596);
IkReal x2602=(cj5*x2597);
IkReal x2603=((1.0)*sj5*x2597);
evalcond[0]=(((r22*x2597))+(((-1.0)*cj5*r20*x2600))+((r21*x2601)));
evalcond[1]=((((-1.0)*cj5*r10*x2600))+((r12*x2597))+((r11*x2601)));
evalcond[2]=((((-1.0)*r01*x2603))+((x2597*x2598))+((r02*x2596)));
evalcond[3]=((1.0)+(((-1.0)*x2598*x2600))+((r01*x2601))+((r02*x2597)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r11*x2603))+(((-1.0)*cj2*x2599))+((r12*x2596))+((r10*x2602)));
evalcond[5]=(((r22*x2596))+((r20*x2602))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2599))+(((-1.0)*r21*x2603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2604=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2604);
rxp1_1=(px*r21);
rxp1_2=(r11*x2604);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2605=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2605);
rxp1_1=(px*r21);
rxp1_2=(r11*x2605);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2606=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2606);
rxp1_1=(px*r21);
rxp1_2=(r11*x2606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2609=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2609.valid){
continue;
}
IkReal x2607=x2609.value;
IkReal x2608=(sj0*x2607);
sj4array[0]=((((-1.0)*cj1*cj2*x2608))+((sj1*sj2*x2608)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2610=IKcos(j4);
IkReal x2611=IKsin(j4);
IkReal x2612=(r21*sj5);
IkReal x2613=((1.0)*cj5*x2610);
evalcond[0]=(r02*x2610);
evalcond[1]=((((-1.0)*sj0))+((r02*x2611)));
evalcond[2]=(((x2610*x2612))+(((-1.0)*r20*x2613)));
evalcond[3]=(((r11*sj5*x2610))+(((-1.0)*r10*x2613)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2611))+(((-1.0)*x2611*x2612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2615=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2615.valid){
continue;
}
IkReal x2614=x2615.value;
sj4array[0]=(((cj1*sj2*x2614))+((cj2*sj1*x2614)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2616=IKcos(j4);
IkReal x2617=IKsin(j4);
IkReal x2618=((1.0)*sj0);
IkReal x2619=(r11*sj5);
IkReal x2620=((1.0)*cj5*x2616);
evalcond[0]=(r02*x2616);
evalcond[1]=(((r02*x2617))+(((-1.0)*x2618)));
evalcond[2]=(((r21*sj5*x2616))+(((-1.0)*r20*x2620)));
evalcond[3]=(((x2616*x2619))+(((-1.0)*r10*x2620)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r10*x2617))+(((-1.0)*sj1*sj2*x2618))+(((-1.0)*x2617*x2619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2621=IKPowWithIntegerCheck(r02,-1);
if(!x2621.valid){
continue;
}
sj4array[0]=(sj0*(x2621.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2622=IKcos(j4);
IkReal x2623=IKsin(j4);
IkReal x2624=((1.0)*sj1);
IkReal x2625=(sj5*x2622);
IkReal x2626=(cj5*x2623);
IkReal x2627=((1.0)*sj5*x2623);
IkReal x2628=((1.0)*cj5*x2622);
evalcond[0]=(r02*x2622);
evalcond[1]=(((r21*x2625))+(((-1.0)*r20*x2628)));
evalcond[2]=((((-1.0)*r10*x2628))+((r11*x2625)));
evalcond[3]=(((r20*x2626))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2624))+(((-1.0)*r21*x2627)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x2627))+((r10*x2626))+(((-1.0)*sj0*sj2*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2629=((1.0)*sj0);
IkReal x2630=((1.0)*cj0);
CheckValue<IkReal> x2631 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x2629))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2630)))),IkReal(((((-1.0)*r02*x2630))+(((-1.0)*r12*x2629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2631.valid){
continue;
}
CheckValue<IkReal> x2632=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2631.value)+(((1.5707963267949)*(x2632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2633=IKcos(j4);
IkReal x2634=IKsin(j4);
IkReal x2635=(cj5*r00);
IkReal x2636=(cj1*cj2);
IkReal x2637=((1.0)*sj1);
IkReal x2638=((1.0)*x2633);
IkReal x2639=(sj5*x2633);
IkReal x2640=(cj5*x2634);
IkReal x2641=((1.0)*sj5*x2634);
evalcond[0]=(((r22*x2634))+(((-1.0)*cj5*r20*x2638))+((r21*x2639)));
evalcond[1]=(cj0+((r11*x2639))+(((-1.0)*cj5*r10*x2638))+((r12*x2634)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2639))+(((-1.0)*x2635*x2638))+((r02*x2634)));
evalcond[3]=((((-1.0)*cj2*x2637))+((r22*x2633))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2641))+((r20*x2640)));
evalcond[4]=((((-1.0)*r01*x2641))+((cj0*x2636))+((x2634*x2635))+(((-1.0)*cj0*sj2*x2637))+((r02*x2633)));
evalcond[5]=((((-1.0)*sj0*sj2*x2637))+((sj0*x2636))+(((-1.0)*r11*x2641))+((r10*x2640))+((r12*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2642 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2642.valid){
continue;
}
CheckValue<IkReal> x2643=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2642.value)+(((1.5707963267949)*(x2643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2644=IKcos(j4);
IkReal x2645=IKsin(j4);
IkReal x2646=(cj5*r00);
IkReal x2647=(cj1*cj2);
IkReal x2648=((1.0)*sj1);
IkReal x2649=((1.0)*x2644);
IkReal x2650=(sj5*x2644);
IkReal x2651=(cj5*x2645);
IkReal x2652=((1.0)*sj5*x2645);
evalcond[0]=(((r21*x2650))+(((-1.0)*cj5*r20*x2649))+((r22*x2645)));
evalcond[1]=(((r12*x2645))+((r11*x2650))+cj0+(((-1.0)*cj5*r10*x2649)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2646*x2649))+((r02*x2645))+((r01*x2650)));
evalcond[3]=((((-1.0)*cj2*x2648))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2652))+((r22*x2644))+((r20*x2651)));
evalcond[4]=((((-1.0)*r01*x2652))+((r02*x2644))+((cj0*x2647))+((x2645*x2646))+(((-1.0)*cj0*sj2*x2648)));
evalcond[5]=(((sj0*x2647))+((r12*x2644))+(((-1.0)*r11*x2652))+(((-1.0)*sj0*sj2*x2648))+((r10*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2653 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2653.value)+(((1.5707963267949)*(x2654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2655=IKcos(j4);
IkReal x2656=IKsin(j4);
IkReal x2657=(cj5*r00);
IkReal x2658=(cj1*cj2);
IkReal x2659=((1.0)*sj1);
IkReal x2660=((1.0)*x2655);
IkReal x2661=(sj5*x2655);
IkReal x2662=(cj5*x2656);
IkReal x2663=((1.0)*sj5*x2656);
evalcond[0]=(((r21*x2661))+(((-1.0)*cj5*r20*x2660))+((r22*x2656)));
evalcond[1]=(((r12*x2656))+cj0+(((-1.0)*cj5*r10*x2660))+((r11*x2661)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2656))+(((-1.0)*x2657*x2660))+((r01*x2661)));
evalcond[3]=((((-1.0)*cj2*x2659))+(((-1.0)*cj1*sj2))+((r22*x2655))+(((-1.0)*r21*x2663))+((r20*x2662)));
evalcond[4]=(((x2656*x2657))+(((-1.0)*r01*x2663))+((r02*x2655))+((cj0*x2658))+(((-1.0)*cj0*sj2*x2659)));
evalcond[5]=(((r12*x2655))+((sj0*x2658))+(((-1.0)*r11*x2663))+(((-1.0)*sj0*sj2*x2659))+((r10*x2662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2664=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x2664;
j0eval[1]=IKsign(x2664);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2665=r21*r21;
IkReal x2666=cj5*cj5;
IkReal x2667=(cj1*sj2);
IkReal x2668=(cj5*r20);
IkReal x2669=(r21*sj5);
IkReal x2670=(cj2*sj1);
IkReal x2671=((((-1.0)*x2665))+(((2.0)*x2668*x2669))+(((-1.0)*(r22*r22)))+(((-1.0)*x2666*(r20*r20)))+((x2665*x2666)));
j4eval[0]=x2671;
j4eval[1]=IKsign(x2671);
j4eval[2]=((IKabs((((r22*x2670))+((r22*x2667)))))+(IKabs(((((-1.0)*x2669*x2670))+((x2668*x2670))+((x2667*x2668))+(((-1.0)*x2667*x2669))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2672=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2672;
j4eval[1]=IKsign(x2672);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2673=cj5*cj5;
IkReal x2674=(r11*r21);
IkReal x2675=((1.0)*r20);
IkReal x2676=(cj5*sj5);
IkReal x2677=((((-1.0)*x2674))+((x2673*x2674))+(((-1.0)*r12*r22))+((r10*r21*x2676))+((r11*r20*x2676))+(((-1.0)*r10*x2673*x2675)));
j4eval[0]=x2677;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2675))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2678=cj5*cj5;
IkReal x2679=((1.0)*r20);
IkReal x2680=(r01*r21);
IkReal x2681=(r21*sj5);
IkReal x2682=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2678*x2679))+((x2678*x2680))+(((-1.0)*x2680))+((cj5*r00*x2681)));
j4eval[0]=x2682;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2679))+((cj0*x2681))))));
j4eval[2]=IKsign(x2682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2683=cj5*cj5;
IkReal x2684=((1.0)*r20);
IkReal x2685=(r01*r21);
IkReal x2686=(r21*sj5);
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2683*x2685))+(((-1.0)*r00*x2683*x2684))+(((-1.0)*x2685))+((cj5*r00*x2686)))),-1);
if(!x2687.valid){
continue;
}
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal((((cj0*x2686))+(((-1.0)*cj0*cj5*x2684)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2687.value)))+(x2688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2689=IKcos(j4);
IkReal x2690=IKsin(j4);
IkReal x2691=(cj5*r00);
IkReal x2692=(cj5*r20);
IkReal x2693=(cj5*r10);
IkReal x2694=(r21*sj5);
IkReal x2695=((1.0)*x2689);
IkReal x2696=((1.0)*x2690);
IkReal x2697=(sj5*x2689);
IkReal x2698=(sj5*x2690);
evalcond[0]=((((-1.0)*x2692*x2695))+((r22*x2690))+((x2689*x2694)));
evalcond[1]=(((r12*x2690))+cj0+((r11*x2697))+(((-1.0)*x2693*x2695)));
evalcond[2]=((((-1.0)*x2692*x2696))+(((-1.0)*r22*x2695))+((x2690*x2694)));
evalcond[3]=((((-1.0)*x2691*x2696))+cj0+(((-1.0)*r02*x2695))+((r01*x2698)));
evalcond[4]=(sj0+(((-1.0)*r12*x2695))+((r11*x2698))+(((-1.0)*x2693*x2696)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2691*x2695))+((r01*x2697))+((r02*x2690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2699=cj5*cj5;
IkReal x2700=(r11*r21);
IkReal x2701=((1.0)*r20);
IkReal x2702=(cj5*sj5);
CheckValue<IkReal> x2703 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2703.valid){
continue;
}
CheckValue<IkReal> x2704=IKPowWithIntegerCheck(IKsign((((r10*r21*x2702))+((x2699*x2700))+(((-1.0)*r12*r22))+((r11*r20*x2702))+(((-1.0)*r10*x2699*x2701))+(((-1.0)*x2700)))),-1);
if(!x2704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2703.value)+(((1.5707963267949)*(x2704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2705=IKcos(j4);
IkReal x2706=IKsin(j4);
IkReal x2707=(cj5*r00);
IkReal x2708=(cj5*r20);
IkReal x2709=(cj5*r10);
IkReal x2710=(r21*sj5);
IkReal x2711=((1.0)*x2705);
IkReal x2712=((1.0)*x2706);
IkReal x2713=(sj5*x2705);
IkReal x2714=(sj5*x2706);
evalcond[0]=(((r22*x2706))+(((-1.0)*x2708*x2711))+((x2705*x2710)));
evalcond[1]=(((r12*x2706))+cj0+(((-1.0)*x2709*x2711))+((r11*x2713)));
evalcond[2]=(((x2706*x2710))+(((-1.0)*x2708*x2712))+(((-1.0)*r22*x2711)));
evalcond[3]=(cj0+(((-1.0)*r02*x2711))+(((-1.0)*x2707*x2712))+((r01*x2714)));
evalcond[4]=(sj0+(((-1.0)*x2709*x2712))+((r11*x2714))+(((-1.0)*r12*x2711)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2706))+(((-1.0)*x2707*x2711))+((r01*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2715 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2715.value)+(((1.5707963267949)*(x2716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2717=IKcos(j4);
IkReal x2718=IKsin(j4);
IkReal x2719=(cj5*r00);
IkReal x2720=(cj5*r20);
IkReal x2721=(cj5*r10);
IkReal x2722=(r21*sj5);
IkReal x2723=((1.0)*x2717);
IkReal x2724=((1.0)*x2718);
IkReal x2725=(sj5*x2717);
IkReal x2726=(sj5*x2718);
evalcond[0]=(((x2717*x2722))+((r22*x2718))+(((-1.0)*x2720*x2723)));
evalcond[1]=(((r12*x2718))+cj0+(((-1.0)*x2721*x2723))+((r11*x2725)));
evalcond[2]=((((-1.0)*x2720*x2724))+(((-1.0)*r22*x2723))+((x2718*x2722)));
evalcond[3]=(cj0+(((-1.0)*x2719*x2724))+((r01*x2726))+(((-1.0)*r02*x2723)));
evalcond[4]=(sj0+(((-1.0)*r12*x2723))+(((-1.0)*x2721*x2724))+((r11*x2726)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2719*x2723))+((r02*x2718))+((r01*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2727=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2727;
j4eval[1]=IKsign(x2727);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2728=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2728;
j4eval[1]=IKsign(x2728);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2729=cj5*cj5;
IkReal x2730=(r11*r21);
IkReal x2731=((1.0)*r20);
IkReal x2732=(cj5*sj5);
IkReal x2733=((((-1.0)*r12*r22))+(((-1.0)*x2730))+(((-1.0)*r10*x2729*x2731))+((r11*r20*x2732))+((x2729*x2730))+((r10*r21*x2732)));
j4eval[0]=x2733;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2731))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2734=cj5*cj5;
IkReal x2735=(r11*r21);
IkReal x2736=((1.0)*r20);
IkReal x2737=(cj5*sj5);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2736))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
CheckValue<IkReal> x2739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x2734*x2736))+(((-1.0)*x2735))+((x2734*x2735))+((r11*r20*x2737))+((r10*r21*x2737)))),-1);
if(!x2739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2738.value)+(((1.5707963267949)*(x2739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2740=IKcos(j4);
IkReal x2741=IKsin(j4);
IkReal x2742=((1.0)*sj0);
IkReal x2743=(cj5*r00);
IkReal x2744=(cj5*r20);
IkReal x2745=(cj5*r10);
IkReal x2746=((1.0)*x2740);
IkReal x2747=((1.0)*x2741);
IkReal x2748=(sj5*x2740);
IkReal x2749=(sj5*x2741);
evalcond[0]=(((r21*x2748))+((r22*x2741))+(((-1.0)*x2744*x2746)));
evalcond[1]=(((r11*x2748))+cj0+((r12*x2741))+(((-1.0)*x2745*x2746)));
evalcond[2]=(((r21*x2749))+(((-1.0)*x2744*x2747))+(((-1.0)*r22*x2746)));
evalcond[3]=((((-1.0)*x2743*x2746))+((r01*x2748))+(((-1.0)*x2742))+((r02*x2741)));
evalcond[4]=((((-1.0)*x2743*x2747))+((r01*x2749))+(((-1.0)*r02*x2746))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x2749))+(((-1.0)*x2745*x2747))+(((-1.0)*r12*x2746))+(((-1.0)*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2750.value)+(((1.5707963267949)*(x2751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2752=IKcos(j4);
IkReal x2753=IKsin(j4);
IkReal x2754=((1.0)*sj0);
IkReal x2755=(cj5*r00);
IkReal x2756=(cj5*r20);
IkReal x2757=(cj5*r10);
IkReal x2758=((1.0)*x2752);
IkReal x2759=((1.0)*x2753);
IkReal x2760=(sj5*x2752);
IkReal x2761=(sj5*x2753);
evalcond[0]=(((r22*x2753))+(((-1.0)*x2756*x2758))+((r21*x2760)));
evalcond[1]=(cj0+((r12*x2753))+(((-1.0)*x2757*x2758))+((r11*x2760)));
evalcond[2]=((((-1.0)*r22*x2758))+(((-1.0)*x2756*x2759))+((r21*x2761)));
evalcond[3]=(((r01*x2760))+(((-1.0)*x2755*x2758))+(((-1.0)*x2754))+((r02*x2753)));
evalcond[4]=(((r01*x2761))+(((-1.0)*x2755*x2759))+(((-1.0)*cj0))+(((-1.0)*r02*x2758)));
evalcond[5]=((((-1.0)*x2757*x2759))+(((-1.0)*r12*x2758))+(((-1.0)*x2754))+((r11*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2762.value)+(((1.5707963267949)*(x2763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKcos(j4);
IkReal x2765=IKsin(j4);
IkReal x2766=((1.0)*sj0);
IkReal x2767=(cj5*r00);
IkReal x2768=(cj5*r20);
IkReal x2769=(cj5*r10);
IkReal x2770=((1.0)*x2764);
IkReal x2771=((1.0)*x2765);
IkReal x2772=(sj5*x2764);
IkReal x2773=(sj5*x2765);
evalcond[0]=((((-1.0)*x2768*x2770))+((r21*x2772))+((r22*x2765)));
evalcond[1]=(((r12*x2765))+((r11*x2772))+cj0+(((-1.0)*x2769*x2770)));
evalcond[2]=((((-1.0)*x2768*x2771))+((r21*x2773))+(((-1.0)*r22*x2770)));
evalcond[3]=(((r01*x2772))+(((-1.0)*x2766))+(((-1.0)*x2767*x2770))+((r02*x2765)));
evalcond[4]=(((r01*x2773))+(((-1.0)*r02*x2770))+(((-1.0)*x2767*x2771))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x2773))+(((-1.0)*x2769*x2771))+(((-1.0)*r12*x2770))+(((-1.0)*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2774=IKsin(j0);
IkReal x2775=IKcos(j0);
evalcond[0]=((((0.265)*x2775))+(((-1.0)*px))+(((-0.113)*x2774)));
evalcond[1]=((((0.265)*x2774))+(((-1.0)*py))+(((0.113)*x2775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2776=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2776;
j4eval[1]=IKsign(x2776);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2777=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2777;
j4eval[1]=IKsign(x2777);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2778=cj5*cj5;
IkReal x2779=(r11*r21);
IkReal x2780=((1.0)*r20);
IkReal x2781=(cj5*sj5);
IkReal x2782=((((-1.0)*x2779))+(((-1.0)*r12*r22))+((x2778*x2779))+(((-1.0)*r10*x2778*x2780))+((r10*r21*x2781))+((r11*r20*x2781)));
j4eval[0]=x2782;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2780))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2782);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2783=cj5*cj5;
IkReal x2784=(r11*r21);
IkReal x2785=((1.0)*r20);
IkReal x2786=(cj5*sj5);
CheckValue<IkReal> x2787 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2785))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2787.valid){
continue;
}
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x2783*x2784))+(((-1.0)*x2784))+(((-1.0)*r10*x2783*x2785))+((r10*r21*x2786))+((r11*r20*x2786)))),-1);
if(!x2788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2787.value)+(((1.5707963267949)*(x2788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2789=IKcos(j4);
IkReal x2790=IKsin(j4);
IkReal x2791=((1.0)*sj0);
IkReal x2792=(cj5*r00);
IkReal x2793=(cj5*r20);
IkReal x2794=(cj5*r10);
IkReal x2795=((1.0)*x2789);
IkReal x2796=((1.0)*x2790);
IkReal x2797=(sj5*x2789);
IkReal x2798=(sj5*x2790);
evalcond[0]=(((r21*x2797))+((r22*x2790))+(((-1.0)*x2793*x2795)));
evalcond[1]=(cj0+((r12*x2790))+((r11*x2797))+(((-1.0)*x2794*x2795)));
evalcond[2]=(((r21*x2798))+(((-1.0)*r22*x2795))+(((-1.0)*x2793*x2796)));
evalcond[3]=((((-1.0)*x2791))+((r02*x2790))+((r01*x2797))+(((-1.0)*x2792*x2795)));
evalcond[4]=(((r01*x2798))+(((-1.0)*x2792*x2796))+(((-1.0)*cj0))+(((-1.0)*r02*x2795)));
evalcond[5]=((((-1.0)*x2791))+((r11*x2798))+(((-1.0)*r12*x2795))+(((-1.0)*x2794*x2796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2799 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2799.valid){
continue;
}
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2799.value)+(((1.5707963267949)*(x2800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2801=IKcos(j4);
IkReal x2802=IKsin(j4);
IkReal x2803=((1.0)*sj0);
IkReal x2804=(cj5*r00);
IkReal x2805=(cj5*r20);
IkReal x2806=(cj5*r10);
IkReal x2807=((1.0)*x2801);
IkReal x2808=((1.0)*x2802);
IkReal x2809=(sj5*x2801);
IkReal x2810=(sj5*x2802);
evalcond[0]=((((-1.0)*x2805*x2807))+((r21*x2809))+((r22*x2802)));
evalcond[1]=(((r12*x2802))+cj0+(((-1.0)*x2806*x2807))+((r11*x2809)));
evalcond[2]=((((-1.0)*x2805*x2808))+((r21*x2810))+(((-1.0)*r22*x2807)));
evalcond[3]=((((-1.0)*x2803))+((r02*x2802))+(((-1.0)*x2804*x2807))+((r01*x2809)));
evalcond[4]=(((r01*x2810))+(((-1.0)*x2804*x2808))+(((-1.0)*r02*x2807))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2803))+(((-1.0)*x2806*x2808))+(((-1.0)*r12*x2807))+((r11*x2810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
CheckValue<IkReal> x2812=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2811.value)+(((1.5707963267949)*(x2812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2813=IKcos(j4);
IkReal x2814=IKsin(j4);
IkReal x2815=((1.0)*sj0);
IkReal x2816=(cj5*r00);
IkReal x2817=(cj5*r20);
IkReal x2818=(cj5*r10);
IkReal x2819=((1.0)*x2813);
IkReal x2820=((1.0)*x2814);
IkReal x2821=(sj5*x2813);
IkReal x2822=(sj5*x2814);
evalcond[0]=(((r22*x2814))+((r21*x2821))+(((-1.0)*x2817*x2819)));
evalcond[1]=(cj0+(((-1.0)*x2818*x2819))+((r12*x2814))+((r11*x2821)));
evalcond[2]=((((-1.0)*x2817*x2820))+(((-1.0)*r22*x2819))+((r21*x2822)));
evalcond[3]=((((-1.0)*x2815))+((r01*x2821))+((r02*x2814))+(((-1.0)*x2816*x2819)));
evalcond[4]=((((-1.0)*r02*x2819))+(((-1.0)*x2816*x2820))+((r01*x2822))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2819))+(((-1.0)*x2815))+(((-1.0)*x2818*x2820))+((r11*x2822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2823=IKsin(j0);
IkReal x2824=IKcos(j0);
evalcond[0]=((((-0.113)*x2823))+(((-1.0)*px))+(((0.265)*x2824)));
evalcond[1]=((((0.113)*x2824))+(((-1.0)*py))+(((0.265)*x2823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2825=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2825;
j4eval[1]=IKsign(x2825);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2826=cj5*cj5;
IkReal x2827=(r11*r21);
IkReal x2828=((1.0)*r20);
IkReal x2829=(cj5*sj5);
IkReal x2830=((((-1.0)*r10*x2826*x2828))+(((-1.0)*r12*r22))+((r11*r20*x2829))+(((-1.0)*x2827))+((r10*r21*x2829))+((x2826*x2827)));
j4eval[0]=x2830;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2828))))));
j4eval[2]=IKsign(x2830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2831=cj5*cj5;
IkReal x2832=((1.0)*r20);
IkReal x2833=(r01*r21);
IkReal x2834=(r21*sj5);
IkReal x2835=(((cj5*r01*r20*sj5))+(((-1.0)*x2833))+(((-1.0)*r02*r22))+(((-1.0)*r00*x2831*x2832))+((cj5*r00*x2834))+((x2831*x2833)));
j4eval[0]=x2835;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2832))+((cj0*x2834)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2836=cj5*cj5;
IkReal x2837=((1.0)*r20);
IkReal x2838=(r01*r21);
IkReal x2839=(r21*sj5);
CheckValue<IkReal> x2840 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2837))+((cj0*x2839)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2840.valid){
continue;
}
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x2836*x2838))+(((-1.0)*x2838))+(((-1.0)*r02*r22))+((cj5*r00*x2839))+(((-1.0)*r00*x2836*x2837)))),-1);
if(!x2841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2840.value)+(((1.5707963267949)*(x2841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2842=IKcos(j4);
IkReal x2843=IKsin(j4);
IkReal x2844=(cj5*r00);
IkReal x2845=(cj5*r20);
IkReal x2846=(cj5*r10);
IkReal x2847=(r21*sj5);
IkReal x2848=((1.0)*x2842);
IkReal x2849=((1.0)*x2843);
IkReal x2850=(sj5*x2842);
IkReal x2851=(sj5*x2843);
evalcond[0]=((((-1.0)*x2845*x2848))+((x2842*x2847))+((r22*x2843)));
evalcond[1]=((((-1.0)*x2846*x2848))+cj0+((r11*x2850))+((r12*x2843)));
evalcond[2]=((((-1.0)*x2845*x2849))+((x2843*x2847))+(((-1.0)*r22*x2848)));
evalcond[3]=(cj0+(((-1.0)*r02*x2848))+(((-1.0)*x2844*x2849))+((r01*x2851)));
evalcond[4]=((((-1.0)*x2846*x2849))+sj0+(((-1.0)*r12*x2848))+((r11*x2851)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2844*x2848))+((r01*x2850))+((r02*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2852=cj5*cj5;
IkReal x2853=(r11*r21);
IkReal x2854=((1.0)*r20);
IkReal x2855=(cj5*sj5);
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x2852*x2854))+((x2852*x2853))+((r10*r21*x2855))+(((-1.0)*x2853))+((r11*r20*x2855)))),-1);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2854))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2856.value)))+(x2857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2858=IKcos(j4);
IkReal x2859=IKsin(j4);
IkReal x2860=(cj5*r00);
IkReal x2861=(cj5*r20);
IkReal x2862=(cj5*r10);
IkReal x2863=(r21*sj5);
IkReal x2864=((1.0)*x2858);
IkReal x2865=((1.0)*x2859);
IkReal x2866=(sj5*x2858);
IkReal x2867=(sj5*x2859);
evalcond[0]=((((-1.0)*x2861*x2864))+((x2858*x2863))+((r22*x2859)));
evalcond[1]=((((-1.0)*x2862*x2864))+cj0+((r12*x2859))+((r11*x2866)));
evalcond[2]=((((-1.0)*x2861*x2865))+(((-1.0)*r22*x2864))+((x2859*x2863)));
evalcond[3]=((((-1.0)*r02*x2864))+cj0+(((-1.0)*x2860*x2865))+((r01*x2867)));
evalcond[4]=((((-1.0)*r12*x2864))+(((-1.0)*x2862*x2865))+sj0+((r11*x2867)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2860*x2864))+((r02*x2859))+((r01*x2866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
CheckValue<IkReal> x2869=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2868.value)+(((1.5707963267949)*(x2869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2870=IKcos(j4);
IkReal x2871=IKsin(j4);
IkReal x2872=(cj5*r00);
IkReal x2873=(cj5*r20);
IkReal x2874=(cj5*r10);
IkReal x2875=(r21*sj5);
IkReal x2876=((1.0)*x2870);
IkReal x2877=((1.0)*x2871);
IkReal x2878=(sj5*x2870);
IkReal x2879=(sj5*x2871);
evalcond[0]=(((r22*x2871))+((x2870*x2875))+(((-1.0)*x2873*x2876)));
evalcond[1]=(cj0+((r11*x2878))+(((-1.0)*x2874*x2876))+((r12*x2871)));
evalcond[2]=((((-1.0)*r22*x2876))+((x2871*x2875))+(((-1.0)*x2873*x2877)));
evalcond[3]=(cj0+(((-1.0)*r02*x2876))+((r01*x2879))+(((-1.0)*x2872*x2877)));
evalcond[4]=(sj0+((r11*x2879))+(((-1.0)*x2874*x2877))+(((-1.0)*r12*x2876)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2878))+((r02*x2871))+(((-1.0)*x2872*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2880=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2880;
j4eval[1]=IKsign(x2880);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2881=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2881;
j4eval[1]=IKsign(x2881);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2882=cj5*cj5;
IkReal x2883=(r11*r21);
IkReal x2884=((1.0)*r20);
IkReal x2885=(cj5*sj5);
IkReal x2886=((((-1.0)*r12*r22))+(((-1.0)*x2883))+(((-1.0)*r10*x2882*x2884))+((r10*r21*x2885))+((r11*r20*x2885))+((x2882*x2883)));
j4eval[0]=x2886;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2884)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2886);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2887=cj5*cj5;
IkReal x2888=(r11*r21);
IkReal x2889=((1.0)*r20);
IkReal x2890=(cj5*sj5);
CheckValue<IkReal> x2891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2891.valid){
continue;
}
CheckValue<IkReal> x2892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2887*x2889))+(((-1.0)*r12*r22))+(((-1.0)*x2888))+((x2887*x2888))+((r11*r20*x2890))+((r10*r21*x2890)))),-1);
if(!x2892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2891.value)+(((1.5707963267949)*(x2892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2893=IKcos(j4);
IkReal x2894=IKsin(j4);
IkReal x2895=((1.0)*sj0);
IkReal x2896=(cj5*r00);
IkReal x2897=(cj5*r20);
IkReal x2898=(cj5*r10);
IkReal x2899=((1.0)*x2893);
IkReal x2900=((1.0)*x2894);
IkReal x2901=(sj5*x2893);
IkReal x2902=(sj5*x2894);
evalcond[0]=(((r21*x2901))+((r22*x2894))+(((-1.0)*x2897*x2899)));
evalcond[1]=(cj0+((r12*x2894))+(((-1.0)*x2898*x2899))+((r11*x2901)));
evalcond[2]=((((-1.0)*r22*x2899))+((r21*x2902))+(((-1.0)*x2897*x2900)));
evalcond[3]=(((r01*x2901))+(((-1.0)*x2896*x2899))+(((-1.0)*x2895))+((r02*x2894)));
evalcond[4]=((((-1.0)*r02*x2899))+((r01*x2902))+(((-1.0)*x2896*x2900))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2898*x2900))+(((-1.0)*x2895))+((r11*x2902))+(((-1.0)*r12*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2903.value)+(((1.5707963267949)*(x2904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2905=IKcos(j4);
IkReal x2906=IKsin(j4);
IkReal x2907=((1.0)*sj0);
IkReal x2908=(cj5*r00);
IkReal x2909=(cj5*r20);
IkReal x2910=(cj5*r10);
IkReal x2911=((1.0)*x2905);
IkReal x2912=((1.0)*x2906);
IkReal x2913=(sj5*x2905);
IkReal x2914=(sj5*x2906);
evalcond[0]=(((r22*x2906))+((r21*x2913))+(((-1.0)*x2909*x2911)));
evalcond[1]=(((r11*x2913))+cj0+(((-1.0)*x2910*x2911))+((r12*x2906)));
evalcond[2]=(((r21*x2914))+(((-1.0)*x2909*x2912))+(((-1.0)*r22*x2911)));
evalcond[3]=(((r02*x2906))+((r01*x2913))+(((-1.0)*x2907))+(((-1.0)*x2908*x2911)));
evalcond[4]=(((r01*x2914))+(((-1.0)*x2908*x2912))+(((-1.0)*r02*x2911))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x2914))+(((-1.0)*r12*x2911))+(((-1.0)*x2907))+(((-1.0)*x2910*x2912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
CheckValue<IkReal> x2916=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2915.value)+(((1.5707963267949)*(x2916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2917=IKcos(j4);
IkReal x2918=IKsin(j4);
IkReal x2919=((1.0)*sj0);
IkReal x2920=(cj5*r00);
IkReal x2921=(cj5*r20);
IkReal x2922=(cj5*r10);
IkReal x2923=((1.0)*x2917);
IkReal x2924=((1.0)*x2918);
IkReal x2925=(sj5*x2917);
IkReal x2926=(sj5*x2918);
evalcond[0]=((((-1.0)*x2921*x2923))+((r21*x2925))+((r22*x2918)));
evalcond[1]=(((r12*x2918))+cj0+((r11*x2925))+(((-1.0)*x2922*x2923)));
evalcond[2]=((((-1.0)*x2921*x2924))+((r21*x2926))+(((-1.0)*r22*x2923)));
evalcond[3]=((((-1.0)*x2920*x2923))+((r01*x2925))+((r02*x2918))+(((-1.0)*x2919)));
evalcond[4]=((((-1.0)*x2920*x2924))+(((-1.0)*r02*x2923))+((r01*x2926))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2923))+((r11*x2926))+(((-1.0)*x2919))+(((-1.0)*x2922*x2924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.84955752212389)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.84955752212389)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.84955752212389)*px))+IKsqr(((8.84955752212389)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.84955752212389)*px), ((8.84955752212389)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.113)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.113)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2927=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2927;
j4eval[1]=IKsign(x2927);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2928=cj5*cj5;
IkReal x2929=(r11*r21);
IkReal x2930=((1.0)*r20);
IkReal x2931=(cj5*sj5);
IkReal x2932=((((-1.0)*r10*x2928*x2930))+((x2928*x2929))+(((-1.0)*r12*r22))+((r11*r20*x2931))+((r10*r21*x2931))+(((-1.0)*x2929)));
j4eval[0]=x2932;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2930))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2933=cj5*cj5;
IkReal x2934=((1.0)*r20);
IkReal x2935=(r01*r21);
IkReal x2936=(r21*sj5);
IkReal x2937=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x2936))+(((-1.0)*r00*x2933*x2934))+((x2933*x2935))+(((-1.0)*x2935)));
j4eval[0]=x2937;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2934))+((cj0*x2936)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2938=cj5*cj5;
IkReal x2939=((1.0)*r20);
IkReal x2940=(r01*r21);
IkReal x2941=(r21*sj5);
CheckValue<IkReal> x2942 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2939))+((cj0*x2941)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x2940))+(((-1.0)*r02*r22))+((cj5*r00*x2941))+(((-1.0)*r00*x2938*x2939))+((x2938*x2940)))),-1);
if(!x2943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2942.value)+(((1.5707963267949)*(x2943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2944=IKcos(j4);
IkReal x2945=IKsin(j4);
IkReal x2946=(cj5*r00);
IkReal x2947=(cj5*r20);
IkReal x2948=(cj5*r10);
IkReal x2949=(r21*sj5);
IkReal x2950=((1.0)*x2944);
IkReal x2951=((1.0)*x2945);
IkReal x2952=(sj5*x2944);
IkReal x2953=(sj5*x2945);
evalcond[0]=((((-1.0)*x2947*x2950))+((r22*x2945))+((x2944*x2949)));
evalcond[1]=((((-1.0)*x2948*x2950))+cj0+((r12*x2945))+((r11*x2952)));
evalcond[2]=((((-1.0)*x2947*x2951))+((x2945*x2949))+(((-1.0)*r22*x2950)));
evalcond[3]=((((-1.0)*r02*x2950))+cj0+((r01*x2953))+(((-1.0)*x2946*x2951)));
evalcond[4]=((((-1.0)*x2948*x2951))+sj0+(((-1.0)*r12*x2950))+((r11*x2953)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2945))+((r01*x2952))+(((-1.0)*x2946*x2950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2954=cj5*cj5;
IkReal x2955=(r11*r21);
IkReal x2956=((1.0)*r20);
IkReal x2957=(cj5*sj5);
CheckValue<IkReal> x2958=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2955))+((x2954*x2955))+((r11*r20*x2957))+(((-1.0)*r12*r22))+((r10*r21*x2957))+(((-1.0)*r10*x2954*x2956)))),-1);
if(!x2958.valid){
continue;
}
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2958.value)))+(x2959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2960=IKcos(j4);
IkReal x2961=IKsin(j4);
IkReal x2962=(cj5*r00);
IkReal x2963=(cj5*r20);
IkReal x2964=(cj5*r10);
IkReal x2965=(r21*sj5);
IkReal x2966=((1.0)*x2960);
IkReal x2967=((1.0)*x2961);
IkReal x2968=(sj5*x2960);
IkReal x2969=(sj5*x2961);
evalcond[0]=((((-1.0)*x2963*x2966))+((r22*x2961))+((x2960*x2965)));
evalcond[1]=(cj0+((r11*x2968))+((r12*x2961))+(((-1.0)*x2964*x2966)));
evalcond[2]=((((-1.0)*x2963*x2967))+((x2961*x2965))+(((-1.0)*r22*x2966)));
evalcond[3]=(cj0+(((-1.0)*r02*x2966))+(((-1.0)*x2962*x2967))+((r01*x2969)));
evalcond[4]=(sj0+((r11*x2969))+(((-1.0)*x2964*x2967))+(((-1.0)*r12*x2966)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2961))+(((-1.0)*x2962*x2966))+((r01*x2968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2970.value)+(((1.5707963267949)*(x2971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2972=IKcos(j4);
IkReal x2973=IKsin(j4);
IkReal x2974=(cj5*r00);
IkReal x2975=(cj5*r20);
IkReal x2976=(cj5*r10);
IkReal x2977=(r21*sj5);
IkReal x2978=((1.0)*x2972);
IkReal x2979=((1.0)*x2973);
IkReal x2980=(sj5*x2972);
IkReal x2981=(sj5*x2973);
evalcond[0]=((((-1.0)*x2975*x2978))+((r22*x2973))+((x2972*x2977)));
evalcond[1]=(cj0+((r11*x2980))+(((-1.0)*x2976*x2978))+((r12*x2973)));
evalcond[2]=((((-1.0)*x2975*x2979))+(((-1.0)*r22*x2978))+((x2973*x2977)));
evalcond[3]=(cj0+(((-1.0)*r02*x2978))+(((-1.0)*x2974*x2979))+((r01*x2981)));
evalcond[4]=(sj0+((r11*x2981))+(((-1.0)*r12*x2978))+(((-1.0)*x2976*x2979)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2973))+(((-1.0)*x2974*x2978))+((r01*x2980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((-3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((-3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2982=IKcos(j0);
IkReal x2983=IKsin(j0);
evalcond[0]=((((-0.265)*x2982))+(((-1.0)*px))+(((-0.113)*x2983)));
evalcond[1]=((((0.113)*x2982))+(((-0.265)*x2983))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2984=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2984;
j4eval[1]=IKsign(x2984);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2985=cj5*cj5;
IkReal x2986=(r11*r21);
IkReal x2987=((1.0)*r20);
IkReal x2988=(cj5*sj5);
IkReal x2989=((((-1.0)*r12*r22))+(((-1.0)*x2986))+(((-1.0)*r10*x2985*x2987))+((r10*r21*x2988))+((r11*r20*x2988))+((x2985*x2986)));
j4eval[0]=x2989;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2987))))));
j4eval[2]=IKsign(x2989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2990=cj5*cj5;
IkReal x2991=((1.0)*r20);
IkReal x2992=(r01*r21);
IkReal x2993=(r21*sj5);
IkReal x2994=(((cj5*r01*r20*sj5))+((x2990*x2992))+(((-1.0)*r02*r22))+(((-1.0)*x2992))+((cj5*r00*x2993))+(((-1.0)*r00*x2990*x2991)));
j4eval[0]=x2994;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x2993))+(((-1.0)*cj0*cj5*x2991))))));
j4eval[2]=IKsign(x2994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2995=cj5*cj5;
IkReal x2996=((1.0)*r20);
IkReal x2997=(r01*r21);
IkReal x2998=(r21*sj5);
CheckValue<IkReal> x2999 = IKatan2WithCheck(IkReal((((cj0*x2998))+(((-1.0)*cj0*cj5*x2996)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x2995*x2996))+((x2995*x2997))+(((-1.0)*r02*r22))+(((-1.0)*x2997))+((cj5*r00*x2998)))),-1);
if(!x3000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2999.value)+(((1.5707963267949)*(x3000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3001=IKcos(j4);
IkReal x3002=IKsin(j4);
IkReal x3003=(cj5*r00);
IkReal x3004=(cj5*r20);
IkReal x3005=(cj5*r10);
IkReal x3006=(r21*sj5);
IkReal x3007=((1.0)*x3001);
IkReal x3008=((1.0)*x3002);
IkReal x3009=(sj5*x3001);
IkReal x3010=(sj5*x3002);
evalcond[0]=(((r22*x3002))+((x3001*x3006))+(((-1.0)*x3004*x3007)));
evalcond[1]=(cj0+((r12*x3002))+((r11*x3009))+(((-1.0)*x3005*x3007)));
evalcond[2]=((((-1.0)*r22*x3007))+((x3002*x3006))+(((-1.0)*x3004*x3008)));
evalcond[3]=(((r01*x3010))+cj0+(((-1.0)*x3003*x3008))+(((-1.0)*r02*x3007)));
evalcond[4]=(sj0+(((-1.0)*r12*x3007))+((r11*x3010))+(((-1.0)*x3005*x3008)));
evalcond[5]=(((r01*x3009))+(((-1.0)*sj0))+(((-1.0)*x3003*x3007))+((r02*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3011=cj5*cj5;
IkReal x3012=(r11*r21);
IkReal x3013=((1.0)*r20);
IkReal x3014=(cj5*sj5);
CheckValue<IkReal> x3015 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3015.valid){
continue;
}
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(IKsign((((x3011*x3012))+((r10*r21*x3014))+(((-1.0)*r12*r22))+((r11*r20*x3014))+(((-1.0)*r10*x3011*x3013))+(((-1.0)*x3012)))),-1);
if(!x3016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3015.value)+(((1.5707963267949)*(x3016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3017=IKcos(j4);
IkReal x3018=IKsin(j4);
IkReal x3019=(cj5*r00);
IkReal x3020=(cj5*r20);
IkReal x3021=(cj5*r10);
IkReal x3022=(r21*sj5);
IkReal x3023=((1.0)*x3017);
IkReal x3024=((1.0)*x3018);
IkReal x3025=(sj5*x3017);
IkReal x3026=(sj5*x3018);
evalcond[0]=(((x3017*x3022))+(((-1.0)*x3020*x3023))+((r22*x3018)));
evalcond[1]=(((r11*x3025))+cj0+(((-1.0)*x3021*x3023))+((r12*x3018)));
evalcond[2]=((((-1.0)*x3020*x3024))+((x3018*x3022))+(((-1.0)*r22*x3023)));
evalcond[3]=(cj0+(((-1.0)*x3019*x3024))+((r01*x3026))+(((-1.0)*r02*x3023)));
evalcond[4]=((((-1.0)*r12*x3023))+sj0+((r11*x3026))+(((-1.0)*x3021*x3024)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3019*x3023))+((r01*x3025))+((r02*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
CheckValue<IkReal> x3028=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3027.value)+(((1.5707963267949)*(x3028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3029=IKcos(j4);
IkReal x3030=IKsin(j4);
IkReal x3031=(cj5*r00);
IkReal x3032=(cj5*r20);
IkReal x3033=(cj5*r10);
IkReal x3034=(r21*sj5);
IkReal x3035=((1.0)*x3029);
IkReal x3036=((1.0)*x3030);
IkReal x3037=(sj5*x3029);
IkReal x3038=(sj5*x3030);
evalcond[0]=(((r22*x3030))+(((-1.0)*x3032*x3035))+((x3029*x3034)));
evalcond[1]=(cj0+((r11*x3037))+((r12*x3030))+(((-1.0)*x3033*x3035)));
evalcond[2]=(((x3030*x3034))+(((-1.0)*r22*x3035))+(((-1.0)*x3032*x3036)));
evalcond[3]=(cj0+((r01*x3038))+(((-1.0)*r02*x3035))+(((-1.0)*x3031*x3036)));
evalcond[4]=(sj0+((r11*x3038))+(((-1.0)*x3033*x3036))+(((-1.0)*r12*x3035)));
evalcond[5]=(((r02*x3030))+(((-1.0)*sj0))+((r01*x3037))+(((-1.0)*x3031*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.19300190375208)*py))+(((-1.36154420801504)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.19300190375208)*px))+(((1.36154420801504)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))))+IKsqr(((((-3.19300190375208)*px))+(((1.36154420801504)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.19300190375208)*py))+(((-1.36154420801504)*px))), ((((-3.19300190375208)*px))+(((1.36154420801504)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3039=IKcos(j0);
IkReal x3040=IKsin(j0);
evalcond[0]=((((-0.265)*x3039))+(((-0.113)*x3040))+(((-1.0)*px)));
evalcond[1]=((((0.113)*x3039))+(((-1.0)*py))+(((-0.265)*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3041=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3041;
j4eval[1]=IKsign(x3041);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3042;
j4eval[1]=IKsign(x3042);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3043=cj5*cj5;
IkReal x3044=(r11*r21);
IkReal x3045=((1.0)*r20);
IkReal x3046=(cj5*sj5);
IkReal x3047=(((x3043*x3044))+((r11*r20*x3046))+(((-1.0)*r12*r22))+((r10*r21*x3046))+(((-1.0)*x3044))+(((-1.0)*r10*x3043*x3045)));
j4eval[0]=x3047;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3045)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3048=cj5*cj5;
IkReal x3049=(r11*r21);
IkReal x3050=((1.0)*r20);
IkReal x3051=(cj5*sj5);
CheckValue<IkReal> x3052 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3050))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3052.valid){
continue;
}
CheckValue<IkReal> x3053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x3048*x3049))+(((-1.0)*r10*x3048*x3050))+((r11*r20*x3051))+(((-1.0)*x3049))+((r10*r21*x3051)))),-1);
if(!x3053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3052.value)+(((1.5707963267949)*(x3053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3054=IKcos(j4);
IkReal x3055=IKsin(j4);
IkReal x3056=((1.0)*sj0);
IkReal x3057=(cj5*r00);
IkReal x3058=(cj5*r20);
IkReal x3059=(cj5*r10);
IkReal x3060=((1.0)*x3054);
IkReal x3061=((1.0)*x3055);
IkReal x3062=(sj5*x3054);
IkReal x3063=(sj5*x3055);
evalcond[0]=((((-1.0)*x3058*x3060))+((r22*x3055))+((r21*x3062)));
evalcond[1]=(cj0+((r12*x3055))+((r11*x3062))+(((-1.0)*x3059*x3060)));
evalcond[2]=((((-1.0)*r22*x3060))+(((-1.0)*x3058*x3061))+((r21*x3063)));
evalcond[3]=(((r02*x3055))+((r01*x3062))+(((-1.0)*x3056))+(((-1.0)*x3057*x3060)));
evalcond[4]=(((r01*x3063))+(((-1.0)*r02*x3060))+(((-1.0)*x3057*x3061))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x3060))+((r11*x3063))+(((-1.0)*x3056))+(((-1.0)*x3059*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3064 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3064.valid){
continue;
}
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3064.value)+(((1.5707963267949)*(x3065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3066=IKcos(j4);
IkReal x3067=IKsin(j4);
IkReal x3068=((1.0)*sj0);
IkReal x3069=(cj5*r00);
IkReal x3070=(cj5*r20);
IkReal x3071=(cj5*r10);
IkReal x3072=((1.0)*x3066);
IkReal x3073=((1.0)*x3067);
IkReal x3074=(sj5*x3066);
IkReal x3075=(sj5*x3067);
evalcond[0]=(((r22*x3067))+(((-1.0)*x3070*x3072))+((r21*x3074)));
evalcond[1]=(cj0+(((-1.0)*x3071*x3072))+((r11*x3074))+((r12*x3067)));
evalcond[2]=((((-1.0)*r22*x3072))+(((-1.0)*x3070*x3073))+((r21*x3075)));
evalcond[3]=(((r01*x3074))+(((-1.0)*x3068))+(((-1.0)*x3069*x3072))+((r02*x3067)));
evalcond[4]=(((r01*x3075))+(((-1.0)*r02*x3072))+(((-1.0)*x3069*x3073))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3068))+(((-1.0)*r12*x3072))+(((-1.0)*x3071*x3073))+((r11*x3075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3076 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3076.valid){
continue;
}
CheckValue<IkReal> x3077=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3076.value)+(((1.5707963267949)*(x3077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3078=IKcos(j4);
IkReal x3079=IKsin(j4);
IkReal x3080=((1.0)*sj0);
IkReal x3081=(cj5*r00);
IkReal x3082=(cj5*r20);
IkReal x3083=(cj5*r10);
IkReal x3084=((1.0)*x3078);
IkReal x3085=((1.0)*x3079);
IkReal x3086=(sj5*x3078);
IkReal x3087=(sj5*x3079);
evalcond[0]=((((-1.0)*x3082*x3084))+((r22*x3079))+((r21*x3086)));
evalcond[1]=(cj0+(((-1.0)*x3083*x3084))+((r11*x3086))+((r12*x3079)));
evalcond[2]=((((-1.0)*x3082*x3085))+((r21*x3087))+(((-1.0)*r22*x3084)));
evalcond[3]=((((-1.0)*x3080))+((r01*x3086))+((r02*x3079))+(((-1.0)*x3081*x3084)));
evalcond[4]=((((-1.0)*r02*x3084))+((r01*x3087))+(((-1.0)*cj0))+(((-1.0)*x3081*x3085)));
evalcond[5]=((((-1.0)*x3080))+(((-1.0)*x3083*x3085))+((r11*x3087))+(((-1.0)*r12*x3084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3088=(cj1*sj2);
IkReal x3089=(r00*sj5);
IkReal x3090=((1000.0)*px);
IkReal x3091=(cj2*sj1);
IkReal x3092=(cj5*r01);
IkReal x3093=((265.0)*sj1);
IkReal x3094=((143.0)*x3092);
CheckValue<IkReal> x3095=IKPowWithIntegerCheck(((((113.0)*x3088))+(((113.0)*x3091))),-1);
if(!x3095.valid){
continue;
}
CheckValue<IkReal> x3096=IKPowWithIntegerCheck((x3088+x3091),-1);
if(!x3096.valid){
continue;
}
if( IKabs(((x3095.value)*((((x3088*x3094))+((x3092*x3093))+((x3091*x3094))+(((143.0)*x3089*x3091))+((x3089*x3093))+(((-1.0)*x3088*x3090))+(((-1.0)*x3090*x3091))+(((143.0)*x3088*x3089)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3096.value)*((x3089+x3092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3095.value)*((((x3088*x3094))+((x3092*x3093))+((x3091*x3094))+(((143.0)*x3089*x3091))+((x3089*x3093))+(((-1.0)*x3088*x3090))+(((-1.0)*x3090*x3091))+(((143.0)*x3088*x3089))))))+IKsqr(((x3096.value)*((x3089+x3092))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3095.value)*((((x3088*x3094))+((x3092*x3093))+((x3091*x3094))+(((143.0)*x3089*x3091))+((x3089*x3093))+(((-1.0)*x3088*x3090))+(((-1.0)*x3090*x3091))+(((143.0)*x3088*x3089))))), ((x3096.value)*((x3089+x3092))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3097=IKcos(j0);
IkReal x3098=IKsin(j0);
IkReal x3099=(cj1*sj2);
IkReal x3100=(r00*sj5);
IkReal x3101=(cj5*r11);
IkReal x3102=(cj2*sj1);
IkReal x3103=(r10*sj5);
IkReal x3104=(cj5*r01);
IkReal x3105=(sj1*x3098);
IkReal x3106=((0.238)*x3097);
evalcond[0]=(((x3097*x3102))+(((-1.0)*x3100))+(((-1.0)*x3104))+((x3097*x3099)));
evalcond[1]=(((x3098*x3099))+((x3098*x3102))+(((-1.0)*x3103))+(((-1.0)*x3101)));
evalcond[2]=(((x3099*x3106))+(((-0.095)*x3104))+(((-0.095)*x3100))+(((-0.113)*x3098))+(((-1.0)*px))+((x3102*x3106))+(((0.265)*sj1*x3097)));
evalcond[3]=((((-0.095)*x3101))+(((-0.095)*x3103))+(((0.265)*x3105))+(((-1.0)*py))+(((0.238)*x3098*x3099))+(((0.113)*x3097))+(((0.238)*x3098*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3107=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3107;
j4eval[1]=IKsign(x3107);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3108=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3108;
j4eval[1]=IKsign(x3108);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3109=((1.0)*sj0);
IkReal x3110=((1.0)*cj0);
IkReal x3111=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3111;
j4eval[1]=((IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x3110))+(((-1.0)*cj5*r10*x3109)))))+(IKabs(((((-1.0)*r02*x3110))+(((-1.0)*r12*x3109))))));
j4eval[2]=IKsign(x3111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3112=((-1.0)*r20);
IkReal x3114 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3114)==0){
continue;
}
IkReal x3113=pow(x3114,-0.5);
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3112),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3115.value));
IkReal gconst97=(r21*x3113);
IkReal gconst98=(x3112*x3113);
CheckValue<IkReal> x3116 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3116.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3116.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3117=((-1.0)*r20);
IkReal x3118=x3113;
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3117),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
IkReal x3119=((-1.0)*(x3120.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3119;
IkReal gconst96=x3119;
IkReal gconst97=(r21*x3118);
IkReal gconst98=(x3117*x3118);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3121=((-1.0)*r20);
IkReal x3122=x3113;
CheckValue<IkReal> x3124 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3121),IKFAST_ATAN2_MAGTHRESH);
if(!x3124.valid){
continue;
}
IkReal x3123=((-1.0)*(x3124.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3123;
IkReal gconst96=x3123;
IkReal gconst97=(r21*x3122);
IkReal gconst98=(x3121*x3122);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3125=((-1.0)*r20);
IkReal x3126=x3113;
CheckValue<IkReal> x3128 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3125),IKFAST_ATAN2_MAGTHRESH);
if(!x3128.valid){
continue;
}
IkReal x3127=((-1.0)*(x3128.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3127;
IkReal gconst96=x3127;
IkReal gconst97=(r21*x3126);
IkReal gconst98=(x3125*x3126);
IkReal x3129=((1.0)*(r22*r22));
CheckValue<IkReal> x3133=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3129))),-1);
if(!x3133.valid){
continue;
}
IkReal x3130=x3133.value;
IkReal x3131=((1.0)*x3130);
IkReal x3132=((((-1.0)*x3131*(r20*r20*r20*r20)))+(((-1.0)*x3131*(r21*r21*r21*r21)))+(((-2.0)*x3130*(r20*r20)*(r21*r21)))+(((-1.0)*x3129)));
j4eval[0]=x3132;
j4eval[1]=IKsign(x3132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3134=(cj2*sj1);
IkReal x3135=(gconst98*r20);
IkReal x3136=(cj1*sj2);
IkReal x3137=((1.0)*gconst97*r21);
CheckValue<IkReal> x3138=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3135*x3135)))+(((2.0)*gconst97*r21*x3135))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x3137)))),-1);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139 = IKatan2WithCheck(IkReal(((((-1.0)*x3136*x3137))+((x3134*x3135))+(((-1.0)*x3134*x3137))+((x3135*x3136)))),IkReal((((r22*x3134))+((r22*x3136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3138.value)))+(x3139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3140=IKcos(j4);
IkReal x3141=IKsin(j4);
IkReal x3142=(gconst98*r10);
IkReal x3143=(gconst97*r21);
IkReal x3144=(gconst98*r20);
IkReal x3145=(cj1*cj2);
IkReal x3146=((1.0)*sj1);
IkReal x3147=(gconst98*r00);
IkReal x3148=((1.0)*x3140);
IkReal x3149=((1.0)*x3141);
IkReal x3150=(gconst97*x3141);
IkReal x3151=(gconst97*x3140);
evalcond[0]=(((r22*x3141))+(((-1.0)*x3144*x3148))+((x3140*x3143)));
evalcond[1]=((((-1.0)*x3142*x3148))+cj0+((r12*x3141))+((r11*x3151)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3147*x3148))+((r02*x3141))+((r01*x3151)));
evalcond[3]=((((-1.0)*r22*x3148))+(((-1.0)*x3144*x3149))+(((-1.0)*cj1*sj2))+((x3141*x3143))+(((-1.0)*cj2*x3146)));
evalcond[4]=((((-1.0)*x3147*x3149))+((cj0*x3145))+(((-1.0)*r02*x3148))+((r01*x3150))+(((-1.0)*cj0*sj2*x3146)));
evalcond[5]=((((-1.0)*r12*x3148))+(((-1.0)*sj0*sj2*x3146))+(((-1.0)*x3142*x3149))+((r11*x3150))+((sj0*x3145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3152 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3152.value)+(((1.5707963267949)*(x3153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKcos(j4);
IkReal x3155=IKsin(j4);
IkReal x3156=(gconst98*r10);
IkReal x3157=(gconst97*r21);
IkReal x3158=(gconst98*r20);
IkReal x3159=(cj1*cj2);
IkReal x3160=((1.0)*sj1);
IkReal x3161=(gconst98*r00);
IkReal x3162=((1.0)*x3154);
IkReal x3163=((1.0)*x3155);
IkReal x3164=(gconst97*x3155);
IkReal x3165=(gconst97*x3154);
evalcond[0]=(((r22*x3155))+(((-1.0)*x3158*x3162))+((x3154*x3157)));
evalcond[1]=(cj0+((r11*x3165))+(((-1.0)*x3156*x3162))+((r12*x3155)));
evalcond[2]=((((-1.0)*x3161*x3162))+(((-1.0)*sj0))+((r02*x3155))+((r01*x3165)));
evalcond[3]=(((x3155*x3157))+(((-1.0)*x3158*x3163))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3160))+(((-1.0)*r22*x3162)));
evalcond[4]=((((-1.0)*x3161*x3163))+((cj0*x3159))+((r01*x3164))+(((-1.0)*r02*x3162))+(((-1.0)*cj0*sj2*x3160)));
evalcond[5]=((((-1.0)*r12*x3162))+((r11*x3164))+(((-1.0)*x3156*x3163))+(((-1.0)*sj0*sj2*x3160))+((sj0*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3166 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3166.valid){
continue;
}
CheckValue<IkReal> x3167=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3166.value)+(((1.5707963267949)*(x3167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3168=IKcos(j4);
IkReal x3169=IKsin(j4);
IkReal x3170=(gconst98*r10);
IkReal x3171=(gconst97*r21);
IkReal x3172=(gconst98*r20);
IkReal x3173=(cj1*cj2);
IkReal x3174=((1.0)*sj1);
IkReal x3175=(gconst98*r00);
IkReal x3176=((1.0)*x3168);
IkReal x3177=((1.0)*x3169);
IkReal x3178=(gconst97*x3169);
IkReal x3179=(gconst97*x3168);
evalcond[0]=(((r22*x3169))+((x3168*x3171))+(((-1.0)*x3172*x3176)));
evalcond[1]=(((r11*x3179))+cj0+((r12*x3169))+(((-1.0)*x3170*x3176)));
evalcond[2]=(((r02*x3169))+(((-1.0)*sj0))+((r01*x3179))+(((-1.0)*x3175*x3176)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x3172*x3177))+(((-1.0)*cj2*x3174))+(((-1.0)*r22*x3176))+((x3169*x3171)));
evalcond[4]=((((-1.0)*cj0*sj2*x3174))+((cj0*x3173))+((r01*x3178))+(((-1.0)*r02*x3176))+(((-1.0)*x3175*x3177)));
evalcond[5]=(((r11*x3178))+((sj0*x3173))+(((-1.0)*r12*x3176))+(((-1.0)*sj0*sj2*x3174))+(((-1.0)*x3170*x3177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3180=((-1.0)*r21);
IkReal x3182 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3182)==0){
continue;
}
IkReal x3181=pow(x3182,-0.5);
CheckValue<IkReal> x3183 = IKatan2WithCheck(IkReal(x3180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3183.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3183.value))));
IkReal gconst100=(x3180*x3181);
IkReal gconst101=((1.0)*r20*x3181);
CheckValue<IkReal> x3184 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3184.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3184.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3185=((-1.0)*r21);
CheckValue<IkReal> x3188 = IKatan2WithCheck(IkReal(x3185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3188.valid){
continue;
}
IkReal x3186=((1.0)*(x3188.value));
IkReal x3187=x3181;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3186)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3186)));
IkReal gconst100=(x3185*x3187);
IkReal gconst101=((1.0)*r20*x3187);
IkReal x3189=r22*r22;
IkReal x3190=((1.0)*x3189);
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(((-1.0)+x3189),-1);
if(!x3194.valid){
continue;
}
IkReal x3191=x3194.value;
if((((1.0)+(((-1.0)*x3190)))) < -0.00001)
continue;
IkReal x3192=IKsqrt(((1.0)+(((-1.0)*x3190))));
IkReal x3193=(cj0*x3191*x3192);
j4eval[0]=((IKabs(((((-1.0)*x3190*x3193))+x3193)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3195=((-1.0)*r21);
CheckValue<IkReal> x3198 = IKatan2WithCheck(IkReal(x3195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3198.valid){
continue;
}
IkReal x3196=((1.0)*(x3198.value));
IkReal x3197=x3181;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3196)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3196)));
IkReal gconst100=(x3195*x3197);
IkReal gconst101=((1.0)*r20*x3197);
IkReal x3199=r22*r22;
IkReal x3200=((1.0)*x3199);
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(((-1.0)+x3199),-1);
if(!x3204.valid){
continue;
}
IkReal x3201=x3204.value;
if((((1.0)+(((-1.0)*x3200)))) < -0.00001)
continue;
IkReal x3202=IKsqrt(((1.0)+(((-1.0)*x3200))));
IkReal x3203=(sj0*x3201*x3202);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3200*x3203))+x3203))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3205=((-1.0)*r21);
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal(x3205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
IkReal x3206=((1.0)*(x3208.value));
IkReal x3207=x3181;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3206)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3206)));
IkReal gconst100=(x3205*x3207);
IkReal gconst101=((1.0)*r20*x3207);
IkReal x3209=r22*r22;
IkReal x3210=((1.0)*r12*sj0);
IkReal x3211=((1.0)*cj0*r02);
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(((-1.0)+x3209),-1);
if(!x3215.valid){
continue;
}
IkReal x3212=x3215.value;
if((((1.0)+(((-1.0)*x3209)))) < -0.00001)
continue;
IkReal x3213=IKsqrt(((1.0)+(((-1.0)*x3209))));
IkReal x3214=(r22*x3212*x3213);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3211))+(((-1.0)*x3210)))))+(IKabs(((((-1.0)*x3211*x3214))+(((-1.0)*x3210*x3214))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3216=((1.0)*sj0);
IkReal x3217=((1.0)*cj0);
CheckValue<IkReal> x3218=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3218.valid){
continue;
}
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r10*x3216))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*gconst101*r00*x3217)))),IkReal(((((-1.0)*r12*x3216))+(((-1.0)*r02*x3217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3218.value)))+(x3219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3220=IKcos(j4);
IkReal x3221=IKsin(j4);
IkReal x3222=(cj1*cj2);
IkReal x3223=(gconst101*r20);
IkReal x3224=(gconst101*r10);
IkReal x3225=((1.0)*sj2);
IkReal x3226=(gconst101*r00);
IkReal x3227=((1.0)*x3220);
IkReal x3228=((1.0)*x3221);
IkReal x3229=(gconst100*x3221);
IkReal x3230=(gconst100*x3220);
evalcond[0]=(((r22*x3221))+(((-1.0)*x3223*x3227))+((r21*x3230)));
evalcond[1]=(((r12*x3221))+cj0+((r11*x3230))+(((-1.0)*x3224*x3227)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3221))+((r01*x3230))+(((-1.0)*x3226*x3227)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r21*x3229))+(((-1.0)*r22*x3227))+(((-1.0)*cj1*x3225))+(((-1.0)*x3223*x3228)));
evalcond[4]=((((-1.0)*r02*x3227))+(((-1.0)*cj0*sj1*x3225))+((cj0*x3222))+((r01*x3229))+(((-1.0)*x3226*x3228)));
evalcond[5]=(((r11*x3229))+(((-1.0)*sj0*sj1*x3225))+(((-1.0)*x3224*x3228))+((sj0*x3222))+(((-1.0)*r12*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3231 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3231.valid){
continue;
}
CheckValue<IkReal> x3232=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3231.value)+(((1.5707963267949)*(x3232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3233=IKcos(j4);
IkReal x3234=IKsin(j4);
IkReal x3235=(cj1*cj2);
IkReal x3236=(gconst101*r20);
IkReal x3237=(gconst101*r10);
IkReal x3238=((1.0)*sj2);
IkReal x3239=(gconst101*r00);
IkReal x3240=((1.0)*x3233);
IkReal x3241=((1.0)*x3234);
IkReal x3242=(gconst100*x3234);
IkReal x3243=(gconst100*x3233);
evalcond[0]=(((r21*x3243))+(((-1.0)*x3236*x3240))+((r22*x3234)));
evalcond[1]=(cj0+(((-1.0)*x3237*x3240))+((r12*x3234))+((r11*x3243)));
evalcond[2]=(((r01*x3243))+(((-1.0)*x3239*x3240))+(((-1.0)*sj0))+((r02*x3234)));
evalcond[3]=(((r21*x3242))+(((-1.0)*x3236*x3241))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3238))+(((-1.0)*r22*x3240)));
evalcond[4]=(((r01*x3242))+(((-1.0)*x3239*x3241))+((cj0*x3235))+(((-1.0)*r02*x3240))+(((-1.0)*cj0*sj1*x3238)));
evalcond[5]=((((-1.0)*x3237*x3241))+(((-1.0)*r12*x3240))+(((-1.0)*sj0*sj1*x3238))+((r11*x3242))+((sj0*x3235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3244 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3244.valid){
continue;
}
CheckValue<IkReal> x3245=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3244.value)+(((1.5707963267949)*(x3245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3246=IKcos(j4);
IkReal x3247=IKsin(j4);
IkReal x3248=(cj1*cj2);
IkReal x3249=(gconst101*r20);
IkReal x3250=(gconst101*r10);
IkReal x3251=((1.0)*sj2);
IkReal x3252=(gconst101*r00);
IkReal x3253=((1.0)*x3246);
IkReal x3254=((1.0)*x3247);
IkReal x3255=(gconst100*x3247);
IkReal x3256=(gconst100*x3246);
evalcond[0]=(((r22*x3247))+(((-1.0)*x3249*x3253))+((r21*x3256)));
evalcond[1]=(cj0+((r11*x3256))+((r12*x3247))+(((-1.0)*x3250*x3253)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3256))+((r02*x3247))+(((-1.0)*x3252*x3253)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*x3249*x3254))+((r21*x3255))+(((-1.0)*r22*x3253))+(((-1.0)*cj1*x3251)));
evalcond[4]=((((-1.0)*r02*x3253))+(((-1.0)*cj0*sj1*x3251))+((r01*x3255))+(((-1.0)*x3252*x3254))+((cj0*x3248)));
evalcond[5]=(((r11*x3255))+(((-1.0)*sj0*sj1*x3251))+(((-1.0)*x3250*x3254))+(((-1.0)*r12*x3253))+((sj0*x3248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3258 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3258)==0){
continue;
}
IkReal x3257=pow(x3258,-0.5);
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3259.value));
IkReal gconst103=((-1.0)*r11*x3257);
IkReal gconst104=(r10*x3257);
CheckValue<IkReal> x3260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3260.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3263 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3263.valid){
continue;
}
IkReal x3261=((-1.0)*(x3263.value));
IkReal x3262=x3257;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3261;
IkReal gconst102=x3261;
IkReal gconst103=((-1.0)*r11*x3262);
IkReal gconst104=(r10*x3262);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3264=((1.0)*sj0);
IkReal x3265=((1.0)*cj0);
CheckValue<IkReal> x3266 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r10*x3264))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r00*x3265))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r12*x3264))+(((-1.0)*r02*x3265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3266.valid){
continue;
}
CheckValue<IkReal> x3267=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3266.value)+(((1.5707963267949)*(x3267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3268=IKcos(j4);
IkReal x3269=IKsin(j4);
IkReal x3270=(gconst103*r11);
IkReal x3271=(cj1*cj2);
IkReal x3272=((1.0)*sj1);
IkReal x3273=((1.0)*x3268);
IkReal x3274=(gconst103*x3268);
IkReal x3275=(gconst103*x3269);
IkReal x3276=((1.0)*gconst104*x3269);
evalcond[0]=((((-1.0)*gconst104*r20*x3273))+((r21*x3274))+((r22*x3269)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x3273))+((x3268*x3270))+((r12*x3269)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3274))+((r02*x3269))+(((-1.0)*gconst104*r00*x3273)));
evalcond[3]=(((r21*x3275))+(((-1.0)*r20*x3276))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3272))+(((-1.0)*r22*x3273)));
evalcond[4]=(((cj0*x3271))+((r01*x3275))+(((-1.0)*cj0*sj2*x3272))+(((-1.0)*r00*x3276))+(((-1.0)*r02*x3273)));
evalcond[5]=((((-1.0)*r12*x3273))+((sj0*x3271))+(((-1.0)*r10*x3276))+(((-1.0)*sj0*sj2*x3272))+((x3269*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3277.valid){
continue;
}
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3277.value)))+(x3278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3279=IKcos(j4);
IkReal x3280=IKsin(j4);
IkReal x3281=(gconst103*r11);
IkReal x3282=(cj1*cj2);
IkReal x3283=((1.0)*sj1);
IkReal x3284=((1.0)*x3279);
IkReal x3285=(gconst103*x3279);
IkReal x3286=(gconst103*x3280);
IkReal x3287=((1.0)*gconst104*x3280);
evalcond[0]=(((r22*x3280))+((r21*x3285))+(((-1.0)*gconst104*r20*x3284)));
evalcond[1]=(((x3279*x3281))+cj0+(((-1.0)*gconst104*r10*x3284))+((r12*x3280)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3284))+((r02*x3280))+((r01*x3285)));
evalcond[3]=((((-1.0)*r20*x3287))+(((-1.0)*r22*x3284))+(((-1.0)*cj1*sj2))+((r21*x3286))+(((-1.0)*cj2*x3283)));
evalcond[4]=((((-1.0)*r02*x3284))+(((-1.0)*r00*x3287))+((cj0*x3282))+(((-1.0)*cj0*sj2*x3283))+((r01*x3286)));
evalcond[5]=((((-1.0)*r10*x3287))+(((-1.0)*r12*x3284))+((x3280*x3281))+((sj0*x3282))+(((-1.0)*sj0*sj2*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3289 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3289)==0){
continue;
}
IkReal x3288=pow(x3289,-0.5);
CheckValue<IkReal> x3290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3290.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3290.value))));
IkReal gconst106=((1.0)*r11*x3288);
IkReal gconst107=((-1.0)*r10*x3288);
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3291.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3294 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3294.valid){
continue;
}
IkReal x3292=((1.0)*(x3294.value));
IkReal x3293=x3288;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3292)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3292)));
IkReal gconst106=((1.0)*r11*x3293);
IkReal gconst107=((-1.0)*r10*x3293);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3297 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3297.valid){
continue;
}
IkReal x3295=((1.0)*(x3297.value));
IkReal x3296=x3288;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3295)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3295)));
IkReal gconst106=((1.0)*r11*x3296);
IkReal gconst107=((-1.0)*r10*x3296);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
IkReal x3298=((1.0)*(x3300.value));
IkReal x3299=x3288;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3298)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3298)));
IkReal gconst106=((1.0)*r11*x3299);
IkReal gconst107=((-1.0)*r10*x3299);
IkReal x3301=r12*r12;
IkReal x3302=((1.0)*sj0);
IkReal x3303=(cj0*r02);
IkReal x3304=x3288;
j4eval[0]=((IKabs(((((-1.0)*x3303))+(((-1.0)*r12*x3302)))))+(IKabs(((((-1.0)*x3302*x3304))+((sj0*x3301*x3304))+((r12*x3303*x3304))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3305=((1.0)*sj0);
IkReal x3306=((1.0)*gconst107);
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal(((((-1.0)*gconst107*r10*x3305))+((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3306))+((gconst106*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
CheckValue<IkReal> x3308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3306))+(((-1.0)*gconst106*r20)))),-1);
if(!x3308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3307.value)+(((1.5707963267949)*(x3308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3309=IKcos(j4);
IkReal x3310=IKsin(j4);
IkReal x3311=(cj1*cj2);
IkReal x3312=(gconst107*r10);
IkReal x3313=(gconst107*r00);
IkReal x3314=(gconst107*r20);
IkReal x3315=((1.0)*sj1);
IkReal x3316=((1.0)*x3309);
IkReal x3317=(gconst106*x3309);
IkReal x3318=(gconst106*x3310);
IkReal x3319=((1.0)*x3310);
evalcond[0]=(((r21*x3317))+((r22*x3310))+(((-1.0)*x3314*x3316)));
evalcond[1]=(cj0+((r11*x3317))+(((-1.0)*x3312*x3316))+((r12*x3310)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3310))+(((-1.0)*x3313*x3316))+((r01*x3317)));
evalcond[3]=(((r21*x3318))+(((-1.0)*r22*x3316))+(((-1.0)*cj1*sj2))+(((-1.0)*x3314*x3319))+(((-1.0)*cj2*x3315)));
evalcond[4]=(((cj0*x3311))+(((-1.0)*r02*x3316))+(((-1.0)*x3313*x3319))+(((-1.0)*cj0*sj2*x3315))+((r01*x3318)));
evalcond[5]=(((r11*x3318))+(((-1.0)*x3312*x3319))+(((-1.0)*sj0*sj2*x3315))+(((-1.0)*r12*x3316))+((sj0*x3311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3320=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3320.valid){
continue;
}
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3320.value)))+(x3321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3322=IKcos(j4);
IkReal x3323=IKsin(j4);
IkReal x3324=(cj1*cj2);
IkReal x3325=(gconst107*r10);
IkReal x3326=(gconst107*r00);
IkReal x3327=(gconst107*r20);
IkReal x3328=((1.0)*sj1);
IkReal x3329=((1.0)*x3322);
IkReal x3330=(gconst106*x3322);
IkReal x3331=(gconst106*x3323);
IkReal x3332=((1.0)*x3323);
evalcond[0]=(((r22*x3323))+((r21*x3330))+(((-1.0)*x3327*x3329)));
evalcond[1]=(((r12*x3323))+cj0+(((-1.0)*x3325*x3329))+((r11*x3330)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3326*x3329))+((r01*x3330))+((r02*x3323)));
evalcond[3]=(((r21*x3331))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3328))+(((-1.0)*r22*x3329))+(((-1.0)*x3327*x3332)));
evalcond[4]=((((-1.0)*r02*x3329))+((r01*x3331))+(((-1.0)*cj0*sj2*x3328))+((cj0*x3324))+(((-1.0)*x3326*x3332)));
evalcond[5]=(((sj0*x3324))+((r11*x3331))+(((-1.0)*sj0*sj2*x3328))+(((-1.0)*r12*x3329))+(((-1.0)*x3325*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3333=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3333.valid){
continue;
}
CheckValue<IkReal> x3334 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3333.value)))+(x3334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3335=IKcos(j4);
IkReal x3336=IKsin(j4);
IkReal x3337=(cj1*cj2);
IkReal x3338=(gconst107*r10);
IkReal x3339=(gconst107*r00);
IkReal x3340=(gconst107*r20);
IkReal x3341=((1.0)*sj1);
IkReal x3342=((1.0)*x3335);
IkReal x3343=(gconst106*x3335);
IkReal x3344=(gconst106*x3336);
IkReal x3345=((1.0)*x3336);
evalcond[0]=((((-1.0)*x3340*x3342))+((r21*x3343))+((r22*x3336)));
evalcond[1]=(cj0+((r12*x3336))+(((-1.0)*x3338*x3342))+((r11*x3343)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3336))+(((-1.0)*x3339*x3342))+((r01*x3343)));
evalcond[3]=((((-1.0)*x3340*x3345))+(((-1.0)*cj2*x3341))+(((-1.0)*cj1*sj2))+((r21*x3344))+(((-1.0)*r22*x3342)));
evalcond[4]=((((-1.0)*cj0*sj2*x3341))+((cj0*x3337))+(((-1.0)*r02*x3342))+(((-1.0)*x3339*x3345))+((r01*x3344)));
evalcond[5]=((((-1.0)*x3338*x3345))+(((-1.0)*sj0*sj2*x3341))+((sj0*x3337))+(((-1.0)*r12*x3342))+((r11*x3344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3346=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3346;
j4eval[1]=IKsign(x3346);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3347=((1.0)*cj5);
IkReal x3348=((((-1.0)*r21*x3347))+(((-1.0)*r20*sj5)));
j4eval[0]=x3348;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3347))))));
j4eval[2]=IKsign(x3348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3349=cj5*cj5;
IkReal x3350=r11*r11;
IkReal x3351=(cj5*r10);
IkReal x3352=(r11*sj5);
IkReal x3353=((((2.0)*x3351*x3352))+(((-1.0)*(r12*r12)))+((x3349*x3350))+(((-1.0)*x3350))+(((-1.0)*x3349*(r10*r10))));
j4eval[0]=x3353;
j4eval[1]=((IKabs(r12))+(IKabs((x3352+(((-1.0)*x3351))))));
j4eval[2]=IKsign(x3353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3354=cj5*cj5;
IkReal x3355=r11*r11;
IkReal x3356=(cj5*r10);
IkReal x3357=(r11*sj5);
CheckValue<IkReal> x3358 = IKatan2WithCheck(IkReal(r12),IkReal((x3357+(((-1.0)*x3356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3358.valid){
continue;
}
CheckValue<IkReal> x3359=IKPowWithIntegerCheck(IKsign(((((2.0)*x3356*x3357))+(((-1.0)*x3354*(r10*r10)))+(((-1.0)*(r12*r12)))+((x3354*x3355))+(((-1.0)*x3355)))),-1);
if(!x3359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3358.value)+(((1.5707963267949)*(x3359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3360=IKcos(j4);
IkReal x3361=IKsin(j4);
IkReal x3362=(cj5*r00);
IkReal x3363=(cj5*r10);
IkReal x3364=((1.0)*sj1);
IkReal x3365=(cj5*r20);
IkReal x3366=((1.0)*x3360);
IkReal x3367=((1.0)*x3361);
IkReal x3368=(sj5*x3360);
IkReal x3369=(sj5*x3361);
evalcond[0]=(((r22*x3361))+((r21*x3368))+(((-1.0)*x3365*x3366)));
evalcond[1]=(((r02*x3361))+(((-1.0)*x3362*x3366))+((r01*x3368)));
evalcond[2]=((1.0)+((r12*x3361))+(((-1.0)*x3363*x3366))+((r11*x3368)));
evalcond[3]=((((-1.0)*r12*x3366))+(((-1.0)*x3363*x3367))+((r11*x3369)));
evalcond[4]=((((-1.0)*x3362*x3367))+((r01*x3369))+(((-1.0)*r02*x3366))+((cj1*cj2))+(((-1.0)*sj2*x3364)));
evalcond[5]=((((-1.0)*cj2*x3364))+((r21*x3369))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3366))+(((-1.0)*x3365*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3370=((1.0)*cj5);
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3370))+(((-1.0)*r20*sj5)))),-1);
if(!x3371.valid){
continue;
}
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x3370)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3371.value)))+(x3372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3373=IKcos(j4);
IkReal x3374=IKsin(j4);
IkReal x3375=(cj5*r00);
IkReal x3376=(cj5*r10);
IkReal x3377=((1.0)*sj1);
IkReal x3378=(cj5*r20);
IkReal x3379=((1.0)*x3373);
IkReal x3380=((1.0)*x3374);
IkReal x3381=(sj5*x3373);
IkReal x3382=(sj5*x3374);
evalcond[0]=(((r22*x3374))+((r21*x3381))+(((-1.0)*x3378*x3379)));
evalcond[1]=(((r01*x3381))+((r02*x3374))+(((-1.0)*x3375*x3379)));
evalcond[2]=((1.0)+((r12*x3374))+(((-1.0)*x3376*x3379))+((r11*x3381)));
evalcond[3]=((((-1.0)*x3376*x3380))+(((-1.0)*r12*x3379))+((r11*x3382)));
evalcond[4]=(((r01*x3382))+(((-1.0)*sj2*x3377))+(((-1.0)*x3375*x3380))+(((-1.0)*r02*x3379))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x3379))+(((-1.0)*x3378*x3380))+(((-1.0)*cj2*x3377))+(((-1.0)*cj1*sj2))+((r21*x3382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3383.valid){
continue;
}
CheckValue<IkReal> x3384 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3383.value)))+(x3384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3385=IKcos(j4);
IkReal x3386=IKsin(j4);
IkReal x3387=(cj5*r00);
IkReal x3388=(cj5*r10);
IkReal x3389=((1.0)*sj1);
IkReal x3390=(cj5*r20);
IkReal x3391=((1.0)*x3385);
IkReal x3392=((1.0)*x3386);
IkReal x3393=(sj5*x3385);
IkReal x3394=(sj5*x3386);
evalcond[0]=(((r21*x3393))+((r22*x3386))+(((-1.0)*x3390*x3391)));
evalcond[1]=((((-1.0)*x3387*x3391))+((r01*x3393))+((r02*x3386)));
evalcond[2]=((1.0)+((r11*x3393))+((r12*x3386))+(((-1.0)*x3388*x3391)));
evalcond[3]=(((r11*x3394))+(((-1.0)*r12*x3391))+(((-1.0)*x3388*x3392)));
evalcond[4]=((((-1.0)*sj2*x3389))+(((-1.0)*x3387*x3392))+((r01*x3394))+(((-1.0)*r02*x3391))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x3391))+(((-1.0)*cj1*sj2))+((r21*x3394))+(((-1.0)*x3390*x3392))+(((-1.0)*cj2*x3389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3395=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3395;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x3395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3396=((1.0)*cj5);
IkReal x3397=((((-1.0)*r01*x3396))+(((-1.0)*r00*sj5)));
j4eval[0]=x3397;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3396)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3398=cj5*cj5;
IkReal x3399=r11*r11;
IkReal x3400=(r11*sj5);
IkReal x3401=(cj5*r10);
IkReal x3402=((r12*r12)+((x3398*(r10*r10)))+(((-1.0)*x3398*x3399))+x3399+(((-2.0)*x3400*x3401)));
j4eval[0]=x3402;
j4eval[1]=((IKabs(((((-1.0)*x3401))+x3400)))+(IKabs(r12)));
j4eval[2]=IKsign(x3402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3403=cj5*cj5;
IkReal x3404=r11*r11;
IkReal x3405=(cj5*r10);
IkReal x3406=(r11*sj5);
CheckValue<IkReal> x3407 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3405))+x3406)),IKFAST_ATAN2_MAGTHRESH);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3405*x3406))+(r12*r12)+x3404+(((-1.0)*x3403*x3404))+((x3403*(r10*r10))))),-1);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3407.value)+(((1.5707963267949)*(x3408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKcos(j4);
IkReal x3410=IKsin(j4);
IkReal x3411=(cj5*r00);
IkReal x3412=(cj5*r10);
IkReal x3413=((1.0)*cj2);
IkReal x3414=(cj5*r20);
IkReal x3415=((1.0)*x3409);
IkReal x3416=((1.0)*x3410);
IkReal x3417=(sj5*x3409);
IkReal x3418=(sj5*x3410);
evalcond[0]=(((r22*x3410))+((r21*x3417))+(((-1.0)*x3414*x3415)));
evalcond[1]=((((-1.0)*x3411*x3415))+((r02*x3410))+((r01*x3417)));
evalcond[2]=((-1.0)+(((-1.0)*x3412*x3415))+((r12*x3410))+((r11*x3417)));
evalcond[3]=((((-1.0)*x3412*x3416))+((r11*x3418))+(((-1.0)*r12*x3415)));
evalcond[4]=((((-1.0)*x3411*x3416))+(((-1.0)*r02*x3415))+((sj1*sj2))+(((-1.0)*cj1*x3413))+((r01*x3418)));
evalcond[5]=((((-1.0)*r22*x3415))+(((-1.0)*sj1*x3413))+((r21*x3418))+(((-1.0)*x3414*x3416))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3419=((1.0)*cj5);
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3419)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3419)))),-1);
if(!x3421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3420.value)+(((1.5707963267949)*(x3421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3422=IKcos(j4);
IkReal x3423=IKsin(j4);
IkReal x3424=(cj5*r00);
IkReal x3425=(cj5*r10);
IkReal x3426=((1.0)*cj2);
IkReal x3427=(cj5*r20);
IkReal x3428=((1.0)*x3422);
IkReal x3429=((1.0)*x3423);
IkReal x3430=(sj5*x3422);
IkReal x3431=(sj5*x3423);
evalcond[0]=((((-1.0)*x3427*x3428))+((r21*x3430))+((r22*x3423)));
evalcond[1]=(((r01*x3430))+(((-1.0)*x3424*x3428))+((r02*x3423)));
evalcond[2]=((-1.0)+(((-1.0)*x3425*x3428))+((r12*x3423))+((r11*x3430)));
evalcond[3]=((((-1.0)*r12*x3428))+(((-1.0)*x3425*x3429))+((r11*x3431)));
evalcond[4]=(((r01*x3431))+(((-1.0)*x3424*x3429))+((sj1*sj2))+(((-1.0)*cj1*x3426))+(((-1.0)*r02*x3428)));
evalcond[5]=((((-1.0)*x3427*x3429))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3428))+(((-1.0)*sj1*x3426))+((r21*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3432.value)))+(x3433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3434=IKcos(j4);
IkReal x3435=IKsin(j4);
IkReal x3436=(cj5*r00);
IkReal x3437=(cj5*r10);
IkReal x3438=((1.0)*cj2);
IkReal x3439=(cj5*r20);
IkReal x3440=((1.0)*x3434);
IkReal x3441=((1.0)*x3435);
IkReal x3442=(sj5*x3434);
IkReal x3443=(sj5*x3435);
evalcond[0]=(((r21*x3442))+(((-1.0)*x3439*x3440))+((r22*x3435)));
evalcond[1]=((((-1.0)*x3436*x3440))+((r01*x3442))+((r02*x3435)));
evalcond[2]=((-1.0)+((r11*x3442))+(((-1.0)*x3437*x3440))+((r12*x3435)));
evalcond[3]=(((r11*x3443))+(((-1.0)*x3437*x3441))+(((-1.0)*r12*x3440)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x3436*x3441))+(((-1.0)*r02*x3440))+(((-1.0)*cj1*x3438))+((r01*x3443)));
evalcond[5]=(((r21*x3443))+(((-1.0)*x3439*x3441))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3440))+(((-1.0)*sj1*x3438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3445 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3445)==0){
continue;
}
IkReal x3444=pow(x3445,-0.5);
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3446.value));
IkReal gconst109=((-1.0)*r01*x3444);
IkReal gconst110=(r00*x3444);
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3447.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
IkReal x3448=((-1.0)*(x3450.value));
IkReal x3449=x3444;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3448;
IkReal gconst108=x3448;
IkReal gconst109=((-1.0)*r01*x3449);
IkReal gconst110=(r00*x3449);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3451=((1.0)*sj0);
IkReal x3452=((1.0)*gconst110);
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x3452)))),-1);
if(!x3453.valid){
continue;
}
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x3452))+((cj0*gconst109*r01))+(((-1.0)*gconst110*r10*x3451))+((gconst109*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3453.value)))+(x3454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3455=IKcos(j4);
IkReal x3456=IKsin(j4);
IkReal x3457=((1.0)*sj2);
IkReal x3458=(cj1*cj2);
IkReal x3459=(gconst109*r21);
IkReal x3460=((1.0)*x3455);
IkReal x3461=(gconst109*x3456);
IkReal x3462=(gconst109*x3455);
IkReal x3463=((1.0)*gconst110*x3456);
evalcond[0]=((((-1.0)*gconst110*r20*x3460))+((r22*x3456))+((x3455*x3459)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x3460))+((r12*x3456))+((r11*x3462)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst110*r00*x3460))+((r01*x3462))+((r02*x3456)));
evalcond[3]=((((-1.0)*r20*x3463))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3460))+(((-1.0)*cj1*x3457))+((x3456*x3459)));
evalcond[4]=((((-1.0)*r00*x3463))+(((-1.0)*r02*x3460))+((r01*x3461))+((cj0*x3458))+(((-1.0)*cj0*sj1*x3457)));
evalcond[5]=((((-1.0)*r10*x3463))+((sj0*x3458))+(((-1.0)*r12*x3460))+(((-1.0)*sj0*sj1*x3457))+((r11*x3461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3464.value)))+(x3465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3466=IKcos(j4);
IkReal x3467=IKsin(j4);
IkReal x3468=((1.0)*sj2);
IkReal x3469=(cj1*cj2);
IkReal x3470=(gconst109*r21);
IkReal x3471=((1.0)*x3466);
IkReal x3472=(gconst109*x3467);
IkReal x3473=(gconst109*x3466);
IkReal x3474=((1.0)*gconst110*x3467);
evalcond[0]=((((-1.0)*gconst110*r20*x3471))+((x3466*x3470))+((r22*x3467)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x3471))+((r12*x3467))+((r11*x3473)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst110*r00*x3471))+((r01*x3473))+((r02*x3467)));
evalcond[3]=((((-1.0)*r20*x3474))+(((-1.0)*cj2*sj1))+((x3467*x3470))+(((-1.0)*cj1*x3468))+(((-1.0)*r22*x3471)));
evalcond[4]=((((-1.0)*r00*x3474))+(((-1.0)*r02*x3471))+((cj0*x3469))+((r01*x3472))+(((-1.0)*cj0*sj1*x3468)));
evalcond[5]=((((-1.0)*r10*x3474))+(((-1.0)*sj0*sj1*x3468))+(((-1.0)*r12*x3471))+((sj0*x3469))+((r11*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3476 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3476)==0){
continue;
}
IkReal x3475=pow(x3476,-0.5);
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3477.value))));
IkReal gconst112=((1.0)*r01*x3475);
IkReal gconst113=((-1.0)*r00*x3475);
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3478.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
IkReal x3479=((1.0)*(x3481.value));
IkReal x3480=x3475;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3479)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3479)));
IkReal gconst112=((1.0)*r01*x3480);
IkReal gconst113=((-1.0)*r00*x3480);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3484 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3484.valid){
continue;
}
IkReal x3482=((1.0)*(x3484.value));
IkReal x3483=x3475;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3482)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3482)));
IkReal gconst112=((1.0)*r01*x3483);
IkReal gconst113=((-1.0)*r00*x3483);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
IkReal x3485=((1.0)*(x3487.value));
IkReal x3486=x3475;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3485)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3485)));
IkReal gconst112=((1.0)*r01*x3486);
IkReal gconst113=((-1.0)*r00*x3486);
IkReal x3488=r02*r02;
IkReal x3489=(r12*sj0);
IkReal x3490=((1.0)*cj0);
IkReal x3491=x3475;
j4eval[0]=((IKabs(((((-1.0)*x3490*x3491))+((r02*x3489*x3491))+((cj0*x3488*x3491)))))+(IKabs(((((-1.0)*r02*x3490))+(((-1.0)*x3489))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=((1.0)*sj0);
IkReal x3493=((1.0)*cj0);
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x3492))+(((-1.0)*gconst113*r00*x3493))+((gconst112*r11*sj0)))),IkReal(((((-1.0)*r12*x3492))+(((-1.0)*r02*x3493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
CheckValue<IkReal> x3495=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x3495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3494.value)+(((1.5707963267949)*(x3495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3496=IKcos(j4);
IkReal x3497=IKsin(j4);
IkReal x3498=(cj1*cj2);
IkReal x3499=(gconst113*r20);
IkReal x3500=(gconst112*r21);
IkReal x3501=(gconst113*r00);
IkReal x3502=((1.0)*sj1);
IkReal x3503=(gconst113*r10);
IkReal x3504=((1.0)*x3496);
IkReal x3505=((1.0)*x3497);
IkReal x3506=(gconst112*x3496);
IkReal x3507=(gconst112*x3497);
evalcond[0]=(((r22*x3497))+(((-1.0)*x3499*x3504))+((x3496*x3500)));
evalcond[1]=(cj0+((r11*x3506))+((r12*x3497))+(((-1.0)*x3503*x3504)));
evalcond[2]=(((r01*x3506))+(((-1.0)*sj0))+(((-1.0)*x3501*x3504))+((r02*x3497)));
evalcond[3]=((((-1.0)*cj2*x3502))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3504))+((x3497*x3500))+(((-1.0)*x3499*x3505)));
evalcond[4]=(((r01*x3507))+((cj0*x3498))+(((-1.0)*cj0*sj2*x3502))+(((-1.0)*x3501*x3505))+(((-1.0)*r02*x3504)));
evalcond[5]=((((-1.0)*r12*x3504))+((r11*x3507))+((sj0*x3498))+(((-1.0)*x3503*x3505))+(((-1.0)*sj0*sj2*x3502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x3509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3508.value)+(((1.5707963267949)*(x3509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3510=IKcos(j4);
IkReal x3511=IKsin(j4);
IkReal x3512=(cj1*cj2);
IkReal x3513=(gconst113*r20);
IkReal x3514=(gconst112*r21);
IkReal x3515=(gconst113*r00);
IkReal x3516=((1.0)*sj1);
IkReal x3517=(gconst113*r10);
IkReal x3518=((1.0)*x3510);
IkReal x3519=((1.0)*x3511);
IkReal x3520=(gconst112*x3510);
IkReal x3521=(gconst112*x3511);
evalcond[0]=(((x3510*x3514))+(((-1.0)*x3513*x3518))+((r22*x3511)));
evalcond[1]=(cj0+(((-1.0)*x3517*x3518))+((r11*x3520))+((r12*x3511)));
evalcond[2]=((((-1.0)*x3515*x3518))+(((-1.0)*sj0))+((r01*x3520))+((r02*x3511)));
evalcond[3]=((((-1.0)*cj2*x3516))+(((-1.0)*x3513*x3519))+(((-1.0)*cj1*sj2))+((x3511*x3514))+(((-1.0)*r22*x3518)));
evalcond[4]=((((-1.0)*x3515*x3519))+(((-1.0)*r02*x3518))+((r01*x3521))+((cj0*x3512))+(((-1.0)*cj0*sj2*x3516)));
evalcond[5]=((((-1.0)*x3517*x3519))+((r11*x3521))+(((-1.0)*r12*x3518))+((sj0*x3512))+(((-1.0)*sj0*sj2*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3522.value)+(((1.5707963267949)*(x3523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3524=IKcos(j4);
IkReal x3525=IKsin(j4);
IkReal x3526=(cj1*cj2);
IkReal x3527=(gconst113*r20);
IkReal x3528=(gconst112*r21);
IkReal x3529=(gconst113*r00);
IkReal x3530=((1.0)*sj1);
IkReal x3531=(gconst113*r10);
IkReal x3532=((1.0)*x3524);
IkReal x3533=((1.0)*x3525);
IkReal x3534=(gconst112*x3524);
IkReal x3535=(gconst112*x3525);
evalcond[0]=(((x3524*x3528))+(((-1.0)*x3527*x3532))+((r22*x3525)));
evalcond[1]=(((r11*x3534))+cj0+(((-1.0)*x3531*x3532))+((r12*x3525)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3525))+(((-1.0)*x3529*x3532))+((r01*x3534)));
evalcond[3]=(((x3525*x3528))+(((-1.0)*cj1*sj2))+(((-1.0)*x3527*x3533))+(((-1.0)*cj2*x3530))+(((-1.0)*r22*x3532)));
evalcond[4]=(((cj0*x3526))+(((-1.0)*x3529*x3533))+(((-1.0)*r02*x3532))+((r01*x3535))+(((-1.0)*cj0*sj2*x3530)));
evalcond[5]=(((r11*x3535))+(((-1.0)*r12*x3532))+(((-1.0)*sj0*sj2*x3530))+(((-1.0)*x3531*x3533))+((sj0*x3526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3536=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3536;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3537=((1.0)*cj5);
IkReal x3538=((((-1.0)*r21*x3537))+(((-1.0)*r20*sj5)));
j4eval[0]=x3538;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3537))+((r11*sj5))))));
j4eval[2]=IKsign(x3538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3539=cj5*cj5;
IkReal x3540=r01*r01;
IkReal x3541=(cj5*r00);
IkReal x3542=(r01*sj5);
IkReal x3543=(((x3539*(r00*r00)))+(((-2.0)*x3541*x3542))+x3540+(r02*r02)+(((-1.0)*x3539*x3540)));
j4eval[0]=x3543;
j4eval[1]=IKsign(x3543);
j4eval[2]=((IKabs(r02))+(IKabs((x3542+(((-1.0)*x3541))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3544=cj5*cj5;
IkReal x3545=r01*r01;
IkReal x3546=(r01*sj5);
IkReal x3547=(cj5*r00);
CheckValue<IkReal> x3548 = IKatan2WithCheck(IkReal(r02),IkReal((x3546+(((-1.0)*x3547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3548.valid){
continue;
}
CheckValue<IkReal> x3549=IKPowWithIntegerCheck(IKsign((((x3544*(r00*r00)))+x3545+(((-2.0)*x3546*x3547))+(r02*r02)+(((-1.0)*x3544*x3545)))),-1);
if(!x3549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3548.value)+(((1.5707963267949)*(x3549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3550=IKcos(j4);
IkReal x3551=IKsin(j4);
IkReal x3552=(cj5*r00);
IkReal x3553=(cj5*r10);
IkReal x3554=((1.0)*sj1);
IkReal x3555=(cj5*r20);
IkReal x3556=((1.0)*x3550);
IkReal x3557=((1.0)*x3551);
IkReal x3558=(sj5*x3550);
IkReal x3559=(sj5*x3551);
evalcond[0]=((((-1.0)*x3555*x3556))+((r21*x3558))+((r22*x3551)));
evalcond[1]=(((r12*x3551))+(((-1.0)*x3553*x3556))+((r11*x3558)));
evalcond[2]=((-1.0)+((r01*x3558))+(((-1.0)*x3552*x3556))+((r02*x3551)));
evalcond[3]=(((r01*x3559))+(((-1.0)*x3552*x3557))+(((-1.0)*r02*x3556)));
evalcond[4]=((((-1.0)*sj2*x3554))+(((-1.0)*x3553*x3557))+(((-1.0)*r12*x3556))+((r11*x3559))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3555*x3557))+((r21*x3559))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3554))+(((-1.0)*r22*x3556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3560=((1.0)*cj5);
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3560))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3560))+(((-1.0)*r20*sj5)))),-1);
if(!x3562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3561.value)+(((1.5707963267949)*(x3562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3563=IKcos(j4);
IkReal x3564=IKsin(j4);
IkReal x3565=(cj5*r00);
IkReal x3566=(cj5*r10);
IkReal x3567=((1.0)*sj1);
IkReal x3568=(cj5*r20);
IkReal x3569=((1.0)*x3563);
IkReal x3570=((1.0)*x3564);
IkReal x3571=(sj5*x3563);
IkReal x3572=(sj5*x3564);
evalcond[0]=(((r21*x3571))+(((-1.0)*x3568*x3569))+((r22*x3564)));
evalcond[1]=((((-1.0)*x3566*x3569))+((r11*x3571))+((r12*x3564)));
evalcond[2]=((-1.0)+(((-1.0)*x3565*x3569))+((r01*x3571))+((r02*x3564)));
evalcond[3]=((((-1.0)*r02*x3569))+((r01*x3572))+(((-1.0)*x3565*x3570)));
evalcond[4]=((((-1.0)*sj2*x3567))+(((-1.0)*x3566*x3570))+(((-1.0)*r12*x3569))+((r11*x3572))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x3568*x3570))+((r21*x3572))+(((-1.0)*cj2*x3567))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
CheckValue<IkReal> x3574=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3573.value)+(((1.5707963267949)*(x3574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3575=IKcos(j4);
IkReal x3576=IKsin(j4);
IkReal x3577=(cj5*r00);
IkReal x3578=(cj5*r10);
IkReal x3579=((1.0)*sj1);
IkReal x3580=(cj5*r20);
IkReal x3581=((1.0)*x3575);
IkReal x3582=((1.0)*x3576);
IkReal x3583=(sj5*x3575);
IkReal x3584=(sj5*x3576);
evalcond[0]=((((-1.0)*x3580*x3581))+((r22*x3576))+((r21*x3583)));
evalcond[1]=(((r11*x3583))+((r12*x3576))+(((-1.0)*x3578*x3581)));
evalcond[2]=((-1.0)+(((-1.0)*x3577*x3581))+((r01*x3583))+((r02*x3576)));
evalcond[3]=((((-1.0)*x3577*x3582))+(((-1.0)*r02*x3581))+((r01*x3584)));
evalcond[4]=(((r11*x3584))+(((-1.0)*sj2*x3579))+((cj1*cj2))+(((-1.0)*x3578*x3582))+(((-1.0)*r12*x3581)));
evalcond[5]=((((-1.0)*cj2*x3579))+(((-1.0)*r22*x3581))+(((-1.0)*cj1*sj2))+(((-1.0)*x3580*x3582))+((r21*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3585=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3585;
j4eval[1]=IKsign(x3585);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3586=((1.0)*cj5);
IkReal x3587=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3586)));
j4eval[0]=x3587;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3586))))));
j4eval[2]=IKsign(x3587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3588=cj5*cj5;
IkReal x3589=r01*r01;
IkReal x3590=(r01*sj5);
IkReal x3591=(cj5*r00);
IkReal x3592=((((-1.0)*x3588*(r00*r00)))+((x3588*x3589))+(((-1.0)*(r02*r02)))+(((2.0)*x3590*x3591))+(((-1.0)*x3589)));
j4eval[0]=x3592;
j4eval[1]=IKsign(x3592);
j4eval[2]=((IKabs(r02))+(IKabs((x3590+(((-1.0)*x3591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3593=cj5*cj5;
IkReal x3594=r01*r01;
IkReal x3595=(r01*sj5);
IkReal x3596=(cj5*r00);
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal(r02),IkReal((x3595+(((-1.0)*x3596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x3593*x3594))+(((2.0)*x3595*x3596))+(((-1.0)*x3593*(r00*r00)))+(((-1.0)*x3594)))),-1);
if(!x3598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3597.value)+(((1.5707963267949)*(x3598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3599=IKcos(j4);
IkReal x3600=IKsin(j4);
IkReal x3601=(cj5*r00);
IkReal x3602=(cj5*r10);
IkReal x3603=((1.0)*cj2);
IkReal x3604=(cj5*r20);
IkReal x3605=((1.0)*x3599);
IkReal x3606=((1.0)*x3600);
IkReal x3607=(sj5*x3599);
IkReal x3608=(sj5*x3600);
evalcond[0]=(((r22*x3600))+((r21*x3607))+(((-1.0)*x3604*x3605)));
evalcond[1]=(((r11*x3607))+(((-1.0)*x3602*x3605))+((r12*x3600)));
evalcond[2]=((1.0)+((r02*x3600))+(((-1.0)*x3601*x3605))+((r01*x3607)));
evalcond[3]=((((-1.0)*r02*x3605))+(((-1.0)*x3601*x3606))+((r01*x3608)));
evalcond[4]=(((r11*x3608))+(((-1.0)*r12*x3605))+((sj1*sj2))+(((-1.0)*x3602*x3606))+(((-1.0)*cj1*x3603)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r21*x3608))+(((-1.0)*r22*x3605))+(((-1.0)*sj1*x3603))+(((-1.0)*x3604*x3606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3609=((1.0)*cj5);
CheckValue<IkReal> x3610 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3609)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3609)))),-1);
if(!x3611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3610.value)+(((1.5707963267949)*(x3611.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3612=IKcos(j4);
IkReal x3613=IKsin(j4);
IkReal x3614=(cj5*r00);
IkReal x3615=(cj5*r10);
IkReal x3616=((1.0)*cj2);
IkReal x3617=(cj5*r20);
IkReal x3618=((1.0)*x3612);
IkReal x3619=((1.0)*x3613);
IkReal x3620=(sj5*x3612);
IkReal x3621=(sj5*x3613);
evalcond[0]=(((r21*x3620))+(((-1.0)*x3617*x3618))+((r22*x3613)));
evalcond[1]=((((-1.0)*x3615*x3618))+((r11*x3620))+((r12*x3613)));
evalcond[2]=((1.0)+((r02*x3613))+((r01*x3620))+(((-1.0)*x3614*x3618)));
evalcond[3]=(((r01*x3621))+(((-1.0)*r02*x3618))+(((-1.0)*x3614*x3619)));
evalcond[4]=((((-1.0)*r12*x3618))+((sj1*sj2))+(((-1.0)*x3615*x3619))+((r11*x3621))+(((-1.0)*cj1*x3616)));
evalcond[5]=(((r21*x3621))+(((-1.0)*x3617*x3619))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3618))+(((-1.0)*sj1*x3616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3622.value)))+(x3623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3624=IKcos(j4);
IkReal x3625=IKsin(j4);
IkReal x3626=(cj5*r00);
IkReal x3627=(cj5*r10);
IkReal x3628=((1.0)*cj2);
IkReal x3629=(cj5*r20);
IkReal x3630=((1.0)*x3624);
IkReal x3631=((1.0)*x3625);
IkReal x3632=(sj5*x3624);
IkReal x3633=(sj5*x3625);
evalcond[0]=(((r21*x3632))+((r22*x3625))+(((-1.0)*x3629*x3630)));
evalcond[1]=((((-1.0)*x3627*x3630))+((r11*x3632))+((r12*x3625)));
evalcond[2]=((1.0)+((r02*x3625))+((r01*x3632))+(((-1.0)*x3626*x3630)));
evalcond[3]=((((-1.0)*r02*x3630))+((r01*x3633))+(((-1.0)*x3626*x3631)));
evalcond[4]=((((-1.0)*x3627*x3631))+((r11*x3633))+(((-1.0)*r12*x3630))+((sj1*sj2))+(((-1.0)*cj1*x3628)));
evalcond[5]=((((-1.0)*sj1*x3628))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3630))+((r21*x3633))+(((-1.0)*x3629*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3634=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3634);
rxp1_1=(px*r21);
rxp1_2=(r11*x3634);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3635=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3635);
rxp1_1=(px*r21);
rxp1_2=(r11*x3635);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3636=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3636);
rxp1_1=(px*r21);
rxp1_2=(r11*x3636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3639.valid){
continue;
}
IkReal x3637=x3639.value;
IkReal x3638=(sj0*x3637);
sj4array[0]=(((sj1*sj2*x3638))+(((-1.0)*cj1*cj2*x3638)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3640=IKcos(j4);
IkReal x3641=IKsin(j4);
IkReal x3642=(r21*sj5);
IkReal x3643=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x3640);
evalcond[1]=((((-1.0)*sj0))+((r02*x3641)));
evalcond[2]=((((-1.0)*x3640*x3643))+((x3640*x3642)));
evalcond[3]=(((r11*sj5*x3640))+(((-1.0)*cj5*r10*x3640)));
evalcond[4]=(((x3641*x3642))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3641*x3643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3645=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3645.valid){
continue;
}
IkReal x3644=x3645.value;
sj4array[0]=(((cj1*sj2*x3644))+((cj2*sj1*x3644)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3646=IKcos(j4);
IkReal x3647=IKsin(j4);
IkReal x3648=((1.0)*sj0);
IkReal x3649=((1.0)*cj5);
IkReal x3650=(sj5*x3646);
evalcond[0]=((-1.0)*r02*x3646);
evalcond[1]=(((r02*x3647))+(((-1.0)*x3648)));
evalcond[2]=((((-1.0)*r20*x3646*x3649))+((r21*x3650)));
evalcond[3]=(((r11*x3650))+(((-1.0)*r10*x3646*x3649)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x3647))+(((-1.0)*sj1*sj2*x3648))+(((-1.0)*r10*x3647*x3649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(r02,-1);
if(!x3651.valid){
continue;
}
sj4array[0]=(sj0*(x3651.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3652=IKcos(j4);
IkReal x3653=IKsin(j4);
IkReal x3654=((1.0)*sj1);
IkReal x3655=(r21*sj5);
IkReal x3656=(r11*sj5);
IkReal x3657=((1.0)*cj5*x3653);
IkReal x3658=((1.0)*cj5*x3652);
evalcond[0]=((-1.0)*r02*x3652);
evalcond[1]=(((x3652*x3655))+(((-1.0)*r20*x3658)));
evalcond[2]=(((x3652*x3656))+(((-1.0)*r10*x3658)));
evalcond[3]=(((x3653*x3655))+(((-1.0)*r20*x3657))+(((-1.0)*cj2*x3654))+(((-1.0)*cj1*sj2)));
evalcond[4]=(((x3653*x3656))+((cj1*cj2*sj0))+(((-1.0)*r10*x3657))+(((-1.0)*sj0*sj2*x3654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3659=((1.0)*sj0);
IkReal x3660=((1.0)*cj0);
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3660))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3659)))),IkReal(((((-1.0)*r02*x3660))+(((-1.0)*r12*x3659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
CheckValue<IkReal> x3662=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3661.value)+(((1.5707963267949)*(x3662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3663=IKcos(j4);
IkReal x3664=IKsin(j4);
IkReal x3665=(cj5*r00);
IkReal x3666=(cj1*cj2);
IkReal x3667=(cj5*r10);
IkReal x3668=((1.0)*sj1);
IkReal x3669=(cj5*r20);
IkReal x3670=((1.0)*x3663);
IkReal x3671=((1.0)*x3664);
IkReal x3672=(sj5*x3663);
IkReal x3673=(sj5*x3664);
evalcond[0]=(((r22*x3664))+((r21*x3672))+(((-1.0)*x3669*x3670)));
evalcond[1]=(cj0+((r11*x3672))+((r12*x3664))+(((-1.0)*x3667*x3670)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3672))+(((-1.0)*x3665*x3670))+((r02*x3664)));
evalcond[3]=((((-1.0)*cj2*x3668))+(((-1.0)*cj1*sj2))+((r21*x3673))+(((-1.0)*r22*x3670))+(((-1.0)*x3669*x3671)));
evalcond[4]=(((r01*x3673))+(((-1.0)*x3665*x3671))+(((-1.0)*cj0*sj2*x3668))+((cj0*x3666))+(((-1.0)*r02*x3670)));
evalcond[5]=(((sj0*x3666))+((r11*x3673))+(((-1.0)*sj0*sj2*x3668))+(((-1.0)*r12*x3670))+(((-1.0)*x3667*x3671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3674.value)+(((1.5707963267949)*(x3675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3676=IKcos(j4);
IkReal x3677=IKsin(j4);
IkReal x3678=(cj5*r00);
IkReal x3679=(cj1*cj2);
IkReal x3680=(cj5*r10);
IkReal x3681=((1.0)*sj1);
IkReal x3682=(cj5*r20);
IkReal x3683=((1.0)*x3676);
IkReal x3684=((1.0)*x3677);
IkReal x3685=(sj5*x3676);
IkReal x3686=(sj5*x3677);
evalcond[0]=(((r21*x3685))+(((-1.0)*x3682*x3683))+((r22*x3677)));
evalcond[1]=(cj0+((r12*x3677))+(((-1.0)*x3680*x3683))+((r11*x3685)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3685))+((r02*x3677))+(((-1.0)*x3678*x3683)));
evalcond[3]=((((-1.0)*r22*x3683))+((r21*x3686))+(((-1.0)*cj1*sj2))+(((-1.0)*x3682*x3684))+(((-1.0)*cj2*x3681)));
evalcond[4]=(((r01*x3686))+(((-1.0)*cj0*sj2*x3681))+(((-1.0)*x3678*x3684))+((cj0*x3679))+(((-1.0)*r02*x3683)));
evalcond[5]=((((-1.0)*x3680*x3684))+(((-1.0)*r12*x3683))+((r11*x3686))+((sj0*x3679))+(((-1.0)*sj0*sj2*x3681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3687.value)+(((1.5707963267949)*(x3688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3689=IKcos(j4);
IkReal x3690=IKsin(j4);
IkReal x3691=(cj5*r00);
IkReal x3692=(cj1*cj2);
IkReal x3693=(cj5*r10);
IkReal x3694=((1.0)*sj1);
IkReal x3695=(cj5*r20);
IkReal x3696=((1.0)*x3689);
IkReal x3697=((1.0)*x3690);
IkReal x3698=(sj5*x3689);
IkReal x3699=(sj5*x3690);
evalcond[0]=(((r21*x3698))+((r22*x3690))+(((-1.0)*x3695*x3696)));
evalcond[1]=(cj0+((r11*x3698))+((r12*x3690))+(((-1.0)*x3693*x3696)));
evalcond[2]=(((r01*x3698))+(((-1.0)*sj0))+((r02*x3690))+(((-1.0)*x3691*x3696)));
evalcond[3]=((((-1.0)*r22*x3696))+(((-1.0)*cj1*sj2))+((r21*x3699))+(((-1.0)*x3695*x3697))+(((-1.0)*cj2*x3694)));
evalcond[4]=(((r01*x3699))+((cj0*x3692))+(((-1.0)*r02*x3696))+(((-1.0)*x3691*x3697))+(((-1.0)*cj0*sj2*x3694)));
evalcond[5]=((((-1.0)*r12*x3696))+((sj0*x3692))+(((-1.0)*sj0*sj2*x3694))+((r11*x3699))+(((-1.0)*x3693*x3697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3700=r21*r21;
IkReal x3701=cj5*cj5;
IkReal x3702=(cj1*sj2);
IkReal x3703=(cj5*r20);
IkReal x3704=(r21*sj5);
IkReal x3705=(cj2*sj1);
CheckValue<IkReal> x3706 = IKatan2WithCheck(IkReal(((((-1.0)*x3702*x3704))+((x3702*x3703))+(((-1.0)*x3704*x3705))+((x3703*x3705)))),IkReal((((r22*x3702))+((r22*x3705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3701*(r20*r20)))+(((2.0)*x3703*x3704))+(((-1.0)*(r22*r22)))+(((-1.0)*x3700))+((x3700*x3701)))),-1);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3706.value)+(((1.5707963267949)*(x3707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3708=IKcos(j4);
IkReal x3709=IKsin(j4);
IkReal x3710=(r21*sj5);
IkReal x3711=(cj5*r20);
IkReal x3712=((1.0)*x3708);
evalcond[0]=((((-1.0)*x3711*x3712))+((x3708*x3710))+((r22*x3709)));
evalcond[1]=((((-1.0)*x3709*x3711))+((x3709*x3710))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3713=(cj4*cj5);
IkReal x3714=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x3713))+((r01*x3714))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3714))+((r10*x3713))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3713))+((r01*x3714))+((r02*sj4))))+IKsqr(((((-1.0)*r11*x3714))+((r10*x3713))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x3713))+((r01*x3714))+((r02*sj4))), ((((-1.0)*r11*x3714))+((r10*x3713))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3715=IKcos(j0);
IkReal x3716=IKsin(j0);
IkReal x3717=((0.238)*sj2);
IkReal x3718=(r00*sj5);
IkReal x3719=((0.238)*cj2);
IkReal x3720=((1.0)*sj2);
IkReal x3721=(r11*sj5);
IkReal x3722=((1.0)*cj5);
IkReal x3723=((0.095)*cj5);
IkReal x3724=(r10*sj5);
IkReal x3725=((1.0)*cj4);
IkReal x3726=(r01*sj5);
IkReal x3727=(sj1*x3716);
IkReal x3728=(cj1*x3715);
IkReal x3729=(cj1*x3716);
IkReal x3730=(sj1*x3715);
evalcond[0]=(((cj4*x3721))+x3715+(((-1.0)*cj4*r10*x3722))+((r12*sj4)));
evalcond[1]=((((-1.0)*cj4*r00*x3722))+((cj4*x3726))+((r02*sj4))+(((-1.0)*x3716)));
evalcond[2]=((((-1.0)*r01*x3722))+((sj2*x3728))+(((-1.0)*x3718))+((cj2*x3730)));
evalcond[3]=(((cj2*x3727))+(((-1.0)*r11*x3722))+((sj2*x3729))+(((-1.0)*x3724)));
evalcond[4]=(((sj4*x3726))+((cj2*x3728))+(((-1.0)*x3720*x3730))+(((-1.0)*r00*sj4*x3722))+(((-1.0)*r02*x3725)));
evalcond[5]=(((sj4*x3721))+((cj2*x3729))+(((-1.0)*r12*x3725))+(((-1.0)*x3720*x3727))+(((-1.0)*r10*sj4*x3722)));
evalcond[6]=((((-0.095)*x3718))+((x3719*x3730))+((x3717*x3728))+(((-1.0)*r01*x3723))+(((-0.113)*x3716))+(((-1.0)*px))+(((0.265)*x3730)));
evalcond[7]=((((0.113)*x3715))+((x3719*x3727))+(((-1.0)*r11*x3723))+((x3717*x3729))+(((-0.095)*x3724))+(((0.265)*x3727))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3731.value)))+(x3732.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3733=IKcos(j0);
IkReal x3734=IKsin(j0);
IkReal x3735=(cj1*sj2);
IkReal x3736=(r00*sj5);
IkReal x3737=(cj5*r11);
IkReal x3738=(cj2*sj1);
IkReal x3739=(r10*sj5);
IkReal x3740=(cj5*r01);
IkReal x3741=(sj1*x3734);
IkReal x3742=((0.238)*x3733);
evalcond[0]=(((x3733*x3735))+((x3733*x3738))+(((-1.0)*x3740))+(((-1.0)*x3736)));
evalcond[1]=(((x3734*x3738))+((x3734*x3735))+(((-1.0)*x3739))+(((-1.0)*x3737)));
evalcond[2]=((((-0.113)*x3734))+((x3735*x3742))+(((-0.095)*x3740))+(((-0.095)*x3736))+(((0.265)*sj1*x3733))+(((-1.0)*px))+((x3738*x3742)));
evalcond[3]=((((-0.095)*x3737))+(((-0.095)*x3739))+(((0.265)*x3741))+(((-1.0)*py))+(((0.238)*x3734*x3735))+(((0.238)*x3734*x3738))+(((0.113)*x3733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3743=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3743;
j4eval[1]=IKsign(x3743);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3744=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3744;
j4eval[1]=IKsign(x3744);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3745=((1.0)*sj0);
IkReal x3746=((1.0)*cj0);
IkReal x3747=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3747;
j4eval[1]=((IKabs(((((-1.0)*r12*x3745))+(((-1.0)*r02*x3746)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3746))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3745))))));
j4eval[2]=IKsign(x3747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3748=((-1.0)*r20);
IkReal x3750 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3750)==0){
continue;
}
IkReal x3749=pow(x3750,-0.5);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3748),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3751.value));
IkReal gconst97=(r21*x3749);
IkReal gconst98=(x3748*x3749);
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3752.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3753=((-1.0)*r20);
IkReal x3754=x3749;
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3753),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
IkReal x3755=((-1.0)*(x3756.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3755;
IkReal gconst96=x3755;
IkReal gconst97=(r21*x3754);
IkReal gconst98=(x3753*x3754);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3757=((-1.0)*r20);
IkReal x3758=x3749;
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3757),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
IkReal x3759=((-1.0)*(x3760.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3759;
IkReal gconst96=x3759;
IkReal gconst97=(r21*x3758);
IkReal gconst98=(x3757*x3758);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3761=((-1.0)*r20);
IkReal x3762=x3749;
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3761),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
IkReal x3763=((-1.0)*(x3764.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3763;
IkReal gconst96=x3763;
IkReal gconst97=(r21*x3762);
IkReal gconst98=(x3761*x3762);
IkReal x3765=((1.0)*(r22*r22));
CheckValue<IkReal> x3769=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3765))),-1);
if(!x3769.valid){
continue;
}
IkReal x3766=x3769.value;
IkReal x3767=((1.0)*x3766);
IkReal x3768=((((-2.0)*x3766*(r20*r20)*(r21*r21)))+(((-1.0)*x3767*(r20*r20*r20*r20)))+(((-1.0)*x3765))+(((-1.0)*x3767*(r21*r21*r21*r21))));
j4eval[0]=x3768;
j4eval[1]=IKsign(x3768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3770=(cj2*sj1);
IkReal x3771=(gconst98*r20);
IkReal x3772=(cj1*sj2);
IkReal x3773=((1.0)*gconst97*r21);
CheckValue<IkReal> x3774=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3771*x3771)))+(((2.0)*gconst97*r21*x3771))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x3773)))),-1);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775 = IKatan2WithCheck(IkReal((((x3770*x3771))+((x3771*x3772))+(((-1.0)*x3770*x3773))+(((-1.0)*x3772*x3773)))),IkReal((((r22*x3772))+((r22*x3770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3774.value)))+(x3775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3776=IKcos(j4);
IkReal x3777=IKsin(j4);
IkReal x3778=(gconst98*r10);
IkReal x3779=(gconst97*r21);
IkReal x3780=(gconst98*r20);
IkReal x3781=(cj1*cj2);
IkReal x3782=((1.0)*sj1);
IkReal x3783=(gconst98*r00);
IkReal x3784=((1.0)*x3776);
IkReal x3785=((1.0)*x3777);
IkReal x3786=(gconst97*x3777);
IkReal x3787=(gconst97*x3776);
evalcond[0]=(((r22*x3777))+((x3776*x3779))+(((-1.0)*x3780*x3784)));
evalcond[1]=((((-1.0)*x3778*x3784))+cj0+((r12*x3777))+((r11*x3787)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3777))+((r01*x3787))+(((-1.0)*x3783*x3784)));
evalcond[3]=(((x3777*x3779))+(((-1.0)*r22*x3784))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3782))+(((-1.0)*x3780*x3785)));
evalcond[4]=((((-1.0)*r02*x3784))+((r01*x3786))+(((-1.0)*x3783*x3785))+((cj0*x3781))+(((-1.0)*cj0*sj2*x3782)));
evalcond[5]=((((-1.0)*x3778*x3785))+(((-1.0)*sj0*sj2*x3782))+(((-1.0)*r12*x3784))+((sj0*x3781))+((r11*x3786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3788 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3788.valid){
continue;
}
CheckValue<IkReal> x3789=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3788.value)+(((1.5707963267949)*(x3789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3790=IKcos(j4);
IkReal x3791=IKsin(j4);
IkReal x3792=(gconst98*r10);
IkReal x3793=(gconst97*r21);
IkReal x3794=(gconst98*r20);
IkReal x3795=(cj1*cj2);
IkReal x3796=((1.0)*sj1);
IkReal x3797=(gconst98*r00);
IkReal x3798=((1.0)*x3790);
IkReal x3799=((1.0)*x3791);
IkReal x3800=(gconst97*x3791);
IkReal x3801=(gconst97*x3790);
evalcond[0]=(((r22*x3791))+((x3790*x3793))+(((-1.0)*x3794*x3798)));
evalcond[1]=(((r11*x3801))+cj0+((r12*x3791))+(((-1.0)*x3792*x3798)));
evalcond[2]=((((-1.0)*x3797*x3798))+((r01*x3801))+(((-1.0)*sj0))+((r02*x3791)));
evalcond[3]=(((x3791*x3793))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3798))+(((-1.0)*cj2*x3796))+(((-1.0)*x3794*x3799)));
evalcond[4]=((((-1.0)*x3797*x3799))+((r01*x3800))+((cj0*x3795))+(((-1.0)*r02*x3798))+(((-1.0)*cj0*sj2*x3796)));
evalcond[5]=((((-1.0)*r12*x3798))+((r11*x3800))+((sj0*x3795))+(((-1.0)*sj0*sj2*x3796))+(((-1.0)*x3792*x3799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3802 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3802.valid){
continue;
}
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3802.value)+(((1.5707963267949)*(x3803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3804=IKcos(j4);
IkReal x3805=IKsin(j4);
IkReal x3806=(gconst98*r10);
IkReal x3807=(gconst97*r21);
IkReal x3808=(gconst98*r20);
IkReal x3809=(cj1*cj2);
IkReal x3810=((1.0)*sj1);
IkReal x3811=(gconst98*r00);
IkReal x3812=((1.0)*x3804);
IkReal x3813=((1.0)*x3805);
IkReal x3814=(gconst97*x3805);
IkReal x3815=(gconst97*x3804);
evalcond[0]=(((x3804*x3807))+((r22*x3805))+(((-1.0)*x3808*x3812)));
evalcond[1]=(cj0+((r11*x3815))+((r12*x3805))+(((-1.0)*x3806*x3812)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3805))+(((-1.0)*x3811*x3812))+((r01*x3815)));
evalcond[3]=((((-1.0)*r22*x3812))+(((-1.0)*cj2*x3810))+(((-1.0)*x3808*x3813))+(((-1.0)*cj1*sj2))+((x3805*x3807)));
evalcond[4]=((((-1.0)*r02*x3812))+(((-1.0)*x3811*x3813))+((cj0*x3809))+(((-1.0)*cj0*sj2*x3810))+((r01*x3814)));
evalcond[5]=((((-1.0)*r12*x3812))+(((-1.0)*sj0*sj2*x3810))+((r11*x3814))+((sj0*x3809))+(((-1.0)*x3806*x3813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3816=((-1.0)*r21);
IkReal x3818 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3818)==0){
continue;
}
IkReal x3817=pow(x3818,-0.5);
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(x3816),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3819.value))));
IkReal gconst100=(x3816*x3817);
IkReal gconst101=((1.0)*r20*x3817);
CheckValue<IkReal> x3820 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3820.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3820.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3821=((-1.0)*r21);
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal(x3821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
IkReal x3822=((1.0)*(x3824.value));
IkReal x3823=x3817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3822)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3822)));
IkReal gconst100=(x3821*x3823);
IkReal gconst101=((1.0)*r20*x3823);
IkReal x3825=r22*r22;
IkReal x3826=((1.0)*x3825);
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(((-1.0)+x3825),-1);
if(!x3830.valid){
continue;
}
IkReal x3827=x3830.value;
if((((1.0)+(((-1.0)*x3826)))) < -0.00001)
continue;
IkReal x3828=IKsqrt(((1.0)+(((-1.0)*x3826))));
IkReal x3829=(cj0*x3827*x3828);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3826*x3829))+x3829))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3831=((-1.0)*r21);
CheckValue<IkReal> x3834 = IKatan2WithCheck(IkReal(x3831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3834.valid){
continue;
}
IkReal x3832=((1.0)*(x3834.value));
IkReal x3833=x3817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3832)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3832)));
IkReal gconst100=(x3831*x3833);
IkReal gconst101=((1.0)*r20*x3833);
IkReal x3835=r22*r22;
IkReal x3836=((1.0)*x3835);
CheckValue<IkReal> x3840=IKPowWithIntegerCheck(((-1.0)+x3835),-1);
if(!x3840.valid){
continue;
}
IkReal x3837=x3840.value;
if((((1.0)+(((-1.0)*x3836)))) < -0.00001)
continue;
IkReal x3838=IKsqrt(((1.0)+(((-1.0)*x3836))));
IkReal x3839=(sj0*x3837*x3838);
j4eval[0]=((IKabs((x3839+(((-1.0)*x3836*x3839)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3841=((-1.0)*r21);
CheckValue<IkReal> x3844 = IKatan2WithCheck(IkReal(x3841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3844.valid){
continue;
}
IkReal x3842=((1.0)*(x3844.value));
IkReal x3843=x3817;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3842)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3842)));
IkReal gconst100=(x3841*x3843);
IkReal gconst101=((1.0)*r20*x3843);
IkReal x3845=r22*r22;
IkReal x3846=((1.0)*r12*sj0);
IkReal x3847=((1.0)*cj0*r02);
CheckValue<IkReal> x3851=IKPowWithIntegerCheck(((-1.0)+x3845),-1);
if(!x3851.valid){
continue;
}
IkReal x3848=x3851.value;
if((((1.0)+(((-1.0)*x3845)))) < -0.00001)
continue;
IkReal x3849=IKsqrt(((1.0)+(((-1.0)*x3845))));
IkReal x3850=(r22*x3848*x3849);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3846*x3850))+(((-1.0)*x3847*x3850)))))+(IKabs(((((-1.0)*x3846))+(((-1.0)*x3847))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3852=((1.0)*sj0);
IkReal x3853=((1.0)*cj0);
CheckValue<IkReal> x3854=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3854.valid){
continue;
}
CheckValue<IkReal> x3855 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r10*x3852))+((cj0*gconst100*r01))+((gconst100*r11*sj0))+(((-1.0)*gconst101*r00*x3853)))),IkReal(((((-1.0)*r12*x3852))+(((-1.0)*r02*x3853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3854.value)))+(x3855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3856=IKcos(j4);
IkReal x3857=IKsin(j4);
IkReal x3858=(cj1*cj2);
IkReal x3859=(gconst101*r20);
IkReal x3860=(gconst101*r10);
IkReal x3861=((1.0)*sj2);
IkReal x3862=(gconst101*r00);
IkReal x3863=((1.0)*x3856);
IkReal x3864=((1.0)*x3857);
IkReal x3865=(gconst100*x3857);
IkReal x3866=(gconst100*x3856);
evalcond[0]=(((r21*x3866))+(((-1.0)*x3859*x3863))+((r22*x3857)));
evalcond[1]=(((r11*x3866))+(((-1.0)*x3860*x3863))+cj0+((r12*x3857)));
evalcond[2]=(((r02*x3857))+(((-1.0)*sj0))+((r01*x3866))+(((-1.0)*x3862*x3863)));
evalcond[3]=(((r21*x3865))+(((-1.0)*cj2*sj1))+(((-1.0)*x3859*x3864))+(((-1.0)*cj1*x3861))+(((-1.0)*r22*x3863)));
evalcond[4]=((((-1.0)*r02*x3863))+(((-1.0)*cj0*sj1*x3861))+((r01*x3865))+((cj0*x3858))+(((-1.0)*x3862*x3864)));
evalcond[5]=(((r11*x3865))+(((-1.0)*x3860*x3864))+(((-1.0)*r12*x3863))+(((-1.0)*sj0*sj1*x3861))+((sj0*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3867 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3867.valid){
continue;
}
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3867.value)+(((1.5707963267949)*(x3868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3869=IKcos(j4);
IkReal x3870=IKsin(j4);
IkReal x3871=(cj1*cj2);
IkReal x3872=(gconst101*r20);
IkReal x3873=(gconst101*r10);
IkReal x3874=((1.0)*sj2);
IkReal x3875=(gconst101*r00);
IkReal x3876=((1.0)*x3869);
IkReal x3877=((1.0)*x3870);
IkReal x3878=(gconst100*x3870);
IkReal x3879=(gconst100*x3869);
evalcond[0]=(((r22*x3870))+((r21*x3879))+(((-1.0)*x3872*x3876)));
evalcond[1]=((((-1.0)*x3873*x3876))+cj0+((r12*x3870))+((r11*x3879)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3879))+(((-1.0)*x3875*x3876))+((r02*x3870)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3874))+((r21*x3878))+(((-1.0)*r22*x3876))+(((-1.0)*x3872*x3877)));
evalcond[4]=((((-1.0)*cj0*sj1*x3874))+((r01*x3878))+(((-1.0)*x3875*x3877))+(((-1.0)*r02*x3876))+((cj0*x3871)));
evalcond[5]=((((-1.0)*x3873*x3877))+(((-1.0)*r12*x3876))+((sj0*x3871))+(((-1.0)*sj0*sj1*x3874))+((r11*x3878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3880 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3880.valid){
continue;
}
CheckValue<IkReal> x3881=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3880.value)+(((1.5707963267949)*(x3881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3882=IKcos(j4);
IkReal x3883=IKsin(j4);
IkReal x3884=(cj1*cj2);
IkReal x3885=(gconst101*r20);
IkReal x3886=(gconst101*r10);
IkReal x3887=((1.0)*sj2);
IkReal x3888=(gconst101*r00);
IkReal x3889=((1.0)*x3882);
IkReal x3890=((1.0)*x3883);
IkReal x3891=(gconst100*x3883);
IkReal x3892=(gconst100*x3882);
evalcond[0]=(((r22*x3883))+(((-1.0)*x3885*x3889))+((r21*x3892)));
evalcond[1]=(cj0+((r12*x3883))+((r11*x3892))+(((-1.0)*x3886*x3889)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3892))+((r02*x3883))+(((-1.0)*x3888*x3889)));
evalcond[3]=((((-1.0)*cj1*x3887))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3889))+(((-1.0)*x3885*x3890))+((r21*x3891)));
evalcond[4]=((((-1.0)*r02*x3889))+((cj0*x3884))+((r01*x3891))+(((-1.0)*cj0*sj1*x3887))+(((-1.0)*x3888*x3890)));
evalcond[5]=(((sj0*x3884))+(((-1.0)*sj0*sj1*x3887))+(((-1.0)*x3886*x3890))+((r11*x3891))+(((-1.0)*r12*x3889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3894 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3894)==0){
continue;
}
IkReal x3893=pow(x3894,-0.5);
CheckValue<IkReal> x3895 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3895.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3895.value));
IkReal gconst103=((-1.0)*r11*x3893);
IkReal gconst104=(r10*x3893);
CheckValue<IkReal> x3896 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3896.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3899 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3899.valid){
continue;
}
IkReal x3897=((-1.0)*(x3899.value));
IkReal x3898=x3893;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3897;
IkReal gconst102=x3897;
IkReal gconst103=((-1.0)*r11*x3898);
IkReal gconst104=(r10*x3898);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3900=((1.0)*sj0);
IkReal x3901=((1.0)*cj0);
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r10*x3900))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r00*x3901))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r12*x3900))+(((-1.0)*r02*x3901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3902.value)+(((1.5707963267949)*(x3903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKcos(j4);
IkReal x3905=IKsin(j4);
IkReal x3906=(gconst103*r11);
IkReal x3907=(cj1*cj2);
IkReal x3908=((1.0)*sj1);
IkReal x3909=((1.0)*x3904);
IkReal x3910=(gconst103*x3904);
IkReal x3911=(gconst103*x3905);
IkReal x3912=((1.0)*gconst104*x3905);
evalcond[0]=(((r21*x3910))+((r22*x3905))+(((-1.0)*gconst104*r20*x3909)));
evalcond[1]=(cj0+((x3904*x3906))+((r12*x3905))+(((-1.0)*gconst104*r10*x3909)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3910))+(((-1.0)*gconst104*r00*x3909))+((r02*x3905)));
evalcond[3]=((((-1.0)*r20*x3912))+((r21*x3911))+(((-1.0)*r22*x3909))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3908)));
evalcond[4]=(((cj0*x3907))+((r01*x3911))+(((-1.0)*cj0*sj2*x3908))+(((-1.0)*r02*x3909))+(((-1.0)*r00*x3912)));
evalcond[5]=((((-1.0)*r12*x3909))+((sj0*x3907))+((x3905*x3906))+(((-1.0)*r10*x3912))+(((-1.0)*sj0*sj2*x3908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3913.valid){
continue;
}
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3913.value)))+(x3914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3915=IKcos(j4);
IkReal x3916=IKsin(j4);
IkReal x3917=(gconst103*r11);
IkReal x3918=(cj1*cj2);
IkReal x3919=((1.0)*sj1);
IkReal x3920=((1.0)*x3915);
IkReal x3921=(gconst103*x3915);
IkReal x3922=(gconst103*x3916);
IkReal x3923=((1.0)*gconst104*x3916);
evalcond[0]=((((-1.0)*gconst104*r20*x3920))+((r21*x3921))+((r22*x3916)));
evalcond[1]=((((-1.0)*gconst104*r10*x3920))+((x3915*x3917))+cj0+((r12*x3916)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3916))+((r01*x3921))+(((-1.0)*gconst104*r00*x3920)));
evalcond[3]=(((r21*x3922))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3919))+(((-1.0)*r20*x3923))+(((-1.0)*r22*x3920)));
evalcond[4]=((((-1.0)*r02*x3920))+((cj0*x3918))+(((-1.0)*r00*x3923))+((r01*x3922))+(((-1.0)*cj0*sj2*x3919)));
evalcond[5]=((((-1.0)*sj0*sj2*x3919))+(((-1.0)*r10*x3923))+(((-1.0)*r12*x3920))+((sj0*x3918))+((x3916*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3925 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3925)==0){
continue;
}
IkReal x3924=pow(x3925,-0.5);
CheckValue<IkReal> x3926 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3926.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3926.value))));
IkReal gconst106=((1.0)*r11*x3924);
IkReal gconst107=((-1.0)*r10*x3924);
CheckValue<IkReal> x3927 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3927.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3930 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3930.valid){
continue;
}
IkReal x3928=((1.0)*(x3930.value));
IkReal x3929=x3924;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3928)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3928)));
IkReal gconst106=((1.0)*r11*x3929);
IkReal gconst107=((-1.0)*r10*x3929);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
IkReal x3931=((1.0)*(x3933.value));
IkReal x3932=x3924;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3931)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3931)));
IkReal gconst106=((1.0)*r11*x3932);
IkReal gconst107=((-1.0)*r10*x3932);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3936 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3936.valid){
continue;
}
IkReal x3934=((1.0)*(x3936.value));
IkReal x3935=x3924;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3934)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3934)));
IkReal gconst106=((1.0)*r11*x3935);
IkReal gconst107=((-1.0)*r10*x3935);
IkReal x3937=r12*r12;
IkReal x3938=((1.0)*sj0);
IkReal x3939=(cj0*r02);
IkReal x3940=x3924;
j4eval[0]=((IKabs((((r12*x3939*x3940))+((sj0*x3937*x3940))+(((-1.0)*x3938*x3940)))))+(IKabs(((((-1.0)*x3939))+(((-1.0)*r12*x3938))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3941=((1.0)*sj0);
IkReal x3942=((1.0)*gconst107);
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal((((cj0*gconst106*r01))+(((-1.0)*cj0*r00*x3942))+((gconst106*r11*sj0))+(((-1.0)*gconst107*r10*x3941)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3942))+(((-1.0)*gconst106*r20)))),-1);
if(!x3944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3943.value)+(((1.5707963267949)*(x3944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3945=IKcos(j4);
IkReal x3946=IKsin(j4);
IkReal x3947=(cj1*cj2);
IkReal x3948=(gconst107*r10);
IkReal x3949=(gconst107*r00);
IkReal x3950=(gconst107*r20);
IkReal x3951=((1.0)*sj1);
IkReal x3952=((1.0)*x3945);
IkReal x3953=(gconst106*x3945);
IkReal x3954=(gconst106*x3946);
IkReal x3955=((1.0)*x3946);
evalcond[0]=(((r22*x3946))+((r21*x3953))+(((-1.0)*x3950*x3952)));
evalcond[1]=((((-1.0)*x3948*x3952))+cj0+((r11*x3953))+((r12*x3946)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3949*x3952))+((r01*x3953))+((r02*x3946)));
evalcond[3]=(((r21*x3954))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3952))+(((-1.0)*cj2*x3951))+(((-1.0)*x3950*x3955)));
evalcond[4]=((((-1.0)*cj0*sj2*x3951))+(((-1.0)*x3949*x3955))+((cj0*x3947))+((r01*x3954))+(((-1.0)*r02*x3952)));
evalcond[5]=((((-1.0)*x3948*x3955))+((sj0*x3947))+(((-1.0)*r12*x3952))+(((-1.0)*sj0*sj2*x3951))+((r11*x3954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3956=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3956.valid){
continue;
}
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3956.value)))+(x3957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3958=IKcos(j4);
IkReal x3959=IKsin(j4);
IkReal x3960=(cj1*cj2);
IkReal x3961=(gconst107*r10);
IkReal x3962=(gconst107*r00);
IkReal x3963=(gconst107*r20);
IkReal x3964=((1.0)*sj1);
IkReal x3965=((1.0)*x3958);
IkReal x3966=(gconst106*x3958);
IkReal x3967=(gconst106*x3959);
IkReal x3968=((1.0)*x3959);
evalcond[0]=((((-1.0)*x3963*x3965))+((r21*x3966))+((r22*x3959)));
evalcond[1]=(cj0+((r11*x3966))+(((-1.0)*x3961*x3965))+((r12*x3959)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3962*x3965))+((r02*x3959))+((r01*x3966)));
evalcond[3]=((((-1.0)*cj2*x3964))+(((-1.0)*x3963*x3968))+(((-1.0)*cj1*sj2))+((r21*x3967))+(((-1.0)*r22*x3965)));
evalcond[4]=((((-1.0)*x3962*x3968))+(((-1.0)*r02*x3965))+(((-1.0)*cj0*sj2*x3964))+((r01*x3967))+((cj0*x3960)));
evalcond[5]=((((-1.0)*sj0*sj2*x3964))+((r11*x3967))+(((-1.0)*x3961*x3968))+(((-1.0)*r12*x3965))+((sj0*x3960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3969=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3969.valid){
continue;
}
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3969.value)))+(x3970.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3971=IKcos(j4);
IkReal x3972=IKsin(j4);
IkReal x3973=(cj1*cj2);
IkReal x3974=(gconst107*r10);
IkReal x3975=(gconst107*r00);
IkReal x3976=(gconst107*r20);
IkReal x3977=((1.0)*sj1);
IkReal x3978=((1.0)*x3971);
IkReal x3979=(gconst106*x3971);
IkReal x3980=(gconst106*x3972);
IkReal x3981=((1.0)*x3972);
evalcond[0]=((((-1.0)*x3976*x3978))+((r22*x3972))+((r21*x3979)));
evalcond[1]=(cj0+((r11*x3979))+((r12*x3972))+(((-1.0)*x3974*x3978)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3972))+((r01*x3979))+(((-1.0)*x3975*x3978)));
evalcond[3]=(((r21*x3980))+(((-1.0)*x3976*x3981))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3978))+(((-1.0)*cj2*x3977)));
evalcond[4]=((((-1.0)*r02*x3978))+(((-1.0)*cj0*sj2*x3977))+((r01*x3980))+((cj0*x3973))+(((-1.0)*x3975*x3981)));
evalcond[5]=((((-1.0)*r12*x3978))+((r11*x3980))+(((-1.0)*sj0*sj2*x3977))+((sj0*x3973))+(((-1.0)*x3974*x3981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3982=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3982;
j4eval[1]=IKsign(x3982);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3983=((1.0)*cj5);
IkReal x3984=((((-1.0)*r21*x3983))+(((-1.0)*r20*sj5)));
j4eval[0]=x3984;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3983))))));
j4eval[2]=IKsign(x3984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3985=cj5*cj5;
IkReal x3986=r11*r11;
IkReal x3987=(cj5*r10);
IkReal x3988=(r11*sj5);
IkReal x3989=((((-1.0)*x3985*(r10*r10)))+((x3985*x3986))+(((2.0)*x3987*x3988))+(((-1.0)*(r12*r12)))+(((-1.0)*x3986)));
j4eval[0]=x3989;
j4eval[1]=((IKabs(r12))+(IKabs((x3988+(((-1.0)*x3987))))));
j4eval[2]=IKsign(x3989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3990=cj5*cj5;
IkReal x3991=r11*r11;
IkReal x3992=(cj5*r10);
IkReal x3993=(r11*sj5);
CheckValue<IkReal> x3994 = IKatan2WithCheck(IkReal(r12),IkReal((x3993+(((-1.0)*x3992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3994.valid){
continue;
}
CheckValue<IkReal> x3995=IKPowWithIntegerCheck(IKsign(((((2.0)*x3992*x3993))+(((-1.0)*x3990*(r10*r10)))+((x3990*x3991))+(((-1.0)*(r12*r12)))+(((-1.0)*x3991)))),-1);
if(!x3995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3994.value)+(((1.5707963267949)*(x3995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3996=IKcos(j4);
IkReal x3997=IKsin(j4);
IkReal x3998=(cj5*r00);
IkReal x3999=(cj5*r10);
IkReal x4000=((1.0)*sj1);
IkReal x4001=(cj5*r20);
IkReal x4002=((1.0)*x3996);
IkReal x4003=((1.0)*x3997);
IkReal x4004=(sj5*x3996);
IkReal x4005=(sj5*x3997);
evalcond[0]=((((-1.0)*x4001*x4002))+((r22*x3997))+((r21*x4004)));
evalcond[1]=((((-1.0)*x3998*x4002))+((r01*x4004))+((r02*x3997)));
evalcond[2]=((1.0)+(((-1.0)*x3999*x4002))+((r12*x3997))+((r11*x4004)));
evalcond[3]=((((-1.0)*x3999*x4003))+(((-1.0)*r12*x4002))+((r11*x4005)));
evalcond[4]=((((-1.0)*x3998*x4003))+(((-1.0)*r02*x4002))+((r01*x4005))+(((-1.0)*sj2*x4000))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x4002))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4000))+(((-1.0)*x4001*x4003))+((r21*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4006=((1.0)*cj5);
CheckValue<IkReal> x4007 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4006))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4007.valid){
continue;
}
CheckValue<IkReal> x4008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4006))+(((-1.0)*r20*sj5)))),-1);
if(!x4008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4007.value)+(((1.5707963267949)*(x4008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4009=IKcos(j4);
IkReal x4010=IKsin(j4);
IkReal x4011=(cj5*r00);
IkReal x4012=(cj5*r10);
IkReal x4013=((1.0)*sj1);
IkReal x4014=(cj5*r20);
IkReal x4015=((1.0)*x4009);
IkReal x4016=((1.0)*x4010);
IkReal x4017=(sj5*x4009);
IkReal x4018=(sj5*x4010);
evalcond[0]=(((r21*x4017))+(((-1.0)*x4014*x4015))+((r22*x4010)));
evalcond[1]=(((r02*x4010))+(((-1.0)*x4011*x4015))+((r01*x4017)));
evalcond[2]=((1.0)+(((-1.0)*x4012*x4015))+((r12*x4010))+((r11*x4017)));
evalcond[3]=((((-1.0)*r12*x4015))+(((-1.0)*x4012*x4016))+((r11*x4018)));
evalcond[4]=((((-1.0)*x4011*x4016))+(((-1.0)*r02*x4015))+((r01*x4018))+(((-1.0)*sj2*x4013))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x4015))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4013))+((r21*x4018))+(((-1.0)*x4014*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4019.value)))+(x4020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4021=IKcos(j4);
IkReal x4022=IKsin(j4);
IkReal x4023=(cj5*r00);
IkReal x4024=(cj5*r10);
IkReal x4025=((1.0)*sj1);
IkReal x4026=(cj5*r20);
IkReal x4027=((1.0)*x4021);
IkReal x4028=((1.0)*x4022);
IkReal x4029=(sj5*x4021);
IkReal x4030=(sj5*x4022);
evalcond[0]=((((-1.0)*x4026*x4027))+((r21*x4029))+((r22*x4022)));
evalcond[1]=((((-1.0)*x4023*x4027))+((r01*x4029))+((r02*x4022)));
evalcond[2]=((1.0)+(((-1.0)*x4024*x4027))+((r12*x4022))+((r11*x4029)));
evalcond[3]=((((-1.0)*r12*x4027))+(((-1.0)*x4024*x4028))+((r11*x4030)));
evalcond[4]=((((-1.0)*x4023*x4028))+(((-1.0)*r02*x4027))+((r01*x4030))+((cj1*cj2))+(((-1.0)*sj2*x4025)));
evalcond[5]=(((r21*x4030))+(((-1.0)*r22*x4027))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4025))+(((-1.0)*x4026*x4028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4031=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4031;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4032=((1.0)*cj5);
IkReal x4033=((((-1.0)*r01*x4032))+(((-1.0)*r00*sj5)));
j4eval[0]=x4033;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4032))))));
j4eval[2]=IKsign(x4033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4034=cj5*cj5;
IkReal x4035=r11*r11;
IkReal x4036=(r11*sj5);
IkReal x4037=(cj5*r10);
IkReal x4038=((((-1.0)*x4034*x4035))+(r12*r12)+((x4034*(r10*r10)))+x4035+(((-2.0)*x4036*x4037)));
j4eval[0]=x4038;
j4eval[1]=((IKabs(r12))+(IKabs((x4036+(((-1.0)*x4037))))));
j4eval[2]=IKsign(x4038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4039=cj5*cj5;
IkReal x4040=r11*r11;
IkReal x4041=(cj5*r10);
IkReal x4042=(r11*sj5);
CheckValue<IkReal> x4043 = IKatan2WithCheck(IkReal(r12),IkReal((x4042+(((-1.0)*x4041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4043.valid){
continue;
}
CheckValue<IkReal> x4044=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4040+((x4039*(r10*r10)))+(((-1.0)*x4039*x4040))+(((-2.0)*x4041*x4042)))),-1);
if(!x4044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4043.value)+(((1.5707963267949)*(x4044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4045=IKcos(j4);
IkReal x4046=IKsin(j4);
IkReal x4047=(cj5*r00);
IkReal x4048=(cj5*r10);
IkReal x4049=((1.0)*cj2);
IkReal x4050=(cj5*r20);
IkReal x4051=((1.0)*x4045);
IkReal x4052=((1.0)*x4046);
IkReal x4053=(sj5*x4045);
IkReal x4054=(sj5*x4046);
evalcond[0]=(((r22*x4046))+(((-1.0)*x4050*x4051))+((r21*x4053)));
evalcond[1]=(((r02*x4046))+(((-1.0)*x4047*x4051))+((r01*x4053)));
evalcond[2]=((-1.0)+((r11*x4053))+((r12*x4046))+(((-1.0)*x4048*x4051)));
evalcond[3]=((((-1.0)*r12*x4051))+((r11*x4054))+(((-1.0)*x4048*x4052)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4047*x4052))+(((-1.0)*cj1*x4049))+(((-1.0)*r02*x4051))+((r01*x4054)));
evalcond[5]=((((-1.0)*sj1*x4049))+(((-1.0)*x4050*x4052))+((r21*x4054))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4055=((1.0)*cj5);
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4055))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
CheckValue<IkReal> x4057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4055)))),-1);
if(!x4057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4056.value)+(((1.5707963267949)*(x4057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4058=IKcos(j4);
IkReal x4059=IKsin(j4);
IkReal x4060=(cj5*r00);
IkReal x4061=(cj5*r10);
IkReal x4062=((1.0)*cj2);
IkReal x4063=(cj5*r20);
IkReal x4064=((1.0)*x4058);
IkReal x4065=((1.0)*x4059);
IkReal x4066=(sj5*x4058);
IkReal x4067=(sj5*x4059);
evalcond[0]=((((-1.0)*x4063*x4064))+((r21*x4066))+((r22*x4059)));
evalcond[1]=((((-1.0)*x4060*x4064))+((r02*x4059))+((r01*x4066)));
evalcond[2]=((-1.0)+(((-1.0)*x4061*x4064))+((r11*x4066))+((r12*x4059)));
evalcond[3]=((((-1.0)*x4061*x4065))+(((-1.0)*r12*x4064))+((r11*x4067)));
evalcond[4]=((((-1.0)*x4060*x4065))+((sj1*sj2))+(((-1.0)*r02*x4064))+(((-1.0)*cj1*x4062))+((r01*x4067)));
evalcond[5]=((((-1.0)*x4063*x4065))+((r21*x4067))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4064))+(((-1.0)*sj1*x4062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4068.valid){
continue;
}
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4068.value)))+(x4069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4070=IKcos(j4);
IkReal x4071=IKsin(j4);
IkReal x4072=(cj5*r00);
IkReal x4073=(cj5*r10);
IkReal x4074=((1.0)*cj2);
IkReal x4075=(cj5*r20);
IkReal x4076=((1.0)*x4070);
IkReal x4077=((1.0)*x4071);
IkReal x4078=(sj5*x4070);
IkReal x4079=(sj5*x4071);
evalcond[0]=((((-1.0)*x4075*x4076))+((r22*x4071))+((r21*x4078)));
evalcond[1]=(((r01*x4078))+((r02*x4071))+(((-1.0)*x4072*x4076)));
evalcond[2]=((-1.0)+((r12*x4071))+((r11*x4078))+(((-1.0)*x4073*x4076)));
evalcond[3]=((((-1.0)*r12*x4076))+((r11*x4079))+(((-1.0)*x4073*x4077)));
evalcond[4]=((((-1.0)*r02*x4076))+((r01*x4079))+((sj1*sj2))+(((-1.0)*cj1*x4074))+(((-1.0)*x4072*x4077)));
evalcond[5]=((((-1.0)*x4075*x4077))+(((-1.0)*r22*x4076))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4074))+((r21*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4081 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4081)==0){
continue;
}
IkReal x4080=pow(x4081,-0.5);
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4082.value));
IkReal gconst109=((-1.0)*r01*x4080);
IkReal gconst110=(r00*x4080);
CheckValue<IkReal> x4083 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4083.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4083.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4086 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4086.valid){
continue;
}
IkReal x4084=((-1.0)*(x4086.value));
IkReal x4085=x4080;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4084;
IkReal gconst108=x4084;
IkReal gconst109=((-1.0)*r01*x4085);
IkReal gconst110=(r00*x4085);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4087=((1.0)*sj0);
IkReal x4088=((1.0)*gconst110);
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4088))+(((-1.0)*gconst110*r10*x4087))+((gconst109*r11*sj0)))),IkReal(((((-1.0)*r12*x4087))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4088))+(((-1.0)*gconst109*r20)))),-1);
if(!x4090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4089.value)+(((1.5707963267949)*(x4090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4091=IKcos(j4);
IkReal x4092=IKsin(j4);
IkReal x4093=((1.0)*sj2);
IkReal x4094=(cj1*cj2);
IkReal x4095=(gconst109*r21);
IkReal x4096=((1.0)*x4091);
IkReal x4097=(gconst109*x4092);
IkReal x4098=(gconst109*x4091);
IkReal x4099=((1.0)*gconst110*x4092);
evalcond[0]=(((r22*x4092))+((x4091*x4095))+(((-1.0)*gconst110*r20*x4096)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x4096))+((r11*x4098))+((r12*x4092)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4098))+((r02*x4092))+(((-1.0)*gconst110*r00*x4096)));
evalcond[3]=((((-1.0)*r20*x4099))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4096))+(((-1.0)*cj1*x4093))+((x4092*x4095)));
evalcond[4]=(((r01*x4097))+((cj0*x4094))+(((-1.0)*cj0*sj1*x4093))+(((-1.0)*r00*x4099))+(((-1.0)*r02*x4096)));
evalcond[5]=((((-1.0)*r12*x4096))+(((-1.0)*r10*x4099))+((r11*x4097))+(((-1.0)*sj0*sj1*x4093))+((sj0*x4094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4102=IKcos(j4);
IkReal x4103=IKsin(j4);
IkReal x4104=((1.0)*sj2);
IkReal x4105=(cj1*cj2);
IkReal x4106=(gconst109*r21);
IkReal x4107=((1.0)*x4102);
IkReal x4108=(gconst109*x4103);
IkReal x4109=(gconst109*x4102);
IkReal x4110=((1.0)*gconst110*x4103);
evalcond[0]=(((r22*x4103))+(((-1.0)*gconst110*r20*x4107))+((x4102*x4106)));
evalcond[1]=(cj0+((r12*x4103))+((r11*x4109))+(((-1.0)*gconst110*r10*x4107)));
evalcond[2]=((((-1.0)*gconst110*r00*x4107))+(((-1.0)*sj0))+((r02*x4103))+((r01*x4109)));
evalcond[3]=((((-1.0)*cj1*x4104))+(((-1.0)*r22*x4107))+(((-1.0)*cj2*sj1))+((x4103*x4106))+(((-1.0)*r20*x4110)));
evalcond[4]=((((-1.0)*r00*x4110))+((cj0*x4105))+(((-1.0)*cj0*sj1*x4104))+((r01*x4108))+(((-1.0)*r02*x4107)));
evalcond[5]=((((-1.0)*sj0*sj1*x4104))+(((-1.0)*r12*x4107))+(((-1.0)*r10*x4110))+((sj0*x4105))+((r11*x4108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4112 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4112)==0){
continue;
}
IkReal x4111=pow(x4112,-0.5);
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4113.value))));
IkReal gconst112=((1.0)*r01*x4111);
IkReal gconst113=((-1.0)*r00*x4111);
CheckValue<IkReal> x4114 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4117 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4117.valid){
continue;
}
IkReal x4115=((1.0)*(x4117.value));
IkReal x4116=x4111;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4115)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4115)));
IkReal gconst112=((1.0)*r01*x4116);
IkReal gconst113=((-1.0)*r00*x4116);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4120 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4120.valid){
continue;
}
IkReal x4118=((1.0)*(x4120.value));
IkReal x4119=x4111;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4118)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4118)));
IkReal gconst112=((1.0)*r01*x4119);
IkReal gconst113=((-1.0)*r00*x4119);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
IkReal x4121=((1.0)*(x4123.value));
IkReal x4122=x4111;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4121)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4121)));
IkReal gconst112=((1.0)*r01*x4122);
IkReal gconst113=((-1.0)*r00*x4122);
IkReal x4124=r02*r02;
IkReal x4125=(r12*sj0);
IkReal x4126=((1.0)*cj0);
IkReal x4127=x4111;
j4eval[0]=((IKabs(((((-1.0)*x4126*x4127))+((r02*x4125*x4127))+((cj0*x4124*x4127)))))+(IKabs(((((-1.0)*r02*x4126))+(((-1.0)*x4125))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4128=((1.0)*sj0);
IkReal x4129=((1.0)*cj0);
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r00*x4129))+((gconst112*r11*sj0))+(((-1.0)*gconst113*r10*x4128)))),IkReal(((((-1.0)*r12*x4128))+(((-1.0)*r02*x4129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
CheckValue<IkReal> x4131=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x4131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4130.value)+(((1.5707963267949)*(x4131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4132=IKcos(j4);
IkReal x4133=IKsin(j4);
IkReal x4134=(cj1*cj2);
IkReal x4135=(gconst113*r20);
IkReal x4136=(gconst112*r21);
IkReal x4137=(gconst113*r00);
IkReal x4138=((1.0)*sj1);
IkReal x4139=(gconst113*r10);
IkReal x4140=((1.0)*x4132);
IkReal x4141=((1.0)*x4133);
IkReal x4142=(gconst112*x4132);
IkReal x4143=(gconst112*x4133);
evalcond[0]=(((r22*x4133))+((x4132*x4136))+(((-1.0)*x4135*x4140)));
evalcond[1]=(cj0+((r11*x4142))+((r12*x4133))+(((-1.0)*x4139*x4140)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4142))+(((-1.0)*x4137*x4140))+((r02*x4133)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x4135*x4141))+((x4133*x4136))+(((-1.0)*cj2*x4138))+(((-1.0)*r22*x4140)));
evalcond[4]=(((r01*x4143))+(((-1.0)*r02*x4140))+(((-1.0)*cj0*sj2*x4138))+((cj0*x4134))+(((-1.0)*x4137*x4141)));
evalcond[5]=((((-1.0)*sj0*sj2*x4138))+((r11*x4143))+((sj0*x4134))+(((-1.0)*x4139*x4141))+(((-1.0)*r12*x4140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4144.value)+(((1.5707963267949)*(x4145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4146=IKcos(j4);
IkReal x4147=IKsin(j4);
IkReal x4148=(cj1*cj2);
IkReal x4149=(gconst113*r20);
IkReal x4150=(gconst112*r21);
IkReal x4151=(gconst113*r00);
IkReal x4152=((1.0)*sj1);
IkReal x4153=(gconst113*r10);
IkReal x4154=((1.0)*x4146);
IkReal x4155=((1.0)*x4147);
IkReal x4156=(gconst112*x4146);
IkReal x4157=(gconst112*x4147);
evalcond[0]=(((r22*x4147))+(((-1.0)*x4149*x4154))+((x4146*x4150)));
evalcond[1]=(cj0+((r12*x4147))+(((-1.0)*x4153*x4154))+((r11*x4156)));
evalcond[2]=(((r02*x4147))+(((-1.0)*sj0))+((r01*x4156))+(((-1.0)*x4151*x4154)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*x4149*x4155))+((x4147*x4150))+(((-1.0)*r22*x4154))+(((-1.0)*cj2*x4152)));
evalcond[4]=(((r01*x4157))+(((-1.0)*r02*x4154))+(((-1.0)*cj0*sj2*x4152))+(((-1.0)*x4151*x4155))+((cj0*x4148)));
evalcond[5]=((((-1.0)*sj0*sj2*x4152))+(((-1.0)*x4153*x4155))+((sj0*x4148))+((r11*x4157))+(((-1.0)*r12*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4158 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4158.valid){
continue;
}
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4158.value)+(((1.5707963267949)*(x4159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4160=IKcos(j4);
IkReal x4161=IKsin(j4);
IkReal x4162=(cj1*cj2);
IkReal x4163=(gconst113*r20);
IkReal x4164=(gconst112*r21);
IkReal x4165=(gconst113*r00);
IkReal x4166=((1.0)*sj1);
IkReal x4167=(gconst113*r10);
IkReal x4168=((1.0)*x4160);
IkReal x4169=((1.0)*x4161);
IkReal x4170=(gconst112*x4160);
IkReal x4171=(gconst112*x4161);
evalcond[0]=(((r22*x4161))+((x4160*x4164))+(((-1.0)*x4163*x4168)));
evalcond[1]=(((r11*x4170))+cj0+((r12*x4161))+(((-1.0)*x4167*x4168)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4165*x4168))+((r02*x4161))+((r01*x4170)));
evalcond[3]=((((-1.0)*cj2*x4166))+(((-1.0)*cj1*sj2))+(((-1.0)*x4163*x4169))+((x4161*x4164))+(((-1.0)*r22*x4168)));
evalcond[4]=((((-1.0)*r02*x4168))+(((-1.0)*x4165*x4169))+((cj0*x4162))+((r01*x4171))+(((-1.0)*cj0*sj2*x4166)));
evalcond[5]=(((r11*x4171))+(((-1.0)*sj0*sj2*x4166))+(((-1.0)*r12*x4168))+((sj0*x4162))+(((-1.0)*x4167*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4172=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4172;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4172);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4173=((1.0)*cj5);
IkReal x4174=((((-1.0)*r21*x4173))+(((-1.0)*r20*sj5)));
j4eval[0]=x4174;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4173))))));
j4eval[2]=IKsign(x4174);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4175=cj5*cj5;
IkReal x4176=r01*r01;
IkReal x4177=(cj5*r00);
IkReal x4178=(r01*sj5);
IkReal x4179=(((x4175*(r00*r00)))+(((-2.0)*x4177*x4178))+x4176+(r02*r02)+(((-1.0)*x4175*x4176)));
j4eval[0]=x4179;
j4eval[1]=IKsign(x4179);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4177))+x4178))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4180=cj5*cj5;
IkReal x4181=r01*r01;
IkReal x4182=(r01*sj5);
IkReal x4183=(cj5*r00);
CheckValue<IkReal> x4184 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4183))+x4182)),IKFAST_ATAN2_MAGTHRESH);
if(!x4184.valid){
continue;
}
CheckValue<IkReal> x4185=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4182*x4183))+((x4180*(r00*r00)))+(((-1.0)*x4180*x4181))+x4181+(r02*r02))),-1);
if(!x4185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4184.value)+(((1.5707963267949)*(x4185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4186=IKcos(j4);
IkReal x4187=IKsin(j4);
IkReal x4188=(cj5*r00);
IkReal x4189=(cj5*r10);
IkReal x4190=((1.0)*sj1);
IkReal x4191=(cj5*r20);
IkReal x4192=((1.0)*x4186);
IkReal x4193=((1.0)*x4187);
IkReal x4194=(sj5*x4186);
IkReal x4195=(sj5*x4187);
evalcond[0]=(((r21*x4194))+((r22*x4187))+(((-1.0)*x4191*x4192)));
evalcond[1]=(((r12*x4187))+((r11*x4194))+(((-1.0)*x4189*x4192)));
evalcond[2]=((-1.0)+((r02*x4187))+((r01*x4194))+(((-1.0)*x4188*x4192)));
evalcond[3]=((((-1.0)*r02*x4192))+((r01*x4195))+(((-1.0)*x4188*x4193)));
evalcond[4]=((((-1.0)*r12*x4192))+((r11*x4195))+(((-1.0)*x4189*x4193))+((cj1*cj2))+(((-1.0)*sj2*x4190)));
evalcond[5]=(((r21*x4195))+(((-1.0)*cj1*sj2))+(((-1.0)*x4191*x4193))+(((-1.0)*r22*x4192))+(((-1.0)*cj2*x4190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4196=((1.0)*cj5);
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4196)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4196))+(((-1.0)*r20*sj5)))),-1);
if(!x4198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4197.value)+(((1.5707963267949)*(x4198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4199=IKcos(j4);
IkReal x4200=IKsin(j4);
IkReal x4201=(cj5*r00);
IkReal x4202=(cj5*r10);
IkReal x4203=((1.0)*sj1);
IkReal x4204=(cj5*r20);
IkReal x4205=((1.0)*x4199);
IkReal x4206=((1.0)*x4200);
IkReal x4207=(sj5*x4199);
IkReal x4208=(sj5*x4200);
evalcond[0]=(((r22*x4200))+((r21*x4207))+(((-1.0)*x4204*x4205)));
evalcond[1]=(((r11*x4207))+(((-1.0)*x4202*x4205))+((r12*x4200)));
evalcond[2]=((-1.0)+((r02*x4200))+(((-1.0)*x4201*x4205))+((r01*x4207)));
evalcond[3]=((((-1.0)*r02*x4205))+(((-1.0)*x4201*x4206))+((r01*x4208)));
evalcond[4]=(((r11*x4208))+(((-1.0)*r12*x4205))+(((-1.0)*sj2*x4203))+(((-1.0)*x4202*x4206))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x4203))+(((-1.0)*r22*x4205))+(((-1.0)*cj1*sj2))+((r21*x4208))+(((-1.0)*x4204*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
CheckValue<IkReal> x4210=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4209.value)+(((1.5707963267949)*(x4210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4211=IKcos(j4);
IkReal x4212=IKsin(j4);
IkReal x4213=(cj5*r00);
IkReal x4214=(cj5*r10);
IkReal x4215=((1.0)*sj1);
IkReal x4216=(cj5*r20);
IkReal x4217=((1.0)*x4211);
IkReal x4218=((1.0)*x4212);
IkReal x4219=(sj5*x4211);
IkReal x4220=(sj5*x4212);
evalcond[0]=(((r22*x4212))+(((-1.0)*x4216*x4217))+((r21*x4219)));
evalcond[1]=(((r12*x4212))+((r11*x4219))+(((-1.0)*x4214*x4217)));
evalcond[2]=((-1.0)+(((-1.0)*x4213*x4217))+((r02*x4212))+((r01*x4219)));
evalcond[3]=(((r01*x4220))+(((-1.0)*x4213*x4218))+(((-1.0)*r02*x4217)));
evalcond[4]=((((-1.0)*sj2*x4215))+(((-1.0)*r12*x4217))+(((-1.0)*x4214*x4218))+((cj1*cj2))+((r11*x4220)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4216*x4218))+(((-1.0)*r22*x4217))+(((-1.0)*cj2*x4215))+((r21*x4220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4221=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4221;
j4eval[1]=IKsign(x4221);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4222=((1.0)*cj5);
IkReal x4223=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4222)));
j4eval[0]=x4223;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4222)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4224=cj5*cj5;
IkReal x4225=r01*r01;
IkReal x4226=(r01*sj5);
IkReal x4227=(cj5*r00);
IkReal x4228=(((x4224*x4225))+(((-1.0)*x4225))+(((-1.0)*x4224*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4226*x4227)));
j4eval[0]=x4228;
j4eval[1]=IKsign(x4228);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4227))+x4226))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4229=cj5*cj5;
IkReal x4230=r01*r01;
IkReal x4231=(r01*sj5);
IkReal x4232=(cj5*r00);
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4232))+x4231)),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4229*(r00*r00)))+(((-1.0)*x4230))+(((-1.0)*(r02*r02)))+((x4229*x4230))+(((2.0)*x4231*x4232)))),-1);
if(!x4234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4233.value)+(((1.5707963267949)*(x4234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4235=IKcos(j4);
IkReal x4236=IKsin(j4);
IkReal x4237=(cj5*r00);
IkReal x4238=(cj5*r10);
IkReal x4239=((1.0)*cj2);
IkReal x4240=(cj5*r20);
IkReal x4241=((1.0)*x4235);
IkReal x4242=((1.0)*x4236);
IkReal x4243=(sj5*x4235);
IkReal x4244=(sj5*x4236);
evalcond[0]=((((-1.0)*x4240*x4241))+((r22*x4236))+((r21*x4243)));
evalcond[1]=(((r12*x4236))+(((-1.0)*x4238*x4241))+((r11*x4243)));
evalcond[2]=((1.0)+((r01*x4243))+((r02*x4236))+(((-1.0)*x4237*x4241)));
evalcond[3]=(((r01*x4244))+(((-1.0)*x4237*x4242))+(((-1.0)*r02*x4241)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x4241))+(((-1.0)*x4238*x4242))+(((-1.0)*cj1*x4239))+((r11*x4244)));
evalcond[5]=((((-1.0)*x4240*x4242))+(((-1.0)*r22*x4241))+(((-1.0)*cj1*sj2))+((r21*x4244))+(((-1.0)*sj1*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4245=((1.0)*cj5);
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4245)))),-1);
if(!x4246.valid){
continue;
}
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x4245)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4246.value)))+(x4247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4248=IKcos(j4);
IkReal x4249=IKsin(j4);
IkReal x4250=(cj5*r00);
IkReal x4251=(cj5*r10);
IkReal x4252=((1.0)*cj2);
IkReal x4253=(cj5*r20);
IkReal x4254=((1.0)*x4248);
IkReal x4255=((1.0)*x4249);
IkReal x4256=(sj5*x4248);
IkReal x4257=(sj5*x4249);
evalcond[0]=((((-1.0)*x4253*x4254))+((r22*x4249))+((r21*x4256)));
evalcond[1]=((((-1.0)*x4251*x4254))+((r11*x4256))+((r12*x4249)));
evalcond[2]=((1.0)+((r01*x4256))+((r02*x4249))+(((-1.0)*x4250*x4254)));
evalcond[3]=(((r01*x4257))+(((-1.0)*x4250*x4255))+(((-1.0)*r02*x4254)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4252))+(((-1.0)*x4251*x4255))+((r11*x4257))+(((-1.0)*r12*x4254)));
evalcond[5]=((((-1.0)*sj1*x4252))+(((-1.0)*x4253*x4255))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4254))+((r21*x4257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4258=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4258.valid){
continue;
}
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4258.value)))+(x4259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4260=IKcos(j4);
IkReal x4261=IKsin(j4);
IkReal x4262=(cj5*r00);
IkReal x4263=(cj5*r10);
IkReal x4264=((1.0)*cj2);
IkReal x4265=(cj5*r20);
IkReal x4266=((1.0)*x4260);
IkReal x4267=((1.0)*x4261);
IkReal x4268=(sj5*x4260);
IkReal x4269=(sj5*x4261);
evalcond[0]=(((r21*x4268))+(((-1.0)*x4265*x4266))+((r22*x4261)));
evalcond[1]=(((r11*x4268))+(((-1.0)*x4263*x4266))+((r12*x4261)));
evalcond[2]=((1.0)+((r01*x4268))+((r02*x4261))+(((-1.0)*x4262*x4266)));
evalcond[3]=(((r01*x4269))+(((-1.0)*r02*x4266))+(((-1.0)*x4262*x4267)));
evalcond[4]=((((-1.0)*r12*x4266))+((r11*x4269))+(((-1.0)*x4263*x4267))+((sj1*sj2))+(((-1.0)*cj1*x4264)));
evalcond[5]=((((-1.0)*sj1*x4264))+((r21*x4269))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4266))+(((-1.0)*x4265*x4267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4270=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4270);
rxp1_1=(px*r21);
rxp1_2=(r11*x4270);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4271=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4271);
rxp1_1=(px*r21);
rxp1_2=(r11*x4271);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4272=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4272);
rxp1_1=(px*r21);
rxp1_2=(r11*x4272);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4275.valid){
continue;
}
IkReal x4273=x4275.value;
IkReal x4274=(sj0*x4273);
sj4array[0]=(((sj1*sj2*x4274))+(((-1.0)*cj1*cj2*x4274)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4276=IKcos(j4);
IkReal x4277=IKsin(j4);
IkReal x4278=(r21*sj5);
IkReal x4279=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x4276);
evalcond[1]=((((-1.0)*sj0))+((r02*x4277)));
evalcond[2]=((((-1.0)*x4276*x4279))+((x4276*x4278)));
evalcond[3]=(((r11*sj5*x4276))+(((-1.0)*cj5*r10*x4276)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4277*x4279))+((x4277*x4278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4281=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4281.valid){
continue;
}
IkReal x4280=x4281.value;
sj4array[0]=(((cj1*sj2*x4280))+((cj2*sj1*x4280)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4282=IKcos(j4);
IkReal x4283=IKsin(j4);
IkReal x4284=((1.0)*sj0);
IkReal x4285=((1.0)*cj5);
IkReal x4286=(sj5*x4282);
evalcond[0]=((-1.0)*r02*x4282);
evalcond[1]=((((-1.0)*x4284))+((r02*x4283)));
evalcond[2]=((((-1.0)*r20*x4282*x4285))+((r21*x4286)));
evalcond[3]=(((r11*x4286))+(((-1.0)*r10*x4282*x4285)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x4284))+((r11*sj5*x4283))+(((-1.0)*r10*x4283*x4285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(r02,-1);
if(!x4287.valid){
continue;
}
sj4array[0]=(sj0*(x4287.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4288=IKcos(j4);
IkReal x4289=IKsin(j4);
IkReal x4290=((1.0)*sj1);
IkReal x4291=(r21*sj5);
IkReal x4292=(r11*sj5);
IkReal x4293=((1.0)*cj5*x4289);
IkReal x4294=((1.0)*cj5*x4288);
evalcond[0]=((-1.0)*r02*x4288);
evalcond[1]=(((x4288*x4291))+(((-1.0)*r20*x4294)));
evalcond[2]=((((-1.0)*r10*x4294))+((x4288*x4292)));
evalcond[3]=((((-1.0)*cj2*x4290))+((x4289*x4291))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x4293)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x4293))+((x4289*x4292))+(((-1.0)*sj0*sj2*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4295=((1.0)*sj0);
IkReal x4296=((1.0)*cj0);
CheckValue<IkReal> x4297 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4296))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x4295)))),IkReal(((((-1.0)*r12*x4295))+(((-1.0)*r02*x4296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4297.valid){
continue;
}
CheckValue<IkReal> x4298=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4297.value)+(((1.5707963267949)*(x4298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4299=IKcos(j4);
IkReal x4300=IKsin(j4);
IkReal x4301=(cj5*r00);
IkReal x4302=(cj1*cj2);
IkReal x4303=(cj5*r10);
IkReal x4304=((1.0)*sj1);
IkReal x4305=(cj5*r20);
IkReal x4306=((1.0)*x4299);
IkReal x4307=((1.0)*x4300);
IkReal x4308=(sj5*x4299);
IkReal x4309=(sj5*x4300);
evalcond[0]=(((r22*x4300))+(((-1.0)*x4305*x4306))+((r21*x4308)));
evalcond[1]=(((r12*x4300))+((r11*x4308))+cj0+(((-1.0)*x4303*x4306)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4300))+((r01*x4308))+(((-1.0)*x4301*x4306)));
evalcond[3]=((((-1.0)*r22*x4306))+(((-1.0)*cj2*x4304))+(((-1.0)*cj1*sj2))+(((-1.0)*x4305*x4307))+((r21*x4309)));
evalcond[4]=((((-1.0)*cj0*sj2*x4304))+((r01*x4309))+(((-1.0)*x4301*x4307))+((cj0*x4302))+(((-1.0)*r02*x4306)));
evalcond[5]=(((sj0*x4302))+(((-1.0)*r12*x4306))+((r11*x4309))+(((-1.0)*x4303*x4307))+(((-1.0)*sj0*sj2*x4304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
CheckValue<IkReal> x4311=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4310.value)+(((1.5707963267949)*(x4311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4312=IKcos(j4);
IkReal x4313=IKsin(j4);
IkReal x4314=(cj5*r00);
IkReal x4315=(cj1*cj2);
IkReal x4316=(cj5*r10);
IkReal x4317=((1.0)*sj1);
IkReal x4318=(cj5*r20);
IkReal x4319=((1.0)*x4312);
IkReal x4320=((1.0)*x4313);
IkReal x4321=(sj5*x4312);
IkReal x4322=(sj5*x4313);
evalcond[0]=(((r21*x4321))+(((-1.0)*x4318*x4319))+((r22*x4313)));
evalcond[1]=(cj0+((r12*x4313))+(((-1.0)*x4316*x4319))+((r11*x4321)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4314*x4319))+((r02*x4313))+((r01*x4321)));
evalcond[3]=((((-1.0)*r22*x4319))+((r21*x4322))+(((-1.0)*cj2*x4317))+(((-1.0)*cj1*sj2))+(((-1.0)*x4318*x4320)));
evalcond[4]=((((-1.0)*x4314*x4320))+((cj0*x4315))+(((-1.0)*cj0*sj2*x4317))+(((-1.0)*r02*x4319))+((r01*x4322)));
evalcond[5]=((((-1.0)*x4316*x4320))+((sj0*x4315))+((r11*x4322))+(((-1.0)*r12*x4319))+(((-1.0)*sj0*sj2*x4317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4323.value)+(((1.5707963267949)*(x4324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4325=IKcos(j4);
IkReal x4326=IKsin(j4);
IkReal x4327=(cj5*r00);
IkReal x4328=(cj1*cj2);
IkReal x4329=(cj5*r10);
IkReal x4330=((1.0)*sj1);
IkReal x4331=(cj5*r20);
IkReal x4332=((1.0)*x4325);
IkReal x4333=((1.0)*x4326);
IkReal x4334=(sj5*x4325);
IkReal x4335=(sj5*x4326);
evalcond[0]=(((r21*x4334))+(((-1.0)*x4331*x4332))+((r22*x4326)));
evalcond[1]=(cj0+((r12*x4326))+((r11*x4334))+(((-1.0)*x4329*x4332)));
evalcond[2]=(((r01*x4334))+(((-1.0)*sj0))+(((-1.0)*x4327*x4332))+((r02*x4326)));
evalcond[3]=(((r21*x4335))+(((-1.0)*x4331*x4333))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4332))+(((-1.0)*cj2*x4330)));
evalcond[4]=(((cj0*x4328))+((r01*x4335))+(((-1.0)*r02*x4332))+(((-1.0)*x4327*x4333))+(((-1.0)*cj0*sj2*x4330)));
evalcond[5]=((((-1.0)*sj0*sj2*x4330))+((sj0*x4328))+(((-1.0)*r12*x4332))+((r11*x4335))+(((-1.0)*x4329*x4333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4336=((1.0)*cj5);
IkReal x4337=((1.0)*sj5);
IkReal x4338=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4338;
j0eval[1]=IKsign(x4338);
j0eval[2]=((IKabs(((((-1.0)*r00*x4337))+(((-1.0)*r01*x4336)))))+(IKabs(((((-1.0)*r10*x4337))+(((-1.0)*r11*x4336))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4339=r21*r21;
IkReal x4340=cj5*cj5;
IkReal x4341=(sj1*sj2);
IkReal x4342=(r21*sj5);
IkReal x4343=(cj1*cj2);
IkReal x4344=(cj5*r20);
IkReal x4345=(((x4339*x4340))+(((-1.0)*x4339))+(((-1.0)*x4340*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x4342*x4344)));
j4eval[0]=x4345;
j4eval[1]=((IKabs((((r22*x4341))+(((-1.0)*r22*x4343)))))+(IKabs((((x4342*x4343))+((x4341*x4344))+(((-1.0)*x4341*x4342))+(((-1.0)*x4343*x4344))))));
j4eval[2]=IKsign(x4345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.42875253914973)*py))+(((-1.62793712993243)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.42875253914973)*py))+(((-1.62793712993243)*px))))+IKsqr(((((3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.42875253914973)*py))+(((-1.62793712993243)*px))), ((((3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4346=IKsin(j0);
IkReal x4347=IKcos(j0);
evalcond[0]=((((0.238)*x4347))+(((-0.113)*x4346))+(((-1.0)*px)));
evalcond[1]=((((0.238)*x4346))+(((-1.0)*py))+(((0.113)*x4347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4348=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4348;
j4eval[1]=IKsign(x4348);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4349=cj5*cj5;
IkReal x4350=(r11*r21);
IkReal x4351=((1.0)*r20);
IkReal x4352=(cj5*sj5);
IkReal x4353=((((-1.0)*r12*r22))+((r11*r20*x4352))+((x4349*x4350))+(((-1.0)*r10*x4349*x4351))+(((-1.0)*x4350))+((r10*r21*x4352)));
j4eval[0]=x4353;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4351)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4354=cj5*cj5;
IkReal x4355=((1.0)*r20);
IkReal x4356=(r01*r21);
IkReal x4357=(r21*sj5);
IkReal x4358=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4357))+((x4354*x4356))+(((-1.0)*r00*x4354*x4355))+(((-1.0)*x4356)));
j4eval[0]=x4358;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4357))+(((-1.0)*cj0*cj5*x4355))))));
j4eval[2]=IKsign(x4358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4359=cj5*cj5;
IkReal x4360=((1.0)*r20);
IkReal x4361=(r01*r21);
IkReal x4362=(r21*sj5);
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x4360))+((cj0*x4362)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
CheckValue<IkReal> x4364=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4359*x4361))+((cj5*r00*x4362))+(((-1.0)*r00*x4359*x4360))+(((-1.0)*x4361)))),-1);
if(!x4364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4363.value)+(((1.5707963267949)*(x4364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4365=IKcos(j4);
IkReal x4366=IKsin(j4);
IkReal x4367=(cj5*r00);
IkReal x4368=(cj5*r20);
IkReal x4369=(cj5*r10);
IkReal x4370=(r21*sj5);
IkReal x4371=((1.0)*x4365);
IkReal x4372=((1.0)*x4366);
IkReal x4373=(sj5*x4365);
IkReal x4374=(sj5*x4366);
evalcond[0]=(((r22*x4366))+(((-1.0)*x4368*x4371))+((x4365*x4370)));
evalcond[1]=(cj0+((r11*x4373))+((r12*x4366))+(((-1.0)*x4369*x4371)));
evalcond[2]=((((-1.0)*r22*x4371))+((x4366*x4370))+(((-1.0)*x4368*x4372)));
evalcond[3]=(cj0+((r01*x4374))+(((-1.0)*r02*x4371))+(((-1.0)*x4367*x4372)));
evalcond[4]=(sj0+((r11*x4374))+(((-1.0)*r12*x4371))+(((-1.0)*x4369*x4372)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4373))+(((-1.0)*x4367*x4371))+((r02*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4375=cj5*cj5;
IkReal x4376=(r11*r21);
IkReal x4377=((1.0)*r20);
IkReal x4378=(cj5*sj5);
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(IKsign((((r11*r20*x4378))+((r10*r21*x4378))+(((-1.0)*r12*r22))+((x4375*x4376))+(((-1.0)*x4376))+(((-1.0)*r10*x4375*x4377)))),-1);
if(!x4379.valid){
continue;
}
CheckValue<IkReal> x4380 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4377))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4379.value)))+(x4380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4381=IKcos(j4);
IkReal x4382=IKsin(j4);
IkReal x4383=(cj5*r00);
IkReal x4384=(cj5*r20);
IkReal x4385=(cj5*r10);
IkReal x4386=(r21*sj5);
IkReal x4387=((1.0)*x4381);
IkReal x4388=((1.0)*x4382);
IkReal x4389=(sj5*x4381);
IkReal x4390=(sj5*x4382);
evalcond[0]=(((r22*x4382))+((x4381*x4386))+(((-1.0)*x4384*x4387)));
evalcond[1]=(cj0+((r11*x4389))+(((-1.0)*x4385*x4387))+((r12*x4382)));
evalcond[2]=((((-1.0)*r22*x4387))+((x4382*x4386))+(((-1.0)*x4384*x4388)));
evalcond[3]=(((r01*x4390))+(((-1.0)*r02*x4387))+cj0+(((-1.0)*x4383*x4388)));
evalcond[4]=(sj0+(((-1.0)*r12*x4387))+((r11*x4390))+(((-1.0)*x4385*x4388)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4382))+(((-1.0)*x4383*x4387))+((r01*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4391 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4391.valid){
continue;
}
CheckValue<IkReal> x4392=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4391.value)+(((1.5707963267949)*(x4392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4393=IKcos(j4);
IkReal x4394=IKsin(j4);
IkReal x4395=(cj5*r00);
IkReal x4396=(cj5*r20);
IkReal x4397=(cj5*r10);
IkReal x4398=(r21*sj5);
IkReal x4399=((1.0)*x4393);
IkReal x4400=((1.0)*x4394);
IkReal x4401=(sj5*x4393);
IkReal x4402=(sj5*x4394);
evalcond[0]=((((-1.0)*x4396*x4399))+((r22*x4394))+((x4393*x4398)));
evalcond[1]=(((r11*x4401))+cj0+(((-1.0)*x4397*x4399))+((r12*x4394)));
evalcond[2]=((((-1.0)*x4396*x4400))+(((-1.0)*r22*x4399))+((x4394*x4398)));
evalcond[3]=((((-1.0)*r02*x4399))+cj0+((r01*x4402))+(((-1.0)*x4395*x4400)));
evalcond[4]=((((-1.0)*r12*x4399))+((r11*x4402))+sj0+(((-1.0)*x4397*x4400)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4395*x4399))+((r02*x4394))+((r01*x4401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62793712993243)*px))+(((-3.42875253914973)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))))+IKsqr(((((-3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))), ((((-3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4403=IKcos(j0);
IkReal x4404=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.238)*x4403))+(((-0.113)*x4404)));
evalcond[1]=((((0.113)*x4403))+(((-1.0)*py))+(((-0.238)*x4404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4405=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4405;
j4eval[1]=IKsign(x4405);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4406=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4406;
j4eval[1]=IKsign(x4406);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4407=cj5*cj5;
IkReal x4408=(r11*r21);
IkReal x4409=((1.0)*r20);
IkReal x4410=(cj5*sj5);
IkReal x4411=((((-1.0)*r12*r22))+((x4407*x4408))+(((-1.0)*x4408))+((r11*r20*x4410))+((r10*r21*x4410))+(((-1.0)*r10*x4407*x4409)));
j4eval[0]=x4411;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4409)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4412=cj5*cj5;
IkReal x4413=(r11*r21);
IkReal x4414=((1.0)*r20);
IkReal x4415=(cj5*sj5);
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x4412*x4413))+((r11*r20*x4415))+(((-1.0)*x4413))+((r10*r21*x4415))+(((-1.0)*r10*x4412*x4414)))),-1);
if(!x4417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4416.value)+(((1.5707963267949)*(x4417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4418=IKcos(j4);
IkReal x4419=IKsin(j4);
IkReal x4420=((1.0)*sj0);
IkReal x4421=(cj5*r00);
IkReal x4422=(cj5*r20);
IkReal x4423=(cj5*r10);
IkReal x4424=((1.0)*x4418);
IkReal x4425=((1.0)*x4419);
IkReal x4426=(sj5*x4418);
IkReal x4427=(sj5*x4419);
evalcond[0]=((((-1.0)*x4422*x4424))+((r22*x4419))+((r21*x4426)));
evalcond[1]=((((-1.0)*x4423*x4424))+cj0+((r12*x4419))+((r11*x4426)));
evalcond[2]=((((-1.0)*x4422*x4425))+(((-1.0)*r22*x4424))+((r21*x4427)));
evalcond[3]=((((-1.0)*x4420))+((r01*x4426))+(((-1.0)*x4421*x4424))+((r02*x4419)));
evalcond[4]=(((r01*x4427))+(((-1.0)*x4421*x4425))+(((-1.0)*r02*x4424))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4420))+(((-1.0)*x4423*x4425))+(((-1.0)*r12*x4424))+((r11*x4427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
CheckValue<IkReal> x4429=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4428.value)+(((1.5707963267949)*(x4429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4430=IKcos(j4);
IkReal x4431=IKsin(j4);
IkReal x4432=((1.0)*sj0);
IkReal x4433=(cj5*r00);
IkReal x4434=(cj5*r20);
IkReal x4435=(cj5*r10);
IkReal x4436=((1.0)*x4430);
IkReal x4437=((1.0)*x4431);
IkReal x4438=(sj5*x4430);
IkReal x4439=(sj5*x4431);
evalcond[0]=(((r22*x4431))+(((-1.0)*x4434*x4436))+((r21*x4438)));
evalcond[1]=(cj0+((r12*x4431))+(((-1.0)*x4435*x4436))+((r11*x4438)));
evalcond[2]=((((-1.0)*x4434*x4437))+(((-1.0)*r22*x4436))+((r21*x4439)));
evalcond[3]=((((-1.0)*x4433*x4436))+(((-1.0)*x4432))+((r02*x4431))+((r01*x4438)));
evalcond[4]=((((-1.0)*r02*x4436))+(((-1.0)*x4433*x4437))+(((-1.0)*cj0))+((r01*x4439)));
evalcond[5]=((((-1.0)*x4432))+(((-1.0)*r12*x4436))+(((-1.0)*x4435*x4437))+((r11*x4439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
CheckValue<IkReal> x4441=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4440.value)+(((1.5707963267949)*(x4441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4442=IKcos(j4);
IkReal x4443=IKsin(j4);
IkReal x4444=((1.0)*sj0);
IkReal x4445=(cj5*r00);
IkReal x4446=(cj5*r20);
IkReal x4447=(cj5*r10);
IkReal x4448=((1.0)*x4442);
IkReal x4449=((1.0)*x4443);
IkReal x4450=(sj5*x4442);
IkReal x4451=(sj5*x4443);
evalcond[0]=(((r21*x4450))+(((-1.0)*x4446*x4448))+((r22*x4443)));
evalcond[1]=(cj0+(((-1.0)*x4447*x4448))+((r11*x4450))+((r12*x4443)));
evalcond[2]=(((r21*x4451))+(((-1.0)*x4446*x4449))+(((-1.0)*r22*x4448)));
evalcond[3]=(((r01*x4450))+(((-1.0)*x4444))+((r02*x4443))+(((-1.0)*x4445*x4448)));
evalcond[4]=(((r01*x4451))+(((-1.0)*r02*x4448))+(((-1.0)*x4445*x4449))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4444))+(((-1.0)*r12*x4448))+(((-1.0)*x4447*x4449))+((r11*x4451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.89255694602262)*py))+(((-0.425166868589575)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.89255694602262)*px))+(((0.425166868589575)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.89255694602262)*py))+(((-0.425166868589575)*px))))+IKsqr(((((1.89255694602262)*px))+(((0.425166868589575)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.89255694602262)*py))+(((-0.425166868589575)*px))), ((((1.89255694602262)*px))+(((0.425166868589575)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4452=IKsin(j0);
IkReal x4453=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.113)*x4452))+(((0.503)*x4453)));
evalcond[1]=((((-1.0)*py))+(((0.503)*x4452))+(((0.113)*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4454=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4454;
j4eval[1]=IKsign(x4454);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4455=cj5*cj5;
IkReal x4456=(r11*r21);
IkReal x4457=((1.0)*r20);
IkReal x4458=(cj5*sj5);
IkReal x4459=(((r11*r20*x4458))+(((-1.0)*r12*r22))+((x4455*x4456))+(((-1.0)*x4456))+((r10*r21*x4458))+(((-1.0)*r10*x4455*x4457)));
j4eval[0]=x4459;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4457)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4460=cj5*cj5;
IkReal x4461=((1.0)*r20);
IkReal x4462=(r01*r21);
IkReal x4463=(r21*sj5);
IkReal x4464=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4460*x4461))+(((-1.0)*r02*r22))+(((-1.0)*x4462))+((cj5*r00*x4463))+((x4460*x4462)));
j4eval[0]=x4464;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4461))+((cj0*x4463))))));
j4eval[2]=IKsign(x4464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4465=cj5*cj5;
IkReal x4466=((1.0)*r20);
IkReal x4467=(r01*r21);
IkReal x4468=(r21*sj5);
CheckValue<IkReal> x4469 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x4466))+((cj0*x4468)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4469.valid){
continue;
}
CheckValue<IkReal> x4470=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4467))+((cj5*r00*x4468))+(((-1.0)*r00*x4465*x4466))+((x4465*x4467)))),-1);
if(!x4470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4469.value)+(((1.5707963267949)*(x4470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4471=IKcos(j4);
IkReal x4472=IKsin(j4);
IkReal x4473=(cj5*r00);
IkReal x4474=(cj5*r20);
IkReal x4475=(cj5*r10);
IkReal x4476=(r21*sj5);
IkReal x4477=((1.0)*x4471);
IkReal x4478=((1.0)*x4472);
IkReal x4479=(sj5*x4471);
IkReal x4480=(sj5*x4472);
evalcond[0]=(((x4471*x4476))+(((-1.0)*x4474*x4477))+((r22*x4472)));
evalcond[1]=(cj0+(((-1.0)*x4475*x4477))+((r12*x4472))+((r11*x4479)));
evalcond[2]=((((-1.0)*x4474*x4478))+((x4472*x4476))+(((-1.0)*r22*x4477)));
evalcond[3]=(cj0+(((-1.0)*x4473*x4478))+((r01*x4480))+(((-1.0)*r02*x4477)));
evalcond[4]=(((r11*x4480))+sj0+(((-1.0)*r12*x4477))+(((-1.0)*x4475*x4478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4473*x4477))+((r02*x4472))+((r01*x4479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4481=cj5*cj5;
IkReal x4482=(r11*r21);
IkReal x4483=((1.0)*r20);
IkReal x4484=(cj5*sj5);
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4483))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
CheckValue<IkReal> x4486=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4482))+((r11*r20*x4484))+(((-1.0)*r10*x4481*x4483))+(((-1.0)*r12*r22))+((x4481*x4482))+((r10*r21*x4484)))),-1);
if(!x4486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4485.value)+(((1.5707963267949)*(x4486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4487=IKcos(j4);
IkReal x4488=IKsin(j4);
IkReal x4489=(cj5*r00);
IkReal x4490=(cj5*r20);
IkReal x4491=(cj5*r10);
IkReal x4492=(r21*sj5);
IkReal x4493=((1.0)*x4487);
IkReal x4494=((1.0)*x4488);
IkReal x4495=(sj5*x4487);
IkReal x4496=(sj5*x4488);
evalcond[0]=(((x4487*x4492))+(((-1.0)*x4490*x4493))+((r22*x4488)));
evalcond[1]=(cj0+((r11*x4495))+(((-1.0)*x4491*x4493))+((r12*x4488)));
evalcond[2]=(((x4488*x4492))+(((-1.0)*x4490*x4494))+(((-1.0)*r22*x4493)));
evalcond[3]=((((-1.0)*x4489*x4494))+(((-1.0)*r02*x4493))+cj0+((r01*x4496)));
evalcond[4]=(sj0+((r11*x4496))+(((-1.0)*x4491*x4494))+(((-1.0)*r12*x4493)));
evalcond[5]=((((-1.0)*x4489*x4493))+(((-1.0)*sj0))+((r02*x4488))+((r01*x4495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4497 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4497.valid){
continue;
}
CheckValue<IkReal> x4498=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4497.value)+(((1.5707963267949)*(x4498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4499=IKcos(j4);
IkReal x4500=IKsin(j4);
IkReal x4501=(cj5*r00);
IkReal x4502=(cj5*r20);
IkReal x4503=(cj5*r10);
IkReal x4504=(r21*sj5);
IkReal x4505=((1.0)*x4499);
IkReal x4506=((1.0)*x4500);
IkReal x4507=(sj5*x4499);
IkReal x4508=(sj5*x4500);
evalcond[0]=(((r22*x4500))+(((-1.0)*x4502*x4505))+((x4499*x4504)));
evalcond[1]=(cj0+((r12*x4500))+((r11*x4507))+(((-1.0)*x4503*x4505)));
evalcond[2]=(((x4500*x4504))+(((-1.0)*r22*x4505))+(((-1.0)*x4502*x4506)));
evalcond[3]=(cj0+(((-1.0)*r02*x4505))+(((-1.0)*x4501*x4506))+((r01*x4508)));
evalcond[4]=(sj0+((r11*x4508))+(((-1.0)*x4503*x4506))+(((-1.0)*r12*x4505)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4500))+(((-1.0)*x4501*x4505))+((r01*x4507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.37161060897911)*px))+(((2.00029634019855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.37161060897911)*py))+(((2.00029634019855)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.37161060897911)*px))+(((2.00029634019855)*py))))+IKsqr(((((8.37161060897911)*py))+(((2.00029634019855)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.37161060897911)*px))+(((2.00029634019855)*py))), ((((8.37161060897911)*py))+(((2.00029634019855)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4509=IKsin(j0);
IkReal x4510=IKcos(j0);
evalcond[0]=((((0.027)*x4510))+(((-0.113)*x4509))+(((-1.0)*px)));
evalcond[1]=((((0.113)*x4510))+(((-1.0)*py))+(((0.027)*x4509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4511=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4511;
j4eval[1]=IKsign(x4511);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4512=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4512;
j4eval[1]=IKsign(x4512);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4513=cj5*cj5;
IkReal x4514=(r11*r21);
IkReal x4515=((1.0)*r20);
IkReal x4516=(cj5*sj5);
IkReal x4517=((((-1.0)*r12*r22))+((r10*r21*x4516))+((x4513*x4514))+(((-1.0)*x4514))+(((-1.0)*r10*x4513*x4515))+((r11*r20*x4516)));
j4eval[0]=x4517;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4515)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4518=cj5*cj5;
IkReal x4519=(r11*r21);
IkReal x4520=((1.0)*r20);
IkReal x4521=(cj5*sj5);
CheckValue<IkReal> x4522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x4518*x4520))+(((-1.0)*r12*r22))+((r11*r20*x4521))+((x4518*x4519))+(((-1.0)*x4519))+((r10*r21*x4521)))),-1);
if(!x4522.valid){
continue;
}
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4522.value)))+(x4523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4524=IKcos(j4);
IkReal x4525=IKsin(j4);
IkReal x4526=((1.0)*sj0);
IkReal x4527=(cj5*r00);
IkReal x4528=(cj5*r20);
IkReal x4529=(cj5*r10);
IkReal x4530=((1.0)*x4524);
IkReal x4531=((1.0)*x4525);
IkReal x4532=(sj5*x4524);
IkReal x4533=(sj5*x4525);
evalcond[0]=(((r21*x4532))+((r22*x4525))+(((-1.0)*x4528*x4530)));
evalcond[1]=(((r12*x4525))+cj0+(((-1.0)*x4529*x4530))+((r11*x4532)));
evalcond[2]=(((r21*x4533))+(((-1.0)*x4528*x4531))+(((-1.0)*r22*x4530)));
evalcond[3]=(((r01*x4532))+(((-1.0)*x4526))+(((-1.0)*x4527*x4530))+((r02*x4525)));
evalcond[4]=(((r01*x4533))+(((-1.0)*x4527*x4531))+(((-1.0)*r02*x4530))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4526))+(((-1.0)*x4529*x4531))+(((-1.0)*r12*x4530))+((r11*x4533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4534 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4534.valid){
continue;
}
CheckValue<IkReal> x4535=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4534.value)+(((1.5707963267949)*(x4535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4536=IKcos(j4);
IkReal x4537=IKsin(j4);
IkReal x4538=((1.0)*sj0);
IkReal x4539=(cj5*r00);
IkReal x4540=(cj5*r20);
IkReal x4541=(cj5*r10);
IkReal x4542=((1.0)*x4536);
IkReal x4543=((1.0)*x4537);
IkReal x4544=(sj5*x4536);
IkReal x4545=(sj5*x4537);
evalcond[0]=(((r22*x4537))+(((-1.0)*x4540*x4542))+((r21*x4544)));
evalcond[1]=(cj0+((r12*x4537))+(((-1.0)*x4541*x4542))+((r11*x4544)));
evalcond[2]=((((-1.0)*r22*x4542))+(((-1.0)*x4540*x4543))+((r21*x4545)));
evalcond[3]=((((-1.0)*x4538))+((r01*x4544))+((r02*x4537))+(((-1.0)*x4539*x4542)));
evalcond[4]=((((-1.0)*r02*x4542))+((r01*x4545))+(((-1.0)*x4539*x4543))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4538))+(((-1.0)*r12*x4542))+(((-1.0)*x4541*x4543))+((r11*x4545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4546 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4546.valid){
continue;
}
CheckValue<IkReal> x4547=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4546.value)+(((1.5707963267949)*(x4547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4548=IKcos(j4);
IkReal x4549=IKsin(j4);
IkReal x4550=((1.0)*sj0);
IkReal x4551=(cj5*r00);
IkReal x4552=(cj5*r20);
IkReal x4553=(cj5*r10);
IkReal x4554=((1.0)*x4548);
IkReal x4555=((1.0)*x4549);
IkReal x4556=(sj5*x4548);
IkReal x4557=(sj5*x4549);
evalcond[0]=(((r22*x4549))+(((-1.0)*x4552*x4554))+((r21*x4556)));
evalcond[1]=(cj0+(((-1.0)*x4553*x4554))+((r11*x4556))+((r12*x4549)));
evalcond[2]=((((-1.0)*x4552*x4555))+((r21*x4557))+(((-1.0)*r22*x4554)));
evalcond[3]=(((r01*x4556))+((r02*x4549))+(((-1.0)*x4550))+(((-1.0)*x4551*x4554)));
evalcond[4]=(((r01*x4557))+(((-1.0)*x4551*x4555))+(((-1.0)*r02*x4554))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4554))+(((-1.0)*x4553*x4555))+(((-1.0)*x4550))+((r11*x4557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62793712993243)*px))+(((-3.42875253914973)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))))+IKsqr(((((-3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))), ((((-3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4558=IKcos(j0);
IkReal x4559=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.238)*x4558))+(((-0.113)*x4559)));
evalcond[1]=((((0.113)*x4558))+(((-1.0)*py))+(((-0.238)*x4559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4560=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4560;
j4eval[1]=IKsign(x4560);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4561=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4561;
j4eval[1]=IKsign(x4561);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4562=cj5*cj5;
IkReal x4563=(r11*r21);
IkReal x4564=((1.0)*r20);
IkReal x4565=(cj5*sj5);
IkReal x4566=(((r10*r21*x4565))+((r11*r20*x4565))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4562*x4564))+((x4562*x4563))+(((-1.0)*x4563)));
j4eval[0]=x4566;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4564)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4567=cj5*cj5;
IkReal x4568=(r11*r21);
IkReal x4569=((1.0)*r20);
IkReal x4570=(cj5*sj5);
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign((((x4567*x4568))+((r10*r21*x4570))+(((-1.0)*r12*r22))+((r11*r20*x4570))+(((-1.0)*r10*x4567*x4569))+(((-1.0)*x4568)))),-1);
if(!x4571.valid){
continue;
}
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4571.value)))+(x4572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4573=IKcos(j4);
IkReal x4574=IKsin(j4);
IkReal x4575=((1.0)*sj0);
IkReal x4576=(cj5*r00);
IkReal x4577=(cj5*r20);
IkReal x4578=(cj5*r10);
IkReal x4579=((1.0)*x4573);
IkReal x4580=((1.0)*x4574);
IkReal x4581=(sj5*x4573);
IkReal x4582=(sj5*x4574);
evalcond[0]=(((r21*x4581))+(((-1.0)*x4577*x4579))+((r22*x4574)));
evalcond[1]=(cj0+((r12*x4574))+(((-1.0)*x4578*x4579))+((r11*x4581)));
evalcond[2]=(((r21*x4582))+(((-1.0)*r22*x4579))+(((-1.0)*x4577*x4580)));
evalcond[3]=((((-1.0)*x4575))+(((-1.0)*x4576*x4579))+((r02*x4574))+((r01*x4581)));
evalcond[4]=((((-1.0)*r02*x4579))+((r01*x4582))+(((-1.0)*cj0))+(((-1.0)*x4576*x4580)));
evalcond[5]=((((-1.0)*x4575))+((r11*x4582))+(((-1.0)*r12*x4579))+(((-1.0)*x4578*x4580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
CheckValue<IkReal> x4584=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4583.value)+(((1.5707963267949)*(x4584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4585=IKcos(j4);
IkReal x4586=IKsin(j4);
IkReal x4587=((1.0)*sj0);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r20);
IkReal x4590=(cj5*r10);
IkReal x4591=((1.0)*x4585);
IkReal x4592=((1.0)*x4586);
IkReal x4593=(sj5*x4585);
IkReal x4594=(sj5*x4586);
evalcond[0]=(((r21*x4593))+((r22*x4586))+(((-1.0)*x4589*x4591)));
evalcond[1]=(cj0+((r11*x4593))+((r12*x4586))+(((-1.0)*x4590*x4591)));
evalcond[2]=(((r21*x4594))+(((-1.0)*r22*x4591))+(((-1.0)*x4589*x4592)));
evalcond[3]=((((-1.0)*x4587))+((r02*x4586))+(((-1.0)*x4588*x4591))+((r01*x4593)));
evalcond[4]=((((-1.0)*r02*x4591))+(((-1.0)*x4588*x4592))+(((-1.0)*cj0))+((r01*x4594)));
evalcond[5]=((((-1.0)*x4587))+((r11*x4594))+(((-1.0)*r12*x4591))+(((-1.0)*x4590*x4592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4595.value)+(((1.5707963267949)*(x4596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4597=IKcos(j4);
IkReal x4598=IKsin(j4);
IkReal x4599=((1.0)*sj0);
IkReal x4600=(cj5*r00);
IkReal x4601=(cj5*r20);
IkReal x4602=(cj5*r10);
IkReal x4603=((1.0)*x4597);
IkReal x4604=((1.0)*x4598);
IkReal x4605=(sj5*x4597);
IkReal x4606=(sj5*x4598);
evalcond[0]=(((r22*x4598))+((r21*x4605))+(((-1.0)*x4601*x4603)));
evalcond[1]=(((r11*x4605))+cj0+(((-1.0)*x4602*x4603))+((r12*x4598)));
evalcond[2]=(((r21*x4606))+(((-1.0)*x4601*x4604))+(((-1.0)*r22*x4603)));
evalcond[3]=((((-1.0)*x4599))+(((-1.0)*x4600*x4603))+((r01*x4605))+((r02*x4598)));
evalcond[4]=((((-1.0)*x4600*x4604))+((r01*x4606))+(((-1.0)*r02*x4603))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4606))+(((-1.0)*x4599))+(((-1.0)*x4602*x4604))+(((-1.0)*r12*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.42875253914973)*py))+(((-1.62793712993243)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.42875253914973)*py))+(((-1.62793712993243)*px))))+IKsqr(((((3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.42875253914973)*py))+(((-1.62793712993243)*px))), ((((3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4607=IKsin(j0);
IkReal x4608=IKcos(j0);
evalcond[0]=((((0.238)*x4608))+(((-0.113)*x4607))+(((-1.0)*px)));
evalcond[1]=((((0.238)*x4607))+(((0.113)*x4608))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4609=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4609;
j4eval[1]=IKsign(x4609);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4610=cj5*cj5;
IkReal x4611=(r11*r21);
IkReal x4612=((1.0)*r20);
IkReal x4613=(cj5*sj5);
IkReal x4614=(((r10*r21*x4613))+(((-1.0)*x4611))+(((-1.0)*r12*r22))+((r11*r20*x4613))+(((-1.0)*r10*x4610*x4612))+((x4610*x4611)));
j4eval[0]=x4614;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4612))))));
j4eval[2]=IKsign(x4614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4615=cj5*cj5;
IkReal x4616=((1.0)*r20);
IkReal x4617=(r01*r21);
IkReal x4618=(r21*sj5);
IkReal x4619=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4617))+((x4615*x4617))+((cj5*r00*x4618))+(((-1.0)*r00*x4615*x4616)));
j4eval[0]=x4619;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4616))+((cj0*x4618)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4620=cj5*cj5;
IkReal x4621=((1.0)*r20);
IkReal x4622=(r01*r21);
IkReal x4623=(r21*sj5);
CheckValue<IkReal> x4624 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x4621))+((cj0*x4623)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4624.valid){
continue;
}
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4620*x4622))+(((-1.0)*x4622))+(((-1.0)*r00*x4620*x4621))+((cj5*r00*x4623)))),-1);
if(!x4625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4624.value)+(((1.5707963267949)*(x4625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4626=IKcos(j4);
IkReal x4627=IKsin(j4);
IkReal x4628=(cj5*r00);
IkReal x4629=(cj5*r20);
IkReal x4630=(cj5*r10);
IkReal x4631=(r21*sj5);
IkReal x4632=((1.0)*x4626);
IkReal x4633=((1.0)*x4627);
IkReal x4634=(sj5*x4626);
IkReal x4635=(sj5*x4627);
evalcond[0]=(((x4626*x4631))+((r22*x4627))+(((-1.0)*x4629*x4632)));
evalcond[1]=(((r12*x4627))+cj0+((r11*x4634))+(((-1.0)*x4630*x4632)));
evalcond[2]=(((x4627*x4631))+(((-1.0)*x4629*x4633))+(((-1.0)*r22*x4632)));
evalcond[3]=(((r01*x4635))+cj0+(((-1.0)*r02*x4632))+(((-1.0)*x4628*x4633)));
evalcond[4]=(sj0+((r11*x4635))+(((-1.0)*x4630*x4633))+(((-1.0)*r12*x4632)));
evalcond[5]=(((r01*x4634))+(((-1.0)*sj0))+(((-1.0)*x4628*x4632))+((r02*x4627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4636=cj5*cj5;
IkReal x4637=(r11*r21);
IkReal x4638=((1.0)*r20);
IkReal x4639=(cj5*sj5);
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4638))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
CheckValue<IkReal> x4641=IKPowWithIntegerCheck(IKsign((((r10*r21*x4639))+(((-1.0)*x4637))+(((-1.0)*r12*r22))+((x4636*x4637))+((r11*r20*x4639))+(((-1.0)*r10*x4636*x4638)))),-1);
if(!x4641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4640.value)+(((1.5707963267949)*(x4641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4642=IKcos(j4);
IkReal x4643=IKsin(j4);
IkReal x4644=(cj5*r00);
IkReal x4645=(cj5*r20);
IkReal x4646=(cj5*r10);
IkReal x4647=(r21*sj5);
IkReal x4648=((1.0)*x4642);
IkReal x4649=((1.0)*x4643);
IkReal x4650=(sj5*x4642);
IkReal x4651=(sj5*x4643);
evalcond[0]=((((-1.0)*x4645*x4648))+((r22*x4643))+((x4642*x4647)));
evalcond[1]=(((r11*x4650))+cj0+((r12*x4643))+(((-1.0)*x4646*x4648)));
evalcond[2]=((((-1.0)*x4645*x4649))+(((-1.0)*r22*x4648))+((x4643*x4647)));
evalcond[3]=((((-1.0)*r02*x4648))+cj0+((r01*x4651))+(((-1.0)*x4644*x4649)));
evalcond[4]=(sj0+((r11*x4651))+(((-1.0)*r12*x4648))+(((-1.0)*x4646*x4649)));
evalcond[5]=(((r02*x4643))+(((-1.0)*sj0))+((r01*x4650))+(((-1.0)*x4644*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4652.value)+(((1.5707963267949)*(x4653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4654=IKcos(j4);
IkReal x4655=IKsin(j4);
IkReal x4656=(cj5*r00);
IkReal x4657=(cj5*r20);
IkReal x4658=(cj5*r10);
IkReal x4659=(r21*sj5);
IkReal x4660=((1.0)*x4654);
IkReal x4661=((1.0)*x4655);
IkReal x4662=(sj5*x4654);
IkReal x4663=(sj5*x4655);
evalcond[0]=(((x4654*x4659))+((r22*x4655))+(((-1.0)*x4657*x4660)));
evalcond[1]=(((r12*x4655))+(((-1.0)*x4658*x4660))+cj0+((r11*x4662)));
evalcond[2]=((((-1.0)*r22*x4660))+((x4655*x4659))+(((-1.0)*x4657*x4661)));
evalcond[3]=((((-1.0)*x4656*x4661))+cj0+((r01*x4663))+(((-1.0)*r02*x4660)));
evalcond[4]=((((-1.0)*x4658*x4661))+sj0+((r11*x4663))+(((-1.0)*r12*x4660)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4656*x4660))+((r01*x4662))+((r02*x4655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.425166868589575)*px))+(((-1.89255694602262)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.425166868589575)*py))+(((-1.89255694602262)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.425166868589575)*px))+(((-1.89255694602262)*py))))+IKsqr(((((0.425166868589575)*py))+(((-1.89255694602262)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.425166868589575)*px))+(((-1.89255694602262)*py))), ((((0.425166868589575)*py))+(((-1.89255694602262)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4664=IKcos(j0);
IkReal x4665=IKsin(j0);
evalcond[0]=((((-0.113)*x4665))+(((-1.0)*px))+(((-0.503)*x4664)));
evalcond[1]=((((0.113)*x4664))+(((-1.0)*py))+(((-0.503)*x4665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4666=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4666;
j4eval[1]=IKsign(x4666);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4667=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4667;
j4eval[1]=IKsign(x4667);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4668=cj5*cj5;
IkReal x4669=(r11*r21);
IkReal x4670=((1.0)*r20);
IkReal x4671=(cj5*sj5);
IkReal x4672=(((r10*r21*x4671))+(((-1.0)*r10*x4668*x4670))+((r11*r20*x4671))+(((-1.0)*x4669))+(((-1.0)*r12*r22))+((x4668*x4669)));
j4eval[0]=x4672;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4670)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4673=cj5*cj5;
IkReal x4674=(r11*r21);
IkReal x4675=((1.0)*r20);
IkReal x4676=(cj5*sj5);
CheckValue<IkReal> x4677=IKPowWithIntegerCheck(IKsign((((r10*r21*x4676))+((r11*r20*x4676))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4673*x4675))+(((-1.0)*x4674))+((x4673*x4674)))),-1);
if(!x4677.valid){
continue;
}
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4677.value)))+(x4678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4679=IKcos(j4);
IkReal x4680=IKsin(j4);
IkReal x4681=((1.0)*sj0);
IkReal x4682=(cj5*r00);
IkReal x4683=(cj5*r20);
IkReal x4684=(cj5*r10);
IkReal x4685=((1.0)*x4679);
IkReal x4686=((1.0)*x4680);
IkReal x4687=(sj5*x4679);
IkReal x4688=(sj5*x4680);
evalcond[0]=((((-1.0)*x4683*x4685))+((r22*x4680))+((r21*x4687)));
evalcond[1]=((((-1.0)*x4684*x4685))+cj0+((r12*x4680))+((r11*x4687)));
evalcond[2]=((((-1.0)*x4683*x4686))+((r21*x4688))+(((-1.0)*r22*x4685)));
evalcond[3]=(((r02*x4680))+(((-1.0)*x4682*x4685))+((r01*x4687))+(((-1.0)*x4681)));
evalcond[4]=((((-1.0)*x4682*x4686))+(((-1.0)*r02*x4685))+((r01*x4688))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4684*x4686))+((r11*x4688))+(((-1.0)*x4681))+(((-1.0)*r12*x4685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
CheckValue<IkReal> x4690=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4689.value)+(((1.5707963267949)*(x4690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4691=IKcos(j4);
IkReal x4692=IKsin(j4);
IkReal x4693=((1.0)*sj0);
IkReal x4694=(cj5*r00);
IkReal x4695=(cj5*r20);
IkReal x4696=(cj5*r10);
IkReal x4697=((1.0)*x4691);
IkReal x4698=((1.0)*x4692);
IkReal x4699=(sj5*x4691);
IkReal x4700=(sj5*x4692);
evalcond[0]=(((r22*x4692))+((r21*x4699))+(((-1.0)*x4695*x4697)));
evalcond[1]=(cj0+(((-1.0)*x4696*x4697))+((r12*x4692))+((r11*x4699)));
evalcond[2]=(((r21*x4700))+(((-1.0)*r22*x4697))+(((-1.0)*x4695*x4698)));
evalcond[3]=(((r02*x4692))+((r01*x4699))+(((-1.0)*x4694*x4697))+(((-1.0)*x4693)));
evalcond[4]=((((-1.0)*r02*x4697))+((r01*x4700))+(((-1.0)*x4694*x4698))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4697))+(((-1.0)*x4696*x4698))+(((-1.0)*x4693))+((r11*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
CheckValue<IkReal> x4702=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4701.value)+(((1.5707963267949)*(x4702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4703=IKcos(j4);
IkReal x4704=IKsin(j4);
IkReal x4705=((1.0)*sj0);
IkReal x4706=(cj5*r00);
IkReal x4707=(cj5*r20);
IkReal x4708=(cj5*r10);
IkReal x4709=((1.0)*x4703);
IkReal x4710=((1.0)*x4704);
IkReal x4711=(sj5*x4703);
IkReal x4712=(sj5*x4704);
evalcond[0]=(((r21*x4711))+(((-1.0)*x4707*x4709))+((r22*x4704)));
evalcond[1]=(cj0+(((-1.0)*x4708*x4709))+((r11*x4711))+((r12*x4704)));
evalcond[2]=((((-1.0)*r22*x4709))+((r21*x4712))+(((-1.0)*x4707*x4710)));
evalcond[3]=(((r01*x4711))+(((-1.0)*x4706*x4709))+((r02*x4704))+(((-1.0)*x4705)));
evalcond[4]=((((-1.0)*r02*x4709))+((r01*x4712))+(((-1.0)*x4706*x4710))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4709))+(((-1.0)*x4708*x4710))+(((-1.0)*x4705))+((r11*x4712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.00029634019855)*py))+(((-8.37161060897911)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.00029634019855)*px))+(((8.37161060897911)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.00029634019855)*py))+(((-8.37161060897911)*px))))+IKsqr(((((-2.00029634019855)*px))+(((8.37161060897911)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.00029634019855)*py))+(((-8.37161060897911)*px))), ((((-2.00029634019855)*px))+(((8.37161060897911)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4713=IKcos(j0);
IkReal x4714=IKsin(j0);
evalcond[0]=((((-0.027)*x4713))+(((-0.113)*x4714))+(((-1.0)*px)));
evalcond[1]=((((-0.027)*x4714))+(((0.113)*x4713))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4715=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4715;
j4eval[1]=IKsign(x4715);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4716=cj5*cj5;
IkReal x4717=(r11*r21);
IkReal x4718=((1.0)*r20);
IkReal x4719=(cj5*sj5);
IkReal x4720=((((-1.0)*x4717))+(((-1.0)*r12*r22))+((x4716*x4717))+((r10*r21*x4719))+(((-1.0)*r10*x4716*x4718))+((r11*r20*x4719)));
j4eval[0]=x4720;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4718))))));
j4eval[2]=IKsign(x4720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4721=cj5*cj5;
IkReal x4722=((1.0)*r20);
IkReal x4723=(r01*r21);
IkReal x4724=(r21*sj5);
IkReal x4725=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4721*x4722))+(((-1.0)*r02*r22))+((x4721*x4723))+(((-1.0)*x4723))+((cj5*r00*x4724)));
j4eval[0]=x4725;
j4eval[1]=((IKabs((((cj0*x4724))+(((-1.0)*cj0*cj5*x4722)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4726=cj5*cj5;
IkReal x4727=((1.0)*r20);
IkReal x4728=(r01*r21);
IkReal x4729=(r21*sj5);
CheckValue<IkReal> x4730=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4728))+(((-1.0)*r00*x4726*x4727))+((x4726*x4728))+((cj5*r00*x4729)))),-1);
if(!x4730.valid){
continue;
}
CheckValue<IkReal> x4731 = IKatan2WithCheck(IkReal((((cj0*x4729))+(((-1.0)*cj0*cj5*x4727)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4730.value)))+(x4731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4732=IKcos(j4);
IkReal x4733=IKsin(j4);
IkReal x4734=(cj5*r00);
IkReal x4735=(cj5*r20);
IkReal x4736=(cj5*r10);
IkReal x4737=(r21*sj5);
IkReal x4738=((1.0)*x4732);
IkReal x4739=((1.0)*x4733);
IkReal x4740=(sj5*x4732);
IkReal x4741=(sj5*x4733);
evalcond[0]=((((-1.0)*x4735*x4738))+((x4732*x4737))+((r22*x4733)));
evalcond[1]=(((r11*x4740))+cj0+(((-1.0)*x4736*x4738))+((r12*x4733)));
evalcond[2]=((((-1.0)*x4735*x4739))+((x4733*x4737))+(((-1.0)*r22*x4738)));
evalcond[3]=((((-1.0)*x4734*x4739))+cj0+((r01*x4741))+(((-1.0)*r02*x4738)));
evalcond[4]=(((r11*x4741))+sj0+(((-1.0)*x4736*x4739))+(((-1.0)*r12*x4738)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4734*x4738))+((r01*x4740))+((r02*x4733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4742=cj5*cj5;
IkReal x4743=(r11*r21);
IkReal x4744=((1.0)*r20);
IkReal x4745=(cj5*sj5);
CheckValue<IkReal> x4746=IKPowWithIntegerCheck(IKsign((((x4742*x4743))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4742*x4744))+((r10*r21*x4745))+((r11*r20*x4745))+(((-1.0)*x4743)))),-1);
if(!x4746.valid){
continue;
}
CheckValue<IkReal> x4747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4746.value)))+(x4747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4748=IKcos(j4);
IkReal x4749=IKsin(j4);
IkReal x4750=(cj5*r00);
IkReal x4751=(cj5*r20);
IkReal x4752=(cj5*r10);
IkReal x4753=(r21*sj5);
IkReal x4754=((1.0)*x4748);
IkReal x4755=((1.0)*x4749);
IkReal x4756=(sj5*x4748);
IkReal x4757=(sj5*x4749);
evalcond[0]=((((-1.0)*x4751*x4754))+((x4748*x4753))+((r22*x4749)));
evalcond[1]=(cj0+((r11*x4756))+((r12*x4749))+(((-1.0)*x4752*x4754)));
evalcond[2]=((((-1.0)*r22*x4754))+(((-1.0)*x4751*x4755))+((x4749*x4753)));
evalcond[3]=(((r01*x4757))+(((-1.0)*x4750*x4755))+cj0+(((-1.0)*r02*x4754)));
evalcond[4]=(sj0+((r11*x4757))+(((-1.0)*r12*x4754))+(((-1.0)*x4752*x4755)));
evalcond[5]=(((r01*x4756))+(((-1.0)*sj0))+(((-1.0)*x4750*x4754))+((r02*x4749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
CheckValue<IkReal> x4759=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4758.value)+(((1.5707963267949)*(x4759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4760=IKcos(j4);
IkReal x4761=IKsin(j4);
IkReal x4762=(cj5*r00);
IkReal x4763=(cj5*r20);
IkReal x4764=(cj5*r10);
IkReal x4765=(r21*sj5);
IkReal x4766=((1.0)*x4760);
IkReal x4767=((1.0)*x4761);
IkReal x4768=(sj5*x4760);
IkReal x4769=(sj5*x4761);
evalcond[0]=(((r22*x4761))+(((-1.0)*x4763*x4766))+((x4760*x4765)));
evalcond[1]=(cj0+((r12*x4761))+(((-1.0)*x4764*x4766))+((r11*x4768)));
evalcond[2]=((((-1.0)*r22*x4766))+(((-1.0)*x4763*x4767))+((x4761*x4765)));
evalcond[3]=((((-1.0)*r02*x4766))+cj0+(((-1.0)*x4762*x4767))+((r01*x4769)));
evalcond[4]=(sj0+(((-1.0)*r12*x4766))+(((-1.0)*x4764*x4767))+((r11*x4769)));
evalcond[5]=(((r02*x4761))+(((-1.0)*sj0))+(((-1.0)*x4762*x4766))+((r01*x4768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4770=(sj1*sj2);
IkReal x4771=(cj1*cj2);
IkReal x4772=((1000.0)*px);
IkReal x4773=(cj5*r01);
IkReal x4774=(r00*sj5);
IkReal x4775=((265.0)*sj1);
IkReal x4776=((238.0)*cj2*sj1);
IkReal x4777=((238.0)*cj1*sj2);
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(((((-113.0)*x4770))+(((113.0)*x4771))),-1);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(((((-1.0)*x4770))+x4771),-1);
if(!x4779.valid){
continue;
}
if( IKabs(((x4778.value)*(((((-95.0)*x4771*x4773))+(((-95.0)*x4771*x4774))+(((-1.0)*x4773*x4777))+(((-1.0)*x4773*x4776))+(((-1.0)*x4773*x4775))+(((-1.0)*x4774*x4776))+(((-1.0)*x4774*x4777))+(((-1.0)*x4774*x4775))+(((-1.0)*x4771*x4772))+(((95.0)*x4770*x4774))+(((95.0)*x4770*x4773))+((x4770*x4772)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4779.value)*(((((-1.0)*x4773))+(((-1.0)*x4774)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4778.value)*(((((-95.0)*x4771*x4773))+(((-95.0)*x4771*x4774))+(((-1.0)*x4773*x4777))+(((-1.0)*x4773*x4776))+(((-1.0)*x4773*x4775))+(((-1.0)*x4774*x4776))+(((-1.0)*x4774*x4777))+(((-1.0)*x4774*x4775))+(((-1.0)*x4771*x4772))+(((95.0)*x4770*x4774))+(((95.0)*x4770*x4773))+((x4770*x4772))))))+IKsqr(((x4779.value)*(((((-1.0)*x4773))+(((-1.0)*x4774))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4778.value)*(((((-95.0)*x4771*x4773))+(((-95.0)*x4771*x4774))+(((-1.0)*x4773*x4777))+(((-1.0)*x4773*x4776))+(((-1.0)*x4773*x4775))+(((-1.0)*x4774*x4776))+(((-1.0)*x4774*x4777))+(((-1.0)*x4774*x4775))+(((-1.0)*x4771*x4772))+(((95.0)*x4770*x4774))+(((95.0)*x4770*x4773))+((x4770*x4772))))), ((x4779.value)*(((((-1.0)*x4773))+(((-1.0)*x4774))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4780=IKcos(j0);
IkReal x4781=IKsin(j0);
IkReal x4782=((0.238)*sj2);
IkReal x4783=((0.238)*cj2);
IkReal x4784=(cj5*r01);
IkReal x4785=((1.0)*sj2);
IkReal x4786=(r00*sj5);
IkReal x4787=(cj5*r11);
IkReal x4788=(r10*sj5);
IkReal x4789=(sj1*x4781);
IkReal x4790=(cj1*x4780);
IkReal x4791=(cj1*x4781);
IkReal x4792=(sj1*x4780);
evalcond[0]=(((cj2*x4790))+(((-1.0)*x4785*x4792))+x4786+x4784);
evalcond[1]=(((cj2*x4791))+x4788+x4787+(((-1.0)*x4785*x4789)));
evalcond[2]=((((0.265)*x4792))+((x4782*x4790))+((x4783*x4792))+(((-0.095)*x4784))+(((-0.095)*x4786))+(((-1.0)*px))+(((-0.113)*x4781)));
evalcond[3]=(((x4782*x4791))+(((-0.095)*x4787))+(((-0.095)*x4788))+(((0.113)*x4780))+(((-1.0)*py))+(((0.265)*x4789))+((x4783*x4789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4793=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4793;
j4eval[1]=IKsign(x4793);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4794=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4794;
j4eval[1]=IKsign(x4794);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4795=((1.0)*sj0);
IkReal x4796=((1.0)*cj0);
IkReal x4797=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4797;
j4eval[1]=((IKabs(((((-1.0)*r02*x4796))+(((-1.0)*r12*x4795)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4796))+(((-1.0)*cj5*r10*x4795))+((cj0*r01*sj5))))));
j4eval[2]=IKsign(x4797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4798=((-1.0)*r20);
IkReal x4800 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4800)==0){
continue;
}
IkReal x4799=pow(x4800,-0.5);
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4798),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4801.value));
IkReal gconst115=(r21*x4799);
IkReal gconst116=(x4798*x4799);
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4802.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4803=((-1.0)*r20);
IkReal x4804=x4799;
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4803),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
IkReal x4805=((-1.0)*(x4806.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4805;
IkReal gconst114=x4805;
IkReal gconst115=(r21*x4804);
IkReal gconst116=(x4803*x4804);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4807=((-1.0)*r20);
IkReal x4808=x4799;
CheckValue<IkReal> x4810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4807),IKFAST_ATAN2_MAGTHRESH);
if(!x4810.valid){
continue;
}
IkReal x4809=((-1.0)*(x4810.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4809;
IkReal gconst114=x4809;
IkReal gconst115=(r21*x4808);
IkReal gconst116=(x4807*x4808);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4811=((-1.0)*r20);
IkReal x4812=x4799;
CheckValue<IkReal> x4814 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4811),IKFAST_ATAN2_MAGTHRESH);
if(!x4814.valid){
continue;
}
IkReal x4813=((-1.0)*(x4814.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4813;
IkReal gconst114=x4813;
IkReal gconst115=(r21*x4812);
IkReal gconst116=(x4811*x4812);
IkReal x4815=((1.0)*(r22*r22));
CheckValue<IkReal> x4819=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4815))),-1);
if(!x4819.valid){
continue;
}
IkReal x4816=x4819.value;
IkReal x4817=((1.0)*x4816);
IkReal x4818=((((-1.0)*x4817*(r20*r20*r20*r20)))+(((-1.0)*x4815))+(((-1.0)*x4817*(r21*r21*r21*r21)))+(((-2.0)*x4816*(r20*r20)*(r21*r21))));
j4eval[0]=x4818;
j4eval[1]=IKsign(x4818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4820=(sj1*sj2);
IkReal x4821=(gconst115*r21);
IkReal x4822=(cj1*cj2);
IkReal x4823=(gconst116*r20);
CheckValue<IkReal> x4824=IKPowWithIntegerCheck(IKsign(((((2.0)*x4821*x4823))+(((-1.0)*(x4823*x4823)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4821*x4821))))),-1);
if(!x4824.valid){
continue;
}
CheckValue<IkReal> x4825 = IKatan2WithCheck(IkReal((((x4820*x4823))+((x4821*x4822))+(((-1.0)*x4822*x4823))+(((-1.0)*x4820*x4821)))),IkReal((((r22*x4820))+(((-1.0)*r22*x4822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4824.value)))+(x4825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4826=IKcos(j4);
IkReal x4827=IKsin(j4);
IkReal x4828=(cj2*sj1);
IkReal x4829=(gconst115*r21);
IkReal x4830=(cj1*sj2);
IkReal x4831=((1.0)*x4826);
IkReal x4832=(gconst115*x4826);
IkReal x4833=(gconst115*x4827);
IkReal x4834=((1.0)*gconst116*x4827);
evalcond[0]=(((r22*x4827))+((x4826*x4829))+(((-1.0)*gconst116*r20*x4831)));
evalcond[1]=(((r11*x4832))+cj0+((r12*x4827))+(((-1.0)*gconst116*r10*x4831)));
evalcond[2]=(((r01*x4832))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x4831))+((r02*x4827)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x4831))+((x4827*x4829))+((cj1*cj2))+(((-1.0)*r20*x4834)));
evalcond[4]=(((r01*x4833))+((cj0*x4830))+(((-1.0)*r02*x4831))+(((-1.0)*r00*x4834))+((cj0*x4828)));
evalcond[5]=((((-1.0)*r10*x4834))+((r11*x4833))+(((-1.0)*r12*x4831))+((sj0*x4830))+((sj0*x4828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4837=IKcos(j4);
IkReal x4838=IKsin(j4);
IkReal x4839=(cj2*sj1);
IkReal x4840=(gconst115*r21);
IkReal x4841=(cj1*sj2);
IkReal x4842=((1.0)*x4837);
IkReal x4843=(gconst115*x4837);
IkReal x4844=(gconst115*x4838);
IkReal x4845=((1.0)*gconst116*x4838);
evalcond[0]=(((r22*x4838))+(((-1.0)*gconst116*r20*x4842))+((x4837*x4840)));
evalcond[1]=(((r12*x4838))+cj0+((r11*x4843))+(((-1.0)*gconst116*r10*x4842)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst116*r00*x4842))+((r01*x4843))+((r02*x4838)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r20*x4845))+((x4838*x4840))+((cj1*cj2))+(((-1.0)*r22*x4842)));
evalcond[4]=(((cj0*x4839))+(((-1.0)*r00*x4845))+(((-1.0)*r02*x4842))+((r01*x4844))+((cj0*x4841)));
evalcond[5]=(((sj0*x4841))+((r11*x4844))+((sj0*x4839))+(((-1.0)*r12*x4842))+(((-1.0)*r10*x4845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4846=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4846.valid){
continue;
}
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4846.value)))+(x4847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4848=IKcos(j4);
IkReal x4849=IKsin(j4);
IkReal x4850=(cj2*sj1);
IkReal x4851=(gconst115*r21);
IkReal x4852=(cj1*sj2);
IkReal x4853=((1.0)*x4848);
IkReal x4854=(gconst115*x4848);
IkReal x4855=(gconst115*x4849);
IkReal x4856=((1.0)*gconst116*x4849);
evalcond[0]=(((x4848*x4851))+((r22*x4849))+(((-1.0)*gconst116*r20*x4853)));
evalcond[1]=((((-1.0)*gconst116*r10*x4853))+cj0+((r12*x4849))+((r11*x4854)));
evalcond[2]=(((r02*x4849))+(((-1.0)*sj0))+((r01*x4854))+(((-1.0)*gconst116*r00*x4853)));
evalcond[3]=((((-1.0)*r20*x4856))+((x4849*x4851))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4853))+((cj1*cj2)));
evalcond[4]=(((r01*x4855))+((cj0*x4852))+((cj0*x4850))+(((-1.0)*r02*x4853))+(((-1.0)*r00*x4856)));
evalcond[5]=((((-1.0)*r10*x4856))+(((-1.0)*r12*x4853))+((sj0*x4852))+((sj0*x4850))+((r11*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4857=((-1.0)*r21);
IkReal x4859 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4859)==0){
continue;
}
IkReal x4858=pow(x4859,-0.5);
CheckValue<IkReal> x4860 = IKatan2WithCheck(IkReal(x4857),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4860.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4860.value))));
IkReal gconst118=(x4857*x4858);
IkReal gconst119=((1.0)*r20*x4858);
CheckValue<IkReal> x4861 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4861.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4861.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4862=((-1.0)*r21);
CheckValue<IkReal> x4865 = IKatan2WithCheck(IkReal(x4862),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4865.valid){
continue;
}
IkReal x4863=((1.0)*(x4865.value));
IkReal x4864=x4858;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4863)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4863)));
IkReal gconst118=(x4862*x4864);
IkReal gconst119=((1.0)*r20*x4864);
IkReal x4866=r22*r22;
IkReal x4867=((1.0)*x4866);
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(((-1.0)+x4866),-1);
if(!x4871.valid){
continue;
}
IkReal x4868=x4871.value;
if((((1.0)+(((-1.0)*x4867)))) < -0.00001)
continue;
IkReal x4869=IKsqrt(((1.0)+(((-1.0)*x4867))));
IkReal x4870=(cj0*x4868*x4869);
j4eval[0]=((IKabs(((((-1.0)*x4867*x4870))+x4870)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4872=((-1.0)*r21);
CheckValue<IkReal> x4875 = IKatan2WithCheck(IkReal(x4872),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4875.valid){
continue;
}
IkReal x4873=((1.0)*(x4875.value));
IkReal x4874=x4858;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4873)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4873)));
IkReal gconst118=(x4872*x4874);
IkReal gconst119=((1.0)*r20*x4874);
IkReal x4876=r22*r22;
IkReal x4877=((1.0)*x4876);
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(((-1.0)+x4876),-1);
if(!x4881.valid){
continue;
}
IkReal x4878=x4881.value;
if((((1.0)+(((-1.0)*x4877)))) < -0.00001)
continue;
IkReal x4879=IKsqrt(((1.0)+(((-1.0)*x4877))));
IkReal x4880=(sj0*x4878*x4879);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4877*x4880))+x4880))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4882=((-1.0)*r21);
CheckValue<IkReal> x4885 = IKatan2WithCheck(IkReal(x4882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4885.valid){
continue;
}
IkReal x4883=((1.0)*(x4885.value));
IkReal x4884=x4858;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4883)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4883)));
IkReal gconst118=(x4882*x4884);
IkReal gconst119=((1.0)*r20*x4884);
IkReal x4886=r22*r22;
IkReal x4887=((1.0)*r12*sj0);
IkReal x4888=((1.0)*cj0*r02);
CheckValue<IkReal> x4892=IKPowWithIntegerCheck(((-1.0)+x4886),-1);
if(!x4892.valid){
continue;
}
IkReal x4889=x4892.value;
if((((1.0)+(((-1.0)*x4886)))) < -0.00001)
continue;
IkReal x4890=IKsqrt(((1.0)+(((-1.0)*x4886))));
IkReal x4891=(r22*x4889*x4890);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4888*x4891))+(((-1.0)*x4887*x4891)))))+(IKabs(((((-1.0)*x4887))+(((-1.0)*x4888))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4893=((1.0)*sj0);
IkReal x4894=((1.0)*gconst119);
CheckValue<IkReal> x4895=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x4894)))),-1);
if(!x4895.valid){
continue;
}
CheckValue<IkReal> x4896 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x4894))+((gconst118*r11*sj0))+(((-1.0)*gconst119*r10*x4893))+((cj0*gconst118*r01)))),IkReal(((((-1.0)*r12*x4893))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4895.value)))+(x4896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4897=IKcos(j4);
IkReal x4898=IKsin(j4);
IkReal x4899=(cj1*sj2);
IkReal x4900=(gconst118*r01);
IkReal x4901=(gconst119*r20);
IkReal x4902=(gconst119*r10);
IkReal x4903=(gconst119*r00);
IkReal x4904=(gconst118*r21);
IkReal x4905=(cj2*sj1);
IkReal x4906=(gconst118*r11);
IkReal x4907=((1.0)*x4897);
IkReal x4908=((1.0)*x4898);
evalcond[0]=(((r22*x4898))+(((-1.0)*x4901*x4907))+((x4897*x4904)));
evalcond[1]=(cj0+((r12*x4898))+(((-1.0)*x4902*x4907))+((x4897*x4906)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4898))+(((-1.0)*x4903*x4907))+((x4897*x4900)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x4907))+((x4898*x4904))+((cj1*cj2))+(((-1.0)*x4901*x4908)));
evalcond[4]=((((-1.0)*x4903*x4908))+(((-1.0)*r02*x4907))+((cj0*x4899))+((x4898*x4900))+((cj0*x4905)));
evalcond[5]=((((-1.0)*r12*x4907))+(((-1.0)*x4902*x4908))+((sj0*x4905))+((x4898*x4906))+((sj0*x4899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4909=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x4909.valid){
continue;
}
CheckValue<IkReal> x4910 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4909.value)))+(x4910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4911=IKcos(j4);
IkReal x4912=IKsin(j4);
IkReal x4913=(cj1*sj2);
IkReal x4914=(gconst118*r01);
IkReal x4915=(gconst119*r20);
IkReal x4916=(gconst119*r10);
IkReal x4917=(gconst119*r00);
IkReal x4918=(gconst118*r21);
IkReal x4919=(cj2*sj1);
IkReal x4920=(gconst118*r11);
IkReal x4921=((1.0)*x4911);
IkReal x4922=((1.0)*x4912);
evalcond[0]=(((x4911*x4918))+(((-1.0)*x4915*x4921))+((r22*x4912)));
evalcond[1]=(cj0+(((-1.0)*x4916*x4921))+((r12*x4912))+((x4911*x4920)));
evalcond[2]=((((-1.0)*sj0))+((x4911*x4914))+((r02*x4912))+(((-1.0)*x4917*x4921)));
evalcond[3]=((((-1.0)*x4915*x4922))+(((-1.0)*sj1*sj2))+((x4912*x4918))+(((-1.0)*r22*x4921))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x4921))+(((-1.0)*x4917*x4922))+((x4912*x4914))+((cj0*x4919))+((cj0*x4913)));
evalcond[5]=((((-1.0)*x4916*x4922))+((sj0*x4913))+((sj0*x4919))+((x4912*x4920))+(((-1.0)*r12*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4923.value)))+(x4924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j4);
IkReal x4926=IKsin(j4);
IkReal x4927=(cj1*sj2);
IkReal x4928=(gconst118*r01);
IkReal x4929=(gconst119*r20);
IkReal x4930=(gconst119*r10);
IkReal x4931=(gconst119*r00);
IkReal x4932=(gconst118*r21);
IkReal x4933=(cj2*sj1);
IkReal x4934=(gconst118*r11);
IkReal x4935=((1.0)*x4925);
IkReal x4936=((1.0)*x4926);
evalcond[0]=(((r22*x4926))+((x4925*x4932))+(((-1.0)*x4929*x4935)));
evalcond[1]=(cj0+(((-1.0)*x4930*x4935))+((x4925*x4934))+((r12*x4926)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4931*x4935))+((x4925*x4928))+((r02*x4926)));
evalcond[3]=(((x4926*x4932))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x4929*x4936))+(((-1.0)*r22*x4935)));
evalcond[4]=((((-1.0)*r02*x4935))+((x4926*x4928))+(((-1.0)*x4931*x4936))+((cj0*x4927))+((cj0*x4933)));
evalcond[5]=(((x4926*x4934))+(((-1.0)*x4930*x4936))+(((-1.0)*r12*x4935))+((sj0*x4927))+((sj0*x4933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4938 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4938)==0){
continue;
}
IkReal x4937=pow(x4938,-0.5);
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4939.value));
IkReal gconst121=((-1.0)*r11*x4937);
IkReal gconst122=(r10*x4937);
CheckValue<IkReal> x4940 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4940.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4940.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4943 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4943.valid){
continue;
}
IkReal x4941=((-1.0)*(x4943.value));
IkReal x4942=x4937;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x4941;
IkReal gconst120=x4941;
IkReal gconst121=((-1.0)*r11*x4942);
IkReal gconst122=(r10*x4942);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4944=((1.0)*sj0);
IkReal x4945=((1.0)*cj0);
CheckValue<IkReal> x4946=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x4946.valid){
continue;
}
CheckValue<IkReal> x4947 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r00*x4945))+((cj0*gconst121*r01))+((gconst121*r11*sj0))+(((-1.0)*gconst122*r10*x4944)))),IkReal(((((-1.0)*r12*x4944))+(((-1.0)*r02*x4945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4946.value)))+(x4947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4948=IKcos(j4);
IkReal x4949=IKsin(j4);
IkReal x4950=(gconst121*r11);
IkReal x4951=(cj2*sj1);
IkReal x4952=(gconst122*r00);
IkReal x4953=(gconst122*r10);
IkReal x4954=(gconst122*r20);
IkReal x4955=(cj1*sj2);
IkReal x4956=((1.0)*x4948);
IkReal x4957=((1.0)*x4949);
IkReal x4958=(gconst121*x4949);
IkReal x4959=(gconst121*x4948);
evalcond[0]=((((-1.0)*x4954*x4956))+((r21*x4959))+((r22*x4949)));
evalcond[1]=(cj0+((r12*x4949))+(((-1.0)*x4953*x4956))+((x4948*x4950)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4949))+(((-1.0)*x4952*x4956))+((r01*x4959)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x4956))+(((-1.0)*x4954*x4957))+((cj1*cj2))+((r21*x4958)));
evalcond[4]=((((-1.0)*r02*x4956))+(((-1.0)*x4952*x4957))+((r01*x4958))+((cj0*x4951))+((cj0*x4955)));
evalcond[5]=(((sj0*x4951))+((sj0*x4955))+(((-1.0)*r12*x4956))+(((-1.0)*x4953*x4957))+((x4949*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4960 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4960.valid){
continue;
}
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x4961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4960.value)+(((1.5707963267949)*(x4961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4962=IKcos(j4);
IkReal x4963=IKsin(j4);
IkReal x4964=(gconst121*r11);
IkReal x4965=(cj2*sj1);
IkReal x4966=(gconst122*r00);
IkReal x4967=(gconst122*r10);
IkReal x4968=(gconst122*r20);
IkReal x4969=(cj1*sj2);
IkReal x4970=((1.0)*x4962);
IkReal x4971=((1.0)*x4963);
IkReal x4972=(gconst121*x4963);
IkReal x4973=(gconst121*x4962);
evalcond[0]=((((-1.0)*x4968*x4970))+((r22*x4963))+((r21*x4973)));
evalcond[1]=(cj0+((r12*x4963))+(((-1.0)*x4967*x4970))+((x4962*x4964)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4963))+(((-1.0)*x4966*x4970))+((r01*x4973)));
evalcond[3]=((((-1.0)*x4968*x4971))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4970))+((cj1*cj2))+((r21*x4972)));
evalcond[4]=((((-1.0)*r02*x4970))+(((-1.0)*x4966*x4971))+((cj0*x4969))+((cj0*x4965))+((r01*x4972)));
evalcond[5]=(((x4963*x4964))+((sj0*x4969))+((sj0*x4965))+(((-1.0)*r12*x4970))+(((-1.0)*x4967*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4975 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4975)==0){
continue;
}
IkReal x4974=pow(x4975,-0.5);
CheckValue<IkReal> x4976 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4976.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4976.value))));
IkReal gconst124=((1.0)*r11*x4974);
IkReal gconst125=((-1.0)*r10*x4974);
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4980 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4980.valid){
continue;
}
IkReal x4978=((1.0)*(x4980.value));
IkReal x4979=x4974;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4978)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4978)));
IkReal gconst124=((1.0)*r11*x4979);
IkReal gconst125=((-1.0)*r10*x4979);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4983 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4983.valid){
continue;
}
IkReal x4981=((1.0)*(x4983.value));
IkReal x4982=x4974;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4981)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4981)));
IkReal gconst124=((1.0)*r11*x4982);
IkReal gconst125=((-1.0)*r10*x4982);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4986 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4986.valid){
continue;
}
IkReal x4984=((1.0)*(x4986.value));
IkReal x4985=x4974;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4984)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4984)));
IkReal gconst124=((1.0)*r11*x4985);
IkReal gconst125=((-1.0)*r10*x4985);
IkReal x4987=r12*r12;
IkReal x4988=((1.0)*sj0);
IkReal x4989=(cj0*r02);
IkReal x4990=x4974;
j4eval[0]=((IKabs(((((-1.0)*r12*x4988))+(((-1.0)*x4989)))))+(IKabs((((r12*x4989*x4990))+((sj0*x4987*x4990))+(((-1.0)*x4988*x4990))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4991=((1.0)*sj0);
IkReal x4992=((1.0)*gconst125);
CheckValue<IkReal> x4993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4992))+(((-1.0)*gconst124*r20)))),-1);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x4992))+((cj0*gconst124*r01))+(((-1.0)*gconst125*r10*x4991))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*r12*x4991))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4993.value)))+(x4994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKcos(j4);
IkReal x4996=IKsin(j4);
IkReal x4997=(cj2*sj1);
IkReal x4998=(gconst125*r20);
IkReal x4999=(gconst124*r01);
IkReal x5000=(gconst125*r00);
IkReal x5001=(gconst125*r10);
IkReal x5002=(cj1*sj2);
IkReal x5003=((1.0)*x4995);
IkReal x5004=((1.0)*x4996);
IkReal x5005=(gconst124*x4996);
IkReal x5006=(gconst124*x4995);
evalcond[0]=(((r22*x4996))+(((-1.0)*x4998*x5003))+((r21*x5006)));
evalcond[1]=(((r11*x5006))+cj0+(((-1.0)*x5001*x5003))+((r12*x4996)));
evalcond[2]=(((x4995*x4999))+(((-1.0)*sj0))+((r02*x4996))+(((-1.0)*x5000*x5003)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x4998*x5004))+((r21*x5005))+((cj1*cj2))+(((-1.0)*r22*x5003)));
evalcond[4]=(((x4996*x4999))+(((-1.0)*x5000*x5004))+(((-1.0)*r02*x5003))+((cj0*x5002))+((cj0*x4997)));
evalcond[5]=(((r11*x5005))+((sj0*x4997))+(((-1.0)*x5001*x5004))+(((-1.0)*r12*x5003))+((sj0*x5002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5007.value)))+(x5008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5009=IKcos(j4);
IkReal x5010=IKsin(j4);
IkReal x5011=(cj2*sj1);
IkReal x5012=(gconst125*r20);
IkReal x5013=(gconst124*r01);
IkReal x5014=(gconst125*r00);
IkReal x5015=(gconst125*r10);
IkReal x5016=(cj1*sj2);
IkReal x5017=((1.0)*x5009);
IkReal x5018=((1.0)*x5010);
IkReal x5019=(gconst124*x5010);
IkReal x5020=(gconst124*x5009);
evalcond[0]=((((-1.0)*x5012*x5017))+((r22*x5010))+((r21*x5020)));
evalcond[1]=(((r11*x5020))+cj0+((r12*x5010))+(((-1.0)*x5015*x5017)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5010))+(((-1.0)*x5014*x5017))+((x5009*x5013)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5017))+((r21*x5019))+(((-1.0)*x5012*x5018))+((cj1*cj2)));
evalcond[4]=(((cj0*x5011))+((cj0*x5016))+((x5010*x5013))+(((-1.0)*r02*x5017))+(((-1.0)*x5014*x5018)));
evalcond[5]=(((sj0*x5011))+((sj0*x5016))+(((-1.0)*r12*x5017))+((r11*x5019))+(((-1.0)*x5015*x5018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5021=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5021.valid){
continue;
}
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5021.value)))+(x5022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5023=IKcos(j4);
IkReal x5024=IKsin(j4);
IkReal x5025=(cj2*sj1);
IkReal x5026=(gconst125*r20);
IkReal x5027=(gconst124*r01);
IkReal x5028=(gconst125*r00);
IkReal x5029=(gconst125*r10);
IkReal x5030=(cj1*sj2);
IkReal x5031=((1.0)*x5023);
IkReal x5032=((1.0)*x5024);
IkReal x5033=(gconst124*x5024);
IkReal x5034=(gconst124*x5023);
evalcond[0]=(((r22*x5024))+(((-1.0)*x5026*x5031))+((r21*x5034)));
evalcond[1]=(cj0+((r12*x5024))+((r11*x5034))+(((-1.0)*x5029*x5031)));
evalcond[2]=(((x5023*x5027))+(((-1.0)*x5028*x5031))+(((-1.0)*sj0))+((r02*x5024)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5026*x5032))+((r21*x5033))+((cj1*cj2))+(((-1.0)*r22*x5031)));
evalcond[4]=(((cj0*x5025))+(((-1.0)*x5028*x5032))+((x5024*x5027))+(((-1.0)*r02*x5031))+((cj0*x5030)));
evalcond[5]=(((r11*x5033))+(((-1.0)*x5029*x5032))+((sj0*x5030))+(((-1.0)*r12*x5031))+((sj0*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5035=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5035;
j4eval[1]=IKsign(x5035);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5036=((1.0)*cj5);
IkReal x5037=((((-1.0)*r21*x5036))+(((-1.0)*r20*sj5)));
j4eval[0]=x5037;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5036))))));
j4eval[2]=IKsign(x5037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5038=cj5*cj5;
IkReal x5039=r11*r11;
IkReal x5040=(cj5*r10);
IkReal x5041=(r11*sj5);
IkReal x5042=(((x5038*x5039))+(((2.0)*x5040*x5041))+(((-1.0)*x5039))+(((-1.0)*(r12*r12)))+(((-1.0)*x5038*(r10*r10))));
j4eval[0]=x5042;
j4eval[1]=((IKabs((x5041+(((-1.0)*x5040)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5043=cj5*cj5;
IkReal x5044=r11*r11;
IkReal x5045=(cj5*r10);
IkReal x5046=(r11*sj5);
CheckValue<IkReal> x5047 = IKatan2WithCheck(IkReal(r12),IkReal((x5046+(((-1.0)*x5045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((2.0)*x5045*x5046))+((x5043*x5044))+(((-1.0)*x5043*(r10*r10)))+(((-1.0)*x5044))+(((-1.0)*(r12*r12))))),-1);
if(!x5048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5047.value)+(((1.5707963267949)*(x5048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5049=IKcos(j4);
IkReal x5050=IKsin(j4);
IkReal x5051=(cj5*r00);
IkReal x5052=(cj5*r10);
IkReal x5053=(cj5*r20);
IkReal x5054=((1.0)*x5049);
IkReal x5055=((1.0)*x5050);
IkReal x5056=(sj5*x5049);
IkReal x5057=(sj5*x5050);
evalcond[0]=(((r21*x5056))+((r22*x5050))+(((-1.0)*x5053*x5054)));
evalcond[1]=(((r01*x5056))+((r02*x5050))+(((-1.0)*x5051*x5054)));
evalcond[2]=((1.0)+((r12*x5050))+((r11*x5056))+(((-1.0)*x5052*x5054)));
evalcond[3]=((((-1.0)*r12*x5054))+((r11*x5057))+(((-1.0)*x5052*x5055)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x5057))+(((-1.0)*r02*x5054))+(((-1.0)*x5051*x5055)));
evalcond[5]=(((r21*x5057))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5054))+(((-1.0)*x5053*x5055))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5058=((1.0)*cj5);
CheckValue<IkReal> x5059 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5058)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5059.valid){
continue;
}
CheckValue<IkReal> x5060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5058))+(((-1.0)*r20*sj5)))),-1);
if(!x5060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5059.value)+(((1.5707963267949)*(x5060.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5061=IKcos(j4);
IkReal x5062=IKsin(j4);
IkReal x5063=(cj5*r00);
IkReal x5064=(cj5*r10);
IkReal x5065=(cj5*r20);
IkReal x5066=((1.0)*x5061);
IkReal x5067=((1.0)*x5062);
IkReal x5068=(sj5*x5061);
IkReal x5069=(sj5*x5062);
evalcond[0]=(((r21*x5068))+(((-1.0)*x5065*x5066))+((r22*x5062)));
evalcond[1]=(((r02*x5062))+((r01*x5068))+(((-1.0)*x5063*x5066)));
evalcond[2]=((1.0)+((r11*x5068))+((r12*x5062))+(((-1.0)*x5064*x5066)));
evalcond[3]=((((-1.0)*r12*x5066))+((r11*x5069))+(((-1.0)*x5064*x5067)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x5066))+((r01*x5069))+(((-1.0)*x5063*x5067)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5066))+((r21*x5069))+(((-1.0)*x5065*x5067))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5070=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5070.valid){
continue;
}
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5070.value)))+(x5071.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5072=IKcos(j4);
IkReal x5073=IKsin(j4);
IkReal x5074=(cj5*r00);
IkReal x5075=(cj5*r10);
IkReal x5076=(cj5*r20);
IkReal x5077=((1.0)*x5072);
IkReal x5078=((1.0)*x5073);
IkReal x5079=(sj5*x5072);
IkReal x5080=(sj5*x5073);
evalcond[0]=(((r21*x5079))+(((-1.0)*x5076*x5077))+((r22*x5073)));
evalcond[1]=(((r02*x5073))+((r01*x5079))+(((-1.0)*x5074*x5077)));
evalcond[2]=((1.0)+((r12*x5073))+(((-1.0)*x5075*x5077))+((r11*x5079)));
evalcond[3]=(((r11*x5080))+(((-1.0)*r12*x5077))+(((-1.0)*x5075*x5078)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x5077))+((cj1*sj2))+((r01*x5080))+(((-1.0)*x5074*x5078)));
evalcond[5]=(((r21*x5080))+(((-1.0)*sj1*sj2))+(((-1.0)*x5076*x5078))+(((-1.0)*r22*x5077))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5081=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5081;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5082=((1.0)*cj5);
IkReal x5083=((((-1.0)*r01*x5082))+(((-1.0)*r00*sj5)));
j4eval[0]=x5083;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5082)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5084=cj5*cj5;
IkReal x5085=r11*r11;
IkReal x5086=(r11*sj5);
IkReal x5087=(cj5*r10);
IkReal x5088=((r12*r12)+x5085+((x5084*(r10*r10)))+(((-1.0)*x5084*x5085))+(((-2.0)*x5086*x5087)));
j4eval[0]=x5088;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5087))+x5086))));
j4eval[2]=IKsign(x5088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5089=cj5*cj5;
IkReal x5090=r11*r11;
IkReal x5091=(cj5*r10);
IkReal x5092=(r11*sj5);
CheckValue<IkReal> x5093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5091))+x5092)),IKFAST_ATAN2_MAGTHRESH);
if(!x5093.valid){
continue;
}
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5089*(r10*r10)))+(((-1.0)*x5089*x5090))+x5090+(((-2.0)*x5091*x5092)))),-1);
if(!x5094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5093.value)+(((1.5707963267949)*(x5094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5095=IKcos(j4);
IkReal x5096=IKsin(j4);
IkReal x5097=(cj5*r00);
IkReal x5098=(cj5*r10);
IkReal x5099=((1.0)*sj1);
IkReal x5100=(cj5*r20);
IkReal x5101=((1.0)*x5095);
IkReal x5102=((1.0)*x5096);
IkReal x5103=(sj5*x5095);
IkReal x5104=(sj5*x5096);
evalcond[0]=(((r22*x5096))+(((-1.0)*x5100*x5101))+((r21*x5103)));
evalcond[1]=((((-1.0)*x5097*x5101))+((r01*x5103))+((r02*x5096)));
evalcond[2]=((-1.0)+((r12*x5096))+(((-1.0)*x5098*x5101))+((r11*x5103)));
evalcond[3]=((((-1.0)*x5098*x5102))+((r11*x5104))+(((-1.0)*r12*x5101)));
evalcond[4]=((((-1.0)*r22*x5101))+(((-1.0)*sj2*x5099))+(((-1.0)*x5100*x5102))+((r21*x5104))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x5097*x5102))+((r01*x5104))+(((-1.0)*r02*x5101))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5105=((1.0)*cj5);
CheckValue<IkReal> x5106 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5105)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5106.valid){
continue;
}
CheckValue<IkReal> x5107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5105)))),-1);
if(!x5107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5106.value)+(((1.5707963267949)*(x5107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5108=IKcos(j4);
IkReal x5109=IKsin(j4);
IkReal x5110=(cj5*r00);
IkReal x5111=(cj5*r10);
IkReal x5112=((1.0)*sj1);
IkReal x5113=(cj5*r20);
IkReal x5114=((1.0)*x5108);
IkReal x5115=((1.0)*x5109);
IkReal x5116=(sj5*x5108);
IkReal x5117=(sj5*x5109);
evalcond[0]=(((r22*x5109))+((r21*x5116))+(((-1.0)*x5113*x5114)));
evalcond[1]=(((r01*x5116))+(((-1.0)*x5110*x5114))+((r02*x5109)));
evalcond[2]=((-1.0)+((r12*x5109))+(((-1.0)*x5111*x5114))+((r11*x5116)));
evalcond[3]=((((-1.0)*x5111*x5115))+((r11*x5117))+(((-1.0)*r12*x5114)));
evalcond[4]=((((-1.0)*r22*x5114))+(((-1.0)*sj2*x5112))+((r21*x5117))+(((-1.0)*x5113*x5115))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x5112))+((r01*x5117))+(((-1.0)*r02*x5114))+(((-1.0)*x5110*x5115))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5118=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5118.valid){
continue;
}
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5118.value)))+(x5119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5120=IKcos(j4);
IkReal x5121=IKsin(j4);
IkReal x5122=(cj5*r00);
IkReal x5123=(cj5*r10);
IkReal x5124=((1.0)*sj1);
IkReal x5125=(cj5*r20);
IkReal x5126=((1.0)*x5120);
IkReal x5127=((1.0)*x5121);
IkReal x5128=(sj5*x5120);
IkReal x5129=(sj5*x5121);
evalcond[0]=(((r22*x5121))+(((-1.0)*x5125*x5126))+((r21*x5128)));
evalcond[1]=(((r01*x5128))+(((-1.0)*x5122*x5126))+((r02*x5121)));
evalcond[2]=((-1.0)+((r12*x5121))+((r11*x5128))+(((-1.0)*x5123*x5126)));
evalcond[3]=(((r11*x5129))+(((-1.0)*x5123*x5127))+(((-1.0)*r12*x5126)));
evalcond[4]=((((-1.0)*x5125*x5127))+(((-1.0)*sj2*x5124))+((cj1*cj2))+((r21*x5129))+(((-1.0)*r22*x5126)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x5129))+(((-1.0)*x5122*x5127))+(((-1.0)*r02*x5126))+(((-1.0)*cj2*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5131 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5131)==0){
continue;
}
IkReal x5130=pow(x5131,-0.5);
CheckValue<IkReal> x5132 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5132.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5132.value));
IkReal gconst127=((-1.0)*r01*x5130);
IkReal gconst128=(r00*x5130);
CheckValue<IkReal> x5133 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5133.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5133.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5136 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5136.valid){
continue;
}
IkReal x5134=((-1.0)*(x5136.value));
IkReal x5135=x5130;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5134;
IkReal gconst126=x5134;
IkReal gconst127=((-1.0)*r01*x5135);
IkReal gconst128=(r00*x5135);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5137=((1.0)*sj0);
IkReal x5138=((1.0)*gconst128);
CheckValue<IkReal> x5139 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5138))+((cj0*gconst127*r01))+(((-1.0)*gconst128*r10*x5137))+((gconst127*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5138)))),-1);
if(!x5140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5139.value)+(((1.5707963267949)*(x5140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5141=IKcos(j4);
IkReal x5142=IKsin(j4);
IkReal x5143=(gconst127*r01);
IkReal x5144=(cj2*sj1);
IkReal x5145=(gconst128*r10);
IkReal x5146=(gconst128*r00);
IkReal x5147=(gconst128*r20);
IkReal x5148=(cj1*sj2);
IkReal x5149=((1.0)*x5141);
IkReal x5150=((1.0)*x5142);
IkReal x5151=(gconst127*x5141);
IkReal x5152=(gconst127*x5142);
evalcond[0]=(((r21*x5151))+((r22*x5142))+(((-1.0)*x5147*x5149)));
evalcond[1]=(((r11*x5151))+cj0+((r12*x5142))+(((-1.0)*x5145*x5149)));
evalcond[2]=((((-1.0)*sj0))+((x5141*x5143))+((r02*x5142))+(((-1.0)*x5146*x5149)));
evalcond[3]=(((r21*x5152))+(((-1.0)*sj1*sj2))+(((-1.0)*x5147*x5150))+((cj1*cj2))+(((-1.0)*r22*x5149)));
evalcond[4]=(((x5142*x5143))+(((-1.0)*r02*x5149))+((cj0*x5148))+((cj0*x5144))+(((-1.0)*x5146*x5150)));
evalcond[5]=(((r11*x5152))+(((-1.0)*r12*x5149))+(((-1.0)*x5145*x5150))+((sj0*x5144))+((sj0*x5148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5153=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5153.valid){
continue;
}
CheckValue<IkReal> x5154 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5153.value)))+(x5154.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5155=IKcos(j4);
IkReal x5156=IKsin(j4);
IkReal x5157=(gconst127*r01);
IkReal x5158=(cj2*sj1);
IkReal x5159=(gconst128*r10);
IkReal x5160=(gconst128*r00);
IkReal x5161=(gconst128*r20);
IkReal x5162=(cj1*sj2);
IkReal x5163=((1.0)*x5155);
IkReal x5164=((1.0)*x5156);
IkReal x5165=(gconst127*x5155);
IkReal x5166=(gconst127*x5156);
evalcond[0]=(((r21*x5165))+(((-1.0)*x5161*x5163))+((r22*x5156)));
evalcond[1]=(cj0+((r12*x5156))+(((-1.0)*x5159*x5163))+((r11*x5165)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5160*x5163))+((x5155*x5157))+((r02*x5156)));
evalcond[3]=((((-1.0)*r22*x5163))+((r21*x5166))+(((-1.0)*sj1*sj2))+(((-1.0)*x5161*x5164))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5160*x5164))+((cj0*x5158))+(((-1.0)*r02*x5163))+((cj0*x5162))+((x5156*x5157)));
evalcond[5]=((((-1.0)*r12*x5163))+(((-1.0)*x5159*x5164))+((r11*x5166))+((sj0*x5158))+((sj0*x5162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5168 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5168)==0){
continue;
}
IkReal x5167=pow(x5168,-0.5);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5169.value))));
IkReal gconst130=((1.0)*r01*x5167);
IkReal gconst131=((-1.0)*r00*x5167);
CheckValue<IkReal> x5170 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5170.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5170.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5173 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5173.valid){
continue;
}
IkReal x5171=((1.0)*(x5173.value));
IkReal x5172=x5167;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5171)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5171)));
IkReal gconst130=((1.0)*r01*x5172);
IkReal gconst131=((-1.0)*r00*x5172);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5176 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5176.valid){
continue;
}
IkReal x5174=((1.0)*(x5176.value));
IkReal x5175=x5167;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5174)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5174)));
IkReal gconst130=((1.0)*r01*x5175);
IkReal gconst131=((-1.0)*r00*x5175);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
IkReal x5177=((1.0)*(x5179.value));
IkReal x5178=x5167;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5177)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5177)));
IkReal gconst130=((1.0)*r01*x5178);
IkReal gconst131=((-1.0)*r00*x5178);
IkReal x5180=r02*r02;
IkReal x5181=(r12*sj0);
IkReal x5182=((1.0)*cj0);
IkReal x5183=x5167;
j4eval[0]=((IKabs(((((-1.0)*r02*x5182))+(((-1.0)*x5181)))))+(IKabs((((r02*x5181*x5183))+(((-1.0)*x5182*x5183))+((cj0*x5180*x5183))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5184=((1.0)*sj0);
IkReal x5185=((1.0)*gconst131);
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r10*x5184))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5185)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5185))+(((-1.0)*gconst130*r20)))),-1);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5186.value)+(((1.5707963267949)*(x5187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKcos(j4);
IkReal x5189=IKsin(j4);
IkReal x5190=(gconst131*r10);
IkReal x5191=(gconst130*r11);
IkReal x5192=(gconst131*r20);
IkReal x5193=(cj2*sj1);
IkReal x5194=(gconst131*r00);
IkReal x5195=(cj1*sj2);
IkReal x5196=((1.0)*x5188);
IkReal x5197=((1.0)*x5189);
IkReal x5198=(gconst130*x5188);
IkReal x5199=(gconst130*x5189);
evalcond[0]=(((r22*x5189))+((r21*x5198))+(((-1.0)*x5192*x5196)));
evalcond[1]=(((x5188*x5191))+cj0+(((-1.0)*x5190*x5196))+((r12*x5189)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5189))+((r01*x5198))+(((-1.0)*x5194*x5196)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x5199))+(((-1.0)*x5192*x5197))+(((-1.0)*r22*x5196))+((cj1*cj2)));
evalcond[4]=(((cj0*x5195))+((cj0*x5193))+(((-1.0)*r02*x5196))+((r01*x5199))+(((-1.0)*x5194*x5197)));
evalcond[5]=((((-1.0)*r12*x5196))+((sj0*x5195))+((sj0*x5193))+(((-1.0)*x5190*x5197))+((x5189*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
CheckValue<IkReal> x5201=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5200.value)+(((1.5707963267949)*(x5201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5202=IKcos(j4);
IkReal x5203=IKsin(j4);
IkReal x5204=(gconst131*r10);
IkReal x5205=(gconst130*r11);
IkReal x5206=(gconst131*r20);
IkReal x5207=(cj2*sj1);
IkReal x5208=(gconst131*r00);
IkReal x5209=(cj1*sj2);
IkReal x5210=((1.0)*x5202);
IkReal x5211=((1.0)*x5203);
IkReal x5212=(gconst130*x5202);
IkReal x5213=(gconst130*x5203);
evalcond[0]=((((-1.0)*x5206*x5210))+((r22*x5203))+((r21*x5212)));
evalcond[1]=(cj0+((x5202*x5205))+((r12*x5203))+(((-1.0)*x5204*x5210)));
evalcond[2]=(((r01*x5212))+(((-1.0)*sj0))+((r02*x5203))+(((-1.0)*x5208*x5210)));
evalcond[3]=((((-1.0)*x5206*x5211))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5210))+((cj1*cj2))+((r21*x5213)));
evalcond[4]=(((r01*x5213))+(((-1.0)*x5208*x5211))+((cj0*x5207))+((cj0*x5209))+(((-1.0)*r02*x5210)));
evalcond[5]=(((x5203*x5205))+((sj0*x5207))+((sj0*x5209))+(((-1.0)*x5204*x5211))+(((-1.0)*r12*x5210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5214=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5214.value)))+(x5215.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5216=IKcos(j4);
IkReal x5217=IKsin(j4);
IkReal x5218=(gconst131*r10);
IkReal x5219=(gconst130*r11);
IkReal x5220=(gconst131*r20);
IkReal x5221=(cj2*sj1);
IkReal x5222=(gconst131*r00);
IkReal x5223=(cj1*sj2);
IkReal x5224=((1.0)*x5216);
IkReal x5225=((1.0)*x5217);
IkReal x5226=(gconst130*x5216);
IkReal x5227=(gconst130*x5217);
evalcond[0]=(((r21*x5226))+((r22*x5217))+(((-1.0)*x5220*x5224)));
evalcond[1]=(cj0+((x5216*x5219))+((r12*x5217))+(((-1.0)*x5218*x5224)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5222*x5224))+((r02*x5217))+((r01*x5226)));
evalcond[3]=(((r21*x5227))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5224))+(((-1.0)*x5220*x5225))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5222*x5225))+((cj0*x5223))+((cj0*x5221))+(((-1.0)*r02*x5224))+((r01*x5227)));
evalcond[5]=(((x5217*x5219))+(((-1.0)*x5218*x5225))+(((-1.0)*r12*x5224))+((sj0*x5223))+((sj0*x5221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5228=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5228;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5229=((1.0)*cj5);
IkReal x5230=((((-1.0)*r21*x5229))+(((-1.0)*r20*sj5)));
j4eval[0]=x5230;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5229)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5231=cj5*cj5;
IkReal x5232=r01*r01;
IkReal x5233=(cj5*r00);
IkReal x5234=(r01*sj5);
IkReal x5235=((((-1.0)*x5231*x5232))+x5232+(r02*r02)+((x5231*(r00*r00)))+(((-2.0)*x5233*x5234)));
j4eval[0]=x5235;
j4eval[1]=IKsign(x5235);
j4eval[2]=((IKabs(((((-1.0)*x5233))+x5234)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5236=cj5*cj5;
IkReal x5237=r01*r01;
IkReal x5238=(r01*sj5);
IkReal x5239=(cj5*r00);
CheckValue<IkReal> x5240=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5236*x5237))+((x5236*(r00*r00)))+x5237+(((-2.0)*x5238*x5239))+(r02*r02))),-1);
if(!x5240.valid){
continue;
}
CheckValue<IkReal> x5241 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5239))+x5238)),IKFAST_ATAN2_MAGTHRESH);
if(!x5241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5240.value)))+(x5241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5242=IKcos(j4);
IkReal x5243=IKsin(j4);
IkReal x5244=(cj5*r00);
IkReal x5245=(cj5*r10);
IkReal x5246=(cj5*r20);
IkReal x5247=((1.0)*x5242);
IkReal x5248=((1.0)*x5243);
IkReal x5249=(sj5*x5242);
IkReal x5250=(sj5*x5243);
evalcond[0]=(((r21*x5249))+(((-1.0)*x5246*x5247))+((r22*x5243)));
evalcond[1]=(((r11*x5249))+((r12*x5243))+(((-1.0)*x5245*x5247)));
evalcond[2]=((-1.0)+((r01*x5249))+((r02*x5243))+(((-1.0)*x5244*x5247)));
evalcond[3]=(((r01*x5250))+(((-1.0)*r02*x5247))+(((-1.0)*x5244*x5248)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5247))+((cj1*sj2))+((r11*x5250))+(((-1.0)*x5245*x5248)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5247))+((r21*x5250))+(((-1.0)*x5246*x5248))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5251=((1.0)*cj5);
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5251)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5251))+(((-1.0)*r20*sj5)))),-1);
if(!x5253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5252.value)+(((1.5707963267949)*(x5253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5254=IKcos(j4);
IkReal x5255=IKsin(j4);
IkReal x5256=(cj5*r00);
IkReal x5257=(cj5*r10);
IkReal x5258=(cj5*r20);
IkReal x5259=((1.0)*x5254);
IkReal x5260=((1.0)*x5255);
IkReal x5261=(sj5*x5254);
IkReal x5262=(sj5*x5255);
evalcond[0]=(((r22*x5255))+(((-1.0)*x5258*x5259))+((r21*x5261)));
evalcond[1]=(((r12*x5255))+((r11*x5261))+(((-1.0)*x5257*x5259)));
evalcond[2]=((-1.0)+((r01*x5261))+(((-1.0)*x5256*x5259))+((r02*x5255)));
evalcond[3]=((((-1.0)*r02*x5259))+((r01*x5262))+(((-1.0)*x5256*x5260)));
evalcond[4]=(((cj2*sj1))+((r11*x5262))+((cj1*sj2))+(((-1.0)*r12*x5259))+(((-1.0)*x5257*x5260)));
evalcond[5]=((((-1.0)*x5258*x5260))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5259))+((r21*x5262))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5263 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5263.valid){
continue;
}
CheckValue<IkReal> x5264=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5263.value)+(((1.5707963267949)*(x5264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5265=IKcos(j4);
IkReal x5266=IKsin(j4);
IkReal x5267=(cj5*r00);
IkReal x5268=(cj5*r10);
IkReal x5269=(cj5*r20);
IkReal x5270=((1.0)*x5265);
IkReal x5271=((1.0)*x5266);
IkReal x5272=(sj5*x5265);
IkReal x5273=(sj5*x5266);
evalcond[0]=(((r21*x5272))+(((-1.0)*x5269*x5270))+((r22*x5266)));
evalcond[1]=(((r12*x5266))+(((-1.0)*x5268*x5270))+((r11*x5272)));
evalcond[2]=((-1.0)+((r02*x5266))+((r01*x5272))+(((-1.0)*x5267*x5270)));
evalcond[3]=(((r01*x5273))+(((-1.0)*r02*x5270))+(((-1.0)*x5267*x5271)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5270))+(((-1.0)*x5268*x5271))+((r11*x5273)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5273))+((cj1*cj2))+(((-1.0)*x5269*x5271))+(((-1.0)*r22*x5270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5274=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5274;
j4eval[1]=IKsign(x5274);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5275=((1.0)*cj5);
IkReal x5276=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5275)));
j4eval[0]=x5276;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5275))))));
j4eval[2]=IKsign(x5276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5277=cj5*cj5;
IkReal x5278=r01*r01;
IkReal x5279=(r01*sj5);
IkReal x5280=(cj5*r00);
IkReal x5281=((((2.0)*x5279*x5280))+(((-1.0)*(r02*r02)))+(((-1.0)*x5277*(r00*r00)))+(((-1.0)*x5278))+((x5277*x5278)));
j4eval[0]=x5281;
j4eval[1]=IKsign(x5281);
j4eval[2]=((IKabs((x5279+(((-1.0)*x5280)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5282=cj5*cj5;
IkReal x5283=r01*r01;
IkReal x5284=(r01*sj5);
IkReal x5285=(cj5*r00);
CheckValue<IkReal> x5286 = IKatan2WithCheck(IkReal(r02),IkReal((x5284+(((-1.0)*x5285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5286.valid){
continue;
}
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x5282*x5283))+(((-1.0)*x5283))+(((2.0)*x5284*x5285))+(((-1.0)*x5282*(r00*r00))))),-1);
if(!x5287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5286.value)+(((1.5707963267949)*(x5287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5288=IKcos(j4);
IkReal x5289=IKsin(j4);
IkReal x5290=(cj5*r00);
IkReal x5291=(cj5*r10);
IkReal x5292=((1.0)*sj1);
IkReal x5293=(cj5*r20);
IkReal x5294=((1.0)*x5288);
IkReal x5295=((1.0)*x5289);
IkReal x5296=(sj5*x5288);
IkReal x5297=(sj5*x5289);
evalcond[0]=(((r22*x5289))+((r21*x5296))+(((-1.0)*x5293*x5294)));
evalcond[1]=(((r12*x5289))+(((-1.0)*x5291*x5294))+((r11*x5296)));
evalcond[2]=((1.0)+((r02*x5289))+((r01*x5296))+(((-1.0)*x5290*x5294)));
evalcond[3]=(((r01*x5297))+(((-1.0)*r02*x5294))+(((-1.0)*x5290*x5295)));
evalcond[4]=((((-1.0)*r22*x5294))+((r21*x5297))+(((-1.0)*sj2*x5292))+(((-1.0)*x5293*x5295))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5292))+(((-1.0)*r12*x5294))+(((-1.0)*x5291*x5295))+((r11*x5297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5298=((1.0)*cj5);
CheckValue<IkReal> x5299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5298)))),-1);
if(!x5299.valid){
continue;
}
CheckValue<IkReal> x5300 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5298)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5299.value)))+(x5300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5301=IKcos(j4);
IkReal x5302=IKsin(j4);
IkReal x5303=(cj5*r00);
IkReal x5304=(cj5*r10);
IkReal x5305=((1.0)*sj1);
IkReal x5306=(cj5*r20);
IkReal x5307=((1.0)*x5301);
IkReal x5308=((1.0)*x5302);
IkReal x5309=(sj5*x5301);
IkReal x5310=(sj5*x5302);
evalcond[0]=(((r21*x5309))+(((-1.0)*x5306*x5307))+((r22*x5302)));
evalcond[1]=(((r12*x5302))+((r11*x5309))+(((-1.0)*x5304*x5307)));
evalcond[2]=((1.0)+(((-1.0)*x5303*x5307))+((r02*x5302))+((r01*x5309)));
evalcond[3]=((((-1.0)*x5303*x5308))+((r01*x5310))+(((-1.0)*r02*x5307)));
evalcond[4]=((((-1.0)*r22*x5307))+(((-1.0)*x5306*x5308))+((r21*x5310))+((cj1*cj2))+(((-1.0)*sj2*x5305)));
evalcond[5]=((((-1.0)*r12*x5307))+(((-1.0)*cj1*sj2))+((r11*x5310))+(((-1.0)*cj2*x5305))+(((-1.0)*x5304*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5311=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5311.valid){
continue;
}
CheckValue<IkReal> x5312 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5311.value)))+(x5312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5313=IKcos(j4);
IkReal x5314=IKsin(j4);
IkReal x5315=(cj5*r00);
IkReal x5316=(cj5*r10);
IkReal x5317=((1.0)*sj1);
IkReal x5318=(cj5*r20);
IkReal x5319=((1.0)*x5313);
IkReal x5320=((1.0)*x5314);
IkReal x5321=(sj5*x5313);
IkReal x5322=(sj5*x5314);
evalcond[0]=(((r22*x5314))+(((-1.0)*x5318*x5319))+((r21*x5321)));
evalcond[1]=(((r11*x5321))+(((-1.0)*x5316*x5319))+((r12*x5314)));
evalcond[2]=((1.0)+((r02*x5314))+(((-1.0)*x5315*x5319))+((r01*x5321)));
evalcond[3]=((((-1.0)*x5315*x5320))+((r01*x5322))+(((-1.0)*r02*x5319)));
evalcond[4]=((((-1.0)*x5318*x5320))+(((-1.0)*sj2*x5317))+((cj1*cj2))+((r21*x5322))+(((-1.0)*r22*x5319)));
evalcond[5]=((((-1.0)*r12*x5319))+((r11*x5322))+(((-1.0)*x5316*x5320))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x5317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5323=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5323);
rxp1_1=(px*r21);
rxp1_2=(r11*x5323);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5324=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5324);
rxp1_1=(px*r21);
rxp1_2=(r11*x5324);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5325=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5325);
rxp1_1=(px*r21);
rxp1_2=(r11*x5325);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5328=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5328.valid){
continue;
}
IkReal x5326=x5328.value;
IkReal x5327=((1.0)*sj0*x5326);
sj4array[0]=((((-1.0)*cj2*sj1*x5327))+(((-1.0)*cj1*sj2*x5327)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5329=IKcos(j4);
IkReal x5330=IKsin(j4);
IkReal x5331=(r21*sj5);
IkReal x5332=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5329);
evalcond[1]=((((-1.0)*sj0))+((r02*x5330)));
evalcond[2]=((((-1.0)*x5329*x5332))+((x5329*x5331)));
evalcond[3]=((((-1.0)*cj5*r10*x5329))+((r11*sj5*x5329)));
evalcond[4]=((((-1.0)*x5330*x5332))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x5330*x5331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5334=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5334.valid){
continue;
}
IkReal x5333=x5334.value;
sj4array[0]=((((-1.0)*cj1*cj2*x5333))+((sj1*sj2*x5333)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5335=IKcos(j4);
IkReal x5336=IKsin(j4);
IkReal x5337=((1.0)*cj5);
IkReal x5338=(sj5*x5335);
evalcond[0]=((-1.0)*r02*x5335);
evalcond[1]=((((-1.0)*sj0))+((r02*x5336)));
evalcond[2]=((((-1.0)*r20*x5335*x5337))+((r21*x5338)));
evalcond[3]=(((r11*x5338))+(((-1.0)*r10*x5335*x5337)));
evalcond[4]=((((-1.0)*r10*x5336*x5337))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((r11*sj5*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5339=IKPowWithIntegerCheck(r02,-1);
if(!x5339.valid){
continue;
}
sj4array[0]=(sj0*(x5339.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5340=IKcos(j4);
IkReal x5341=IKsin(j4);
IkReal x5342=(r21*sj5);
IkReal x5343=(r11*sj5);
IkReal x5344=((1.0)*cj5*x5341);
IkReal x5345=((1.0)*cj5*x5340);
evalcond[0]=((-1.0)*r02*x5340);
evalcond[1]=((((-1.0)*r20*x5345))+((x5340*x5342)));
evalcond[2]=((((-1.0)*r10*x5345))+((x5340*x5343)));
evalcond[3]=((((-1.0)*r20*x5344))+(((-1.0)*sj1*sj2))+((x5341*x5342))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r10*x5344))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x5341*x5343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5346=((1.0)*sj0);
IkReal x5347=((1.0)*cj0);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x5346))+((r11*sj0*sj5))+(((-1.0)*cj5*r00*x5347))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r02*x5347))+(((-1.0)*r12*x5346)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5348.value)+(((1.5707963267949)*(x5349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5350=IKcos(j4);
IkReal x5351=IKsin(j4);
IkReal x5352=(cj5*r00);
IkReal x5353=(cj5*r10);
IkReal x5354=(cj2*sj1);
IkReal x5355=(cj5*r20);
IkReal x5356=(cj1*sj2);
IkReal x5357=((1.0)*x5350);
IkReal x5358=((1.0)*x5351);
IkReal x5359=(sj5*x5350);
IkReal x5360=(sj5*x5351);
evalcond[0]=((((-1.0)*x5355*x5357))+((r22*x5351))+((r21*x5359)));
evalcond[1]=(cj0+(((-1.0)*x5353*x5357))+((r11*x5359))+((r12*x5351)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5352*x5357))+((r01*x5359))+((r02*x5351)));
evalcond[3]=((((-1.0)*x5355*x5358))+(((-1.0)*sj1*sj2))+((r21*x5360))+(((-1.0)*r22*x5357))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5357))+(((-1.0)*x5352*x5358))+((cj0*x5356))+((cj0*x5354))+((r01*x5360)));
evalcond[5]=((((-1.0)*x5353*x5358))+((sj0*x5356))+((sj0*x5354))+(((-1.0)*r12*x5357))+((r11*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5361.value)+(((1.5707963267949)*(x5362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5363=IKcos(j4);
IkReal x5364=IKsin(j4);
IkReal x5365=(cj5*r00);
IkReal x5366=(cj5*r10);
IkReal x5367=(cj2*sj1);
IkReal x5368=(cj5*r20);
IkReal x5369=(cj1*sj2);
IkReal x5370=((1.0)*x5363);
IkReal x5371=((1.0)*x5364);
IkReal x5372=(sj5*x5363);
IkReal x5373=(sj5*x5364);
evalcond[0]=(((r22*x5364))+((r21*x5372))+(((-1.0)*x5368*x5370)));
evalcond[1]=(((r12*x5364))+cj0+(((-1.0)*x5366*x5370))+((r11*x5372)));
evalcond[2]=(((r02*x5364))+(((-1.0)*sj0))+(((-1.0)*x5365*x5370))+((r01*x5372)));
evalcond[3]=((((-1.0)*r22*x5370))+((r21*x5373))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5368*x5371)));
evalcond[4]=((((-1.0)*r02*x5370))+(((-1.0)*x5365*x5371))+((r01*x5373))+((cj0*x5369))+((cj0*x5367)));
evalcond[5]=((((-1.0)*r12*x5370))+(((-1.0)*x5366*x5371))+((sj0*x5367))+((sj0*x5369))+((r11*x5373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5374 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5374.valid){
continue;
}
CheckValue<IkReal> x5375=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5374.value)+(((1.5707963267949)*(x5375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5376=IKcos(j4);
IkReal x5377=IKsin(j4);
IkReal x5378=(cj5*r00);
IkReal x5379=(cj5*r10);
IkReal x5380=(cj2*sj1);
IkReal x5381=(cj5*r20);
IkReal x5382=(cj1*sj2);
IkReal x5383=((1.0)*x5376);
IkReal x5384=((1.0)*x5377);
IkReal x5385=(sj5*x5376);
IkReal x5386=(sj5*x5377);
evalcond[0]=(((r22*x5377))+((r21*x5385))+(((-1.0)*x5381*x5383)));
evalcond[1]=(cj0+((r11*x5385))+(((-1.0)*x5379*x5383))+((r12*x5377)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5377))+((r01*x5385))+(((-1.0)*x5378*x5383)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5383))+((r21*x5386))+(((-1.0)*x5381*x5384)));
evalcond[4]=(((cj0*x5382))+((cj0*x5380))+(((-1.0)*r02*x5383))+((r01*x5386))+(((-1.0)*x5378*x5384)));
evalcond[5]=(((sj0*x5382))+((sj0*x5380))+((r11*x5386))+(((-1.0)*x5379*x5384))+(((-1.0)*r12*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5387=r21*r21;
IkReal x5388=cj5*cj5;
IkReal x5389=(sj1*sj2);
IkReal x5390=(r21*sj5);
IkReal x5391=(cj1*cj2);
IkReal x5392=(cj5*r20);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal((((x5389*x5392))+(((-1.0)*x5391*x5392))+(((-1.0)*x5389*x5390))+((x5390*x5391)))),IkReal(((((-1.0)*r22*x5391))+((r22*x5389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign((((x5387*x5388))+(((-1.0)*x5388*(r20*r20)))+(((2.0)*x5390*x5392))+(((-1.0)*(r22*r22)))+(((-1.0)*x5387)))),-1);
if(!x5394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5393.value)+(((1.5707963267949)*(x5394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5395=IKcos(j4);
IkReal x5396=IKsin(j4);
IkReal x5397=(r21*sj5);
IkReal x5398=(cj5*r20);
IkReal x5399=((1.0)*x5395);
evalcond[0]=(((r22*x5396))+(((-1.0)*x5398*x5399))+((x5395*x5397)));
evalcond[1]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5399))+(((-1.0)*x5396*x5398))+((x5396*x5397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5400=(cj4*cj5);
IkReal x5401=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x5400))+((r02*sj4))+((r01*x5401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5400))+(((-1.0)*r11*x5401))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5400))+((r02*sj4))+((r01*x5401))))+IKsqr((((r10*x5400))+(((-1.0)*r11*x5401))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x5400))+((r02*sj4))+((r01*x5401))), (((r10*x5400))+(((-1.0)*r11*x5401))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5402=IKcos(j0);
IkReal x5403=IKsin(j0);
IkReal x5404=((0.238)*sj2);
IkReal x5405=(r00*sj5);
IkReal x5406=((0.238)*cj2);
IkReal x5407=(cj5*r01);
IkReal x5408=((1.0)*sj2);
IkReal x5409=(r11*sj5);
IkReal x5410=(cj5*r11);
IkReal x5411=((1.0)*cj4);
IkReal x5412=(r01*sj5);
IkReal x5413=(r10*sj5);
IkReal x5414=(sj1*x5403);
IkReal x5415=(cj1*x5402);
IkReal x5416=(cj1*x5403);
IkReal x5417=(cj5*x5411);
IkReal x5418=(sj1*x5402);
IkReal x5419=((1.0)*cj5*sj4);
evalcond[0]=(x5402+(((-1.0)*r10*x5417))+((cj4*x5409))+((r12*sj4)));
evalcond[1]=((((-1.0)*r00*x5417))+(((-1.0)*x5403))+((r02*sj4))+((cj4*x5412)));
evalcond[2]=(((cj2*x5415))+x5407+x5405+(((-1.0)*x5408*x5418)));
evalcond[3]=(((cj2*x5416))+x5410+x5413+(((-1.0)*x5408*x5414)));
evalcond[4]=((((-1.0)*r00*x5419))+((cj2*x5418))+(((-1.0)*r02*x5411))+((sj4*x5412))+((sj2*x5415)));
evalcond[5]=(((cj2*x5414))+((sj4*x5409))+(((-1.0)*r10*x5419))+(((-1.0)*r12*x5411))+((sj2*x5416)));
evalcond[6]=((((0.265)*x5418))+(((-1.0)*px))+((x5404*x5415))+(((-0.095)*x5407))+(((-0.095)*x5405))+((x5406*x5418))+(((-0.113)*x5403)));
evalcond[7]=((((0.265)*x5414))+(((0.113)*x5402))+(((-0.095)*x5410))+(((-0.095)*x5413))+(((-1.0)*py))+((x5404*x5416))+((x5406*x5414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5420=((1.0)*cj5);
IkReal x5421=((1.0)*sj5);
CheckValue<IkReal> x5422 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5421))+(((-1.0)*r11*x5420)))),IkReal(((((-1.0)*r00*x5421))+(((-1.0)*r01*x5420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5422.valid){
continue;
}
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5423.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5422.value)+(((1.5707963267949)*(x5423.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5424=IKcos(j0);
IkReal x5425=IKsin(j0);
IkReal x5426=((0.238)*sj2);
IkReal x5427=((0.238)*cj2);
IkReal x5428=(cj5*r01);
IkReal x5429=((1.0)*sj2);
IkReal x5430=(r00*sj5);
IkReal x5431=(cj5*r11);
IkReal x5432=(r10*sj5);
IkReal x5433=(sj1*x5425);
IkReal x5434=(cj1*x5424);
IkReal x5435=(cj1*x5425);
IkReal x5436=(sj1*x5424);
evalcond[0]=(x5428+x5430+(((-1.0)*x5429*x5436))+((cj2*x5434)));
evalcond[1]=(x5432+x5431+(((-1.0)*x5429*x5433))+((cj2*x5435)));
evalcond[2]=((((-0.095)*x5428))+((x5426*x5434))+(((0.265)*x5436))+((x5427*x5436))+(((-1.0)*px))+(((-0.095)*x5430))+(((-0.113)*x5425)));
evalcond[3]=(((x5426*x5435))+(((0.265)*x5433))+((x5427*x5433))+(((-1.0)*py))+(((-0.095)*x5432))+(((-0.095)*x5431))+(((0.113)*x5424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5437=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5437;
j4eval[1]=IKsign(x5437);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5438=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5438;
j4eval[1]=IKsign(x5438);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5439=((1.0)*sj0);
IkReal x5440=((1.0)*cj0);
IkReal x5441=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5441;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x5439))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x5440)))))+(IKabs(((((-1.0)*r12*x5439))+(((-1.0)*r02*x5440))))));
j4eval[2]=IKsign(x5441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5442=((-1.0)*r20);
IkReal x5444 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5444)==0){
continue;
}
IkReal x5443=pow(x5444,-0.5);
CheckValue<IkReal> x5445 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5442),IKFAST_ATAN2_MAGTHRESH);
if(!x5445.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5445.value));
IkReal gconst115=(r21*x5443);
IkReal gconst116=(x5442*x5443);
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5447=((-1.0)*r20);
IkReal x5448=x5443;
CheckValue<IkReal> x5450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5447),IKFAST_ATAN2_MAGTHRESH);
if(!x5450.valid){
continue;
}
IkReal x5449=((-1.0)*(x5450.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5449;
IkReal gconst114=x5449;
IkReal gconst115=(r21*x5448);
IkReal gconst116=(x5447*x5448);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5451=((-1.0)*r20);
IkReal x5452=x5443;
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5451),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
IkReal x5453=((-1.0)*(x5454.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5453;
IkReal gconst114=x5453;
IkReal gconst115=(r21*x5452);
IkReal gconst116=(x5451*x5452);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5455=((-1.0)*r20);
IkReal x5456=x5443;
CheckValue<IkReal> x5458 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5455),IKFAST_ATAN2_MAGTHRESH);
if(!x5458.valid){
continue;
}
IkReal x5457=((-1.0)*(x5458.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5457;
IkReal gconst114=x5457;
IkReal gconst115=(r21*x5456);
IkReal gconst116=(x5455*x5456);
IkReal x5459=((1.0)*(r22*r22));
CheckValue<IkReal> x5463=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5459))),-1);
if(!x5463.valid){
continue;
}
IkReal x5460=x5463.value;
IkReal x5461=((1.0)*x5460);
IkReal x5462=((((-2.0)*x5460*(r20*r20)*(r21*r21)))+(((-1.0)*x5461*(r21*r21*r21*r21)))+(((-1.0)*x5459))+(((-1.0)*x5461*(r20*r20*r20*r20))));
j4eval[0]=x5462;
j4eval[1]=IKsign(x5462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5464=(sj1*sj2);
IkReal x5465=(gconst115*r21);
IkReal x5466=(cj1*cj2);
IkReal x5467=(gconst116*r20);
CheckValue<IkReal> x5468=IKPowWithIntegerCheck(IKsign(((((2.0)*x5465*x5467))+(((-1.0)*(x5467*x5467)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5465*x5465))))),-1);
if(!x5468.valid){
continue;
}
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal(((((-1.0)*x5466*x5467))+((x5465*x5466))+(((-1.0)*x5464*x5465))+((x5464*x5467)))),IkReal((((r22*x5464))+(((-1.0)*r22*x5466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5468.value)))+(x5469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5470=IKcos(j4);
IkReal x5471=IKsin(j4);
IkReal x5472=(cj2*sj1);
IkReal x5473=(gconst115*r21);
IkReal x5474=(cj1*sj2);
IkReal x5475=((1.0)*x5470);
IkReal x5476=(gconst115*x5470);
IkReal x5477=(gconst115*x5471);
IkReal x5478=((1.0)*gconst116*x5471);
evalcond[0]=((((-1.0)*gconst116*r20*x5475))+((x5470*x5473))+((r22*x5471)));
evalcond[1]=((((-1.0)*gconst116*r10*x5475))+cj0+((r12*x5471))+((r11*x5476)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5476))+(((-1.0)*gconst116*r00*x5475))+((r02*x5471)));
evalcond[3]=(((x5471*x5473))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5475))+((cj1*cj2))+(((-1.0)*r20*x5478)));
evalcond[4]=(((r01*x5477))+(((-1.0)*r00*x5478))+((cj0*x5472))+((cj0*x5474))+(((-1.0)*r02*x5475)));
evalcond[5]=(((sj0*x5472))+((sj0*x5474))+(((-1.0)*r10*x5478))+(((-1.0)*r12*x5475))+((r11*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5479 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5479.valid){
continue;
}
CheckValue<IkReal> x5480=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5479.value)+(((1.5707963267949)*(x5480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5481=IKcos(j4);
IkReal x5482=IKsin(j4);
IkReal x5483=(cj2*sj1);
IkReal x5484=(gconst115*r21);
IkReal x5485=(cj1*sj2);
IkReal x5486=((1.0)*x5481);
IkReal x5487=(gconst115*x5481);
IkReal x5488=(gconst115*x5482);
IkReal x5489=((1.0)*gconst116*x5482);
evalcond[0]=(((x5481*x5484))+(((-1.0)*gconst116*r20*x5486))+((r22*x5482)));
evalcond[1]=(cj0+((r11*x5487))+((r12*x5482))+(((-1.0)*gconst116*r10*x5486)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst116*r00*x5486))+((r01*x5487))+((r02*x5482)));
evalcond[3]=((((-1.0)*r20*x5489))+((x5482*x5484))+(((-1.0)*r22*x5486))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((cj0*x5485))+((cj0*x5483))+((r01*x5488))+(((-1.0)*r00*x5489))+(((-1.0)*r02*x5486)));
evalcond[5]=((((-1.0)*r10*x5489))+(((-1.0)*r12*x5486))+((r11*x5488))+((sj0*x5485))+((sj0*x5483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5490=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5490.value)))+(x5491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5492=IKcos(j4);
IkReal x5493=IKsin(j4);
IkReal x5494=(cj2*sj1);
IkReal x5495=(gconst115*r21);
IkReal x5496=(cj1*sj2);
IkReal x5497=((1.0)*x5492);
IkReal x5498=(gconst115*x5492);
IkReal x5499=(gconst115*x5493);
IkReal x5500=((1.0)*gconst116*x5493);
evalcond[0]=(((x5492*x5495))+(((-1.0)*gconst116*r20*x5497))+((r22*x5493)));
evalcond[1]=(cj0+((r12*x5493))+((r11*x5498))+(((-1.0)*gconst116*r10*x5497)));
evalcond[2]=((((-1.0)*gconst116*r00*x5497))+(((-1.0)*sj0))+((r01*x5498))+((r02*x5493)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5497))+((x5493*x5495))+(((-1.0)*r20*x5500))+((cj1*cj2)));
evalcond[4]=(((cj0*x5496))+((cj0*x5494))+((r01*x5499))+(((-1.0)*r00*x5500))+(((-1.0)*r02*x5497)));
evalcond[5]=((((-1.0)*r10*x5500))+(((-1.0)*r12*x5497))+((r11*x5499))+((sj0*x5494))+((sj0*x5496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5501=((-1.0)*r21);
IkReal x5503 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5503)==0){
continue;
}
IkReal x5502=pow(x5503,-0.5);
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal(x5501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5504.value))));
IkReal gconst118=(x5501*x5502);
IkReal gconst119=((1.0)*r20*x5502);
CheckValue<IkReal> x5505 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5505.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5505.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5506=((-1.0)*r21);
CheckValue<IkReal> x5509 = IKatan2WithCheck(IkReal(x5506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5509.valid){
continue;
}
IkReal x5507=((1.0)*(x5509.value));
IkReal x5508=x5502;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5507)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5507)));
IkReal gconst118=(x5506*x5508);
IkReal gconst119=((1.0)*r20*x5508);
IkReal x5510=r22*r22;
IkReal x5511=((1.0)*x5510);
CheckValue<IkReal> x5515=IKPowWithIntegerCheck(((-1.0)+x5510),-1);
if(!x5515.valid){
continue;
}
IkReal x5512=x5515.value;
if((((1.0)+(((-1.0)*x5511)))) < -0.00001)
continue;
IkReal x5513=IKsqrt(((1.0)+(((-1.0)*x5511))));
IkReal x5514=(cj0*x5512*x5513);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5514+(((-1.0)*x5511*x5514))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5516=((-1.0)*r21);
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal(x5516),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
IkReal x5517=((1.0)*(x5519.value));
IkReal x5518=x5502;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5517)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5517)));
IkReal gconst118=(x5516*x5518);
IkReal gconst119=((1.0)*r20*x5518);
IkReal x5520=r22*r22;
IkReal x5521=((1.0)*x5520);
CheckValue<IkReal> x5525=IKPowWithIntegerCheck(((-1.0)+x5520),-1);
if(!x5525.valid){
continue;
}
IkReal x5522=x5525.value;
if((((1.0)+(((-1.0)*x5521)))) < -0.00001)
continue;
IkReal x5523=IKsqrt(((1.0)+(((-1.0)*x5521))));
IkReal x5524=(sj0*x5522*x5523);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5524+(((-1.0)*x5521*x5524))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5526=((-1.0)*r21);
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal(x5526),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
IkReal x5527=((1.0)*(x5529.value));
IkReal x5528=x5502;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5527)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5527)));
IkReal gconst118=(x5526*x5528);
IkReal gconst119=((1.0)*r20*x5528);
IkReal x5530=r22*r22;
IkReal x5531=((1.0)*r12*sj0);
IkReal x5532=((1.0)*cj0*r02);
CheckValue<IkReal> x5536=IKPowWithIntegerCheck(((-1.0)+x5530),-1);
if(!x5536.valid){
continue;
}
IkReal x5533=x5536.value;
if((((1.0)+(((-1.0)*x5530)))) < -0.00001)
continue;
IkReal x5534=IKsqrt(((1.0)+(((-1.0)*x5530))));
IkReal x5535=(r22*x5533*x5534);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5531))+(((-1.0)*x5532)))))+(IKabs(((((-1.0)*x5531*x5535))+(((-1.0)*x5532*x5535))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5537=((1.0)*sj0);
IkReal x5538=((1.0)*gconst119);
CheckValue<IkReal> x5539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5538)))),-1);
if(!x5539.valid){
continue;
}
CheckValue<IkReal> x5540 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5538))+((gconst118*r11*sj0))+(((-1.0)*gconst119*r10*x5537))+((cj0*gconst118*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5539.value)))+(x5540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5541=IKcos(j4);
IkReal x5542=IKsin(j4);
IkReal x5543=(cj1*sj2);
IkReal x5544=(gconst118*r01);
IkReal x5545=(gconst119*r20);
IkReal x5546=(gconst119*r10);
IkReal x5547=(gconst119*r00);
IkReal x5548=(gconst118*r21);
IkReal x5549=(cj2*sj1);
IkReal x5550=(gconst118*r11);
IkReal x5551=((1.0)*x5541);
IkReal x5552=((1.0)*x5542);
evalcond[0]=((((-1.0)*x5545*x5551))+((x5541*x5548))+((r22*x5542)));
evalcond[1]=(((r12*x5542))+cj0+((x5541*x5550))+(((-1.0)*x5546*x5551)));
evalcond[2]=((((-1.0)*sj0))+((x5541*x5544))+((r02*x5542))+(((-1.0)*x5547*x5551)));
evalcond[3]=(((x5542*x5548))+(((-1.0)*x5545*x5552))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5551))+((cj1*cj2)));
evalcond[4]=(((x5542*x5544))+((cj0*x5549))+((cj0*x5543))+(((-1.0)*r02*x5551))+(((-1.0)*x5547*x5552)));
evalcond[5]=(((sj0*x5543))+((sj0*x5549))+(((-1.0)*r12*x5551))+(((-1.0)*x5546*x5552))+((x5542*x5550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5553=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5553.valid){
continue;
}
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5553.value)))+(x5554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5555=IKcos(j4);
IkReal x5556=IKsin(j4);
IkReal x5557=(cj1*sj2);
IkReal x5558=(gconst118*r01);
IkReal x5559=(gconst119*r20);
IkReal x5560=(gconst119*r10);
IkReal x5561=(gconst119*r00);
IkReal x5562=(gconst118*r21);
IkReal x5563=(cj2*sj1);
IkReal x5564=(gconst118*r11);
IkReal x5565=((1.0)*x5555);
IkReal x5566=((1.0)*x5556);
evalcond[0]=(((x5555*x5562))+((r22*x5556))+(((-1.0)*x5559*x5565)));
evalcond[1]=(cj0+((r12*x5556))+((x5555*x5564))+(((-1.0)*x5560*x5565)));
evalcond[2]=((((-1.0)*sj0))+((x5555*x5558))+((r02*x5556))+(((-1.0)*x5561*x5565)));
evalcond[3]=((((-1.0)*r22*x5565))+((x5556*x5562))+(((-1.0)*sj1*sj2))+(((-1.0)*x5559*x5566))+((cj1*cj2)));
evalcond[4]=(((cj0*x5563))+(((-1.0)*r02*x5565))+((cj0*x5557))+((x5556*x5558))+(((-1.0)*x5561*x5566)));
evalcond[5]=((((-1.0)*r12*x5565))+((x5556*x5564))+((sj0*x5557))+((sj0*x5563))+(((-1.0)*x5560*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5567=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5567.valid){
continue;
}
CheckValue<IkReal> x5568 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5567.value)))+(x5568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5569=IKcos(j4);
IkReal x5570=IKsin(j4);
IkReal x5571=(cj1*sj2);
IkReal x5572=(gconst118*r01);
IkReal x5573=(gconst119*r20);
IkReal x5574=(gconst119*r10);
IkReal x5575=(gconst119*r00);
IkReal x5576=(gconst118*r21);
IkReal x5577=(cj2*sj1);
IkReal x5578=(gconst118*r11);
IkReal x5579=((1.0)*x5569);
IkReal x5580=((1.0)*x5570);
evalcond[0]=(((x5569*x5576))+((r22*x5570))+(((-1.0)*x5573*x5579)));
evalcond[1]=(cj0+((x5569*x5578))+((r12*x5570))+(((-1.0)*x5574*x5579)));
evalcond[2]=(((r02*x5570))+(((-1.0)*sj0))+((x5569*x5572))+(((-1.0)*x5575*x5579)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5573*x5580))+((cj1*cj2))+(((-1.0)*r22*x5579))+((x5570*x5576)));
evalcond[4]=(((cj0*x5577))+((cj0*x5571))+(((-1.0)*r02*x5579))+(((-1.0)*x5575*x5580))+((x5570*x5572)));
evalcond[5]=((((-1.0)*r12*x5579))+(((-1.0)*x5574*x5580))+((sj0*x5577))+((sj0*x5571))+((x5570*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5582 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5582)==0){
continue;
}
IkReal x5581=pow(x5582,-0.5);
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5583.value));
IkReal gconst121=((-1.0)*r11*x5581);
IkReal gconst122=(r10*x5581);
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5585=((-1.0)*(x5587.value));
IkReal x5586=x5581;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5585;
IkReal gconst120=x5585;
IkReal gconst121=((-1.0)*r11*x5586);
IkReal gconst122=(r10*x5586);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5588=((1.0)*sj0);
IkReal x5589=((1.0)*cj0);
CheckValue<IkReal> x5590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x5590.valid){
continue;
}
CheckValue<IkReal> x5591 = IKatan2WithCheck(IkReal((((cj0*gconst121*r01))+(((-1.0)*gconst122*r00*x5589))+(((-1.0)*gconst122*r10*x5588))+((gconst121*r11*sj0)))),IkReal(((((-1.0)*r12*x5588))+(((-1.0)*r02*x5589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5590.value)))+(x5591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5592=IKcos(j4);
IkReal x5593=IKsin(j4);
IkReal x5594=(gconst121*r11);
IkReal x5595=(cj2*sj1);
IkReal x5596=(gconst122*r00);
IkReal x5597=(gconst122*r10);
IkReal x5598=(gconst122*r20);
IkReal x5599=(cj1*sj2);
IkReal x5600=((1.0)*x5592);
IkReal x5601=((1.0)*x5593);
IkReal x5602=(gconst121*x5593);
IkReal x5603=(gconst121*x5592);
evalcond[0]=(((r21*x5603))+(((-1.0)*x5598*x5600))+((r22*x5593)));
evalcond[1]=(cj0+(((-1.0)*x5597*x5600))+((x5592*x5594))+((r12*x5593)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5596*x5600))+((r02*x5593))+((r01*x5603)));
evalcond[3]=((((-1.0)*r22*x5600))+(((-1.0)*sj1*sj2))+((r21*x5602))+(((-1.0)*x5598*x5601))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5596*x5601))+((cj0*x5595))+((cj0*x5599))+((r01*x5602))+(((-1.0)*r02*x5600)));
evalcond[5]=((((-1.0)*x5597*x5601))+((sj0*x5599))+((sj0*x5595))+((x5593*x5594))+(((-1.0)*r12*x5600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5604 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5604.valid){
continue;
}
CheckValue<IkReal> x5605=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5604.value)+(((1.5707963267949)*(x5605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5606=IKcos(j4);
IkReal x5607=IKsin(j4);
IkReal x5608=(gconst121*r11);
IkReal x5609=(cj2*sj1);
IkReal x5610=(gconst122*r00);
IkReal x5611=(gconst122*r10);
IkReal x5612=(gconst122*r20);
IkReal x5613=(cj1*sj2);
IkReal x5614=((1.0)*x5606);
IkReal x5615=((1.0)*x5607);
IkReal x5616=(gconst121*x5607);
IkReal x5617=(gconst121*x5606);
evalcond[0]=((((-1.0)*x5612*x5614))+((r21*x5617))+((r22*x5607)));
evalcond[1]=(cj0+((r12*x5607))+((x5606*x5608))+(((-1.0)*x5611*x5614)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5607))+((r01*x5617))+(((-1.0)*x5610*x5614)));
evalcond[3]=((((-1.0)*x5612*x5615))+(((-1.0)*r22*x5614))+(((-1.0)*sj1*sj2))+((r21*x5616))+((cj1*cj2)));
evalcond[4]=(((cj0*x5613))+((r01*x5616))+(((-1.0)*r02*x5614))+(((-1.0)*x5610*x5615))+((cj0*x5609)));
evalcond[5]=(((sj0*x5613))+((sj0*x5609))+((x5607*x5608))+(((-1.0)*r12*x5614))+(((-1.0)*x5611*x5615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5619 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5619)==0){
continue;
}
IkReal x5618=pow(x5619,-0.5);
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5620.value))));
IkReal gconst124=((1.0)*r11*x5618);
IkReal gconst125=((-1.0)*r10*x5618);
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5621.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
IkReal x5622=((1.0)*(x5624.value));
IkReal x5623=x5618;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5622)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5622)));
IkReal gconst124=((1.0)*r11*x5623);
IkReal gconst125=((-1.0)*r10*x5623);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
IkReal x5625=((1.0)*(x5627.value));
IkReal x5626=x5618;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5625)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5625)));
IkReal gconst124=((1.0)*r11*x5626);
IkReal gconst125=((-1.0)*r10*x5626);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5630 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5630.valid){
continue;
}
IkReal x5628=((1.0)*(x5630.value));
IkReal x5629=x5618;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5628)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5628)));
IkReal gconst124=((1.0)*r11*x5629);
IkReal gconst125=((-1.0)*r10*x5629);
IkReal x5631=r12*r12;
IkReal x5632=((1.0)*sj0);
IkReal x5633=(cj0*r02);
IkReal x5634=x5618;
j4eval[0]=((IKabs(((((-1.0)*x5632*x5634))+((r12*x5633*x5634))+((sj0*x5631*x5634)))))+(IKabs(((((-1.0)*r12*x5632))+(((-1.0)*x5633))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5635=((1.0)*sj0);
IkReal x5636=((1.0)*gconst125);
CheckValue<IkReal> x5637 = IKatan2WithCheck(IkReal((((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5636))+(((-1.0)*gconst125*r10*x5635))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*r12*x5635))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5637.valid){
continue;
}
CheckValue<IkReal> x5638=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5636)))),-1);
if(!x5638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5637.value)+(((1.5707963267949)*(x5638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5639=IKcos(j4);
IkReal x5640=IKsin(j4);
IkReal x5641=(cj2*sj1);
IkReal x5642=(gconst125*r20);
IkReal x5643=(gconst124*r01);
IkReal x5644=(gconst125*r00);
IkReal x5645=(gconst125*r10);
IkReal x5646=(cj1*sj2);
IkReal x5647=((1.0)*x5639);
IkReal x5648=((1.0)*x5640);
IkReal x5649=(gconst124*x5640);
IkReal x5650=(gconst124*x5639);
evalcond[0]=((((-1.0)*x5642*x5647))+((r22*x5640))+((r21*x5650)));
evalcond[1]=(cj0+(((-1.0)*x5645*x5647))+((r12*x5640))+((r11*x5650)));
evalcond[2]=((((-1.0)*sj0))+((x5639*x5643))+(((-1.0)*x5644*x5647))+((r02*x5640)));
evalcond[3]=((((-1.0)*r22*x5647))+(((-1.0)*x5642*x5648))+(((-1.0)*sj1*sj2))+((r21*x5649))+((cj1*cj2)));
evalcond[4]=(((cj0*x5641))+((cj0*x5646))+(((-1.0)*x5644*x5648))+((x5640*x5643))+(((-1.0)*r02*x5647)));
evalcond[5]=((((-1.0)*r12*x5647))+(((-1.0)*x5645*x5648))+((sj0*x5641))+((sj0*x5646))+((r11*x5649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5651.valid){
continue;
}
CheckValue<IkReal> x5652 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5651.value)))+(x5652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5653=IKcos(j4);
IkReal x5654=IKsin(j4);
IkReal x5655=(cj2*sj1);
IkReal x5656=(gconst125*r20);
IkReal x5657=(gconst124*r01);
IkReal x5658=(gconst125*r00);
IkReal x5659=(gconst125*r10);
IkReal x5660=(cj1*sj2);
IkReal x5661=((1.0)*x5653);
IkReal x5662=((1.0)*x5654);
IkReal x5663=(gconst124*x5654);
IkReal x5664=(gconst124*x5653);
evalcond[0]=((((-1.0)*x5656*x5661))+((r22*x5654))+((r21*x5664)));
evalcond[1]=(cj0+(((-1.0)*x5659*x5661))+((r12*x5654))+((r11*x5664)));
evalcond[2]=((((-1.0)*sj0))+((x5653*x5657))+((r02*x5654))+(((-1.0)*x5658*x5661)));
evalcond[3]=((((-1.0)*r22*x5661))+(((-1.0)*sj1*sj2))+(((-1.0)*x5656*x5662))+((cj1*cj2))+((r21*x5663)));
evalcond[4]=(((cj0*x5655))+((x5654*x5657))+(((-1.0)*r02*x5661))+((cj0*x5660))+(((-1.0)*x5658*x5662)));
evalcond[5]=((((-1.0)*x5659*x5662))+((sj0*x5655))+((r11*x5663))+((sj0*x5660))+(((-1.0)*r12*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5665=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5665.valid){
continue;
}
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5665.value)))+(x5666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5667=IKcos(j4);
IkReal x5668=IKsin(j4);
IkReal x5669=(cj2*sj1);
IkReal x5670=(gconst125*r20);
IkReal x5671=(gconst124*r01);
IkReal x5672=(gconst125*r00);
IkReal x5673=(gconst125*r10);
IkReal x5674=(cj1*sj2);
IkReal x5675=((1.0)*x5667);
IkReal x5676=((1.0)*x5668);
IkReal x5677=(gconst124*x5668);
IkReal x5678=(gconst124*x5667);
evalcond[0]=(((r22*x5668))+(((-1.0)*x5670*x5675))+((r21*x5678)));
evalcond[1]=(cj0+((r11*x5678))+((r12*x5668))+(((-1.0)*x5673*x5675)));
evalcond[2]=((((-1.0)*x5672*x5675))+(((-1.0)*sj0))+((r02*x5668))+((x5667*x5671)));
evalcond[3]=((((-1.0)*x5670*x5676))+(((-1.0)*r22*x5675))+(((-1.0)*sj1*sj2))+((r21*x5677))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5672*x5676))+((x5668*x5671))+((cj0*x5674))+((cj0*x5669))+(((-1.0)*r02*x5675)));
evalcond[5]=((((-1.0)*r12*x5675))+((sj0*x5674))+((r11*x5677))+((sj0*x5669))+(((-1.0)*x5673*x5676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5679=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5679;
j4eval[1]=IKsign(x5679);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5680=((1.0)*cj5);
IkReal x5681=((((-1.0)*r21*x5680))+(((-1.0)*r20*sj5)));
j4eval[0]=x5681;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5680))))));
j4eval[2]=IKsign(x5681);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5682=cj5*cj5;
IkReal x5683=r11*r11;
IkReal x5684=(cj5*r10);
IkReal x5685=(r11*sj5);
IkReal x5686=((((2.0)*x5684*x5685))+(((-1.0)*x5682*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5683))+((x5682*x5683)));
j4eval[0]=x5686;
j4eval[1]=((IKabs(r12))+(IKabs((x5685+(((-1.0)*x5684))))));
j4eval[2]=IKsign(x5686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5687=cj5*cj5;
IkReal x5688=r11*r11;
IkReal x5689=(cj5*r10);
IkReal x5690=(r11*sj5);
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal(r12),IkReal((x5690+(((-1.0)*x5689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5687*(r10*r10)))+((x5687*x5688))+(((2.0)*x5689*x5690))+(((-1.0)*(r12*r12)))+(((-1.0)*x5688)))),-1);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5691.value)+(((1.5707963267949)*(x5692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKcos(j4);
IkReal x5694=IKsin(j4);
IkReal x5695=(cj5*r00);
IkReal x5696=(cj5*r10);
IkReal x5697=(cj5*r20);
IkReal x5698=((1.0)*x5693);
IkReal x5699=((1.0)*x5694);
IkReal x5700=(sj5*x5693);
IkReal x5701=(sj5*x5694);
evalcond[0]=(((r22*x5694))+((r21*x5700))+(((-1.0)*x5697*x5698)));
evalcond[1]=(((r02*x5694))+((r01*x5700))+(((-1.0)*x5695*x5698)));
evalcond[2]=((1.0)+(((-1.0)*x5696*x5698))+((r11*x5700))+((r12*x5694)));
evalcond[3]=((((-1.0)*x5696*x5699))+((r11*x5701))+(((-1.0)*r12*x5698)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x5698))+((cj1*sj2))+((r01*x5701))+(((-1.0)*x5695*x5699)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5698))+((r21*x5701))+(((-1.0)*x5697*x5699))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5702=((1.0)*cj5);
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5702))+(((-1.0)*r20*sj5)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5702)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5705=IKcos(j4);
IkReal x5706=IKsin(j4);
IkReal x5707=(cj5*r00);
IkReal x5708=(cj5*r10);
IkReal x5709=(cj5*r20);
IkReal x5710=((1.0)*x5705);
IkReal x5711=((1.0)*x5706);
IkReal x5712=(sj5*x5705);
IkReal x5713=(sj5*x5706);
evalcond[0]=((((-1.0)*x5709*x5710))+((r22*x5706))+((r21*x5712)));
evalcond[1]=(((r02*x5706))+(((-1.0)*x5707*x5710))+((r01*x5712)));
evalcond[2]=((1.0)+(((-1.0)*x5708*x5710))+((r12*x5706))+((r11*x5712)));
evalcond[3]=((((-1.0)*x5708*x5711))+((r11*x5713))+(((-1.0)*r12*x5710)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5707*x5711))+((r01*x5713))+(((-1.0)*r02*x5710)));
evalcond[5]=((((-1.0)*r22*x5710))+(((-1.0)*sj1*sj2))+(((-1.0)*x5709*x5711))+((cj1*cj2))+((r21*x5713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5714=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5714.valid){
continue;
}
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5714.value)))+(x5715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5716=IKcos(j4);
IkReal x5717=IKsin(j4);
IkReal x5718=(cj5*r00);
IkReal x5719=(cj5*r10);
IkReal x5720=(cj5*r20);
IkReal x5721=((1.0)*x5716);
IkReal x5722=((1.0)*x5717);
IkReal x5723=(sj5*x5716);
IkReal x5724=(sj5*x5717);
evalcond[0]=(((r21*x5723))+((r22*x5717))+(((-1.0)*x5720*x5721)));
evalcond[1]=(((r02*x5717))+((r01*x5723))+(((-1.0)*x5718*x5721)));
evalcond[2]=((1.0)+((r11*x5723))+(((-1.0)*x5719*x5721))+((r12*x5717)));
evalcond[3]=(((r11*x5724))+(((-1.0)*r12*x5721))+(((-1.0)*x5719*x5722)));
evalcond[4]=(((cj2*sj1))+((r01*x5724))+((cj1*sj2))+(((-1.0)*r02*x5721))+(((-1.0)*x5718*x5722)));
evalcond[5]=(((r21*x5724))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5721))+((cj1*cj2))+(((-1.0)*x5720*x5722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5725=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5725;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5726=((1.0)*cj5);
IkReal x5727=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5726)));
j4eval[0]=x5727;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5726))+((r21*sj5))))));
j4eval[2]=IKsign(x5727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5728=cj5*cj5;
IkReal x5729=r11*r11;
IkReal x5730=(r11*sj5);
IkReal x5731=(cj5*r10);
IkReal x5732=((((-2.0)*x5730*x5731))+(((-1.0)*x5728*x5729))+(r12*r12)+((x5728*(r10*r10)))+x5729);
j4eval[0]=x5732;
j4eval[1]=((IKabs(((((-1.0)*x5731))+x5730)))+(IKabs(r12)));
j4eval[2]=IKsign(x5732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5733=cj5*cj5;
IkReal x5734=r11*r11;
IkReal x5735=(cj5*r10);
IkReal x5736=(r11*sj5);
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5733*(r10*r10)))+(((-2.0)*x5735*x5736))+(((-1.0)*x5733*x5734))+x5734)),-1);
if(!x5737.valid){
continue;
}
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5735))+x5736)),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5737.value)))+(x5738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5739=IKcos(j4);
IkReal x5740=IKsin(j4);
IkReal x5741=(cj5*r00);
IkReal x5742=(cj5*r10);
IkReal x5743=((1.0)*sj1);
IkReal x5744=(cj5*r20);
IkReal x5745=((1.0)*x5739);
IkReal x5746=((1.0)*x5740);
IkReal x5747=(sj5*x5739);
IkReal x5748=(sj5*x5740);
evalcond[0]=(((r22*x5740))+(((-1.0)*x5744*x5745))+((r21*x5747)));
evalcond[1]=(((r01*x5747))+(((-1.0)*x5741*x5745))+((r02*x5740)));
evalcond[2]=((-1.0)+((r11*x5747))+(((-1.0)*x5742*x5745))+((r12*x5740)));
evalcond[3]=(((r11*x5748))+(((-1.0)*x5742*x5746))+(((-1.0)*r12*x5745)));
evalcond[4]=((((-1.0)*r22*x5745))+((cj1*cj2))+(((-1.0)*x5744*x5746))+((r21*x5748))+(((-1.0)*sj2*x5743)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x5748))+(((-1.0)*r02*x5745))+(((-1.0)*x5741*x5746))+(((-1.0)*cj2*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5749=((1.0)*cj5);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5749)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5749))+(((-1.0)*r00*sj5)))),-1);
if(!x5751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5750.value)+(((1.5707963267949)*(x5751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5752=IKcos(j4);
IkReal x5753=IKsin(j4);
IkReal x5754=(cj5*r00);
IkReal x5755=(cj5*r10);
IkReal x5756=((1.0)*sj1);
IkReal x5757=(cj5*r20);
IkReal x5758=((1.0)*x5752);
IkReal x5759=((1.0)*x5753);
IkReal x5760=(sj5*x5752);
IkReal x5761=(sj5*x5753);
evalcond[0]=(((r21*x5760))+(((-1.0)*x5757*x5758))+((r22*x5753)));
evalcond[1]=(((r01*x5760))+((r02*x5753))+(((-1.0)*x5754*x5758)));
evalcond[2]=((-1.0)+((r11*x5760))+(((-1.0)*x5755*x5758))+((r12*x5753)));
evalcond[3]=((((-1.0)*r12*x5758))+((r11*x5761))+(((-1.0)*x5755*x5759)));
evalcond[4]=((((-1.0)*r22*x5758))+((r21*x5761))+(((-1.0)*sj2*x5756))+((cj1*cj2))+(((-1.0)*x5757*x5759)));
evalcond[5]=(((r01*x5761))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x5758))+(((-1.0)*x5754*x5759))+(((-1.0)*cj2*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5762=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5762.valid){
continue;
}
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5762.value)))+(x5763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5764=IKcos(j4);
IkReal x5765=IKsin(j4);
IkReal x5766=(cj5*r00);
IkReal x5767=(cj5*r10);
IkReal x5768=((1.0)*sj1);
IkReal x5769=(cj5*r20);
IkReal x5770=((1.0)*x5764);
IkReal x5771=((1.0)*x5765);
IkReal x5772=(sj5*x5764);
IkReal x5773=(sj5*x5765);
evalcond[0]=((((-1.0)*x5769*x5770))+((r22*x5765))+((r21*x5772)));
evalcond[1]=((((-1.0)*x5766*x5770))+((r01*x5772))+((r02*x5765)));
evalcond[2]=((-1.0)+(((-1.0)*x5767*x5770))+((r11*x5772))+((r12*x5765)));
evalcond[3]=((((-1.0)*x5767*x5771))+(((-1.0)*r12*x5770))+((r11*x5773)));
evalcond[4]=((((-1.0)*x5769*x5771))+(((-1.0)*sj2*x5768))+((r21*x5773))+(((-1.0)*r22*x5770))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x5766*x5771))+((r01*x5773))+(((-1.0)*cj2*x5768))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x5770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5775 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5775)==0){
continue;
}
IkReal x5774=pow(x5775,-0.5);
CheckValue<IkReal> x5776 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5776.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5776.value));
IkReal gconst127=((-1.0)*r01*x5774);
IkReal gconst128=(r00*x5774);
CheckValue<IkReal> x5777 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5777.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5777.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
IkReal x5778=((-1.0)*(x5780.value));
IkReal x5779=x5774;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5778;
IkReal gconst126=x5778;
IkReal gconst127=((-1.0)*r01*x5779);
IkReal gconst128=(r00*x5779);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5781=((1.0)*sj0);
IkReal x5782=((1.0)*gconst128);
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r10*x5781))+(((-1.0)*cj0*r00*x5782))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
CheckValue<IkReal> x5784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5782)))),-1);
if(!x5784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5783.value)+(((1.5707963267949)*(x5784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5785=IKcos(j4);
IkReal x5786=IKsin(j4);
IkReal x5787=(gconst127*r01);
IkReal x5788=(cj2*sj1);
IkReal x5789=(gconst128*r10);
IkReal x5790=(gconst128*r00);
IkReal x5791=(gconst128*r20);
IkReal x5792=(cj1*sj2);
IkReal x5793=((1.0)*x5785);
IkReal x5794=((1.0)*x5786);
IkReal x5795=(gconst127*x5785);
IkReal x5796=(gconst127*x5786);
evalcond[0]=(((r21*x5795))+(((-1.0)*x5791*x5793))+((r22*x5786)));
evalcond[1]=(cj0+((r12*x5786))+((r11*x5795))+(((-1.0)*x5789*x5793)));
evalcond[2]=((((-1.0)*sj0))+((x5785*x5787))+(((-1.0)*x5790*x5793))+((r02*x5786)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x5796))+(((-1.0)*x5791*x5794))+(((-1.0)*r22*x5793))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5790*x5794))+((cj0*x5792))+(((-1.0)*r02*x5793))+((x5786*x5787))+((cj0*x5788)));
evalcond[5]=(((r11*x5796))+(((-1.0)*x5789*x5794))+((sj0*x5792))+((sj0*x5788))+(((-1.0)*r12*x5793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5797.value)))+(x5798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKcos(j4);
IkReal x5800=IKsin(j4);
IkReal x5801=(gconst127*r01);
IkReal x5802=(cj2*sj1);
IkReal x5803=(gconst128*r10);
IkReal x5804=(gconst128*r00);
IkReal x5805=(gconst128*r20);
IkReal x5806=(cj1*sj2);
IkReal x5807=((1.0)*x5799);
IkReal x5808=((1.0)*x5800);
IkReal x5809=(gconst127*x5799);
IkReal x5810=(gconst127*x5800);
evalcond[0]=(((r21*x5809))+(((-1.0)*x5805*x5807))+((r22*x5800)));
evalcond[1]=(cj0+((r11*x5809))+(((-1.0)*x5803*x5807))+((r12*x5800)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5804*x5807))+((x5799*x5801))+((r02*x5800)));
evalcond[3]=(((r21*x5810))+(((-1.0)*r22*x5807))+(((-1.0)*sj1*sj2))+(((-1.0)*x5805*x5808))+((cj1*cj2)));
evalcond[4]=(((x5800*x5801))+(((-1.0)*x5804*x5808))+((cj0*x5802))+((cj0*x5806))+(((-1.0)*r02*x5807)));
evalcond[5]=((((-1.0)*r12*x5807))+((r11*x5810))+(((-1.0)*x5803*x5808))+((sj0*x5802))+((sj0*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5812 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5812)==0){
continue;
}
IkReal x5811=pow(x5812,-0.5);
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5813.value))));
IkReal gconst130=((1.0)*r01*x5811);
IkReal gconst131=((-1.0)*r00*x5811);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5817 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5817.valid){
continue;
}
IkReal x5815=((1.0)*(x5817.value));
IkReal x5816=x5811;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5815)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5815)));
IkReal gconst130=((1.0)*r01*x5816);
IkReal gconst131=((-1.0)*r00*x5816);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
IkReal x5818=((1.0)*(x5820.value));
IkReal x5819=x5811;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5818)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5818)));
IkReal gconst130=((1.0)*r01*x5819);
IkReal gconst131=((-1.0)*r00*x5819);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
IkReal x5821=((1.0)*(x5823.value));
IkReal x5822=x5811;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5821)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5821)));
IkReal gconst130=((1.0)*r01*x5822);
IkReal gconst131=((-1.0)*r00*x5822);
IkReal x5824=r02*r02;
IkReal x5825=(r12*sj0);
IkReal x5826=((1.0)*cj0);
IkReal x5827=x5811;
j4eval[0]=((IKabs(((((-1.0)*r02*x5826))+(((-1.0)*x5825)))))+(IKabs((((cj0*x5824*x5827))+((r02*x5825*x5827))+(((-1.0)*x5826*x5827))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5828=((1.0)*sj0);
IkReal x5829=((1.0)*gconst131);
CheckValue<IkReal> x5830=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5829))+(((-1.0)*gconst130*r20)))),-1);
if(!x5830.valid){
continue;
}
CheckValue<IkReal> x5831 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r10*x5828))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5829)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5830.value)))+(x5831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5832=IKcos(j4);
IkReal x5833=IKsin(j4);
IkReal x5834=(gconst131*r10);
IkReal x5835=(gconst130*r11);
IkReal x5836=(gconst131*r20);
IkReal x5837=(cj2*sj1);
IkReal x5838=(gconst131*r00);
IkReal x5839=(cj1*sj2);
IkReal x5840=((1.0)*x5832);
IkReal x5841=((1.0)*x5833);
IkReal x5842=(gconst130*x5832);
IkReal x5843=(gconst130*x5833);
evalcond[0]=(((r21*x5842))+(((-1.0)*x5836*x5840))+((r22*x5833)));
evalcond[1]=((((-1.0)*x5834*x5840))+cj0+((x5832*x5835))+((r12*x5833)));
evalcond[2]=(((r02*x5833))+(((-1.0)*sj0))+((r01*x5842))+(((-1.0)*x5838*x5840)));
evalcond[3]=(((r21*x5843))+(((-1.0)*sj1*sj2))+(((-1.0)*x5836*x5841))+((cj1*cj2))+(((-1.0)*r22*x5840)));
evalcond[4]=((((-1.0)*r02*x5840))+((r01*x5843))+(((-1.0)*x5838*x5841))+((cj0*x5837))+((cj0*x5839)));
evalcond[5]=((((-1.0)*x5834*x5841))+((x5833*x5835))+((sj0*x5839))+((sj0*x5837))+(((-1.0)*r12*x5840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5844 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5844.value)+(((1.5707963267949)*(x5845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5846=IKcos(j4);
IkReal x5847=IKsin(j4);
IkReal x5848=(gconst131*r10);
IkReal x5849=(gconst130*r11);
IkReal x5850=(gconst131*r20);
IkReal x5851=(cj2*sj1);
IkReal x5852=(gconst131*r00);
IkReal x5853=(cj1*sj2);
IkReal x5854=((1.0)*x5846);
IkReal x5855=((1.0)*x5847);
IkReal x5856=(gconst130*x5846);
IkReal x5857=(gconst130*x5847);
evalcond[0]=(((r22*x5847))+((r21*x5856))+(((-1.0)*x5850*x5854)));
evalcond[1]=(cj0+((x5846*x5849))+((r12*x5847))+(((-1.0)*x5848*x5854)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5856))+(((-1.0)*x5852*x5854))+((r02*x5847)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5854))+((r21*x5857))+(((-1.0)*x5850*x5855))+((cj1*cj2)));
evalcond[4]=(((r01*x5857))+(((-1.0)*x5852*x5855))+(((-1.0)*r02*x5854))+((cj0*x5851))+((cj0*x5853)));
evalcond[5]=((((-1.0)*r12*x5854))+(((-1.0)*x5848*x5855))+((x5847*x5849))+((sj0*x5851))+((sj0*x5853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5858.valid){
continue;
}
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5858.value)))+(x5859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5860=IKcos(j4);
IkReal x5861=IKsin(j4);
IkReal x5862=(gconst131*r10);
IkReal x5863=(gconst130*r11);
IkReal x5864=(gconst131*r20);
IkReal x5865=(cj2*sj1);
IkReal x5866=(gconst131*r00);
IkReal x5867=(cj1*sj2);
IkReal x5868=((1.0)*x5860);
IkReal x5869=((1.0)*x5861);
IkReal x5870=(gconst130*x5860);
IkReal x5871=(gconst130*x5861);
evalcond[0]=(((r22*x5861))+(((-1.0)*x5864*x5868))+((r21*x5870)));
evalcond[1]=(((x5860*x5863))+cj0+(((-1.0)*x5862*x5868))+((r12*x5861)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5866*x5868))+((r02*x5861))+((r01*x5870)));
evalcond[3]=((((-1.0)*r22*x5868))+(((-1.0)*sj1*sj2))+(((-1.0)*x5864*x5869))+((cj1*cj2))+((r21*x5871)));
evalcond[4]=((((-1.0)*x5866*x5869))+(((-1.0)*r02*x5868))+((cj0*x5867))+((cj0*x5865))+((r01*x5871)));
evalcond[5]=(((x5861*x5863))+(((-1.0)*x5862*x5869))+((sj0*x5867))+((sj0*x5865))+(((-1.0)*r12*x5868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5872=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5872;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5873=((1.0)*cj5);
IkReal x5874=((((-1.0)*r21*x5873))+(((-1.0)*r20*sj5)));
j4eval[0]=x5874;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5873)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5875=cj5*cj5;
IkReal x5876=r01*r01;
IkReal x5877=(cj5*r00);
IkReal x5878=(r01*sj5);
IkReal x5879=((((-2.0)*x5877*x5878))+((x5875*(r00*r00)))+(((-1.0)*x5875*x5876))+(r02*r02)+x5876);
j4eval[0]=x5879;
j4eval[1]=IKsign(x5879);
j4eval[2]=((IKabs((x5878+(((-1.0)*x5877)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5880=cj5*cj5;
IkReal x5881=r01*r01;
IkReal x5882=(r01*sj5);
IkReal x5883=(cj5*r00);
CheckValue<IkReal> x5884 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5883))+x5882)),IKFAST_ATAN2_MAGTHRESH);
if(!x5884.valid){
continue;
}
CheckValue<IkReal> x5885=IKPowWithIntegerCheck(IKsign((((x5880*(r00*r00)))+(((-2.0)*x5882*x5883))+(((-1.0)*x5880*x5881))+(r02*r02)+x5881)),-1);
if(!x5885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5884.value)+(((1.5707963267949)*(x5885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5886=IKcos(j4);
IkReal x5887=IKsin(j4);
IkReal x5888=(cj5*r00);
IkReal x5889=(cj5*r10);
IkReal x5890=(cj5*r20);
IkReal x5891=((1.0)*x5886);
IkReal x5892=((1.0)*x5887);
IkReal x5893=(sj5*x5886);
IkReal x5894=(sj5*x5887);
evalcond[0]=(((r21*x5893))+(((-1.0)*x5890*x5891))+((r22*x5887)));
evalcond[1]=((((-1.0)*x5889*x5891))+((r12*x5887))+((r11*x5893)));
evalcond[2]=((-1.0)+((r01*x5893))+(((-1.0)*x5888*x5891))+((r02*x5887)));
evalcond[3]=((((-1.0)*r02*x5891))+((r01*x5894))+(((-1.0)*x5888*x5892)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5889*x5892))+(((-1.0)*r12*x5891))+((cj1*sj2))+((r11*x5894)));
evalcond[5]=(((r21*x5894))+(((-1.0)*r22*x5891))+(((-1.0)*sj1*sj2))+(((-1.0)*x5890*x5892))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5895=((1.0)*cj5);
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5895))+(((-1.0)*r20*sj5)))),-1);
if(!x5896.valid){
continue;
}
CheckValue<IkReal> x5897 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5895))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5896.value)))+(x5897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5898=IKcos(j4);
IkReal x5899=IKsin(j4);
IkReal x5900=(cj5*r00);
IkReal x5901=(cj5*r10);
IkReal x5902=(cj5*r20);
IkReal x5903=((1.0)*x5898);
IkReal x5904=((1.0)*x5899);
IkReal x5905=(sj5*x5898);
IkReal x5906=(sj5*x5899);
evalcond[0]=(((r22*x5899))+(((-1.0)*x5902*x5903))+((r21*x5905)));
evalcond[1]=((((-1.0)*x5901*x5903))+((r12*x5899))+((r11*x5905)));
evalcond[2]=((-1.0)+((r02*x5899))+(((-1.0)*x5900*x5903))+((r01*x5905)));
evalcond[3]=((((-1.0)*r02*x5903))+(((-1.0)*x5900*x5904))+((r01*x5906)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5903))+((cj1*sj2))+(((-1.0)*x5901*x5904))+((r11*x5906)));
evalcond[5]=((((-1.0)*x5902*x5904))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5903))+((cj1*cj2))+((r21*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5907 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5907.valid){
continue;
}
CheckValue<IkReal> x5908=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5907.value)+(((1.5707963267949)*(x5908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5909=IKcos(j4);
IkReal x5910=IKsin(j4);
IkReal x5911=(cj5*r00);
IkReal x5912=(cj5*r10);
IkReal x5913=(cj5*r20);
IkReal x5914=((1.0)*x5909);
IkReal x5915=((1.0)*x5910);
IkReal x5916=(sj5*x5909);
IkReal x5917=(sj5*x5910);
evalcond[0]=(((r22*x5910))+(((-1.0)*x5913*x5914))+((r21*x5916)));
evalcond[1]=(((r12*x5910))+(((-1.0)*x5912*x5914))+((r11*x5916)));
evalcond[2]=((-1.0)+((r01*x5916))+((r02*x5910))+(((-1.0)*x5911*x5914)));
evalcond[3]=(((r01*x5917))+(((-1.0)*r02*x5914))+(((-1.0)*x5911*x5915)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5914))+((cj1*sj2))+(((-1.0)*x5912*x5915))+((r11*x5917)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5914))+(((-1.0)*x5913*x5915))+((cj1*cj2))+((r21*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5918=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5918;
j4eval[1]=IKsign(x5918);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5919=((1.0)*cj5);
IkReal x5920=((((-1.0)*r11*x5919))+(((-1.0)*r10*sj5)));
j4eval[0]=x5920;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5919))))));
j4eval[2]=IKsign(x5920);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5921=cj5*cj5;
IkReal x5922=r01*r01;
IkReal x5923=(r01*sj5);
IkReal x5924=(cj5*r00);
IkReal x5925=(((x5921*x5922))+(((-1.0)*x5922))+(((-1.0)*x5921*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x5923*x5924)));
j4eval[0]=x5925;
j4eval[1]=IKsign(x5925);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5924))+x5923))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5926=cj5*cj5;
IkReal x5927=r01*r01;
IkReal x5928=(r01*sj5);
IkReal x5929=(cj5*r00);
CheckValue<IkReal> x5930 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5929))+x5928)),IKFAST_ATAN2_MAGTHRESH);
if(!x5930.valid){
continue;
}
CheckValue<IkReal> x5931=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5927))+(((-1.0)*(r02*r02)))+((x5926*x5927))+(((-1.0)*x5926*(r00*r00)))+(((2.0)*x5928*x5929)))),-1);
if(!x5931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5930.value)+(((1.5707963267949)*(x5931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5932=IKcos(j4);
IkReal x5933=IKsin(j4);
IkReal x5934=(cj5*r00);
IkReal x5935=(cj5*r10);
IkReal x5936=((1.0)*sj1);
IkReal x5937=(cj5*r20);
IkReal x5938=((1.0)*x5932);
IkReal x5939=((1.0)*x5933);
IkReal x5940=(sj5*x5932);
IkReal x5941=(sj5*x5933);
evalcond[0]=(((r22*x5933))+((r21*x5940))+(((-1.0)*x5937*x5938)));
evalcond[1]=(((r12*x5933))+(((-1.0)*x5935*x5938))+((r11*x5940)));
evalcond[2]=((1.0)+(((-1.0)*x5934*x5938))+((r01*x5940))+((r02*x5933)));
evalcond[3]=((((-1.0)*x5934*x5939))+(((-1.0)*r02*x5938))+((r01*x5941)));
evalcond[4]=(((r21*x5941))+(((-1.0)*x5937*x5939))+(((-1.0)*sj2*x5936))+((cj1*cj2))+(((-1.0)*r22*x5938)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x5935*x5939))+(((-1.0)*r12*x5938))+((r11*x5941))+(((-1.0)*cj2*x5936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5942=((1.0)*cj5);
CheckValue<IkReal> x5943 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5942)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5943.valid){
continue;
}
CheckValue<IkReal> x5944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5942)))),-1);
if(!x5944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5943.value)+(((1.5707963267949)*(x5944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5945=IKcos(j4);
IkReal x5946=IKsin(j4);
IkReal x5947=(cj5*r00);
IkReal x5948=(cj5*r10);
IkReal x5949=((1.0)*sj1);
IkReal x5950=(cj5*r20);
IkReal x5951=((1.0)*x5945);
IkReal x5952=((1.0)*x5946);
IkReal x5953=(sj5*x5945);
IkReal x5954=(sj5*x5946);
evalcond[0]=(((r21*x5953))+((r22*x5946))+(((-1.0)*x5950*x5951)));
evalcond[1]=(((r11*x5953))+(((-1.0)*x5948*x5951))+((r12*x5946)));
evalcond[2]=((1.0)+(((-1.0)*x5947*x5951))+((r02*x5946))+((r01*x5953)));
evalcond[3]=((((-1.0)*x5947*x5952))+(((-1.0)*r02*x5951))+((r01*x5954)));
evalcond[4]=(((r21*x5954))+(((-1.0)*r22*x5951))+(((-1.0)*sj2*x5949))+(((-1.0)*x5950*x5952))+((cj1*cj2)));
evalcond[5]=(((r11*x5954))+(((-1.0)*cj1*sj2))+(((-1.0)*x5948*x5952))+(((-1.0)*r12*x5951))+(((-1.0)*cj2*x5949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5955=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5955.valid){
continue;
}
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5955.value)))+(x5956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5957=IKcos(j4);
IkReal x5958=IKsin(j4);
IkReal x5959=(cj5*r00);
IkReal x5960=(cj5*r10);
IkReal x5961=((1.0)*sj1);
IkReal x5962=(cj5*r20);
IkReal x5963=((1.0)*x5957);
IkReal x5964=((1.0)*x5958);
IkReal x5965=(sj5*x5957);
IkReal x5966=(sj5*x5958);
evalcond[0]=(((r21*x5965))+((r22*x5958))+(((-1.0)*x5962*x5963)));
evalcond[1]=((((-1.0)*x5960*x5963))+((r12*x5958))+((r11*x5965)));
evalcond[2]=((1.0)+((r01*x5965))+((r02*x5958))+(((-1.0)*x5959*x5963)));
evalcond[3]=(((r01*x5966))+(((-1.0)*r02*x5963))+(((-1.0)*x5959*x5964)));
evalcond[4]=((((-1.0)*r22*x5963))+((r21*x5966))+(((-1.0)*sj2*x5961))+((cj1*cj2))+(((-1.0)*x5962*x5964)));
evalcond[5]=((((-1.0)*cj2*x5961))+(((-1.0)*x5960*x5964))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5963))+((r11*x5966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5967=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5967);
rxp1_1=(px*r21);
rxp1_2=(r11*x5967);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5968=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5968);
rxp1_1=(px*r21);
rxp1_2=(r11*x5968);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5969=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5969);
rxp1_1=(px*r21);
rxp1_2=(r11*x5969);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5972=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5972.valid){
continue;
}
IkReal x5970=x5972.value;
IkReal x5971=((1.0)*sj0*x5970);
sj4array[0]=((((-1.0)*cj2*sj1*x5971))+(((-1.0)*cj1*sj2*x5971)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5973=IKcos(j4);
IkReal x5974=IKsin(j4);
IkReal x5975=(r21*sj5);
IkReal x5976=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5973);
evalcond[1]=((((-1.0)*sj0))+((r02*x5974)));
evalcond[2]=(((x5973*x5975))+(((-1.0)*x5973*x5976)));
evalcond[3]=((((-1.0)*cj5*r10*x5973))+((r11*sj5*x5973)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5974*x5976))+((x5974*x5975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5978=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5978.valid){
continue;
}
IkReal x5977=x5978.value;
sj4array[0]=(((sj1*sj2*x5977))+(((-1.0)*cj1*cj2*x5977)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5979=IKcos(j4);
IkReal x5980=IKsin(j4);
IkReal x5981=((1.0)*cj5);
IkReal x5982=(sj5*x5979);
evalcond[0]=((-1.0)*r02*x5979);
evalcond[1]=((((-1.0)*sj0))+((r02*x5980)));
evalcond[2]=(((r21*x5982))+(((-1.0)*r20*x5979*x5981)));
evalcond[3]=(((r11*x5982))+(((-1.0)*r10*x5979*x5981)));
evalcond[4]=(((r11*sj5*x5980))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r10*x5980*x5981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5983=IKPowWithIntegerCheck(r02,-1);
if(!x5983.valid){
continue;
}
sj4array[0]=(sj0*(x5983.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5984=IKcos(j4);
IkReal x5985=IKsin(j4);
IkReal x5986=(r21*sj5);
IkReal x5987=(r11*sj5);
IkReal x5988=((1.0)*cj5*x5985);
IkReal x5989=((1.0)*cj5*x5984);
evalcond[0]=((-1.0)*r02*x5984);
evalcond[1]=((((-1.0)*r20*x5989))+((x5984*x5986)));
evalcond[2]=((((-1.0)*r10*x5989))+((x5984*x5987)));
evalcond[3]=(((x5985*x5986))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r20*x5988)));
evalcond[4]=(((x5985*x5987))+(((-1.0)*r10*x5988))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5990=((1.0)*sj0);
IkReal x5991=((1.0)*cj0);
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5992.valid){
continue;
}
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x5990))+((r11*sj0*sj5))+(((-1.0)*cj5*r00*x5991))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r12*x5990))+(((-1.0)*r02*x5991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5992.value)))+(x5993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5994=IKcos(j4);
IkReal x5995=IKsin(j4);
IkReal x5996=(cj5*r00);
IkReal x5997=(cj5*r10);
IkReal x5998=(cj2*sj1);
IkReal x5999=(cj5*r20);
IkReal x6000=(cj1*sj2);
IkReal x6001=((1.0)*x5994);
IkReal x6002=((1.0)*x5995);
IkReal x6003=(sj5*x5994);
IkReal x6004=(sj5*x5995);
evalcond[0]=(((r21*x6003))+(((-1.0)*x5999*x6001))+((r22*x5995)));
evalcond[1]=(((r12*x5995))+cj0+((r11*x6003))+(((-1.0)*x5997*x6001)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5995))+(((-1.0)*x5996*x6001))+((r01*x6003)));
evalcond[3]=(((r21*x6004))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x6001))+((cj1*cj2))+(((-1.0)*x5999*x6002)));
evalcond[4]=(((cj0*x6000))+(((-1.0)*x5996*x6002))+((cj0*x5998))+((r01*x6004))+(((-1.0)*r02*x6001)));
evalcond[5]=(((sj0*x5998))+((r11*x6004))+(((-1.0)*r12*x6001))+(((-1.0)*x5997*x6002))+((sj0*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
CheckValue<IkReal> x6006=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6005.value)+(((1.5707963267949)*(x6006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6007=IKcos(j4);
IkReal x6008=IKsin(j4);
IkReal x6009=(cj5*r00);
IkReal x6010=(cj5*r10);
IkReal x6011=(cj2*sj1);
IkReal x6012=(cj5*r20);
IkReal x6013=(cj1*sj2);
IkReal x6014=((1.0)*x6007);
IkReal x6015=((1.0)*x6008);
IkReal x6016=(sj5*x6007);
IkReal x6017=(sj5*x6008);
evalcond[0]=(((r22*x6008))+((r21*x6016))+(((-1.0)*x6012*x6014)));
evalcond[1]=(((r12*x6008))+((r11*x6016))+cj0+(((-1.0)*x6010*x6014)));
evalcond[2]=(((r01*x6016))+(((-1.0)*sj0))+((r02*x6008))+(((-1.0)*x6009*x6014)));
evalcond[3]=(((r21*x6017))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x6014))+(((-1.0)*x6012*x6015))+((cj1*cj2)));
evalcond[4]=(((r01*x6017))+(((-1.0)*r02*x6014))+((cj0*x6011))+((cj0*x6013))+(((-1.0)*x6009*x6015)));
evalcond[5]=(((r11*x6017))+(((-1.0)*r12*x6014))+(((-1.0)*x6010*x6015))+((sj0*x6011))+((sj0*x6013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
CheckValue<IkReal> x6019=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6018.value)+(((1.5707963267949)*(x6019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6020=IKcos(j4);
IkReal x6021=IKsin(j4);
IkReal x6022=(cj5*r00);
IkReal x6023=(cj5*r10);
IkReal x6024=(cj2*sj1);
IkReal x6025=(cj5*r20);
IkReal x6026=(cj1*sj2);
IkReal x6027=((1.0)*x6020);
IkReal x6028=((1.0)*x6021);
IkReal x6029=(sj5*x6020);
IkReal x6030=(sj5*x6021);
evalcond[0]=((((-1.0)*x6025*x6027))+((r21*x6029))+((r22*x6021)));
evalcond[1]=((((-1.0)*x6023*x6027))+cj0+((r12*x6021))+((r11*x6029)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6021))+((r01*x6029))+(((-1.0)*x6022*x6027)));
evalcond[3]=(((r21*x6030))+(((-1.0)*x6025*x6028))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x6027))+((cj1*cj2)));
evalcond[4]=(((cj0*x6026))+((cj0*x6024))+(((-1.0)*r02*x6027))+(((-1.0)*x6022*x6028))+((r01*x6030)));
evalcond[5]=(((sj0*x6024))+((sj0*x6026))+(((-1.0)*x6023*x6028))+((r11*x6030))+(((-1.0)*r12*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6031=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6031;
j0eval[1]=IKsign(x6031);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6032=cj5*cj5;
IkReal x6033=r21*r21;
IkReal x6034=(sj1*sj2);
IkReal x6035=(r21*sj5);
IkReal x6036=(cj1*cj2);
IkReal x6037=(cj5*r20);
IkReal x6038=(((x6032*(r20*r20)))+(((-2.0)*x6035*x6037))+(r22*r22)+x6033+(((-1.0)*x6032*x6033)));
j4eval[0]=x6038;
j4eval[1]=IKsign(x6038);
j4eval[2]=((IKabs(((((-1.0)*x6034*x6035))+((x6035*x6036))+(((-1.0)*x6036*x6037))+((x6034*x6037)))))+(IKabs((((r22*x6034))+(((-1.0)*r22*x6036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.42875253914973)*py))+(((-1.62793712993243)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.42875253914973)*py))+(((-1.62793712993243)*px))))+IKsqr(((((3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.42875253914973)*py))+(((-1.62793712993243)*px))), ((((3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6039=IKsin(j0);
IkReal x6040=IKcos(j0);
evalcond[0]=((((0.238)*x6040))+(((-1.0)*px))+(((-0.113)*x6039)));
evalcond[1]=((((0.113)*x6040))+(((-1.0)*py))+(((0.238)*x6039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6041=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6041;
j4eval[1]=IKsign(x6041);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6042=cj5*cj5;
IkReal x6043=(r11*r21);
IkReal x6044=((1.0)*r20);
IkReal x6045=(cj5*sj5);
IkReal x6046=((((-1.0)*r12*r22))+(((-1.0)*x6043))+((x6042*x6043))+((r11*r20*x6045))+((r10*r21*x6045))+(((-1.0)*r10*x6042*x6044)));
j4eval[0]=x6046;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6044)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6047=cj5*cj5;
IkReal x6048=((1.0)*r21);
IkReal x6049=(cj5*sj5);
IkReal x6050=((1.0)*r20);
IkReal x6051=((((-1.0)*r01*x6049*x6050))+((r01*r21))+(((-1.0)*r01*x6047*x6048))+((r02*r22))+(((-1.0)*r00*x6048*x6049))+((r00*r20*x6047)));
j4eval[0]=x6051;
j4eval[1]=IKsign(x6051);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6050))+((cj0*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=cj5*cj5;
IkReal x6053=((1.0)*r21);
IkReal x6054=(cj5*sj5);
IkReal x6055=((1.0)*r20);
CheckValue<IkReal> x6056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6053*x6054))+(((-1.0)*r01*x6054*x6055))+((r01*r21))+(((-1.0)*r01*x6052*x6053))+((r00*r20*x6052))+((r02*r22)))),-1);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x6055))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6056.value)))+(x6057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6058=IKcos(j4);
IkReal x6059=IKsin(j4);
IkReal x6060=(cj5*r00);
IkReal x6061=(r01*sj5);
IkReal x6062=(r11*sj5);
IkReal x6063=(r21*sj5);
IkReal x6064=(cj5*r10);
IkReal x6065=(cj5*r20);
IkReal x6066=((1.0)*x6058);
IkReal x6067=((1.0)*x6059);
evalcond[0]=(((r22*x6059))+((x6058*x6063))+(((-1.0)*x6065*x6066)));
evalcond[1]=(((r22*x6058))+((x6059*x6065))+(((-1.0)*x6063*x6067)));
evalcond[2]=((((-1.0)*x6064*x6066))+((r12*x6059))+cj0+((x6058*x6062)));
evalcond[3]=(cj0+(((-1.0)*x6061*x6067))+((x6059*x6060))+((r02*x6058)));
evalcond[4]=(((r12*x6058))+sj0+((x6059*x6064))+(((-1.0)*x6062*x6067)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6060*x6066))+((r02*x6059))+((x6058*x6061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6068=cj5*cj5;
IkReal x6069=(r11*r21);
IkReal x6070=((1.0)*r20);
IkReal x6071=(cj5*sj5);
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6070))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r10*r21*x6071))+(((-1.0)*r10*x6068*x6070))+(((-1.0)*x6069))+((r11*r20*x6071))+((x6068*x6069)))),-1);
if(!x6073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6072.value)+(((1.5707963267949)*(x6073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6074=IKcos(j4);
IkReal x6075=IKsin(j4);
IkReal x6076=(cj5*r00);
IkReal x6077=(r01*sj5);
IkReal x6078=(r11*sj5);
IkReal x6079=(r21*sj5);
IkReal x6080=(cj5*r10);
IkReal x6081=(cj5*r20);
IkReal x6082=((1.0)*x6074);
IkReal x6083=((1.0)*x6075);
evalcond[0]=(((r22*x6075))+((x6074*x6079))+(((-1.0)*x6081*x6082)));
evalcond[1]=(((r22*x6074))+(((-1.0)*x6079*x6083))+((x6075*x6081)));
evalcond[2]=((((-1.0)*x6080*x6082))+cj0+((x6074*x6078))+((r12*x6075)));
evalcond[3]=(((x6075*x6076))+cj0+(((-1.0)*x6077*x6083))+((r02*x6074)));
evalcond[4]=(sj0+(((-1.0)*x6078*x6083))+((x6075*x6080))+((r12*x6074)));
evalcond[5]=((((-1.0)*sj0))+((x6074*x6077))+((r02*x6075))+(((-1.0)*x6076*x6082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6084.value)+(((1.5707963267949)*(x6085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6086=IKcos(j4);
IkReal x6087=IKsin(j4);
IkReal x6088=(cj5*r00);
IkReal x6089=(r01*sj5);
IkReal x6090=(r11*sj5);
IkReal x6091=(r21*sj5);
IkReal x6092=(cj5*r10);
IkReal x6093=(cj5*r20);
IkReal x6094=((1.0)*x6086);
IkReal x6095=((1.0)*x6087);
evalcond[0]=(((x6086*x6091))+(((-1.0)*x6093*x6094))+((r22*x6087)));
evalcond[1]=((((-1.0)*x6091*x6095))+((x6087*x6093))+((r22*x6086)));
evalcond[2]=(cj0+((x6086*x6090))+(((-1.0)*x6092*x6094))+((r12*x6087)));
evalcond[3]=((((-1.0)*x6089*x6095))+cj0+((x6087*x6088))+((r02*x6086)));
evalcond[4]=(sj0+(((-1.0)*x6090*x6095))+((x6087*x6092))+((r12*x6086)));
evalcond[5]=((((-1.0)*sj0))+((x6086*x6089))+(((-1.0)*x6088*x6094))+((r02*x6087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62793712993243)*px))+(((-3.42875253914973)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))))+IKsqr(((((-3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))), ((((-3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6096=IKcos(j0);
IkReal x6097=IKsin(j0);
evalcond[0]=((((-0.113)*x6097))+(((-0.238)*x6096))+(((-1.0)*px)));
evalcond[1]=((((-0.238)*x6097))+(((-1.0)*py))+(((0.113)*x6096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6098=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6098;
j4eval[1]=IKsign(x6098);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6099=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6099;
j4eval[1]=IKsign(x6099);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6100=cj5*cj5;
IkReal x6101=(r11*r21);
IkReal x6102=((1.0)*r20);
IkReal x6103=(cj5*sj5);
IkReal x6104=(((x6100*x6101))+(((-1.0)*r12*r22))+((r10*r21*x6103))+((r11*r20*x6103))+(((-1.0)*x6101))+(((-1.0)*r10*x6100*x6102)));
j4eval[0]=x6104;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6102)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6105=cj5*cj5;
IkReal x6106=(r11*r21);
IkReal x6107=((1.0)*r20);
IkReal x6108=(cj5*sj5);
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
CheckValue<IkReal> x6110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6105*x6107))+(((-1.0)*r12*r22))+((r10*r21*x6108))+((r11*r20*x6108))+(((-1.0)*x6106))+((x6105*x6106)))),-1);
if(!x6110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6109.value)+(((1.5707963267949)*(x6110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6111=IKcos(j4);
IkReal x6112=IKsin(j4);
IkReal x6113=((1.0)*sj0);
IkReal x6114=(cj5*r00);
IkReal x6115=(cj5*r10);
IkReal x6116=(cj5*r20);
IkReal x6117=((1.0)*x6111);
IkReal x6118=(sj5*x6111);
IkReal x6119=((1.0)*sj5*x6112);
evalcond[0]=((((-1.0)*x6116*x6117))+((r22*x6112))+((r21*x6118)));
evalcond[1]=((((-1.0)*r21*x6119))+((r22*x6111))+((x6112*x6116)));
evalcond[2]=(cj0+(((-1.0)*x6115*x6117))+((r12*x6112))+((r11*x6118)));
evalcond[3]=(((r02*x6112))+(((-1.0)*x6113))+(((-1.0)*x6114*x6117))+((r01*x6118)));
evalcond[4]=(((r02*x6111))+((x6112*x6114))+(((-1.0)*r01*x6119))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6119))+(((-1.0)*x6113))+((r12*x6111))+((x6112*x6115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6120.value)+(((1.5707963267949)*(x6121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6122=IKcos(j4);
IkReal x6123=IKsin(j4);
IkReal x6124=((1.0)*sj0);
IkReal x6125=(cj5*r00);
IkReal x6126=(cj5*r10);
IkReal x6127=(cj5*r20);
IkReal x6128=((1.0)*x6122);
IkReal x6129=(sj5*x6122);
IkReal x6130=((1.0)*sj5*x6123);
evalcond[0]=(((r21*x6129))+(((-1.0)*x6127*x6128))+((r22*x6123)));
evalcond[1]=(((x6123*x6127))+(((-1.0)*r21*x6130))+((r22*x6122)));
evalcond[2]=(((r12*x6123))+cj0+(((-1.0)*x6126*x6128))+((r11*x6129)));
evalcond[3]=(((r01*x6129))+(((-1.0)*x6125*x6128))+((r02*x6123))+(((-1.0)*x6124)));
evalcond[4]=((((-1.0)*r01*x6130))+((x6123*x6125))+((r02*x6122))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6122))+((x6123*x6126))+(((-1.0)*x6124))+(((-1.0)*r11*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6131.value)+(((1.5707963267949)*(x6132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6133=IKcos(j4);
IkReal x6134=IKsin(j4);
IkReal x6135=((1.0)*sj0);
IkReal x6136=(cj5*r00);
IkReal x6137=(cj5*r10);
IkReal x6138=(cj5*r20);
IkReal x6139=((1.0)*x6133);
IkReal x6140=(sj5*x6133);
IkReal x6141=((1.0)*sj5*x6134);
evalcond[0]=(((r22*x6134))+((r21*x6140))+(((-1.0)*x6138*x6139)));
evalcond[1]=((((-1.0)*r21*x6141))+((r22*x6133))+((x6134*x6138)));
evalcond[2]=((((-1.0)*x6137*x6139))+cj0+((r11*x6140))+((r12*x6134)));
evalcond[3]=((((-1.0)*x6136*x6139))+((r01*x6140))+(((-1.0)*x6135))+((r02*x6134)));
evalcond[4]=((((-1.0)*r01*x6141))+((x6134*x6136))+((r02*x6133))+(((-1.0)*cj0)));
evalcond[5]=(((x6134*x6137))+(((-1.0)*x6135))+((r12*x6133))+(((-1.0)*r11*x6141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.89255694602262)*py))+(((-0.425166868589575)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.89255694602262)*px))+(((0.425166868589575)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.89255694602262)*py))+(((-0.425166868589575)*px))))+IKsqr(((((1.89255694602262)*px))+(((0.425166868589575)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.89255694602262)*py))+(((-0.425166868589575)*px))), ((((1.89255694602262)*px))+(((0.425166868589575)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6142=IKsin(j0);
IkReal x6143=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.113)*x6142))+(((0.503)*x6143)));
evalcond[1]=((((0.113)*x6143))+(((-1.0)*py))+(((0.503)*x6142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6144=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6144;
j4eval[1]=IKsign(x6144);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6145=cj5*cj5;
IkReal x6146=(r11*r21);
IkReal x6147=((1.0)*r20);
IkReal x6148=(cj5*sj5);
IkReal x6149=((((-1.0)*r12*r22))+((x6145*x6146))+(((-1.0)*x6146))+(((-1.0)*r10*x6145*x6147))+((r11*r20*x6148))+((r10*r21*x6148)));
j4eval[0]=x6149;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6147))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6150=cj5*cj5;
IkReal x6151=((1.0)*r21);
IkReal x6152=(cj5*sj5);
IkReal x6153=((1.0)*r20);
IkReal x6154=((((-1.0)*r01*x6150*x6151))+(((-1.0)*r01*x6152*x6153))+((r01*r21))+(((-1.0)*r00*x6151*x6152))+((r02*r22))+((r00*r20*x6150)));
j4eval[0]=x6154;
j4eval[1]=IKsign(x6154);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6153)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6155=cj5*cj5;
IkReal x6156=((1.0)*r21);
IkReal x6157=(cj5*sj5);
IkReal x6158=((1.0)*r20);
CheckValue<IkReal> x6159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6157*x6158))+((r01*r21))+(((-1.0)*r01*x6155*x6156))+((r02*r22))+((r00*r20*x6155))+(((-1.0)*r00*x6156*x6157)))),-1);
if(!x6159.valid){
continue;
}
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6158)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6159.value)))+(x6160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6161=IKcos(j4);
IkReal x6162=IKsin(j4);
IkReal x6163=(cj5*r00);
IkReal x6164=(r01*sj5);
IkReal x6165=(r11*sj5);
IkReal x6166=(r21*sj5);
IkReal x6167=(cj5*r10);
IkReal x6168=(cj5*r20);
IkReal x6169=((1.0)*x6161);
IkReal x6170=((1.0)*x6162);
evalcond[0]=((((-1.0)*x6168*x6169))+((x6161*x6166))+((r22*x6162)));
evalcond[1]=((((-1.0)*x6166*x6170))+((x6162*x6168))+((r22*x6161)));
evalcond[2]=((((-1.0)*x6167*x6169))+cj0+((r12*x6162))+((x6161*x6165)));
evalcond[3]=((((-1.0)*x6164*x6170))+cj0+((r02*x6161))+((x6162*x6163)));
evalcond[4]=(sj0+((r12*x6161))+((x6162*x6167))+(((-1.0)*x6165*x6170)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6162))+((x6161*x6164))+(((-1.0)*x6163*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6171=cj5*cj5;
IkReal x6172=(r11*r21);
IkReal x6173=((1.0)*r20);
IkReal x6174=(cj5*sj5);
CheckValue<IkReal> x6175 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6175.valid){
continue;
}
CheckValue<IkReal> x6176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*r20*x6174))+(((-1.0)*x6172))+(((-1.0)*r10*x6171*x6173))+((r10*r21*x6174))+((x6171*x6172)))),-1);
if(!x6176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6175.value)+(((1.5707963267949)*(x6176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6177=IKcos(j4);
IkReal x6178=IKsin(j4);
IkReal x6179=(cj5*r00);
IkReal x6180=(r01*sj5);
IkReal x6181=(r11*sj5);
IkReal x6182=(r21*sj5);
IkReal x6183=(cj5*r10);
IkReal x6184=(cj5*r20);
IkReal x6185=((1.0)*x6177);
IkReal x6186=((1.0)*x6178);
evalcond[0]=(((x6177*x6182))+(((-1.0)*x6184*x6185))+((r22*x6178)));
evalcond[1]=((((-1.0)*x6182*x6186))+((r22*x6177))+((x6178*x6184)));
evalcond[2]=(((x6177*x6181))+cj0+((r12*x6178))+(((-1.0)*x6183*x6185)));
evalcond[3]=(cj0+((x6178*x6179))+((r02*x6177))+(((-1.0)*x6180*x6186)));
evalcond[4]=(sj0+((r12*x6177))+((x6178*x6183))+(((-1.0)*x6181*x6186)));
evalcond[5]=((((-1.0)*sj0))+((x6177*x6180))+((r02*x6178))+(((-1.0)*x6179*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6187 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6187.valid){
continue;
}
CheckValue<IkReal> x6188=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6187.value)+(((1.5707963267949)*(x6188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6189=IKcos(j4);
IkReal x6190=IKsin(j4);
IkReal x6191=(cj5*r00);
IkReal x6192=(r01*sj5);
IkReal x6193=(r11*sj5);
IkReal x6194=(r21*sj5);
IkReal x6195=(cj5*r10);
IkReal x6196=(cj5*r20);
IkReal x6197=((1.0)*x6189);
IkReal x6198=((1.0)*x6190);
evalcond[0]=((((-1.0)*x6196*x6197))+((r22*x6190))+((x6189*x6194)));
evalcond[1]=(((x6190*x6196))+((r22*x6189))+(((-1.0)*x6194*x6198)));
evalcond[2]=(cj0+((r12*x6190))+(((-1.0)*x6195*x6197))+((x6189*x6193)));
evalcond[3]=(((x6190*x6191))+cj0+(((-1.0)*x6192*x6198))+((r02*x6189)));
evalcond[4]=(((x6190*x6195))+sj0+(((-1.0)*x6193*x6198))+((r12*x6189)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6190))+(((-1.0)*x6191*x6197))+((x6189*x6192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.37161060897911)*px))+(((2.00029634019855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.37161060897911)*py))+(((2.00029634019855)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.37161060897911)*px))+(((2.00029634019855)*py))))+IKsqr(((((8.37161060897911)*py))+(((2.00029634019855)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.37161060897911)*px))+(((2.00029634019855)*py))), ((((8.37161060897911)*py))+(((2.00029634019855)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6199=IKsin(j0);
IkReal x6200=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.027)*x6200))+(((-0.113)*x6199)));
evalcond[1]=((((-1.0)*py))+(((0.027)*x6199))+(((0.113)*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6201=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6201;
j4eval[1]=IKsign(x6201);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6202=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6202;
j4eval[1]=IKsign(x6202);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6203=cj5*cj5;
IkReal x6204=(r11*r21);
IkReal x6205=((1.0)*r20);
IkReal x6206=(cj5*sj5);
IkReal x6207=((((-1.0)*r12*r22))+(((-1.0)*r10*x6203*x6205))+((x6203*x6204))+(((-1.0)*x6204))+((r10*r21*x6206))+((r11*r20*x6206)));
j4eval[0]=x6207;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6205))))));
j4eval[2]=IKsign(x6207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6208=cj5*cj5;
IkReal x6209=(r11*r21);
IkReal x6210=((1.0)*r20);
IkReal x6211=(cj5*sj5);
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
CheckValue<IkReal> x6213=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x6208*x6210))+((r11*r20*x6211))+(((-1.0)*x6209))+((r10*r21*x6211))+((x6208*x6209)))),-1);
if(!x6213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6212.value)+(((1.5707963267949)*(x6213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6214=IKcos(j4);
IkReal x6215=IKsin(j4);
IkReal x6216=((1.0)*sj0);
IkReal x6217=(cj5*r00);
IkReal x6218=(cj5*r10);
IkReal x6219=(cj5*r20);
IkReal x6220=((1.0)*x6214);
IkReal x6221=(sj5*x6214);
IkReal x6222=((1.0)*sj5*x6215);
evalcond[0]=(((r21*x6221))+(((-1.0)*x6219*x6220))+((r22*x6215)));
evalcond[1]=((((-1.0)*r21*x6222))+((x6215*x6219))+((r22*x6214)));
evalcond[2]=(((r12*x6215))+cj0+((r11*x6221))+(((-1.0)*x6218*x6220)));
evalcond[3]=(((r02*x6215))+(((-1.0)*x6216))+((r01*x6221))+(((-1.0)*x6217*x6220)));
evalcond[4]=(((r02*x6214))+(((-1.0)*r01*x6222))+((x6215*x6217))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6214))+(((-1.0)*r11*x6222))+(((-1.0)*x6216))+((x6215*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
CheckValue<IkReal> x6224=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6223.value)+(((1.5707963267949)*(x6224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6225=IKcos(j4);
IkReal x6226=IKsin(j4);
IkReal x6227=((1.0)*sj0);
IkReal x6228=(cj5*r00);
IkReal x6229=(cj5*r10);
IkReal x6230=(cj5*r20);
IkReal x6231=((1.0)*x6225);
IkReal x6232=(sj5*x6225);
IkReal x6233=((1.0)*sj5*x6226);
evalcond[0]=(((r21*x6232))+((r22*x6226))+(((-1.0)*x6230*x6231)));
evalcond[1]=(((x6226*x6230))+(((-1.0)*r21*x6233))+((r22*x6225)));
evalcond[2]=(cj0+(((-1.0)*x6229*x6231))+((r12*x6226))+((r11*x6232)));
evalcond[3]=(((r02*x6226))+(((-1.0)*x6227))+(((-1.0)*x6228*x6231))+((r01*x6232)));
evalcond[4]=(((r02*x6225))+(((-1.0)*r01*x6233))+(((-1.0)*cj0))+((x6226*x6228)));
evalcond[5]=((((-1.0)*r11*x6233))+(((-1.0)*x6227))+((x6226*x6229))+((r12*x6225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6234.value)+(((1.5707963267949)*(x6235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6236=IKcos(j4);
IkReal x6237=IKsin(j4);
IkReal x6238=((1.0)*sj0);
IkReal x6239=(cj5*r00);
IkReal x6240=(cj5*r10);
IkReal x6241=(cj5*r20);
IkReal x6242=((1.0)*x6236);
IkReal x6243=(sj5*x6236);
IkReal x6244=((1.0)*sj5*x6237);
evalcond[0]=(((r22*x6237))+((r21*x6243))+(((-1.0)*x6241*x6242)));
evalcond[1]=(((x6237*x6241))+((r22*x6236))+(((-1.0)*r21*x6244)));
evalcond[2]=(cj0+((r12*x6237))+((r11*x6243))+(((-1.0)*x6240*x6242)));
evalcond[3]=(((r02*x6237))+(((-1.0)*x6238))+(((-1.0)*x6239*x6242))+((r01*x6243)));
evalcond[4]=(((r02*x6236))+(((-1.0)*r01*x6244))+((x6237*x6239))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6238))+((r12*x6236))+(((-1.0)*r11*x6244))+((x6237*x6240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62793712993243)*px))+(((-3.42875253914973)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))))+IKsqr(((((-3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62793712993243)*px))+(((-3.42875253914973)*py))), ((((-3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6245=IKcos(j0);
IkReal x6246=IKsin(j0);
evalcond[0]=((((-0.238)*x6245))+(((-1.0)*px))+(((-0.113)*x6246)));
evalcond[1]=((((-0.238)*x6246))+(((-1.0)*py))+(((0.113)*x6245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6247=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6247;
j4eval[1]=IKsign(x6247);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6248=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6248;
j4eval[1]=IKsign(x6248);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6249=cj5*cj5;
IkReal x6250=(r11*r21);
IkReal x6251=((1.0)*r20);
IkReal x6252=(cj5*sj5);
IkReal x6253=((((-1.0)*r12*r22))+((x6249*x6250))+(((-1.0)*x6250))+(((-1.0)*r10*x6249*x6251))+((r10*r21*x6252))+((r11*r20*x6252)));
j4eval[0]=x6253;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6251))))));
j4eval[2]=IKsign(x6253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6254=cj5*cj5;
IkReal x6255=(r11*r21);
IkReal x6256=((1.0)*r20);
IkReal x6257=(cj5*sj5);
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
CheckValue<IkReal> x6259=IKPowWithIntegerCheck(IKsign((((x6254*x6255))+(((-1.0)*r12*r22))+(((-1.0)*x6255))+((r10*r21*x6257))+(((-1.0)*r10*x6254*x6256))+((r11*r20*x6257)))),-1);
if(!x6259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6258.value)+(((1.5707963267949)*(x6259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6260=IKcos(j4);
IkReal x6261=IKsin(j4);
IkReal x6262=((1.0)*sj0);
IkReal x6263=(cj5*r00);
IkReal x6264=(cj5*r10);
IkReal x6265=(cj5*r20);
IkReal x6266=((1.0)*x6260);
IkReal x6267=(sj5*x6260);
IkReal x6268=((1.0)*sj5*x6261);
evalcond[0]=(((r22*x6261))+((r21*x6267))+(((-1.0)*x6265*x6266)));
evalcond[1]=(((r22*x6260))+((x6261*x6265))+(((-1.0)*r21*x6268)));
evalcond[2]=(cj0+((r12*x6261))+(((-1.0)*x6264*x6266))+((r11*x6267)));
evalcond[3]=(((r01*x6267))+(((-1.0)*x6263*x6266))+((r02*x6261))+(((-1.0)*x6262)));
evalcond[4]=(((x6261*x6263))+((r02*x6260))+(((-1.0)*r01*x6268))+(((-1.0)*cj0)));
evalcond[5]=(((x6261*x6264))+(((-1.0)*x6262))+((r12*x6260))+(((-1.0)*r11*x6268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6269.value)+(((1.5707963267949)*(x6270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6271=IKcos(j4);
IkReal x6272=IKsin(j4);
IkReal x6273=((1.0)*sj0);
IkReal x6274=(cj5*r00);
IkReal x6275=(cj5*r10);
IkReal x6276=(cj5*r20);
IkReal x6277=((1.0)*x6271);
IkReal x6278=(sj5*x6271);
IkReal x6279=((1.0)*sj5*x6272);
evalcond[0]=(((r22*x6272))+(((-1.0)*x6276*x6277))+((r21*x6278)));
evalcond[1]=(((r22*x6271))+(((-1.0)*r21*x6279))+((x6272*x6276)));
evalcond[2]=(((r12*x6272))+(((-1.0)*x6275*x6277))+cj0+((r11*x6278)));
evalcond[3]=((((-1.0)*x6274*x6277))+((r01*x6278))+((r02*x6272))+(((-1.0)*x6273)));
evalcond[4]=((((-1.0)*r01*x6279))+((r02*x6271))+((x6272*x6274))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6271))+(((-1.0)*x6273))+(((-1.0)*r11*x6279))+((x6272*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6280.value)+(((1.5707963267949)*(x6281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6282=IKcos(j4);
IkReal x6283=IKsin(j4);
IkReal x6284=((1.0)*sj0);
IkReal x6285=(cj5*r00);
IkReal x6286=(cj5*r10);
IkReal x6287=(cj5*r20);
IkReal x6288=((1.0)*x6282);
IkReal x6289=(sj5*x6282);
IkReal x6290=((1.0)*sj5*x6283);
evalcond[0]=(((r22*x6283))+(((-1.0)*x6287*x6288))+((r21*x6289)));
evalcond[1]=((((-1.0)*r21*x6290))+((r22*x6282))+((x6283*x6287)));
evalcond[2]=(cj0+((r12*x6283))+((r11*x6289))+(((-1.0)*x6286*x6288)));
evalcond[3]=((((-1.0)*x6285*x6288))+(((-1.0)*x6284))+((r02*x6283))+((r01*x6289)));
evalcond[4]=((((-1.0)*r01*x6290))+((x6283*x6285))+((r02*x6282))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6282))+(((-1.0)*x6284))+((x6283*x6286))+(((-1.0)*r11*x6290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.42875253914973)*py))+(((-1.62793712993243)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.42875253914973)*px))+(((1.62793712993243)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.42875253914973)*py))+(((-1.62793712993243)*px))))+IKsqr(((((3.42875253914973)*px))+(((1.62793712993243)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.42875253914973)*py))+(((-1.62793712993243)*px))), ((((3.42875253914973)*px))+(((1.62793712993243)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6291=IKsin(j0);
IkReal x6292=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.113)*x6291))+(((0.238)*x6292)));
evalcond[1]=((((-1.0)*py))+(((0.238)*x6291))+(((0.113)*x6292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6293=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6293;
j4eval[1]=IKsign(x6293);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6294=cj5*cj5;
IkReal x6295=(r11*r21);
IkReal x6296=((1.0)*r20);
IkReal x6297=(cj5*sj5);
IkReal x6298=((((-1.0)*x6295))+(((-1.0)*r12*r22))+((x6294*x6295))+(((-1.0)*r10*x6294*x6296))+((r11*r20*x6297))+((r10*r21*x6297)));
j4eval[0]=x6298;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6296))))));
j4eval[2]=IKsign(x6298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6299=cj5*cj5;
IkReal x6300=((1.0)*r21);
IkReal x6301=(cj5*sj5);
IkReal x6302=((1.0)*r20);
IkReal x6303=(((r00*r20*x6299))+((r01*r21))+(((-1.0)*r01*x6299*x6300))+(((-1.0)*r01*x6301*x6302))+(((-1.0)*r00*x6300*x6301))+((r02*r22)));
j4eval[0]=x6303;
j4eval[1]=IKsign(x6303);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x6302))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6304=cj5*cj5;
IkReal x6305=((1.0)*r21);
IkReal x6306=(cj5*sj5);
IkReal x6307=((1.0)*r20);
CheckValue<IkReal> x6308=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6306*x6307))+(((-1.0)*r01*x6304*x6305))+((r01*r21))+(((-1.0)*r00*x6305*x6306))+((r00*r20*x6304))+((r02*r22)))),-1);
if(!x6308.valid){
continue;
}
CheckValue<IkReal> x6309 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x6307))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6308.value)))+(x6309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6310=IKcos(j4);
IkReal x6311=IKsin(j4);
IkReal x6312=(cj5*r00);
IkReal x6313=(r01*sj5);
IkReal x6314=(r11*sj5);
IkReal x6315=(r21*sj5);
IkReal x6316=(cj5*r10);
IkReal x6317=(cj5*r20);
IkReal x6318=((1.0)*x6310);
IkReal x6319=((1.0)*x6311);
evalcond[0]=(((x6310*x6315))+((r22*x6311))+(((-1.0)*x6317*x6318)));
evalcond[1]=(((r22*x6310))+((x6311*x6317))+(((-1.0)*x6315*x6319)));
evalcond[2]=(((x6310*x6314))+cj0+((r12*x6311))+(((-1.0)*x6316*x6318)));
evalcond[3]=(cj0+((x6311*x6312))+((r02*x6310))+(((-1.0)*x6313*x6319)));
evalcond[4]=(sj0+((x6311*x6316))+((r12*x6310))+(((-1.0)*x6314*x6319)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6312*x6318))+((x6310*x6313))+((r02*x6311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6320=cj5*cj5;
IkReal x6321=(r11*r21);
IkReal x6322=((1.0)*r20);
IkReal x6323=(cj5*sj5);
CheckValue<IkReal> x6324=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6321))+((r10*r21*x6323))+(((-1.0)*r12*r22))+((r11*r20*x6323))+((x6320*x6321))+(((-1.0)*r10*x6320*x6322)))),-1);
if(!x6324.valid){
continue;
}
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6324.value)))+(x6325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6326=IKcos(j4);
IkReal x6327=IKsin(j4);
IkReal x6328=(cj5*r00);
IkReal x6329=(r01*sj5);
IkReal x6330=(r11*sj5);
IkReal x6331=(r21*sj5);
IkReal x6332=(cj5*r10);
IkReal x6333=(cj5*r20);
IkReal x6334=((1.0)*x6326);
IkReal x6335=((1.0)*x6327);
evalcond[0]=((((-1.0)*x6333*x6334))+((x6326*x6331))+((r22*x6327)));
evalcond[1]=(((x6327*x6333))+(((-1.0)*x6331*x6335))+((r22*x6326)));
evalcond[2]=(cj0+((r12*x6327))+((x6326*x6330))+(((-1.0)*x6332*x6334)));
evalcond[3]=(((r02*x6326))+((x6327*x6328))+cj0+(((-1.0)*x6329*x6335)));
evalcond[4]=(sj0+(((-1.0)*x6330*x6335))+((r12*x6326))+((x6327*x6332)));
evalcond[5]=(((r02*x6327))+(((-1.0)*sj0))+((x6326*x6329))+(((-1.0)*x6328*x6334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6336 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6336.valid){
continue;
}
CheckValue<IkReal> x6337=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6336.value)+(((1.5707963267949)*(x6337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6338=IKcos(j4);
IkReal x6339=IKsin(j4);
IkReal x6340=(cj5*r00);
IkReal x6341=(r01*sj5);
IkReal x6342=(r11*sj5);
IkReal x6343=(r21*sj5);
IkReal x6344=(cj5*r10);
IkReal x6345=(cj5*r20);
IkReal x6346=((1.0)*x6338);
IkReal x6347=((1.0)*x6339);
evalcond[0]=(((r22*x6339))+(((-1.0)*x6345*x6346))+((x6338*x6343)));
evalcond[1]=(((r22*x6338))+(((-1.0)*x6343*x6347))+((x6339*x6345)));
evalcond[2]=(((r12*x6339))+cj0+(((-1.0)*x6344*x6346))+((x6338*x6342)));
evalcond[3]=((((-1.0)*x6341*x6347))+((r02*x6338))+cj0+((x6339*x6340)));
evalcond[4]=(((r12*x6338))+sj0+(((-1.0)*x6342*x6347))+((x6339*x6344)));
evalcond[5]=((((-1.0)*x6340*x6346))+((r02*x6339))+(((-1.0)*sj0))+((x6338*x6341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.425166868589575)*px))+(((-1.89255694602262)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.425166868589575)*py))+(((-1.89255694602262)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.425166868589575)*px))+(((-1.89255694602262)*py))))+IKsqr(((((0.425166868589575)*py))+(((-1.89255694602262)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.425166868589575)*px))+(((-1.89255694602262)*py))), ((((0.425166868589575)*py))+(((-1.89255694602262)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6348=IKcos(j0);
IkReal x6349=IKsin(j0);
evalcond[0]=((((-0.503)*x6348))+(((-1.0)*px))+(((-0.113)*x6349)));
evalcond[1]=((((-0.503)*x6349))+(((-1.0)*py))+(((0.113)*x6348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6350=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6350;
j4eval[1]=IKsign(x6350);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6351=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6351;
j4eval[1]=IKsign(x6351);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6352=cj5*cj5;
IkReal x6353=(r11*r21);
IkReal x6354=((1.0)*r20);
IkReal x6355=(cj5*sj5);
IkReal x6356=(((r11*r20*x6355))+(((-1.0)*r12*r22))+((r10*r21*x6355))+(((-1.0)*r10*x6352*x6354))+(((-1.0)*x6353))+((x6352*x6353)));
j4eval[0]=x6356;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6354))))));
j4eval[2]=IKsign(x6356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6357=cj5*cj5;
IkReal x6358=(r11*r21);
IkReal x6359=((1.0)*r20);
IkReal x6360=(cj5*sj5);
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign((((r11*r20*x6360))+(((-1.0)*r12*r22))+(((-1.0)*x6358))+((r10*r21*x6360))+(((-1.0)*r10*x6357*x6359))+((x6357*x6358)))),-1);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6361.value)))+(x6362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKcos(j4);
IkReal x6364=IKsin(j4);
IkReal x6365=((1.0)*sj0);
IkReal x6366=(cj5*r00);
IkReal x6367=(cj5*r10);
IkReal x6368=(cj5*r20);
IkReal x6369=((1.0)*x6363);
IkReal x6370=(sj5*x6363);
IkReal x6371=((1.0)*sj5*x6364);
evalcond[0]=(((r21*x6370))+(((-1.0)*x6368*x6369))+((r22*x6364)));
evalcond[1]=(((r22*x6363))+(((-1.0)*r21*x6371))+((x6364*x6368)));
evalcond[2]=(cj0+((r12*x6364))+((r11*x6370))+(((-1.0)*x6367*x6369)));
evalcond[3]=((((-1.0)*x6366*x6369))+((r01*x6370))+(((-1.0)*x6365))+((r02*x6364)));
evalcond[4]=((((-1.0)*r01*x6371))+((r02*x6363))+(((-1.0)*cj0))+((x6364*x6366)));
evalcond[5]=(((r12*x6363))+(((-1.0)*x6365))+(((-1.0)*r11*x6371))+((x6364*x6367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6372 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6372.valid){
continue;
}
CheckValue<IkReal> x6373=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6372.value)+(((1.5707963267949)*(x6373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6374=IKcos(j4);
IkReal x6375=IKsin(j4);
IkReal x6376=((1.0)*sj0);
IkReal x6377=(cj5*r00);
IkReal x6378=(cj5*r10);
IkReal x6379=(cj5*r20);
IkReal x6380=((1.0)*x6374);
IkReal x6381=(sj5*x6374);
IkReal x6382=((1.0)*sj5*x6375);
evalcond[0]=((((-1.0)*x6379*x6380))+((r21*x6381))+((r22*x6375)));
evalcond[1]=(((x6375*x6379))+(((-1.0)*r21*x6382))+((r22*x6374)));
evalcond[2]=(cj0+(((-1.0)*x6378*x6380))+((r12*x6375))+((r11*x6381)));
evalcond[3]=((((-1.0)*x6377*x6380))+(((-1.0)*x6376))+((r01*x6381))+((r02*x6375)));
evalcond[4]=(((x6375*x6377))+(((-1.0)*r01*x6382))+((r02*x6374))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6382))+((r12*x6374))+((x6375*x6378))+(((-1.0)*x6376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6383 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6383.valid){
continue;
}
CheckValue<IkReal> x6384=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6383.value)+(((1.5707963267949)*(x6384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6385=IKcos(j4);
IkReal x6386=IKsin(j4);
IkReal x6387=((1.0)*sj0);
IkReal x6388=(cj5*r00);
IkReal x6389=(cj5*r10);
IkReal x6390=(cj5*r20);
IkReal x6391=((1.0)*x6385);
IkReal x6392=(sj5*x6385);
IkReal x6393=((1.0)*sj5*x6386);
evalcond[0]=(((r22*x6386))+((r21*x6392))+(((-1.0)*x6390*x6391)));
evalcond[1]=(((r22*x6385))+(((-1.0)*r21*x6393))+((x6386*x6390)));
evalcond[2]=(((r11*x6392))+cj0+((r12*x6386))+(((-1.0)*x6389*x6391)));
evalcond[3]=((((-1.0)*x6387))+(((-1.0)*x6388*x6391))+((r02*x6386))+((r01*x6392)));
evalcond[4]=(((x6386*x6388))+((r02*x6385))+(((-1.0)*cj0))+(((-1.0)*r01*x6393)));
evalcond[5]=((((-1.0)*x6387))+((x6386*x6389))+((r12*x6385))+(((-1.0)*r11*x6393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.00029634019855)*py))+(((-8.37161060897911)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.00029634019855)*px))+(((8.37161060897911)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.00029634019855)*py))+(((-8.37161060897911)*px))))+IKsqr(((((-2.00029634019855)*px))+(((8.37161060897911)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.00029634019855)*py))+(((-8.37161060897911)*px))), ((((-2.00029634019855)*px))+(((8.37161060897911)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6394=IKcos(j0);
IkReal x6395=IKsin(j0);
evalcond[0]=((((-0.027)*x6394))+(((-0.113)*x6395))+(((-1.0)*px)));
evalcond[1]=((((-0.027)*x6395))+(((-1.0)*py))+(((0.113)*x6394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6396=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6396;
j4eval[1]=IKsign(x6396);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6397=cj5*cj5;
IkReal x6398=(r11*r21);
IkReal x6399=((1.0)*r20);
IkReal x6400=(cj5*sj5);
IkReal x6401=((((-1.0)*r10*x6397*x6399))+(((-1.0)*x6398))+(((-1.0)*r12*r22))+((x6397*x6398))+((r11*r20*x6400))+((r10*r21*x6400)));
j4eval[0]=x6401;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6399)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6402=cj5*cj5;
IkReal x6403=((1.0)*r21);
IkReal x6404=(cj5*sj5);
IkReal x6405=((1.0)*r20);
IkReal x6406=((((-1.0)*r01*x6404*x6405))+((r01*r21))+(((-1.0)*r01*x6402*x6403))+(((-1.0)*r00*x6403*x6404))+((r02*r22))+((r00*r20*x6402)));
j4eval[0]=x6406;
j4eval[1]=IKsign(x6406);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6405))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6407=cj5*cj5;
IkReal x6408=((1.0)*r21);
IkReal x6409=(cj5*sj5);
IkReal x6410=((1.0)*r20);
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6408*x6409))+((r01*r21))+(((-1.0)*r01*x6409*x6410))+(((-1.0)*r01*x6407*x6408))+((r02*r22))+((r00*r20*x6407)))),-1);
if(!x6411.valid){
continue;
}
CheckValue<IkReal> x6412 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6410)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6411.value)))+(x6412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6413=IKcos(j4);
IkReal x6414=IKsin(j4);
IkReal x6415=(cj5*r00);
IkReal x6416=(r01*sj5);
IkReal x6417=(r11*sj5);
IkReal x6418=(r21*sj5);
IkReal x6419=(cj5*r10);
IkReal x6420=(cj5*r20);
IkReal x6421=((1.0)*x6413);
IkReal x6422=((1.0)*x6414);
evalcond[0]=(((x6413*x6418))+((r22*x6414))+(((-1.0)*x6420*x6421)));
evalcond[1]=((((-1.0)*x6418*x6422))+((r22*x6413))+((x6414*x6420)));
evalcond[2]=(cj0+(((-1.0)*x6419*x6421))+((x6413*x6417))+((r12*x6414)));
evalcond[3]=(((r02*x6413))+cj0+((x6414*x6415))+(((-1.0)*x6416*x6422)));
evalcond[4]=((((-1.0)*x6417*x6422))+sj0+((x6414*x6419))+((r12*x6413)));
evalcond[5]=(((r02*x6414))+(((-1.0)*sj0))+(((-1.0)*x6415*x6421))+((x6413*x6416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6423=cj5*cj5;
IkReal x6424=(r11*r21);
IkReal x6425=((1.0)*r20);
IkReal x6426=(cj5*sj5);
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
CheckValue<IkReal> x6428=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6424))+(((-1.0)*r12*r22))+((r10*r21*x6426))+((r11*r20*x6426))+((x6423*x6424))+(((-1.0)*r10*x6423*x6425)))),-1);
if(!x6428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6427.value)+(((1.5707963267949)*(x6428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6429=IKcos(j4);
IkReal x6430=IKsin(j4);
IkReal x6431=(cj5*r00);
IkReal x6432=(r01*sj5);
IkReal x6433=(r11*sj5);
IkReal x6434=(r21*sj5);
IkReal x6435=(cj5*r10);
IkReal x6436=(cj5*r20);
IkReal x6437=((1.0)*x6429);
IkReal x6438=((1.0)*x6430);
evalcond[0]=(((r22*x6430))+((x6429*x6434))+(((-1.0)*x6436*x6437)));
evalcond[1]=((((-1.0)*x6434*x6438))+((x6430*x6436))+((r22*x6429)));
evalcond[2]=(((x6429*x6433))+(((-1.0)*x6435*x6437))+cj0+((r12*x6430)));
evalcond[3]=(cj0+((r02*x6429))+(((-1.0)*x6432*x6438))+((x6430*x6431)));
evalcond[4]=(sj0+(((-1.0)*x6433*x6438))+((r12*x6429))+((x6430*x6435)));
evalcond[5]=(((x6429*x6432))+(((-1.0)*sj0))+(((-1.0)*x6431*x6437))+((r02*x6430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6439 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6439.valid){
continue;
}
CheckValue<IkReal> x6440=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6439.value)+(((1.5707963267949)*(x6440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6441=IKcos(j4);
IkReal x6442=IKsin(j4);
IkReal x6443=(cj5*r00);
IkReal x6444=(r01*sj5);
IkReal x6445=(r11*sj5);
IkReal x6446=(r21*sj5);
IkReal x6447=(cj5*r10);
IkReal x6448=(cj5*r20);
IkReal x6449=((1.0)*x6441);
IkReal x6450=((1.0)*x6442);
evalcond[0]=(((r22*x6442))+(((-1.0)*x6448*x6449))+((x6441*x6446)));
evalcond[1]=(((x6442*x6448))+(((-1.0)*x6446*x6450))+((r22*x6441)));
evalcond[2]=(((r12*x6442))+cj0+(((-1.0)*x6447*x6449))+((x6441*x6445)));
evalcond[3]=(((x6442*x6443))+cj0+(((-1.0)*x6444*x6450))+((r02*x6441)));
evalcond[4]=(((r12*x6441))+sj0+((x6442*x6447))+(((-1.0)*x6445*x6450)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6443*x6449))+((r02*x6442))+((x6441*x6444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6451=(cj5*r01);
IkReal x6452=(r00*sj5);
IkReal x6453=(sj1*sj2);
IkReal x6454=(cj1*cj2);
IkReal x6455=((265.0)*sj1);
IkReal x6456=((1000.0)*px);
IkReal x6457=((238.0)*cj2*sj1);
IkReal x6458=((238.0)*cj1*sj2);
CheckValue<IkReal> x6459=IKPowWithIntegerCheck(((((113.0)*x6454))+(((-113.0)*x6453))),-1);
if(!x6459.valid){
continue;
}
CheckValue<IkReal> x6460=IKPowWithIntegerCheck(((((-1.0)*x6453))+x6454),-1);
if(!x6460.valid){
continue;
}
if( IKabs(((x6459.value)*((((x6451*x6455))+((x6451*x6457))+((x6451*x6458))+((x6453*x6456))+((x6452*x6455))+((x6452*x6457))+((x6452*x6458))+(((-1.0)*x6454*x6456))+(((-95.0)*x6451*x6454))+(((95.0)*x6452*x6453))+(((95.0)*x6451*x6453))+(((-95.0)*x6452*x6454)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6460.value)*((x6451+x6452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6459.value)*((((x6451*x6455))+((x6451*x6457))+((x6451*x6458))+((x6453*x6456))+((x6452*x6455))+((x6452*x6457))+((x6452*x6458))+(((-1.0)*x6454*x6456))+(((-95.0)*x6451*x6454))+(((95.0)*x6452*x6453))+(((95.0)*x6451*x6453))+(((-95.0)*x6452*x6454))))))+IKsqr(((x6460.value)*((x6451+x6452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6459.value)*((((x6451*x6455))+((x6451*x6457))+((x6451*x6458))+((x6453*x6456))+((x6452*x6455))+((x6452*x6457))+((x6452*x6458))+(((-1.0)*x6454*x6456))+(((-95.0)*x6451*x6454))+(((95.0)*x6452*x6453))+(((95.0)*x6451*x6453))+(((-95.0)*x6452*x6454))))), ((x6460.value)*((x6451+x6452))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6461=IKcos(j0);
IkReal x6462=IKsin(j0);
IkReal x6463=((0.238)*sj2);
IkReal x6464=((0.238)*cj2);
IkReal x6465=((1.0)*sj2);
IkReal x6466=(cj5*r11);
IkReal x6467=(r00*sj5);
IkReal x6468=(r10*sj5);
IkReal x6469=(cj5*r01);
IkReal x6470=(sj1*x6462);
IkReal x6471=(cj1*x6461);
IkReal x6472=(cj1*x6462);
IkReal x6473=(sj1*x6461);
evalcond[0]=(((cj2*x6471))+(((-1.0)*x6467))+(((-1.0)*x6469))+(((-1.0)*x6465*x6473)));
evalcond[1]=(((cj2*x6472))+(((-1.0)*x6466))+(((-1.0)*x6468))+(((-1.0)*x6465*x6470)));
evalcond[2]=((((-0.095)*x6469))+(((-0.095)*x6467))+(((0.265)*x6473))+(((-1.0)*px))+((x6463*x6471))+((x6464*x6473))+(((-0.113)*x6462)));
evalcond[3]=((((-0.095)*x6468))+(((-0.095)*x6466))+(((0.265)*x6470))+(((-1.0)*py))+((x6463*x6472))+(((0.113)*x6461))+((x6464*x6470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6474=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6474;
j4eval[1]=IKsign(x6474);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6475=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6475;
j4eval[1]=IKsign(x6475);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6476=((1.0)*sj0);
IkReal x6477=((1.0)*cj0);
IkReal x6478=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6478;
j4eval[1]=((IKabs(((((-1.0)*r12*x6476))+(((-1.0)*r02*x6477)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6477))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6476))))));
j4eval[2]=IKsign(x6478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6479=((-1.0)*r20);
IkReal x6481 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6481)==0){
continue;
}
IkReal x6480=pow(x6481,-0.5);
CheckValue<IkReal> x6482 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6479),IKFAST_ATAN2_MAGTHRESH);
if(!x6482.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6482.value));
IkReal gconst133=(r21*x6480);
IkReal gconst134=(x6479*x6480);
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6483.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6484=((-1.0)*r20);
IkReal x6485=x6480;
CheckValue<IkReal> x6487 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6484),IKFAST_ATAN2_MAGTHRESH);
if(!x6487.valid){
continue;
}
IkReal x6486=((-1.0)*(x6487.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6486;
IkReal gconst132=x6486;
IkReal gconst133=(r21*x6485);
IkReal gconst134=(x6484*x6485);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6488=((-1.0)*r20);
IkReal x6489=x6480;
CheckValue<IkReal> x6491 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6488),IKFAST_ATAN2_MAGTHRESH);
if(!x6491.valid){
continue;
}
IkReal x6490=((-1.0)*(x6491.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6490;
IkReal gconst132=x6490;
IkReal gconst133=(r21*x6489);
IkReal gconst134=(x6488*x6489);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6492=((-1.0)*r20);
IkReal x6493=x6480;
CheckValue<IkReal> x6495 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6492),IKFAST_ATAN2_MAGTHRESH);
if(!x6495.valid){
continue;
}
IkReal x6494=((-1.0)*(x6495.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6494;
IkReal gconst132=x6494;
IkReal gconst133=(r21*x6493);
IkReal gconst134=(x6492*x6493);
IkReal x6496=r22*r22;
CheckValue<IkReal> x6499=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6496))),-1);
if(!x6499.valid){
continue;
}
IkReal x6497=x6499.value;
IkReal x6498=(((x6497*(r21*r21*r21*r21)))+x6496+((x6497*(r20*r20*r20*r20)))+(((2.0)*x6497*(r20*r20)*(r21*r21))));
j4eval[0]=x6498;
j4eval[1]=IKsign(x6498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=(gconst134*r20);
IkReal x6501=(cj1*cj2);
IkReal x6502=(gconst133*r21);
IkReal x6503=(sj1*sj2);
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal((((x6500*x6503))+(((-1.0)*x6500*x6501))+(((-1.0)*x6502*x6503))+((x6501*x6502)))),IkReal((((r22*x6503))+(((-1.0)*r22*x6501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6500*x6502))+(x6502*x6502)+(r22*r22)+(x6500*x6500))),-1);
if(!x6505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6504.value)+(((1.5707963267949)*(x6505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6506=IKcos(j4);
IkReal x6507=IKsin(j4);
IkReal x6508=(gconst134*r10);
IkReal x6509=(cj2*sj1);
IkReal x6510=(gconst134*r00);
IkReal x6511=(gconst134*r20);
IkReal x6512=(cj1*sj2);
IkReal x6513=(gconst133*x6506);
IkReal x6514=((1.0)*x6506);
IkReal x6515=((1.0)*gconst133*x6507);
evalcond[0]=(((r22*x6507))+((r21*x6513))+(((-1.0)*x6511*x6514)));
evalcond[1]=(((r12*x6507))+cj0+((r11*x6513))+(((-1.0)*x6508*x6514)));
evalcond[2]=(((r02*x6507))+(((-1.0)*sj0))+((r01*x6513))+(((-1.0)*x6510*x6514)));
evalcond[3]=((((-1.0)*r21*x6515))+((r22*x6506))+(((-1.0)*sj1*sj2))+((x6507*x6511))+((cj1*cj2)));
evalcond[4]=(((r02*x6506))+((cj0*x6512))+((x6507*x6510))+((cj0*x6509))+(((-1.0)*r01*x6515)));
evalcond[5]=(((r12*x6506))+((x6507*x6508))+((sj0*x6509))+((sj0*x6512))+(((-1.0)*r11*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6516 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6516.value)+(((1.5707963267949)*(x6517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6518=IKcos(j4);
IkReal x6519=IKsin(j4);
IkReal x6520=(gconst134*r10);
IkReal x6521=(cj2*sj1);
IkReal x6522=(gconst134*r00);
IkReal x6523=(gconst134*r20);
IkReal x6524=(cj1*sj2);
IkReal x6525=(gconst133*x6518);
IkReal x6526=((1.0)*x6518);
IkReal x6527=((1.0)*gconst133*x6519);
evalcond[0]=(((r21*x6525))+(((-1.0)*x6523*x6526))+((r22*x6519)));
evalcond[1]=(cj0+((r12*x6519))+(((-1.0)*x6520*x6526))+((r11*x6525)));
evalcond[2]=((((-1.0)*x6522*x6526))+(((-1.0)*sj0))+((r02*x6519))+((r01*x6525)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x6527))+((cj1*cj2))+((r22*x6518))+((x6519*x6523)));
evalcond[4]=(((r02*x6518))+((cj0*x6521))+((cj0*x6524))+(((-1.0)*r01*x6527))+((x6519*x6522)));
evalcond[5]=(((r12*x6518))+(((-1.0)*r11*x6527))+((sj0*x6521))+((sj0*x6524))+((x6519*x6520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6528.valid){
continue;
}
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6528.value)))+(x6529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6530=IKcos(j4);
IkReal x6531=IKsin(j4);
IkReal x6532=(gconst134*r10);
IkReal x6533=(cj2*sj1);
IkReal x6534=(gconst134*r00);
IkReal x6535=(gconst134*r20);
IkReal x6536=(cj1*sj2);
IkReal x6537=(gconst133*x6530);
IkReal x6538=((1.0)*x6530);
IkReal x6539=((1.0)*gconst133*x6531);
evalcond[0]=((((-1.0)*x6535*x6538))+((r21*x6537))+((r22*x6531)));
evalcond[1]=(cj0+(((-1.0)*x6532*x6538))+((r11*x6537))+((r12*x6531)));
evalcond[2]=(((r02*x6531))+(((-1.0)*sj0))+(((-1.0)*x6534*x6538))+((r01*x6537)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x6530))+(((-1.0)*r21*x6539))+((x6531*x6535))+((cj1*cj2)));
evalcond[4]=(((r02*x6530))+(((-1.0)*r01*x6539))+((x6531*x6534))+((cj0*x6536))+((cj0*x6533)));
evalcond[5]=((((-1.0)*r11*x6539))+((sj0*x6533))+((sj0*x6536))+((x6531*x6532))+((r12*x6530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6540=((-1.0)*r21);
IkReal x6542 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6542)==0){
continue;
}
IkReal x6541=pow(x6542,-0.5);
CheckValue<IkReal> x6543 = IKatan2WithCheck(IkReal(x6540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6543.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6543.value))));
IkReal gconst136=(x6540*x6541);
IkReal gconst137=((1.0)*r20*x6541);
CheckValue<IkReal> x6544 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6544.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6544.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6545=((-1.0)*r21);
CheckValue<IkReal> x6548 = IKatan2WithCheck(IkReal(x6545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6548.valid){
continue;
}
IkReal x6546=((1.0)*(x6548.value));
IkReal x6547=x6541;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6546)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6546)));
IkReal gconst136=(x6545*x6547);
IkReal gconst137=((1.0)*r20*x6547);
IkReal x6549=r22*r22;
IkReal x6550=((1.0)*x6549);
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(((-1.0)+x6549),-1);
if(!x6554.valid){
continue;
}
IkReal x6551=x6554.value;
if((((1.0)+(((-1.0)*x6550)))) < -0.00001)
continue;
IkReal x6552=IKsqrt(((1.0)+(((-1.0)*x6550))));
IkReal x6553=(cj0*x6551*x6552);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x6550*x6553))+x6553))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6555=((-1.0)*r21);
CheckValue<IkReal> x6558 = IKatan2WithCheck(IkReal(x6555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6558.valid){
continue;
}
IkReal x6556=((1.0)*(x6558.value));
IkReal x6557=x6541;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6556)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6556)));
IkReal gconst136=(x6555*x6557);
IkReal gconst137=((1.0)*r20*x6557);
IkReal x6559=r22*r22;
IkReal x6560=((1.0)*x6559);
CheckValue<IkReal> x6564=IKPowWithIntegerCheck(((-1.0)+x6559),-1);
if(!x6564.valid){
continue;
}
IkReal x6561=x6564.value;
if((((1.0)+(((-1.0)*x6560)))) < -0.00001)
continue;
IkReal x6562=IKsqrt(((1.0)+(((-1.0)*x6560))));
IkReal x6563=(sj0*x6561*x6562);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6563+(((-1.0)*x6560*x6563))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6565=((-1.0)*r21);
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(x6565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
IkReal x6566=((1.0)*(x6568.value));
IkReal x6567=x6541;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6566)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6566)));
IkReal gconst136=(x6565*x6567);
IkReal gconst137=((1.0)*r20*x6567);
IkReal x6569=r22*r22;
IkReal x6570=((1.0)*r12*sj0);
IkReal x6571=((1.0)*cj0*r02);
CheckValue<IkReal> x6575=IKPowWithIntegerCheck(((-1.0)+x6569),-1);
if(!x6575.valid){
continue;
}
IkReal x6572=x6575.value;
if((((1.0)+(((-1.0)*x6569)))) < -0.00001)
continue;
IkReal x6573=IKsqrt(((1.0)+(((-1.0)*x6569))));
IkReal x6574=(r22*x6572*x6573);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6571*x6574))+(((-1.0)*x6570*x6574)))))+(IKabs(((((-1.0)*x6571))+(((-1.0)*x6570))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6576=((1.0)*sj0);
IkReal x6577=((1.0)*cj0);
CheckValue<IkReal> x6578=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6578.valid){
continue;
}
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r00*x6577))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r10*x6576)))),IkReal(((((-1.0)*r12*x6576))+(((-1.0)*r02*x6577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6578.value)))+(x6579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6580=IKcos(j4);
IkReal x6581=IKsin(j4);
IkReal x6582=(cj2*sj1);
IkReal x6583=(gconst136*r01);
IkReal x6584=(gconst136*r21);
IkReal x6585=(gconst136*r11);
IkReal x6586=(cj1*sj2);
IkReal x6587=((1.0)*x6581);
IkReal x6588=(gconst137*x6581);
IkReal x6589=((1.0)*gconst137*x6580);
evalcond[0]=(((r22*x6581))+((x6580*x6584))+(((-1.0)*r20*x6589)));
evalcond[1]=(cj0+(((-1.0)*r10*x6589))+((x6580*x6585))+((r12*x6581)));
evalcond[2]=(((r02*x6581))+(((-1.0)*r00*x6589))+(((-1.0)*sj0))+((x6580*x6583)));
evalcond[3]=((((-1.0)*x6584*x6587))+((r22*x6580))+(((-1.0)*sj1*sj2))+((r20*x6588))+((cj1*cj2)));
evalcond[4]=(((r02*x6580))+((cj0*x6582))+((cj0*x6586))+((r00*x6588))+(((-1.0)*x6583*x6587)));
evalcond[5]=(((sj0*x6582))+((sj0*x6586))+(((-1.0)*x6585*x6587))+((r12*x6580))+((r10*x6588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
CheckValue<IkReal> x6591=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6590.value)+(((1.5707963267949)*(x6591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6592=IKcos(j4);
IkReal x6593=IKsin(j4);
IkReal x6594=(cj2*sj1);
IkReal x6595=(gconst136*r01);
IkReal x6596=(gconst136*r21);
IkReal x6597=(gconst136*r11);
IkReal x6598=(cj1*sj2);
IkReal x6599=((1.0)*x6593);
IkReal x6600=(gconst137*x6593);
IkReal x6601=((1.0)*gconst137*x6592);
evalcond[0]=(((r22*x6593))+((x6592*x6596))+(((-1.0)*r20*x6601)));
evalcond[1]=(((r12*x6593))+(((-1.0)*r10*x6601))+cj0+((x6592*x6597)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6593))+((x6592*x6595))+(((-1.0)*r00*x6601)));
evalcond[3]=(((r22*x6592))+(((-1.0)*sj1*sj2))+(((-1.0)*x6596*x6599))+((r20*x6600))+((cj1*cj2)));
evalcond[4]=(((r02*x6592))+((r00*x6600))+((cj0*x6594))+((cj0*x6598))+(((-1.0)*x6595*x6599)));
evalcond[5]=(((r12*x6592))+((sj0*x6594))+((sj0*x6598))+((r10*x6600))+(((-1.0)*x6597*x6599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
CheckValue<IkReal> x6603=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6602.value)+(((1.5707963267949)*(x6603.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6604=IKcos(j4);
IkReal x6605=IKsin(j4);
IkReal x6606=(cj2*sj1);
IkReal x6607=(gconst136*r01);
IkReal x6608=(gconst136*r21);
IkReal x6609=(gconst136*r11);
IkReal x6610=(cj1*sj2);
IkReal x6611=((1.0)*x6605);
IkReal x6612=(gconst137*x6605);
IkReal x6613=((1.0)*gconst137*x6604);
evalcond[0]=(((r22*x6605))+((x6604*x6608))+(((-1.0)*r20*x6613)));
evalcond[1]=(cj0+((x6604*x6609))+(((-1.0)*r10*x6613))+((r12*x6605)));
evalcond[2]=((((-1.0)*sj0))+((x6604*x6607))+(((-1.0)*r00*x6613))+((r02*x6605)));
evalcond[3]=(((r22*x6604))+(((-1.0)*x6608*x6611))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6612)));
evalcond[4]=((((-1.0)*x6607*x6611))+((r00*x6612))+((r02*x6604))+((cj0*x6606))+((cj0*x6610)));
evalcond[5]=(((sj0*x6606))+((r10*x6612))+(((-1.0)*x6609*x6611))+((sj0*x6610))+((r12*x6604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6615 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6615)==0){
continue;
}
IkReal x6614=pow(x6615,-0.5);
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6616.value));
IkReal gconst139=((-1.0)*r11*x6614);
IkReal gconst140=(r10*x6614);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6617.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
IkReal x6618=((-1.0)*(x6620.value));
IkReal x6619=x6614;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6618;
IkReal gconst138=x6618;
IkReal gconst139=((-1.0)*r11*x6619);
IkReal gconst140=(r10*x6619);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6621=((1.0)*gconst140);
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x6621))+((gconst139*r11*sj0))+(((-1.0)*r10*sj0*x6621))+((cj0*gconst139*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6621))+(((-1.0)*gconst139*r20)))),-1);
if(!x6623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6622.value)+(((1.5707963267949)*(x6623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6624=IKcos(j4);
IkReal x6625=IKsin(j4);
IkReal x6626=(cj2*sj1);
IkReal x6627=(gconst140*r10);
IkReal x6628=(cj1*sj2);
IkReal x6629=(gconst139*x6624);
IkReal x6630=(gconst140*x6625);
IkReal x6631=((1.0)*gconst139*x6625);
IkReal x6632=((1.0)*gconst140*x6624);
evalcond[0]=(((r22*x6625))+(((-1.0)*r20*x6632))+((r21*x6629)));
evalcond[1]=(cj0+(((-1.0)*x6624*x6627))+((r12*x6625))+((r11*x6629)));
evalcond[2]=(((r02*x6625))+(((-1.0)*sj0))+((r01*x6629))+(((-1.0)*r00*x6632)));
evalcond[3]=((((-1.0)*r21*x6631))+(((-1.0)*sj1*sj2))+((r22*x6624))+((cj1*cj2))+((r20*x6630)));
evalcond[4]=(((r02*x6624))+((r00*x6630))+((cj0*x6628))+((cj0*x6626))+(((-1.0)*r01*x6631)));
evalcond[5]=((((-1.0)*r11*x6631))+((r12*x6624))+((sj0*x6628))+((sj0*x6626))+((x6625*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6633.valid){
continue;
}
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6633.value)))+(x6634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6635=IKcos(j4);
IkReal x6636=IKsin(j4);
IkReal x6637=(cj2*sj1);
IkReal x6638=(gconst140*r10);
IkReal x6639=(cj1*sj2);
IkReal x6640=(gconst139*x6635);
IkReal x6641=(gconst140*x6636);
IkReal x6642=((1.0)*gconst139*x6636);
IkReal x6643=((1.0)*gconst140*x6635);
evalcond[0]=(((r21*x6640))+((r22*x6636))+(((-1.0)*r20*x6643)));
evalcond[1]=((((-1.0)*x6635*x6638))+cj0+((r11*x6640))+((r12*x6636)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6640))+(((-1.0)*r00*x6643))+((r02*x6636)));
evalcond[3]=((((-1.0)*r21*x6642))+(((-1.0)*sj1*sj2))+((r22*x6635))+((cj1*cj2))+((r20*x6641)));
evalcond[4]=(((r00*x6641))+(((-1.0)*r01*x6642))+((cj0*x6639))+((cj0*x6637))+((r02*x6635)));
evalcond[5]=((((-1.0)*r11*x6642))+((x6636*x6638))+((r12*x6635))+((sj0*x6639))+((sj0*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6645 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6645)==0){
continue;
}
IkReal x6644=pow(x6645,-0.5);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6646.value))));
IkReal gconst142=((1.0)*r11*x6644);
IkReal gconst143=((-1.0)*r10*x6644);
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
IkReal x6648=((1.0)*(x6650.value));
IkReal x6649=x6644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6648)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6648)));
IkReal gconst142=((1.0)*r11*x6649);
IkReal gconst143=((-1.0)*r10*x6649);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
IkReal x6651=((1.0)*(x6653.value));
IkReal x6652=x6644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6651)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6651)));
IkReal gconst142=((1.0)*r11*x6652);
IkReal gconst143=((-1.0)*r10*x6652);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
IkReal x6654=((1.0)*(x6656.value));
IkReal x6655=x6644;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6654)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6654)));
IkReal gconst142=((1.0)*r11*x6655);
IkReal gconst143=((-1.0)*r10*x6655);
IkReal x6657=r12*r12;
IkReal x6658=((1.0)*sj0);
IkReal x6659=(cj0*r02);
IkReal x6660=x6644;
j4eval[0]=((IKabs(((((-1.0)*x6659))+(((-1.0)*r12*x6658)))))+(IKabs(((((-1.0)*x6658*x6660))+((r12*x6659*x6660))+((sj0*x6657*x6660))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6661=((1.0)*sj0);
IkReal x6662=((1.0)*gconst143);
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal(((((-1.0)*gconst143*r10*x6661))+((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x6662)))),IkReal(((((-1.0)*r12*x6661))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6662))+(((-1.0)*gconst142*r20)))),-1);
if(!x6664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6663.value)+(((1.5707963267949)*(x6664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6665=IKcos(j4);
IkReal x6666=IKsin(j4);
IkReal x6667=(cj2*sj1);
IkReal x6668=(cj1*sj2);
IkReal x6669=(gconst143*x6666);
IkReal x6670=(gconst142*x6665);
IkReal x6671=((1.0)*gconst142*x6666);
IkReal x6672=((1.0)*gconst143*x6665);
evalcond[0]=((((-1.0)*r20*x6672))+((r22*x6666))+((r21*x6670)));
evalcond[1]=(((r11*x6670))+cj0+((r12*x6666))+(((-1.0)*r10*x6672)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6666))+(((-1.0)*r00*x6672))+((r01*x6670)));
evalcond[3]=(((r20*x6669))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6671))+((cj1*cj2))+((r22*x6665)));
evalcond[4]=(((r02*x6665))+(((-1.0)*r01*x6671))+((r00*x6669))+((cj0*x6667))+((cj0*x6668)));
evalcond[5]=(((r12*x6665))+(((-1.0)*r11*x6671))+((sj0*x6668))+((sj0*x6667))+((r10*x6669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6673=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6673.valid){
continue;
}
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6673.value)))+(x6674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6675=IKcos(j4);
IkReal x6676=IKsin(j4);
IkReal x6677=(cj2*sj1);
IkReal x6678=(cj1*sj2);
IkReal x6679=(gconst143*x6676);
IkReal x6680=(gconst142*x6675);
IkReal x6681=((1.0)*gconst142*x6676);
IkReal x6682=((1.0)*gconst143*x6675);
evalcond[0]=((((-1.0)*r20*x6682))+((r21*x6680))+((r22*x6676)));
evalcond[1]=(cj0+((r11*x6680))+((r12*x6676))+(((-1.0)*r10*x6682)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6682))+((r02*x6676))+((r01*x6680)));
evalcond[3]=((((-1.0)*r21*x6681))+((r20*x6679))+(((-1.0)*sj1*sj2))+((r22*x6675))+((cj1*cj2)));
evalcond[4]=(((cj0*x6677))+((cj0*x6678))+(((-1.0)*r01*x6681))+((r02*x6675))+((r00*x6679)));
evalcond[5]=(((r12*x6675))+((sj0*x6677))+((sj0*x6678))+((r10*x6679))+(((-1.0)*r11*x6681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6683=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6683.valid){
continue;
}
CheckValue<IkReal> x6684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6683.value)))+(x6684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6685=IKcos(j4);
IkReal x6686=IKsin(j4);
IkReal x6687=(cj2*sj1);
IkReal x6688=(cj1*sj2);
IkReal x6689=(gconst143*x6686);
IkReal x6690=(gconst142*x6685);
IkReal x6691=((1.0)*gconst142*x6686);
IkReal x6692=((1.0)*gconst143*x6685);
evalcond[0]=((((-1.0)*r20*x6692))+((r22*x6686))+((r21*x6690)));
evalcond[1]=((((-1.0)*r10*x6692))+((r12*x6686))+((r11*x6690))+cj0);
evalcond[2]=(((r02*x6686))+(((-1.0)*sj0))+(((-1.0)*r00*x6692))+((r01*x6690)));
evalcond[3]=((((-1.0)*r21*x6691))+(((-1.0)*sj1*sj2))+((r22*x6685))+((cj1*cj2))+((r20*x6689)));
evalcond[4]=(((r02*x6685))+(((-1.0)*r01*x6691))+((r00*x6689))+((cj0*x6687))+((cj0*x6688)));
evalcond[5]=(((r12*x6685))+((sj0*x6688))+((sj0*x6687))+((r10*x6689))+(((-1.0)*r11*x6691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6693=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6693;
j4eval[1]=IKsign(x6693);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6694=((1.0)*cj5);
IkReal x6695=((((-1.0)*r21*x6694))+(((-1.0)*r20*sj5)));
j4eval[0]=x6695;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6694))))));
j4eval[2]=IKsign(x6695);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6696=cj5*cj5;
IkReal x6697=r11*r11;
IkReal x6698=(cj5*r10);
IkReal x6699=(r11*sj5);
IkReal x6700=(((x6696*x6697))+(((-1.0)*x6697))+(((2.0)*x6698*x6699))+(((-1.0)*x6696*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x6700;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6698))+x6699))));
j4eval[2]=IKsign(x6700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6701=cj5*cj5;
IkReal x6702=r11*r11;
IkReal x6703=(cj5*r10);
IkReal x6704=(r11*sj5);
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6701*(r10*r10)))+(((2.0)*x6703*x6704))+(((-1.0)*(r12*r12)))+((x6701*x6702))+(((-1.0)*x6702)))),-1);
if(!x6705.valid){
continue;
}
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal(r12),IkReal((x6704+(((-1.0)*x6703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6705.value)))+(x6706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6707=IKcos(j4);
IkReal x6708=IKsin(j4);
IkReal x6709=(cj5*r00);
IkReal x6710=((1.0)*x6707);
IkReal x6711=(sj5*x6707);
IkReal x6712=(cj5*x6708);
IkReal x6713=((1.0)*sj5*x6708);
evalcond[0]=((((-1.0)*cj5*r20*x6710))+((r21*x6711))+((r22*x6708)));
evalcond[1]=((((-1.0)*x6709*x6710))+((r01*x6711))+((r02*x6708)));
evalcond[2]=((((-1.0)*r11*x6713))+((r10*x6712))+((r12*x6707)));
evalcond[3]=((1.0)+((r11*x6711))+((r12*x6708))+(((-1.0)*cj5*r10*x6710)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x6713))+((x6708*x6709))+((r02*x6707)));
evalcond[5]=(((r20*x6712))+(((-1.0)*r21*x6713))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6714=((1.0)*cj5);
CheckValue<IkReal> x6715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6714))+(((-1.0)*r20*sj5)))),-1);
if(!x6715.valid){
continue;
}
CheckValue<IkReal> x6716 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x6714)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6715.value)))+(x6716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6717=IKcos(j4);
IkReal x6718=IKsin(j4);
IkReal x6719=(cj5*r00);
IkReal x6720=((1.0)*x6717);
IkReal x6721=(sj5*x6717);
IkReal x6722=(cj5*x6718);
IkReal x6723=((1.0)*sj5*x6718);
evalcond[0]=((((-1.0)*cj5*r20*x6720))+((r22*x6718))+((r21*x6721)));
evalcond[1]=((((-1.0)*x6719*x6720))+((r02*x6718))+((r01*x6721)));
evalcond[2]=((((-1.0)*r11*x6723))+((r10*x6722))+((r12*x6717)));
evalcond[3]=((1.0)+((r11*x6721))+(((-1.0)*cj5*r10*x6720))+((r12*x6718)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6718*x6719))+((r02*x6717))+(((-1.0)*r01*x6723)));
evalcond[5]=(((r20*x6722))+(((-1.0)*r21*x6723))+(((-1.0)*sj1*sj2))+((r22*x6717))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6724=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6724.valid){
continue;
}
CheckValue<IkReal> x6725 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6724.value)))+(x6725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6726=IKcos(j4);
IkReal x6727=IKsin(j4);
IkReal x6728=(cj5*r00);
IkReal x6729=((1.0)*x6726);
IkReal x6730=(sj5*x6726);
IkReal x6731=(cj5*x6727);
IkReal x6732=((1.0)*sj5*x6727);
evalcond[0]=(((r21*x6730))+((r22*x6727))+(((-1.0)*cj5*r20*x6729)));
evalcond[1]=(((r02*x6727))+((r01*x6730))+(((-1.0)*x6728*x6729)));
evalcond[2]=(((r12*x6726))+(((-1.0)*r11*x6732))+((r10*x6731)));
evalcond[3]=((1.0)+((r12*x6727))+((r11*x6730))+(((-1.0)*cj5*r10*x6729)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x6732))+((cj1*sj2))+((r02*x6726))+((x6727*x6728)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x6726))+((r20*x6731))+((cj1*cj2))+(((-1.0)*r21*x6732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6733=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6733;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x6733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6734=((1.0)*cj5);
IkReal x6735=((((-1.0)*r01*x6734))+(((-1.0)*r00*sj5)));
j4eval[0]=x6735;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6734))+((r21*sj5))))));
j4eval[2]=IKsign(x6735);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6736=cj5*cj5;
IkReal x6737=r11*r11;
IkReal x6738=(r11*sj5);
IkReal x6739=(cj5*r10);
IkReal x6740=((r12*r12)+(((-2.0)*x6738*x6739))+x6737+((x6736*(r10*r10)))+(((-1.0)*x6736*x6737)));
j4eval[0]=x6740;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6739))+x6738))));
j4eval[2]=IKsign(x6740);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6741=cj5*cj5;
IkReal x6742=r11*r11;
IkReal x6743=(cj5*r10);
IkReal x6744=(r11*sj5);
CheckValue<IkReal> x6745=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6741*(r10*r10)))+(((-1.0)*x6741*x6742))+x6742+(((-2.0)*x6743*x6744)))),-1);
if(!x6745.valid){
continue;
}
CheckValue<IkReal> x6746 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6743))+x6744)),IKFAST_ATAN2_MAGTHRESH);
if(!x6746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6745.value)))+(x6746.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6747=IKcos(j4);
IkReal x6748=IKsin(j4);
IkReal x6749=(cj5*r00);
IkReal x6750=((1.0)*sj2);
IkReal x6751=((1.0)*x6747);
IkReal x6752=(sj5*x6747);
IkReal x6753=(cj5*x6748);
IkReal x6754=((1.0)*sj5*x6748);
evalcond[0]=(((r21*x6752))+(((-1.0)*cj5*r20*x6751))+((r22*x6748)));
evalcond[1]=(((r02*x6748))+((r01*x6752))+(((-1.0)*x6749*x6751)));
evalcond[2]=(((r12*x6747))+((r10*x6753))+(((-1.0)*r11*x6754)));
evalcond[3]=((-1.0)+((r11*x6752))+((r12*x6748))+(((-1.0)*cj5*r10*x6751)));
evalcond[4]=(((r20*x6753))+((cj1*cj2))+((r22*x6747))+(((-1.0)*r21*x6754))+(((-1.0)*sj1*x6750)));
evalcond[5]=(((r02*x6747))+((x6748*x6749))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x6750))+(((-1.0)*r01*x6754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6755=((1.0)*cj5);
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6755)))),-1);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x6755))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6756.value)))+(x6757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6758=IKcos(j4);
IkReal x6759=IKsin(j4);
IkReal x6760=(cj5*r00);
IkReal x6761=((1.0)*sj2);
IkReal x6762=((1.0)*x6758);
IkReal x6763=(sj5*x6758);
IkReal x6764=(cj5*x6759);
IkReal x6765=((1.0)*sj5*x6759);
evalcond[0]=(((r22*x6759))+((r21*x6763))+(((-1.0)*cj5*r20*x6762)));
evalcond[1]=((((-1.0)*x6760*x6762))+((r01*x6763))+((r02*x6759)));
evalcond[2]=(((r12*x6758))+((r10*x6764))+(((-1.0)*r11*x6765)));
evalcond[3]=((-1.0)+((r12*x6759))+((r11*x6763))+(((-1.0)*cj5*r10*x6762)));
evalcond[4]=((((-1.0)*sj1*x6761))+((r22*x6758))+((r20*x6764))+((cj1*cj2))+(((-1.0)*r21*x6765)));
evalcond[5]=(((x6759*x6760))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x6761))+(((-1.0)*r01*x6765))+((r02*x6758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6766=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6766.valid){
continue;
}
CheckValue<IkReal> x6767 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6766.value)))+(x6767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6768=IKcos(j4);
IkReal x6769=IKsin(j4);
IkReal x6770=(cj5*r00);
IkReal x6771=((1.0)*sj2);
IkReal x6772=((1.0)*x6768);
IkReal x6773=(sj5*x6768);
IkReal x6774=(cj5*x6769);
IkReal x6775=((1.0)*sj5*x6769);
evalcond[0]=(((r22*x6769))+(((-1.0)*cj5*r20*x6772))+((r21*x6773)));
evalcond[1]=((((-1.0)*x6770*x6772))+((r02*x6769))+((r01*x6773)));
evalcond[2]=(((r12*x6768))+(((-1.0)*r11*x6775))+((r10*x6774)));
evalcond[3]=((-1.0)+((r11*x6773))+((r12*x6769))+(((-1.0)*cj5*r10*x6772)));
evalcond[4]=(((r22*x6768))+(((-1.0)*r21*x6775))+((cj1*cj2))+((r20*x6774))+(((-1.0)*sj1*x6771)));
evalcond[5]=((((-1.0)*r01*x6775))+(((-1.0)*cj2*sj1))+((x6769*x6770))+((r02*x6768))+(((-1.0)*cj1*x6771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6777 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6777)==0){
continue;
}
IkReal x6776=pow(x6777,-0.5);
CheckValue<IkReal> x6778 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6778.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6778.value));
IkReal gconst145=((-1.0)*r01*x6776);
IkReal gconst146=(r00*x6776);
CheckValue<IkReal> x6779 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6779.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6779.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6782 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6782.valid){
continue;
}
IkReal x6780=((-1.0)*(x6782.value));
IkReal x6781=x6776;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6780;
IkReal gconst144=x6780;
IkReal gconst145=((-1.0)*r01*x6781);
IkReal gconst146=(r00*x6781);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6783=((1.0)*sj0);
IkReal x6784=((1.0)*cj0);
CheckValue<IkReal> x6785 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r10*x6783))+((cj0*gconst145*r01))+(((-1.0)*gconst146*r00*x6784))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r12*x6783))+(((-1.0)*r02*x6784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6785.valid){
continue;
}
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x6786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6785.value)+(((1.5707963267949)*(x6786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6787=IKcos(j4);
IkReal x6788=IKsin(j4);
IkReal x6789=(cj2*sj1);
IkReal x6790=(gconst145*r21);
IkReal x6791=(gconst146*r00);
IkReal x6792=(gconst145*r11);
IkReal x6793=(cj1*sj2);
IkReal x6794=(gconst145*r01);
IkReal x6795=((1.0)*x6788);
IkReal x6796=(gconst146*x6788);
IkReal x6797=((1.0)*gconst146*x6787);
evalcond[0]=(((x6787*x6790))+((r22*x6788))+(((-1.0)*r20*x6797)));
evalcond[1]=((((-1.0)*r10*x6797))+((r12*x6788))+cj0+((x6787*x6792)));
evalcond[2]=((((-1.0)*sj0))+((x6787*x6794))+(((-1.0)*x6787*x6791))+((r02*x6788)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x6796))+((r22*x6787))+(((-1.0)*x6790*x6795))+((cj1*cj2)));
evalcond[4]=(((cj0*x6789))+((r02*x6787))+((cj0*x6793))+((x6788*x6791))+(((-1.0)*x6794*x6795)));
evalcond[5]=(((r12*x6787))+(((-1.0)*x6792*x6795))+((sj0*x6793))+((sj0*x6789))+((r10*x6796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6798.value)))+(x6799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6800=IKcos(j4);
IkReal x6801=IKsin(j4);
IkReal x6802=(cj2*sj1);
IkReal x6803=(gconst145*r21);
IkReal x6804=(gconst146*r00);
IkReal x6805=(gconst145*r11);
IkReal x6806=(cj1*sj2);
IkReal x6807=(gconst145*r01);
IkReal x6808=((1.0)*x6801);
IkReal x6809=(gconst146*x6801);
IkReal x6810=((1.0)*gconst146*x6800);
evalcond[0]=(((r22*x6801))+((x6800*x6803))+(((-1.0)*r20*x6810)));
evalcond[1]=((((-1.0)*r10*x6810))+((x6800*x6805))+cj0+((r12*x6801)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6800*x6804))+((x6800*x6807))+((r02*x6801)));
evalcond[3]=(((r22*x6800))+(((-1.0)*x6803*x6808))+(((-1.0)*sj1*sj2))+((r20*x6809))+((cj1*cj2)));
evalcond[4]=(((x6801*x6804))+(((-1.0)*x6807*x6808))+((cj0*x6806))+((cj0*x6802))+((r02*x6800)));
evalcond[5]=(((sj0*x6802))+((sj0*x6806))+((r10*x6809))+((r12*x6800))+(((-1.0)*x6805*x6808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6812 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6812)==0){
continue;
}
IkReal x6811=pow(x6812,-0.5);
CheckValue<IkReal> x6813 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6813.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6813.value))));
IkReal gconst148=((1.0)*r01*x6811);
IkReal gconst149=((-1.0)*r00*x6811);
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6814.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6817 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6817.valid){
continue;
}
IkReal x6815=((1.0)*(x6817.value));
IkReal x6816=x6811;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6815)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6815)));
IkReal gconst148=((1.0)*r01*x6816);
IkReal gconst149=((-1.0)*r00*x6816);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6820 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6820.valid){
continue;
}
IkReal x6818=((1.0)*(x6820.value));
IkReal x6819=x6811;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6818)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6818)));
IkReal gconst148=((1.0)*r01*x6819);
IkReal gconst149=((-1.0)*r00*x6819);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6823 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6823.valid){
continue;
}
IkReal x6821=((1.0)*(x6823.value));
IkReal x6822=x6811;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6821)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6821)));
IkReal gconst148=((1.0)*r01*x6822);
IkReal gconst149=((-1.0)*r00*x6822);
IkReal x6824=r02*r02;
IkReal x6825=(r12*sj0);
IkReal x6826=((1.0)*cj0);
IkReal x6827=x6811;
j4eval[0]=((IKabs((((r02*x6825*x6827))+((cj0*x6824*x6827))+(((-1.0)*x6826*x6827)))))+(IKabs(((((-1.0)*r02*x6826))+(((-1.0)*x6825))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6828=((1.0)*sj0);
IkReal x6829=((1.0)*gconst149);
CheckValue<IkReal> x6830=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x6829)))),-1);
if(!x6830.valid){
continue;
}
CheckValue<IkReal> x6831 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r10*x6828))+((cj0*gconst148*r01))+(((-1.0)*cj0*r00*x6829))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*r12*x6828))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6831.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6830.value)))+(x6831.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6832=IKcos(j4);
IkReal x6833=IKsin(j4);
IkReal x6834=(cj2*sj1);
IkReal x6835=(cj1*sj2);
IkReal x6836=(gconst148*x6832);
IkReal x6837=(gconst149*x6833);
IkReal x6838=((1.0)*gconst148*x6833);
IkReal x6839=((1.0)*gconst149*x6832);
evalcond[0]=(((r22*x6833))+((r21*x6836))+(((-1.0)*r20*x6839)));
evalcond[1]=(cj0+((r11*x6836))+(((-1.0)*r10*x6839))+((r12*x6833)));
evalcond[2]=(((r02*x6833))+(((-1.0)*sj0))+((r01*x6836))+(((-1.0)*r00*x6839)));
evalcond[3]=(((r22*x6832))+(((-1.0)*sj1*sj2))+((r20*x6837))+((cj1*cj2))+(((-1.0)*r21*x6838)));
evalcond[4]=(((r02*x6832))+((r00*x6837))+(((-1.0)*r01*x6838))+((cj0*x6834))+((cj0*x6835)));
evalcond[5]=(((sj0*x6834))+((sj0*x6835))+(((-1.0)*r11*x6838))+((r10*x6837))+((r12*x6832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6840 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6840.valid){
continue;
}
CheckValue<IkReal> x6841=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x6841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6840.value)+(((1.5707963267949)*(x6841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6842=IKcos(j4);
IkReal x6843=IKsin(j4);
IkReal x6844=(cj2*sj1);
IkReal x6845=(cj1*sj2);
IkReal x6846=(gconst148*x6842);
IkReal x6847=(gconst149*x6843);
IkReal x6848=((1.0)*gconst148*x6843);
IkReal x6849=((1.0)*gconst149*x6842);
evalcond[0]=(((r22*x6843))+((r21*x6846))+(((-1.0)*r20*x6849)));
evalcond[1]=(cj0+((r11*x6846))+((r12*x6843))+(((-1.0)*r10*x6849)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6849))+((r01*x6846))+((r02*x6843)));
evalcond[3]=(((r22*x6842))+(((-1.0)*r21*x6848))+(((-1.0)*sj1*sj2))+((r20*x6847))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x6848))+((cj0*x6845))+((cj0*x6844))+((r00*x6847))+((r02*x6842)));
evalcond[5]=(((r12*x6842))+(((-1.0)*r11*x6848))+((r10*x6847))+((sj0*x6845))+((sj0*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6850=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6850.valid){
continue;
}
CheckValue<IkReal> x6851 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6850.value)))+(x6851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6852=IKcos(j4);
IkReal x6853=IKsin(j4);
IkReal x6854=(cj2*sj1);
IkReal x6855=(cj1*sj2);
IkReal x6856=(gconst148*x6852);
IkReal x6857=(gconst149*x6853);
IkReal x6858=((1.0)*gconst148*x6853);
IkReal x6859=((1.0)*gconst149*x6852);
evalcond[0]=(((r21*x6856))+((r22*x6853))+(((-1.0)*r20*x6859)));
evalcond[1]=(cj0+(((-1.0)*r10*x6859))+((r12*x6853))+((r11*x6856)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6853))+((r01*x6856))+(((-1.0)*r00*x6859)));
evalcond[3]=(((r22*x6852))+(((-1.0)*sj1*sj2))+((r20*x6857))+((cj1*cj2))+(((-1.0)*r21*x6858)));
evalcond[4]=(((r02*x6852))+((r00*x6857))+(((-1.0)*r01*x6858))+((cj0*x6854))+((cj0*x6855)));
evalcond[5]=(((sj0*x6854))+((sj0*x6855))+((r10*x6857))+((r12*x6852))+(((-1.0)*r11*x6858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6860=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6860;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6861=((1.0)*cj5);
IkReal x6862=((((-1.0)*r21*x6861))+(((-1.0)*r20*sj5)));
j4eval[0]=x6862;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6861))))));
j4eval[2]=IKsign(x6862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6863=cj5*cj5;
IkReal x6864=r01*r01;
IkReal x6865=(cj5*r00);
IkReal x6866=(r01*sj5);
IkReal x6867=((((-2.0)*x6865*x6866))+(((-1.0)*x6863*x6864))+x6864+(r02*r02)+((x6863*(r00*r00))));
j4eval[0]=x6867;
j4eval[1]=IKsign(x6867);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6865))+x6866))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6868=cj5*cj5;
IkReal x6869=r01*r01;
IkReal x6870=(r01*sj5);
IkReal x6871=(cj5*r00);
CheckValue<IkReal> x6872 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6871))+x6870)),IKFAST_ATAN2_MAGTHRESH);
if(!x6872.valid){
continue;
}
CheckValue<IkReal> x6873=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6870*x6871))+x6869+(((-1.0)*x6868*x6869))+(r02*r02)+((x6868*(r00*r00))))),-1);
if(!x6873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6872.value)+(((1.5707963267949)*(x6873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6874=IKcos(j4);
IkReal x6875=IKsin(j4);
IkReal x6876=(cj5*r00);
IkReal x6877=((1.0)*x6874);
IkReal x6878=(sj5*x6874);
IkReal x6879=(cj5*x6875);
IkReal x6880=((1.0)*sj5*x6875);
evalcond[0]=(((r22*x6875))+((r21*x6878))+(((-1.0)*cj5*r20*x6877)));
evalcond[1]=(((r11*x6878))+((r12*x6875))+(((-1.0)*cj5*r10*x6877)));
evalcond[2]=(((r02*x6874))+((x6875*x6876))+(((-1.0)*r01*x6880)));
evalcond[3]=((-1.0)+((r02*x6875))+(((-1.0)*x6876*x6877))+((r01*x6878)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x6874))+(((-1.0)*r11*x6880))+((r10*x6879)));
evalcond[5]=(((r22*x6874))+(((-1.0)*r21*x6880))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6881=((1.0)*cj5);
CheckValue<IkReal> x6882 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x6881)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6881))+(((-1.0)*r20*sj5)))),-1);
if(!x6883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6882.value)+(((1.5707963267949)*(x6883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6884=IKcos(j4);
IkReal x6885=IKsin(j4);
IkReal x6886=(cj5*r00);
IkReal x6887=((1.0)*x6884);
IkReal x6888=(sj5*x6884);
IkReal x6889=(cj5*x6885);
IkReal x6890=((1.0)*sj5*x6885);
evalcond[0]=((((-1.0)*cj5*r20*x6887))+((r22*x6885))+((r21*x6888)));
evalcond[1]=(((r11*x6888))+(((-1.0)*cj5*r10*x6887))+((r12*x6885)));
evalcond[2]=((((-1.0)*r01*x6890))+((r02*x6884))+((x6885*x6886)));
evalcond[3]=((-1.0)+(((-1.0)*x6886*x6887))+((r02*x6885))+((r01*x6888)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x6890))+((r12*x6884))+((r10*x6889)));
evalcond[5]=(((r20*x6889))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6890))+((r22*x6884))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6891 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6891.valid){
continue;
}
CheckValue<IkReal> x6892=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6891.value)+(((1.5707963267949)*(x6892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6893=IKcos(j4);
IkReal x6894=IKsin(j4);
IkReal x6895=(cj5*r00);
IkReal x6896=((1.0)*x6893);
IkReal x6897=(sj5*x6893);
IkReal x6898=(cj5*x6894);
IkReal x6899=((1.0)*sj5*x6894);
evalcond[0]=((((-1.0)*cj5*r20*x6896))+((r22*x6894))+((r21*x6897)));
evalcond[1]=(((r12*x6894))+(((-1.0)*cj5*r10*x6896))+((r11*x6897)));
evalcond[2]=((((-1.0)*r01*x6899))+((x6894*x6895))+((r02*x6893)));
evalcond[3]=((-1.0)+(((-1.0)*x6895*x6896))+((r02*x6894))+((r01*x6897)));
evalcond[4]=(((cj2*sj1))+((r10*x6898))+((r12*x6893))+((cj1*sj2))+(((-1.0)*r11*x6899)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x6899))+((r22*x6893))+((cj1*cj2))+((r20*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6900=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6900;
j4eval[1]=IKsign(x6900);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6901=((1.0)*cj5);
IkReal x6902=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6901)));
j4eval[0]=x6902;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6901)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6903=cj5*cj5;
IkReal x6904=r01*r01;
IkReal x6905=(r01*sj5);
IkReal x6906=(cj5*r00);
IkReal x6907=((((2.0)*x6905*x6906))+(((-1.0)*(r02*r02)))+(((-1.0)*x6904))+((x6903*x6904))+(((-1.0)*x6903*(r00*r00))));
j4eval[0]=x6907;
j4eval[1]=IKsign(x6907);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6906))+x6905))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6908=cj5*cj5;
IkReal x6909=r01*r01;
IkReal x6910=(r01*sj5);
IkReal x6911=(cj5*r00);
CheckValue<IkReal> x6912 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6911))+x6910)),IKFAST_ATAN2_MAGTHRESH);
if(!x6912.valid){
continue;
}
CheckValue<IkReal> x6913=IKPowWithIntegerCheck(IKsign(((((2.0)*x6910*x6911))+(((-1.0)*(r02*r02)))+((x6908*x6909))+(((-1.0)*x6909))+(((-1.0)*x6908*(r00*r00))))),-1);
if(!x6913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6912.value)+(((1.5707963267949)*(x6913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6914=IKcos(j4);
IkReal x6915=IKsin(j4);
IkReal x6916=(cj5*r00);
IkReal x6917=((1.0)*sj2);
IkReal x6918=((1.0)*x6914);
IkReal x6919=(sj5*x6914);
IkReal x6920=(cj5*x6915);
IkReal x6921=((1.0)*sj5*x6915);
evalcond[0]=(((r21*x6919))+(((-1.0)*cj5*r20*x6918))+((r22*x6915)));
evalcond[1]=(((r12*x6915))+((r11*x6919))+(((-1.0)*cj5*r10*x6918)));
evalcond[2]=((((-1.0)*r01*x6921))+((r02*x6914))+((x6915*x6916)));
evalcond[3]=((1.0)+(((-1.0)*x6916*x6918))+((r02*x6915))+((r01*x6919)));
evalcond[4]=((((-1.0)*sj1*x6917))+((r20*x6920))+((r22*x6914))+((cj1*cj2))+(((-1.0)*r21*x6921)));
evalcond[5]=((((-1.0)*cj1*x6917))+(((-1.0)*cj2*sj1))+((r10*x6920))+((r12*x6914))+(((-1.0)*r11*x6921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6922=((1.0)*cj5);
CheckValue<IkReal> x6923 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6922)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6923.valid){
continue;
}
CheckValue<IkReal> x6924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6922)))),-1);
if(!x6924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6923.value)+(((1.5707963267949)*(x6924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6925=IKcos(j4);
IkReal x6926=IKsin(j4);
IkReal x6927=(cj5*r00);
IkReal x6928=((1.0)*sj2);
IkReal x6929=((1.0)*x6925);
IkReal x6930=(sj5*x6925);
IkReal x6931=(cj5*x6926);
IkReal x6932=((1.0)*sj5*x6926);
evalcond[0]=((((-1.0)*cj5*r20*x6929))+((r22*x6926))+((r21*x6930)));
evalcond[1]=((((-1.0)*cj5*r10*x6929))+((r11*x6930))+((r12*x6926)));
evalcond[2]=(((x6926*x6927))+(((-1.0)*r01*x6932))+((r02*x6925)));
evalcond[3]=((1.0)+(((-1.0)*x6927*x6929))+((r01*x6930))+((r02*x6926)));
evalcond[4]=(((r20*x6931))+((r22*x6925))+(((-1.0)*sj1*x6928))+((cj1*cj2))+(((-1.0)*r21*x6932)));
evalcond[5]=((((-1.0)*cj1*x6928))+((r10*x6931))+(((-1.0)*cj2*sj1))+((r12*x6925))+(((-1.0)*r11*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6933=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6933.valid){
continue;
}
CheckValue<IkReal> x6934 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6933.value)))+(x6934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6935=IKcos(j4);
IkReal x6936=IKsin(j4);
IkReal x6937=(cj5*r00);
IkReal x6938=((1.0)*sj2);
IkReal x6939=((1.0)*x6935);
IkReal x6940=(sj5*x6935);
IkReal x6941=(cj5*x6936);
IkReal x6942=((1.0)*sj5*x6936);
evalcond[0]=((((-1.0)*cj5*r20*x6939))+((r22*x6936))+((r21*x6940)));
evalcond[1]=((((-1.0)*cj5*r10*x6939))+((r12*x6936))+((r11*x6940)));
evalcond[2]=(((r02*x6935))+(((-1.0)*r01*x6942))+((x6936*x6937)));
evalcond[3]=((1.0)+(((-1.0)*x6937*x6939))+((r01*x6940))+((r02*x6936)));
evalcond[4]=((((-1.0)*r21*x6942))+((r22*x6935))+((r20*x6941))+(((-1.0)*sj1*x6938))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x6938))+(((-1.0)*r11*x6942))+((r10*x6941))+(((-1.0)*cj2*sj1))+((r12*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6943=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6943);
rxp1_1=(px*r21);
rxp1_2=(r11*x6943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6944=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6944);
rxp1_1=(px*r21);
rxp1_2=(r11*x6944);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6945=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6945);
rxp1_1=(px*r21);
rxp1_2=(r11*x6945);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6948=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6948.valid){
continue;
}
IkReal x6946=x6948.value;
IkReal x6947=((1.0)*sj0*x6946);
sj4array[0]=((((-1.0)*cj2*sj1*x6947))+(((-1.0)*cj1*sj2*x6947)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6949=IKcos(j4);
IkReal x6950=IKsin(j4);
IkReal x6951=(r21*sj5);
IkReal x6952=((1.0)*cj5*x6949);
evalcond[0]=(r02*x6949);
evalcond[1]=((((-1.0)*sj0))+((r02*x6950)));
evalcond[2]=(((x6949*x6951))+(((-1.0)*r20*x6952)));
evalcond[3]=(((r11*sj5*x6949))+(((-1.0)*r10*x6952)));
evalcond[4]=((((-1.0)*x6950*x6951))+(((-1.0)*sj1*sj2))+((cj5*r20*x6950))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6954=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6954.valid){
continue;
}
IkReal x6953=x6954.value;
sj4array[0]=(((sj1*sj2*x6953))+(((-1.0)*cj1*cj2*x6953)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6955=IKcos(j4);
IkReal x6956=IKsin(j4);
IkReal x6957=(r11*sj5);
IkReal x6958=((1.0)*cj5*x6955);
evalcond[0]=(r02*x6955);
evalcond[1]=((((-1.0)*sj0))+((r02*x6956)));
evalcond[2]=((((-1.0)*r20*x6958))+((r21*sj5*x6955)));
evalcond[3]=(((x6955*x6957))+(((-1.0)*r10*x6958)));
evalcond[4]=((((-1.0)*x6956*x6957))+((cj5*r10*x6956))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6959=IKPowWithIntegerCheck(r02,-1);
if(!x6959.valid){
continue;
}
sj4array[0]=(sj0*(x6959.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6960=IKcos(j4);
IkReal x6961=IKsin(j4);
IkReal x6962=(sj5*x6960);
IkReal x6963=(cj5*x6961);
IkReal x6964=((1.0)*sj5*x6961);
IkReal x6965=((1.0)*cj5*x6960);
evalcond[0]=(r02*x6960);
evalcond[1]=(((r21*x6962))+(((-1.0)*r20*x6965)));
evalcond[2]=((((-1.0)*r10*x6965))+((r11*x6962)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x6964))+((cj1*cj2))+((r20*x6963)));
evalcond[4]=(((r10*x6963))+(((-1.0)*r11*x6964))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6966=((1.0)*sj0);
IkReal x6967=((1.0)*cj0);
CheckValue<IkReal> x6968=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6968.valid){
continue;
}
CheckValue<IkReal> x6969 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6967))+(((-1.0)*cj5*r10*x6966))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r02*x6967))+(((-1.0)*r12*x6966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6968.value)))+(x6969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6970=IKcos(j4);
IkReal x6971=IKsin(j4);
IkReal x6972=(cj5*r00);
IkReal x6973=(cj2*sj1);
IkReal x6974=(cj1*sj2);
IkReal x6975=((1.0)*x6970);
IkReal x6976=(sj5*x6970);
IkReal x6977=(cj5*x6971);
IkReal x6978=((1.0)*sj5*x6971);
evalcond[0]=(((r21*x6976))+((r22*x6971))+(((-1.0)*cj5*r20*x6975)));
evalcond[1]=(((r12*x6971))+cj0+(((-1.0)*cj5*r10*x6975))+((r11*x6976)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6976))+((r02*x6971))+(((-1.0)*x6972*x6975)));
evalcond[3]=(((r22*x6970))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6978))+((cj1*cj2))+((r20*x6977)));
evalcond[4]=(((cj0*x6974))+((cj0*x6973))+((r02*x6970))+((x6971*x6972))+(((-1.0)*r01*x6978)));
evalcond[5]=(((r12*x6970))+(((-1.0)*r11*x6978))+((sj0*x6974))+((sj0*x6973))+((r10*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
CheckValue<IkReal> x6980=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6979.value)+(((1.5707963267949)*(x6980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6981=IKcos(j4);
IkReal x6982=IKsin(j4);
IkReal x6983=(cj5*r00);
IkReal x6984=(cj2*sj1);
IkReal x6985=(cj1*sj2);
IkReal x6986=((1.0)*x6981);
IkReal x6987=(sj5*x6981);
IkReal x6988=(cj5*x6982);
IkReal x6989=((1.0)*sj5*x6982);
evalcond[0]=(((r22*x6982))+(((-1.0)*cj5*r20*x6986))+((r21*x6987)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x6986))+((r12*x6982))+((r11*x6987)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6982))+((r01*x6987))+(((-1.0)*x6983*x6986)));
evalcond[3]=((((-1.0)*r21*x6989))+((r22*x6981))+(((-1.0)*sj1*sj2))+((r20*x6988))+((cj1*cj2)));
evalcond[4]=(((x6982*x6983))+((r02*x6981))+((cj0*x6984))+((cj0*x6985))+(((-1.0)*r01*x6989)));
evalcond[5]=(((r10*x6988))+(((-1.0)*r11*x6989))+((r12*x6981))+((sj0*x6984))+((sj0*x6985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6990 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6990.valid){
continue;
}
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6990.value)+(((1.5707963267949)*(x6991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6992=IKcos(j4);
IkReal x6993=IKsin(j4);
IkReal x6994=(cj5*r00);
IkReal x6995=(cj2*sj1);
IkReal x6996=(cj1*sj2);
IkReal x6997=((1.0)*x6992);
IkReal x6998=(sj5*x6992);
IkReal x6999=(cj5*x6993);
IkReal x7000=((1.0)*sj5*x6993);
evalcond[0]=(((r21*x6998))+(((-1.0)*cj5*r20*x6997))+((r22*x6993)));
evalcond[1]=(((r11*x6998))+cj0+((r12*x6993))+(((-1.0)*cj5*r10*x6997)));
evalcond[2]=(((r02*x6993))+(((-1.0)*sj0))+(((-1.0)*x6994*x6997))+((r01*x6998)));
evalcond[3]=(((r20*x6999))+(((-1.0)*r21*x7000))+(((-1.0)*sj1*sj2))+((r22*x6992))+((cj1*cj2)));
evalcond[4]=(((r02*x6992))+((cj0*x6996))+((cj0*x6995))+(((-1.0)*r01*x7000))+((x6993*x6994)));
evalcond[5]=((((-1.0)*r11*x7000))+((sj0*x6996))+((sj0*x6995))+((r12*x6992))+((r10*x6999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7001=cj5*cj5;
IkReal x7002=r21*r21;
IkReal x7003=(sj1*sj2);
IkReal x7004=(r21*sj5);
IkReal x7005=(cj1*cj2);
IkReal x7006=(cj5*r20);
CheckValue<IkReal> x7007 = IKatan2WithCheck(IkReal(((((-1.0)*x7005*x7006))+((x7003*x7006))+(((-1.0)*x7003*x7004))+((x7004*x7005)))),IkReal((((r22*x7003))+(((-1.0)*r22*x7005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7007.valid){
continue;
}
CheckValue<IkReal> x7008=IKPowWithIntegerCheck(IKsign((x7002+(r22*r22)+(((-2.0)*x7004*x7006))+(((-1.0)*x7001*x7002))+((x7001*(r20*r20))))),-1);
if(!x7008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7007.value)+(((1.5707963267949)*(x7008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7009=IKcos(j4);
IkReal x7010=IKsin(j4);
IkReal x7011=(r21*sj5);
IkReal x7012=(cj5*r20);
evalcond[0]=((((-1.0)*x7009*x7012))+((r22*x7010))+((x7009*x7011)));
evalcond[1]=(((x7010*x7012))+(((-1.0)*sj1*sj2))+(((-1.0)*x7010*x7011))+((r22*x7009))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7013=(cj4*cj5);
IkReal x7014=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r00*x7013))+((r01*x7014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7014))+((r10*x7013))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r00*x7013))+((r01*x7014))))+IKsqr(((((-1.0)*r11*x7014))+((r10*x7013))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r00*x7013))+((r01*x7014))), ((((-1.0)*r11*x7014))+((r10*x7013))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7015=IKcos(j0);
IkReal x7016=IKsin(j0);
IkReal x7017=((0.238)*sj2);
IkReal x7018=(r00*sj5);
IkReal x7019=(cj5*r00);
IkReal x7020=((1.0)*sj2);
IkReal x7021=((1.0)*sj5);
IkReal x7022=((1.0)*cj4);
IkReal x7023=(cj5*r11);
IkReal x7024=(cj5*r10);
IkReal x7025=(cj5*r01);
IkReal x7026=(cj4*sj5);
IkReal x7027=(sj1*x7016);
IkReal x7028=(cj1*x7015);
IkReal x7029=(cj1*x7016);
IkReal x7030=(sj1*x7015);
IkReal x7031=(cj2*x7030);
evalcond[0]=(x7015+((r11*x7026))+((r12*sj4))+(((-1.0)*x7022*x7024)));
evalcond[1]=((((-1.0)*x7019*x7022))+((r01*x7026))+((r02*sj4))+(((-1.0)*x7016)));
evalcond[2]=(((cj2*x7028))+(((-1.0)*x7025))+(((-1.0)*x7020*x7030))+(((-1.0)*x7018)));
evalcond[3]=((((-1.0)*r10*x7021))+((cj2*x7029))+(((-1.0)*x7023))+(((-1.0)*x7020*x7027)));
evalcond[4]=(x7031+(((-1.0)*r01*sj4*x7021))+((sj4*x7019))+((sj2*x7028))+((cj4*r02)));
evalcond[5]=(((cj2*x7027))+((sj4*x7024))+(((-1.0)*r11*sj4*x7021))+((sj2*x7029))+((cj4*r12)));
evalcond[6]=((((-0.095)*x7018))+(((0.238)*x7031))+(((-1.0)*px))+((x7017*x7028))+(((-0.095)*x7025))+(((0.265)*x7030))+(((-0.113)*x7016)));
evalcond[7]=((((-0.095)*r10*sj5))+(((-1.0)*py))+((x7017*x7029))+(((-0.095)*x7023))+(((0.238)*cj2*x7027))+(((0.113)*x7015))+(((0.265)*x7027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7032=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7032.valid){
continue;
}
CheckValue<IkReal> x7033 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7033.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7032.value)))+(x7033.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7034=IKcos(j0);
IkReal x7035=IKsin(j0);
IkReal x7036=((0.238)*sj2);
IkReal x7037=((0.238)*cj2);
IkReal x7038=((1.0)*sj2);
IkReal x7039=(cj5*r11);
IkReal x7040=(r00*sj5);
IkReal x7041=(r10*sj5);
IkReal x7042=(cj5*r01);
IkReal x7043=(sj1*x7035);
IkReal x7044=(cj1*x7034);
IkReal x7045=(cj1*x7035);
IkReal x7046=(sj1*x7034);
evalcond[0]=(((cj2*x7044))+(((-1.0)*x7040))+(((-1.0)*x7042))+(((-1.0)*x7038*x7046)));
evalcond[1]=(((cj2*x7045))+(((-1.0)*x7041))+(((-1.0)*x7039))+(((-1.0)*x7038*x7043)));
evalcond[2]=(((x7036*x7044))+(((-0.095)*x7042))+(((-0.095)*x7040))+((x7037*x7046))+(((-1.0)*px))+(((-0.113)*x7035))+(((0.265)*x7046)));
evalcond[3]=((((0.113)*x7034))+(((-0.095)*x7039))+((x7036*x7045))+(((-0.095)*x7041))+((x7037*x7043))+(((-1.0)*py))+(((0.265)*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7047=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7047;
j4eval[1]=IKsign(x7047);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7048=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7048;
j4eval[1]=IKsign(x7048);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7049=((1.0)*sj0);
IkReal x7050=((1.0)*cj0);
IkReal x7051=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7051;
j4eval[1]=((IKabs(((((-1.0)*r12*x7049))+(((-1.0)*r02*x7050)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7049))+(((-1.0)*cj5*r00*x7050))))));
j4eval[2]=IKsign(x7051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7052=((-1.0)*r20);
IkReal x7054 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7054)==0){
continue;
}
IkReal x7053=pow(x7054,-0.5);
CheckValue<IkReal> x7055 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7052),IKFAST_ATAN2_MAGTHRESH);
if(!x7055.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7055.value));
IkReal gconst133=(r21*x7053);
IkReal gconst134=(x7052*x7053);
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7056.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7057=((-1.0)*r20);
IkReal x7058=x7053;
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7057),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
IkReal x7059=((-1.0)*(x7060.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7059;
IkReal gconst132=x7059;
IkReal gconst133=(r21*x7058);
IkReal gconst134=(x7057*x7058);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7061=((-1.0)*r20);
IkReal x7062=x7053;
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7061),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
IkReal x7063=((-1.0)*(x7064.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7063;
IkReal gconst132=x7063;
IkReal gconst133=(r21*x7062);
IkReal gconst134=(x7061*x7062);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7065=((-1.0)*r20);
IkReal x7066=x7053;
CheckValue<IkReal> x7068 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7065),IKFAST_ATAN2_MAGTHRESH);
if(!x7068.valid){
continue;
}
IkReal x7067=((-1.0)*(x7068.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7067;
IkReal gconst132=x7067;
IkReal gconst133=(r21*x7066);
IkReal gconst134=(x7065*x7066);
IkReal x7069=r22*r22;
CheckValue<IkReal> x7072=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7069))),-1);
if(!x7072.valid){
continue;
}
IkReal x7070=x7072.value;
IkReal x7071=((((2.0)*x7070*(r20*r20)*(r21*r21)))+x7069+((x7070*(r20*r20*r20*r20)))+((x7070*(r21*r21*r21*r21))));
j4eval[0]=x7071;
j4eval[1]=IKsign(x7071);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7073=(gconst134*r20);
IkReal x7074=(cj1*cj2);
IkReal x7075=(gconst133*r21);
IkReal x7076=(sj1*sj2);
CheckValue<IkReal> x7077 = IKatan2WithCheck(IkReal((((x7074*x7075))+(((-1.0)*x7075*x7076))+((x7073*x7076))+(((-1.0)*x7073*x7074)))),IkReal((((r22*x7076))+(((-1.0)*r22*x7074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7077.valid){
continue;
}
CheckValue<IkReal> x7078=IKPowWithIntegerCheck(IKsign(((x7073*x7073)+(((-2.0)*x7073*x7075))+(r22*r22)+(x7075*x7075))),-1);
if(!x7078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7077.value)+(((1.5707963267949)*(x7078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7079=IKcos(j4);
IkReal x7080=IKsin(j4);
IkReal x7081=(gconst134*r10);
IkReal x7082=(cj2*sj1);
IkReal x7083=(gconst134*r00);
IkReal x7084=(gconst134*r20);
IkReal x7085=(cj1*sj2);
IkReal x7086=(gconst133*x7079);
IkReal x7087=((1.0)*x7079);
IkReal x7088=((1.0)*gconst133*x7080);
evalcond[0]=((((-1.0)*x7084*x7087))+((r21*x7086))+((r22*x7080)));
evalcond[1]=(((r11*x7086))+cj0+((r12*x7080))+(((-1.0)*x7081*x7087)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7086))+((r02*x7080))+(((-1.0)*x7083*x7087)));
evalcond[3]=(((r22*x7079))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7088))+((cj1*cj2))+((x7080*x7084)));
evalcond[4]=((((-1.0)*r01*x7088))+((cj0*x7085))+((cj0*x7082))+((r02*x7079))+((x7080*x7083)));
evalcond[5]=((((-1.0)*r11*x7088))+((sj0*x7085))+((sj0*x7082))+((r12*x7079))+((x7080*x7081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7089 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7089.valid){
continue;
}
CheckValue<IkReal> x7090=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7089.value)+(((1.5707963267949)*(x7090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7091=IKcos(j4);
IkReal x7092=IKsin(j4);
IkReal x7093=(gconst134*r10);
IkReal x7094=(cj2*sj1);
IkReal x7095=(gconst134*r00);
IkReal x7096=(gconst134*r20);
IkReal x7097=(cj1*sj2);
IkReal x7098=(gconst133*x7091);
IkReal x7099=((1.0)*x7091);
IkReal x7100=((1.0)*gconst133*x7092);
evalcond[0]=(((r22*x7092))+((r21*x7098))+(((-1.0)*x7096*x7099)));
evalcond[1]=(((r11*x7098))+(((-1.0)*x7093*x7099))+cj0+((r12*x7092)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7098))+(((-1.0)*x7095*x7099))+((r02*x7092)));
evalcond[3]=(((x7092*x7096))+((r22*x7091))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7100))+((cj1*cj2)));
evalcond[4]=(((x7092*x7095))+((r02*x7091))+((cj0*x7097))+((cj0*x7094))+(((-1.0)*r01*x7100)));
evalcond[5]=(((x7092*x7093))+((r12*x7091))+(((-1.0)*r11*x7100))+((sj0*x7097))+((sj0*x7094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7101=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7101.valid){
continue;
}
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7101.value)))+(x7102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7103=IKcos(j4);
IkReal x7104=IKsin(j4);
IkReal x7105=(gconst134*r10);
IkReal x7106=(cj2*sj1);
IkReal x7107=(gconst134*r00);
IkReal x7108=(gconst134*r20);
IkReal x7109=(cj1*sj2);
IkReal x7110=(gconst133*x7103);
IkReal x7111=((1.0)*x7103);
IkReal x7112=((1.0)*gconst133*x7104);
evalcond[0]=(((r21*x7110))+((r22*x7104))+(((-1.0)*x7108*x7111)));
evalcond[1]=(((r11*x7110))+((r12*x7104))+cj0+(((-1.0)*x7105*x7111)));
evalcond[2]=((((-1.0)*x7107*x7111))+(((-1.0)*sj0))+((r02*x7104))+((r01*x7110)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7103))+(((-1.0)*r21*x7112))+((cj1*cj2))+((x7104*x7108)));
evalcond[4]=(((cj0*x7106))+((cj0*x7109))+((r02*x7103))+((x7104*x7107))+(((-1.0)*r01*x7112)));
evalcond[5]=(((r12*x7103))+(((-1.0)*r11*x7112))+((sj0*x7109))+((sj0*x7106))+((x7104*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7113=((-1.0)*r21);
IkReal x7115 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7115)==0){
continue;
}
IkReal x7114=pow(x7115,-0.5);
CheckValue<IkReal> x7116 = IKatan2WithCheck(IkReal(x7113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7116.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7116.value))));
IkReal gconst136=(x7113*x7114);
IkReal gconst137=((1.0)*r20*x7114);
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7117.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7118=((-1.0)*r21);
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal(x7118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
IkReal x7119=((1.0)*(x7121.value));
IkReal x7120=x7114;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7119)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7119)));
IkReal gconst136=(x7118*x7120);
IkReal gconst137=((1.0)*r20*x7120);
IkReal x7122=r22*r22;
IkReal x7123=((1.0)*x7122);
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(((-1.0)+x7122),-1);
if(!x7127.valid){
continue;
}
IkReal x7124=x7127.value;
if((((1.0)+(((-1.0)*x7123)))) < -0.00001)
continue;
IkReal x7125=IKsqrt(((1.0)+(((-1.0)*x7123))));
IkReal x7126=(cj0*x7124*x7125);
j4eval[0]=((IKabs((x7126+(((-1.0)*x7123*x7126)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7128=((-1.0)*r21);
CheckValue<IkReal> x7131 = IKatan2WithCheck(IkReal(x7128),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7131.valid){
continue;
}
IkReal x7129=((1.0)*(x7131.value));
IkReal x7130=x7114;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7129)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7129)));
IkReal gconst136=(x7128*x7130);
IkReal gconst137=((1.0)*r20*x7130);
IkReal x7132=r22*r22;
IkReal x7133=((1.0)*x7132);
CheckValue<IkReal> x7137=IKPowWithIntegerCheck(((-1.0)+x7132),-1);
if(!x7137.valid){
continue;
}
IkReal x7134=x7137.value;
if((((1.0)+(((-1.0)*x7133)))) < -0.00001)
continue;
IkReal x7135=IKsqrt(((1.0)+(((-1.0)*x7133))));
IkReal x7136=(sj0*x7134*x7135);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7136+(((-1.0)*x7133*x7136))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7138=((-1.0)*r21);
CheckValue<IkReal> x7141 = IKatan2WithCheck(IkReal(x7138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7141.valid){
continue;
}
IkReal x7139=((1.0)*(x7141.value));
IkReal x7140=x7114;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7139)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7139)));
IkReal gconst136=(x7138*x7140);
IkReal gconst137=((1.0)*r20*x7140);
IkReal x7142=r22*r22;
IkReal x7143=((1.0)*r12*sj0);
IkReal x7144=((1.0)*cj0*r02);
CheckValue<IkReal> x7148=IKPowWithIntegerCheck(((-1.0)+x7142),-1);
if(!x7148.valid){
continue;
}
IkReal x7145=x7148.value;
if((((1.0)+(((-1.0)*x7142)))) < -0.00001)
continue;
IkReal x7146=IKsqrt(((1.0)+(((-1.0)*x7142))));
IkReal x7147=(r22*x7145*x7146);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7144*x7147))+(((-1.0)*x7143*x7147)))))+(IKabs(((((-1.0)*x7144))+(((-1.0)*x7143))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7149=((1.0)*sj0);
IkReal x7150=((1.0)*cj0);
CheckValue<IkReal> x7151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7151.valid){
continue;
}
CheckValue<IkReal> x7152 = IKatan2WithCheck(IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r00*x7150))+(((-1.0)*gconst137*r10*x7149))+((cj0*gconst136*r01)))),IkReal(((((-1.0)*r12*x7149))+(((-1.0)*r02*x7150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7151.value)))+(x7152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7153=IKcos(j4);
IkReal x7154=IKsin(j4);
IkReal x7155=(cj2*sj1);
IkReal x7156=(gconst136*r01);
IkReal x7157=(gconst136*r21);
IkReal x7158=(gconst136*r11);
IkReal x7159=(cj1*sj2);
IkReal x7160=((1.0)*x7154);
IkReal x7161=(gconst137*x7154);
IkReal x7162=((1.0)*gconst137*x7153);
evalcond[0]=(((r22*x7154))+((x7153*x7157))+(((-1.0)*r20*x7162)));
evalcond[1]=(cj0+((r12*x7154))+((x7153*x7158))+(((-1.0)*r10*x7162)));
evalcond[2]=(((r02*x7154))+(((-1.0)*sj0))+(((-1.0)*r00*x7162))+((x7153*x7156)));
evalcond[3]=(((r22*x7153))+(((-1.0)*x7157*x7160))+(((-1.0)*sj1*sj2))+((r20*x7161))+((cj1*cj2)));
evalcond[4]=(((r02*x7153))+(((-1.0)*x7156*x7160))+((r00*x7161))+((cj0*x7159))+((cj0*x7155)));
evalcond[5]=((((-1.0)*x7158*x7160))+((r12*x7153))+((sj0*x7155))+((sj0*x7159))+((r10*x7161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7163 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7163.valid){
continue;
}
CheckValue<IkReal> x7164=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7163.value)+(((1.5707963267949)*(x7164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7165=IKcos(j4);
IkReal x7166=IKsin(j4);
IkReal x7167=(cj2*sj1);
IkReal x7168=(gconst136*r01);
IkReal x7169=(gconst136*r21);
IkReal x7170=(gconst136*r11);
IkReal x7171=(cj1*sj2);
IkReal x7172=((1.0)*x7166);
IkReal x7173=(gconst137*x7166);
IkReal x7174=((1.0)*gconst137*x7165);
evalcond[0]=((((-1.0)*r20*x7174))+((x7165*x7169))+((r22*x7166)));
evalcond[1]=((((-1.0)*r10*x7174))+cj0+((r12*x7166))+((x7165*x7170)));
evalcond[2]=((((-1.0)*sj0))+((x7165*x7168))+(((-1.0)*r00*x7174))+((r02*x7166)));
evalcond[3]=((((-1.0)*x7169*x7172))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x7173))+((r22*x7165)));
evalcond[4]=((((-1.0)*x7168*x7172))+((cj0*x7167))+((r00*x7173))+((cj0*x7171))+((r02*x7165)));
evalcond[5]=((((-1.0)*x7170*x7172))+((sj0*x7171))+((r10*x7173))+((r12*x7165))+((sj0*x7167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
CheckValue<IkReal> x7176=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7175.value)+(((1.5707963267949)*(x7176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7177=IKcos(j4);
IkReal x7178=IKsin(j4);
IkReal x7179=(cj2*sj1);
IkReal x7180=(gconst136*r01);
IkReal x7181=(gconst136*r21);
IkReal x7182=(gconst136*r11);
IkReal x7183=(cj1*sj2);
IkReal x7184=((1.0)*x7178);
IkReal x7185=(gconst137*x7178);
IkReal x7186=((1.0)*gconst137*x7177);
evalcond[0]=((((-1.0)*r20*x7186))+((r22*x7178))+((x7177*x7181)));
evalcond[1]=(cj0+(((-1.0)*r10*x7186))+((x7177*x7182))+((r12*x7178)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7178))+(((-1.0)*r00*x7186))+((x7177*x7180)));
evalcond[3]=(((r20*x7185))+(((-1.0)*sj1*sj2))+((r22*x7177))+(((-1.0)*x7181*x7184))+((cj1*cj2)));
evalcond[4]=(((r00*x7185))+((r02*x7177))+((cj0*x7183))+(((-1.0)*x7180*x7184))+((cj0*x7179)));
evalcond[5]=(((sj0*x7179))+((r10*x7185))+(((-1.0)*x7182*x7184))+((sj0*x7183))+((r12*x7177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7188 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7188)==0){
continue;
}
IkReal x7187=pow(x7188,-0.5);
CheckValue<IkReal> x7189 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7189.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7189.value));
IkReal gconst139=((-1.0)*r11*x7187);
IkReal gconst140=(r10*x7187);
CheckValue<IkReal> x7190 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7190.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7190.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
IkReal x7191=((-1.0)*(x7193.value));
IkReal x7192=x7187;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7191;
IkReal gconst138=x7191;
IkReal gconst139=((-1.0)*r11*x7192);
IkReal gconst140=(r10*x7192);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7194=((1.0)*gconst140);
CheckValue<IkReal> x7195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7194))+(((-1.0)*gconst139*r20)))),-1);
if(!x7195.valid){
continue;
}
CheckValue<IkReal> x7196 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x7194))+((gconst139*r11*sj0))+(((-1.0)*cj0*r00*x7194))+((cj0*gconst139*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7195.value)))+(x7196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7197=IKcos(j4);
IkReal x7198=IKsin(j4);
IkReal x7199=(cj2*sj1);
IkReal x7200=(gconst140*r10);
IkReal x7201=(cj1*sj2);
IkReal x7202=(gconst139*x7197);
IkReal x7203=(gconst140*x7198);
IkReal x7204=((1.0)*gconst139*x7198);
IkReal x7205=((1.0)*gconst140*x7197);
evalcond[0]=(((r21*x7202))+(((-1.0)*r20*x7205))+((r22*x7198)));
evalcond[1]=((((-1.0)*x7197*x7200))+cj0+((r12*x7198))+((r11*x7202)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7202))+((r02*x7198))+(((-1.0)*r00*x7205)));
evalcond[3]=((((-1.0)*r21*x7204))+(((-1.0)*sj1*sj2))+((r20*x7203))+((r22*x7197))+((cj1*cj2)));
evalcond[4]=(((r00*x7203))+((r02*x7197))+((cj0*x7201))+((cj0*x7199))+(((-1.0)*r01*x7204)));
evalcond[5]=(((x7198*x7200))+((r12*x7197))+((sj0*x7199))+((sj0*x7201))+(((-1.0)*r11*x7204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7206=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7206.valid){
continue;
}
CheckValue<IkReal> x7207 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7206.value)))+(x7207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7208=IKcos(j4);
IkReal x7209=IKsin(j4);
IkReal x7210=(cj2*sj1);
IkReal x7211=(gconst140*r10);
IkReal x7212=(cj1*sj2);
IkReal x7213=(gconst139*x7208);
IkReal x7214=(gconst140*x7209);
IkReal x7215=((1.0)*gconst139*x7209);
IkReal x7216=((1.0)*gconst140*x7208);
evalcond[0]=(((r21*x7213))+((r22*x7209))+(((-1.0)*r20*x7216)));
evalcond[1]=(((r11*x7213))+cj0+((r12*x7209))+(((-1.0)*x7208*x7211)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7216))+((r02*x7209))+((r01*x7213)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x7215))+((r22*x7208))+((r20*x7214)));
evalcond[4]=(((r00*x7214))+(((-1.0)*r01*x7215))+((cj0*x7212))+((cj0*x7210))+((r02*x7208)));
evalcond[5]=(((sj0*x7212))+((sj0*x7210))+((x7209*x7211))+(((-1.0)*r11*x7215))+((r12*x7208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7218 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7218)==0){
continue;
}
IkReal x7217=pow(x7218,-0.5);
CheckValue<IkReal> x7219 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7219.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7219.value))));
IkReal gconst142=((1.0)*r11*x7217);
IkReal gconst143=((-1.0)*r10*x7217);
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7220.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
IkReal x7221=((1.0)*(x7223.value));
IkReal x7222=x7217;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7221)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7221)));
IkReal gconst142=((1.0)*r11*x7222);
IkReal gconst143=((-1.0)*r10*x7222);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
IkReal x7224=((1.0)*(x7226.value));
IkReal x7225=x7217;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7224)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7224)));
IkReal gconst142=((1.0)*r11*x7225);
IkReal gconst143=((-1.0)*r10*x7225);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7229 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7229.valid){
continue;
}
IkReal x7227=((1.0)*(x7229.value));
IkReal x7228=x7217;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7227)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7227)));
IkReal gconst142=((1.0)*r11*x7228);
IkReal gconst143=((-1.0)*r10*x7228);
IkReal x7230=r12*r12;
IkReal x7231=((1.0)*sj0);
IkReal x7232=(cj0*r02);
IkReal x7233=x7217;
j4eval[0]=((IKabs(((((-1.0)*x7231*x7233))+((r12*x7232*x7233))+((sj0*x7230*x7233)))))+(IKabs(((((-1.0)*x7232))+(((-1.0)*r12*x7231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7234=((1.0)*sj0);
IkReal x7235=((1.0)*gconst143);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x7235))+((cj0*gconst142*r01))+(((-1.0)*gconst143*r10*x7234))+((gconst142*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
CheckValue<IkReal> x7237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r20))+(((-1.0)*r21*x7235)))),-1);
if(!x7237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7236.value)+(((1.5707963267949)*(x7237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7238=IKcos(j4);
IkReal x7239=IKsin(j4);
IkReal x7240=(cj2*sj1);
IkReal x7241=(cj1*sj2);
IkReal x7242=(gconst143*x7239);
IkReal x7243=(gconst142*x7238);
IkReal x7244=((1.0)*gconst142*x7239);
IkReal x7245=((1.0)*gconst143*x7238);
evalcond[0]=((((-1.0)*r20*x7245))+((r21*x7243))+((r22*x7239)));
evalcond[1]=(cj0+(((-1.0)*r10*x7245))+((r11*x7243))+((r12*x7239)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7245))+((r01*x7243))+((r02*x7239)));
evalcond[3]=((((-1.0)*r21*x7244))+(((-1.0)*sj1*sj2))+((r20*x7242))+((cj1*cj2))+((r22*x7238)));
evalcond[4]=(((cj0*x7240))+((cj0*x7241))+((r00*x7242))+(((-1.0)*r01*x7244))+((r02*x7238)));
evalcond[5]=((((-1.0)*r11*x7244))+((r10*x7242))+((r12*x7238))+((sj0*x7240))+((sj0*x7241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7246=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7246.valid){
continue;
}
CheckValue<IkReal> x7247 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7246.value)))+(x7247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7248=IKcos(j4);
IkReal x7249=IKsin(j4);
IkReal x7250=(cj2*sj1);
IkReal x7251=(cj1*sj2);
IkReal x7252=(gconst143*x7249);
IkReal x7253=(gconst142*x7248);
IkReal x7254=((1.0)*gconst142*x7249);
IkReal x7255=((1.0)*gconst143*x7248);
evalcond[0]=(((r21*x7253))+((r22*x7249))+(((-1.0)*r20*x7255)));
evalcond[1]=((((-1.0)*r10*x7255))+cj0+((r11*x7253))+((r12*x7249)));
evalcond[2]=(((r02*x7249))+(((-1.0)*sj0))+(((-1.0)*r00*x7255))+((r01*x7253)));
evalcond[3]=((((-1.0)*r21*x7254))+(((-1.0)*sj1*sj2))+((r20*x7252))+((cj1*cj2))+((r22*x7248)));
evalcond[4]=(((r02*x7248))+((r00*x7252))+(((-1.0)*r01*x7254))+((cj0*x7251))+((cj0*x7250)));
evalcond[5]=(((r10*x7252))+(((-1.0)*r11*x7254))+((sj0*x7251))+((sj0*x7250))+((r12*x7248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7256=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7256.valid){
continue;
}
CheckValue<IkReal> x7257 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7256.value)))+(x7257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7258=IKcos(j4);
IkReal x7259=IKsin(j4);
IkReal x7260=(cj2*sj1);
IkReal x7261=(cj1*sj2);
IkReal x7262=(gconst143*x7259);
IkReal x7263=(gconst142*x7258);
IkReal x7264=((1.0)*gconst142*x7259);
IkReal x7265=((1.0)*gconst143*x7258);
evalcond[0]=(((r22*x7259))+(((-1.0)*r20*x7265))+((r21*x7263)));
evalcond[1]=(cj0+((r11*x7263))+((r12*x7259))+(((-1.0)*r10*x7265)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7265))+((r02*x7259))+((r01*x7263)));
evalcond[3]=(((r22*x7258))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7264))+((cj1*cj2))+((r20*x7262)));
evalcond[4]=(((cj0*x7260))+((cj0*x7261))+((r02*x7258))+(((-1.0)*r01*x7264))+((r00*x7262)));
evalcond[5]=(((sj0*x7260))+((sj0*x7261))+((r12*x7258))+((r10*x7262))+(((-1.0)*r11*x7264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7266=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7266;
j4eval[1]=IKsign(x7266);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7267=((1.0)*cj5);
IkReal x7268=((((-1.0)*r21*x7267))+(((-1.0)*r20*sj5)));
j4eval[0]=x7268;
j4eval[1]=((IKabs(((((-1.0)*r00*x7267))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7269=cj5*cj5;
IkReal x7270=r11*r11;
IkReal x7271=(cj5*r10);
IkReal x7272=(r11*sj5);
IkReal x7273=((((-1.0)*x7270))+((x7269*x7270))+(((-1.0)*x7269*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7271*x7272)));
j4eval[0]=x7273;
j4eval[1]=((IKabs(r12))+(IKabs((x7272+(((-1.0)*x7271))))));
j4eval[2]=IKsign(x7273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7274=cj5*cj5;
IkReal x7275=r11*r11;
IkReal x7276=(cj5*r10);
IkReal x7277=(r11*sj5);
CheckValue<IkReal> x7278=IKPowWithIntegerCheck(IKsign(((((2.0)*x7276*x7277))+(((-1.0)*x7275))+(((-1.0)*x7274*(r10*r10)))+(((-1.0)*(r12*r12)))+((x7274*x7275)))),-1);
if(!x7278.valid){
continue;
}
CheckValue<IkReal> x7279 = IKatan2WithCheck(IkReal(r12),IkReal((x7277+(((-1.0)*x7276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7278.value)))+(x7279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7280=IKcos(j4);
IkReal x7281=IKsin(j4);
IkReal x7282=(cj5*r00);
IkReal x7283=((1.0)*x7280);
IkReal x7284=(sj5*x7280);
IkReal x7285=(cj5*x7281);
IkReal x7286=((1.0)*sj5*x7281);
evalcond[0]=(((r22*x7281))+(((-1.0)*cj5*r20*x7283))+((r21*x7284)));
evalcond[1]=((((-1.0)*x7282*x7283))+((r02*x7281))+((r01*x7284)));
evalcond[2]=(((r12*x7280))+(((-1.0)*r11*x7286))+((r10*x7285)));
evalcond[3]=((1.0)+((r11*x7284))+(((-1.0)*cj5*r10*x7283))+((r12*x7281)));
evalcond[4]=(((x7281*x7282))+((cj2*sj1))+((r02*x7280))+((cj1*sj2))+(((-1.0)*r01*x7286)));
evalcond[5]=(((r22*x7280))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7286))+((r20*x7285))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7287=((1.0)*cj5);
CheckValue<IkReal> x7288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7287))+(((-1.0)*r20*sj5)))),-1);
if(!x7288.valid){
continue;
}
CheckValue<IkReal> x7289 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7287)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7288.value)))+(x7289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7290=IKcos(j4);
IkReal x7291=IKsin(j4);
IkReal x7292=(cj5*r00);
IkReal x7293=((1.0)*x7290);
IkReal x7294=(sj5*x7290);
IkReal x7295=(cj5*x7291);
IkReal x7296=((1.0)*sj5*x7291);
evalcond[0]=((((-1.0)*cj5*r20*x7293))+((r21*x7294))+((r22*x7291)));
evalcond[1]=(((r02*x7291))+((r01*x7294))+(((-1.0)*x7292*x7293)));
evalcond[2]=(((r12*x7290))+((r10*x7295))+(((-1.0)*r11*x7296)));
evalcond[3]=((1.0)+((r12*x7291))+((r11*x7294))+(((-1.0)*cj5*r10*x7293)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x7296))+((cj1*sj2))+((r02*x7290))+((x7291*x7292)));
evalcond[5]=((((-1.0)*r21*x7296))+(((-1.0)*sj1*sj2))+((r22*x7290))+((cj1*cj2))+((r20*x7295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7297.value)))+(x7298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7299=IKcos(j4);
IkReal x7300=IKsin(j4);
IkReal x7301=(cj5*r00);
IkReal x7302=((1.0)*x7299);
IkReal x7303=(sj5*x7299);
IkReal x7304=(cj5*x7300);
IkReal x7305=((1.0)*sj5*x7300);
evalcond[0]=(((r22*x7300))+(((-1.0)*cj5*r20*x7302))+((r21*x7303)));
evalcond[1]=(((r02*x7300))+(((-1.0)*x7301*x7302))+((r01*x7303)));
evalcond[2]=(((r12*x7299))+((r10*x7304))+(((-1.0)*r11*x7305)));
evalcond[3]=((1.0)+((r12*x7300))+(((-1.0)*cj5*r10*x7302))+((r11*x7303)));
evalcond[4]=(((cj2*sj1))+((x7300*x7301))+((cj1*sj2))+((r02*x7299))+(((-1.0)*r01*x7305)));
evalcond[5]=((((-1.0)*r21*x7305))+(((-1.0)*sj1*sj2))+((r22*x7299))+((r20*x7304))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7306=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7306;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7307=((1.0)*cj5);
IkReal x7308=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7307)));
j4eval[0]=x7308;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7307))+((r21*sj5))))));
j4eval[2]=IKsign(x7308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7309=cj5*cj5;
IkReal x7310=r11*r11;
IkReal x7311=(r11*sj5);
IkReal x7312=(cj5*r10);
IkReal x7313=((((-2.0)*x7311*x7312))+x7310+(r12*r12)+(((-1.0)*x7309*x7310))+((x7309*(r10*r10))));
j4eval[0]=x7313;
j4eval[1]=((IKabs(r12))+(IKabs((x7311+(((-1.0)*x7312))))));
j4eval[2]=IKsign(x7313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7314=cj5*cj5;
IkReal x7315=r11*r11;
IkReal x7316=(cj5*r10);
IkReal x7317=(r11*sj5);
CheckValue<IkReal> x7318=IKPowWithIntegerCheck(IKsign((x7315+(r12*r12)+(((-2.0)*x7316*x7317))+((x7314*(r10*r10)))+(((-1.0)*x7314*x7315)))),-1);
if(!x7318.valid){
continue;
}
CheckValue<IkReal> x7319 = IKatan2WithCheck(IkReal(r12),IkReal((x7317+(((-1.0)*x7316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7318.value)))+(x7319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7320=IKcos(j4);
IkReal x7321=IKsin(j4);
IkReal x7322=(cj5*r00);
IkReal x7323=((1.0)*sj2);
IkReal x7324=((1.0)*x7320);
IkReal x7325=(sj5*x7320);
IkReal x7326=(cj5*x7321);
IkReal x7327=((1.0)*sj5*x7321);
evalcond[0]=(((r22*x7321))+((r21*x7325))+(((-1.0)*cj5*r20*x7324)));
evalcond[1]=(((r01*x7325))+(((-1.0)*x7322*x7324))+((r02*x7321)));
evalcond[2]=(((r10*x7326))+((r12*x7320))+(((-1.0)*r11*x7327)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7324))+((r12*x7321))+((r11*x7325)));
evalcond[4]=(((r22*x7320))+(((-1.0)*r21*x7327))+((r20*x7326))+((cj1*cj2))+(((-1.0)*sj1*x7323)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*x7327))+((x7321*x7322))+(((-1.0)*cj1*x7323))+((r02*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7328=((1.0)*cj5);
CheckValue<IkReal> x7329 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7328)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7329.valid){
continue;
}
CheckValue<IkReal> x7330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7328)))),-1);
if(!x7330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7329.value)+(((1.5707963267949)*(x7330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7331=IKcos(j4);
IkReal x7332=IKsin(j4);
IkReal x7333=(cj5*r00);
IkReal x7334=((1.0)*sj2);
IkReal x7335=((1.0)*x7331);
IkReal x7336=(sj5*x7331);
IkReal x7337=(cj5*x7332);
IkReal x7338=((1.0)*sj5*x7332);
evalcond[0]=(((r22*x7332))+(((-1.0)*cj5*r20*x7335))+((r21*x7336)));
evalcond[1]=(((r02*x7332))+((r01*x7336))+(((-1.0)*x7333*x7335)));
evalcond[2]=(((r12*x7331))+((r10*x7337))+(((-1.0)*r11*x7338)));
evalcond[3]=((-1.0)+((r12*x7332))+(((-1.0)*cj5*r10*x7335))+((r11*x7336)));
evalcond[4]=(((r22*x7331))+(((-1.0)*r21*x7338))+(((-1.0)*sj1*x7334))+((r20*x7337))+((cj1*cj2)));
evalcond[5]=(((r02*x7331))+(((-1.0)*cj2*sj1))+((x7332*x7333))+(((-1.0)*cj1*x7334))+(((-1.0)*r01*x7338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7339=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7339.value)))+(x7340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKcos(j4);
IkReal x7342=IKsin(j4);
IkReal x7343=(cj5*r00);
IkReal x7344=((1.0)*sj2);
IkReal x7345=((1.0)*x7341);
IkReal x7346=(sj5*x7341);
IkReal x7347=(cj5*x7342);
IkReal x7348=((1.0)*sj5*x7342);
evalcond[0]=((((-1.0)*cj5*r20*x7345))+((r21*x7346))+((r22*x7342)));
evalcond[1]=((((-1.0)*x7343*x7345))+((r01*x7346))+((r02*x7342)));
evalcond[2]=((((-1.0)*r11*x7348))+((r12*x7341))+((r10*x7347)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x7345))+((r11*x7346))+((r12*x7342)));
evalcond[4]=((((-1.0)*sj1*x7344))+((r20*x7347))+((cj1*cj2))+((r22*x7341))+(((-1.0)*r21*x7348)));
evalcond[5]=(((x7342*x7343))+(((-1.0)*r01*x7348))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x7344))+((r02*x7341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7350 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7350)==0){
continue;
}
IkReal x7349=pow(x7350,-0.5);
CheckValue<IkReal> x7351 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7351.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7351.value));
IkReal gconst145=((-1.0)*r01*x7349);
IkReal gconst146=(r00*x7349);
CheckValue<IkReal> x7352 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7352.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7352.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7355 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7355.valid){
continue;
}
IkReal x7353=((-1.0)*(x7355.value));
IkReal x7354=x7349;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7353;
IkReal gconst144=x7353;
IkReal gconst145=((-1.0)*r01*x7354);
IkReal gconst146=(r00*x7354);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7356=((1.0)*sj0);
IkReal x7357=((1.0)*cj0);
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r00*x7357))+((cj0*gconst145*r01))+(((-1.0)*gconst146*r10*x7356))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r12*x7356))+(((-1.0)*r02*x7357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
CheckValue<IkReal> x7359=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x7359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7358.value)+(((1.5707963267949)*(x7359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7360=IKcos(j4);
IkReal x7361=IKsin(j4);
IkReal x7362=(cj2*sj1);
IkReal x7363=(gconst145*r21);
IkReal x7364=(gconst146*r00);
IkReal x7365=(gconst145*r11);
IkReal x7366=(cj1*sj2);
IkReal x7367=(gconst145*r01);
IkReal x7368=((1.0)*x7361);
IkReal x7369=(gconst146*x7361);
IkReal x7370=((1.0)*gconst146*x7360);
evalcond[0]=(((x7360*x7363))+(((-1.0)*r20*x7370))+((r22*x7361)));
evalcond[1]=(((r12*x7361))+cj0+((x7360*x7365))+(((-1.0)*r10*x7370)));
evalcond[2]=((((-1.0)*x7360*x7364))+(((-1.0)*sj0))+((x7360*x7367))+((r02*x7361)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7369))+(((-1.0)*x7363*x7368))+((cj1*cj2))+((r22*x7360)));
evalcond[4]=((((-1.0)*x7367*x7368))+((cj0*x7362))+((cj0*x7366))+((x7361*x7364))+((r02*x7360)));
evalcond[5]=(((r12*x7360))+((sj0*x7362))+((sj0*x7366))+(((-1.0)*x7365*x7368))+((r10*x7369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7371=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7371.valid){
continue;
}
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7371.value)))+(x7372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7373=IKcos(j4);
IkReal x7374=IKsin(j4);
IkReal x7375=(cj2*sj1);
IkReal x7376=(gconst145*r21);
IkReal x7377=(gconst146*r00);
IkReal x7378=(gconst145*r11);
IkReal x7379=(cj1*sj2);
IkReal x7380=(gconst145*r01);
IkReal x7381=((1.0)*x7374);
IkReal x7382=(gconst146*x7374);
IkReal x7383=((1.0)*gconst146*x7373);
evalcond[0]=(((x7373*x7376))+(((-1.0)*r20*x7383))+((r22*x7374)));
evalcond[1]=(cj0+((r12*x7374))+((x7373*x7378))+(((-1.0)*r10*x7383)));
evalcond[2]=(((r02*x7374))+(((-1.0)*sj0))+((x7373*x7380))+(((-1.0)*x7373*x7377)));
evalcond[3]=((((-1.0)*x7376*x7381))+(((-1.0)*sj1*sj2))+((r20*x7382))+((cj1*cj2))+((r22*x7373)));
evalcond[4]=(((r02*x7373))+(((-1.0)*x7380*x7381))+((cj0*x7375))+((cj0*x7379))+((x7374*x7377)));
evalcond[5]=((((-1.0)*x7378*x7381))+((r12*x7373))+((r10*x7382))+((sj0*x7379))+((sj0*x7375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7385 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7385)==0){
continue;
}
IkReal x7384=pow(x7385,-0.5);
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7386.value))));
IkReal gconst148=((1.0)*r01*x7384);
IkReal gconst149=((-1.0)*r00*x7384);
CheckValue<IkReal> x7387 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7387.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7387.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
IkReal x7388=((1.0)*(x7390.value));
IkReal x7389=x7384;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7388)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7388)));
IkReal gconst148=((1.0)*r01*x7389);
IkReal gconst149=((-1.0)*r00*x7389);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7393 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7393.valid){
continue;
}
IkReal x7391=((1.0)*(x7393.value));
IkReal x7392=x7384;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7391)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7391)));
IkReal gconst148=((1.0)*r01*x7392);
IkReal gconst149=((-1.0)*r00*x7392);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
IkReal x7394=((1.0)*(x7396.value));
IkReal x7395=x7384;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7394)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7394)));
IkReal gconst148=((1.0)*r01*x7395);
IkReal gconst149=((-1.0)*r00*x7395);
IkReal x7397=r02*r02;
IkReal x7398=(r12*sj0);
IkReal x7399=((1.0)*cj0);
IkReal x7400=x7384;
j4eval[0]=((IKabs((((r02*x7398*x7400))+(((-1.0)*x7399*x7400))+((cj0*x7397*x7400)))))+(IKabs(((((-1.0)*r02*x7399))+(((-1.0)*x7398))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7401=((1.0)*sj0);
IkReal x7402=((1.0)*gconst149);
CheckValue<IkReal> x7403 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x7402))+(((-1.0)*gconst149*r10*x7401))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*r12*x7401))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7403.valid){
continue;
}
CheckValue<IkReal> x7404=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7402)))),-1);
if(!x7404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7403.value)+(((1.5707963267949)*(x7404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7405=IKcos(j4);
IkReal x7406=IKsin(j4);
IkReal x7407=(cj2*sj1);
IkReal x7408=(cj1*sj2);
IkReal x7409=(gconst148*x7405);
IkReal x7410=(gconst149*x7406);
IkReal x7411=((1.0)*gconst148*x7406);
IkReal x7412=((1.0)*gconst149*x7405);
evalcond[0]=((((-1.0)*r20*x7412))+((r21*x7409))+((r22*x7406)));
evalcond[1]=(((r11*x7409))+cj0+(((-1.0)*r10*x7412))+((r12*x7406)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7412))+((r02*x7406))+((r01*x7409)));
evalcond[3]=((((-1.0)*r21*x7411))+((r20*x7410))+(((-1.0)*sj1*sj2))+((r22*x7405))+((cj1*cj2)));
evalcond[4]=(((r02*x7405))+(((-1.0)*r01*x7411))+((r00*x7410))+((cj0*x7408))+((cj0*x7407)));
evalcond[5]=((((-1.0)*r11*x7411))+((r12*x7405))+((r10*x7410))+((sj0*x7408))+((sj0*x7407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7413 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7413.value)+(((1.5707963267949)*(x7414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7415=IKcos(j4);
IkReal x7416=IKsin(j4);
IkReal x7417=(cj2*sj1);
IkReal x7418=(cj1*sj2);
IkReal x7419=(gconst148*x7415);
IkReal x7420=(gconst149*x7416);
IkReal x7421=((1.0)*gconst148*x7416);
IkReal x7422=((1.0)*gconst149*x7415);
evalcond[0]=(((r21*x7419))+((r22*x7416))+(((-1.0)*r20*x7422)));
evalcond[1]=(cj0+(((-1.0)*r10*x7422))+((r12*x7416))+((r11*x7419)));
evalcond[2]=((((-1.0)*r00*x7422))+(((-1.0)*sj0))+((r02*x7416))+((r01*x7419)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7420))+((r22*x7415))+(((-1.0)*r21*x7421))+((cj1*cj2)));
evalcond[4]=(((cj0*x7417))+((cj0*x7418))+((r00*x7420))+((r02*x7415))+(((-1.0)*r01*x7421)));
evalcond[5]=(((sj0*x7417))+((sj0*x7418))+(((-1.0)*r11*x7421))+((r10*x7420))+((r12*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7423=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7423.valid){
continue;
}
CheckValue<IkReal> x7424 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7423.value)))+(x7424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7425=IKcos(j4);
IkReal x7426=IKsin(j4);
IkReal x7427=(cj2*sj1);
IkReal x7428=(cj1*sj2);
IkReal x7429=(gconst148*x7425);
IkReal x7430=(gconst149*x7426);
IkReal x7431=((1.0)*gconst148*x7426);
IkReal x7432=((1.0)*gconst149*x7425);
evalcond[0]=(((r21*x7429))+(((-1.0)*r20*x7432))+((r22*x7426)));
evalcond[1]=(cj0+(((-1.0)*r10*x7432))+((r11*x7429))+((r12*x7426)));
evalcond[2]=(((r01*x7429))+(((-1.0)*r00*x7432))+(((-1.0)*sj0))+((r02*x7426)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7430))+(((-1.0)*r21*x7431))+((cj1*cj2))+((r22*x7425)));
evalcond[4]=((((-1.0)*r01*x7431))+((r00*x7430))+((r02*x7425))+((cj0*x7428))+((cj0*x7427)));
evalcond[5]=((((-1.0)*r11*x7431))+((r10*x7430))+((r12*x7425))+((sj0*x7427))+((sj0*x7428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7433=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7433;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7434=((1.0)*cj5);
IkReal x7435=((((-1.0)*r21*x7434))+(((-1.0)*r20*sj5)));
j4eval[0]=x7435;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7434))))));
j4eval[2]=IKsign(x7435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7436=cj5*cj5;
IkReal x7437=r01*r01;
IkReal x7438=(cj5*r00);
IkReal x7439=(r01*sj5);
IkReal x7440=(((x7436*(r00*r00)))+(((-2.0)*x7438*x7439))+(((-1.0)*x7436*x7437))+(r02*r02)+x7437);
j4eval[0]=x7440;
j4eval[1]=IKsign(x7440);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7438))+x7439))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7441=cj5*cj5;
IkReal x7442=r01*r01;
IkReal x7443=(r01*sj5);
IkReal x7444=(cj5*r00);
CheckValue<IkReal> x7445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7441*x7442))+(((-2.0)*x7443*x7444))+((x7441*(r00*r00)))+(r02*r02)+x7442)),-1);
if(!x7445.valid){
continue;
}
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7444))+x7443)),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7445.value)))+(x7446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7447=IKcos(j4);
IkReal x7448=IKsin(j4);
IkReal x7449=(cj5*r00);
IkReal x7450=((1.0)*x7447);
IkReal x7451=(sj5*x7447);
IkReal x7452=(cj5*x7448);
IkReal x7453=((1.0)*sj5*x7448);
evalcond[0]=((((-1.0)*cj5*r20*x7450))+((r22*x7448))+((r21*x7451)));
evalcond[1]=(((r12*x7448))+((r11*x7451))+(((-1.0)*cj5*r10*x7450)));
evalcond[2]=((((-1.0)*r01*x7453))+((x7448*x7449))+((r02*x7447)));
evalcond[3]=((-1.0)+((r01*x7451))+(((-1.0)*x7449*x7450))+((r02*x7448)));
evalcond[4]=(((cj2*sj1))+((r12*x7447))+((cj1*sj2))+((r10*x7452))+(((-1.0)*r11*x7453)));
evalcond[5]=(((r20*x7452))+(((-1.0)*sj1*sj2))+((r22*x7447))+((cj1*cj2))+(((-1.0)*r21*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*cj5);
CheckValue<IkReal> x7455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7454))+(((-1.0)*r20*sj5)))),-1);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x7454))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7455.value)))+(x7456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKcos(j4);
IkReal x7458=IKsin(j4);
IkReal x7459=(cj5*r00);
IkReal x7460=((1.0)*x7457);
IkReal x7461=(sj5*x7457);
IkReal x7462=(cj5*x7458);
IkReal x7463=((1.0)*sj5*x7458);
evalcond[0]=(((r21*x7461))+((r22*x7458))+(((-1.0)*cj5*r20*x7460)));
evalcond[1]=(((r12*x7458))+((r11*x7461))+(((-1.0)*cj5*r10*x7460)));
evalcond[2]=(((r02*x7457))+((x7458*x7459))+(((-1.0)*r01*x7463)));
evalcond[3]=((-1.0)+((r02*x7458))+(((-1.0)*x7459*x7460))+((r01*x7461)));
evalcond[4]=(((cj2*sj1))+((r10*x7462))+((r12*x7457))+((cj1*sj2))+(((-1.0)*r11*x7463)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x7457))+(((-1.0)*r21*x7463))+((r20*x7462))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
CheckValue<IkReal> x7465=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7464.value)+(((1.5707963267949)*(x7465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7466=IKcos(j4);
IkReal x7467=IKsin(j4);
IkReal x7468=(cj5*r00);
IkReal x7469=((1.0)*x7466);
IkReal x7470=(sj5*x7466);
IkReal x7471=(cj5*x7467);
IkReal x7472=((1.0)*sj5*x7467);
evalcond[0]=((((-1.0)*cj5*r20*x7469))+((r21*x7470))+((r22*x7467)));
evalcond[1]=(((r12*x7467))+((r11*x7470))+(((-1.0)*cj5*r10*x7469)));
evalcond[2]=((((-1.0)*r01*x7472))+((r02*x7466))+((x7467*x7468)));
evalcond[3]=((-1.0)+((r02*x7467))+((r01*x7470))+(((-1.0)*x7468*x7469)));
evalcond[4]=(((r10*x7471))+(((-1.0)*r11*x7472))+((cj2*sj1))+((cj1*sj2))+((r12*x7466)));
evalcond[5]=(((r20*x7471))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7472))+((cj1*cj2))+((r22*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7473=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7473;
j4eval[1]=IKsign(x7473);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7474=((1.0)*cj5);
IkReal x7475=((((-1.0)*r11*x7474))+(((-1.0)*r10*sj5)));
j4eval[0]=x7475;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7474))))));
j4eval[2]=IKsign(x7475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7476=cj5*cj5;
IkReal x7477=r01*r01;
IkReal x7478=(r01*sj5);
IkReal x7479=(cj5*r00);
IkReal x7480=((((-1.0)*(r02*r02)))+(((-1.0)*x7476*(r00*r00)))+(((2.0)*x7478*x7479))+(((-1.0)*x7477))+((x7476*x7477)));
j4eval[0]=x7480;
j4eval[1]=IKsign(x7480);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7479))+x7478))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7481=cj5*cj5;
IkReal x7482=r01*r01;
IkReal x7483=(r01*sj5);
IkReal x7484=(cj5*r00);
CheckValue<IkReal> x7485 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7484))+x7483)),IKFAST_ATAN2_MAGTHRESH);
if(!x7485.valid){
continue;
}
CheckValue<IkReal> x7486=IKPowWithIntegerCheck(IKsign(((((2.0)*x7483*x7484))+(((-1.0)*x7482))+(((-1.0)*(r02*r02)))+(((-1.0)*x7481*(r00*r00)))+((x7481*x7482)))),-1);
if(!x7486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7485.value)+(((1.5707963267949)*(x7486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7487=IKcos(j4);
IkReal x7488=IKsin(j4);
IkReal x7489=(cj5*r00);
IkReal x7490=((1.0)*sj2);
IkReal x7491=((1.0)*x7487);
IkReal x7492=(sj5*x7487);
IkReal x7493=(cj5*x7488);
IkReal x7494=((1.0)*sj5*x7488);
evalcond[0]=(((r22*x7488))+(((-1.0)*cj5*r20*x7491))+((r21*x7492)));
evalcond[1]=((((-1.0)*cj5*r10*x7491))+((r11*x7492))+((r12*x7488)));
evalcond[2]=((((-1.0)*r01*x7494))+((r02*x7487))+((x7488*x7489)));
evalcond[3]=((1.0)+((r01*x7492))+(((-1.0)*x7489*x7491))+((r02*x7488)));
evalcond[4]=(((r22*x7487))+(((-1.0)*sj1*x7490))+((r20*x7493))+(((-1.0)*r21*x7494))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7490))+(((-1.0)*cj2*sj1))+((r12*x7487))+((r10*x7493))+(((-1.0)*r11*x7494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7495=((1.0)*cj5);
CheckValue<IkReal> x7496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7495)))),-1);
if(!x7496.valid){
continue;
}
CheckValue<IkReal> x7497 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7495)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7496.value)))+(x7497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7498=IKcos(j4);
IkReal x7499=IKsin(j4);
IkReal x7500=(cj5*r00);
IkReal x7501=((1.0)*sj2);
IkReal x7502=((1.0)*x7498);
IkReal x7503=(sj5*x7498);
IkReal x7504=(cj5*x7499);
IkReal x7505=((1.0)*sj5*x7499);
evalcond[0]=(((r22*x7499))+(((-1.0)*cj5*r20*x7502))+((r21*x7503)));
evalcond[1]=(((r11*x7503))+((r12*x7499))+(((-1.0)*cj5*r10*x7502)));
evalcond[2]=((((-1.0)*r01*x7505))+((x7499*x7500))+((r02*x7498)));
evalcond[3]=((1.0)+(((-1.0)*x7500*x7502))+((r02*x7499))+((r01*x7503)));
evalcond[4]=(((r22*x7498))+(((-1.0)*r21*x7505))+((r20*x7504))+(((-1.0)*sj1*x7501))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7501))+(((-1.0)*cj2*sj1))+((r12*x7498))+((r10*x7504))+(((-1.0)*r11*x7505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7506.valid){
continue;
}
CheckValue<IkReal> x7507 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7506.value)))+(x7507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7508=IKcos(j4);
IkReal x7509=IKsin(j4);
IkReal x7510=(cj5*r00);
IkReal x7511=((1.0)*sj2);
IkReal x7512=((1.0)*x7508);
IkReal x7513=(sj5*x7508);
IkReal x7514=(cj5*x7509);
IkReal x7515=((1.0)*sj5*x7509);
evalcond[0]=(((r21*x7513))+(((-1.0)*cj5*r20*x7512))+((r22*x7509)));
evalcond[1]=(((r12*x7509))+((r11*x7513))+(((-1.0)*cj5*r10*x7512)));
evalcond[2]=(((x7509*x7510))+(((-1.0)*r01*x7515))+((r02*x7508)));
evalcond[3]=((1.0)+((r01*x7513))+(((-1.0)*x7510*x7512))+((r02*x7509)));
evalcond[4]=(((r20*x7514))+(((-1.0)*r21*x7515))+(((-1.0)*sj1*x7511))+((cj1*cj2))+((r22*x7508)));
evalcond[5]=(((r12*x7508))+(((-1.0)*cj1*x7511))+(((-1.0)*cj2*sj1))+((r10*x7514))+(((-1.0)*r11*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7516=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7516);
rxp1_1=(px*r21);
rxp1_2=(r11*x7516);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7517=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7517);
rxp1_1=(px*r21);
rxp1_2=(r11*x7517);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7518=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7518);
rxp1_1=(px*r21);
rxp1_2=(r11*x7518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7521=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7521.valid){
continue;
}
IkReal x7519=x7521.value;
IkReal x7520=((1.0)*sj0*x7519);
sj4array[0]=((((-1.0)*cj1*sj2*x7520))+(((-1.0)*cj2*sj1*x7520)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7522=IKcos(j4);
IkReal x7523=IKsin(j4);
IkReal x7524=(r21*sj5);
IkReal x7525=((1.0)*cj5*x7522);
evalcond[0]=(r02*x7522);
evalcond[1]=((((-1.0)*sj0))+((r02*x7523)));
evalcond[2]=((((-1.0)*r20*x7525))+((x7522*x7524)));
evalcond[3]=((((-1.0)*r10*x7525))+((r11*sj5*x7522)));
evalcond[4]=(((cj5*r20*x7523))+(((-1.0)*sj1*sj2))+(((-1.0)*x7523*x7524))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7527=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7527.valid){
continue;
}
IkReal x7526=x7527.value;
sj4array[0]=((((-1.0)*cj1*cj2*x7526))+((sj1*sj2*x7526)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7528=IKcos(j4);
IkReal x7529=IKsin(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=((1.0)*cj5*x7528);
evalcond[0]=(r02*x7528);
evalcond[1]=((((-1.0)*sj0))+((r02*x7529)));
evalcond[2]=(((r21*sj5*x7528))+(((-1.0)*r20*x7531)));
evalcond[3]=(((x7528*x7530))+(((-1.0)*r10*x7531)));
evalcond[4]=((((-1.0)*x7529*x7530))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((cj5*r10*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7532=IKPowWithIntegerCheck(r02,-1);
if(!x7532.valid){
continue;
}
sj4array[0]=(sj0*(x7532.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7533=IKcos(j4);
IkReal x7534=IKsin(j4);
IkReal x7535=(sj5*x7533);
IkReal x7536=(cj5*x7534);
IkReal x7537=((1.0)*sj5*x7534);
IkReal x7538=((1.0)*cj5*x7533);
evalcond[0]=(r02*x7533);
evalcond[1]=(((r21*x7535))+(((-1.0)*r20*x7538)));
evalcond[2]=((((-1.0)*r10*x7538))+((r11*x7535)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7536))+((cj1*cj2))+(((-1.0)*r21*x7537)));
evalcond[4]=(((r10*x7536))+(((-1.0)*r11*x7537))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7539=((1.0)*sj0);
IkReal x7540=((1.0)*cj0);
CheckValue<IkReal> x7541 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7540))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7539)))),IkReal(((((-1.0)*r12*x7539))+(((-1.0)*r02*x7540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7541.valid){
continue;
}
CheckValue<IkReal> x7542=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7541.value)+(((1.5707963267949)*(x7542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7543=IKcos(j4);
IkReal x7544=IKsin(j4);
IkReal x7545=(cj5*r00);
IkReal x7546=(cj2*sj1);
IkReal x7547=(cj1*sj2);
IkReal x7548=((1.0)*x7543);
IkReal x7549=(sj5*x7543);
IkReal x7550=(cj5*x7544);
IkReal x7551=((1.0)*sj5*x7544);
evalcond[0]=(((r21*x7549))+((r22*x7544))+(((-1.0)*cj5*r20*x7548)));
evalcond[1]=((((-1.0)*cj5*r10*x7548))+cj0+((r12*x7544))+((r11*x7549)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7544))+((r01*x7549))+(((-1.0)*x7545*x7548)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7543))+((cj1*cj2))+(((-1.0)*r21*x7551))+((r20*x7550)));
evalcond[4]=(((cj0*x7547))+((cj0*x7546))+((r02*x7543))+(((-1.0)*r01*x7551))+((x7544*x7545)));
evalcond[5]=(((r10*x7550))+((sj0*x7547))+((sj0*x7546))+((r12*x7543))+(((-1.0)*r11*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7552 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7552.valid){
continue;
}
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7552.value)+(((1.5707963267949)*(x7553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7554=IKcos(j4);
IkReal x7555=IKsin(j4);
IkReal x7556=(cj5*r00);
IkReal x7557=(cj2*sj1);
IkReal x7558=(cj1*sj2);
IkReal x7559=((1.0)*x7554);
IkReal x7560=(sj5*x7554);
IkReal x7561=(cj5*x7555);
IkReal x7562=((1.0)*sj5*x7555);
evalcond[0]=(((r21*x7560))+((r22*x7555))+(((-1.0)*cj5*r20*x7559)));
evalcond[1]=((((-1.0)*cj5*r10*x7559))+cj0+((r11*x7560))+((r12*x7555)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7555))+(((-1.0)*x7556*x7559))+((r01*x7560)));
evalcond[3]=((((-1.0)*r21*x7562))+(((-1.0)*sj1*sj2))+((r22*x7554))+((cj1*cj2))+((r20*x7561)));
evalcond[4]=(((cj0*x7558))+((cj0*x7557))+((r02*x7554))+(((-1.0)*r01*x7562))+((x7555*x7556)));
evalcond[5]=(((r10*x7561))+((sj0*x7558))+((sj0*x7557))+((r12*x7554))+(((-1.0)*r11*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7563 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7563.valid){
continue;
}
CheckValue<IkReal> x7564=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7563.value)+(((1.5707963267949)*(x7564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7565=IKcos(j4);
IkReal x7566=IKsin(j4);
IkReal x7567=(cj5*r00);
IkReal x7568=(cj2*sj1);
IkReal x7569=(cj1*sj2);
IkReal x7570=((1.0)*x7565);
IkReal x7571=(sj5*x7565);
IkReal x7572=(cj5*x7566);
IkReal x7573=((1.0)*sj5*x7566);
evalcond[0]=(((r22*x7566))+(((-1.0)*cj5*r20*x7570))+((r21*x7571)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x7570))+((r12*x7566))+((r11*x7571)));
evalcond[2]=((((-1.0)*x7567*x7570))+(((-1.0)*sj0))+((r02*x7566))+((r01*x7571)));
evalcond[3]=(((r22*x7565))+(((-1.0)*sj1*sj2))+((r20*x7572))+(((-1.0)*r21*x7573))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x7573))+((x7566*x7567))+((r02*x7565))+((cj0*x7569))+((cj0*x7568)));
evalcond[5]=(((sj0*x7569))+((sj0*x7568))+((r12*x7565))+((r10*x7572))+(((-1.0)*r11*x7573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7574=cj2*cj2;
IkReal x7575=cj1*cj1;
IkReal x7576=(r00*sj5);
IkReal x7577=(cj5*r11);
IkReal x7578=((126140.0)*cj2);
IkReal x7579=((265000.0)*sj1);
IkReal x7580=(cj5*r01);
IkReal x7581=((25175.0)*sj1);
IkReal x7582=(cj1*sj2);
IkReal x7583=(r10*sj5);
IkReal x7584=((238000.0)*py);
IkReal x7585=(cj2*sj1);
IkReal x7586=((238000.0)*px);
IkReal x7587=((22610.0)*x7582);
IkReal x7588=((22610.0)*x7585);
CheckValue<IkReal> x7589=IKPowWithIntegerCheck(IKsign(((82994.0)+(((113288.0)*x7582*x7585))+(((126140.0)*sj1*x7582))+(((56644.0)*x7574))+(((-13581.0)*x7575))+(((-1.0)*x7575*x7578))+(((-113288.0)*x7574*x7575))+x7578)),-1);
if(!x7589.valid){
continue;
}
CheckValue<IkReal> x7590 = IKatan2WithCheck(IkReal(((((-113000.0)*px))+((x7582*x7584))+((x7583*x7587))+((x7583*x7588))+((py*x7579))+(((-10735.0)*x7576))+((x7584*x7585))+(((-10735.0)*x7580))+((x7581*x7583))+((x7577*x7588))+((x7577*x7581))+((x7577*x7587)))),IkReal((((x7582*x7586))+((x7576*x7581))+((x7576*x7587))+((x7576*x7588))+(((10735.0)*x7583))+((x7585*x7586))+((px*x7579))+(((10735.0)*x7577))+((x7580*x7588))+((x7580*x7587))+((x7580*x7581))+(((113000.0)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7590.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7589.value)))+(x7590.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7591=IKcos(j0);
IkReal x7592=IKsin(j0);
IkReal x7593=((0.095)*sj5);
IkReal x7594=((0.095)*cj5);
IkReal x7595=((0.238)*cj2);
IkReal x7596=(sj1*x7592);
IkReal x7597=((0.238)*cj1*sj2);
IkReal x7598=(sj1*x7591);
evalcond[0]=(((x7595*x7598))+(((0.265)*x7598))+(((-1.0)*px))+(((-0.113)*x7592))+(((-1.0)*r00*x7593))+(((-1.0)*r01*x7594))+((x7591*x7597)));
evalcond[1]=(((x7595*x7596))+(((0.265)*x7596))+(((0.113)*x7591))+(((-1.0)*r11*x7594))+(((-1.0)*py))+((x7592*x7597))+(((-1.0)*r10*x7593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7599=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7599;
j4eval[1]=IKsign(x7599);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7600=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7600;
j4eval[1]=IKsign(x7600);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7601=((1.0)*sj0);
IkReal x7602=((1.0)*cj0);
IkReal x7603=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7603;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7602))+(((-1.0)*cj5*r10*x7601))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x7602))+(((-1.0)*r12*x7601))))));
j4eval[2]=IKsign(x7603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7604=((-1.0)*r20);
IkReal x7606 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7606)==0){
continue;
}
IkReal x7605=pow(x7606,-0.5);
CheckValue<IkReal> x7607 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7604),IKFAST_ATAN2_MAGTHRESH);
if(!x7607.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7607.value));
IkReal gconst1=(r21*x7605);
IkReal gconst2=(x7604*x7605);
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7609=((-1.0)*r20);
IkReal x7610=x7605;
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7609),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
IkReal x7611=((-1.0)*(x7612.value));
sj5=gconst1;
cj5=gconst2;
j5=x7611;
IkReal gconst0=x7611;
IkReal gconst1=(r21*x7610);
IkReal gconst2=(x7609*x7610);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7613=((-1.0)*r20);
IkReal x7614=x7605;
CheckValue<IkReal> x7616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7613),IKFAST_ATAN2_MAGTHRESH);
if(!x7616.valid){
continue;
}
IkReal x7615=((-1.0)*(x7616.value));
sj5=gconst1;
cj5=gconst2;
j5=x7615;
IkReal gconst0=x7615;
IkReal gconst1=(r21*x7614);
IkReal gconst2=(x7613*x7614);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7617=((-1.0)*r20);
IkReal x7618=x7605;
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7617),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
IkReal x7619=((-1.0)*(x7620.value));
sj5=gconst1;
cj5=gconst2;
j5=x7619;
IkReal gconst0=x7619;
IkReal gconst1=(r21*x7618);
IkReal gconst2=(x7617*x7618);
IkReal x7621=r22*r22;
CheckValue<IkReal> x7625=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7621))),-1);
if(!x7625.valid){
continue;
}
IkReal x7622=x7625.value;
IkReal x7623=(cj3*x7622);
IkReal x7624=((((2.0)*x7623*(r20*r20)*(r21*r21)))+((x7623*(r21*r21*r21*r21)))+((cj3*x7621))+((x7623*(r20*r20*r20*r20))));
j4eval[0]=x7624;
j4eval[1]=IKsign(x7624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7626=((-1.0)*r20);
IkReal x7627=x7605;
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7626),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
IkReal x7628=((-1.0)*(x7629.value));
sj5=gconst1;
cj5=gconst2;
j5=x7628;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7628;
IkReal gconst1=(r21*x7627);
IkReal gconst2=(x7626*x7627);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7630=((-1.0)*r20);
IkReal x7631=x7605;
CheckValue<IkReal> x7633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7630),IKFAST_ATAN2_MAGTHRESH);
if(!x7633.valid){
continue;
}
IkReal x7632=((-1.0)*(x7633.value));
sj5=gconst1;
cj5=gconst2;
j5=x7632;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7632;
IkReal gconst1=(r21*x7631);
IkReal gconst2=(x7630*x7631);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7634=((-1.0)*r20);
IkReal x7635=x7605;
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7634),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
IkReal x7636=((-1.0)*(x7637.value));
sj5=gconst1;
cj5=gconst2;
j5=x7636;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7636;
IkReal gconst1=(r21*x7635);
IkReal gconst2=(x7634*x7635);
IkReal x7638=((1.0)*(r22*r22));
CheckValue<IkReal> x7642=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7638))),-1);
if(!x7642.valid){
continue;
}
IkReal x7639=x7642.value;
IkReal x7640=((1.0)*x7639);
IkReal x7641=((((-1.0)*x7638))+(((-2.0)*x7639*(r20*r20)*(r21*r21)))+(((-1.0)*x7640*(r21*r21*r21*r21)))+(((-1.0)*x7640*(r20*r20*r20*r20))));
j4eval[0]=x7641;
j4eval[1]=IKsign(x7641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7643=((-1.0)*r20);
IkReal x7644=x7605;
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7643),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
IkReal x7645=((-1.0)*(x7646.value));
sj5=gconst1;
cj5=gconst2;
j5=x7645;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7645;
IkReal gconst1=(r21*x7644);
IkReal gconst2=(x7643*x7644);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7647=((-1.0)*r20);
IkReal x7648=x7605;
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7647),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
IkReal x7649=((-1.0)*(x7650.value));
sj5=gconst1;
cj5=gconst2;
j5=x7649;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7649;
IkReal gconst1=(r21*x7648);
IkReal gconst2=(x7647*x7648);
IkReal x7651=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(x7651,-1);
if(!x7655.valid){
continue;
}
IkReal x7652=x7655.value;
IkReal x7653=((1.0)*x7652);
IkReal x7654=((((-2.0)*r10*r11*r20*r21*x7652))+(((-1.0)*x7653*(r10*r10)*(r20*r20)))+(((-1.0)*x7653*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x7654;
j4eval[1]=IKsign(x7654);
j4eval[2]=r12;
j4eval[3]=x7651;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7656=((-1.0)*r20);
IkReal x7657=x7605;
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7656),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
IkReal x7658=((-1.0)*(x7659.value));
sj5=gconst1;
cj5=gconst2;
j5=x7658;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7658;
IkReal gconst1=(r21*x7657);
IkReal gconst2=(x7656*x7657);
IkReal x7660=((1.0)*(r22*r22));
CheckValue<IkReal> x7664=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7660))),-1);
if(!x7664.valid){
continue;
}
IkReal x7661=x7664.value;
IkReal x7662=((1.0)*x7661);
IkReal x7663=((((-1.0)*x7662*(r21*r21*r21*r21)))+(((-1.0)*x7660))+(((-1.0)*x7662*(r20*r20*r20*r20)))+(((-2.0)*x7661*(r20*r20)*(r21*r21))));
j4eval[0]=x7663;
j4eval[1]=IKsign(x7663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7665=(sj1*sj2);
IkReal x7666=(gconst2*r20);
IkReal x7667=(gconst1*r21);
IkReal x7668=((1.0)*cj1*cj2);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal((((x7665*x7666))+(((-1.0)*x7665*x7667))+(((-1.0)*x7666*x7668))+((cj1*cj2*x7667)))),IkReal(((((-1.0)*r22*x7668))+((r22*x7665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7666*x7666)))+(((-1.0)*(x7667*x7667)))+(((-1.0)*(r22*r22)))+(((2.0)*x7666*x7667)))),-1);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7669.value)+(((1.5707963267949)*(x7670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7671=IKcos(j4);
IkReal x7672=IKsin(j4);
IkReal x7673=((1.0)*x7671);
IkReal x7674=(gconst1*x7671);
IkReal x7675=(gconst1*x7672);
IkReal x7676=((1.0)*gconst2*x7672);
evalcond[0]=(((r22*x7672))+((r21*x7674))+(((-1.0)*gconst2*r20*x7673)));
evalcond[1]=(((r02*x7672))+(((-1.0)*gconst2*r00*x7673))+((r01*x7674)));
evalcond[2]=((1.0)+((r11*x7674))+((r12*x7672))+(((-1.0)*gconst2*r10*x7673)));
evalcond[3]=(((r11*x7675))+(((-1.0)*r12*x7673))+(((-1.0)*r10*x7676)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r00*x7676))+((cj1*sj2))+(((-1.0)*r02*x7673))+((r01*x7675)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x7675))+(((-1.0)*r20*x7676))+((cj1*cj2))+(((-1.0)*r22*x7673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7677=(gconst1*r11);
IkReal x7678=(gconst2*r10);
CheckValue<IkReal> x7679 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7678))+x7677)),IKFAST_ATAN2_MAGTHRESH);
if(!x7679.valid){
continue;
}
CheckValue<IkReal> x7680=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7677*x7677)))+(((2.0)*x7677*x7678))+(((-1.0)*(x7678*x7678)))+(((-1.0)*(r12*r12))))),-1);
if(!x7680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7679.value)+(((1.5707963267949)*(x7680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7681=IKcos(j4);
IkReal x7682=IKsin(j4);
IkReal x7683=((1.0)*x7681);
IkReal x7684=(gconst1*x7681);
IkReal x7685=(gconst1*x7682);
IkReal x7686=((1.0)*gconst2*x7682);
evalcond[0]=(((r21*x7684))+((r22*x7682))+(((-1.0)*gconst2*r20*x7683)));
evalcond[1]=(((r01*x7684))+(((-1.0)*gconst2*r00*x7683))+((r02*x7682)));
evalcond[2]=((1.0)+((r12*x7682))+(((-1.0)*gconst2*r10*x7683))+((r11*x7684)));
evalcond[3]=((((-1.0)*r10*x7686))+((r11*x7685))+(((-1.0)*r12*x7683)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r00*x7686))+((cj1*sj2))+((r01*x7685))+(((-1.0)*r02*x7683)));
evalcond[5]=((((-1.0)*r20*x7686))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7683))+((r21*x7685))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7687=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7687.valid){
continue;
}
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7687.value)))+(x7688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7689=IKcos(j4);
IkReal x7690=IKsin(j4);
IkReal x7691=((1.0)*x7689);
IkReal x7692=(gconst1*x7689);
IkReal x7693=(gconst1*x7690);
IkReal x7694=((1.0)*gconst2*x7690);
evalcond[0]=((((-1.0)*gconst2*r20*x7691))+((r21*x7692))+((r22*x7690)));
evalcond[1]=(((r02*x7690))+((r01*x7692))+(((-1.0)*gconst2*r00*x7691)));
evalcond[2]=((1.0)+((r12*x7690))+((r11*x7692))+(((-1.0)*gconst2*r10*x7691)));
evalcond[3]=((((-1.0)*r10*x7694))+((r11*x7693))+(((-1.0)*r12*x7691)));
evalcond[4]=((((-1.0)*r02*x7691))+((cj2*sj1))+(((-1.0)*r00*x7694))+((cj1*sj2))+((r01*x7693)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x7691))+((r21*x7693))+((cj1*cj2))+(((-1.0)*r20*x7694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7695=((-1.0)*r20);
IkReal x7696=x7605;
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7695),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
IkReal x7697=((-1.0)*(x7698.value));
sj5=gconst1;
cj5=gconst2;
j5=x7697;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7697;
IkReal gconst1=(r21*x7696);
IkReal gconst2=(x7695*x7696);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7699=((-1.0)*r20);
IkReal x7700=x7605;
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7699),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
IkReal x7701=((-1.0)*(x7702.value));
sj5=gconst1;
cj5=gconst2;
j5=x7701;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7701;
IkReal gconst1=(r21*x7700);
IkReal gconst2=(x7699*x7700);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7703=((-1.0)*r20);
IkReal x7704=x7605;
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7703),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
IkReal x7705=((-1.0)*(x7706.value));
sj5=gconst1;
cj5=gconst2;
j5=x7705;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7705;
IkReal gconst1=(r21*x7704);
IkReal gconst2=(x7703*x7704);
IkReal x7707=r22*r22;
IkReal x7708=(cj1*sj2);
IkReal x7709=(cj2*sj1);
IkReal x7710=((1.0)+(((-1.0)*x7707)));
CheckValue<IkReal> x7717=IKPowWithIntegerCheck(x7710,-1);
if(!x7717.valid){
continue;
}
IkReal x7711=x7717.value;
CheckValue<IkReal> x7718=IKPowWithIntegerCheck(((-1.0)+x7707),-1);
if(!x7718.valid){
continue;
}
IkReal x7712=x7718.value;
IkReal x7713=((1.0)*x7711);
if((x7710) < -0.00001)
continue;
IkReal x7714=IKsqrt(x7710);
IkReal x7715=((1.0)*r02*r22*x7712*x7714);
IkReal x7716=((((-1.0)*x7713*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x7711))+(((-1.0)*(r02*r02)))+(((-1.0)*x7713*(r00*r00)*(r20*r20))));
j4eval[0]=x7716;
j4eval[1]=((IKabs((((r02*x7708))+((r02*x7709)))))+(IKabs(((((-1.0)*x7708*x7715))+(((-1.0)*x7709*x7715))))));
j4eval[2]=IKsign(x7716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7719=(cj2*sj1);
IkReal x7720=(cj1*sj2);
IkReal x7721=(gconst2*r00);
IkReal x7722=((1.0)*gconst1*r01);
CheckValue<IkReal> x7723=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*gconst1*r01*x7721))+(((-1.0)*gconst1*r01*x7722))+(((-1.0)*(x7721*x7721))))),-1);
if(!x7723.valid){
continue;
}
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal((((x7720*x7721))+(((-1.0)*x7719*x7722))+((x7719*x7721))+(((-1.0)*x7720*x7722)))),IkReal((((r02*x7719))+((r02*x7720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7723.value)))+(x7724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7725=IKcos(j4);
IkReal x7726=IKsin(j4);
IkReal x7727=((1.0)*sj1);
IkReal x7728=((1.0)*x7725);
IkReal x7729=(gconst1*x7725);
IkReal x7730=(gconst1*x7726);
IkReal x7731=((1.0)*gconst2*x7726);
evalcond[0]=(((r22*x7726))+((r21*x7729))+(((-1.0)*gconst2*r20*x7728)));
evalcond[1]=(((r01*x7729))+(((-1.0)*gconst2*r00*x7728))+((r02*x7726)));
evalcond[2]=((-1.0)+((r12*x7726))+((r11*x7729))+(((-1.0)*gconst2*r10*x7728)));
evalcond[3]=(((r11*x7730))+(((-1.0)*r10*x7731))+(((-1.0)*r12*x7728)));
evalcond[4]=(((r21*x7730))+(((-1.0)*r20*x7731))+(((-1.0)*sj2*x7727))+((cj1*cj2))+(((-1.0)*r22*x7728)));
evalcond[5]=((((-1.0)*r00*x7731))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7728))+(((-1.0)*cj2*x7727))+((r01*x7730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7732=(gconst2*r10);
IkReal x7733=(gconst1*r11);
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7732*x7732)+(x7733*x7733)+(((-2.0)*x7732*x7733)))),-1);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7732))+x7733)),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7734.value)))+(x7735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKcos(j4);
IkReal x7737=IKsin(j4);
IkReal x7738=((1.0)*sj1);
IkReal x7739=((1.0)*x7736);
IkReal x7740=(gconst1*x7736);
IkReal x7741=(gconst1*x7737);
IkReal x7742=((1.0)*gconst2*x7737);
evalcond[0]=((((-1.0)*gconst2*r20*x7739))+((r22*x7737))+((r21*x7740)));
evalcond[1]=(((r01*x7740))+((r02*x7737))+(((-1.0)*gconst2*r00*x7739)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x7739))+((r12*x7737))+((r11*x7740)));
evalcond[3]=((((-1.0)*r12*x7739))+(((-1.0)*r10*x7742))+((r11*x7741)));
evalcond[4]=((((-1.0)*sj2*x7738))+(((-1.0)*r22*x7739))+((cj1*cj2))+(((-1.0)*r20*x7742))+((r21*x7741)));
evalcond[5]=(((r01*x7741))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x7742))+(((-1.0)*r02*x7739))+(((-1.0)*cj2*x7738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7743=((1.0)*gconst2);
CheckValue<IkReal> x7744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7743)))),-1);
if(!x7744.valid){
continue;
}
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7743)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7744.value)))+(x7745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7746=IKcos(j4);
IkReal x7747=IKsin(j4);
IkReal x7748=((1.0)*sj1);
IkReal x7749=((1.0)*x7746);
IkReal x7750=(gconst1*x7746);
IkReal x7751=(gconst1*x7747);
IkReal x7752=((1.0)*gconst2*x7747);
evalcond[0]=((((-1.0)*gconst2*r20*x7749))+((r21*x7750))+((r22*x7747)));
evalcond[1]=(((r01*x7750))+((r02*x7747))+(((-1.0)*gconst2*r00*x7749)));
evalcond[2]=((-1.0)+((r12*x7747))+(((-1.0)*gconst2*r10*x7749))+((r11*x7750)));
evalcond[3]=((((-1.0)*r10*x7752))+(((-1.0)*r12*x7749))+((r11*x7751)));
evalcond[4]=((((-1.0)*r22*x7749))+(((-1.0)*sj2*x7748))+((cj1*cj2))+((r21*x7751))+(((-1.0)*r20*x7752)));
evalcond[5]=(((r01*x7751))+(((-1.0)*r02*x7749))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x7752))+(((-1.0)*cj2*x7748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7753=((-1.0)*r20);
IkReal x7754=x7605;
CheckValue<IkReal> x7756 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7753),IKFAST_ATAN2_MAGTHRESH);
if(!x7756.valid){
continue;
}
IkReal x7755=((-1.0)*(x7756.value));
sj5=gconst1;
cj5=gconst2;
j5=x7755;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7755;
IkReal gconst1=(r21*x7754);
IkReal gconst2=(x7753*x7754);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7757=((-1.0)*r20);
IkReal x7758=x7605;
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7757),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
IkReal x7759=((-1.0)*(x7760.value));
sj5=gconst1;
cj5=gconst2;
j5=x7759;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7759;
IkReal gconst1=(r21*x7758);
IkReal gconst2=(x7757*x7758);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7761=((-1.0)*r20);
IkReal x7762=x7605;
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7761),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
IkReal x7763=((-1.0)*(x7764.value));
sj5=gconst1;
cj5=gconst2;
j5=x7763;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7763;
IkReal gconst1=(r21*x7762);
IkReal gconst2=(x7761*x7762);
IkReal x7765=((1.0)*(r22*r22));
CheckValue<IkReal> x7769=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7765))),-1);
if(!x7769.valid){
continue;
}
IkReal x7766=x7769.value;
IkReal x7767=((1.0)*x7766);
IkReal x7768=((((-1.0)*x7767*(r21*r21*r21*r21)))+(((-1.0)*x7767*(r20*r20*r20*r20)))+(((-2.0)*x7766*(r20*r20)*(r21*r21)))+(((-1.0)*x7765)));
j4eval[0]=x7768;
j4eval[1]=IKsign(x7768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7770=(sj1*sj2);
IkReal x7771=(gconst2*r20);
IkReal x7772=(gconst1*r21);
IkReal x7773=((1.0)*cj1*cj2);
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal(((((-1.0)*x7771*x7773))+(((-1.0)*x7770*x7772))+((cj1*cj2*x7772))+((x7770*x7771)))),IkReal((((r22*x7770))+(((-1.0)*r22*x7773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
CheckValue<IkReal> x7775=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7772*x7772)))+(((2.0)*x7771*x7772))+(((-1.0)*(x7771*x7771)))+(((-1.0)*(r22*r22))))),-1);
if(!x7775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7774.value)+(((1.5707963267949)*(x7775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7776=IKcos(j4);
IkReal x7777=IKsin(j4);
IkReal x7778=((1.0)*x7776);
IkReal x7779=(gconst1*x7776);
IkReal x7780=(gconst1*x7777);
IkReal x7781=((1.0)*gconst2*x7777);
evalcond[0]=(((r22*x7777))+((r21*x7779))+(((-1.0)*gconst2*r20*x7778)));
evalcond[1]=(((r11*x7779))+((r12*x7777))+(((-1.0)*gconst2*r10*x7778)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x7778))+((r02*x7777))+((r01*x7779)));
evalcond[3]=((((-1.0)*r02*x7778))+(((-1.0)*r00*x7781))+((r01*x7780)));
evalcond[4]=((((-1.0)*r10*x7781))+((cj2*sj1))+((cj1*sj2))+((r11*x7780))+(((-1.0)*r12*x7778)));
evalcond[5]=((((-1.0)*r22*x7778))+(((-1.0)*r20*x7781))+(((-1.0)*sj1*sj2))+((r21*x7780))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7782=(gconst1*r01);
IkReal x7783=(gconst2*r00);
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal(r02),IkReal((x7782+(((-1.0)*x7783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7782*x7783))+(x7782*x7782)+(x7783*x7783)+(r02*r02))),-1);
if(!x7785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7784.value)+(((1.5707963267949)*(x7785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7786=IKcos(j4);
IkReal x7787=IKsin(j4);
IkReal x7788=((1.0)*x7786);
IkReal x7789=(gconst1*x7786);
IkReal x7790=(gconst1*x7787);
IkReal x7791=((1.0)*gconst2*x7787);
evalcond[0]=(((r22*x7787))+(((-1.0)*gconst2*r20*x7788))+((r21*x7789)));
evalcond[1]=(((r11*x7789))+((r12*x7787))+(((-1.0)*gconst2*r10*x7788)));
evalcond[2]=((-1.0)+((r01*x7789))+((r02*x7787))+(((-1.0)*gconst2*r00*x7788)));
evalcond[3]=((((-1.0)*r00*x7791))+(((-1.0)*r02*x7788))+((r01*x7790)));
evalcond[4]=((((-1.0)*r10*x7791))+((cj2*sj1))+((cj1*sj2))+((r11*x7790))+(((-1.0)*r12*x7788)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x7790))+(((-1.0)*r20*x7791))+(((-1.0)*r22*x7788))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7792 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7792.valid){
continue;
}
CheckValue<IkReal> x7793=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7792.value)+(((1.5707963267949)*(x7793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7794=IKcos(j4);
IkReal x7795=IKsin(j4);
IkReal x7796=((1.0)*x7794);
IkReal x7797=(gconst1*x7794);
IkReal x7798=(gconst1*x7795);
IkReal x7799=((1.0)*gconst2*x7795);
evalcond[0]=(((r21*x7797))+(((-1.0)*gconst2*r20*x7796))+((r22*x7795)));
evalcond[1]=((((-1.0)*gconst2*r10*x7796))+((r12*x7795))+((r11*x7797)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x7796))+((r02*x7795))+((r01*x7797)));
evalcond[3]=((((-1.0)*r00*x7799))+((r01*x7798))+(((-1.0)*r02*x7796)));
evalcond[4]=((((-1.0)*r10*x7799))+((cj2*sj1))+(((-1.0)*r12*x7796))+((cj1*sj2))+((r11*x7798)));
evalcond[5]=((((-1.0)*r22*x7796))+(((-1.0)*sj1*sj2))+((r21*x7798))+(((-1.0)*r20*x7799))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7800=((-1.0)*r20);
IkReal x7801=x7605;
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7800),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
IkReal x7802=((-1.0)*(x7803.value));
sj5=gconst1;
cj5=gconst2;
j5=x7802;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7802;
IkReal gconst1=(r21*x7801);
IkReal gconst2=(x7800*x7801);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7804=((-1.0)*r20);
IkReal x7805=x7605;
CheckValue<IkReal> x7807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7804),IKFAST_ATAN2_MAGTHRESH);
if(!x7807.valid){
continue;
}
IkReal x7806=((-1.0)*(x7807.value));
sj5=gconst1;
cj5=gconst2;
j5=x7806;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7806;
IkReal gconst1=(r21*x7805);
IkReal gconst2=(x7804*x7805);
IkReal x7808=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(x7808,-1);
if(!x7812.valid){
continue;
}
IkReal x7809=x7812.value;
IkReal x7810=((1.0)*x7809);
IkReal x7811=((((-1.0)*x7810*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x7809))+(((-1.0)*x7810*(r00*r00)*(r20*r20))));
j4eval[0]=x7811;
j4eval[1]=IKsign(x7811);
j4eval[2]=r02;
j4eval[3]=x7808;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7813=((-1.0)*r20);
IkReal x7814=x7605;
CheckValue<IkReal> x7816 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7813),IKFAST_ATAN2_MAGTHRESH);
if(!x7816.valid){
continue;
}
IkReal x7815=((-1.0)*(x7816.value));
sj5=gconst1;
cj5=gconst2;
j5=x7815;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7815;
IkReal gconst1=(r21*x7814);
IkReal gconst2=(x7813*x7814);
IkReal x7817=r22*r22;
IkReal x7818=((1.0)+(((-1.0)*x7817)));
IkReal x7819=(cj2*r12*sj1);
IkReal x7820=(cj1*r12*sj2);
CheckValue<IkReal> x7827=IKPowWithIntegerCheck(x7818,-1);
if(!x7827.valid){
continue;
}
IkReal x7821=x7827.value;
CheckValue<IkReal> x7828=IKPowWithIntegerCheck(((-1.0)+x7817),-1);
if(!x7828.valid){
continue;
}
IkReal x7822=x7828.value;
IkReal x7823=((1.0)*x7821);
if((x7818) < -0.00001)
continue;
IkReal x7824=IKsqrt(x7818);
IkReal x7825=((1.0)*r22*x7822*x7824);
IkReal x7826=((((-1.0)*x7823*(r10*r10)*(r20*r20)))+(((-1.0)*x7823*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x7821)));
j4eval[0]=x7826;
j4eval[1]=IKsign(x7826);
j4eval[2]=((IKabs((x7820+x7819)))+(IKabs(((((-1.0)*x7820*x7825))+(((-1.0)*x7819*x7825))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7829=(cj2*sj1);
IkReal x7830=(gconst2*r10);
IkReal x7831=(cj1*sj2);
IkReal x7832=((1.0)*gconst1*r11);
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal((((x7830*x7831))+(((-1.0)*x7829*x7832))+(((-1.0)*x7831*x7832))+((x7829*x7830)))),IkReal((((r12*x7831))+((r12*x7829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
CheckValue<IkReal> x7834=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7830*x7830)))+(((-1.0)*(r12*r12)))+(((-1.0)*gconst1*r11*x7832))+(((2.0)*gconst1*r11*x7830)))),-1);
if(!x7834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7833.value)+(((1.5707963267949)*(x7834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7835=IKcos(j4);
IkReal x7836=IKsin(j4);
IkReal x7837=((1.0)*sj1);
IkReal x7838=((1.0)*x7835);
IkReal x7839=(gconst1*x7835);
IkReal x7840=(gconst1*x7836);
IkReal x7841=((1.0)*gconst2*x7836);
evalcond[0]=(((r21*x7839))+(((-1.0)*gconst2*r20*x7838))+((r22*x7836)));
evalcond[1]=(((r12*x7836))+(((-1.0)*gconst2*r10*x7838))+((r11*x7839)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x7838))+((r01*x7839))+((r02*x7836)));
evalcond[3]=((((-1.0)*r00*x7841))+(((-1.0)*r02*x7838))+((r01*x7840)));
evalcond[4]=(((r21*x7840))+(((-1.0)*r22*x7838))+(((-1.0)*r20*x7841))+((cj1*cj2))+(((-1.0)*sj2*x7837)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x7838))+(((-1.0)*cj2*x7837))+(((-1.0)*r10*x7841))+((r11*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7842=(gconst1*r01);
IkReal x7843=(gconst2*r00);
CheckValue<IkReal> x7844 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7843))+x7842)),IKFAST_ATAN2_MAGTHRESH);
if(!x7844.valid){
continue;
}
CheckValue<IkReal> x7845=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x7842*x7842)))+(((-1.0)*(x7843*x7843)))+(((2.0)*x7842*x7843)))),-1);
if(!x7845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7844.value)+(((1.5707963267949)*(x7845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7846=IKcos(j4);
IkReal x7847=IKsin(j4);
IkReal x7848=((1.0)*sj1);
IkReal x7849=((1.0)*x7846);
IkReal x7850=(gconst1*x7846);
IkReal x7851=(gconst1*x7847);
IkReal x7852=((1.0)*gconst2*x7847);
evalcond[0]=(((r21*x7850))+(((-1.0)*gconst2*r20*x7849))+((r22*x7847)));
evalcond[1]=(((r12*x7847))+((r11*x7850))+(((-1.0)*gconst2*r10*x7849)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x7849))+((r01*x7850))+((r02*x7847)));
evalcond[3]=((((-1.0)*r02*x7849))+((r01*x7851))+(((-1.0)*r00*x7852)));
evalcond[4]=((((-1.0)*r22*x7849))+((r21*x7851))+((cj1*cj2))+(((-1.0)*sj2*x7848))+(((-1.0)*r20*x7852)));
evalcond[5]=(((r11*x7851))+(((-1.0)*r10*x7852))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x7849))+(((-1.0)*cj2*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7853=((1.0)*gconst2);
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7853))+(((-1.0)*gconst1*r10)))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7853)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKcos(j4);
IkReal x7857=IKsin(j4);
IkReal x7858=((1.0)*sj1);
IkReal x7859=((1.0)*x7856);
IkReal x7860=(gconst1*x7856);
IkReal x7861=(gconst1*x7857);
IkReal x7862=((1.0)*gconst2*x7857);
evalcond[0]=(((r22*x7857))+((r21*x7860))+(((-1.0)*gconst2*r20*x7859)));
evalcond[1]=(((r12*x7857))+(((-1.0)*gconst2*r10*x7859))+((r11*x7860)));
evalcond[2]=((1.0)+((r02*x7857))+(((-1.0)*gconst2*r00*x7859))+((r01*x7860)));
evalcond[3]=((((-1.0)*r00*x7862))+((r01*x7861))+(((-1.0)*r02*x7859)));
evalcond[4]=((((-1.0)*sj2*x7858))+((r21*x7861))+((cj1*cj2))+(((-1.0)*r20*x7862))+(((-1.0)*r22*x7859)));
evalcond[5]=(((r11*x7861))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x7862))+(((-1.0)*cj2*x7858))+(((-1.0)*r12*x7859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7863=((-1.0)*r20);
IkReal x7864=((-1.0)*px);
CheckValue<IkReal> x7866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7863),IKFAST_ATAN2_MAGTHRESH);
if(!x7866.valid){
continue;
}
IkReal x7865=((-1.0)*(x7866.value));
sj5=gconst1;
cj5=gconst2;
j5=x7865;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7864);
rxp1_1=(px*r21);
rxp1_2=(r11*x7864);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7865;
IkReal gconst1=r21;
IkReal gconst2=x7863;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7867=((-1.0)*r20);
IkReal x7868=((-1.0)*px);
CheckValue<IkReal> x7870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7867),IKFAST_ATAN2_MAGTHRESH);
if(!x7870.valid){
continue;
}
IkReal x7869=((-1.0)*(x7870.value));
sj5=gconst1;
cj5=gconst2;
j5=x7869;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7868);
rxp1_1=(px*r21);
rxp1_2=(r11*x7868);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7869;
IkReal gconst1=r21;
IkReal gconst2=x7867;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7871=((-1.0)*r20);
IkReal x7872=((-1.0)*px);
CheckValue<IkReal> x7874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7871),IKFAST_ATAN2_MAGTHRESH);
if(!x7874.valid){
continue;
}
IkReal x7873=((-1.0)*(x7874.value));
sj5=gconst1;
cj5=gconst2;
j5=x7873;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7872);
rxp1_1=(px*r21);
rxp1_2=(r11*x7872);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7873;
IkReal gconst1=r21;
IkReal gconst2=x7871;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7877=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x7877.valid){
continue;
}
IkReal x7875=x7877.value;
IkReal x7876=((1.0)*sj0*x7875);
sj4array[0]=((((-1.0)*cj2*sj1*x7876))+(((-1.0)*cj1*sj2*x7876)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7878=IKcos(j4);
IkReal x7879=IKsin(j4);
IkReal x7880=(gconst1*r21);
IkReal x7881=((1.0)*gconst2*x7878);
evalcond[0]=((-1.0)*r02*x7878);
evalcond[1]=((((-1.0)*sj0))+((r02*x7879)));
evalcond[2]=((((-1.0)*r20*x7881))+((x7878*x7880)));
evalcond[3]=((((-1.0)*r10*x7881))+((gconst1*r11*x7878)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x7879*x7880))+((cj1*cj2))+(((-1.0)*gconst2*r20*x7879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7883.valid){
continue;
}
IkReal x7882=x7883.value;
sj4array[0]=(((sj1*sj2*x7882))+(((-1.0)*cj1*cj2*x7882)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7884=IKcos(j4);
IkReal x7885=IKsin(j4);
IkReal x7886=((1.0)*gconst2*r10);
IkReal x7887=(gconst1*x7884);
evalcond[0]=((-1.0)*r02*x7884);
evalcond[1]=((((-1.0)*sj0))+((r02*x7885)));
evalcond[2]=(((r21*x7887))+(((-1.0)*gconst2*r20*x7884)));
evalcond[3]=(((r11*x7887))+(((-1.0)*x7884*x7886)));
evalcond[4]=(((gconst1*r11*x7885))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x7885*x7886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7888=IKPowWithIntegerCheck(r02,-1);
if(!x7888.valid){
continue;
}
sj4array[0]=(sj0*(x7888.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7889=IKcos(j4);
IkReal x7890=IKsin(j4);
IkReal x7891=(gconst1*r21);
IkReal x7892=(gconst1*r11);
IkReal x7893=((1.0)*gconst2*r10);
IkReal x7894=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x7889);
evalcond[1]=((((-1.0)*x7889*x7894))+((x7889*x7891)));
evalcond[2]=((((-1.0)*x7889*x7893))+((x7889*x7892)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x7890*x7891))+((cj1*cj2))+(((-1.0)*x7890*x7894)));
evalcond[4]=(((x7890*x7892))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x7890*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7895=(sj1*sj2);
IkReal x7896=(gconst2*r20);
IkReal x7897=(gconst1*r21);
IkReal x7898=((1.0)*cj1*cj2);
CheckValue<IkReal> x7899=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7897*x7897)))+(((-1.0)*(r22*r22)))+(((2.0)*x7896*x7897))+(((-1.0)*(x7896*x7896))))),-1);
if(!x7899.valid){
continue;
}
CheckValue<IkReal> x7900 = IKatan2WithCheck(IkReal(((((-1.0)*x7895*x7897))+((x7895*x7896))+((cj1*cj2*x7897))+(((-1.0)*x7896*x7898)))),IkReal((((r22*x7895))+(((-1.0)*r22*x7898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7899.value)))+(x7900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7901=IKcos(j4);
IkReal x7902=IKsin(j4);
IkReal x7903=(cj2*sj1);
IkReal x7904=(cj1*sj2);
IkReal x7905=((1.0)*x7901);
IkReal x7906=(gconst1*x7901);
IkReal x7907=(gconst1*x7902);
IkReal x7908=((1.0)*gconst2*x7902);
evalcond[0]=((((-1.0)*gconst2*r20*x7905))+((r21*x7906))+((r22*x7902)));
evalcond[1]=(cj0+((r11*x7906))+(((-1.0)*gconst2*r10*x7905))+((r12*x7902)));
evalcond[2]=(((r02*x7902))+(((-1.0)*sj0))+((r01*x7906))+(((-1.0)*gconst2*r00*x7905)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x7907))+(((-1.0)*r20*x7908))+(((-1.0)*r22*x7905))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x7908))+((r01*x7907))+((cj0*x7904))+((cj0*x7903))+(((-1.0)*r02*x7905)));
evalcond[5]=((((-1.0)*r12*x7905))+((sj0*x7904))+((sj0*x7903))+((r11*x7907))+(((-1.0)*r10*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7909 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7909.valid){
continue;
}
CheckValue<IkReal> x7910=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7909.value)+(((1.5707963267949)*(x7910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7911=IKcos(j4);
IkReal x7912=IKsin(j4);
IkReal x7913=(cj2*sj1);
IkReal x7914=(cj1*sj2);
IkReal x7915=((1.0)*x7911);
IkReal x7916=(gconst1*x7911);
IkReal x7917=(gconst1*x7912);
IkReal x7918=((1.0)*gconst2*x7912);
evalcond[0]=(((r22*x7912))+((r21*x7916))+(((-1.0)*gconst2*r20*x7915)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x7915))+((r12*x7912))+((r11*x7916)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7912))+(((-1.0)*gconst2*r00*x7915))+((r01*x7916)));
evalcond[3]=(((r21*x7917))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7915))+(((-1.0)*r20*x7918))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x7915))+((r01*x7917))+(((-1.0)*r00*x7918))+((cj0*x7913))+((cj0*x7914)));
evalcond[5]=(((sj0*x7913))+((sj0*x7914))+((r11*x7917))+(((-1.0)*r10*x7918))+(((-1.0)*r12*x7915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7919=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7919.valid){
continue;
}
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7919.value)))+(x7920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7921=IKcos(j4);
IkReal x7922=IKsin(j4);
IkReal x7923=(cj2*sj1);
IkReal x7924=(cj1*sj2);
IkReal x7925=((1.0)*x7921);
IkReal x7926=(gconst1*x7921);
IkReal x7927=(gconst1*x7922);
IkReal x7928=((1.0)*gconst2*x7922);
evalcond[0]=(((r22*x7922))+(((-1.0)*gconst2*r20*x7925))+((r21*x7926)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x7925))+((r12*x7922))+((r11*x7926)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7922))+((r01*x7926))+(((-1.0)*gconst2*r00*x7925)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x7925))+(((-1.0)*r20*x7928))+((cj1*cj2))+((r21*x7927)));
evalcond[4]=((((-1.0)*r02*x7925))+((r01*x7927))+((cj0*x7923))+((cj0*x7924))+(((-1.0)*r00*x7928)));
evalcond[5]=((((-1.0)*r10*x7928))+(((-1.0)*r12*x7925))+((r11*x7927))+((sj0*x7923))+((sj0*x7924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7929=((-1.0)*r20);
IkReal x7930=x7605;
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7929),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
IkReal x7931=((-1.0)*(x7932.value));
sj5=gconst1;
cj5=gconst2;
j5=x7931;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7931;
IkReal gconst1=(r21*x7930);
IkReal gconst2=(x7929*x7930);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7933=((-1.0)*r20);
IkReal x7934=x7605;
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7933),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
IkReal x7935=((-1.0)*(x7936.value));
sj5=gconst1;
cj5=gconst2;
j5=x7935;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7935;
IkReal gconst1=(r21*x7934);
IkReal gconst2=(x7933*x7934);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7937=((-1.0)*r20);
IkReal x7938=x7605;
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7937),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
IkReal x7939=((-1.0)*(x7940.value));
sj5=gconst1;
cj5=gconst2;
j5=x7939;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7939;
IkReal gconst1=(r21*x7938);
IkReal gconst2=(x7937*x7938);
IkReal x7941=r22*r22;
CheckValue<IkReal> x7944=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7941))),-1);
if(!x7944.valid){
continue;
}
IkReal x7942=x7944.value;
IkReal x7943=((((2.0)*x7942*(r20*r20)*(r21*r21)))+x7941+((x7942*(r21*r21*r21*r21)))+((x7942*(r20*r20*r20*r20))));
j4eval[0]=x7943;
j4eval[1]=IKsign(x7943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7945=((-1.0)*r20);
IkReal x7946=x7605;
CheckValue<IkReal> x7948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7945),IKFAST_ATAN2_MAGTHRESH);
if(!x7948.valid){
continue;
}
IkReal x7947=((-1.0)*(x7948.value));
sj5=gconst1;
cj5=gconst2;
j5=x7947;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7947;
IkReal gconst1=(r21*x7946);
IkReal gconst2=(x7945*x7946);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7949=((-1.0)*r20);
IkReal x7950=x7605;
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7949),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
IkReal x7951=((-1.0)*(x7952.value));
sj5=gconst1;
cj5=gconst2;
j5=x7951;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7951;
IkReal gconst1=(r21*x7950);
IkReal gconst2=(x7949*x7950);
IkReal x7953=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7957=IKPowWithIntegerCheck(x7953,-1);
if(!x7957.valid){
continue;
}
IkReal x7954=x7957.value;
IkReal x7955=((1.0)*x7954);
IkReal x7956=((((-2.0)*r10*r11*r20*r21*x7954))+(((-1.0)*x7955*(r10*r10)*(r20*r20)))+(((-1.0)*x7955*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x7956;
j4eval[1]=IKsign(x7956);
j4eval[2]=r12;
j4eval[3]=x7953;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7958=((-1.0)*r20);
IkReal x7959=x7605;
CheckValue<IkReal> x7961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7958),IKFAST_ATAN2_MAGTHRESH);
if(!x7961.valid){
continue;
}
IkReal x7960=((-1.0)*(x7961.value));
sj5=gconst1;
cj5=gconst2;
j5=x7960;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7960;
IkReal gconst1=(r21*x7959);
IkReal gconst2=(x7958*x7959);
IkReal x7962=r22*r22;
CheckValue<IkReal> x7965=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7962))),-1);
if(!x7965.valid){
continue;
}
IkReal x7963=x7965.value;
IkReal x7964=(((x7963*(r20*r20*r20*r20)))+x7962+((x7963*(r21*r21*r21*r21)))+(((2.0)*x7963*(r20*r20)*(r21*r21))));
j4eval[0]=x7964;
j4eval[1]=IKsign(x7964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7966=(sj1*sj2);
IkReal x7967=(gconst2*r20);
IkReal x7968=(cj1*cj2);
IkReal x7969=(gconst1*r21);
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(IKsign(((x7967*x7967)+(r22*r22)+(((-2.0)*x7967*x7969))+(x7969*x7969))),-1);
if(!x7970.valid){
continue;
}
CheckValue<IkReal> x7971 = IKatan2WithCheck(IkReal(((((-1.0)*x7966*x7969))+(((-1.0)*x7967*x7968))+((x7966*x7967))+((x7968*x7969)))),IkReal(((((-1.0)*r22*x7968))+((r22*x7966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7970.value)))+(x7971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7972=IKcos(j4);
IkReal x7973=IKsin(j4);
IkReal x7974=(gconst1*x7972);
IkReal x7975=(gconst2*x7973);
IkReal x7976=((1.0)*gconst1*x7973);
IkReal x7977=((1.0)*gconst2*x7972);
evalcond[0]=((((-1.0)*r20*x7977))+((r22*x7973))+((r21*x7974)));
evalcond[1]=(((r01*x7974))+((r02*x7973))+(((-1.0)*r00*x7977)));
evalcond[2]=(((r12*x7972))+(((-1.0)*r11*x7976))+((r10*x7975)));
evalcond[3]=((1.0)+((r11*x7974))+((r12*x7973))+(((-1.0)*r10*x7977)));
evalcond[4]=(((cj2*sj1))+((r00*x7975))+((cj1*sj2))+((r02*x7972))+(((-1.0)*r01*x7976)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7975))+((cj1*cj2))+(((-1.0)*r21*x7976))+((r22*x7972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7978=(gconst1*r11);
IkReal x7979=(gconst2*r10);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(r12),IkReal((x7978+(((-1.0)*x7979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7978*x7978)))+(((-1.0)*(r12*r12)))+(((2.0)*x7978*x7979))+(((-1.0)*(x7979*x7979))))),-1);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7980.value)+(((1.5707963267949)*(x7981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKcos(j4);
IkReal x7983=IKsin(j4);
IkReal x7984=(gconst1*x7982);
IkReal x7985=(gconst2*x7983);
IkReal x7986=((1.0)*gconst1*x7983);
IkReal x7987=((1.0)*gconst2*x7982);
evalcond[0]=((((-1.0)*r20*x7987))+((r22*x7983))+((r21*x7984)));
evalcond[1]=((((-1.0)*r00*x7987))+((r01*x7984))+((r02*x7983)));
evalcond[2]=((((-1.0)*r11*x7986))+((r12*x7982))+((r10*x7985)));
evalcond[3]=((1.0)+(((-1.0)*r10*x7987))+((r12*x7983))+((r11*x7984)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x7986))+((r00*x7985))+((cj1*sj2))+((r02*x7982)));
evalcond[5]=(((r20*x7985))+(((-1.0)*r21*x7986))+(((-1.0)*sj1*sj2))+((r22*x7982))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7988.valid){
continue;
}
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7988.value)))+(x7989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7990=IKcos(j4);
IkReal x7991=IKsin(j4);
IkReal x7992=(gconst1*x7990);
IkReal x7993=(gconst2*x7991);
IkReal x7994=((1.0)*gconst1*x7991);
IkReal x7995=((1.0)*gconst2*x7990);
evalcond[0]=((((-1.0)*r20*x7995))+((r22*x7991))+((r21*x7992)));
evalcond[1]=((((-1.0)*r00*x7995))+((r01*x7992))+((r02*x7991)));
evalcond[2]=(((r10*x7993))+(((-1.0)*r11*x7994))+((r12*x7990)));
evalcond[3]=((1.0)+((r11*x7992))+(((-1.0)*r10*x7995))+((r12*x7991)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x7994))+((cj1*sj2))+((r00*x7993))+((r02*x7990)));
evalcond[5]=(((r20*x7993))+(((-1.0)*r21*x7994))+(((-1.0)*sj1*sj2))+((r22*x7990))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7996=((-1.0)*r20);
IkReal x7997=x7605;
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7996),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
IkReal x7998=((-1.0)*(x7999.value));
sj5=gconst1;
cj5=gconst2;
j5=x7998;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7998;
IkReal gconst1=(r21*x7997);
IkReal gconst2=(x7996*x7997);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8000=((-1.0)*r20);
IkReal x8001=x7605;
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8000),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
IkReal x8002=((-1.0)*(x8003.value));
sj5=gconst1;
cj5=gconst2;
j5=x8002;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8002;
IkReal gconst1=(r21*x8001);
IkReal gconst2=(x8000*x8001);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8004=((-1.0)*r20);
IkReal x8005=x7605;
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8004),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
IkReal x8006=((-1.0)*(x8007.value));
sj5=gconst1;
cj5=gconst2;
j5=x8006;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8006;
IkReal gconst1=(r21*x8005);
IkReal gconst2=(x8004*x8005);
IkReal x8008=r22*r22;
IkReal x8009=(cj1*cj2*r12);
CheckValue<IkReal> x8014=IKPowWithIntegerCheck(((-1.0)+x8008),-1);
if(!x8014.valid){
continue;
}
IkReal x8010=x8014.value;
IkReal x8011=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x8008)))) < -0.00001)
continue;
IkReal x8012=IKsqrt(((1.0)+(((-1.0)*x8008))));
IkReal x8013=(r22*x8010*x8012);
j4eval[0]=((IKabs(((((-1.0)*x8011))+x8009)))+(IKabs(((((-1.0)*x8011*x8013))+((x8009*x8013))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8015=(cj1*cj2);
IkReal x8016=(gconst2*r10);
IkReal x8017=(gconst1*r11);
IkReal x8018=((1.0)*sj1*sj2);
CheckValue<IkReal> x8019=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8019.valid){
continue;
}
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal((((r12*x8015))+(((-1.0)*r12*x8018)))),IkReal(((((-1.0)*x8015*x8016))+(((-1.0)*x8017*x8018))+((sj1*sj2*x8016))+((x8015*x8017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8019.value)))+(x8020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8021=IKcos(j4);
IkReal x8022=IKsin(j4);
IkReal x8023=((1.0)*sj1);
IkReal x8024=(gconst1*x8021);
IkReal x8025=(gconst2*x8022);
IkReal x8026=((1.0)*gconst1*x8022);
IkReal x8027=((1.0)*gconst2*x8021);
evalcond[0]=((((-1.0)*r20*x8027))+((r21*x8024))+((r22*x8022)));
evalcond[1]=(((r02*x8022))+(((-1.0)*r00*x8027))+((r01*x8024)));
evalcond[2]=(((r10*x8025))+(((-1.0)*r11*x8026))+((r12*x8021)));
evalcond[3]=((-1.0)+((r12*x8022))+((r11*x8024))+(((-1.0)*r10*x8027)));
evalcond[4]=((((-1.0)*r21*x8026))+((r20*x8025))+((cj1*cj2))+((r22*x8021))+(((-1.0)*sj2*x8023)));
evalcond[5]=((((-1.0)*cj2*x8023))+(((-1.0)*cj1*sj2))+((r02*x8021))+((r00*x8025))+(((-1.0)*r01*x8026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8028=(gconst2*r10);
IkReal x8029=(gconst1*r11);
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8028*x8029))+(x8029*x8029)+(x8028*x8028))),-1);
if(!x8030.valid){
continue;
}
CheckValue<IkReal> x8031 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8028))+x8029)),IKFAST_ATAN2_MAGTHRESH);
if(!x8031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8030.value)))+(x8031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8032=IKcos(j4);
IkReal x8033=IKsin(j4);
IkReal x8034=((1.0)*sj1);
IkReal x8035=(gconst1*x8032);
IkReal x8036=(gconst2*x8033);
IkReal x8037=((1.0)*gconst1*x8033);
IkReal x8038=((1.0)*gconst2*x8032);
evalcond[0]=((((-1.0)*r20*x8038))+((r21*x8035))+((r22*x8033)));
evalcond[1]=(((r02*x8033))+((r01*x8035))+(((-1.0)*r00*x8038)));
evalcond[2]=((((-1.0)*r11*x8037))+((r10*x8036))+((r12*x8032)));
evalcond[3]=((-1.0)+((r12*x8033))+(((-1.0)*r10*x8038))+((r11*x8035)));
evalcond[4]=((((-1.0)*sj2*x8034))+(((-1.0)*r21*x8037))+((r20*x8036))+((cj1*cj2))+((r22*x8032)));
evalcond[5]=((((-1.0)*cj2*x8034))+(((-1.0)*cj1*sj2))+((r02*x8032))+(((-1.0)*r01*x8037))+((r00*x8036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*gconst2);
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8039))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8039)))),-1);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8040.value)+(((1.5707963267949)*(x8041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKcos(j4);
IkReal x8043=IKsin(j4);
IkReal x8044=((1.0)*sj1);
IkReal x8045=(gconst1*x8042);
IkReal x8046=(gconst2*x8043);
IkReal x8047=((1.0)*gconst1*x8043);
IkReal x8048=((1.0)*gconst2*x8042);
evalcond[0]=((((-1.0)*r20*x8048))+((r21*x8045))+((r22*x8043)));
evalcond[1]=(((r01*x8045))+((r02*x8043))+(((-1.0)*r00*x8048)));
evalcond[2]=((((-1.0)*r11*x8047))+((r10*x8046))+((r12*x8042)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8048))+((r11*x8045))+((r12*x8043)));
evalcond[4]=(((r20*x8046))+(((-1.0)*r21*x8047))+((cj1*cj2))+((r22*x8042))+(((-1.0)*sj2*x8044)));
evalcond[5]=((((-1.0)*cj2*x8044))+((r02*x8042))+(((-1.0)*cj1*sj2))+((r00*x8046))+(((-1.0)*r01*x8047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8049=((-1.0)*r20);
IkReal x8050=x7605;
CheckValue<IkReal> x8052 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8049),IKFAST_ATAN2_MAGTHRESH);
if(!x8052.valid){
continue;
}
IkReal x8051=((-1.0)*(x8052.value));
sj5=gconst1;
cj5=gconst2;
j5=x8051;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8051;
IkReal gconst1=(r21*x8050);
IkReal gconst2=(x8049*x8050);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8053=((-1.0)*r20);
IkReal x8054=x7605;
CheckValue<IkReal> x8056 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8053),IKFAST_ATAN2_MAGTHRESH);
if(!x8056.valid){
continue;
}
IkReal x8055=((-1.0)*(x8056.value));
sj5=gconst1;
cj5=gconst2;
j5=x8055;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8055;
IkReal gconst1=(r21*x8054);
IkReal gconst2=(x8053*x8054);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8057=((-1.0)*r20);
IkReal x8058=x7605;
CheckValue<IkReal> x8060 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8057),IKFAST_ATAN2_MAGTHRESH);
if(!x8060.valid){
continue;
}
IkReal x8059=((-1.0)*(x8060.value));
sj5=gconst1;
cj5=gconst2;
j5=x8059;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8059;
IkReal gconst1=(r21*x8058);
IkReal gconst2=(x8057*x8058);
IkReal x8061=r22*r22;
CheckValue<IkReal> x8064=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8061))),-1);
if(!x8064.valid){
continue;
}
IkReal x8062=x8064.value;
IkReal x8063=(((x8062*(r21*r21*r21*r21)))+(((2.0)*x8062*(r20*r20)*(r21*r21)))+((x8062*(r20*r20*r20*r20)))+x8061);
j4eval[0]=x8063;
j4eval[1]=IKsign(x8063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8065=(sj1*sj2);
IkReal x8066=(gconst2*r20);
IkReal x8067=(cj1*cj2);
IkReal x8068=(gconst1*r21);
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal((((x8065*x8066))+(((-1.0)*x8066*x8067))+((x8067*x8068))+(((-1.0)*x8065*x8068)))),IkReal((((r22*x8065))+(((-1.0)*r22*x8067)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
CheckValue<IkReal> x8070=IKPowWithIntegerCheck(IKsign(((x8068*x8068)+(r22*r22)+(x8066*x8066)+(((-2.0)*x8066*x8068)))),-1);
if(!x8070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8069.value)+(((1.5707963267949)*(x8070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8071=IKcos(j4);
IkReal x8072=IKsin(j4);
IkReal x8073=(gconst1*x8071);
IkReal x8074=(gconst2*x8072);
IkReal x8075=((1.0)*gconst1*x8072);
IkReal x8076=((1.0)*gconst2*x8071);
evalcond[0]=(((r22*x8072))+((r21*x8073))+(((-1.0)*r20*x8076)));
evalcond[1]=(((r12*x8072))+((r11*x8073))+(((-1.0)*r10*x8076)));
evalcond[2]=(((r02*x8071))+(((-1.0)*r01*x8075))+((r00*x8074)));
evalcond[3]=((-1.0)+((r02*x8072))+(((-1.0)*r00*x8076))+((r01*x8073)));
evalcond[4]=(((cj2*sj1))+((r10*x8074))+((cj1*sj2))+((r12*x8071))+(((-1.0)*r11*x8075)));
evalcond[5]=(((r20*x8074))+(((-1.0)*sj1*sj2))+((r22*x8071))+((cj1*cj2))+(((-1.0)*r21*x8075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8077=(gconst1*r01);
IkReal x8078=(gconst2*r00);
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(IKsign(((x8078*x8078)+(((-2.0)*x8077*x8078))+(x8077*x8077)+(r02*r02))),-1);
if(!x8079.valid){
continue;
}
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8078))+x8077)),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8079.value)))+(x8080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8081=IKcos(j4);
IkReal x8082=IKsin(j4);
IkReal x8083=(gconst1*x8081);
IkReal x8084=(gconst2*x8082);
IkReal x8085=((1.0)*gconst1*x8082);
IkReal x8086=((1.0)*gconst2*x8081);
evalcond[0]=(((r22*x8082))+((r21*x8083))+(((-1.0)*r20*x8086)));
evalcond[1]=(((r12*x8082))+((r11*x8083))+(((-1.0)*r10*x8086)));
evalcond[2]=((((-1.0)*r01*x8085))+((r00*x8084))+((r02*x8081)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8086))+((r01*x8083))+((r02*x8082)));
evalcond[4]=(((cj2*sj1))+((r10*x8084))+((cj1*sj2))+((r12*x8081))+(((-1.0)*r11*x8085)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x8081))+((cj1*cj2))+(((-1.0)*r21*x8085))+((r20*x8084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8087 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8087.value)+(((1.5707963267949)*(x8088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKcos(j4);
IkReal x8090=IKsin(j4);
IkReal x8091=(gconst1*x8089);
IkReal x8092=(gconst2*x8090);
IkReal x8093=((1.0)*gconst1*x8090);
IkReal x8094=((1.0)*gconst2*x8089);
evalcond[0]=(((r22*x8090))+((r21*x8091))+(((-1.0)*r20*x8094)));
evalcond[1]=(((r11*x8091))+((r12*x8090))+(((-1.0)*r10*x8094)));
evalcond[2]=((((-1.0)*r01*x8093))+((r00*x8092))+((r02*x8089)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8094))+((r01*x8091))+((r02*x8090)));
evalcond[4]=(((cj2*sj1))+((r10*x8092))+((cj1*sj2))+((r12*x8089))+(((-1.0)*r11*x8093)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x8089))+((cj1*cj2))+((r20*x8092))+(((-1.0)*r21*x8093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8095=((-1.0)*r20);
IkReal x8096=x7605;
CheckValue<IkReal> x8098 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8095),IKFAST_ATAN2_MAGTHRESH);
if(!x8098.valid){
continue;
}
IkReal x8097=((-1.0)*(x8098.value));
sj5=gconst1;
cj5=gconst2;
j5=x8097;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8097;
IkReal gconst1=(r21*x8096);
IkReal gconst2=(x8095*x8096);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8099=((-1.0)*r20);
IkReal x8100=x7605;
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8099),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
IkReal x8101=((-1.0)*(x8102.value));
sj5=gconst1;
cj5=gconst2;
j5=x8101;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8101;
IkReal gconst1=(r21*x8100);
IkReal gconst2=(x8099*x8100);
IkReal x8103=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8107=IKPowWithIntegerCheck(x8103,-1);
if(!x8107.valid){
continue;
}
IkReal x8104=x8107.value;
IkReal x8105=((1.0)*x8104);
IkReal x8106=((((-1.0)*(r02*r02)))+(((-1.0)*x8105*(r00*r00)*(r20*r20)))+(((-1.0)*x8105*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8104)));
j4eval[0]=x8106;
j4eval[1]=IKsign(x8106);
j4eval[2]=r02;
j4eval[3]=x8103;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8108=((-1.0)*r20);
IkReal x8109=x7605;
CheckValue<IkReal> x8111 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8108),IKFAST_ATAN2_MAGTHRESH);
if(!x8111.valid){
continue;
}
IkReal x8110=((-1.0)*(x8111.value));
sj5=gconst1;
cj5=gconst2;
j5=x8110;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8110;
IkReal gconst1=(r21*x8109);
IkReal gconst2=(x8108*x8109);
IkReal x8112=r22*r22;
IkReal x8113=(cj1*cj2*r02);
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(((-1.0)+x8112),-1);
if(!x8118.valid){
continue;
}
IkReal x8114=x8118.value;
IkReal x8115=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8112)))) < -0.00001)
continue;
IkReal x8116=IKsqrt(((1.0)+(((-1.0)*x8112))));
IkReal x8117=(r22*x8114*x8116);
j4eval[0]=((IKabs(((((-1.0)*x8115*x8117))+((x8113*x8117)))))+(IKabs(((((-1.0)*x8115))+x8113))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8119=(gconst1*r01);
IkReal x8120=(gconst2*r00);
IkReal x8121=(cj1*cj2);
IkReal x8122=((1.0)*sj1*sj2);
CheckValue<IkReal> x8123 = IKatan2WithCheck(IkReal((((r02*x8121))+(((-1.0)*r02*x8122)))),IkReal(((((-1.0)*x8120*x8121))+((sj1*sj2*x8120))+((x8119*x8121))+(((-1.0)*x8119*x8122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8123.valid){
continue;
}
CheckValue<IkReal> x8124=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8123.value)+(((1.5707963267949)*(x8124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8125=IKcos(j4);
IkReal x8126=IKsin(j4);
IkReal x8127=((1.0)*sj1);
IkReal x8128=(gconst1*x8125);
IkReal x8129=(gconst2*x8126);
IkReal x8130=((1.0)*gconst1*x8126);
IkReal x8131=((1.0)*gconst2*x8125);
evalcond[0]=(((r21*x8128))+(((-1.0)*r20*x8131))+((r22*x8126)));
evalcond[1]=(((r12*x8126))+((r11*x8128))+(((-1.0)*r10*x8131)));
evalcond[2]=(((r02*x8125))+((r00*x8129))+(((-1.0)*r01*x8130)));
evalcond[3]=((1.0)+((r02*x8126))+((r01*x8128))+(((-1.0)*r00*x8131)));
evalcond[4]=(((r20*x8129))+(((-1.0)*r21*x8130))+((cj1*cj2))+((r22*x8125))+(((-1.0)*sj2*x8127)));
evalcond[5]=((((-1.0)*r11*x8130))+(((-1.0)*cj1*sj2))+((r10*x8129))+((r12*x8125))+(((-1.0)*cj2*x8127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8132=(gconst1*r01);
IkReal x8133=(gconst2*r00);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8133))+x8132)),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((2.0)*x8132*x8133))+(((-1.0)*(x8133*x8133)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8132*x8132))))),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKcos(j4);
IkReal x8137=IKsin(j4);
IkReal x8138=((1.0)*sj1);
IkReal x8139=(gconst1*x8136);
IkReal x8140=(gconst2*x8137);
IkReal x8141=((1.0)*gconst1*x8137);
IkReal x8142=((1.0)*gconst2*x8136);
evalcond[0]=(((r22*x8137))+(((-1.0)*r20*x8142))+((r21*x8139)));
evalcond[1]=(((r11*x8139))+((r12*x8137))+(((-1.0)*r10*x8142)));
evalcond[2]=((((-1.0)*r01*x8141))+((r02*x8136))+((r00*x8140)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8142))+((r02*x8137))+((r01*x8139)));
evalcond[4]=(((r22*x8136))+(((-1.0)*sj2*x8138))+(((-1.0)*r21*x8141))+((r20*x8140))+((cj1*cj2)));
evalcond[5]=(((r12*x8136))+(((-1.0)*cj2*x8138))+(((-1.0)*cj1*sj2))+((r10*x8140))+(((-1.0)*r11*x8141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8143=((1.0)*gconst2);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8143))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8143)))),-1);
if(!x8145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8144.value)+(((1.5707963267949)*(x8145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8146=IKcos(j4);
IkReal x8147=IKsin(j4);
IkReal x8148=((1.0)*sj1);
IkReal x8149=(gconst1*x8146);
IkReal x8150=(gconst2*x8147);
IkReal x8151=((1.0)*gconst1*x8147);
IkReal x8152=((1.0)*gconst2*x8146);
evalcond[0]=(((r22*x8147))+(((-1.0)*r20*x8152))+((r21*x8149)));
evalcond[1]=((((-1.0)*r10*x8152))+((r11*x8149))+((r12*x8147)));
evalcond[2]=(((r00*x8150))+((r02*x8146))+(((-1.0)*r01*x8151)));
evalcond[3]=((1.0)+((r01*x8149))+((r02*x8147))+(((-1.0)*r00*x8152)));
evalcond[4]=(((r20*x8150))+((r22*x8146))+(((-1.0)*sj2*x8148))+((cj1*cj2))+(((-1.0)*r21*x8151)));
evalcond[5]=(((r10*x8150))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8148))+((r12*x8146))+(((-1.0)*r11*x8151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8153=((-1.0)*r20);
IkReal x8154=((-1.0)*px);
CheckValue<IkReal> x8156 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8153),IKFAST_ATAN2_MAGTHRESH);
if(!x8156.valid){
continue;
}
IkReal x8155=((-1.0)*(x8156.value));
sj5=gconst1;
cj5=gconst2;
j5=x8155;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8154);
rxp1_1=(px*r21);
rxp1_2=(r11*x8154);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8155;
IkReal gconst1=r21;
IkReal gconst2=x8153;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8157=((-1.0)*r20);
IkReal x8158=((-1.0)*px);
CheckValue<IkReal> x8160 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8157),IKFAST_ATAN2_MAGTHRESH);
if(!x8160.valid){
continue;
}
IkReal x8159=((-1.0)*(x8160.value));
sj5=gconst1;
cj5=gconst2;
j5=x8159;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8158);
rxp1_1=(px*r21);
rxp1_2=(r11*x8158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8159;
IkReal gconst1=r21;
IkReal gconst2=x8157;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8161=((-1.0)*r20);
IkReal x8162=((-1.0)*px);
CheckValue<IkReal> x8164 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8161),IKFAST_ATAN2_MAGTHRESH);
if(!x8164.valid){
continue;
}
IkReal x8163=((-1.0)*(x8164.value));
sj5=gconst1;
cj5=gconst2;
j5=x8163;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8162);
rxp1_1=(px*r21);
rxp1_2=(r11*x8162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8163;
IkReal gconst1=r21;
IkReal gconst2=x8161;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8167=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8167.valid){
continue;
}
IkReal x8165=x8167.value;
IkReal x8166=((1.0)*sj0*x8165);
sj4array[0]=((((-1.0)*cj2*sj1*x8166))+(((-1.0)*cj1*sj2*x8166)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8168=IKcos(j4);
IkReal x8169=IKsin(j4);
IkReal x8170=(gconst1*x8168);
IkReal x8171=((1.0)*gconst2*x8168);
evalcond[0]=(r02*x8168);
evalcond[1]=((((-1.0)*sj0))+((r02*x8169)));
evalcond[2]=((((-1.0)*r20*x8171))+((r21*x8170)));
evalcond[3]=(((r11*x8170))+(((-1.0)*r10*x8171)));
evalcond[4]=((((-1.0)*gconst1*r21*x8169))+(((-1.0)*sj1*sj2))+((gconst2*r20*x8169))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8173=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8173.valid){
continue;
}
IkReal x8172=x8173.value;
sj4array[0]=((((-1.0)*cj1*cj2*x8172))+((sj1*sj2*x8172)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8174=IKcos(j4);
IkReal x8175=IKsin(j4);
IkReal x8176=(gconst2*r10);
IkReal x8177=(gconst1*x8174);
IkReal x8178=((1.0)*x8174);
evalcond[0]=(r02*x8174);
evalcond[1]=(((r02*x8175))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x8177))+(((-1.0)*gconst2*r20*x8178)));
evalcond[3]=((((-1.0)*x8176*x8178))+((r11*x8177)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*gconst1*r11*x8175))+((x8175*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(r02,-1);
if(!x8179.valid){
continue;
}
sj4array[0]=(sj0*(x8179.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8180=IKcos(j4);
IkReal x8181=IKsin(j4);
IkReal x8182=(gconst2*r10);
IkReal x8183=(gconst2*r20);
IkReal x8184=((1.0)*x8180);
IkReal x8185=(gconst1*x8180);
IkReal x8186=((1.0)*gconst1*x8181);
evalcond[0]=(r02*x8180);
evalcond[1]=(((r21*x8185))+(((-1.0)*x8183*x8184)));
evalcond[2]=(((r11*x8185))+(((-1.0)*x8182*x8184)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8186))+((cj1*cj2))+((x8181*x8183)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r11*x8186))+((x8181*x8182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8187=(sj1*sj2);
IkReal x8188=(gconst2*r20);
IkReal x8189=(cj1*cj2);
IkReal x8190=(gconst1*r21);
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8188*x8190))+(r22*r22)+(x8188*x8188)+(x8190*x8190))),-1);
if(!x8191.valid){
continue;
}
CheckValue<IkReal> x8192 = IKatan2WithCheck(IkReal(((((-1.0)*x8188*x8189))+(((-1.0)*x8187*x8190))+((x8187*x8188))+((x8189*x8190)))),IkReal((((r22*x8187))+(((-1.0)*r22*x8189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8191.value)))+(x8192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8193=IKcos(j4);
IkReal x8194=IKsin(j4);
IkReal x8195=(cj2*sj1);
IkReal x8196=(cj1*sj2);
IkReal x8197=(gconst1*x8193);
IkReal x8198=(gconst2*x8194);
IkReal x8199=((1.0)*gconst1*x8194);
IkReal x8200=((1.0)*gconst2*x8193);
evalcond[0]=(((r21*x8197))+((r22*x8194))+(((-1.0)*r20*x8200)));
evalcond[1]=((((-1.0)*r10*x8200))+((r12*x8194))+((r11*x8197))+cj0);
evalcond[2]=((((-1.0)*r00*x8200))+(((-1.0)*sj0))+((r01*x8197))+((r02*x8194)));
evalcond[3]=(((r20*x8198))+((r22*x8193))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8199))+((cj1*cj2)));
evalcond[4]=(((r00*x8198))+(((-1.0)*r01*x8199))+((r02*x8193))+((cj0*x8196))+((cj0*x8195)));
evalcond[5]=(((r10*x8198))+((r12*x8193))+((sj0*x8196))+((sj0*x8195))+(((-1.0)*r11*x8199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
CheckValue<IkReal> x8202=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8201.value)+(((1.5707963267949)*(x8202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8203=IKcos(j4);
IkReal x8204=IKsin(j4);
IkReal x8205=(cj2*sj1);
IkReal x8206=(cj1*sj2);
IkReal x8207=(gconst1*x8203);
IkReal x8208=(gconst2*x8204);
IkReal x8209=((1.0)*gconst1*x8204);
IkReal x8210=((1.0)*gconst2*x8203);
evalcond[0]=((((-1.0)*r20*x8210))+((r22*x8204))+((r21*x8207)));
evalcond[1]=(((r11*x8207))+cj0+((r12*x8204))+(((-1.0)*r10*x8210)));
evalcond[2]=(((r02*x8204))+(((-1.0)*sj0))+(((-1.0)*r00*x8210))+((r01*x8207)));
evalcond[3]=((((-1.0)*r21*x8209))+((r22*x8203))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x8208)));
evalcond[4]=(((r02*x8203))+(((-1.0)*r01*x8209))+((cj0*x8206))+((cj0*x8205))+((r00*x8208)));
evalcond[5]=(((sj0*x8206))+((sj0*x8205))+((r12*x8203))+(((-1.0)*r11*x8209))+((r10*x8208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8211.valid){
continue;
}
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8211.value)))+(x8212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8213=IKcos(j4);
IkReal x8214=IKsin(j4);
IkReal x8215=(cj2*sj1);
IkReal x8216=(cj1*sj2);
IkReal x8217=(gconst1*x8213);
IkReal x8218=(gconst2*x8214);
IkReal x8219=((1.0)*gconst1*x8214);
IkReal x8220=((1.0)*gconst2*x8213);
evalcond[0]=(((r22*x8214))+((r21*x8217))+(((-1.0)*r20*x8220)));
evalcond[1]=(((r11*x8217))+cj0+((r12*x8214))+(((-1.0)*r10*x8220)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8217))+(((-1.0)*r00*x8220))+((r02*x8214)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x8213))+((cj1*cj2))+((r20*x8218))+(((-1.0)*r21*x8219)));
evalcond[4]=((((-1.0)*r01*x8219))+((cj0*x8215))+((cj0*x8216))+((r00*x8218))+((r02*x8213)));
evalcond[5]=(((r12*x8213))+(((-1.0)*r11*x8219))+((r10*x8218))+((sj0*x8216))+((sj0*x8215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8221=((-1.0)*r20);
IkReal x8222=x7605;
CheckValue<IkReal> x8224 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8221),IKFAST_ATAN2_MAGTHRESH);
if(!x8224.valid){
continue;
}
IkReal x8223=((-1.0)*(x8224.value));
sj5=gconst1;
cj5=gconst2;
j5=x8223;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8223;
IkReal gconst1=(r21*x8222);
IkReal gconst2=(x8221*x8222);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8225=((-1.0)*r20);
IkReal x8226=x7605;
CheckValue<IkReal> x8228 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8225),IKFAST_ATAN2_MAGTHRESH);
if(!x8228.valid){
continue;
}
IkReal x8227=((-1.0)*(x8228.value));
sj5=gconst1;
cj5=gconst2;
j5=x8227;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8227;
IkReal gconst1=(r21*x8226);
IkReal gconst2=(x8225*x8226);
CheckValue<IkReal> x8236=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8236.valid){
continue;
}
IkReal x8229=x8236.value;
IkReal x8230=(cj3*x8229);
IkReal x8231=(r11*x8230);
IkReal x8232=(r01*x8230);
IkReal x8233=(r00*x8230);
IkReal x8234=(r10*x8230);
IkReal x8235=(r20*r21*x8230);
j4eval[0]=IKsign((((r00*r20*r21*x8231))+((cj3*r02*r12))+((r01*x8231*(r21*r21)))+((r10*x8233*(r20*r20)))+((r10*r20*r21*x8232))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8237=gconst2*gconst2;
IkReal x8238=gconst1*gconst1;
IkReal x8239=((1.0)*r02);
IkReal x8240=(cj3*r01);
IkReal x8241=(gconst1*gconst2);
IkReal x8242=(cj3*r10);
IkReal x8243=((1.0)*r00);
IkReal x8244=(r10*sj3);
IkReal x8245=(r11*sj3);
IkReal x8246=(cj3*r11);
CheckValue<IkReal> x8247 = IKatan2WithCheck(IkReal((((r11*x8240*x8241))+(((-1.0)*x8237*x8243*x8246))+((r10*x8238*x8240))+(((-1.0)*x8241*x8242*x8243)))),IkReal(((((-1.0)*gconst2*x8239*x8246))+(((-1.0)*gconst1*x8239*x8242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8247.valid){
continue;
}
CheckValue<IkReal> x8248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*sj3*x8239))+(((-1.0)*x8237*x8243*x8244))+(((-1.0)*r01*x8238*x8245))+((r00*x8241*x8245))+((r01*x8241*x8244)))),-1);
if(!x8248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8247.value)+(((1.5707963267949)*(x8248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8249=IKcos(j4);
IkReal x8250=IKsin(j4);
IkReal x8251=(cj1*cj2);
IkReal x8252=(cj3*gconst1);
IkReal x8253=(gconst2*sj3);
IkReal x8254=(gconst1*sj3);
IkReal x8255=((1.0)*sj2);
IkReal x8256=(cj2*sj1);
IkReal x8257=(cj3*gconst2);
IkReal x8258=(sj1*x8255);
IkReal x8259=((1.0)*x8250);
IkReal x8260=(gconst1*x8249);
IkReal x8261=((1.0)*x8249);
IkReal x8262=(cj3*x8249);
IkReal x8263=(x8250*x8257);
evalcond[0]=((((-1.0)*gconst2*r20*x8261))+((r21*x8260))+((r22*x8250)));
evalcond[1]=((((-1.0)*gconst2*r00*x8261))+((r02*x8250))+((r01*x8260)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8261))+((r12*x8250))+((r11*x8260)));
evalcond[3]=(((r10*x8254))+(((-1.0)*r11*x8252*x8259))+((r11*x8253))+((r12*x8262))+((r10*x8263)));
evalcond[4]=(((r10*x8252))+(((-1.0)*r10*x8253*x8259))+(((-1.0)*r12*sj3*x8261))+((r11*x8257))+((r11*x8250*x8254)));
evalcond[5]=(((r00*x8252))+((r01*x8257))+((r01*x8250*x8254))+(((-1.0)*r00*x8253*x8259))+((cj1*sj2))+(((-1.0)*r02*sj3*x8261))+x8256);
evalcond[6]=(((r00*x8254))+(((-1.0)*x8258))+((r01*x8253))+((r02*x8262))+(((-1.0)*r01*x8252*x8259))+((r00*x8263))+x8251);
evalcond[7]=((((-1.0)*r22*sj3*x8261))+(((-1.0)*x8258))+((r21*x8257))+((r21*x8250*x8254))+((r20*x8252))+(((-1.0)*r20*x8253*x8259))+x8251);
evalcond[8]=((((-1.0)*x8256))+(((-1.0)*r21*x8252*x8259))+((r21*x8253))+((r20*x8263))+((r20*x8254))+((r22*x8262))+(((-1.0)*cj1*x8255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8264=gconst1*gconst1;
IkReal x8265=gconst2*gconst2;
IkReal x8266=((1.0)*r10);
IkReal x8267=(r01*r11);
IkReal x8268=(r02*sj3);
IkReal x8269=((1.0)*r11);
IkReal x8270=(gconst1*gconst2*sj3);
IkReal x8271=(r00*x8265);
IkReal x8272=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x8269*x8271))+((r01*r10*sj3*x8264))+(((-1.0)*r00*x8266*x8270))+((x8267*x8270)))),IkReal(((((-1.0)*gconst2*x8268*x8269))+(((-1.0)*gconst1*x8266*x8268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
CheckValue<IkReal> x8274=IKPowWithIntegerCheck(IKsign((((cj3*x8264*x8267))+((cj3*r02*r12))+(((-1.0)*r01*x8266*x8272))+(((-1.0)*r00*x8269*x8272))+((cj3*r10*x8271)))),-1);
if(!x8274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8273.value)+(((1.5707963267949)*(x8274.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8275=IKcos(j4);
IkReal x8276=IKsin(j4);
IkReal x8277=(cj1*cj2);
IkReal x8278=(cj3*gconst1);
IkReal x8279=(gconst2*sj3);
IkReal x8280=(gconst1*sj3);
IkReal x8281=((1.0)*sj2);
IkReal x8282=(cj2*sj1);
IkReal x8283=(cj3*gconst2);
IkReal x8284=(sj1*x8281);
IkReal x8285=((1.0)*x8276);
IkReal x8286=(gconst1*x8275);
IkReal x8287=((1.0)*x8275);
IkReal x8288=(cj3*x8275);
IkReal x8289=(x8276*x8283);
evalcond[0]=(((r21*x8286))+(((-1.0)*gconst2*r20*x8287))+((r22*x8276)));
evalcond[1]=((((-1.0)*gconst2*r00*x8287))+((r01*x8286))+((r02*x8276)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8287))+((r11*x8286))+((r12*x8276)));
evalcond[3]=(((r10*x8289))+((r10*x8280))+(((-1.0)*r11*x8278*x8285))+((r11*x8279))+((r12*x8288)));
evalcond[4]=((((-1.0)*r12*sj3*x8287))+(((-1.0)*r10*x8279*x8285))+((r11*x8283))+((r11*x8276*x8280))+((r10*x8278)));
evalcond[5]=(((r01*x8283))+((r01*x8276*x8280))+((cj1*sj2))+(((-1.0)*r02*sj3*x8287))+(((-1.0)*r00*x8279*x8285))+((r00*x8278))+x8282);
evalcond[6]=(((r00*x8289))+((r00*x8280))+(((-1.0)*r01*x8278*x8285))+((r02*x8288))+(((-1.0)*x8284))+((r01*x8279))+x8277);
evalcond[7]=(((r20*x8278))+((r21*x8283))+(((-1.0)*r22*sj3*x8287))+((r21*x8276*x8280))+(((-1.0)*x8284))+(((-1.0)*r20*x8279*x8285))+x8277);
evalcond[8]=((((-1.0)*r21*x8278*x8285))+(((-1.0)*x8282))+(((-1.0)*cj1*x8281))+((r20*x8289))+((r20*x8280))+((r21*x8279))+((r22*x8288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8290=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8290.valid){
continue;
}
CheckValue<IkReal> x8291 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8290.value)))+(x8291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8292=IKcos(j4);
IkReal x8293=IKsin(j4);
IkReal x8294=(cj1*cj2);
IkReal x8295=(cj3*gconst1);
IkReal x8296=(gconst2*sj3);
IkReal x8297=(gconst1*sj3);
IkReal x8298=((1.0)*sj2);
IkReal x8299=(cj2*sj1);
IkReal x8300=(cj3*gconst2);
IkReal x8301=(sj1*x8298);
IkReal x8302=((1.0)*x8293);
IkReal x8303=(gconst1*x8292);
IkReal x8304=((1.0)*x8292);
IkReal x8305=(cj3*x8292);
IkReal x8306=(x8293*x8300);
evalcond[0]=(((r21*x8303))+(((-1.0)*gconst2*r20*x8304))+((r22*x8293)));
evalcond[1]=(((r01*x8303))+(((-1.0)*gconst2*r00*x8304))+((r02*x8293)));
evalcond[2]=((1.0)+((r11*x8303))+((r12*x8293))+(((-1.0)*gconst2*r10*x8304)));
evalcond[3]=(((r10*x8297))+((r10*x8306))+((r12*x8305))+(((-1.0)*r11*x8295*x8302))+((r11*x8296)));
evalcond[4]=(((r10*x8295))+((r11*x8293*x8297))+((r11*x8300))+(((-1.0)*r10*x8296*x8302))+(((-1.0)*r12*sj3*x8304)));
evalcond[5]=((((-1.0)*r00*x8296*x8302))+((r00*x8295))+((cj1*sj2))+((r01*x8300))+((r01*x8293*x8297))+(((-1.0)*r02*sj3*x8304))+x8299);
evalcond[6]=((((-1.0)*r01*x8295*x8302))+((r02*x8305))+((r01*x8296))+((r00*x8297))+((r00*x8306))+(((-1.0)*x8301))+x8294);
evalcond[7]=(((r21*x8300))+((r20*x8295))+(((-1.0)*r22*sj3*x8304))+((r21*x8293*x8297))+(((-1.0)*x8301))+(((-1.0)*r20*x8296*x8302))+x8294);
evalcond[8]=(((r22*x8305))+((r21*x8296))+(((-1.0)*x8299))+((r20*x8297))+(((-1.0)*cj1*x8298))+(((-1.0)*r21*x8295*x8302))+((r20*x8306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8307=((-1.0)*r20);
IkReal x8308=x7605;
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8307),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8309=((-1.0)*(x8310.value));
sj5=gconst1;
cj5=gconst2;
j5=x8309;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8309;
IkReal gconst1=(r21*x8308);
IkReal gconst2=(x8307*x8308);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8311=((-1.0)*r20);
IkReal x8312=x7605;
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8311),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal x8313=((-1.0)*(x8314.value));
sj5=gconst1;
cj5=gconst2;
j5=x8313;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8313;
IkReal gconst1=(r21*x8312);
IkReal gconst2=(x8311*x8312);
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8322.valid){
continue;
}
IkReal x8315=x8322.value;
IkReal x8316=(cj3*x8315);
IkReal x8317=(r11*x8316);
IkReal x8318=(r01*x8316);
IkReal x8319=(r00*x8316);
IkReal x8320=(r10*x8316);
IkReal x8321=(r20*r21*x8316);
j4eval[0]=IKsign((((r01*x8317*(r21*r21)))+((r10*r20*r21*x8318))+((r00*r20*r21*x8317))+((cj3*r02*r12))+((r10*x8319*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8323=gconst2*gconst2;
IkReal x8324=gconst1*gconst1;
IkReal x8325=((1.0)*r02);
IkReal x8326=(cj3*r01);
IkReal x8327=(gconst1*gconst2);
IkReal x8328=(cj3*r10);
IkReal x8329=((1.0)*r00);
IkReal x8330=(r10*sj3);
IkReal x8331=(r11*sj3);
IkReal x8332=(cj3*r11);
CheckValue<IkReal> x8333 = IKatan2WithCheck(IkReal((((r10*x8324*x8326))+(((-1.0)*x8323*x8329*x8332))+(((-1.0)*x8327*x8328*x8329))+((r11*x8326*x8327)))),IkReal(((((-1.0)*gconst1*x8325*x8328))+(((-1.0)*gconst2*x8325*x8332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8333.valid){
continue;
}
CheckValue<IkReal> x8334=IKPowWithIntegerCheck(IKsign((((r00*x8327*x8331))+(((-1.0)*r12*sj3*x8325))+(((-1.0)*x8323*x8329*x8330))+((r01*x8327*x8330))+(((-1.0)*r01*x8324*x8331)))),-1);
if(!x8334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8333.value)+(((1.5707963267949)*(x8334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8335=IKcos(j4);
IkReal x8336=IKsin(j4);
IkReal x8337=(cj3*gconst1);
IkReal x8338=(gconst2*sj3);
IkReal x8339=(sj1*sj2);
IkReal x8340=(gconst1*sj3);
IkReal x8341=((1.0)*cj1);
IkReal x8342=(cj3*gconst2);
IkReal x8343=(sj2*x8341);
IkReal x8344=((1.0)*cj2*sj1);
IkReal x8345=((1.0)*x8336);
IkReal x8346=(gconst1*x8335);
IkReal x8347=((1.0)*x8335);
IkReal x8348=(cj3*x8335);
IkReal x8349=(x8336*x8342);
IkReal x8350=(x8343+x8344);
evalcond[0]=(((r22*x8336))+((r21*x8346))+(((-1.0)*gconst2*r20*x8347)));
evalcond[1]=(((r01*x8346))+(((-1.0)*gconst2*r00*x8347))+((r02*x8336)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8347))+((r12*x8336))+((r11*x8346)));
evalcond[3]=(((r11*x8338))+(((-1.0)*r11*x8337*x8345))+((r12*x8348))+((r10*x8340))+((r10*x8349)));
evalcond[4]=(((r10*x8337))+(((-1.0)*r10*x8338*x8345))+(((-1.0)*r12*sj3*x8347))+((r11*x8336*x8340))+((r11*x8342)));
evalcond[5]=(x8339+(((-1.0)*r01*x8337*x8345))+((r01*x8338))+((r02*x8348))+(((-1.0)*cj2*x8341))+((r00*x8340))+((r00*x8349)));
evalcond[6]=(((r21*x8336*x8340))+((r21*x8342))+((r20*x8337))+((cj1*cj2))+(((-1.0)*x8339))+(((-1.0)*r22*sj3*x8347))+(((-1.0)*r20*x8338*x8345)));
evalcond[7]=((((-1.0)*r21*x8337*x8345))+(((-1.0)*x8350))+((r21*x8338))+((r20*x8340))+((r20*x8349))+((r22*x8348)));
evalcond[8]=((((-1.0)*r02*sj3*x8347))+(((-1.0)*r00*x8338*x8345))+(((-1.0)*x8350))+((r01*x8342))+((r01*x8336*x8340))+((r00*x8337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8351=gconst1*gconst1;
IkReal x8352=gconst2*gconst2;
IkReal x8353=((1.0)*r10);
IkReal x8354=(r01*r11);
IkReal x8355=(r02*sj3);
IkReal x8356=((1.0)*r11);
IkReal x8357=(gconst1*gconst2*sj3);
IkReal x8358=(r00*x8352);
IkReal x8359=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r00*x8356*x8359))+((cj3*r10*x8358))+((cj3*x8351*x8354))+(((-1.0)*r01*x8353*x8359)))),-1);
if(!x8360.valid){
continue;
}
CheckValue<IkReal> x8361 = IKatan2WithCheck(IkReal((((x8354*x8357))+(((-1.0)*sj3*x8356*x8358))+(((-1.0)*r00*x8353*x8357))+((r01*r10*sj3*x8351)))),IkReal(((((-1.0)*gconst2*x8355*x8356))+(((-1.0)*gconst1*x8353*x8355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8360.value)))+(x8361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8362=IKcos(j4);
IkReal x8363=IKsin(j4);
IkReal x8364=(cj3*gconst1);
IkReal x8365=(gconst2*sj3);
IkReal x8366=(sj1*sj2);
IkReal x8367=(gconst1*sj3);
IkReal x8368=((1.0)*cj1);
IkReal x8369=(cj3*gconst2);
IkReal x8370=(sj2*x8368);
IkReal x8371=((1.0)*cj2*sj1);
IkReal x8372=((1.0)*x8363);
IkReal x8373=(gconst1*x8362);
IkReal x8374=((1.0)*x8362);
IkReal x8375=(cj3*x8362);
IkReal x8376=(x8363*x8369);
IkReal x8377=(x8370+x8371);
evalcond[0]=(((r22*x8363))+((r21*x8373))+(((-1.0)*gconst2*r20*x8374)));
evalcond[1]=((((-1.0)*gconst2*r00*x8374))+((r02*x8363))+((r01*x8373)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8374))+((r12*x8363))+((r11*x8373)));
evalcond[3]=(((r10*x8376))+(((-1.0)*r11*x8364*x8372))+((r12*x8375))+((r10*x8367))+((r11*x8365)));
evalcond[4]=((((-1.0)*r10*x8365*x8372))+((r11*x8363*x8367))+(((-1.0)*r12*sj3*x8374))+((r10*x8364))+((r11*x8369)));
evalcond[5]=(x8366+(((-1.0)*cj2*x8368))+((r00*x8376))+(((-1.0)*r01*x8364*x8372))+((r01*x8365))+((r00*x8367))+((r02*x8375)));
evalcond[6]=((((-1.0)*x8366))+((r20*x8364))+((r21*x8369))+((cj1*cj2))+(((-1.0)*r20*x8365*x8372))+(((-1.0)*r22*sj3*x8374))+((r21*x8363*x8367)));
evalcond[7]=(((r20*x8376))+(((-1.0)*x8377))+((r20*x8367))+(((-1.0)*r21*x8364*x8372))+((r21*x8365))+((r22*x8375)));
evalcond[8]=((((-1.0)*r02*sj3*x8374))+((r01*x8369))+((r00*x8364))+(((-1.0)*x8377))+(((-1.0)*r00*x8365*x8372))+((r01*x8363*x8367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8378=((1.0)*gconst2);
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8378)))),-1);
if(!x8379.valid){
continue;
}
CheckValue<IkReal> x8380 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8378))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8379.value)))+(x8380.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8381=IKcos(j4);
IkReal x8382=IKsin(j4);
IkReal x8383=(cj3*gconst1);
IkReal x8384=(gconst2*sj3);
IkReal x8385=(sj1*sj2);
IkReal x8386=(gconst1*sj3);
IkReal x8387=((1.0)*cj1);
IkReal x8388=(cj3*gconst2);
IkReal x8389=(sj2*x8387);
IkReal x8390=((1.0)*cj2*sj1);
IkReal x8391=((1.0)*x8382);
IkReal x8392=(gconst1*x8381);
IkReal x8393=((1.0)*x8381);
IkReal x8394=(cj3*x8381);
IkReal x8395=(x8382*x8388);
IkReal x8396=(x8390+x8389);
evalcond[0]=(((r21*x8392))+((r22*x8382))+(((-1.0)*gconst2*r20*x8393)));
evalcond[1]=(((r02*x8382))+((r01*x8392))+(((-1.0)*gconst2*r00*x8393)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8393))+((r12*x8382))+((r11*x8392)));
evalcond[3]=(((r10*x8395))+((r12*x8394))+((r10*x8386))+((r11*x8384))+(((-1.0)*r11*x8383*x8391)));
evalcond[4]=((((-1.0)*r12*sj3*x8393))+((r11*x8382*x8386))+(((-1.0)*r10*x8384*x8391))+((r10*x8383))+((r11*x8388)));
evalcond[5]=(x8385+(((-1.0)*r01*x8383*x8391))+(((-1.0)*cj2*x8387))+((r02*x8394))+((r01*x8384))+((r00*x8395))+((r00*x8386)));
evalcond[6]=((((-1.0)*x8385))+((r21*x8388))+(((-1.0)*r20*x8384*x8391))+((cj1*cj2))+((r21*x8382*x8386))+(((-1.0)*r22*sj3*x8393))+((r20*x8383)));
evalcond[7]=(((r20*x8395))+(((-1.0)*r21*x8383*x8391))+(((-1.0)*x8396))+((r21*x8384))+((r22*x8394))+((r20*x8386)));
evalcond[8]=((((-1.0)*r02*sj3*x8393))+((r01*x8382*x8386))+(((-1.0)*r00*x8384*x8391))+(((-1.0)*x8396))+((r01*x8388))+((r00*x8383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8397=((-1.0)*r20);
IkReal x8398=x7605;
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8397),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
IkReal x8399=((-1.0)*(x8400.value));
sj5=gconst1;
cj5=gconst2;
j5=x8399;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8399;
IkReal gconst1=(r21*x8398);
IkReal gconst2=(x8397*x8398);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8401=((-1.0)*r20);
IkReal x8402=x7605;
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8401),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
IkReal x8403=((-1.0)*(x8404.value));
sj5=gconst1;
cj5=gconst2;
j5=x8403;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8403;
IkReal gconst1=(r21*x8402);
IkReal gconst2=(x8401*x8402);
CheckValue<IkReal> x8412=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8412.valid){
continue;
}
IkReal x8405=x8412.value;
IkReal x8406=(cj3*x8405);
IkReal x8407=(r11*x8406);
IkReal x8408=(r01*x8406);
IkReal x8409=(r00*x8406);
IkReal x8410=(r10*x8406);
IkReal x8411=(r20*r21*x8406);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x8408))+((r00*r20*r21*x8407))+((r10*x8409*(r20*r20)))+((r01*x8407*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8413=gconst1*gconst1;
IkReal x8414=gconst2*gconst2;
IkReal x8415=(cj3*r11);
IkReal x8416=((1.0)*r12);
IkReal x8417=(gconst1*gconst2);
IkReal x8418=(r10*sj3);
IkReal x8419=(r11*sj3);
IkReal x8420=((1.0)*cj3*r10);
CheckValue<IkReal> x8421 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8417*x8420))+((r01*x8415*x8417))+(((-1.0)*r01*x8414*x8420))+((r00*x8413*x8415)))),IkReal(((((-1.0)*cj3*gconst2*r01*x8416))+(((-1.0)*cj3*gconst1*r00*x8416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8421.valid){
continue;
}
CheckValue<IkReal> x8422=IKPowWithIntegerCheck(IKsign((((r00*x8417*x8419))+(((-1.0)*r01*x8413*x8419))+((r01*x8417*x8418))+(((-1.0)*r00*x8414*x8418))+(((-1.0)*r02*sj3*x8416)))),-1);
if(!x8422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8421.value)+(((1.5707963267949)*(x8422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8423=IKcos(j4);
IkReal x8424=IKsin(j4);
IkReal x8425=(cj1*cj2);
IkReal x8426=(cj3*gconst1);
IkReal x8427=(gconst2*sj3);
IkReal x8428=(gconst1*sj3);
IkReal x8429=((1.0)*sj2);
IkReal x8430=(cj2*sj1);
IkReal x8431=(cj3*gconst2);
IkReal x8432=(sj1*x8429);
IkReal x8433=((1.0)*x8424);
IkReal x8434=(gconst1*x8423);
IkReal x8435=((1.0)*x8423);
IkReal x8436=(cj3*x8423);
IkReal x8437=(x8424*x8431);
evalcond[0]=(((r21*x8434))+((r22*x8424))+(((-1.0)*gconst2*r20*x8435)));
evalcond[1]=(((r12*x8424))+(((-1.0)*gconst2*r10*x8435))+((r11*x8434)));
evalcond[2]=((-1.0)+((r02*x8424))+((r01*x8434))+(((-1.0)*gconst2*r00*x8435)));
evalcond[3]=((((-1.0)*r01*x8426*x8433))+((r02*x8436))+((r01*x8427))+((r00*x8428))+((r00*x8437)));
evalcond[4]=(((r01*x8431))+((r01*x8424*x8428))+(((-1.0)*r02*sj3*x8435))+((r00*x8426))+(((-1.0)*r00*x8427*x8433)));
evalcond[5]=((((-1.0)*r12*sj3*x8435))+x8430+((r11*x8424*x8428))+((r10*x8426))+((cj1*sj2))+((r11*x8431))+(((-1.0)*r10*x8427*x8433)));
evalcond[6]=(x8425+((r10*x8428))+(((-1.0)*x8432))+(((-1.0)*r11*x8426*x8433))+((r11*x8427))+((r12*x8436))+((r10*x8437)));
evalcond[7]=(((r21*x8431))+x8425+(((-1.0)*x8432))+((r20*x8426))+((r21*x8424*x8428))+(((-1.0)*r20*x8427*x8433))+(((-1.0)*r22*sj3*x8435)));
evalcond[8]=((((-1.0)*r21*x8426*x8433))+((r21*x8427))+((r20*x8428))+((r22*x8436))+(((-1.0)*x8430))+(((-1.0)*cj1*x8429))+((r20*x8437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8438=gconst1*gconst1;
IkReal x8439=gconst2*gconst2;
IkReal x8440=(r00*sj3);
IkReal x8441=(gconst1*gconst2);
IkReal x8442=((1.0)*r10);
IkReal x8443=(r01*sj3);
IkReal x8444=((1.0)*r12);
IkReal x8445=(cj3*r01);
IkReal x8446=(cj3*r00);
IkReal x8447=(r11*x8438);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal((((r11*x8441*x8443))+(((-1.0)*x8440*x8441*x8442))+(((-1.0)*x8439*x8442*x8443))+((x8440*x8447)))),IkReal(((((-1.0)*gconst1*x8440*x8444))+(((-1.0)*gconst2*x8443*x8444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x8441*x8442*x8445))+((x8445*x8447))+((r10*x8439*x8446))+(((-1.0)*r11*x8441*x8446)))),-1);
if(!x8449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8448.value)+(((1.5707963267949)*(x8449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8450=IKcos(j4);
IkReal x8451=IKsin(j4);
IkReal x8452=(cj1*cj2);
IkReal x8453=(cj3*gconst1);
IkReal x8454=(gconst2*sj3);
IkReal x8455=(gconst1*sj3);
IkReal x8456=((1.0)*sj2);
IkReal x8457=(cj2*sj1);
IkReal x8458=(cj3*gconst2);
IkReal x8459=(sj1*x8456);
IkReal x8460=((1.0)*x8451);
IkReal x8461=(gconst1*x8450);
IkReal x8462=((1.0)*x8450);
IkReal x8463=(cj3*x8450);
IkReal x8464=(x8451*x8458);
evalcond[0]=(((r22*x8451))+((r21*x8461))+(((-1.0)*gconst2*r20*x8462)));
evalcond[1]=(((r11*x8461))+(((-1.0)*gconst2*r10*x8462))+((r12*x8451)));
evalcond[2]=((-1.0)+((r01*x8461))+((r02*x8451))+(((-1.0)*gconst2*r00*x8462)));
evalcond[3]=((((-1.0)*r01*x8453*x8460))+((r00*x8464))+((r02*x8463))+((r01*x8454))+((r00*x8455)));
evalcond[4]=((((-1.0)*r02*sj3*x8462))+(((-1.0)*r00*x8454*x8460))+((r01*x8458))+((r01*x8451*x8455))+((r00*x8453)));
evalcond[5]=(x8457+((r11*x8458))+(((-1.0)*r10*x8454*x8460))+((cj1*sj2))+(((-1.0)*r12*sj3*x8462))+((r11*x8451*x8455))+((r10*x8453)));
evalcond[6]=(((r12*x8463))+x8452+((r11*x8454))+(((-1.0)*r11*x8453*x8460))+((r10*x8464))+(((-1.0)*x8459))+((r10*x8455)));
evalcond[7]=(((r21*x8451*x8455))+x8452+((r21*x8458))+(((-1.0)*r20*x8454*x8460))+((r20*x8453))+(((-1.0)*r22*sj3*x8462))+(((-1.0)*x8459)));
evalcond[8]=(((r21*x8454))+(((-1.0)*r21*x8453*x8460))+((r22*x8463))+(((-1.0)*cj1*x8456))+(((-1.0)*x8457))+((r20*x8455))+((r20*x8464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8465 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8465.valid){
continue;
}
CheckValue<IkReal> x8466=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8465.value)+(((1.5707963267949)*(x8466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8467=IKcos(j4);
IkReal x8468=IKsin(j4);
IkReal x8469=(cj1*cj2);
IkReal x8470=(cj3*gconst1);
IkReal x8471=(gconst2*sj3);
IkReal x8472=(gconst1*sj3);
IkReal x8473=((1.0)*sj2);
IkReal x8474=(cj2*sj1);
IkReal x8475=(cj3*gconst2);
IkReal x8476=(sj1*x8473);
IkReal x8477=((1.0)*x8468);
IkReal x8478=(gconst1*x8467);
IkReal x8479=((1.0)*x8467);
IkReal x8480=(cj3*x8467);
IkReal x8481=(x8468*x8475);
evalcond[0]=(((r22*x8468))+((r21*x8478))+(((-1.0)*gconst2*r20*x8479)));
evalcond[1]=(((r12*x8468))+((r11*x8478))+(((-1.0)*gconst2*r10*x8479)));
evalcond[2]=((-1.0)+((r01*x8478))+(((-1.0)*gconst2*r00*x8479))+((r02*x8468)));
evalcond[3]=(((r01*x8471))+((r00*x8472))+(((-1.0)*r01*x8470*x8477))+((r02*x8480))+((r00*x8481)));
evalcond[4]=(((r01*x8475))+((r00*x8470))+(((-1.0)*r02*sj3*x8479))+(((-1.0)*r00*x8471*x8477))+((r01*x8468*x8472)));
evalcond[5]=(x8474+((r11*x8468*x8472))+((r11*x8475))+((cj1*sj2))+(((-1.0)*r10*x8471*x8477))+(((-1.0)*r12*sj3*x8479))+((r10*x8470)));
evalcond[6]=(((r10*x8481))+x8469+(((-1.0)*x8476))+((r11*x8471))+(((-1.0)*r11*x8470*x8477))+((r12*x8480))+((r10*x8472)));
evalcond[7]=(x8469+(((-1.0)*x8476))+((r21*x8475))+(((-1.0)*r20*x8471*x8477))+(((-1.0)*r22*sj3*x8479))+((r20*x8470))+((r21*x8468*x8472)));
evalcond[8]=((((-1.0)*x8474))+(((-1.0)*cj1*x8473))+(((-1.0)*r21*x8470*x8477))+((r22*x8480))+((r21*x8471))+((r20*x8481))+((r20*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8482=((-1.0)*r20);
IkReal x8483=x7605;
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8482),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
IkReal x8484=((-1.0)*(x8485.value));
sj5=gconst1;
cj5=gconst2;
j5=x8484;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8484;
IkReal gconst1=(r21*x8483);
IkReal gconst2=(x8482*x8483);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8486=((-1.0)*r20);
IkReal x8487=x7605;
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8486),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
IkReal x8488=((-1.0)*(x8489.value));
sj5=gconst1;
cj5=gconst2;
j5=x8488;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8488;
IkReal gconst1=(r21*x8487);
IkReal gconst2=(x8486*x8487);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8497.valid){
continue;
}
IkReal x8490=x8497.value;
IkReal x8491=(cj3*x8490);
IkReal x8492=(r11*x8491);
IkReal x8493=(r01*x8491);
IkReal x8494=(r00*x8491);
IkReal x8495=(r10*x8491);
IkReal x8496=(r20*r21*x8491);
j4eval[0]=IKsign((((r01*x8492*(r21*r21)))+((r10*r20*r21*x8493))+((cj3*r02*r12))+((r00*r20*r21*x8492))+((r10*x8494*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8498=gconst1*gconst1;
IkReal x8499=gconst2*gconst2;
IkReal x8500=(cj3*r11);
IkReal x8501=((1.0)*r12);
IkReal x8502=(gconst1*gconst2);
IkReal x8503=(r10*sj3);
IkReal x8504=(r11*sj3);
IkReal x8505=((1.0)*cj3*r10);
CheckValue<IkReal> x8506=IKPowWithIntegerCheck(IKsign((((r01*x8502*x8503))+(((-1.0)*r02*sj3*x8501))+(((-1.0)*r00*x8499*x8503))+((r00*x8502*x8504))+(((-1.0)*r01*x8498*x8504)))),-1);
if(!x8506.valid){
continue;
}
CheckValue<IkReal> x8507 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x8502*x8505))+(((-1.0)*r01*x8499*x8505))+((r01*x8500*x8502))+((r00*x8498*x8500)))),IkReal(((((-1.0)*cj3*gconst2*r01*x8501))+(((-1.0)*cj3*gconst1*r00*x8501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8506.value)))+(x8507.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8508=IKcos(j4);
IkReal x8509=IKsin(j4);
IkReal x8510=(cj3*gconst1);
IkReal x8511=(r20*sj3);
IkReal x8512=(gconst1*sj3);
IkReal x8513=(sj1*sj2);
IkReal x8514=((1.0)*cj1);
IkReal x8515=(gconst2*r11);
IkReal x8516=(gconst2*r10);
IkReal x8517=(gconst2*r00);
IkReal x8518=(gconst2*sj3);
IkReal x8519=(cj3*gconst2);
IkReal x8520=(sj2*x8514);
IkReal x8521=((1.0)*cj2*sj1);
IkReal x8522=((1.0)*x8509);
IkReal x8523=(gconst1*x8508);
IkReal x8524=(r22*x8508);
IkReal x8525=((1.0)*x8508);
IkReal x8526=(cj3*x8508);
IkReal x8527=(x8509*x8519);
IkReal x8528=(x8521+x8520);
evalcond[0]=(((r21*x8523))+((r22*x8509))+(((-1.0)*gconst2*r20*x8525)));
evalcond[1]=(((r12*x8509))+((r11*x8523))+(((-1.0)*x8516*x8525)));
evalcond[2]=((1.0)+((r02*x8509))+(((-1.0)*x8517*x8525))+((r01*x8523)));
evalcond[3]=(((r02*x8526))+((cj3*x8509*x8517))+((r00*x8512))+(((-1.0)*r01*x8510*x8522))+((r01*x8518)));
evalcond[4]=((((-1.0)*sj3*x8517*x8522))+(((-1.0)*r02*sj3*x8525))+((r00*x8510))+((r01*x8509*x8512))+((r01*x8519)));
evalcond[5]=(((sj3*x8515))+x8513+((r12*x8526))+((cj3*x8509*x8516))+(((-1.0)*r11*x8510*x8522))+(((-1.0)*cj2*x8514))+((r10*x8512)));
evalcond[6]=(((r21*x8509*x8512))+((r21*x8519))+(((-1.0)*sj3*x8524))+(((-1.0)*x8513))+(((-1.0)*gconst2*x8511*x8522))+((cj1*cj2))+((r20*x8510)));
evalcond[7]=(((r20*x8527))+(((-1.0)*r21*x8510*x8522))+((cj3*x8524))+((r21*x8518))+(((-1.0)*x8528))+((gconst1*x8511)));
evalcond[8]=(((cj3*x8515))+(((-1.0)*r12*sj3*x8525))+((r11*x8509*x8512))+(((-1.0)*x8528))+(((-1.0)*sj3*x8516*x8522))+((r10*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8529=gconst1*gconst1;
IkReal x8530=gconst2*gconst2;
IkReal x8531=(r00*sj3);
IkReal x8532=(gconst1*gconst2);
IkReal x8533=((1.0)*r10);
IkReal x8534=(r01*sj3);
IkReal x8535=((1.0)*r12);
IkReal x8536=(cj3*r01);
IkReal x8537=(cj3*r00);
IkReal x8538=(r11*x8529);
CheckValue<IkReal> x8539=IKPowWithIntegerCheck(IKsign((((r10*x8530*x8537))+((cj3*r02*r12))+((x8536*x8538))+(((-1.0)*x8532*x8533*x8536))+(((-1.0)*r11*x8532*x8537)))),-1);
if(!x8539.valid){
continue;
}
CheckValue<IkReal> x8540 = IKatan2WithCheck(IkReal((((r11*x8532*x8534))+(((-1.0)*x8531*x8532*x8533))+((x8531*x8538))+(((-1.0)*x8530*x8533*x8534)))),IkReal(((((-1.0)*gconst1*x8531*x8535))+(((-1.0)*gconst2*x8534*x8535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8539.value)))+(x8540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8541=IKcos(j4);
IkReal x8542=IKsin(j4);
IkReal x8543=(cj3*gconst1);
IkReal x8544=(r20*sj3);
IkReal x8545=(gconst1*sj3);
IkReal x8546=(sj1*sj2);
IkReal x8547=((1.0)*cj1);
IkReal x8548=(gconst2*r11);
IkReal x8549=(gconst2*r10);
IkReal x8550=(gconst2*r00);
IkReal x8551=(gconst2*sj3);
IkReal x8552=(cj3*gconst2);
IkReal x8553=(sj2*x8547);
IkReal x8554=((1.0)*cj2*sj1);
IkReal x8555=((1.0)*x8542);
IkReal x8556=(gconst1*x8541);
IkReal x8557=(r22*x8541);
IkReal x8558=((1.0)*x8541);
IkReal x8559=(cj3*x8541);
IkReal x8560=(x8542*x8552);
IkReal x8561=(x8553+x8554);
evalcond[0]=(((r21*x8556))+(((-1.0)*gconst2*r20*x8558))+((r22*x8542)));
evalcond[1]=(((r11*x8556))+(((-1.0)*x8549*x8558))+((r12*x8542)));
evalcond[2]=((1.0)+((r01*x8556))+((r02*x8542))+(((-1.0)*x8550*x8558)));
evalcond[3]=(((r01*x8551))+((r00*x8545))+((r02*x8559))+((cj3*x8542*x8550))+(((-1.0)*r01*x8543*x8555)));
evalcond[4]=(((r01*x8552))+((r00*x8543))+(((-1.0)*sj3*x8550*x8555))+(((-1.0)*r02*sj3*x8558))+((r01*x8542*x8545)));
evalcond[5]=(((r12*x8559))+x8546+((r10*x8545))+(((-1.0)*r11*x8543*x8555))+((cj3*x8542*x8549))+(((-1.0)*cj2*x8547))+((sj3*x8548)));
evalcond[6]=(((r21*x8552))+(((-1.0)*sj3*x8557))+((r21*x8542*x8545))+((r20*x8543))+((cj1*cj2))+(((-1.0)*gconst2*x8544*x8555))+(((-1.0)*x8546)));
evalcond[7]=(((r21*x8551))+((r20*x8560))+((gconst1*x8544))+(((-1.0)*r21*x8543*x8555))+((cj3*x8557))+(((-1.0)*x8561)));
evalcond[8]=(((r11*x8542*x8545))+((r10*x8543))+(((-1.0)*sj3*x8549*x8555))+(((-1.0)*r12*sj3*x8558))+((cj3*x8548))+(((-1.0)*x8561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8562=((1.0)*gconst2);
CheckValue<IkReal> x8563=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8562))+(((-1.0)*gconst1*r10)))),-1);
if(!x8563.valid){
continue;
}
CheckValue<IkReal> x8564 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8562))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8563.value)))+(x8564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8565=IKcos(j4);
IkReal x8566=IKsin(j4);
IkReal x8567=(cj3*gconst1);
IkReal x8568=(r20*sj3);
IkReal x8569=(gconst1*sj3);
IkReal x8570=(sj1*sj2);
IkReal x8571=((1.0)*cj1);
IkReal x8572=(gconst2*r11);
IkReal x8573=(gconst2*r10);
IkReal x8574=(gconst2*r00);
IkReal x8575=(gconst2*sj3);
IkReal x8576=(cj3*gconst2);
IkReal x8577=(sj2*x8571);
IkReal x8578=((1.0)*cj2*sj1);
IkReal x8579=((1.0)*x8566);
IkReal x8580=(gconst1*x8565);
IkReal x8581=(r22*x8565);
IkReal x8582=((1.0)*x8565);
IkReal x8583=(cj3*x8565);
IkReal x8584=(x8566*x8576);
IkReal x8585=(x8577+x8578);
evalcond[0]=(((r21*x8580))+((r22*x8566))+(((-1.0)*gconst2*r20*x8582)));
evalcond[1]=((((-1.0)*x8573*x8582))+((r11*x8580))+((r12*x8566)));
evalcond[2]=((1.0)+((r02*x8566))+((r01*x8580))+(((-1.0)*x8574*x8582)));
evalcond[3]=(((r00*x8569))+((r02*x8583))+((r01*x8575))+(((-1.0)*r01*x8567*x8579))+((cj3*x8566*x8574)));
evalcond[4]=(((r00*x8567))+((r01*x8566*x8569))+(((-1.0)*sj3*x8574*x8579))+((r01*x8576))+(((-1.0)*r02*sj3*x8582)));
evalcond[5]=(((sj3*x8572))+x8570+((r10*x8569))+(((-1.0)*cj2*x8571))+((r12*x8583))+(((-1.0)*r11*x8567*x8579))+((cj3*x8566*x8573)));
evalcond[6]=(((r21*x8566*x8569))+((r20*x8567))+(((-1.0)*x8570))+((r21*x8576))+((cj1*cj2))+(((-1.0)*sj3*x8581))+(((-1.0)*gconst2*x8568*x8579)));
evalcond[7]=(((r21*x8575))+((cj3*x8581))+(((-1.0)*x8585))+((gconst1*x8568))+(((-1.0)*r21*x8567*x8579))+((r20*x8584)));
evalcond[8]=(((r10*x8567))+((r11*x8566*x8569))+(((-1.0)*x8585))+((cj3*x8572))+(((-1.0)*r12*sj3*x8582))+(((-1.0)*sj3*x8573*x8579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8586=((-1.0)*r20);
IkReal x8587=((-1.0)*px);
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8586),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
IkReal x8588=((-1.0)*(x8589.value));
sj5=gconst1;
cj5=gconst2;
j5=x8588;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8587);
rxp1_1=(px*r21);
rxp1_2=(r11*x8587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8588;
IkReal gconst1=r21;
IkReal gconst2=x8586;
j4eval[0]=r02;
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8590=((-1.0)*r20);
IkReal x8591=((-1.0)*px);
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8590),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
IkReal x8592=((-1.0)*(x8593.value));
sj5=gconst1;
cj5=gconst2;
j5=x8592;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8591);
rxp1_1=(px*r21);
rxp1_2=(r11*x8591);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8592;
IkReal gconst1=r21;
IkReal gconst2=x8590;
j4eval[0]=(((sj3*(r21*r21)))+sj3+(((-1.0)*sj3*(r10*r10))));
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8594=((-1.0)*r20);
IkReal x8595=((-1.0)*px);
CheckValue<IkReal> x8597 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8594),IKFAST_ATAN2_MAGTHRESH);
if(!x8597.valid){
continue;
}
IkReal x8596=((-1.0)*(x8597.value));
sj5=gconst1;
cj5=gconst2;
j5=x8596;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8595);
rxp1_1=(px*r21);
rxp1_2=(r11*x8595);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8596;
IkReal gconst1=r21;
IkReal gconst2=x8594;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8598=((-1.0)*r20);
IkReal x8599=((-1.0)*px);
CheckValue<IkReal> x8601 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8598),IKFAST_ATAN2_MAGTHRESH);
if(!x8601.valid){
continue;
}
IkReal x8600=((-1.0)*(x8601.value));
sj5=gconst1;
cj5=gconst2;
j5=x8600;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8599);
rxp1_1=(px*r21);
rxp1_2=(r11*x8599);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8600;
IkReal gconst1=r21;
IkReal gconst2=x8598;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8602=((-1.0)*r20);
IkReal x8603=((-1.0)*px);
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8602),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
IkReal x8604=((-1.0)*(x8605.value));
sj5=gconst1;
cj5=gconst2;
j5=x8604;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8603);
rxp1_1=(px*r21);
rxp1_2=(r11*x8603);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8604;
IkReal gconst1=r21;
IkReal gconst2=x8602;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8606=((-1.0)*r20);
IkReal x8607=((-1.0)*px);
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8606),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
IkReal x8608=((-1.0)*(x8609.value));
sj5=gconst1;
cj5=gconst2;
j5=x8608;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8607);
rxp1_1=(px*r21);
rxp1_2=(r11*x8607);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8608;
IkReal gconst1=r21;
IkReal gconst2=x8606;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8612.valid){
continue;
}
IkReal x8610=x8612.value;
IkReal x8611=(sj0*x8610);
sj4array[0]=((((-1.0)*cj1*cj2*x8611))+((sj1*sj2*x8611)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8613=IKcos(j4);
IkReal x8614=IKsin(j4);
IkReal x8615=(gconst1*x8613);
IkReal x8616=((1.0)*gconst2*x8613);
evalcond[0]=(r02*x8613);
evalcond[1]=((((-1.0)*sj0))+((r02*x8614)));
evalcond[2]=((((-1.0)*r20*x8616))+((r21*x8615)));
evalcond[3]=(((r11*x8615))+(((-1.0)*r10*x8616)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((gconst2*r20*x8614))+(((-1.0)*gconst1*r21*x8614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8618=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8618.valid){
continue;
}
IkReal x8617=x8618.value;
sj4array[0]=(((cj1*sj2*x8617))+((cj2*sj1*x8617)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8619=IKcos(j4);
IkReal x8620=IKsin(j4);
IkReal x8621=((1.0)*sj0);
IkReal x8622=(gconst2*r10);
IkReal x8623=(gconst1*x8619);
IkReal x8624=((1.0)*x8619);
evalcond[0]=(r02*x8619);
evalcond[1]=((((-1.0)*x8621))+((r02*x8620)));
evalcond[2]=(((r21*x8623))+(((-1.0)*gconst2*r20*x8624)));
evalcond[3]=((((-1.0)*x8622*x8624))+((r11*x8623)));
evalcond[4]=(((cj1*cj2*sj0))+((x8620*x8622))+(((-1.0)*gconst1*r11*x8620))+(((-1.0)*sj1*sj2*x8621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8625=IKPowWithIntegerCheck(r02,-1);
if(!x8625.valid){
continue;
}
sj4array[0]=(sj0*(x8625.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8626=IKcos(j4);
IkReal x8627=IKsin(j4);
IkReal x8628=(gconst2*r10);
IkReal x8629=((1.0)*sj1);
IkReal x8630=(gconst2*r20);
IkReal x8631=((1.0)*x8626);
IkReal x8632=(gconst1*x8626);
IkReal x8633=((1.0)*gconst1*x8627);
evalcond[0]=(r02*x8626);
evalcond[1]=(((r21*x8632))+(((-1.0)*x8630*x8631)));
evalcond[2]=((((-1.0)*x8628*x8631))+((r11*x8632)));
evalcond[3]=(((x8627*x8630))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8629))+(((-1.0)*r21*x8633)));
evalcond[4]=(((x8627*x8628))+((cj1*cj2*sj0))+(((-1.0)*r11*x8633))+(((-1.0)*sj0*sj2*x8629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8634=((-1.0)*r20);
IkReal x8635=((-1.0)*px);
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8634),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8636=((-1.0)*(x8637.value));
sj5=gconst1;
cj5=gconst2;
j5=x8636;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8635);
rxp1_1=(px*r21);
rxp1_2=(r11*x8635);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8636;
IkReal gconst1=r21;
IkReal gconst2=x8634;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8638=((-1.0)*r20);
IkReal x8639=((-1.0)*px);
CheckValue<IkReal> x8641 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8638),IKFAST_ATAN2_MAGTHRESH);
if(!x8641.valid){
continue;
}
IkReal x8640=((-1.0)*(x8641.value));
sj5=gconst1;
cj5=gconst2;
j5=x8640;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8639);
rxp1_1=(px*r21);
rxp1_2=(r11*x8639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8640;
IkReal gconst1=r21;
IkReal gconst2=x8638;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8642=((-1.0)*r20);
IkReal x8643=((-1.0)*px);
CheckValue<IkReal> x8645 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8642),IKFAST_ATAN2_MAGTHRESH);
if(!x8645.valid){
continue;
}
IkReal x8644=((-1.0)*(x8645.value));
sj5=gconst1;
cj5=gconst2;
j5=x8644;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8643);
rxp1_1=(px*r21);
rxp1_2=(r11*x8643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8644;
IkReal gconst1=r21;
IkReal gconst2=x8642;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8648=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8648.valid){
continue;
}
IkReal x8646=x8648.value;
IkReal x8647=(sj0*x8646);
sj4array[0]=(((sj1*sj2*x8647))+(((-1.0)*cj1*cj2*x8647)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8649=IKcos(j4);
IkReal x8650=IKsin(j4);
IkReal x8651=(gconst1*r21);
IkReal x8652=((1.0)*gconst2*x8649);
evalcond[0]=((-1.0)*r02*x8649);
evalcond[1]=((((-1.0)*sj0))+((r02*x8650)));
evalcond[2]=((((-1.0)*r20*x8652))+((x8649*x8651)));
evalcond[3]=((((-1.0)*r10*x8652))+((gconst1*r11*x8649)));
evalcond[4]=((((-1.0)*gconst2*r20*x8650))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x8650*x8651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8654=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8654.valid){
continue;
}
IkReal x8653=x8654.value;
sj4array[0]=(((cj2*sj1*x8653))+((cj1*sj2*x8653)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8655=IKcos(j4);
IkReal x8656=IKsin(j4);
IkReal x8657=((1.0)*sj0);
IkReal x8658=((1.0)*gconst2*r10);
IkReal x8659=(gconst1*x8655);
evalcond[0]=((-1.0)*r02*x8655);
evalcond[1]=((((-1.0)*x8657))+((r02*x8656)));
evalcond[2]=(((r21*x8659))+(((-1.0)*gconst2*r20*x8655)));
evalcond[3]=((((-1.0)*x8655*x8658))+((r11*x8659)));
evalcond[4]=((((-1.0)*sj1*sj2*x8657))+((cj1*cj2*sj0))+(((-1.0)*x8656*x8658))+((gconst1*r11*x8656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8660=IKPowWithIntegerCheck(r02,-1);
if(!x8660.valid){
continue;
}
sj4array[0]=(sj0*(x8660.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8661=IKcos(j4);
IkReal x8662=IKsin(j4);
IkReal x8663=(gconst1*r21);
IkReal x8664=((1.0)*sj1);
IkReal x8665=(gconst1*r11);
IkReal x8666=((1.0)*gconst2*r10);
IkReal x8667=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x8661);
evalcond[1]=((((-1.0)*x8661*x8667))+((x8661*x8663)));
evalcond[2]=((((-1.0)*x8661*x8666))+((x8661*x8665)));
evalcond[3]=((((-1.0)*x8662*x8667))+(((-1.0)*cj1*sj2))+((x8662*x8663))+(((-1.0)*cj2*x8664)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x8662*x8666))+(((-1.0)*sj0*sj2*x8664))+((x8662*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8669=IKPowWithIntegerCheck(r02,-1);
if(!x8669.valid){
continue;
}
IkReal x8668=x8669.value;
CheckValue<IkReal> x8670=IKPowWithIntegerCheck(sj3,-1);
if(!x8670.valid){
continue;
}
if( IKabs((sj0*x8668)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8668*(x8670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x8668))+IKsqr((x8668*(x8670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x8668), (x8668*(x8670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8671=IKcos(j4);
IkReal x8672=IKsin(j4);
IkReal x8673=(cj3*gconst1);
IkReal x8674=(r20*sj3);
IkReal x8675=(gconst1*r21);
IkReal x8676=(cj2*sj0);
IkReal x8677=(r11*sj3);
IkReal x8678=((1.0)*sj0);
IkReal x8679=((1.0)*sj2);
IkReal x8680=(r10*sj3);
IkReal x8681=(cj0*cj2);
IkReal x8682=(cj3*gconst2);
IkReal x8683=(cj1*sj2);
IkReal x8684=((1.0)*x8672);
IkReal x8685=(r02*x8671);
IkReal x8686=((1.0)*gconst2*x8671);
evalcond[0]=((((-1.0)*x8678))+((r02*x8672)));
evalcond[1]=((((-1.0)*r20*x8686))+((x8671*x8675)));
evalcond[2]=(cj0+((gconst1*r11*x8671))+(((-1.0)*r10*x8686)));
evalcond[3]=((((-1.0)*sj3*x8685))+((sj1*x8681))+((cj0*x8683)));
evalcond[4]=(((cj1*x8681))+(((-1.0)*cj0*sj1*x8679))+((cj3*x8685)));
evalcond[5]=(((r20*x8673))+(((-1.0)*sj1*x8679))+((sj3*x8672*x8675))+(((-1.0)*gconst2*x8674*x8684))+((cj1*cj2))+((r21*x8682)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+((gconst1*x8674))+((r20*x8672*x8682))+(((-1.0)*r21*x8673*x8684))+(((-1.0)*cj1*x8679)));
evalcond[7]=(((sj1*x8676))+(((-1.0)*gconst2*x8680*x8684))+((r11*x8682))+((gconst1*x8672*x8677))+((r10*x8673))+((sj0*x8683)));
evalcond[8]=((((-1.0)*r11*x8673*x8684))+((gconst2*x8677))+((cj1*x8676))+((gconst1*x8680))+(((-1.0)*sj1*sj2*x8678))+((r10*x8672*x8682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8687=((1.0)*gconst2);
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x8687))+((gconst1*r21*sj3))),-1);
if(!x8688.valid){
continue;
}
CheckValue<IkReal> x8689=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x8687))),-1);
if(!x8689.valid){
continue;
}
if( IKabs(((x8688.value)*(((((-1.0)*cj3*r21*x8687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8689.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8688.value)*(((((-1.0)*cj3*r21*x8687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20))))))+IKsqr(((-1.0)*cj0*(x8689.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8688.value)*(((((-1.0)*cj3*r21*x8687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20))))), ((-1.0)*cj0*(x8689.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8690=IKcos(j4);
IkReal x8691=IKsin(j4);
IkReal x8692=(cj3*gconst1);
IkReal x8693=(r20*sj3);
IkReal x8694=(gconst1*r21);
IkReal x8695=(cj2*sj0);
IkReal x8696=(r11*sj3);
IkReal x8697=((1.0)*sj0);
IkReal x8698=((1.0)*sj2);
IkReal x8699=(r10*sj3);
IkReal x8700=(cj0*cj2);
IkReal x8701=(cj3*gconst2);
IkReal x8702=(cj1*sj2);
IkReal x8703=((1.0)*x8691);
IkReal x8704=(r02*x8690);
IkReal x8705=((1.0)*gconst2*x8690);
evalcond[0]=((((-1.0)*x8697))+((r02*x8691)));
evalcond[1]=(((x8690*x8694))+(((-1.0)*r20*x8705)));
evalcond[2]=(((gconst1*r11*x8690))+cj0+(((-1.0)*r10*x8705)));
evalcond[3]=(((cj0*x8702))+(((-1.0)*sj3*x8704))+((sj1*x8700)));
evalcond[4]=(((cj1*x8700))+(((-1.0)*cj0*sj1*x8698))+((cj3*x8704)));
evalcond[5]=(((r21*x8701))+((sj3*x8691*x8694))+((r20*x8692))+((cj1*cj2))+(((-1.0)*gconst2*x8693*x8703))+(((-1.0)*sj1*x8698)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*r21*x8692*x8703))+(((-1.0)*cj2*sj1))+((r20*x8691*x8701))+(((-1.0)*cj1*x8698))+((gconst1*x8693)));
evalcond[7]=(((r11*x8701))+((sj1*x8695))+(((-1.0)*gconst2*x8699*x8703))+((r10*x8692))+((gconst1*x8691*x8696))+((sj0*x8702)));
evalcond[8]=(((r10*x8691*x8701))+(((-1.0)*r11*x8692*x8703))+((gconst2*x8696))+(((-1.0)*sj1*sj2*x8697))+((cj1*x8695))+((gconst1*x8699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(r02,-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8707.valid){
continue;
}
if( IKabs((sj0*(x8706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8707.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x8706.value)))+IKsqr(((-1.0)*cj0*(x8707.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x8706.value)), ((-1.0)*cj0*(x8707.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8708=IKcos(j4);
IkReal x8709=IKsin(j4);
IkReal x8710=(cj3*gconst1);
IkReal x8711=(r20*sj3);
IkReal x8712=(gconst1*r21);
IkReal x8713=(cj2*sj0);
IkReal x8714=(r11*sj3);
IkReal x8715=((1.0)*sj0);
IkReal x8716=((1.0)*sj2);
IkReal x8717=(r10*sj3);
IkReal x8718=(cj0*cj2);
IkReal x8719=(cj3*gconst2);
IkReal x8720=(cj1*sj2);
IkReal x8721=((1.0)*x8709);
IkReal x8722=(r02*x8708);
IkReal x8723=((1.0)*gconst2*x8708);
evalcond[0]=((((-1.0)*x8715))+((r02*x8709)));
evalcond[1]=(((x8708*x8712))+(((-1.0)*r20*x8723)));
evalcond[2]=(cj0+((gconst1*r11*x8708))+(((-1.0)*r10*x8723)));
evalcond[3]=(((cj0*x8720))+((sj1*x8718))+(((-1.0)*sj3*x8722)));
evalcond[4]=(((cj1*x8718))+((cj3*x8722))+(((-1.0)*cj0*sj1*x8716)));
evalcond[5]=((((-1.0)*gconst2*x8711*x8721))+((r20*x8710))+((sj3*x8709*x8712))+((cj1*cj2))+(((-1.0)*sj1*x8716))+((r21*x8719)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*cj1*x8716))+(((-1.0)*cj2*sj1))+((r20*x8709*x8719))+((gconst1*x8711))+(((-1.0)*r21*x8710*x8721)));
evalcond[7]=((((-1.0)*gconst2*x8717*x8721))+((gconst1*x8709*x8714))+((sj1*x8713))+((r11*x8719))+((r10*x8710))+((sj0*x8720)));
evalcond[8]=(((r10*x8709*x8719))+((cj1*x8713))+(((-1.0)*r11*x8710*x8721))+((gconst1*x8717))+(((-1.0)*sj1*sj2*x8715))+((gconst2*x8714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8724=gconst1*gconst1;
IkReal x8725=r21*r21;
IkReal x8726=gconst2*gconst2;
IkReal x8727=r20*r20;
IkReal x8728=(gconst1*gconst2);
IkReal x8729=(cj2*sj1);
IkReal x8730=((1.0)*r21);
IkReal x8731=(gconst2*r20);
IkReal x8732=(r20*r21);
IkReal x8733=(r20*sj3);
IkReal x8734=(cj1*sj2);
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(IKsign((((cj3*(r22*r22)))+(((-2.0)*cj3*x8728*x8732))+((cj3*x8724*x8725))+((cj3*x8726*x8727)))),-1);
if(!x8735.valid){
continue;
}
CheckValue<IkReal> x8736 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x8729*x8730))+((x8729*x8731))+((sj3*x8724*x8732))+(((-1.0)*x8726*x8730*x8733))+((x8731*x8734))+(((-1.0)*sj3*x8727*x8728))+((sj3*x8725*x8728))+(((-1.0)*gconst1*x8730*x8734)))),IkReal(((((-1.0)*gconst1*r22*x8733))+((r22*x8734))+((r22*x8729))+(((-1.0)*gconst2*r22*sj3*x8730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8735.value)))+(x8736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8737=IKcos(j4);
IkReal x8738=IKsin(j4);
IkReal x8739=(cj3*gconst1);
IkReal x8740=(r20*sj3);
IkReal x8741=(cj2*sj0);
IkReal x8742=(gconst1*sj3);
IkReal x8743=((1.0)*sj0);
IkReal x8744=((1.0)*sj2);
IkReal x8745=(gconst2*r11);
IkReal x8746=(cj0*cj2);
IkReal x8747=(gconst2*r10);
IkReal x8748=(gconst2*r00);
IkReal x8749=(gconst2*r20);
IkReal x8750=(cj1*sj2);
IkReal x8751=(gconst2*r01);
IkReal x8752=(gconst2*r21);
IkReal x8753=((1.0)*x8738);
IkReal x8754=(gconst1*x8737);
IkReal x8755=(r22*x8737);
IkReal x8756=((1.0)*x8737);
IkReal x8757=(cj3*x8738);
IkReal x8758=(cj3*x8737);
evalcond[0]=(((r22*x8738))+((r21*x8754))+(((-1.0)*x8749*x8756)));
evalcond[1]=(cj0+((r11*x8754))+((r12*x8738))+(((-1.0)*x8747*x8756)));
evalcond[2]=(((r02*x8738))+(((-1.0)*x8748*x8756))+(((-1.0)*x8743))+((r01*x8754)));
evalcond[3]=((((-1.0)*sj3*x8755))+(((-1.0)*sj1*x8744))+((r21*x8738*x8742))+((cj1*cj2))+((r20*x8739))+((cj3*x8752))+(((-1.0)*gconst2*x8740*x8753)));
evalcond[4]=((((-1.0)*cj2*sj1))+((sj3*x8752))+(((-1.0)*r21*x8739*x8753))+((x8749*x8757))+(((-1.0)*cj1*x8744))+((gconst1*x8740))+((cj3*x8755)));
evalcond[5]=((((-1.0)*sj3*x8748*x8753))+((cj0*x8750))+((r01*x8738*x8742))+((sj1*x8746))+((r00*x8739))+(((-1.0)*r02*sj3*x8756))+((cj3*x8751)));
evalcond[6]=(((r02*x8758))+((r00*x8742))+((sj3*x8751))+((cj1*x8746))+(((-1.0)*cj0*sj1*x8744))+((x8748*x8757))+(((-1.0)*r01*x8739*x8753)));
evalcond[7]=(((r10*x8739))+((sj0*x8750))+((cj3*x8745))+((r11*x8738*x8742))+(((-1.0)*sj3*x8747*x8753))+(((-1.0)*r12*sj3*x8756))+((sj1*x8741)));
evalcond[8]=(((x8747*x8757))+((cj1*x8741))+((r10*x8742))+((r12*x8758))+(((-1.0)*r11*x8739*x8753))+(((-1.0)*sj1*sj2*x8743))+((sj3*x8745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
CheckValue<IkReal> x8760=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8759.value)+(((1.5707963267949)*(x8760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8761=IKcos(j4);
IkReal x8762=IKsin(j4);
IkReal x8763=(cj3*gconst1);
IkReal x8764=(r20*sj3);
IkReal x8765=(cj2*sj0);
IkReal x8766=(gconst1*sj3);
IkReal x8767=((1.0)*sj0);
IkReal x8768=((1.0)*sj2);
IkReal x8769=(gconst2*r11);
IkReal x8770=(cj0*cj2);
IkReal x8771=(gconst2*r10);
IkReal x8772=(gconst2*r00);
IkReal x8773=(gconst2*r20);
IkReal x8774=(cj1*sj2);
IkReal x8775=(gconst2*r01);
IkReal x8776=(gconst2*r21);
IkReal x8777=((1.0)*x8762);
IkReal x8778=(gconst1*x8761);
IkReal x8779=(r22*x8761);
IkReal x8780=((1.0)*x8761);
IkReal x8781=(cj3*x8762);
IkReal x8782=(cj3*x8761);
evalcond[0]=((((-1.0)*x8773*x8780))+((r21*x8778))+((r22*x8762)));
evalcond[1]=((((-1.0)*x8771*x8780))+cj0+((r12*x8762))+((r11*x8778)));
evalcond[2]=((((-1.0)*x8767))+((r01*x8778))+(((-1.0)*x8772*x8780))+((r02*x8762)));
evalcond[3]=(((cj3*x8776))+((r20*x8763))+(((-1.0)*sj3*x8779))+((cj1*cj2))+(((-1.0)*sj1*x8768))+(((-1.0)*gconst2*x8764*x8777))+((r21*x8762*x8766)));
evalcond[4]=((((-1.0)*r21*x8763*x8777))+(((-1.0)*cj1*x8768))+((sj3*x8776))+((cj3*x8779))+(((-1.0)*cj2*sj1))+((x8773*x8781))+((gconst1*x8764)));
evalcond[5]=((((-1.0)*sj3*x8772*x8777))+((cj3*x8775))+((sj1*x8770))+((r00*x8763))+(((-1.0)*r02*sj3*x8780))+((r01*x8762*x8766))+((cj0*x8774)));
evalcond[6]=(((sj3*x8775))+(((-1.0)*r01*x8763*x8777))+((cj1*x8770))+((r00*x8766))+((r02*x8782))+((x8772*x8781))+(((-1.0)*cj0*sj1*x8768)));
evalcond[7]=((((-1.0)*sj3*x8771*x8777))+((cj3*x8769))+((sj0*x8774))+((sj1*x8765))+((r11*x8762*x8766))+(((-1.0)*r12*sj3*x8780))+((r10*x8763)));
evalcond[8]=((((-1.0)*r11*x8763*x8777))+((x8771*x8781))+((sj3*x8769))+((cj1*x8765))+((r12*x8782))+((r10*x8766))+(((-1.0)*sj1*sj2*x8767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8783=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8783.valid){
continue;
}
CheckValue<IkReal> x8784 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8783.value)))+(x8784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8785=IKcos(j4);
IkReal x8786=IKsin(j4);
IkReal x8787=(cj3*gconst1);
IkReal x8788=(r20*sj3);
IkReal x8789=(cj2*sj0);
IkReal x8790=(gconst1*sj3);
IkReal x8791=((1.0)*sj0);
IkReal x8792=((1.0)*sj2);
IkReal x8793=(gconst2*r11);
IkReal x8794=(cj0*cj2);
IkReal x8795=(gconst2*r10);
IkReal x8796=(gconst2*r00);
IkReal x8797=(gconst2*r20);
IkReal x8798=(cj1*sj2);
IkReal x8799=(gconst2*r01);
IkReal x8800=(gconst2*r21);
IkReal x8801=((1.0)*x8786);
IkReal x8802=(gconst1*x8785);
IkReal x8803=(r22*x8785);
IkReal x8804=((1.0)*x8785);
IkReal x8805=(cj3*x8786);
IkReal x8806=(cj3*x8785);
evalcond[0]=(((r21*x8802))+(((-1.0)*x8797*x8804))+((r22*x8786)));
evalcond[1]=(cj0+(((-1.0)*x8795*x8804))+((r12*x8786))+((r11*x8802)));
evalcond[2]=((((-1.0)*x8796*x8804))+((r02*x8786))+((r01*x8802))+(((-1.0)*x8791)));
evalcond[3]=((((-1.0)*sj1*x8792))+(((-1.0)*gconst2*x8788*x8801))+((cj1*cj2))+((r21*x8786*x8790))+(((-1.0)*sj3*x8803))+((cj3*x8800))+((r20*x8787)));
evalcond[4]=(((gconst1*x8788))+((x8797*x8805))+(((-1.0)*cj1*x8792))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x8787*x8801))+((cj3*x8803))+((sj3*x8800)));
evalcond[5]=(((cj0*x8798))+(((-1.0)*sj3*x8796*x8801))+((r01*x8786*x8790))+((cj3*x8799))+(((-1.0)*r02*sj3*x8804))+((r00*x8787))+((sj1*x8794)));
evalcond[6]=(((x8796*x8805))+(((-1.0)*cj0*sj1*x8792))+(((-1.0)*r01*x8787*x8801))+((r02*x8806))+((sj3*x8799))+((r00*x8790))+((cj1*x8794)));
evalcond[7]=(((r10*x8787))+((r11*x8786*x8790))+(((-1.0)*sj3*x8795*x8801))+(((-1.0)*r12*sj3*x8804))+((cj3*x8793))+((sj0*x8798))+((sj1*x8789)));
evalcond[8]=(((r10*x8790))+((cj1*x8789))+((r12*x8806))+((x8795*x8805))+((sj3*x8793))+(((-1.0)*r11*x8787*x8801))+(((-1.0)*sj1*sj2*x8791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8807=((-1.0)*r21);
IkReal x8809 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8809)==0){
continue;
}
IkReal x8808=pow(x8809,-0.5);
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(x8807),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8810.value))));
IkReal gconst4=(x8807*x8808);
IkReal gconst5=((1.0)*r20*x8808);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8811.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8812=((-1.0)*r21);
CheckValue<IkReal> x8815 = IKatan2WithCheck(IkReal(x8812),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8815.valid){
continue;
}
IkReal x8813=((1.0)*(x8815.value));
IkReal x8814=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8813)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8813)));
IkReal gconst4=(x8812*x8814);
IkReal gconst5=((1.0)*r20*x8814);
IkReal x8816=r22*r22;
IkReal x8817=((1.0)*x8816);
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(((-1.0)+x8816),-1);
if(!x8821.valid){
continue;
}
IkReal x8818=x8821.value;
if((((1.0)+(((-1.0)*x8817)))) < -0.00001)
continue;
IkReal x8819=IKsqrt(((1.0)+(((-1.0)*x8817))));
IkReal x8820=(cj0*x8818*x8819);
j4eval[0]=((IKabs((x8820+(((-1.0)*x8817*x8820)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8822=((-1.0)*r21);
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal(x8822),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
IkReal x8823=((1.0)*(x8825.value));
IkReal x8824=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8823)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8823)));
IkReal gconst4=(x8822*x8824);
IkReal gconst5=((1.0)*r20*x8824);
IkReal x8826=r22*r22;
IkReal x8827=((1.0)*x8826);
CheckValue<IkReal> x8831=IKPowWithIntegerCheck(((-1.0)+x8826),-1);
if(!x8831.valid){
continue;
}
IkReal x8828=x8831.value;
if((((1.0)+(((-1.0)*x8827)))) < -0.00001)
continue;
IkReal x8829=IKsqrt(((1.0)+(((-1.0)*x8827))));
IkReal x8830=(sj0*x8828*x8829);
j4eval[0]=((IKabs(((((-1.0)*x8827*x8830))+x8830)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8832=((-1.0)*r21);
CheckValue<IkReal> x8835 = IKatan2WithCheck(IkReal(x8832),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8835.valid){
continue;
}
IkReal x8833=((1.0)*(x8835.value));
IkReal x8834=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8833)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8833)));
IkReal gconst4=(x8832*x8834);
IkReal gconst5=((1.0)*r20*x8834);
IkReal x8836=r22*r22;
IkReal x8837=((1.0)*r12*sj0);
IkReal x8838=((1.0)*cj0*r02);
CheckValue<IkReal> x8842=IKPowWithIntegerCheck(((-1.0)+x8836),-1);
if(!x8842.valid){
continue;
}
IkReal x8839=x8842.value;
if((((1.0)+(((-1.0)*x8836)))) < -0.00001)
continue;
IkReal x8840=IKsqrt(((1.0)+(((-1.0)*x8836))));
IkReal x8841=(r22*x8839*x8840);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x8838*x8841))+(((-1.0)*x8837*x8841)))))+(IKabs(((((-1.0)*x8838))+(((-1.0)*x8837))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8843=((-1.0)*r21);
CheckValue<IkReal> x8846 = IKatan2WithCheck(IkReal(x8843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8846.valid){
continue;
}
IkReal x8844=((1.0)*(x8846.value));
IkReal x8845=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8844)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8844)));
IkReal gconst4=(x8843*x8845);
IkReal gconst5=((1.0)*r20*x8845);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8847=((-1.0)*r21);
CheckValue<IkReal> x8850 = IKatan2WithCheck(IkReal(x8847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8850.valid){
continue;
}
IkReal x8848=((1.0)*(x8850.value));
IkReal x8849=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8848)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8848)));
IkReal gconst4=(x8847*x8849);
IkReal gconst5=((1.0)*r20*x8849);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8851=((-1.0)*r21);
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(x8851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal x8852=((1.0)*(x8854.value));
IkReal x8853=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8852)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8852)));
IkReal gconst4=(x8851*x8853);
IkReal gconst5=((1.0)*r20*x8853);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8855=((-1.0)*r21);
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal(x8855),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
IkReal x8856=((1.0)*(x8858.value));
IkReal x8857=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8856)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8856)));
IkReal gconst4=(x8855*x8857);
IkReal gconst5=((1.0)*r20*x8857);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8859=((-1.0)*r21);
CheckValue<IkReal> x8862 = IKatan2WithCheck(IkReal(x8859),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8862.valid){
continue;
}
IkReal x8860=((1.0)*(x8862.value));
IkReal x8861=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8860)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8860)));
IkReal gconst4=(x8859*x8861);
IkReal gconst5=((1.0)*r20*x8861);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8863=((-1.0)*r21);
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal(x8863),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
IkReal x8864=((1.0)*(x8866.value));
IkReal x8865=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8864)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8864)));
IkReal gconst4=(x8863*x8865);
IkReal gconst5=((1.0)*r20*x8865);
IkReal x8867=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8871=IKPowWithIntegerCheck(x8867,-1);
if(!x8871.valid){
continue;
}
IkReal x8868=x8871.value;
IkReal x8869=((1.0)*x8868);
IkReal x8870=((((-1.0)*x8869*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8868))+(((-1.0)*(r12*r12)))+(((-1.0)*x8869*(r10*r10)*(r20*r20))));
j4eval[0]=x8870;
j4eval[1]=r12;
j4eval[2]=x8867;
j4eval[3]=IKsign(x8870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8872=(gconst5*r10);
IkReal x8873=(gconst4*r11);
CheckValue<IkReal> x8874 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8872))+x8873)),IKFAST_ATAN2_MAGTHRESH);
if(!x8874.valid){
continue;
}
CheckValue<IkReal> x8875=IKPowWithIntegerCheck(IKsign(((((2.0)*x8872*x8873))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8872*x8872)))+(((-1.0)*(x8873*x8873))))),-1);
if(!x8875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8874.value)+(((1.5707963267949)*(x8875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8876=IKcos(j4);
IkReal x8877=IKsin(j4);
IkReal x8878=(gconst5*r10);
IkReal x8879=(gconst5*r00);
IkReal x8880=(gconst5*r20);
IkReal x8881=((1.0)*x8876);
IkReal x8882=(gconst4*x8877);
IkReal x8883=(gconst4*x8876);
IkReal x8884=((1.0)*x8877);
evalcond[0]=(((r21*x8883))+(((-1.0)*x8880*x8881))+((r22*x8877)));
evalcond[1]=(((r02*x8877))+(((-1.0)*x8879*x8881))+((r01*x8883)));
evalcond[2]=((1.0)+(((-1.0)*x8878*x8881))+((r12*x8877))+((r11*x8883)));
evalcond[3]=((((-1.0)*r12*x8881))+(((-1.0)*x8878*x8884))+((r11*x8882)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8881))+(((-1.0)*x8879*x8884))+((r01*x8882)));
evalcond[5]=((((-1.0)*r22*x8881))+((r21*x8882))+(((-1.0)*sj1*sj2))+(((-1.0)*x8880*x8884))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8885=((1.0)*gconst5);
CheckValue<IkReal> x8886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8885))+(((-1.0)*gconst4*r20)))),-1);
if(!x8886.valid){
continue;
}
CheckValue<IkReal> x8887 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8885)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8886.value)))+(x8887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8888=IKcos(j4);
IkReal x8889=IKsin(j4);
IkReal x8890=(gconst5*r10);
IkReal x8891=(gconst5*r00);
IkReal x8892=(gconst5*r20);
IkReal x8893=((1.0)*x8888);
IkReal x8894=(gconst4*x8889);
IkReal x8895=(gconst4*x8888);
IkReal x8896=((1.0)*x8889);
evalcond[0]=(((r22*x8889))+(((-1.0)*x8892*x8893))+((r21*x8895)));
evalcond[1]=(((r01*x8895))+(((-1.0)*x8891*x8893))+((r02*x8889)));
evalcond[2]=((1.0)+((r11*x8895))+(((-1.0)*x8890*x8893))+((r12*x8889)));
evalcond[3]=((((-1.0)*r12*x8893))+((r11*x8894))+(((-1.0)*x8890*x8896)));
evalcond[4]=(((cj2*sj1))+((r01*x8894))+(((-1.0)*x8891*x8896))+((cj1*sj2))+(((-1.0)*r02*x8893)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8892*x8896))+((r21*x8894))+((cj1*cj2))+(((-1.0)*r22*x8893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
CheckValue<IkReal> x8898=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8897.value)+(((1.5707963267949)*(x8898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8899=IKcos(j4);
IkReal x8900=IKsin(j4);
IkReal x8901=(gconst5*r10);
IkReal x8902=(gconst5*r00);
IkReal x8903=(gconst5*r20);
IkReal x8904=((1.0)*x8899);
IkReal x8905=(gconst4*x8900);
IkReal x8906=(gconst4*x8899);
IkReal x8907=((1.0)*x8900);
evalcond[0]=((((-1.0)*x8903*x8904))+((r21*x8906))+((r22*x8900)));
evalcond[1]=((((-1.0)*x8902*x8904))+((r01*x8906))+((r02*x8900)));
evalcond[2]=((1.0)+((r11*x8906))+((r12*x8900))+(((-1.0)*x8901*x8904)));
evalcond[3]=(((r11*x8905))+(((-1.0)*x8901*x8907))+(((-1.0)*r12*x8904)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8902*x8907))+((cj1*sj2))+((r01*x8905))+(((-1.0)*r02*x8904)));
evalcond[5]=((((-1.0)*x8903*x8907))+((r21*x8905))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x8904))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8908=((-1.0)*r21);
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal(x8908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
IkReal x8909=((1.0)*(x8911.value));
IkReal x8910=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8909)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8909)));
IkReal gconst4=(x8908*x8910);
IkReal gconst5=((1.0)*r20*x8910);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8912=((-1.0)*r21);
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(x8912),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
IkReal x8913=((1.0)*(x8915.value));
IkReal x8914=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8913)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8913)));
IkReal gconst4=(x8912*x8914);
IkReal gconst5=((1.0)*r20*x8914);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8916=((-1.0)*r21);
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(x8916),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
IkReal x8917=((1.0)*(x8919.value));
IkReal x8918=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8917)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8917)));
IkReal gconst4=(x8916*x8918);
IkReal gconst5=((1.0)*r20*x8918);
IkReal x8920=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(x8920,-1);
if(!x8924.valid){
continue;
}
IkReal x8921=x8924.value;
IkReal x8922=((1.0)*x8921);
IkReal x8923=((((-2.0)*r10*r11*r20*r21*x8921))+(((-1.0)*(r12*r12)))+(((-1.0)*x8922*(r10*r10)*(r20*r20)))+(((-1.0)*x8922*(r11*r11)*(r21*r21))));
j4eval[0]=x8923;
j4eval[1]=r12;
j4eval[2]=x8920;
j4eval[3]=IKsign(x8923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8925=(gconst5*r10);
IkReal x8926=(gconst4*r11);
CheckValue<IkReal> x8927 = IKatan2WithCheck(IkReal(r12),IkReal((x8926+(((-1.0)*x8925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8927.valid){
continue;
}
CheckValue<IkReal> x8928=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8926*x8926)))+(((2.0)*x8925*x8926))+(((-1.0)*(x8925*x8925)))+(((-1.0)*(r12*r12))))),-1);
if(!x8928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8927.value)+(((1.5707963267949)*(x8928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8929=IKcos(j4);
IkReal x8930=IKsin(j4);
IkReal x8931=(gconst4*r21);
IkReal x8932=(gconst4*r11);
IkReal x8933=(gconst4*r01);
IkReal x8934=((1.0)*x8930);
IkReal x8935=(gconst5*x8930);
IkReal x8936=((1.0)*gconst5*x8929);
evalcond[0]=((((-1.0)*r20*x8936))+((x8929*x8931))+((r22*x8930)));
evalcond[1]=(((x8929*x8933))+(((-1.0)*r00*x8936))+((r02*x8930)));
evalcond[2]=((((-1.0)*x8932*x8934))+((r12*x8929))+((r10*x8935)));
evalcond[3]=((1.0)+((r12*x8930))+(((-1.0)*r10*x8936))+((x8929*x8932)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x8929))+(((-1.0)*x8933*x8934))+((r00*x8935)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x8929))+((r20*x8935))+(((-1.0)*x8931*x8934))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8937=((1.0)*gconst5);
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8937)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
CheckValue<IkReal> x8939=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x8937)))),-1);
if(!x8939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8938.value)+(((1.5707963267949)*(x8939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8940=IKcos(j4);
IkReal x8941=IKsin(j4);
IkReal x8942=(gconst4*r21);
IkReal x8943=(gconst4*r11);
IkReal x8944=(gconst4*r01);
IkReal x8945=((1.0)*x8941);
IkReal x8946=(gconst5*x8941);
IkReal x8947=((1.0)*gconst5*x8940);
evalcond[0]=(((r22*x8941))+((x8940*x8942))+(((-1.0)*r20*x8947)));
evalcond[1]=(((r02*x8941))+(((-1.0)*r00*x8947))+((x8940*x8944)));
evalcond[2]=((((-1.0)*x8943*x8945))+((r10*x8946))+((r12*x8940)));
evalcond[3]=((1.0)+((x8940*x8943))+((r12*x8941))+(((-1.0)*r10*x8947)));
evalcond[4]=(((cj2*sj1))+((r02*x8940))+(((-1.0)*x8944*x8945))+((cj1*sj2))+((r00*x8946)));
evalcond[5]=(((r22*x8940))+(((-1.0)*sj1*sj2))+(((-1.0)*x8942*x8945))+((r20*x8946))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8948 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8948.valid){
continue;
}
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8948.value)+(((1.5707963267949)*(x8949.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8950=IKcos(j4);
IkReal x8951=IKsin(j4);
IkReal x8952=(gconst4*r21);
IkReal x8953=(gconst4*r11);
IkReal x8954=(gconst4*r01);
IkReal x8955=((1.0)*x8951);
IkReal x8956=(gconst5*x8951);
IkReal x8957=((1.0)*gconst5*x8950);
evalcond[0]=(((r22*x8951))+((x8950*x8952))+(((-1.0)*r20*x8957)));
evalcond[1]=(((x8950*x8954))+(((-1.0)*r00*x8957))+((r02*x8951)));
evalcond[2]=(((r10*x8956))+(((-1.0)*x8953*x8955))+((r12*x8950)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8957))+((x8950*x8953))+((r12*x8951)));
evalcond[4]=(((cj2*sj1))+((r02*x8950))+((cj1*sj2))+((r00*x8956))+(((-1.0)*x8954*x8955)));
evalcond[5]=(((r22*x8950))+(((-1.0)*sj1*sj2))+(((-1.0)*x8952*x8955))+((cj1*cj2))+((r20*x8956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8958=((-1.0)*r21);
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal(x8958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
IkReal x8959=((1.0)*(x8961.value));
IkReal x8960=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8959)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8959)));
IkReal gconst4=(x8958*x8960);
IkReal gconst5=((1.0)*r20*x8960);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8962=((-1.0)*r21);
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(x8962),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8963=((1.0)*(x8965.value));
IkReal x8964=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8963)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8963)));
IkReal gconst4=(x8962*x8964);
IkReal gconst5=((1.0)*r20*x8964);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8966=((-1.0)*r21);
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(x8966),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8967=((1.0)*(x8969.value));
IkReal x8968=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8967)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8967)));
IkReal gconst4=(x8966*x8968);
IkReal gconst5=((1.0)*r20*x8968);
IkReal x8970=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8974=IKPowWithIntegerCheck(x8970,-1);
if(!x8974.valid){
continue;
}
IkReal x8971=x8974.value;
IkReal x8972=((1.0)*x8971);
IkReal x8973=((((-2.0)*r10*r11*r20*r21*x8971))+(((-1.0)*(r12*r12)))+(((-1.0)*x8972*(r11*r11)*(r21*r21)))+(((-1.0)*x8972*(r10*r10)*(r20*r20))));
j4eval[0]=x8973;
j4eval[1]=r12;
j4eval[2]=x8970;
j4eval[3]=IKsign(x8973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8975=(gconst5*r10);
IkReal x8976=(gconst4*r11);
CheckValue<IkReal> x8977 = IKatan2WithCheck(IkReal(r12),IkReal((x8976+(((-1.0)*x8975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8977.valid){
continue;
}
CheckValue<IkReal> x8978=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8976*x8976)))+(((-1.0)*(x8975*x8975)))+(((-1.0)*(r12*r12)))+(((2.0)*x8975*x8976)))),-1);
if(!x8978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8977.value)+(((1.5707963267949)*(x8978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8979=IKcos(j4);
IkReal x8980=IKsin(j4);
IkReal x8981=(gconst4*r21);
IkReal x8982=((1.0)*sj1);
IkReal x8983=(gconst4*r11);
IkReal x8984=(gconst4*r01);
IkReal x8985=((1.0)*x8980);
IkReal x8986=(gconst5*x8980);
IkReal x8987=((1.0)*gconst5*x8979);
evalcond[0]=(((r22*x8980))+(((-1.0)*r20*x8987))+((x8979*x8981)));
evalcond[1]=(((r02*x8980))+((x8979*x8984))+(((-1.0)*r00*x8987)));
evalcond[2]=(((r12*x8979))+((r10*x8986))+(((-1.0)*x8983*x8985)));
evalcond[3]=((1.0)+((x8979*x8983))+((r12*x8980))+(((-1.0)*r10*x8987)));
evalcond[4]=(((r00*x8986))+(((-1.0)*sj2*x8982))+(((-1.0)*x8984*x8985))+((cj1*cj2))+((r02*x8979)));
evalcond[5]=((((-1.0)*x8981*x8985))+(((-1.0)*cj1*sj2))+((r20*x8986))+(((-1.0)*cj2*x8982))+((r22*x8979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8988=((1.0)*gconst5);
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8988))+(((-1.0)*gconst4*r20)))),-1);
if(!x8989.valid){
continue;
}
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8988)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8989.value)))+(x8990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8991=IKcos(j4);
IkReal x8992=IKsin(j4);
IkReal x8993=(gconst4*r21);
IkReal x8994=((1.0)*sj1);
IkReal x8995=(gconst4*r11);
IkReal x8996=(gconst4*r01);
IkReal x8997=((1.0)*x8992);
IkReal x8998=(gconst5*x8992);
IkReal x8999=((1.0)*gconst5*x8991);
evalcond[0]=(((x8991*x8993))+((r22*x8992))+(((-1.0)*r20*x8999)));
evalcond[1]=(((x8991*x8996))+(((-1.0)*r00*x8999))+((r02*x8992)));
evalcond[2]=((((-1.0)*x8995*x8997))+((r12*x8991))+((r10*x8998)));
evalcond[3]=((1.0)+((r12*x8992))+((x8991*x8995))+(((-1.0)*r10*x8999)));
evalcond[4]=((((-1.0)*x8996*x8997))+((r00*x8998))+((cj1*cj2))+(((-1.0)*sj2*x8994))+((r02*x8991)));
evalcond[5]=((((-1.0)*x8993*x8997))+((r20*x8998))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8994))+((r22*x8991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
CheckValue<IkReal> x9001=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9000.value)+(((1.5707963267949)*(x9001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9002=IKcos(j4);
IkReal x9003=IKsin(j4);
IkReal x9004=(gconst4*r21);
IkReal x9005=((1.0)*sj1);
IkReal x9006=(gconst4*r11);
IkReal x9007=(gconst4*r01);
IkReal x9008=((1.0)*x9003);
IkReal x9009=(gconst5*x9003);
IkReal x9010=((1.0)*gconst5*x9002);
evalcond[0]=(((r22*x9003))+((x9002*x9004))+(((-1.0)*r20*x9010)));
evalcond[1]=(((r02*x9003))+((x9002*x9007))+(((-1.0)*r00*x9010)));
evalcond[2]=(((r10*x9009))+(((-1.0)*x9006*x9008))+((r12*x9002)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9010))+((x9002*x9006))+((r12*x9003)));
evalcond[4]=(((r02*x9002))+((cj1*cj2))+(((-1.0)*sj2*x9005))+(((-1.0)*x9007*x9008))+((r00*x9009)));
evalcond[5]=((((-1.0)*cj2*x9005))+((r22*x9002))+(((-1.0)*x9004*x9008))+(((-1.0)*cj1*sj2))+((r20*x9009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*r21);
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(x9011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9012=((1.0)*(x9014.value));
IkReal x9013=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9012)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9012)));
IkReal gconst4=(x9011*x9013);
IkReal gconst5=((1.0)*r20*x9013);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9015=((-1.0)*r21);
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(x9015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
IkReal x9016=((1.0)*(x9018.value));
IkReal x9017=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9016)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9016)));
IkReal gconst4=(x9015*x9017);
IkReal gconst5=((1.0)*r20*x9017);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9019=((-1.0)*r21);
CheckValue<IkReal> x9022 = IKatan2WithCheck(IkReal(x9019),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9022.valid){
continue;
}
IkReal x9020=((1.0)*(x9022.value));
IkReal x9021=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9020)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9020)));
IkReal gconst4=(x9019*x9021);
IkReal gconst5=((1.0)*r20*x9021);
IkReal x9023=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9027=IKPowWithIntegerCheck(x9023,-1);
if(!x9027.valid){
continue;
}
IkReal x9024=x9027.value;
IkReal x9025=((1.0)*x9024);
IkReal x9026=((((-1.0)*x9025*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9024))+(((-1.0)*(r12*r12)))+(((-1.0)*x9025*(r10*r10)*(r20*r20))));
j4eval[0]=x9026;
j4eval[1]=r12;
j4eval[2]=x9023;
j4eval[3]=IKsign(x9026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9028=(gconst5*r10);
IkReal x9029=(gconst4*r11);
CheckValue<IkReal> x9030 = IKatan2WithCheck(IkReal(r12),IkReal((x9029+(((-1.0)*x9028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9030.valid){
continue;
}
CheckValue<IkReal> x9031=IKPowWithIntegerCheck(IKsign(((((2.0)*x9028*x9029))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9029*x9029)))+(((-1.0)*(x9028*x9028))))),-1);
if(!x9031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9030.value)+(((1.5707963267949)*(x9031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9032=IKcos(j4);
IkReal x9033=IKsin(j4);
IkReal x9034=(gconst4*r11);
IkReal x9035=(gconst5*r10);
IkReal x9036=((1.0)*sj2);
IkReal x9037=(gconst5*r00);
IkReal x9038=(gconst5*r20);
IkReal x9039=((1.0)*x9032);
IkReal x9040=(gconst4*x9032);
IkReal x9041=((1.0)*x9033);
IkReal x9042=(gconst4*x9033);
evalcond[0]=(((r22*x9033))+(((-1.0)*x9038*x9039))+((r21*x9040)));
evalcond[1]=(((r01*x9040))+((r02*x9033))+(((-1.0)*x9037*x9039)));
evalcond[2]=((1.0)+(((-1.0)*x9035*x9039))+((x9032*x9034))+((r12*x9033)));
evalcond[3]=((((-1.0)*r12*x9039))+((x9033*x9034))+(((-1.0)*x9035*x9041)));
evalcond[4]=((((-1.0)*sj1*x9036))+(((-1.0)*x9037*x9041))+((r01*x9042))+((cj1*cj2))+(((-1.0)*r02*x9039)));
evalcond[5]=((((-1.0)*x9038*x9041))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9036))+(((-1.0)*r22*x9039))+((r21*x9042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9043=((1.0)*gconst5);
CheckValue<IkReal> x9044 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9043)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9044.valid){
continue;
}
CheckValue<IkReal> x9045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9043))+(((-1.0)*gconst4*r20)))),-1);
if(!x9045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9044.value)+(((1.5707963267949)*(x9045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9046=IKcos(j4);
IkReal x9047=IKsin(j4);
IkReal x9048=(gconst4*r11);
IkReal x9049=(gconst5*r10);
IkReal x9050=((1.0)*sj2);
IkReal x9051=(gconst5*r00);
IkReal x9052=(gconst5*r20);
IkReal x9053=((1.0)*x9046);
IkReal x9054=(gconst4*x9046);
IkReal x9055=((1.0)*x9047);
IkReal x9056=(gconst4*x9047);
evalcond[0]=(((r22*x9047))+((r21*x9054))+(((-1.0)*x9052*x9053)));
evalcond[1]=(((r01*x9054))+((r02*x9047))+(((-1.0)*x9051*x9053)));
evalcond[2]=((1.0)+(((-1.0)*x9049*x9053))+((r12*x9047))+((x9046*x9048)));
evalcond[3]=((((-1.0)*x9049*x9055))+(((-1.0)*r12*x9053))+((x9047*x9048)));
evalcond[4]=((((-1.0)*r02*x9053))+((r01*x9056))+(((-1.0)*sj1*x9050))+((cj1*cj2))+(((-1.0)*x9051*x9055)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x9053))+(((-1.0)*cj1*x9050))+((r21*x9056))+(((-1.0)*x9052*x9055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9057.value)+(((1.5707963267949)*(x9058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9059=IKcos(j4);
IkReal x9060=IKsin(j4);
IkReal x9061=(gconst4*r11);
IkReal x9062=(gconst5*r10);
IkReal x9063=((1.0)*sj2);
IkReal x9064=(gconst5*r00);
IkReal x9065=(gconst5*r20);
IkReal x9066=((1.0)*x9059);
IkReal x9067=(gconst4*x9059);
IkReal x9068=((1.0)*x9060);
IkReal x9069=(gconst4*x9060);
evalcond[0]=(((r22*x9060))+(((-1.0)*x9065*x9066))+((r21*x9067)));
evalcond[1]=((((-1.0)*x9064*x9066))+((r01*x9067))+((r02*x9060)));
evalcond[2]=((1.0)+(((-1.0)*x9062*x9066))+((r12*x9060))+((x9059*x9061)));
evalcond[3]=(((x9060*x9061))+(((-1.0)*x9062*x9068))+(((-1.0)*r12*x9066)));
evalcond[4]=((((-1.0)*x9064*x9068))+(((-1.0)*sj1*x9063))+((r01*x9069))+(((-1.0)*r02*x9066))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9065*x9068))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9063))+((r21*x9069))+(((-1.0)*r22*x9066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9070=((-1.0)*r21);
IkReal x9071=((-1.0)*px);
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(x9070),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
IkReal x9072=((1.0)*(x9073.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9072)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9071);
rxp1_1=(px*r21);
rxp1_2=(r11*x9071);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9072)));
IkReal gconst4=x9070;
IkReal gconst5=((1.0)*r20);
IkReal x9074=((1.0)*sj3);
IkReal x9075=(r11*r21);
IkReal x9076=(r10*r20);
j4eval[0]=((((-1.0)*x9074*x9076))+(((-1.0)*x9074*x9075)));
j4eval[1]=((((-1.0)*x9075))+(((-1.0)*x9076)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9077=((-1.0)*r21);
IkReal x9078=((-1.0)*px);
CheckValue<IkReal> x9080 = IKatan2WithCheck(IkReal(x9077),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9080.valid){
continue;
}
IkReal x9079=((1.0)*(x9080.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9079)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9078);
rxp1_1=(px*r21);
rxp1_2=(r11*x9078);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9079)));
IkReal gconst4=x9077;
IkReal gconst5=((1.0)*r20);
IkReal x9081=((1.0)*cj3);
IkReal x9082=(r10*r20);
IkReal x9083=(r11*r21);
j4eval[0]=(((x9081*x9083))+((x9081*x9082)));
j4eval[1]=((((-1.0)*x9083))+(((-1.0)*x9082)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9084=((-1.0)*r21);
IkReal x9085=((-1.0)*px);
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal(x9084),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
IkReal x9086=((1.0)*(x9087.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9086)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9085);
rxp1_1=(px*r21);
rxp1_2=(r11*x9085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9086)));
IkReal gconst4=x9084;
IkReal gconst5=((1.0)*r20);
IkReal x9088=((1.0)*sj3);
j4eval[0]=((((-1.0)*r10*r20*x9088))+(((-1.0)*r11*r21*x9088)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9089=((1.0)*gconst5);
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x9089))+((gconst4*r11*sj3))),-1);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(r02,-1);
if(!x9091.valid){
continue;
}
CheckValue<IkReal> x9092=IKPowWithIntegerCheck(sj3,-1);
if(!x9092.valid){
continue;
}
if( IKabs(((x9090.value)*(((((-1.0)*cj3*r11*x9089))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9091.value)*(x9092.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9090.value)*(((((-1.0)*cj3*r11*x9089))+(((-1.0)*cj3*gconst4*r10))))))+IKsqr(((x9091.value)*(x9092.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9090.value)*(((((-1.0)*cj3*r11*x9089))+(((-1.0)*cj3*gconst4*r10))))), ((x9091.value)*(x9092.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9093=IKcos(j4);
IkReal x9094=IKsin(j4);
IkReal x9095=(cj1*cj2);
IkReal x9096=(gconst5*sj3);
IkReal x9097=(cj3*gconst5);
IkReal x9098=((1.0)*r10);
IkReal x9099=((1.0)*sj1);
IkReal x9100=(cj1*sj2);
IkReal x9101=(gconst4*r20);
IkReal x9102=(gconst4*r10);
IkReal x9103=(sj2*x9099);
IkReal x9104=(r20*x9094);
IkReal x9105=(gconst4*x9093);
IkReal x9106=(gconst5*x9093);
IkReal x9107=(r02*x9093);
IkReal x9108=(gconst4*sj3*x9094);
IkReal x9109=((1.0)*cj3*gconst4*x9094);
evalcond[0]=(r02*x9094);
evalcond[1]=((((-1.0)*r20*x9106))+((r21*x9105)));
evalcond[2]=((((-1.0)*sj3*x9107))+((cj2*sj1))+x9100);
evalcond[3]=(((cj3*x9107))+x9095+(((-1.0)*x9103)));
evalcond[4]=((1.0)+((r11*x9105))+(((-1.0)*x9098*x9106)));
evalcond[5]=(((r11*x9097))+((cj3*x9102))+(((-1.0)*x9094*x9096*x9098))+((r11*x9108)));
evalcond[6]=(((r11*x9096))+(((-1.0)*r11*x9109))+((r10*x9094*x9097))+((sj3*x9102)));
evalcond[7]=(((cj3*x9101))+x9095+((r21*x9108))+((r21*x9097))+(((-1.0)*x9103))+(((-1.0)*x9096*x9104)));
evalcond[8]=((((-1.0)*x9100))+(((-1.0)*r21*x9109))+((r21*x9096))+(((-1.0)*cj2*x9099))+((sj3*x9101))+((x9097*x9104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9110=((1.0)*r10);
IkReal x9111=((1.0)*r11);
CheckValue<IkReal> x9112=IKPowWithIntegerCheck((((cj3*gconst5*r10))+(((-1.0)*cj3*gconst4*x9111))),-1);
if(!x9112.valid){
continue;
}
CheckValue<IkReal> x9113=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*x9110))),-1);
if(!x9113.valid){
continue;
}
if( IKabs(((x9112.value)*(((((-1.0)*gconst5*sj3*x9111))+(((-1.0)*gconst4*sj3*x9110)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9113.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9112.value)*(((((-1.0)*gconst5*sj3*x9111))+(((-1.0)*gconst4*sj3*x9110))))))+IKsqr(((-1.0)*(x9113.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9112.value)*(((((-1.0)*gconst5*sj3*x9111))+(((-1.0)*gconst4*sj3*x9110))))), ((-1.0)*(x9113.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9114=IKcos(j4);
IkReal x9115=IKsin(j4);
IkReal x9116=(cj1*cj2);
IkReal x9117=(gconst5*sj3);
IkReal x9118=(cj3*gconst5);
IkReal x9119=((1.0)*r10);
IkReal x9120=((1.0)*sj1);
IkReal x9121=(cj1*sj2);
IkReal x9122=(gconst4*r20);
IkReal x9123=(gconst4*r10);
IkReal x9124=(sj2*x9120);
IkReal x9125=(r20*x9115);
IkReal x9126=(gconst4*x9114);
IkReal x9127=(gconst5*x9114);
IkReal x9128=(r02*x9114);
IkReal x9129=(gconst4*sj3*x9115);
IkReal x9130=((1.0)*cj3*gconst4*x9115);
evalcond[0]=(r02*x9115);
evalcond[1]=((((-1.0)*r20*x9127))+((r21*x9126)));
evalcond[2]=(((cj2*sj1))+x9121+(((-1.0)*sj3*x9128)));
evalcond[3]=(x9116+(((-1.0)*x9124))+((cj3*x9128)));
evalcond[4]=((1.0)+(((-1.0)*x9119*x9127))+((r11*x9126)));
evalcond[5]=(((r11*x9118))+((cj3*x9123))+(((-1.0)*x9115*x9117*x9119))+((r11*x9129)));
evalcond[6]=(((r11*x9117))+((sj3*x9123))+(((-1.0)*r11*x9130))+((r10*x9115*x9118)));
evalcond[7]=(((r21*x9118))+x9116+(((-1.0)*x9124))+((cj3*x9122))+(((-1.0)*x9117*x9125))+((r21*x9129)));
evalcond[8]=(((r21*x9117))+((sj3*x9122))+(((-1.0)*cj2*x9120))+(((-1.0)*r21*x9130))+((x9118*x9125))+(((-1.0)*x9121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9131=((1.0)*gconst5);
IkReal x9132=(gconst4*r11);
CheckValue<IkReal> x9133=IKPowWithIntegerCheck((((sj3*x9132))+(((-1.0)*r10*sj3*x9131))),-1);
if(!x9133.valid){
continue;
}
CheckValue<IkReal> x9134=IKPowWithIntegerCheck((x9132+(((-1.0)*r10*x9131))),-1);
if(!x9134.valid){
continue;
}
if( IKabs(((x9133.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x9131)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9134.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9133.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x9131))))))+IKsqr(((-1.0)*(x9134.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9133.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x9131))))), ((-1.0)*(x9134.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9135=IKcos(j4);
IkReal x9136=IKsin(j4);
IkReal x9137=(cj1*cj2);
IkReal x9138=(gconst5*sj3);
IkReal x9139=(cj3*gconst5);
IkReal x9140=((1.0)*r10);
IkReal x9141=((1.0)*sj1);
IkReal x9142=(cj1*sj2);
IkReal x9143=(gconst4*r20);
IkReal x9144=(gconst4*r10);
IkReal x9145=(sj2*x9141);
IkReal x9146=(r20*x9136);
IkReal x9147=(gconst4*x9135);
IkReal x9148=(gconst5*x9135);
IkReal x9149=(r02*x9135);
IkReal x9150=(gconst4*sj3*x9136);
IkReal x9151=((1.0)*cj3*gconst4*x9136);
evalcond[0]=(r02*x9136);
evalcond[1]=(((r21*x9147))+(((-1.0)*r20*x9148)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9149))+x9142);
evalcond[3]=((((-1.0)*x9145))+x9137+((cj3*x9149)));
evalcond[4]=((1.0)+(((-1.0)*x9140*x9148))+((r11*x9147)));
evalcond[5]=(((r11*x9150))+(((-1.0)*x9136*x9138*x9140))+((r11*x9139))+((cj3*x9144)));
evalcond[6]=(((sj3*x9144))+(((-1.0)*r11*x9151))+((r10*x9136*x9139))+((r11*x9138)));
evalcond[7]=((((-1.0)*x9145))+x9137+(((-1.0)*x9138*x9146))+((r21*x9139))+((r21*x9150))+((cj3*x9143)));
evalcond[8]=(((sj3*x9143))+(((-1.0)*x9142))+(((-1.0)*r21*x9151))+(((-1.0)*cj2*x9141))+((x9139*x9146))+((r21*x9138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9152=gconst4*gconst4;
IkReal x9153=gconst5*gconst5;
IkReal x9154=(r10*r21);
IkReal x9155=(gconst4*gconst5);
IkReal x9156=((1.0)*cj3);
IkReal x9157=(r11*r21);
IkReal x9158=((1.0)*r20*sj3);
IkReal x9159=((1.0)*r22*sj3);
CheckValue<IkReal> x9160 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9155*x9158))+((sj3*x9152*x9154))+((sj3*x9155*x9157))+(((-1.0)*r11*x9153*x9158)))),IkReal(((((-1.0)*gconst4*r10*x9159))+(((-1.0)*gconst5*r11*x9159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9160.valid){
continue;
}
CheckValue<IkReal> x9161=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*r10*r20*x9153))+(((-1.0)*r11*r20*x9155*x9156))+((cj3*x9152*x9157))+(((-1.0)*x9154*x9155*x9156)))),-1);
if(!x9161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9160.value)+(((1.5707963267949)*(x9161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9162=IKcos(j4);
IkReal x9163=IKsin(j4);
IkReal x9164=(cj1*cj2);
IkReal x9165=(gconst5*sj3);
IkReal x9166=((1.0)*r10);
IkReal x9167=((1.0)*sj1);
IkReal x9168=(cj1*sj2);
IkReal x9169=(cj3*gconst4);
IkReal x9170=(gconst4*sj3);
IkReal x9171=(cj3*gconst5);
IkReal x9172=(sj2*x9167);
IkReal x9173=(gconst4*x9162);
IkReal x9174=(gconst5*x9162);
IkReal x9175=((1.0)*x9163);
IkReal x9176=(cj3*x9162);
IkReal x9177=(x9163*x9170);
IkReal x9178=(x9163*x9171);
IkReal x9179=((1.0)*sj3*x9162);
evalcond[0]=(((r22*x9163))+((r21*x9173))+(((-1.0)*r20*x9174)));
evalcond[1]=(((r02*x9163))+((r01*x9173))+(((-1.0)*r00*x9174)));
evalcond[2]=((1.0)+((r12*x9163))+((r11*x9173))+(((-1.0)*x9166*x9174)));
evalcond[3]=(((r10*x9170))+((r10*x9178))+(((-1.0)*r11*x9169*x9175))+((r11*x9165))+((r12*x9176)));
evalcond[4]=(((r10*x9169))+(((-1.0)*r12*x9179))+((r11*x9171))+((r11*x9177))+(((-1.0)*x9163*x9165*x9166)));
evalcond[5]=(((cj2*sj1))+((r00*x9169))+(((-1.0)*r00*x9165*x9175))+x9168+((r01*x9171))+((r01*x9177))+(((-1.0)*r02*x9179)));
evalcond[6]=(((r01*x9165))+((r02*x9176))+((r00*x9170))+((r00*x9178))+x9164+(((-1.0)*x9172))+(((-1.0)*r01*x9169*x9175)));
evalcond[7]=(x9164+(((-1.0)*x9172))+(((-1.0)*r20*x9165*x9175))+((r21*x9171))+((r21*x9177))+(((-1.0)*r22*x9179))+((r20*x9169)));
evalcond[8]=((((-1.0)*cj2*x9167))+(((-1.0)*x9168))+((r20*x9178))+((r20*x9170))+((r21*x9165))+(((-1.0)*r21*x9169*x9175))+((r22*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9180=((1.0)*gconst5);
CheckValue<IkReal> x9181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9180))+(((-1.0)*gconst4*r20)))),-1);
if(!x9181.valid){
continue;
}
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9180)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9181.value)))+(x9182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9183=IKcos(j4);
IkReal x9184=IKsin(j4);
IkReal x9185=(cj1*cj2);
IkReal x9186=(gconst5*sj3);
IkReal x9187=((1.0)*r10);
IkReal x9188=((1.0)*sj1);
IkReal x9189=(cj1*sj2);
IkReal x9190=(cj3*gconst4);
IkReal x9191=(gconst4*sj3);
IkReal x9192=(cj3*gconst5);
IkReal x9193=(sj2*x9188);
IkReal x9194=(gconst4*x9183);
IkReal x9195=(gconst5*x9183);
IkReal x9196=((1.0)*x9184);
IkReal x9197=(cj3*x9183);
IkReal x9198=(x9184*x9191);
IkReal x9199=(x9184*x9192);
IkReal x9200=((1.0)*sj3*x9183);
evalcond[0]=((((-1.0)*r20*x9195))+((r21*x9194))+((r22*x9184)));
evalcond[1]=(((r01*x9194))+((r02*x9184))+(((-1.0)*r00*x9195)));
evalcond[2]=((1.0)+((r12*x9184))+(((-1.0)*x9187*x9195))+((r11*x9194)));
evalcond[3]=(((r11*x9186))+((r10*x9199))+((r10*x9191))+((r12*x9197))+(((-1.0)*r11*x9190*x9196)));
evalcond[4]=(((r10*x9190))+(((-1.0)*r12*x9200))+(((-1.0)*x9184*x9186*x9187))+((r11*x9198))+((r11*x9192)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x9186*x9196))+((r01*x9198))+((r01*x9192))+((r00*x9190))+(((-1.0)*r02*x9200))+x9189);
evalcond[6]=(((r00*x9199))+((r00*x9191))+x9185+(((-1.0)*r01*x9190*x9196))+((r02*x9197))+(((-1.0)*x9193))+((r01*x9186)));
evalcond[7]=((((-1.0)*r20*x9186*x9196))+x9185+((r21*x9192))+((r21*x9198))+((r20*x9190))+(((-1.0)*r22*x9200))+(((-1.0)*x9193)));
evalcond[8]=(((r22*x9197))+(((-1.0)*cj2*x9188))+(((-1.0)*x9189))+((r21*x9186))+((r20*x9191))+((r20*x9199))+(((-1.0)*r21*x9190*x9196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9201 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9201.valid){
continue;
}
CheckValue<IkReal> x9202=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9201.value)+(((1.5707963267949)*(x9202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9203=IKcos(j4);
IkReal x9204=IKsin(j4);
IkReal x9205=(cj1*cj2);
IkReal x9206=(gconst5*sj3);
IkReal x9207=((1.0)*r10);
IkReal x9208=((1.0)*sj1);
IkReal x9209=(cj1*sj2);
IkReal x9210=(cj3*gconst4);
IkReal x9211=(gconst4*sj3);
IkReal x9212=(cj3*gconst5);
IkReal x9213=(sj2*x9208);
IkReal x9214=(gconst4*x9203);
IkReal x9215=(gconst5*x9203);
IkReal x9216=((1.0)*x9204);
IkReal x9217=(cj3*x9203);
IkReal x9218=(x9204*x9211);
IkReal x9219=(x9204*x9212);
IkReal x9220=((1.0)*sj3*x9203);
evalcond[0]=(((r21*x9214))+((r22*x9204))+(((-1.0)*r20*x9215)));
evalcond[1]=(((r02*x9204))+(((-1.0)*r00*x9215))+((r01*x9214)));
evalcond[2]=((1.0)+((r11*x9214))+((r12*x9204))+(((-1.0)*x9207*x9215)));
evalcond[3]=(((r10*x9211))+((r10*x9219))+((r11*x9206))+((r12*x9217))+(((-1.0)*r11*x9210*x9216)));
evalcond[4]=(((r10*x9210))+(((-1.0)*x9204*x9206*x9207))+((r11*x9212))+((r11*x9218))+(((-1.0)*r12*x9220)));
evalcond[5]=(((cj2*sj1))+((r00*x9210))+(((-1.0)*r02*x9220))+x9209+(((-1.0)*r00*x9206*x9216))+((r01*x9212))+((r01*x9218)));
evalcond[6]=(((r00*x9211))+((r00*x9219))+((r01*x9206))+(((-1.0)*r01*x9210*x9216))+x9205+((r02*x9217))+(((-1.0)*x9213)));
evalcond[7]=(((r20*x9210))+((r21*x9218))+((r21*x9212))+x9205+(((-1.0)*r20*x9206*x9216))+(((-1.0)*x9213))+(((-1.0)*r22*x9220)));
evalcond[8]=(((r20*x9211))+((r20*x9219))+(((-1.0)*r21*x9210*x9216))+((r21*x9206))+((r22*x9217))+(((-1.0)*cj2*x9208))+(((-1.0)*x9209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9221=((-1.0)*r21);
CheckValue<IkReal> x9224 = IKatan2WithCheck(IkReal(x9221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9224.valid){
continue;
}
IkReal x9222=((1.0)*(x9224.value));
IkReal x9223=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9222)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9222)));
IkReal gconst4=(x9221*x9223);
IkReal gconst5=((1.0)*r20*x9223);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9225=((-1.0)*r21);
CheckValue<IkReal> x9228 = IKatan2WithCheck(IkReal(x9225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9228.valid){
continue;
}
IkReal x9226=((1.0)*(x9228.value));
IkReal x9227=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9226)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9226)));
IkReal gconst4=(x9225*x9227);
IkReal gconst5=((1.0)*r20*x9227);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9229=((-1.0)*r21);
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal(x9229),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
IkReal x9230=((1.0)*(x9232.value));
IkReal x9231=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9230)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9230)));
IkReal gconst4=(x9229*x9231);
IkReal gconst5=((1.0)*r20*x9231);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9233=((-1.0)*r21);
CheckValue<IkReal> x9236 = IKatan2WithCheck(IkReal(x9233),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9236.valid){
continue;
}
IkReal x9234=((1.0)*(x9236.value));
IkReal x9235=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9234)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9234)));
IkReal gconst4=(x9233*x9235);
IkReal gconst5=((1.0)*r20*x9235);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9237=((-1.0)*r21);
CheckValue<IkReal> x9240 = IKatan2WithCheck(IkReal(x9237),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9240.valid){
continue;
}
IkReal x9238=((1.0)*(x9240.value));
IkReal x9239=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9238)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9238)));
IkReal gconst4=(x9237*x9239);
IkReal gconst5=((1.0)*r20*x9239);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9241=((-1.0)*r21);
CheckValue<IkReal> x9244 = IKatan2WithCheck(IkReal(x9241),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9244.valid){
continue;
}
IkReal x9242=((1.0)*(x9244.value));
IkReal x9243=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9242)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9242)));
IkReal gconst4=(x9241*x9243);
IkReal gconst5=((1.0)*r20*x9243);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9245=(gconst5*r10);
IkReal x9246=(gconst4*r11);
CheckValue<IkReal> x9247=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9246*x9246)+(x9245*x9245)+(((-2.0)*x9245*x9246)))),-1);
if(!x9247.valid){
continue;
}
CheckValue<IkReal> x9248 = IKatan2WithCheck(IkReal(r12),IkReal((x9246+(((-1.0)*x9245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9247.value)))+(x9248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9249=IKcos(j4);
IkReal x9250=IKsin(j4);
IkReal x9251=(gconst4*r11);
IkReal x9252=(gconst5*r10);
IkReal x9253=((1.0)*sj2);
IkReal x9254=(gconst5*r00);
IkReal x9255=(gconst5*r20);
IkReal x9256=((1.0)*x9249);
IkReal x9257=(gconst4*x9249);
IkReal x9258=((1.0)*x9250);
IkReal x9259=(gconst4*x9250);
evalcond[0]=(((r22*x9250))+((r21*x9257))+(((-1.0)*x9255*x9256)));
evalcond[1]=(((r02*x9250))+((r01*x9257))+(((-1.0)*x9254*x9256)));
evalcond[2]=((-1.0)+((r12*x9250))+((x9249*x9251))+(((-1.0)*x9252*x9256)));
evalcond[3]=(((x9250*x9251))+(((-1.0)*r12*x9256))+(((-1.0)*x9252*x9258)));
evalcond[4]=((((-1.0)*r22*x9256))+((r21*x9259))+(((-1.0)*x9255*x9258))+(((-1.0)*sj1*x9253))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9253))+((r01*x9259))+(((-1.0)*r02*x9256))+(((-1.0)*x9254*x9258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9260=((1.0)*gconst5);
CheckValue<IkReal> x9261=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9260)))),-1);
if(!x9261.valid){
continue;
}
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9260))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9261.value)))+(x9262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9263=IKcos(j4);
IkReal x9264=IKsin(j4);
IkReal x9265=(gconst4*r11);
IkReal x9266=(gconst5*r10);
IkReal x9267=((1.0)*sj2);
IkReal x9268=(gconst5*r00);
IkReal x9269=(gconst5*r20);
IkReal x9270=((1.0)*x9263);
IkReal x9271=(gconst4*x9263);
IkReal x9272=((1.0)*x9264);
IkReal x9273=(gconst4*x9264);
evalcond[0]=(((r22*x9264))+(((-1.0)*x9269*x9270))+((r21*x9271)));
evalcond[1]=(((r01*x9271))+(((-1.0)*x9268*x9270))+((r02*x9264)));
evalcond[2]=((-1.0)+((r12*x9264))+((x9263*x9265))+(((-1.0)*x9266*x9270)));
evalcond[3]=(((x9264*x9265))+(((-1.0)*x9266*x9272))+(((-1.0)*r12*x9270)));
evalcond[4]=((((-1.0)*r22*x9270))+(((-1.0)*x9269*x9272))+((cj1*cj2))+((r21*x9273))+(((-1.0)*sj1*x9267)));
evalcond[5]=((((-1.0)*cj1*x9267))+(((-1.0)*cj2*sj1))+((r01*x9273))+(((-1.0)*x9268*x9272))+(((-1.0)*r02*x9270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
CheckValue<IkReal> x9275=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9274.value)+(((1.5707963267949)*(x9275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9276=IKcos(j4);
IkReal x9277=IKsin(j4);
IkReal x9278=(gconst4*r11);
IkReal x9279=(gconst5*r10);
IkReal x9280=((1.0)*sj2);
IkReal x9281=(gconst5*r00);
IkReal x9282=(gconst5*r20);
IkReal x9283=((1.0)*x9276);
IkReal x9284=(gconst4*x9276);
IkReal x9285=((1.0)*x9277);
IkReal x9286=(gconst4*x9277);
evalcond[0]=((((-1.0)*x9282*x9283))+((r21*x9284))+((r22*x9277)));
evalcond[1]=(((r02*x9277))+((r01*x9284))+(((-1.0)*x9281*x9283)));
evalcond[2]=((-1.0)+((r12*x9277))+((x9276*x9278))+(((-1.0)*x9279*x9283)));
evalcond[3]=((((-1.0)*r12*x9283))+(((-1.0)*x9279*x9285))+((x9277*x9278)));
evalcond[4]=((((-1.0)*sj1*x9280))+(((-1.0)*x9282*x9285))+(((-1.0)*r22*x9283))+((r21*x9286))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x9280))+(((-1.0)*cj2*sj1))+((r01*x9286))+(((-1.0)*x9281*x9285))+(((-1.0)*r02*x9283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9287=((-1.0)*r21);
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal(x9287),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
IkReal x9288=((1.0)*(x9290.value));
IkReal x9289=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9288)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9288)));
IkReal gconst4=(x9287*x9289);
IkReal gconst5=((1.0)*r20*x9289);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9291=((-1.0)*r21);
CheckValue<IkReal> x9294 = IKatan2WithCheck(IkReal(x9291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9294.valid){
continue;
}
IkReal x9292=((1.0)*(x9294.value));
IkReal x9293=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9292)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9292)));
IkReal gconst4=(x9291*x9293);
IkReal gconst5=((1.0)*r20*x9293);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9295=((-1.0)*r21);
CheckValue<IkReal> x9298 = IKatan2WithCheck(IkReal(x9295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9298.valid){
continue;
}
IkReal x9296=((1.0)*(x9298.value));
IkReal x9297=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9296)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9296)));
IkReal gconst4=(x9295*x9297);
IkReal gconst5=((1.0)*r20*x9297);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9299=(gconst5*r10);
IkReal x9300=(gconst4*r11);
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9300*x9300)+(((-2.0)*x9299*x9300))+(x9299*x9299))),-1);
if(!x9301.valid){
continue;
}
CheckValue<IkReal> x9302 = IKatan2WithCheck(IkReal(r12),IkReal((x9300+(((-1.0)*x9299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9301.value)))+(x9302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9303=IKcos(j4);
IkReal x9304=IKsin(j4);
IkReal x9305=(gconst4*r21);
IkReal x9306=((1.0)*sj1);
IkReal x9307=(gconst4*r11);
IkReal x9308=(gconst4*r01);
IkReal x9309=((1.0)*x9304);
IkReal x9310=(gconst5*x9304);
IkReal x9311=((1.0)*gconst5*x9303);
evalcond[0]=((((-1.0)*r20*x9311))+((r22*x9304))+((x9303*x9305)));
evalcond[1]=(((r02*x9304))+(((-1.0)*r00*x9311))+((x9303*x9308)));
evalcond[2]=((((-1.0)*x9307*x9309))+((r12*x9303))+((r10*x9310)));
evalcond[3]=((-1.0)+((r12*x9304))+(((-1.0)*r10*x9311))+((x9303*x9307)));
evalcond[4]=(((r22*x9303))+(((-1.0)*x9305*x9309))+(((-1.0)*sj2*x9306))+((r20*x9310))+((cj1*cj2)));
evalcond[5]=(((r02*x9303))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9306))+((r00*x9310))+(((-1.0)*x9308*x9309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9312=((1.0)*gconst5);
CheckValue<IkReal> x9313 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9312))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9313.valid){
continue;
}
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9312)))),-1);
if(!x9314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9313.value)+(((1.5707963267949)*(x9314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9315=IKcos(j4);
IkReal x9316=IKsin(j4);
IkReal x9317=(gconst4*r21);
IkReal x9318=((1.0)*sj1);
IkReal x9319=(gconst4*r11);
IkReal x9320=(gconst4*r01);
IkReal x9321=((1.0)*x9316);
IkReal x9322=(gconst5*x9316);
IkReal x9323=((1.0)*gconst5*x9315);
evalcond[0]=(((x9315*x9317))+((r22*x9316))+(((-1.0)*r20*x9323)));
evalcond[1]=((((-1.0)*r00*x9323))+((r02*x9316))+((x9315*x9320)));
evalcond[2]=((((-1.0)*x9319*x9321))+((r10*x9322))+((r12*x9315)));
evalcond[3]=((-1.0)+((x9315*x9319))+((r12*x9316))+(((-1.0)*r10*x9323)));
evalcond[4]=(((r22*x9315))+((r20*x9322))+(((-1.0)*x9317*x9321))+(((-1.0)*sj2*x9318))+((cj1*cj2)));
evalcond[5]=(((r02*x9315))+((r00*x9322))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9318))+(((-1.0)*x9320*x9321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9324 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9324.valid){
continue;
}
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9324.value)+(((1.5707963267949)*(x9325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9326=IKcos(j4);
IkReal x9327=IKsin(j4);
IkReal x9328=(gconst4*r21);
IkReal x9329=((1.0)*sj1);
IkReal x9330=(gconst4*r11);
IkReal x9331=(gconst4*r01);
IkReal x9332=((1.0)*x9327);
IkReal x9333=(gconst5*x9327);
IkReal x9334=((1.0)*gconst5*x9326);
evalcond[0]=(((x9326*x9328))+((r22*x9327))+(((-1.0)*r20*x9334)));
evalcond[1]=((((-1.0)*r00*x9334))+((x9326*x9331))+((r02*x9327)));
evalcond[2]=(((r12*x9326))+(((-1.0)*x9330*x9332))+((r10*x9333)));
evalcond[3]=((-1.0)+((x9326*x9330))+((r12*x9327))+(((-1.0)*r10*x9334)));
evalcond[4]=((((-1.0)*sj2*x9329))+((r20*x9333))+(((-1.0)*x9328*x9332))+((r22*x9326))+((cj1*cj2)));
evalcond[5]=(((r00*x9333))+(((-1.0)*cj1*sj2))+((r02*x9326))+(((-1.0)*cj2*x9329))+(((-1.0)*x9331*x9332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9335=((-1.0)*r21);
CheckValue<IkReal> x9338 = IKatan2WithCheck(IkReal(x9335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9338.valid){
continue;
}
IkReal x9336=((1.0)*(x9338.value));
IkReal x9337=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9336)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9336)));
IkReal gconst4=(x9335*x9337);
IkReal gconst5=((1.0)*r20*x9337);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9339=((-1.0)*r21);
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(x9339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal x9340=((1.0)*(x9342.value));
IkReal x9341=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9340)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9340)));
IkReal gconst4=(x9339*x9341);
IkReal gconst5=((1.0)*r20*x9341);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9343=((-1.0)*r21);
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(x9343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
IkReal x9344=((1.0)*(x9346.value));
IkReal x9345=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9344)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9344)));
IkReal gconst4=(x9343*x9345);
IkReal gconst5=((1.0)*r20*x9345);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9347=(gconst5*r10);
IkReal x9348=(gconst4*r11);
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal(r12),IkReal((x9348+(((-1.0)*x9347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9348*x9348)+(x9347*x9347)+(((-2.0)*x9347*x9348)))),-1);
if(!x9350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9349.value)+(((1.5707963267949)*(x9350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9351=IKcos(j4);
IkReal x9352=IKsin(j4);
IkReal x9353=(gconst4*r21);
IkReal x9354=((1.0)*cj2);
IkReal x9355=(gconst4*r11);
IkReal x9356=(gconst4*r01);
IkReal x9357=((1.0)*x9352);
IkReal x9358=(gconst5*x9352);
IkReal x9359=((1.0)*gconst5*x9351);
evalcond[0]=(((x9351*x9353))+(((-1.0)*r20*x9359))+((r22*x9352)));
evalcond[1]=(((x9351*x9356))+(((-1.0)*r00*x9359))+((r02*x9352)));
evalcond[2]=(((r10*x9358))+(((-1.0)*x9355*x9357))+((r12*x9351)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9359))+((x9351*x9355))+((r12*x9352)));
evalcond[4]=(((r00*x9358))+((sj1*sj2))+(((-1.0)*x9356*x9357))+(((-1.0)*cj1*x9354))+((r02*x9351)));
evalcond[5]=((((-1.0)*sj1*x9354))+((r20*x9358))+(((-1.0)*cj1*sj2))+(((-1.0)*x9353*x9357))+((r22*x9351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9360=((1.0)*gconst5);
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9360)))),-1);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9360))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9361.value)))+(x9362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9363=IKcos(j4);
IkReal x9364=IKsin(j4);
IkReal x9365=(gconst4*r21);
IkReal x9366=((1.0)*cj2);
IkReal x9367=(gconst4*r11);
IkReal x9368=(gconst4*r01);
IkReal x9369=((1.0)*x9364);
IkReal x9370=(gconst5*x9364);
IkReal x9371=((1.0)*gconst5*x9363);
evalcond[0]=(((r22*x9364))+(((-1.0)*r20*x9371))+((x9363*x9365)));
evalcond[1]=(((r02*x9364))+((x9363*x9368))+(((-1.0)*r00*x9371)));
evalcond[2]=(((r12*x9363))+(((-1.0)*x9367*x9369))+((r10*x9370)));
evalcond[3]=((-1.0)+((r12*x9364))+((x9363*x9367))+(((-1.0)*r10*x9371)));
evalcond[4]=((((-1.0)*cj1*x9366))+((r02*x9363))+((sj1*sj2))+(((-1.0)*x9368*x9369))+((r00*x9370)));
evalcond[5]=((((-1.0)*x9365*x9369))+(((-1.0)*cj1*sj2))+((r22*x9363))+(((-1.0)*sj1*x9366))+((r20*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
CheckValue<IkReal> x9373=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9372.value)+(((1.5707963267949)*(x9373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9374=IKcos(j4);
IkReal x9375=IKsin(j4);
IkReal x9376=(gconst4*r21);
IkReal x9377=((1.0)*cj2);
IkReal x9378=(gconst4*r11);
IkReal x9379=(gconst4*r01);
IkReal x9380=((1.0)*x9375);
IkReal x9381=(gconst5*x9375);
IkReal x9382=((1.0)*gconst5*x9374);
evalcond[0]=(((x9374*x9376))+((r22*x9375))+(((-1.0)*r20*x9382)));
evalcond[1]=(((x9374*x9379))+((r02*x9375))+(((-1.0)*r00*x9382)));
evalcond[2]=(((r10*x9381))+(((-1.0)*x9378*x9380))+((r12*x9374)));
evalcond[3]=((-1.0)+((x9374*x9378))+((r12*x9375))+(((-1.0)*r10*x9382)));
evalcond[4]=((((-1.0)*cj1*x9377))+((r02*x9374))+((sj1*sj2))+(((-1.0)*x9379*x9380))+((r00*x9381)));
evalcond[5]=(((r22*x9374))+(((-1.0)*x9376*x9380))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9377))+((r20*x9381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9383=((-1.0)*r21);
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal(x9383),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
IkReal x9384=((1.0)*(x9386.value));
IkReal x9385=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9384)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9384)));
IkReal gconst4=(x9383*x9385);
IkReal gconst5=((1.0)*r20*x9385);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9387=((-1.0)*r21);
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(x9387),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
IkReal x9388=((1.0)*(x9390.value));
IkReal x9389=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9388)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9388)));
IkReal gconst4=(x9387*x9389);
IkReal gconst5=((1.0)*r20*x9389);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9391=((-1.0)*r21);
CheckValue<IkReal> x9394 = IKatan2WithCheck(IkReal(x9391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9394.valid){
continue;
}
IkReal x9392=((1.0)*(x9394.value));
IkReal x9393=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9392)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9392)));
IkReal gconst4=(x9391*x9393);
IkReal gconst5=((1.0)*r20*x9393);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9395=(gconst5*r10);
IkReal x9396=(gconst4*r11);
CheckValue<IkReal> x9397 = IKatan2WithCheck(IkReal(r12),IkReal((x9396+(((-1.0)*x9395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9397.valid){
continue;
}
CheckValue<IkReal> x9398=IKPowWithIntegerCheck(IKsign(((x9396*x9396)+(r12*r12)+(((-2.0)*x9395*x9396))+(x9395*x9395))),-1);
if(!x9398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9397.value)+(((1.5707963267949)*(x9398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9399=IKcos(j4);
IkReal x9400=IKsin(j4);
IkReal x9401=(gconst4*r11);
IkReal x9402=(gconst5*r10);
IkReal x9403=((1.0)*cj1);
IkReal x9404=(gconst5*r00);
IkReal x9405=(gconst5*r20);
IkReal x9406=((1.0)*x9399);
IkReal x9407=(gconst4*x9399);
IkReal x9408=((1.0)*x9400);
IkReal x9409=(gconst4*x9400);
evalcond[0]=(((r22*x9400))+(((-1.0)*x9405*x9406))+((r21*x9407)));
evalcond[1]=(((r01*x9407))+(((-1.0)*x9404*x9406))+((r02*x9400)));
evalcond[2]=((-1.0)+((r12*x9400))+((x9399*x9401))+(((-1.0)*x9402*x9406)));
evalcond[3]=(((x9400*x9401))+(((-1.0)*r12*x9406))+(((-1.0)*x9402*x9408)));
evalcond[4]=(((r01*x9409))+((sj1*sj2))+(((-1.0)*x9404*x9408))+(((-1.0)*r02*x9406))+(((-1.0)*cj2*x9403)));
evalcond[5]=((((-1.0)*r22*x9406))+(((-1.0)*sj2*x9403))+(((-1.0)*cj2*sj1))+(((-1.0)*x9405*x9408))+((r21*x9409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9410=((1.0)*gconst5);
CheckValue<IkReal> x9411 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9410))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9411.valid){
continue;
}
CheckValue<IkReal> x9412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9410)))),-1);
if(!x9412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9411.value)+(((1.5707963267949)*(x9412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9413=IKcos(j4);
IkReal x9414=IKsin(j4);
IkReal x9415=(gconst4*r11);
IkReal x9416=(gconst5*r10);
IkReal x9417=((1.0)*cj1);
IkReal x9418=(gconst5*r00);
IkReal x9419=(gconst5*r20);
IkReal x9420=((1.0)*x9413);
IkReal x9421=(gconst4*x9413);
IkReal x9422=((1.0)*x9414);
IkReal x9423=(gconst4*x9414);
evalcond[0]=(((r22*x9414))+((r21*x9421))+(((-1.0)*x9419*x9420)));
evalcond[1]=(((r01*x9421))+((r02*x9414))+(((-1.0)*x9418*x9420)));
evalcond[2]=((-1.0)+((x9413*x9415))+(((-1.0)*x9416*x9420))+((r12*x9414)));
evalcond[3]=((((-1.0)*x9416*x9422))+((x9414*x9415))+(((-1.0)*r12*x9420)));
evalcond[4]=(((r01*x9423))+(((-1.0)*cj2*x9417))+((sj1*sj2))+(((-1.0)*r02*x9420))+(((-1.0)*x9418*x9422)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9417))+((r21*x9423))+(((-1.0)*r22*x9420))+(((-1.0)*x9419*x9422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9424 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9424.valid){
continue;
}
CheckValue<IkReal> x9425=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9424.value)+(((1.5707963267949)*(x9425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9426=IKcos(j4);
IkReal x9427=IKsin(j4);
IkReal x9428=(gconst4*r11);
IkReal x9429=(gconst5*r10);
IkReal x9430=((1.0)*cj1);
IkReal x9431=(gconst5*r00);
IkReal x9432=(gconst5*r20);
IkReal x9433=((1.0)*x9426);
IkReal x9434=(gconst4*x9426);
IkReal x9435=((1.0)*x9427);
IkReal x9436=(gconst4*x9427);
evalcond[0]=((((-1.0)*x9432*x9433))+((r21*x9434))+((r22*x9427)));
evalcond[1]=((((-1.0)*x9431*x9433))+((r02*x9427))+((r01*x9434)));
evalcond[2]=((-1.0)+((r12*x9427))+((x9426*x9428))+(((-1.0)*x9429*x9433)));
evalcond[3]=(((x9427*x9428))+(((-1.0)*r12*x9433))+(((-1.0)*x9429*x9435)));
evalcond[4]=((((-1.0)*x9431*x9435))+((sj1*sj2))+(((-1.0)*r02*x9433))+(((-1.0)*cj2*x9430))+((r01*x9436)));
evalcond[5]=((((-1.0)*sj2*x9430))+(((-1.0)*cj2*sj1))+(((-1.0)*x9432*x9435))+((r21*x9436))+(((-1.0)*r22*x9433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9437=gconst4*gconst4;
IkReal x9438=gconst5*gconst5;
IkReal x9439=(r10*r21);
IkReal x9440=(gconst4*gconst5);
IkReal x9441=((1.0)*cj3);
IkReal x9442=(r11*r21);
IkReal x9443=((1.0)*r20*sj3);
IkReal x9444=((1.0)*r22*sj3);
CheckValue<IkReal> x9445 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9438*x9443))+(((-1.0)*r10*x9440*x9443))+((sj3*x9437*x9439))+((sj3*x9440*x9442)))),IkReal(((((-1.0)*gconst5*r11*x9444))+(((-1.0)*gconst4*r10*x9444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9445.valid){
continue;
}
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r11*r20*x9440*x9441))+((cj3*x9437*x9442))+(((-1.0)*x9439*x9440*x9441))+((cj3*r10*r20*x9438)))),-1);
if(!x9446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9445.value)+(((1.5707963267949)*(x9446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9447=IKcos(j4);
IkReal x9448=IKsin(j4);
IkReal x9449=(gconst5*sj3);
IkReal x9450=(sj1*sj2);
IkReal x9451=((1.0)*r10);
IkReal x9452=((1.0)*cj2);
IkReal x9453=(cj3*gconst4);
IkReal x9454=(cj3*gconst5);
IkReal x9455=(gconst4*sj3);
IkReal x9456=((1.0)*cj1*sj2);
IkReal x9457=(sj1*x9452);
IkReal x9458=(gconst4*x9447);
IkReal x9459=(gconst5*x9447);
IkReal x9460=((1.0)*x9448);
IkReal x9461=(cj3*x9447);
IkReal x9462=(x9448*x9455);
IkReal x9463=(x9448*x9454);
IkReal x9464=((1.0)*sj3*x9447);
IkReal x9465=(x9456+x9457);
evalcond[0]=((((-1.0)*r20*x9459))+((r22*x9448))+((r21*x9458)));
evalcond[1]=(((r01*x9458))+(((-1.0)*r00*x9459))+((r02*x9448)));
evalcond[2]=((-1.0)+(((-1.0)*x9451*x9459))+((r12*x9448))+((r11*x9458)));
evalcond[3]=(((r10*x9455))+(((-1.0)*r11*x9453*x9460))+((r10*x9463))+((r11*x9449))+((r12*x9461)));
evalcond[4]=(((r10*x9453))+(((-1.0)*x9448*x9449*x9451))+((r11*x9462))+(((-1.0)*r12*x9464))+((r11*x9454)));
evalcond[5]=(((r00*x9455))+((r01*x9449))+((r00*x9463))+(((-1.0)*r01*x9453*x9460))+x9450+((r02*x9461))+(((-1.0)*cj1*x9452)));
evalcond[6]=((((-1.0)*r20*x9449*x9460))+((r21*x9454))+((r21*x9462))+(((-1.0)*r22*x9464))+(((-1.0)*x9450))+((cj1*cj2))+((r20*x9453)));
evalcond[7]=((((-1.0)*x9465))+((r22*x9461))+((r21*x9449))+((r20*x9463))+((r20*x9455))+(((-1.0)*r21*x9453*x9460)));
evalcond[8]=((((-1.0)*x9465))+((r00*x9453))+((r01*x9454))+((r01*x9462))+(((-1.0)*r00*x9449*x9460))+(((-1.0)*r02*x9464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9466=((1.0)*gconst5);
CheckValue<IkReal> x9467 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9466)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9467.valid){
continue;
}
CheckValue<IkReal> x9468=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9466)))),-1);
if(!x9468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9467.value)+(((1.5707963267949)*(x9468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9469=IKcos(j4);
IkReal x9470=IKsin(j4);
IkReal x9471=(gconst5*sj3);
IkReal x9472=(sj1*sj2);
IkReal x9473=((1.0)*r10);
IkReal x9474=((1.0)*cj2);
IkReal x9475=(cj3*gconst4);
IkReal x9476=(cj3*gconst5);
IkReal x9477=(gconst4*sj3);
IkReal x9478=((1.0)*cj1*sj2);
IkReal x9479=(sj1*x9474);
IkReal x9480=(gconst4*x9469);
IkReal x9481=(gconst5*x9469);
IkReal x9482=((1.0)*x9470);
IkReal x9483=(cj3*x9469);
IkReal x9484=(x9470*x9477);
IkReal x9485=(x9470*x9476);
IkReal x9486=((1.0)*sj3*x9469);
IkReal x9487=(x9478+x9479);
evalcond[0]=(((r22*x9470))+((r21*x9480))+(((-1.0)*r20*x9481)));
evalcond[1]=(((r01*x9480))+(((-1.0)*r00*x9481))+((r02*x9470)));
evalcond[2]=((-1.0)+((r11*x9480))+(((-1.0)*x9473*x9481))+((r12*x9470)));
evalcond[3]=(((r10*x9477))+((r12*x9483))+((r11*x9471))+((r10*x9485))+(((-1.0)*r11*x9475*x9482)));
evalcond[4]=(((r10*x9475))+((r11*x9484))+((r11*x9476))+(((-1.0)*x9470*x9471*x9473))+(((-1.0)*r12*x9486)));
evalcond[5]=((((-1.0)*r01*x9475*x9482))+(((-1.0)*cj1*x9474))+((r00*x9485))+((r00*x9477))+((r01*x9471))+((r02*x9483))+x9472);
evalcond[6]=((((-1.0)*r20*x9471*x9482))+((r21*x9484))+((r21*x9476))+(((-1.0)*r22*x9486))+(((-1.0)*x9472))+((r20*x9475))+((cj1*cj2)));
evalcond[7]=((((-1.0)*r21*x9475*x9482))+(((-1.0)*x9487))+((r20*x9485))+((r21*x9471))+((r20*x9477))+((r22*x9483)));
evalcond[8]=((((-1.0)*r00*x9471*x9482))+((r01*x9484))+(((-1.0)*r02*x9486))+((r00*x9475))+(((-1.0)*x9487))+((r01*x9476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9488.value)+(((1.5707963267949)*(x9489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9490=IKcos(j4);
IkReal x9491=IKsin(j4);
IkReal x9492=(gconst5*sj3);
IkReal x9493=(sj1*sj2);
IkReal x9494=((1.0)*r10);
IkReal x9495=((1.0)*cj2);
IkReal x9496=(cj3*gconst4);
IkReal x9497=(cj3*gconst5);
IkReal x9498=(gconst4*sj3);
IkReal x9499=((1.0)*cj1*sj2);
IkReal x9500=(sj1*x9495);
IkReal x9501=(gconst4*x9490);
IkReal x9502=(gconst5*x9490);
IkReal x9503=((1.0)*x9491);
IkReal x9504=(cj3*x9490);
IkReal x9505=(x9491*x9498);
IkReal x9506=(x9491*x9497);
IkReal x9507=((1.0)*sj3*x9490);
IkReal x9508=(x9500+x9499);
evalcond[0]=((((-1.0)*r20*x9502))+((r21*x9501))+((r22*x9491)));
evalcond[1]=(((r02*x9491))+(((-1.0)*r00*x9502))+((r01*x9501)));
evalcond[2]=((-1.0)+((r12*x9491))+(((-1.0)*x9494*x9502))+((r11*x9501)));
evalcond[3]=((((-1.0)*r11*x9496*x9503))+((r10*x9506))+((r10*x9498))+((r12*x9504))+((r11*x9492)));
evalcond[4]=((((-1.0)*x9491*x9492*x9494))+((r10*x9496))+(((-1.0)*r12*x9507))+((r11*x9505))+((r11*x9497)));
evalcond[5]=((((-1.0)*cj1*x9495))+((r02*x9504))+((r00*x9498))+x9493+((r01*x9492))+((r00*x9506))+(((-1.0)*r01*x9496*x9503)));
evalcond[6]=(((r21*x9505))+(((-1.0)*r22*x9507))+(((-1.0)*r20*x9492*x9503))+((cj1*cj2))+(((-1.0)*x9493))+((r21*x9497))+((r20*x9496)));
evalcond[7]=((((-1.0)*r21*x9496*x9503))+((r20*x9506))+((r21*x9492))+(((-1.0)*x9508))+((r20*x9498))+((r22*x9504)));
evalcond[8]=((((-1.0)*r00*x9492*x9503))+((r00*x9496))+((r01*x9497))+(((-1.0)*r02*x9507))+(((-1.0)*x9508))+((r01*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9509=((-1.0)*r21);
CheckValue<IkReal> x9512 = IKatan2WithCheck(IkReal(x9509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9512.valid){
continue;
}
IkReal x9510=((1.0)*(x9512.value));
IkReal x9511=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9510)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9510)));
IkReal gconst4=(x9509*x9511);
IkReal gconst5=((1.0)*r20*x9511);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9513=((-1.0)*r21);
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(x9513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
IkReal x9514=((1.0)*(x9516.value));
IkReal x9515=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9514)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9514)));
IkReal gconst4=(x9513*x9515);
IkReal gconst5=((1.0)*r20*x9515);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9517=((-1.0)*r21);
CheckValue<IkReal> x9520 = IKatan2WithCheck(IkReal(x9517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9520.valid){
continue;
}
IkReal x9518=((1.0)*(x9520.value));
IkReal x9519=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9518)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9518)));
IkReal gconst4=(x9517*x9519);
IkReal gconst5=((1.0)*r20*x9519);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9521=((-1.0)*r21);
CheckValue<IkReal> x9524 = IKatan2WithCheck(IkReal(x9521),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9524.valid){
continue;
}
IkReal x9522=((1.0)*(x9524.value));
IkReal x9523=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9522)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9522)));
IkReal gconst4=(x9521*x9523);
IkReal gconst5=((1.0)*r20*x9523);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9525=((-1.0)*r21);
CheckValue<IkReal> x9528 = IKatan2WithCheck(IkReal(x9525),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9528.valid){
continue;
}
IkReal x9526=((1.0)*(x9528.value));
IkReal x9527=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9526)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9526)));
IkReal gconst4=(x9525*x9527);
IkReal gconst5=((1.0)*r20*x9527);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9529=((-1.0)*r21);
CheckValue<IkReal> x9532 = IKatan2WithCheck(IkReal(x9529),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9532.valid){
continue;
}
IkReal x9530=((1.0)*(x9532.value));
IkReal x9531=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9530)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9530)));
IkReal gconst4=(x9529*x9531);
IkReal gconst5=((1.0)*r20*x9531);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9533=(gconst4*r01);
IkReal x9534=(gconst5*r00);
CheckValue<IkReal> x9535=IKPowWithIntegerCheck(IKsign(((x9534*x9534)+(x9533*x9533)+(((-2.0)*x9533*x9534))+(r02*r02))),-1);
if(!x9535.valid){
continue;
}
CheckValue<IkReal> x9536 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9534))+x9533)),IKFAST_ATAN2_MAGTHRESH);
if(!x9536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9535.value)))+(x9536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9537=IKcos(j4);
IkReal x9538=IKsin(j4);
IkReal x9539=(gconst5*r10);
IkReal x9540=(gconst5*r00);
IkReal x9541=(gconst5*r20);
IkReal x9542=((1.0)*x9537);
IkReal x9543=(gconst4*x9538);
IkReal x9544=(gconst4*x9537);
IkReal x9545=((1.0)*x9538);
evalcond[0]=((((-1.0)*x9541*x9542))+((r22*x9538))+((r21*x9544)));
evalcond[1]=(((r11*x9544))+((r12*x9538))+(((-1.0)*x9539*x9542)));
evalcond[2]=((-1.0)+((r02*x9538))+(((-1.0)*x9540*x9542))+((r01*x9544)));
evalcond[3]=((((-1.0)*x9540*x9545))+(((-1.0)*r02*x9542))+((r01*x9543)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x9542))+((r11*x9543))+((cj1*sj2))+(((-1.0)*x9539*x9545)));
evalcond[5]=((((-1.0)*x9541*x9545))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x9542))+((r21*x9543))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9546=((1.0)*gconst5);
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9546)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
CheckValue<IkReal> x9548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9546))+(((-1.0)*gconst4*r20)))),-1);
if(!x9548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9547.value)+(((1.5707963267949)*(x9548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9549=IKcos(j4);
IkReal x9550=IKsin(j4);
IkReal x9551=(gconst5*r10);
IkReal x9552=(gconst5*r00);
IkReal x9553=(gconst5*r20);
IkReal x9554=((1.0)*x9549);
IkReal x9555=(gconst4*x9550);
IkReal x9556=(gconst4*x9549);
IkReal x9557=((1.0)*x9550);
evalcond[0]=((((-1.0)*x9553*x9554))+((r21*x9556))+((r22*x9550)));
evalcond[1]=(((r11*x9556))+(((-1.0)*x9551*x9554))+((r12*x9550)));
evalcond[2]=((-1.0)+((r02*x9550))+((r01*x9556))+(((-1.0)*x9552*x9554)));
evalcond[3]=((((-1.0)*r02*x9554))+((r01*x9555))+(((-1.0)*x9552*x9557)));
evalcond[4]=(((r11*x9555))+((cj2*sj1))+(((-1.0)*x9551*x9557))+((cj1*sj2))+(((-1.0)*r12*x9554)));
evalcond[5]=((((-1.0)*r22*x9554))+(((-1.0)*sj1*sj2))+(((-1.0)*x9553*x9557))+((cj1*cj2))+((r21*x9555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9558=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9558.valid){
continue;
}
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9558.value)))+(x9559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9560=IKcos(j4);
IkReal x9561=IKsin(j4);
IkReal x9562=(gconst5*r10);
IkReal x9563=(gconst5*r00);
IkReal x9564=(gconst5*r20);
IkReal x9565=((1.0)*x9560);
IkReal x9566=(gconst4*x9561);
IkReal x9567=(gconst4*x9560);
IkReal x9568=((1.0)*x9561);
evalcond[0]=(((r21*x9567))+((r22*x9561))+(((-1.0)*x9564*x9565)));
evalcond[1]=(((r12*x9561))+((r11*x9567))+(((-1.0)*x9562*x9565)));
evalcond[2]=((-1.0)+((r01*x9567))+(((-1.0)*x9563*x9565))+((r02*x9561)));
evalcond[3]=(((r01*x9566))+(((-1.0)*x9563*x9568))+(((-1.0)*r02*x9565)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x9566))+(((-1.0)*r12*x9565))+(((-1.0)*x9562*x9568)));
evalcond[5]=(((r21*x9566))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x9565))+((cj1*cj2))+(((-1.0)*x9564*x9568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9569=((-1.0)*r21);
CheckValue<IkReal> x9572 = IKatan2WithCheck(IkReal(x9569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9572.valid){
continue;
}
IkReal x9570=((1.0)*(x9572.value));
IkReal x9571=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9570)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9570)));
IkReal gconst4=(x9569*x9571);
IkReal gconst5=((1.0)*r20*x9571);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9573=((-1.0)*r21);
CheckValue<IkReal> x9576 = IKatan2WithCheck(IkReal(x9573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9576.valid){
continue;
}
IkReal x9574=((1.0)*(x9576.value));
IkReal x9575=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9574)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9574)));
IkReal gconst4=(x9573*x9575);
IkReal gconst5=((1.0)*r20*x9575);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9577=((-1.0)*r21);
CheckValue<IkReal> x9580 = IKatan2WithCheck(IkReal(x9577),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9580.valid){
continue;
}
IkReal x9578=((1.0)*(x9580.value));
IkReal x9579=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9578)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9578)));
IkReal gconst4=(x9577*x9579);
IkReal gconst5=((1.0)*r20*x9579);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9581=(gconst4*r01);
IkReal x9582=(gconst5*r00);
CheckValue<IkReal> x9583=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9581*x9582))+(x9582*x9582)+(x9581*x9581)+(r02*r02))),-1);
if(!x9583.valid){
continue;
}
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9582))+x9581)),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9583.value)))+(x9584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9585=IKcos(j4);
IkReal x9586=IKsin(j4);
IkReal x9587=(gconst4*r21);
IkReal x9588=(gconst4*r11);
IkReal x9589=(gconst4*r01);
IkReal x9590=((1.0)*x9586);
IkReal x9591=(gconst5*x9586);
IkReal x9592=((1.0)*gconst5*x9585);
evalcond[0]=((((-1.0)*r20*x9592))+((x9585*x9587))+((r22*x9586)));
evalcond[1]=(((x9585*x9588))+(((-1.0)*r10*x9592))+((r12*x9586)));
evalcond[2]=(((r00*x9591))+(((-1.0)*x9589*x9590))+((r02*x9585)));
evalcond[3]=((-1.0)+((x9585*x9589))+(((-1.0)*r00*x9592))+((r02*x9586)));
evalcond[4]=((((-1.0)*x9588*x9590))+((cj2*sj1))+((cj1*sj2))+((r10*x9591))+((r12*x9585)));
evalcond[5]=(((r20*x9591))+(((-1.0)*sj1*sj2))+(((-1.0)*x9587*x9590))+((r22*x9585))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9593=((1.0)*gconst5);
CheckValue<IkReal> x9594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9593))+(((-1.0)*gconst4*r20)))),-1);
if(!x9594.valid){
continue;
}
CheckValue<IkReal> x9595 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9593)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9594.value)))+(x9595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9596=IKcos(j4);
IkReal x9597=IKsin(j4);
IkReal x9598=(gconst4*r21);
IkReal x9599=(gconst4*r11);
IkReal x9600=(gconst4*r01);
IkReal x9601=((1.0)*x9597);
IkReal x9602=(gconst5*x9597);
IkReal x9603=((1.0)*gconst5*x9596);
evalcond[0]=((((-1.0)*r20*x9603))+((x9596*x9598))+((r22*x9597)));
evalcond[1]=(((x9596*x9599))+((r12*x9597))+(((-1.0)*r10*x9603)));
evalcond[2]=(((r00*x9602))+(((-1.0)*x9600*x9601))+((r02*x9596)));
evalcond[3]=((-1.0)+((x9596*x9600))+((r02*x9597))+(((-1.0)*r00*x9603)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x9602))+((r12*x9596))+(((-1.0)*x9599*x9601)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x9602))+((r22*x9596))+(((-1.0)*x9598*x9601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9604=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9604.valid){
continue;
}
CheckValue<IkReal> x9605 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9604.value)))+(x9605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9606=IKcos(j4);
IkReal x9607=IKsin(j4);
IkReal x9608=(gconst4*r21);
IkReal x9609=(gconst4*r11);
IkReal x9610=(gconst4*r01);
IkReal x9611=((1.0)*x9607);
IkReal x9612=(gconst5*x9607);
IkReal x9613=((1.0)*gconst5*x9606);
evalcond[0]=(((x9606*x9608))+((r22*x9607))+(((-1.0)*r20*x9613)));
evalcond[1]=(((r12*x9607))+((x9606*x9609))+(((-1.0)*r10*x9613)));
evalcond[2]=(((r00*x9612))+(((-1.0)*x9610*x9611))+((r02*x9606)));
evalcond[3]=((-1.0)+((x9606*x9610))+(((-1.0)*r00*x9613))+((r02*x9607)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9609*x9611))+((r10*x9612))+((cj1*sj2))+((r12*x9606)));
evalcond[5]=(((r20*x9612))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x9606))+(((-1.0)*x9608*x9611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9614=((-1.0)*r21);
CheckValue<IkReal> x9617 = IKatan2WithCheck(IkReal(x9614),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9617.valid){
continue;
}
IkReal x9615=((1.0)*(x9617.value));
IkReal x9616=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9615)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9615)));
IkReal gconst4=(x9614*x9616);
IkReal gconst5=((1.0)*r20*x9616);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9618=((-1.0)*r21);
CheckValue<IkReal> x9621 = IKatan2WithCheck(IkReal(x9618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9621.valid){
continue;
}
IkReal x9619=((1.0)*(x9621.value));
IkReal x9620=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9619)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9619)));
IkReal gconst4=(x9618*x9620);
IkReal gconst5=((1.0)*r20*x9620);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9622=((-1.0)*r21);
CheckValue<IkReal> x9625 = IKatan2WithCheck(IkReal(x9622),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9625.valid){
continue;
}
IkReal x9623=((1.0)*(x9625.value));
IkReal x9624=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9623)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9623)));
IkReal gconst4=(x9622*x9624);
IkReal gconst5=((1.0)*r20*x9624);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9626=(gconst4*r01);
IkReal x9627=(gconst5*r00);
CheckValue<IkReal> x9628 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9627))+x9626)),IKFAST_ATAN2_MAGTHRESH);
if(!x9628.valid){
continue;
}
CheckValue<IkReal> x9629=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9626*x9627))+(x9626*x9626)+(x9627*x9627)+(r02*r02))),-1);
if(!x9629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9628.value)+(((1.5707963267949)*(x9629.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9630=IKcos(j4);
IkReal x9631=IKsin(j4);
IkReal x9632=(gconst4*r21);
IkReal x9633=((1.0)*sj1);
IkReal x9634=(gconst4*r11);
IkReal x9635=(gconst4*r01);
IkReal x9636=((1.0)*x9631);
IkReal x9637=(gconst5*x9631);
IkReal x9638=((1.0)*gconst5*x9630);
evalcond[0]=(((x9630*x9632))+((r22*x9631))+(((-1.0)*r20*x9638)));
evalcond[1]=((((-1.0)*r10*x9638))+((x9630*x9634))+((r12*x9631)));
evalcond[2]=((((-1.0)*x9635*x9636))+((r00*x9637))+((r02*x9630)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9638))+((x9630*x9635))+((r02*x9631)));
evalcond[4]=(((r10*x9637))+((r12*x9630))+((cj1*cj2))+(((-1.0)*sj2*x9633))+(((-1.0)*x9634*x9636)));
evalcond[5]=(((r20*x9637))+(((-1.0)*cj1*sj2))+((r22*x9630))+(((-1.0)*cj2*x9633))+(((-1.0)*x9632*x9636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9639=((1.0)*gconst5);
CheckValue<IkReal> x9640 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9639))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9639))+(((-1.0)*gconst4*r20)))),-1);
if(!x9641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9640.value)+(((1.5707963267949)*(x9641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9642=IKcos(j4);
IkReal x9643=IKsin(j4);
IkReal x9644=(gconst4*r21);
IkReal x9645=((1.0)*sj1);
IkReal x9646=(gconst4*r11);
IkReal x9647=(gconst4*r01);
IkReal x9648=((1.0)*x9643);
IkReal x9649=(gconst5*x9643);
IkReal x9650=((1.0)*gconst5*x9642);
evalcond[0]=(((x9642*x9644))+((r22*x9643))+(((-1.0)*r20*x9650)));
evalcond[1]=(((x9642*x9646))+(((-1.0)*r10*x9650))+((r12*x9643)));
evalcond[2]=(((r02*x9642))+(((-1.0)*x9647*x9648))+((r00*x9649)));
evalcond[3]=((-1.0)+((x9642*x9647))+((r02*x9643))+(((-1.0)*r00*x9650)));
evalcond[4]=((((-1.0)*sj2*x9645))+(((-1.0)*x9646*x9648))+((r10*x9649))+((cj1*cj2))+((r12*x9642)));
evalcond[5]=(((r22*x9642))+(((-1.0)*cj2*x9645))+(((-1.0)*cj1*sj2))+((r20*x9649))+(((-1.0)*x9644*x9648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9651.valid){
continue;
}
CheckValue<IkReal> x9652 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9651.value)))+(x9652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9653=IKcos(j4);
IkReal x9654=IKsin(j4);
IkReal x9655=(gconst4*r21);
IkReal x9656=((1.0)*sj1);
IkReal x9657=(gconst4*r11);
IkReal x9658=(gconst4*r01);
IkReal x9659=((1.0)*x9654);
IkReal x9660=(gconst5*x9654);
IkReal x9661=((1.0)*gconst5*x9653);
evalcond[0]=((((-1.0)*r20*x9661))+((r22*x9654))+((x9653*x9655)));
evalcond[1]=((((-1.0)*r10*x9661))+((r12*x9654))+((x9653*x9657)));
evalcond[2]=(((r00*x9660))+(((-1.0)*x9658*x9659))+((r02*x9653)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9661))+((r02*x9654))+((x9653*x9658)));
evalcond[4]=((((-1.0)*sj2*x9656))+((r12*x9653))+(((-1.0)*x9657*x9659))+((r10*x9660))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9655*x9659))+(((-1.0)*cj2*x9656))+((r20*x9660))+(((-1.0)*cj1*sj2))+((r22*x9653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9662=((-1.0)*r21);
CheckValue<IkReal> x9665 = IKatan2WithCheck(IkReal(x9662),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9665.valid){
continue;
}
IkReal x9663=((1.0)*(x9665.value));
IkReal x9664=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9663)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9663)));
IkReal gconst4=(x9662*x9664);
IkReal gconst5=((1.0)*r20*x9664);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9666=((-1.0)*r21);
CheckValue<IkReal> x9669 = IKatan2WithCheck(IkReal(x9666),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9669.valid){
continue;
}
IkReal x9667=((1.0)*(x9669.value));
IkReal x9668=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9667)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9667)));
IkReal gconst4=(x9666*x9668);
IkReal gconst5=((1.0)*r20*x9668);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9670=((-1.0)*r21);
CheckValue<IkReal> x9673 = IKatan2WithCheck(IkReal(x9670),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9673.valid){
continue;
}
IkReal x9671=((1.0)*(x9673.value));
IkReal x9672=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9671)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9671)));
IkReal gconst4=(x9670*x9672);
IkReal gconst5=((1.0)*r20*x9672);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9674=(gconst4*r01);
IkReal x9675=(gconst5*r00);
CheckValue<IkReal> x9676=IKPowWithIntegerCheck(IKsign(((x9674*x9674)+(((-2.0)*x9674*x9675))+(x9675*x9675)+(r02*r02))),-1);
if(!x9676.valid){
continue;
}
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal(r02),IkReal((x9674+(((-1.0)*x9675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9676.value)))+(x9677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9678=IKcos(j4);
IkReal x9679=IKsin(j4);
IkReal x9680=(gconst4*r11);
IkReal x9681=(gconst5*r10);
IkReal x9682=((1.0)*sj2);
IkReal x9683=(gconst5*r00);
IkReal x9684=(gconst5*r20);
IkReal x9685=((1.0)*x9678);
IkReal x9686=(gconst4*x9678);
IkReal x9687=((1.0)*x9679);
IkReal x9688=(gconst4*x9679);
evalcond[0]=(((r21*x9686))+(((-1.0)*x9684*x9685))+((r22*x9679)));
evalcond[1]=(((r12*x9679))+((x9678*x9680))+(((-1.0)*x9681*x9685)));
evalcond[2]=((-1.0)+((r01*x9686))+((r02*x9679))+(((-1.0)*x9683*x9685)));
evalcond[3]=((((-1.0)*r02*x9685))+((r01*x9688))+(((-1.0)*x9683*x9687)));
evalcond[4]=(((x9679*x9680))+(((-1.0)*r12*x9685))+(((-1.0)*sj1*x9682))+((cj1*cj2))+(((-1.0)*x9681*x9687)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9688))+(((-1.0)*cj1*x9682))+(((-1.0)*r22*x9685))+(((-1.0)*x9684*x9687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9689=((1.0)*gconst5);
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9689))+(((-1.0)*gconst4*r20)))),-1);
if(!x9690.valid){
continue;
}
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9689))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9690.value)))+(x9691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9692=IKcos(j4);
IkReal x9693=IKsin(j4);
IkReal x9694=(gconst4*r11);
IkReal x9695=(gconst5*r10);
IkReal x9696=((1.0)*sj2);
IkReal x9697=(gconst5*r00);
IkReal x9698=(gconst5*r20);
IkReal x9699=((1.0)*x9692);
IkReal x9700=(gconst4*x9692);
IkReal x9701=((1.0)*x9693);
IkReal x9702=(gconst4*x9693);
evalcond[0]=(((r22*x9693))+((r21*x9700))+(((-1.0)*x9698*x9699)));
evalcond[1]=(((r12*x9693))+((x9692*x9694))+(((-1.0)*x9695*x9699)));
evalcond[2]=((-1.0)+(((-1.0)*x9697*x9699))+((r02*x9693))+((r01*x9700)));
evalcond[3]=((((-1.0)*r02*x9699))+((r01*x9702))+(((-1.0)*x9697*x9701)));
evalcond[4]=((((-1.0)*r12*x9699))+(((-1.0)*sj1*x9696))+(((-1.0)*x9695*x9701))+((cj1*cj2))+((x9693*x9694)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9696))+((r21*x9702))+(((-1.0)*r22*x9699))+(((-1.0)*x9698*x9701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9703=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9703.valid){
continue;
}
CheckValue<IkReal> x9704 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9703.value)))+(x9704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9705=IKcos(j4);
IkReal x9706=IKsin(j4);
IkReal x9707=(gconst4*r11);
IkReal x9708=(gconst5*r10);
IkReal x9709=((1.0)*sj2);
IkReal x9710=(gconst5*r00);
IkReal x9711=(gconst5*r20);
IkReal x9712=((1.0)*x9705);
IkReal x9713=(gconst4*x9705);
IkReal x9714=((1.0)*x9706);
IkReal x9715=(gconst4*x9706);
evalcond[0]=(((r21*x9713))+(((-1.0)*x9711*x9712))+((r22*x9706)));
evalcond[1]=(((r12*x9706))+((x9705*x9707))+(((-1.0)*x9708*x9712)));
evalcond[2]=((-1.0)+((r02*x9706))+(((-1.0)*x9710*x9712))+((r01*x9713)));
evalcond[3]=((((-1.0)*r02*x9712))+(((-1.0)*x9710*x9714))+((r01*x9715)));
evalcond[4]=(((x9706*x9707))+(((-1.0)*sj1*x9709))+(((-1.0)*r12*x9712))+((cj1*cj2))+(((-1.0)*x9708*x9714)));
evalcond[5]=((((-1.0)*cj1*x9709))+(((-1.0)*cj2*sj1))+((r21*x9715))+(((-1.0)*r22*x9712))+(((-1.0)*x9711*x9714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9716=((-1.0)*r21);
IkReal x9717=((-1.0)*r20);
CheckValue<IkReal> x9719 = IKatan2WithCheck(IkReal(x9716),IkReal(x9717),IKFAST_ATAN2_MAGTHRESH);
if(!x9719.valid){
continue;
}
IkReal x9718=((1.0)*(x9719.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9718)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9717);
rxp0_2=(py*r00);
rxp1_0=(py*x9716);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9718)));
IkReal gconst4=x9716;
IkReal gconst5=((1.0)*r20);
IkReal x9720=((1.0)*r01*r21);
IkReal x9721=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*sj3*x9721))+(((-1.0)*sj3*x9720)));
j4eval[1]=((((-1.0)*x9721))+(((-1.0)*x9720)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9722=((-1.0)*r21);
IkReal x9723=((-1.0)*r20);
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(x9722),IkReal(x9723),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
IkReal x9724=((1.0)*(x9725.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9724)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9723);
rxp0_2=(py*r00);
rxp1_0=(py*x9722);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9724)));
IkReal gconst4=x9722;
IkReal gconst5=((1.0)*r20);
IkReal x9726=((1.0)*r01*r21);
IkReal x9727=((1.0)*r00*r20);
j4eval[0]=(((cj3*x9726))+((cj3*x9727)));
j4eval[1]=((((-1.0)*x9726))+(((-1.0)*x9727)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9728=((-1.0)*r21);
IkReal x9729=((-1.0)*r20);
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal(x9728),IkReal(x9729),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
IkReal x9730=((1.0)*(x9731.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9730)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9729);
rxp0_2=(py*r00);
rxp1_0=(py*x9728);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9730)));
IkReal gconst4=x9728;
IkReal gconst5=((1.0)*r20);
IkReal x9732=((1.0)*sj3);
j4eval[0]=((((-1.0)*r00*r20*x9732))+(((-1.0)*r01*r21*x9732)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9733=((1.0)*r00);
CheckValue<IkReal> x9734=IKPowWithIntegerCheck((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x9733))),-1);
if(!x9734.valid){
continue;
}
CheckValue<IkReal> x9735=IKPowWithIntegerCheck(r12,-1);
if(!x9735.valid){
continue;
}
CheckValue<IkReal> x9736=IKPowWithIntegerCheck(sj3,-1);
if(!x9736.valid){
continue;
}
if( IKabs(((x9734.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*gconst4*x9733)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9735.value)*(x9736.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9734.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*gconst4*x9733))))))+IKsqr(((x9735.value)*(x9736.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9734.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*gconst4*x9733))))), ((x9735.value)*(x9736.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9737=IKcos(j4);
IkReal x9738=IKsin(j4);
IkReal x9739=(cj1*cj2);
IkReal x9740=(gconst4*r21);
IkReal x9741=(gconst4*r01);
IkReal x9742=((1.0)*gconst5);
IkReal x9743=((1.0)*sj1);
IkReal x9744=(cj1*sj2);
IkReal x9745=(gconst5*sj3);
IkReal x9746=(cj3*gconst5);
IkReal x9747=(gconst4*r00);
IkReal x9748=(gconst4*r20);
IkReal x9749=(sj2*x9743);
IkReal x9750=(sj3*x9738);
IkReal x9751=(r12*x9737);
IkReal x9752=(x9738*x9746);
IkReal x9753=((1.0)*cj3*x9738);
evalcond[0]=(r12*x9738);
evalcond[1]=(((x9737*x9740))+(((-1.0)*r20*x9737*x9742)));
evalcond[2]=(((cj2*sj1))+x9744+(((-1.0)*sj3*x9751)));
evalcond[3]=(x9739+((cj3*x9751))+(((-1.0)*x9749)));
evalcond[4]=((-1.0)+((x9737*x9741))+(((-1.0)*r00*x9737*x9742)));
evalcond[5]=(((x9741*x9750))+((r01*x9746))+((cj3*x9747))+(((-1.0)*r00*x9742*x9750)));
evalcond[6]=(((r00*x9752))+((sj3*x9747))+(((-1.0)*x9741*x9753))+((r01*x9745)));
evalcond[7]=(((x9740*x9750))+((r21*x9746))+(((-1.0)*r20*x9742*x9750))+x9739+(((-1.0)*x9749))+((cj3*x9748)));
evalcond[8]=(((r21*x9745))+(((-1.0)*x9744))+(((-1.0)*x9740*x9753))+((sj3*x9748))+(((-1.0)*cj2*x9743))+((r20*x9752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9754=((1.0)*r01);
IkReal x9755=(gconst5*r00);
CheckValue<IkReal> x9756=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst4*x9754))+((cj3*x9755))),-1);
if(!x9756.valid){
continue;
}
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(((((-1.0)*x9755))+((gconst4*r01))),-1);
if(!x9757.valid){
continue;
}
if( IKabs(((x9756.value)*(((((-1.0)*gconst5*sj3*x9754))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9757.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9756.value)*(((((-1.0)*gconst5*sj3*x9754))+(((-1.0)*gconst4*r00*sj3))))))+IKsqr(x9757.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9756.value)*(((((-1.0)*gconst5*sj3*x9754))+(((-1.0)*gconst4*r00*sj3))))), x9757.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9758=IKcos(j4);
IkReal x9759=IKsin(j4);
IkReal x9760=(cj1*cj2);
IkReal x9761=(gconst4*r21);
IkReal x9762=(gconst4*r01);
IkReal x9763=((1.0)*gconst5);
IkReal x9764=((1.0)*sj1);
IkReal x9765=(cj1*sj2);
IkReal x9766=(gconst5*sj3);
IkReal x9767=(cj3*gconst5);
IkReal x9768=(gconst4*r00);
IkReal x9769=(gconst4*r20);
IkReal x9770=(sj2*x9764);
IkReal x9771=(sj3*x9759);
IkReal x9772=(r12*x9758);
IkReal x9773=(x9759*x9767);
IkReal x9774=((1.0)*cj3*x9759);
evalcond[0]=(r12*x9759);
evalcond[1]=(((x9758*x9761))+(((-1.0)*r20*x9758*x9763)));
evalcond[2]=(((cj2*sj1))+x9765+(((-1.0)*sj3*x9772)));
evalcond[3]=(x9760+((cj3*x9772))+(((-1.0)*x9770)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x9758*x9763))+((x9758*x9762)));
evalcond[5]=(((r01*x9767))+((x9762*x9771))+((cj3*x9768))+(((-1.0)*r00*x9763*x9771)));
evalcond[6]=(((r00*x9773))+((r01*x9766))+((sj3*x9768))+(((-1.0)*x9762*x9774)));
evalcond[7]=((((-1.0)*r20*x9763*x9771))+((cj3*x9769))+x9760+((r21*x9767))+(((-1.0)*x9770))+((x9761*x9771)));
evalcond[8]=((((-1.0)*x9765))+((r21*x9766))+((r20*x9773))+((sj3*x9769))+(((-1.0)*cj2*x9764))+(((-1.0)*x9761*x9774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9775=((1.0)*gconst5);
IkReal x9776=(gconst4*r01);
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(((((-1.0)*r00*sj3*x9775))+((sj3*x9776))),-1);
if(!x9777.valid){
continue;
}
CheckValue<IkReal> x9778=IKPowWithIntegerCheck((x9776+(((-1.0)*r00*x9775))),-1);
if(!x9778.valid){
continue;
}
if( IKabs(((x9777.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9775)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9778.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9777.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9775))))))+IKsqr(x9778.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9777.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9775))))), x9778.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9779=IKcos(j4);
IkReal x9780=IKsin(j4);
IkReal x9781=(cj1*cj2);
IkReal x9782=(gconst4*r21);
IkReal x9783=(gconst4*r01);
IkReal x9784=((1.0)*gconst5);
IkReal x9785=((1.0)*sj1);
IkReal x9786=(cj1*sj2);
IkReal x9787=(gconst5*sj3);
IkReal x9788=(cj3*gconst5);
IkReal x9789=(gconst4*r00);
IkReal x9790=(gconst4*r20);
IkReal x9791=(sj2*x9785);
IkReal x9792=(sj3*x9780);
IkReal x9793=(r12*x9779);
IkReal x9794=(x9780*x9788);
IkReal x9795=((1.0)*cj3*x9780);
evalcond[0]=(r12*x9780);
evalcond[1]=((((-1.0)*r20*x9779*x9784))+((x9779*x9782)));
evalcond[2]=(((cj2*sj1))+x9786+(((-1.0)*sj3*x9793)));
evalcond[3]=(((cj3*x9793))+(((-1.0)*x9791))+x9781);
evalcond[4]=((-1.0)+(((-1.0)*r00*x9779*x9784))+((x9779*x9783)));
evalcond[5]=(((r01*x9788))+((x9783*x9792))+((cj3*x9789))+(((-1.0)*r00*x9784*x9792)));
evalcond[6]=(((r01*x9787))+((r00*x9794))+((sj3*x9789))+(((-1.0)*x9783*x9795)));
evalcond[7]=(((cj3*x9790))+((r21*x9788))+(((-1.0)*r20*x9784*x9792))+(((-1.0)*x9791))+((x9782*x9792))+x9781);
evalcond[8]=((((-1.0)*x9782*x9795))+((sj3*x9790))+((r21*x9787))+((r20*x9794))+(((-1.0)*cj2*x9785))+(((-1.0)*x9786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9796=gconst4*gconst4;
IkReal x9797=gconst5*gconst5;
IkReal x9798=(gconst4*r00);
IkReal x9799=(gconst5*r01);
IkReal x9800=((1.0)*r20);
IkReal x9801=((1.0)*r22*sj3);
IkReal x9802=(r21*x9796);
CheckValue<IkReal> x9803 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj3*x9797*x9800))+((gconst4*r21*sj3*x9799))+(((-1.0)*gconst5*sj3*x9798*x9800))+((r00*sj3*x9802)))),IkReal(((((-1.0)*x9798*x9801))+(((-1.0)*x9799*x9801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9803.valid){
continue;
}
CheckValue<IkReal> x9804=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst4*x9799*x9800))+(((-1.0)*cj3*gconst5*r21*x9798))+((cj3*r00*r20*x9797))+((cj3*r02*r22))+((cj3*r01*x9802)))),-1);
if(!x9804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9803.value)+(((1.5707963267949)*(x9804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9805=IKcos(j4);
IkReal x9806=IKsin(j4);
IkReal x9807=(cj1*cj2);
IkReal x9808=(gconst5*sj3);
IkReal x9809=((1.0)*r10);
IkReal x9810=((1.0)*sj1);
IkReal x9811=(cj1*sj2);
IkReal x9812=(cj3*gconst4);
IkReal x9813=(gconst4*sj3);
IkReal x9814=(cj3*gconst5);
IkReal x9815=(sj2*x9810);
IkReal x9816=(gconst4*x9805);
IkReal x9817=(gconst5*x9805);
IkReal x9818=((1.0)*x9806);
IkReal x9819=(cj3*x9805);
IkReal x9820=(x9806*x9813);
IkReal x9821=(x9806*x9814);
IkReal x9822=((1.0)*sj3*x9805);
evalcond[0]=((((-1.0)*r20*x9817))+((r21*x9816))+((r22*x9806)));
evalcond[1]=((((-1.0)*x9809*x9817))+((r12*x9806))+((r11*x9816)));
evalcond[2]=((-1.0)+((r02*x9806))+(((-1.0)*r00*x9817))+((r01*x9816)));
evalcond[3]=((((-1.0)*r01*x9812*x9818))+((r00*x9821))+((r02*x9819))+((r01*x9808))+((r00*x9813)));
evalcond[4]=((((-1.0)*r02*x9822))+(((-1.0)*r00*x9808*x9818))+((r01*x9820))+((r00*x9812))+((r01*x9814)));
evalcond[5]=(((cj2*sj1))+((r11*x9820))+((r11*x9814))+(((-1.0)*r12*x9822))+(((-1.0)*x9806*x9808*x9809))+x9811+((r10*x9812)));
evalcond[6]=((((-1.0)*x9815))+((r12*x9819))+(((-1.0)*r11*x9812*x9818))+((r11*x9808))+x9807+((r10*x9821))+((r10*x9813)));
evalcond[7]=((((-1.0)*r20*x9808*x9818))+((r21*x9814))+(((-1.0)*x9815))+((r21*x9820))+x9807+(((-1.0)*r22*x9822))+((r20*x9812)));
evalcond[8]=(((r20*x9821))+((r21*x9808))+(((-1.0)*x9811))+(((-1.0)*r21*x9812*x9818))+((r22*x9819))+((r20*x9813))+(((-1.0)*cj2*x9810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9823=((1.0)*gconst5);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9823))+(((-1.0)*gconst4*r20)))),-1);
if(!x9824.valid){
continue;
}
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9823)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9824.value)))+(x9825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9826=IKcos(j4);
IkReal x9827=IKsin(j4);
IkReal x9828=(cj1*cj2);
IkReal x9829=(gconst5*sj3);
IkReal x9830=((1.0)*r10);
IkReal x9831=((1.0)*sj1);
IkReal x9832=(cj1*sj2);
IkReal x9833=(cj3*gconst4);
IkReal x9834=(gconst4*sj3);
IkReal x9835=(cj3*gconst5);
IkReal x9836=(sj2*x9831);
IkReal x9837=(gconst4*x9826);
IkReal x9838=(gconst5*x9826);
IkReal x9839=((1.0)*x9827);
IkReal x9840=(cj3*x9826);
IkReal x9841=(x9827*x9834);
IkReal x9842=(x9827*x9835);
IkReal x9843=((1.0)*sj3*x9826);
evalcond[0]=(((r21*x9837))+((r22*x9827))+(((-1.0)*r20*x9838)));
evalcond[1]=(((r11*x9837))+(((-1.0)*x9830*x9838))+((r12*x9827)));
evalcond[2]=((-1.0)+((r01*x9837))+(((-1.0)*r00*x9838))+((r02*x9827)));
evalcond[3]=(((r00*x9834))+((r02*x9840))+(((-1.0)*r01*x9833*x9839))+((r01*x9829))+((r00*x9842)));
evalcond[4]=(((r00*x9833))+((r01*x9835))+(((-1.0)*r02*x9843))+((r01*x9841))+(((-1.0)*r00*x9829*x9839)));
evalcond[5]=(((r11*x9841))+((cj2*sj1))+((r11*x9835))+(((-1.0)*r12*x9843))+((r10*x9833))+(((-1.0)*x9827*x9829*x9830))+x9832);
evalcond[6]=((((-1.0)*x9836))+((r10*x9842))+((r10*x9834))+((r11*x9829))+(((-1.0)*r11*x9833*x9839))+((r12*x9840))+x9828);
evalcond[7]=((((-1.0)*x9836))+((r21*x9835))+(((-1.0)*r20*x9829*x9839))+(((-1.0)*r22*x9843))+((r20*x9833))+x9828+((r21*x9841)));
evalcond[8]=((((-1.0)*x9832))+((r20*x9842))+((r21*x9829))+(((-1.0)*r21*x9833*x9839))+((r20*x9834))+(((-1.0)*cj2*x9831))+((r22*x9840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9844=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9844.valid){
continue;
}
CheckValue<IkReal> x9845 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9844.value)))+(x9845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9846=IKcos(j4);
IkReal x9847=IKsin(j4);
IkReal x9848=(cj1*cj2);
IkReal x9849=(gconst5*sj3);
IkReal x9850=((1.0)*r10);
IkReal x9851=((1.0)*sj1);
IkReal x9852=(cj1*sj2);
IkReal x9853=(cj3*gconst4);
IkReal x9854=(gconst4*sj3);
IkReal x9855=(cj3*gconst5);
IkReal x9856=(sj2*x9851);
IkReal x9857=(gconst4*x9846);
IkReal x9858=(gconst5*x9846);
IkReal x9859=((1.0)*x9847);
IkReal x9860=(cj3*x9846);
IkReal x9861=(x9847*x9854);
IkReal x9862=(x9847*x9855);
IkReal x9863=((1.0)*sj3*x9846);
evalcond[0]=(((r21*x9857))+(((-1.0)*r20*x9858))+((r22*x9847)));
evalcond[1]=(((r11*x9857))+(((-1.0)*x9850*x9858))+((r12*x9847)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9858))+((r02*x9847))+((r01*x9857)));
evalcond[3]=(((r00*x9862))+((r02*x9860))+((r01*x9849))+((r00*x9854))+(((-1.0)*r01*x9853*x9859)));
evalcond[4]=(((r01*x9861))+((r00*x9853))+((r01*x9855))+(((-1.0)*r02*x9863))+(((-1.0)*r00*x9849*x9859)));
evalcond[5]=(((r10*x9853))+((r11*x9855))+((cj2*sj1))+(((-1.0)*r12*x9863))+((r11*x9861))+(((-1.0)*x9847*x9849*x9850))+x9852);
evalcond[6]=(((r10*x9854))+(((-1.0)*r11*x9853*x9859))+((r11*x9849))+(((-1.0)*x9856))+((r12*x9860))+((r10*x9862))+x9848);
evalcond[7]=(((r21*x9855))+(((-1.0)*r22*x9863))+((r20*x9853))+(((-1.0)*x9856))+(((-1.0)*r20*x9849*x9859))+((r21*x9861))+x9848);
evalcond[8]=((((-1.0)*x9852))+((r22*x9860))+((r20*x9854))+(((-1.0)*cj2*x9851))+((r20*x9862))+((r21*x9849))+(((-1.0)*r21*x9853*x9859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9864=((-1.0)*r21);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(x9864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
IkReal x9865=((1.0)*(x9867.value));
IkReal x9866=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9865)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9865)));
IkReal gconst4=(x9864*x9866);
IkReal gconst5=((1.0)*r20*x9866);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9868=((-1.0)*r21);
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(x9868),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
IkReal x9869=((1.0)*(x9871.value));
IkReal x9870=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9869)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9869)));
IkReal gconst4=(x9868*x9870);
IkReal gconst5=((1.0)*r20*x9870);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9872=((-1.0)*r21);
CheckValue<IkReal> x9875 = IKatan2WithCheck(IkReal(x9872),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9875.valid){
continue;
}
IkReal x9873=((1.0)*(x9875.value));
IkReal x9874=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9873)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9873)));
IkReal gconst4=(x9872*x9874);
IkReal gconst5=((1.0)*r20*x9874);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9876=((-1.0)*r21);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(x9876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
IkReal x9877=((1.0)*(x9879.value));
IkReal x9878=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9877)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9877)));
IkReal gconst4=(x9876*x9878);
IkReal gconst5=((1.0)*r20*x9878);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9880=((-1.0)*r21);
CheckValue<IkReal> x9883 = IKatan2WithCheck(IkReal(x9880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9883.valid){
continue;
}
IkReal x9881=((1.0)*(x9883.value));
IkReal x9882=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9881)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst4=(x9880*x9882);
IkReal gconst5=((1.0)*r20*x9882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9884=((-1.0)*r21);
CheckValue<IkReal> x9887 = IKatan2WithCheck(IkReal(x9884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9887.valid){
continue;
}
IkReal x9885=((1.0)*(x9887.value));
IkReal x9886=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9885)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9885)));
IkReal gconst4=(x9884*x9886);
IkReal gconst5=((1.0)*r20*x9886);
IkReal x9888=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9892=IKPowWithIntegerCheck(x9888,-1);
if(!x9892.valid){
continue;
}
IkReal x9889=x9892.value;
IkReal x9890=((1.0)*x9889);
IkReal x9891=((((-1.0)*x9890*(r01*r01)*(r21*r21)))+(((-1.0)*x9890*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9889)));
j4eval[0]=x9891;
j4eval[1]=r02;
j4eval[2]=x9888;
j4eval[3]=IKsign(x9891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9893=(gconst4*r01);
IkReal x9894=(gconst5*r00);
CheckValue<IkReal> x9895=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9894*x9894)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9893*x9893)))+(((2.0)*x9893*x9894)))),-1);
if(!x9895.valid){
continue;
}
CheckValue<IkReal> x9896 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9894))+x9893)),IKFAST_ATAN2_MAGTHRESH);
if(!x9896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9895.value)))+(x9896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9897=IKcos(j4);
IkReal x9898=IKsin(j4);
IkReal x9899=(gconst5*r10);
IkReal x9900=((1.0)*sj2);
IkReal x9901=(gconst5*r00);
IkReal x9902=(gconst5*r20);
IkReal x9903=((1.0)*x9897);
IkReal x9904=(gconst4*x9898);
IkReal x9905=(gconst4*x9897);
IkReal x9906=((1.0)*x9898);
evalcond[0]=((((-1.0)*x9902*x9903))+((r22*x9898))+((r21*x9905)));
evalcond[1]=(((r11*x9905))+((r12*x9898))+(((-1.0)*x9899*x9903)));
evalcond[2]=((1.0)+(((-1.0)*x9901*x9903))+((r01*x9905))+((r02*x9898)));
evalcond[3]=((((-1.0)*x9901*x9906))+((r01*x9904))+(((-1.0)*r02*x9903)));
evalcond[4]=((((-1.0)*x9902*x9906))+(((-1.0)*r22*x9903))+((cj1*cj2))+((r21*x9904))+(((-1.0)*sj1*x9900)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x9903))+((r11*x9904))+(((-1.0)*x9899*x9906))+(((-1.0)*cj1*x9900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9907=((1.0)*gconst5);
CheckValue<IkReal> x9908=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9907))+(((-1.0)*gconst4*r10)))),-1);
if(!x9908.valid){
continue;
}
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9907))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9908.value)))+(x9909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9910=IKcos(j4);
IkReal x9911=IKsin(j4);
IkReal x9912=(gconst5*r10);
IkReal x9913=((1.0)*sj2);
IkReal x9914=(gconst5*r00);
IkReal x9915=(gconst5*r20);
IkReal x9916=((1.0)*x9910);
IkReal x9917=(gconst4*x9911);
IkReal x9918=(gconst4*x9910);
IkReal x9919=((1.0)*x9911);
evalcond[0]=((((-1.0)*x9915*x9916))+((r22*x9911))+((r21*x9918)));
evalcond[1]=(((r12*x9911))+((r11*x9918))+(((-1.0)*x9912*x9916)));
evalcond[2]=((1.0)+((r01*x9918))+(((-1.0)*x9914*x9916))+((r02*x9911)));
evalcond[3]=(((r01*x9917))+(((-1.0)*x9914*x9919))+(((-1.0)*r02*x9916)));
evalcond[4]=((((-1.0)*r22*x9916))+(((-1.0)*x9915*x9919))+((r21*x9917))+((cj1*cj2))+(((-1.0)*sj1*x9913)));
evalcond[5]=((((-1.0)*cj1*x9913))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x9916))+((r11*x9917))+(((-1.0)*x9912*x9919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9920.value)+(((1.5707963267949)*(x9921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9922=IKcos(j4);
IkReal x9923=IKsin(j4);
IkReal x9924=(gconst5*r10);
IkReal x9925=((1.0)*sj2);
IkReal x9926=(gconst5*r00);
IkReal x9927=(gconst5*r20);
IkReal x9928=((1.0)*x9922);
IkReal x9929=(gconst4*x9923);
IkReal x9930=(gconst4*x9922);
IkReal x9931=((1.0)*x9923);
evalcond[0]=((((-1.0)*x9927*x9928))+((r21*x9930))+((r22*x9923)));
evalcond[1]=(((r11*x9930))+((r12*x9923))+(((-1.0)*x9924*x9928)));
evalcond[2]=((1.0)+(((-1.0)*x9926*x9928))+((r01*x9930))+((r02*x9923)));
evalcond[3]=((((-1.0)*r02*x9928))+(((-1.0)*x9926*x9931))+((r01*x9929)));
evalcond[4]=((((-1.0)*x9927*x9931))+(((-1.0)*r22*x9928))+(((-1.0)*sj1*x9925))+((cj1*cj2))+((r21*x9929)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x9928))+((r11*x9929))+(((-1.0)*x9924*x9931))+(((-1.0)*cj1*x9925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9932=((-1.0)*r21);
CheckValue<IkReal> x9935 = IKatan2WithCheck(IkReal(x9932),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9935.valid){
continue;
}
IkReal x9933=((1.0)*(x9935.value));
IkReal x9934=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9933)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9933)));
IkReal gconst4=(x9932*x9934);
IkReal gconst5=((1.0)*r20*x9934);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9936=((-1.0)*r21);
CheckValue<IkReal> x9939 = IKatan2WithCheck(IkReal(x9936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9939.valid){
continue;
}
IkReal x9937=((1.0)*(x9939.value));
IkReal x9938=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9937)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9937)));
IkReal gconst4=(x9936*x9938);
IkReal gconst5=((1.0)*r20*x9938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9940=((-1.0)*r21);
CheckValue<IkReal> x9943 = IKatan2WithCheck(IkReal(x9940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9943.valid){
continue;
}
IkReal x9941=((1.0)*(x9943.value));
IkReal x9942=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9941)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9941)));
IkReal gconst4=(x9940*x9942);
IkReal gconst5=((1.0)*r20*x9942);
IkReal x9944=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(x9944,-1);
if(!x9948.valid){
continue;
}
IkReal x9945=x9948.value;
IkReal x9946=((1.0)*x9945);
IkReal x9947=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9945))+(((-1.0)*x9946*(r01*r01)*(r21*r21)))+(((-1.0)*x9946*(r00*r00)*(r20*r20))));
j4eval[0]=x9947;
j4eval[1]=r02;
j4eval[2]=x9944;
j4eval[3]=IKsign(x9947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9949=(gconst4*r01);
IkReal x9950=(gconst5*r00);
CheckValue<IkReal> x9951=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9949*x9950))+(((-1.0)*(x9950*x9950)))+(((-1.0)*(x9949*x9949))))),-1);
if(!x9951.valid){
continue;
}
CheckValue<IkReal> x9952 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9950))+x9949)),IKFAST_ATAN2_MAGTHRESH);
if(!x9952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9951.value)))+(x9952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9953=IKcos(j4);
IkReal x9954=IKsin(j4);
IkReal x9955=(gconst4*r21);
IkReal x9956=((1.0)*sj1);
IkReal x9957=(gconst4*r11);
IkReal x9958=(gconst4*r01);
IkReal x9959=((1.0)*x9954);
IkReal x9960=(gconst5*x9954);
IkReal x9961=((1.0)*gconst5*x9953);
evalcond[0]=(((x9953*x9955))+(((-1.0)*r20*x9961))+((r22*x9954)));
evalcond[1]=(((x9953*x9957))+((r12*x9954))+(((-1.0)*r10*x9961)));
evalcond[2]=(((r00*x9960))+((r02*x9953))+(((-1.0)*x9958*x9959)));
evalcond[3]=((1.0)+((x9953*x9958))+((r02*x9954))+(((-1.0)*r00*x9961)));
evalcond[4]=((((-1.0)*x9955*x9959))+(((-1.0)*sj2*x9956))+((cj1*cj2))+((r22*x9953))+((r20*x9960)));
evalcond[5]=(((r10*x9960))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9956))+(((-1.0)*x9957*x9959))+((r12*x9953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9962=((1.0)*gconst5);
CheckValue<IkReal> x9963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9962))+(((-1.0)*gconst4*r10)))),-1);
if(!x9963.valid){
continue;
}
CheckValue<IkReal> x9964 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9962)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9963.value)))+(x9964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9965=IKcos(j4);
IkReal x9966=IKsin(j4);
IkReal x9967=(gconst4*r21);
IkReal x9968=((1.0)*sj1);
IkReal x9969=(gconst4*r11);
IkReal x9970=(gconst4*r01);
IkReal x9971=((1.0)*x9966);
IkReal x9972=(gconst5*x9966);
IkReal x9973=((1.0)*gconst5*x9965);
evalcond[0]=((((-1.0)*r20*x9973))+((x9965*x9967))+((r22*x9966)));
evalcond[1]=(((x9965*x9969))+(((-1.0)*r10*x9973))+((r12*x9966)));
evalcond[2]=(((r02*x9965))+(((-1.0)*x9970*x9971))+((r00*x9972)));
evalcond[3]=((1.0)+((r02*x9966))+(((-1.0)*r00*x9973))+((x9965*x9970)));
evalcond[4]=((((-1.0)*x9967*x9971))+(((-1.0)*sj2*x9968))+((r20*x9972))+((r22*x9965))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x9968))+(((-1.0)*x9969*x9971))+(((-1.0)*cj1*sj2))+((r10*x9972))+((r12*x9965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9974 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9974.valid){
continue;
}
CheckValue<IkReal> x9975=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9974.value)+(((1.5707963267949)*(x9975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9976=IKcos(j4);
IkReal x9977=IKsin(j4);
IkReal x9978=(gconst4*r21);
IkReal x9979=((1.0)*sj1);
IkReal x9980=(gconst4*r11);
IkReal x9981=(gconst4*r01);
IkReal x9982=((1.0)*x9977);
IkReal x9983=(gconst5*x9977);
IkReal x9984=((1.0)*gconst5*x9976);
evalcond[0]=(((r22*x9977))+((x9976*x9978))+(((-1.0)*r20*x9984)));
evalcond[1]=(((x9976*x9980))+(((-1.0)*r10*x9984))+((r12*x9977)));
evalcond[2]=(((r00*x9983))+(((-1.0)*x9981*x9982))+((r02*x9976)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9984))+((x9976*x9981))+((r02*x9977)));
evalcond[4]=(((r22*x9976))+(((-1.0)*x9978*x9982))+(((-1.0)*sj2*x9979))+((r20*x9983))+((cj1*cj2)));
evalcond[5]=(((r10*x9983))+(((-1.0)*cj1*sj2))+(((-1.0)*x9980*x9982))+((r12*x9976))+(((-1.0)*cj2*x9979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9985=((-1.0)*r21);
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal(x9985),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
IkReal x9986=((1.0)*(x9988.value));
IkReal x9987=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9986)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9986)));
IkReal gconst4=(x9985*x9987);
IkReal gconst5=((1.0)*r20*x9987);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9989=((-1.0)*r21);
CheckValue<IkReal> x9992 = IKatan2WithCheck(IkReal(x9989),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9992.valid){
continue;
}
IkReal x9990=((1.0)*(x9992.value));
IkReal x9991=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9990)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9990)));
IkReal gconst4=(x9989*x9991);
IkReal gconst5=((1.0)*r20*x9991);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9993=((-1.0)*r21);
CheckValue<IkReal> x9996 = IKatan2WithCheck(IkReal(x9993),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9996.valid){
continue;
}
IkReal x9994=((1.0)*(x9996.value));
IkReal x9995=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9994)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9994)));
IkReal gconst4=(x9993*x9995);
IkReal gconst5=((1.0)*r20*x9995);
IkReal x9997=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10001=IKPowWithIntegerCheck(x9997,-1);
if(!x10001.valid){
continue;
}
IkReal x9998=x10001.value;
IkReal x9999=((1.0)*x9998);
IkReal x10000=((((-2.0)*r00*r01*r20*r21*x9998))+(((-1.0)*(r02*r02)))+(((-1.0)*x9999*(r01*r01)*(r21*r21)))+(((-1.0)*x9999*(r00*r00)*(r20*r20))));
j4eval[0]=x10000;
j4eval[1]=r02;
j4eval[2]=x9997;
j4eval[3]=IKsign(x10000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10002=(gconst4*r01);
IkReal x10003=(gconst5*r00);
CheckValue<IkReal> x10004=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10002*x10002)))+(((-1.0)*(r02*r02)))+(((2.0)*x10002*x10003))+(((-1.0)*(x10003*x10003))))),-1);
if(!x10004.valid){
continue;
}
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10003))+x10002)),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10004.value)))+(x10005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10006=IKcos(j4);
IkReal x10007=IKsin(j4);
IkReal x10008=(gconst4*r21);
IkReal x10009=((1.0)*cj2);
IkReal x10010=(gconst4*r11);
IkReal x10011=(gconst4*r01);
IkReal x10012=((1.0)*x10007);
IkReal x10013=(gconst5*x10007);
IkReal x10014=((1.0)*gconst5*x10006);
evalcond[0]=((((-1.0)*r20*x10014))+((r22*x10007))+((x10006*x10008)));
evalcond[1]=(((r12*x10007))+((x10006*x10010))+(((-1.0)*r10*x10014)));
evalcond[2]=(((r02*x10006))+(((-1.0)*x10011*x10012))+((r00*x10013)));
evalcond[3]=((1.0)+((r02*x10007))+((x10006*x10011))+(((-1.0)*r00*x10014)));
evalcond[4]=(((r12*x10006))+((r10*x10013))+((sj1*sj2))+(((-1.0)*x10010*x10012))+(((-1.0)*cj1*x10009)));
evalcond[5]=((((-1.0)*sj1*x10009))+((r22*x10006))+(((-1.0)*x10008*x10012))+(((-1.0)*cj1*sj2))+((r20*x10013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10015=((1.0)*gconst5);
CheckValue<IkReal> x10016 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10015))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10016.valid){
continue;
}
CheckValue<IkReal> x10017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10015))+(((-1.0)*gconst4*r10)))),-1);
if(!x10017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10016.value)+(((1.5707963267949)*(x10017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10018=IKcos(j4);
IkReal x10019=IKsin(j4);
IkReal x10020=(gconst4*r21);
IkReal x10021=((1.0)*cj2);
IkReal x10022=(gconst4*r11);
IkReal x10023=(gconst4*r01);
IkReal x10024=((1.0)*x10019);
IkReal x10025=(gconst5*x10019);
IkReal x10026=((1.0)*gconst5*x10018);
evalcond[0]=(((r22*x10019))+((x10018*x10020))+(((-1.0)*r20*x10026)));
evalcond[1]=((((-1.0)*r10*x10026))+((r12*x10019))+((x10018*x10022)));
evalcond[2]=(((r02*x10018))+(((-1.0)*x10023*x10024))+((r00*x10025)));
evalcond[3]=((1.0)+((r02*x10019))+(((-1.0)*r00*x10026))+((x10018*x10023)));
evalcond[4]=((((-1.0)*cj1*x10021))+((r12*x10018))+((sj1*sj2))+((r10*x10025))+(((-1.0)*x10022*x10024)));
evalcond[5]=(((r22*x10018))+(((-1.0)*cj1*sj2))+((r20*x10025))+(((-1.0)*x10020*x10024))+(((-1.0)*sj1*x10021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10027 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10027.valid){
continue;
}
CheckValue<IkReal> x10028=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10027.value)+(((1.5707963267949)*(x10028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10029=IKcos(j4);
IkReal x10030=IKsin(j4);
IkReal x10031=(gconst4*r21);
IkReal x10032=((1.0)*cj2);
IkReal x10033=(gconst4*r11);
IkReal x10034=(gconst4*r01);
IkReal x10035=((1.0)*x10030);
IkReal x10036=(gconst5*x10030);
IkReal x10037=((1.0)*gconst5*x10029);
evalcond[0]=(((x10029*x10031))+((r22*x10030))+(((-1.0)*r20*x10037)));
evalcond[1]=(((x10029*x10033))+(((-1.0)*r10*x10037))+((r12*x10030)));
evalcond[2]=((((-1.0)*x10034*x10035))+((r00*x10036))+((r02*x10029)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10037))+((x10029*x10034))+((r02*x10030)));
evalcond[4]=(((r10*x10036))+((sj1*sj2))+((r12*x10029))+(((-1.0)*x10033*x10035))+(((-1.0)*cj1*x10032)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x10031*x10035))+((r20*x10036))+((r22*x10029))+(((-1.0)*sj1*x10032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10038=((-1.0)*r21);
CheckValue<IkReal> x10041 = IKatan2WithCheck(IkReal(x10038),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10041.valid){
continue;
}
IkReal x10039=((1.0)*(x10041.value));
IkReal x10040=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10039)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10039)));
IkReal gconst4=(x10038*x10040);
IkReal gconst5=((1.0)*r20*x10040);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10042=((-1.0)*r21);
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal(x10042),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
IkReal x10043=((1.0)*(x10045.value));
IkReal x10044=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10043)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10043)));
IkReal gconst4=(x10042*x10044);
IkReal gconst5=((1.0)*r20*x10044);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10046=((-1.0)*r21);
CheckValue<IkReal> x10049 = IKatan2WithCheck(IkReal(x10046),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10049.valid){
continue;
}
IkReal x10047=((1.0)*(x10049.value));
IkReal x10048=x8808;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10047)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10047)));
IkReal gconst4=(x10046*x10048);
IkReal gconst5=((1.0)*r20*x10048);
IkReal x10050=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10054=IKPowWithIntegerCheck(x10050,-1);
if(!x10054.valid){
continue;
}
IkReal x10051=x10054.value;
IkReal x10052=((1.0)*x10051);
IkReal x10053=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10051))+(((-1.0)*x10052*(r00*r00)*(r20*r20)))+(((-1.0)*x10052*(r01*r01)*(r21*r21))));
j4eval[0]=x10053;
j4eval[1]=r02;
j4eval[2]=x10050;
j4eval[3]=IKsign(x10053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10055=(gconst4*r01);
IkReal x10056=(gconst5*r00);
CheckValue<IkReal> x10057 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10056))+x10055)),IKFAST_ATAN2_MAGTHRESH);
if(!x10057.valid){
continue;
}
CheckValue<IkReal> x10058=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10055*x10055)))+(((-1.0)*(r02*r02)))+(((2.0)*x10055*x10056))+(((-1.0)*(x10056*x10056))))),-1);
if(!x10058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10057.value)+(((1.5707963267949)*(x10058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10059=IKcos(j4);
IkReal x10060=IKsin(j4);
IkReal x10061=(gconst4*r11);
IkReal x10062=(gconst5*r10);
IkReal x10063=((1.0)*cj1);
IkReal x10064=(gconst5*r00);
IkReal x10065=(gconst5*r20);
IkReal x10066=((1.0)*x10059);
IkReal x10067=(gconst4*x10059);
IkReal x10068=((1.0)*x10060);
IkReal x10069=(gconst4*x10060);
evalcond[0]=(((r22*x10060))+((r21*x10067))+(((-1.0)*x10065*x10066)));
evalcond[1]=(((r12*x10060))+(((-1.0)*x10062*x10066))+((x10059*x10061)));
evalcond[2]=((1.0)+(((-1.0)*x10064*x10066))+((r01*x10067))+((r02*x10060)));
evalcond[3]=((((-1.0)*x10064*x10068))+((r01*x10069))+(((-1.0)*r02*x10066)));
evalcond[4]=(((x10060*x10061))+(((-1.0)*cj2*x10063))+((sj1*sj2))+(((-1.0)*x10062*x10068))+(((-1.0)*r12*x10066)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10063))+((r21*x10069))+(((-1.0)*r22*x10066))+(((-1.0)*x10065*x10068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10070=((1.0)*gconst5);
CheckValue<IkReal> x10071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10070))+(((-1.0)*gconst4*r10)))),-1);
if(!x10071.valid){
continue;
}
CheckValue<IkReal> x10072 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10070))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10071.value)))+(x10072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10073=IKcos(j4);
IkReal x10074=IKsin(j4);
IkReal x10075=(gconst4*r11);
IkReal x10076=(gconst5*r10);
IkReal x10077=((1.0)*cj1);
IkReal x10078=(gconst5*r00);
IkReal x10079=(gconst5*r20);
IkReal x10080=((1.0)*x10073);
IkReal x10081=(gconst4*x10073);
IkReal x10082=((1.0)*x10074);
IkReal x10083=(gconst4*x10074);
evalcond[0]=((((-1.0)*x10079*x10080))+((r21*x10081))+((r22*x10074)));
evalcond[1]=(((r12*x10074))+((x10073*x10075))+(((-1.0)*x10076*x10080)));
evalcond[2]=((1.0)+(((-1.0)*x10078*x10080))+((r01*x10081))+((r02*x10074)));
evalcond[3]=((((-1.0)*x10078*x10082))+((r01*x10083))+(((-1.0)*r02*x10080)));
evalcond[4]=((((-1.0)*cj2*x10077))+((sj1*sj2))+(((-1.0)*x10076*x10082))+((x10074*x10075))+(((-1.0)*r12*x10080)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10079*x10082))+((r21*x10083))+(((-1.0)*sj2*x10077))+(((-1.0)*r22*x10080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10084 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10084.valid){
continue;
}
CheckValue<IkReal> x10085=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10084.value)+(((1.5707963267949)*(x10085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10086=IKcos(j4);
IkReal x10087=IKsin(j4);
IkReal x10088=(gconst4*r11);
IkReal x10089=(gconst5*r10);
IkReal x10090=((1.0)*cj1);
IkReal x10091=(gconst5*r00);
IkReal x10092=(gconst5*r20);
IkReal x10093=((1.0)*x10086);
IkReal x10094=(gconst4*x10086);
IkReal x10095=((1.0)*x10087);
IkReal x10096=(gconst4*x10087);
evalcond[0]=((((-1.0)*x10092*x10093))+((r21*x10094))+((r22*x10087)));
evalcond[1]=(((x10086*x10088))+(((-1.0)*x10089*x10093))+((r12*x10087)));
evalcond[2]=((1.0)+((r02*x10087))+(((-1.0)*x10091*x10093))+((r01*x10094)));
evalcond[3]=((((-1.0)*r02*x10093))+(((-1.0)*x10091*x10095))+((r01*x10096)));
evalcond[4]=(((x10087*x10088))+(((-1.0)*cj2*x10090))+(((-1.0)*r12*x10093))+((sj1*sj2))+(((-1.0)*x10089*x10095)));
evalcond[5]=((((-1.0)*x10092*x10095))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10090))+((r21*x10096))+(((-1.0)*r22*x10093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10097=gconst4*gconst4;
IkReal x10098=gconst5*gconst5;
IkReal x10099=(gconst4*r00);
IkReal x10100=(gconst5*r01);
IkReal x10101=((1.0)*r20);
IkReal x10102=((1.0)*r22*sj3);
IkReal x10103=(r21*x10097);
CheckValue<IkReal> x10104 = IKatan2WithCheck(IkReal((((gconst4*r21*sj3*x10100))+((r00*sj3*x10103))+(((-1.0)*gconst5*sj3*x10099*x10101))+(((-1.0)*r01*sj3*x10098*x10101)))),IkReal(((((-1.0)*x10100*x10102))+(((-1.0)*x10099*x10102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10104.valid){
continue;
}
CheckValue<IkReal> x10105=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*gconst5*r21*x10099))+((cj3*r00*r20*x10098))+(((-1.0)*cj3*gconst4*x10100*x10101))+((cj3*r01*x10103))+((cj3*r02*r22)))),-1);
if(!x10105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10104.value)+(((1.5707963267949)*(x10105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10106=IKcos(j4);
IkReal x10107=IKsin(j4);
IkReal x10108=(gconst5*sj3);
IkReal x10109=(sj1*sj2);
IkReal x10110=((1.0)*r10);
IkReal x10111=((1.0)*cj2);
IkReal x10112=(cj3*gconst4);
IkReal x10113=(gconst4*sj3);
IkReal x10114=(cj3*gconst5);
IkReal x10115=((1.0)*cj1*sj2);
IkReal x10116=(sj1*x10111);
IkReal x10117=(gconst4*x10106);
IkReal x10118=(gconst5*x10106);
IkReal x10119=((1.0)*x10107);
IkReal x10120=(cj3*x10106);
IkReal x10121=(x10107*x10113);
IkReal x10122=(x10107*x10114);
IkReal x10123=((1.0)*sj3*x10106);
IkReal x10124=(x10115+x10116);
evalcond[0]=(((r21*x10117))+((r22*x10107))+(((-1.0)*r20*x10118)));
evalcond[1]=((((-1.0)*x10110*x10118))+((r11*x10117))+((r12*x10107)));
evalcond[2]=((1.0)+((r01*x10117))+((r02*x10107))+(((-1.0)*r00*x10118)));
evalcond[3]=(((r01*x10108))+((r00*x10113))+(((-1.0)*r01*x10112*x10119))+((r02*x10120))+((r00*x10122)));
evalcond[4]=(((r01*x10114))+(((-1.0)*r00*x10108*x10119))+((r00*x10112))+(((-1.0)*r02*x10123))+((r01*x10121)));
evalcond[5]=((((-1.0)*r11*x10112*x10119))+((r10*x10122))+x10109+((r11*x10108))+(((-1.0)*cj1*x10111))+((r10*x10113))+((r12*x10120)));
evalcond[6]=((((-1.0)*x10109))+((r21*x10114))+((r20*x10112))+((r21*x10121))+(((-1.0)*r20*x10108*x10119))+((cj1*cj2))+(((-1.0)*r22*x10123)));
evalcond[7]=(((r21*x10108))+((r20*x10122))+((r20*x10113))+((r22*x10120))+(((-1.0)*x10124))+(((-1.0)*r21*x10112*x10119)));
evalcond[8]=(((r11*x10114))+(((-1.0)*x10107*x10108*x10110))+((r10*x10112))+(((-1.0)*x10124))+(((-1.0)*r12*x10123))+((r11*x10121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10125=((1.0)*gconst5);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10125))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10125))+(((-1.0)*gconst4*r10)))),-1);
if(!x10127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10126.value)+(((1.5707963267949)*(x10127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10128=IKcos(j4);
IkReal x10129=IKsin(j4);
IkReal x10130=(gconst5*sj3);
IkReal x10131=(sj1*sj2);
IkReal x10132=((1.0)*r10);
IkReal x10133=((1.0)*cj2);
IkReal x10134=(cj3*gconst4);
IkReal x10135=(gconst4*sj3);
IkReal x10136=(cj3*gconst5);
IkReal x10137=((1.0)*cj1*sj2);
IkReal x10138=(sj1*x10133);
IkReal x10139=(gconst4*x10128);
IkReal x10140=(gconst5*x10128);
IkReal x10141=((1.0)*x10129);
IkReal x10142=(cj3*x10128);
IkReal x10143=(x10129*x10135);
IkReal x10144=(x10129*x10136);
IkReal x10145=((1.0)*sj3*x10128);
IkReal x10146=(x10137+x10138);
evalcond[0]=((((-1.0)*r20*x10140))+((r21*x10139))+((r22*x10129)));
evalcond[1]=(((r11*x10139))+(((-1.0)*x10132*x10140))+((r12*x10129)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10140))+((r02*x10129))+((r01*x10139)));
evalcond[3]=((((-1.0)*r01*x10134*x10141))+((r02*x10142))+((r01*x10130))+((r00*x10135))+((r00*x10144)));
evalcond[4]=((((-1.0)*r02*x10145))+((r01*x10136))+((r00*x10134))+((r01*x10143))+(((-1.0)*r00*x10130*x10141)));
evalcond[5]=(((r11*x10130))+((r12*x10142))+(((-1.0)*cj1*x10133))+((r10*x10135))+(((-1.0)*r11*x10134*x10141))+((r10*x10144))+x10131);
evalcond[6]=(((r20*x10134))+((r21*x10136))+(((-1.0)*r20*x10130*x10141))+((r21*x10143))+(((-1.0)*x10131))+((cj1*cj2))+(((-1.0)*r22*x10145)));
evalcond[7]=(((r20*x10135))+((r21*x10130))+((r22*x10142))+(((-1.0)*x10146))+(((-1.0)*r21*x10134*x10141))+((r20*x10144)));
evalcond[8]=(((r11*x10136))+((r10*x10134))+(((-1.0)*x10129*x10130*x10132))+(((-1.0)*x10146))+(((-1.0)*r12*x10145))+((r11*x10143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10147.value)+(((1.5707963267949)*(x10148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10149=IKcos(j4);
IkReal x10150=IKsin(j4);
IkReal x10151=(gconst5*sj3);
IkReal x10152=(sj1*sj2);
IkReal x10153=((1.0)*r10);
IkReal x10154=((1.0)*cj2);
IkReal x10155=(cj3*gconst4);
IkReal x10156=(gconst4*sj3);
IkReal x10157=(cj3*gconst5);
IkReal x10158=((1.0)*cj1*sj2);
IkReal x10159=(sj1*x10154);
IkReal x10160=(gconst4*x10149);
IkReal x10161=(gconst5*x10149);
IkReal x10162=((1.0)*x10150);
IkReal x10163=(cj3*x10149);
IkReal x10164=(x10150*x10156);
IkReal x10165=(x10150*x10157);
IkReal x10166=((1.0)*sj3*x10149);
IkReal x10167=(x10158+x10159);
evalcond[0]=(((r22*x10150))+(((-1.0)*r20*x10161))+((r21*x10160)));
evalcond[1]=(((r12*x10150))+((r11*x10160))+(((-1.0)*x10153*x10161)));
evalcond[2]=((1.0)+((r02*x10150))+((r01*x10160))+(((-1.0)*r00*x10161)));
evalcond[3]=(((r00*x10165))+((r02*x10163))+((r01*x10151))+((r00*x10156))+(((-1.0)*r01*x10155*x10162)));
evalcond[4]=((((-1.0)*r00*x10151*x10162))+((r01*x10164))+(((-1.0)*r02*x10166))+((r01*x10157))+((r00*x10155)));
evalcond[5]=(((r10*x10165))+(((-1.0)*r11*x10155*x10162))+(((-1.0)*cj1*x10154))+((r10*x10156))+x10152+((r12*x10163))+((r11*x10151)));
evalcond[6]=((((-1.0)*r22*x10166))+(((-1.0)*r20*x10151*x10162))+((r21*x10157))+((cj1*cj2))+(((-1.0)*x10152))+((r21*x10164))+((r20*x10155)));
evalcond[7]=(((r22*x10163))+(((-1.0)*x10167))+((r21*x10151))+((r20*x10165))+(((-1.0)*r21*x10155*x10162))+((r20*x10156)));
evalcond[8]=((((-1.0)*r12*x10166))+(((-1.0)*x10167))+((r10*x10155))+((r11*x10164))+(((-1.0)*x10150*x10151*x10153))+((r11*x10157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10168=((-1.0)*r21);
IkReal x10169=((-1.0)*px);
CheckValue<IkReal> x10171 = IKatan2WithCheck(IkReal(x10168),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10171.valid){
continue;
}
IkReal x10170=((1.0)*(x10171.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10170)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10169);
rxp1_1=(px*r21);
rxp1_2=(r11*x10169);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10170)));
IkReal gconst4=x10168;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10172=((-1.0)*r21);
IkReal x10173=((-1.0)*px);
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal(x10172),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
IkReal x10174=((1.0)*(x10175.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10174)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10173);
rxp1_1=(px*r21);
rxp1_2=(r11*x10173);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10174)));
IkReal gconst4=x10172;
IkReal gconst5=((1.0)*r20);
IkReal x10176=((1.0)*sj3);
j4eval[0]=((((-1.0)*x10176*(r21*r21)))+((x10176*(r10*r10)))+(((-1.0)*x10176)));
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10177=((-1.0)*r21);
IkReal x10178=((-1.0)*px);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(x10177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10179=((1.0)*(x10180.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10179)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10178);
rxp1_1=(px*r21);
rxp1_2=(r11*x10178);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10179)));
IkReal gconst4=x10177;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10181=((-1.0)*r21);
IkReal x10182=((-1.0)*px);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(x10181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10183=((1.0)*(x10184.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10183)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10182);
rxp1_1=(px*r21);
rxp1_2=(r11*x10182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10183)));
IkReal gconst4=x10181;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10185=((-1.0)*r21);
IkReal x10186=((-1.0)*px);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10187=((1.0)*(x10188.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10187)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10186);
rxp1_1=(px*r21);
rxp1_2=(r11*x10186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10187)));
IkReal gconst4=x10185;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10189=((-1.0)*r21);
IkReal x10190=((-1.0)*px);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10191=((1.0)*(x10192.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10190);
rxp1_1=(px*r21);
rxp1_2=(r11*x10190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=x10189;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10195=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10195.valid){
continue;
}
IkReal x10193=x10195.value;
IkReal x10194=(sj0*x10193);
sj4array[0]=((((-1.0)*cj1*cj2*x10194))+((sj1*sj2*x10194)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10196=IKcos(j4);
IkReal x10197=IKsin(j4);
IkReal x10198=(gconst5*r20);
IkReal x10199=(gconst4*x10196);
IkReal x10200=((1.0)*x10196);
evalcond[0]=(r02*x10196);
evalcond[1]=(((r02*x10197))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x10199))+(((-1.0)*x10198*x10200)));
evalcond[3]=(((r11*x10199))+(((-1.0)*gconst5*r10*x10200)));
evalcond[4]=(((x10197*x10198))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10202=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10202.valid){
continue;
}
IkReal x10201=x10202.value;
sj4array[0]=(((cj1*sj2*x10201))+((cj2*sj1*x10201)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10203=IKcos(j4);
IkReal x10204=IKsin(j4);
IkReal x10205=(gconst4*r11);
IkReal x10206=((1.0)*sj0);
IkReal x10207=(gconst5*r10);
IkReal x10208=((1.0)*x10203);
evalcond[0]=(r02*x10203);
evalcond[1]=(((r02*x10204))+(((-1.0)*x10206)));
evalcond[2]=(((gconst4*r21*x10203))+(((-1.0)*gconst5*r20*x10208)));
evalcond[3]=(((x10203*x10205))+(((-1.0)*x10207*x10208)));
evalcond[4]=(((cj1*cj2*sj0))+((x10204*x10207))+(((-1.0)*sj1*sj2*x10206))+(((-1.0)*x10204*x10205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(r02,-1);
if(!x10209.valid){
continue;
}
sj4array[0]=(sj0*(x10209.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10210=IKcos(j4);
IkReal x10211=IKsin(j4);
IkReal x10212=(gconst4*r11);
IkReal x10213=(gconst4*r21);
IkReal x10214=((1.0)*sj2);
IkReal x10215=(gconst5*x10211);
IkReal x10216=((1.0)*x10211);
IkReal x10217=((1.0)*gconst5*x10210);
evalcond[0]=(r02*x10210);
evalcond[1]=((((-1.0)*r20*x10217))+((x10210*x10213)));
evalcond[2]=((((-1.0)*r10*x10217))+((x10210*x10212)));
evalcond[3]=(((r20*x10215))+(((-1.0)*x10213*x10216))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10214)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x10215))+(((-1.0)*x10212*x10216))+(((-1.0)*sj0*sj1*x10214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10218=((-1.0)*r21);
IkReal x10219=((-1.0)*px);
CheckValue<IkReal> x10221 = IKatan2WithCheck(IkReal(x10218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10221.valid){
continue;
}
IkReal x10220=((1.0)*(x10221.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10220)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10219);
rxp1_1=(px*r21);
rxp1_2=(r11*x10219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10220)));
IkReal gconst4=x10218;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10222=((-1.0)*r21);
IkReal x10223=((-1.0)*px);
CheckValue<IkReal> x10225 = IKatan2WithCheck(IkReal(x10222),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10225.valid){
continue;
}
IkReal x10224=((1.0)*(x10225.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10224)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10223);
rxp1_1=(px*r21);
rxp1_2=(r11*x10223);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10224)));
IkReal gconst4=x10222;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10226=((-1.0)*r21);
IkReal x10227=((-1.0)*px);
CheckValue<IkReal> x10229 = IKatan2WithCheck(IkReal(x10226),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10229.valid){
continue;
}
IkReal x10228=((1.0)*(x10229.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10228)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10227);
rxp1_1=(px*r21);
rxp1_2=(r11*x10227);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10228)));
IkReal gconst4=x10226;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10232=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10232.valid){
continue;
}
IkReal x10230=x10232.value;
IkReal x10231=(sj0*x10230);
sj4array[0]=((((-1.0)*cj1*cj2*x10231))+((sj1*sj2*x10231)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10233=IKcos(j4);
IkReal x10234=IKsin(j4);
IkReal x10235=((1.0)*gconst5);
IkReal x10236=(gconst4*x10233);
evalcond[0]=((-1.0)*r02*x10233);
evalcond[1]=((((-1.0)*sj0))+((r02*x10234)));
evalcond[2]=((((-1.0)*r20*x10233*x10235))+((r21*x10236)));
evalcond[3]=((((-1.0)*r10*x10233*x10235))+((r11*x10236)));
evalcond[4]=((((-1.0)*r20*x10234*x10235))+((gconst4*r21*x10234))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10238=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10238.valid){
continue;
}
IkReal x10237=x10238.value;
sj4array[0]=(((cj1*sj2*x10237))+((cj2*sj1*x10237)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10239=IKcos(j4);
IkReal x10240=IKsin(j4);
IkReal x10241=(gconst4*r11);
IkReal x10242=((1.0)*sj0);
IkReal x10243=((1.0)*gconst5*r10);
evalcond[0]=((-1.0)*r02*x10239);
evalcond[1]=(((r02*x10240))+(((-1.0)*x10242)));
evalcond[2]=(((gconst4*r21*x10239))+(((-1.0)*gconst5*r20*x10239)));
evalcond[3]=(((x10239*x10241))+(((-1.0)*x10239*x10243)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x10240*x10243))+(((-1.0)*sj1*sj2*x10242))+((x10240*x10241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10244=IKPowWithIntegerCheck(r02,-1);
if(!x10244.valid){
continue;
}
sj4array[0]=(sj0*(x10244.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10245=IKcos(j4);
IkReal x10246=IKsin(j4);
IkReal x10247=(gconst4*r11);
IkReal x10248=((1.0)*sj1);
IkReal x10249=(gconst4*r21);
IkReal x10250=((1.0)*gconst5*r10);
IkReal x10251=((1.0)*gconst5*r20);
evalcond[0]=((-1.0)*r02*x10245);
evalcond[1]=((((-1.0)*x10245*x10251))+((x10245*x10249)));
evalcond[2]=((((-1.0)*x10245*x10250))+((x10245*x10247)));
evalcond[3]=((((-1.0)*cj2*x10248))+(((-1.0)*cj1*sj2))+((x10246*x10249))+(((-1.0)*x10246*x10251)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10248))+((x10246*x10247))+(((-1.0)*x10246*x10250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10253=IKPowWithIntegerCheck(r02,-1);
if(!x10253.valid){
continue;
}
IkReal x10252=x10253.value;
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(sj3,-1);
if(!x10254.valid){
continue;
}
if( IKabs((sj0*x10252)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10252*(x10254.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10252))+IKsqr((x10252*(x10254.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10252), (x10252*(x10254.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10255=IKcos(j4);
IkReal x10256=IKsin(j4);
IkReal x10257=(gconst5*sj3);
IkReal x10258=(cj2*sj0);
IkReal x10259=(cj3*gconst5);
IkReal x10260=((1.0)*r10);
IkReal x10261=((1.0)*sj1);
IkReal x10262=(cj1*sj2);
IkReal x10263=(cj0*cj2);
IkReal x10264=(cj3*gconst4);
IkReal x10265=(gconst4*sj3);
IkReal x10266=(r20*x10256);
IkReal x10267=(gconst4*x10255);
IkReal x10268=(gconst5*x10255);
IkReal x10269=(r02*x10255);
IkReal x10270=(x10256*x10265);
IkReal x10271=((1.0)*x10256*x10264);
evalcond[0]=((((-1.0)*sj0))+((r02*x10256)));
evalcond[1]=((((-1.0)*r20*x10268))+((r21*x10267)));
evalcond[2]=((((-1.0)*x10260*x10268))+cj0+((r11*x10267)));
evalcond[3]=(((sj1*x10263))+(((-1.0)*sj3*x10269))+((cj0*x10262)));
evalcond[4]=(((cj1*x10263))+((cj3*x10269))+(((-1.0)*cj0*sj2*x10261)));
evalcond[5]=((((-1.0)*x10257*x10266))+((r21*x10270))+((r20*x10264))+((r21*x10259))+(((-1.0)*sj2*x10261))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r21*x10271))+(((-1.0)*x10262))+((r20*x10265))+((r21*x10257))+((x10259*x10266))+(((-1.0)*cj2*x10261)));
evalcond[7]=(((sj1*x10258))+((r11*x10270))+((sj0*x10262))+(((-1.0)*x10256*x10257*x10260))+((r10*x10264))+((r11*x10259)));
evalcond[8]=(((cj1*x10258))+((r10*x10256*x10259))+(((-1.0)*r11*x10271))+((r10*x10265))+(((-1.0)*sj0*sj2*x10261))+((r11*x10257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10272=((1.0)*gconst5);
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x10272))+((gconst4*r21*sj3))),-1);
if(!x10273.valid){
continue;
}
CheckValue<IkReal> x10274=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x10272))),-1);
if(!x10274.valid){
continue;
}
if( IKabs(((x10273.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10272)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10274.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10273.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10272))))))+IKsqr(((-1.0)*cj0*(x10274.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10273.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10272))))), ((-1.0)*cj0*(x10274.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10275=IKcos(j4);
IkReal x10276=IKsin(j4);
IkReal x10277=(gconst5*sj3);
IkReal x10278=(cj2*sj0);
IkReal x10279=(cj3*gconst5);
IkReal x10280=((1.0)*r10);
IkReal x10281=((1.0)*sj1);
IkReal x10282=(cj1*sj2);
IkReal x10283=(cj0*cj2);
IkReal x10284=(cj3*gconst4);
IkReal x10285=(gconst4*sj3);
IkReal x10286=(r20*x10276);
IkReal x10287=(gconst4*x10275);
IkReal x10288=(gconst5*x10275);
IkReal x10289=(r02*x10275);
IkReal x10290=(x10276*x10285);
IkReal x10291=((1.0)*x10276*x10284);
evalcond[0]=((((-1.0)*sj0))+((r02*x10276)));
evalcond[1]=((((-1.0)*r20*x10288))+((r21*x10287)));
evalcond[2]=(cj0+((r11*x10287))+(((-1.0)*x10280*x10288)));
evalcond[3]=(((sj1*x10283))+(((-1.0)*sj3*x10289))+((cj0*x10282)));
evalcond[4]=(((cj3*x10289))+((cj1*x10283))+(((-1.0)*cj0*sj2*x10281)));
evalcond[5]=(((r20*x10284))+(((-1.0)*x10277*x10286))+((r21*x10279))+((r21*x10290))+((cj1*cj2))+(((-1.0)*sj2*x10281)));
evalcond[6]=(((r20*x10285))+((x10279*x10286))+((r21*x10277))+(((-1.0)*x10282))+(((-1.0)*cj2*x10281))+(((-1.0)*r21*x10291)));
evalcond[7]=(((r11*x10279))+((sj0*x10282))+((r11*x10290))+(((-1.0)*x10276*x10277*x10280))+((r10*x10284))+((sj1*x10278)));
evalcond[8]=(((r11*x10277))+((r10*x10276*x10279))+(((-1.0)*sj0*sj2*x10281))+((cj1*x10278))+(((-1.0)*r11*x10291))+((r10*x10285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10292=IKPowWithIntegerCheck(r02,-1);
if(!x10292.valid){
continue;
}
CheckValue<IkReal> x10293=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10293.valid){
continue;
}
if( IKabs((sj0*(x10292.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10293.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10292.value)))+IKsqr(((-1.0)*cj0*(x10293.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10292.value)), ((-1.0)*cj0*(x10293.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10294=IKcos(j4);
IkReal x10295=IKsin(j4);
IkReal x10296=(gconst5*sj3);
IkReal x10297=(cj2*sj0);
IkReal x10298=(cj3*gconst5);
IkReal x10299=((1.0)*r10);
IkReal x10300=((1.0)*sj1);
IkReal x10301=(cj1*sj2);
IkReal x10302=(cj0*cj2);
IkReal x10303=(cj3*gconst4);
IkReal x10304=(gconst4*sj3);
IkReal x10305=(r20*x10295);
IkReal x10306=(gconst4*x10294);
IkReal x10307=(gconst5*x10294);
IkReal x10308=(r02*x10294);
IkReal x10309=(x10295*x10304);
IkReal x10310=((1.0)*x10295*x10303);
evalcond[0]=((((-1.0)*sj0))+((r02*x10295)));
evalcond[1]=((((-1.0)*r20*x10307))+((r21*x10306)));
evalcond[2]=(cj0+((r11*x10306))+(((-1.0)*x10299*x10307)));
evalcond[3]=(((cj0*x10301))+((sj1*x10302))+(((-1.0)*sj3*x10308)));
evalcond[4]=((((-1.0)*cj0*sj2*x10300))+((cj3*x10308))+((cj1*x10302)));
evalcond[5]=((((-1.0)*sj2*x10300))+((r20*x10303))+(((-1.0)*x10296*x10305))+((r21*x10298))+((r21*x10309))+((cj1*cj2)));
evalcond[6]=((((-1.0)*cj2*x10300))+(((-1.0)*x10301))+((r20*x10304))+(((-1.0)*r21*x10310))+((r21*x10296))+((x10298*x10305)));
evalcond[7]=(((r10*x10303))+(((-1.0)*x10295*x10296*x10299))+((sj1*x10297))+((r11*x10298))+((r11*x10309))+((sj0*x10301)));
evalcond[8]=(((r10*x10304))+(((-1.0)*sj0*sj2*x10300))+((cj1*x10297))+((r11*x10296))+(((-1.0)*r11*x10310))+((r10*x10295*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10311=((1.0)*sj0);
IkReal x10312=((1.0)*gconst5);
CheckValue<IkReal> x10313 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r10*x10311))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x10312))+((gconst4*r11*sj0)))),IkReal(((((-1.0)*r12*x10311))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10313.valid){
continue;
}
CheckValue<IkReal> x10314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10312))+(((-1.0)*gconst4*r20)))),-1);
if(!x10314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10313.value)+(((1.5707963267949)*(x10314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10315=IKcos(j4);
IkReal x10316=IKsin(j4);
IkReal x10317=(r11*sj3);
IkReal x10318=(r01*sj3);
IkReal x10319=(cj2*sj0);
IkReal x10320=((1.0)*cj3);
IkReal x10321=((1.0)*gconst5);
IkReal x10322=((1.0)*sj1);
IkReal x10323=(r21*sj3);
IkReal x10324=(cj1*sj2);
IkReal x10325=(cj0*cj2);
IkReal x10326=(gconst4*sj3);
IkReal x10327=(cj3*gconst5);
IkReal x10328=(cj3*gconst4);
IkReal x10329=(gconst4*x10316);
IkReal x10330=(gconst4*x10315);
IkReal x10331=(sj3*x10316);
IkReal x10332=(cj3*x10315);
IkReal x10333=(x10316*x10327);
IkReal x10334=((1.0)*sj3*x10315);
evalcond[0]=(((r22*x10316))+(((-1.0)*r20*x10315*x10321))+((r21*x10330)));
evalcond[1]=((((-1.0)*r10*x10315*x10321))+cj0+((r12*x10316))+((r11*x10330)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10330))+((r02*x10316))+(((-1.0)*r00*x10315*x10321)));
evalcond[3]=(((x10323*x10329))+(((-1.0)*sj2*x10322))+(((-1.0)*r22*x10334))+((r20*x10328))+((r21*x10327))+(((-1.0)*r20*x10321*x10331))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10324))+((r22*x10332))+(((-1.0)*cj2*x10322))+((r20*x10333))+((r20*x10326))+(((-1.0)*r21*x10320*x10329))+((gconst5*x10323)));
evalcond[5]=(((x10318*x10329))+((cj0*x10324))+((r00*x10328))+((sj1*x10325))+((r01*x10327))+(((-1.0)*r00*x10321*x10331))+(((-1.0)*r02*x10334)));
evalcond[6]=(((r02*x10332))+(((-1.0)*cj0*sj2*x10322))+((gconst5*x10318))+((r00*x10326))+((r00*x10333))+(((-1.0)*r01*x10320*x10329))+((cj1*x10325)));
evalcond[7]=(((x10317*x10329))+(((-1.0)*r12*x10334))+((sj0*x10324))+(((-1.0)*r10*x10321*x10331))+((r11*x10327))+((r10*x10328))+((sj1*x10319)));
evalcond[8]=(((gconst5*x10317))+(((-1.0)*r11*x10320*x10329))+((cj1*x10319))+((r12*x10332))+(((-1.0)*sj0*sj2*x10322))+((r10*x10326))+((r10*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10335=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10335.valid){
continue;
}
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10335.value)))+(x10336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10337=IKcos(j4);
IkReal x10338=IKsin(j4);
IkReal x10339=(r11*sj3);
IkReal x10340=(r01*sj3);
IkReal x10341=(cj2*sj0);
IkReal x10342=((1.0)*cj3);
IkReal x10343=((1.0)*gconst5);
IkReal x10344=((1.0)*sj1);
IkReal x10345=(r21*sj3);
IkReal x10346=(cj1*sj2);
IkReal x10347=(cj0*cj2);
IkReal x10348=(gconst4*sj3);
IkReal x10349=(cj3*gconst5);
IkReal x10350=(cj3*gconst4);
IkReal x10351=(gconst4*x10338);
IkReal x10352=(gconst4*x10337);
IkReal x10353=(sj3*x10338);
IkReal x10354=(cj3*x10337);
IkReal x10355=(x10338*x10349);
IkReal x10356=((1.0)*sj3*x10337);
evalcond[0]=(((r21*x10352))+((r22*x10338))+(((-1.0)*r20*x10337*x10343)));
evalcond[1]=(cj0+((r12*x10338))+(((-1.0)*r10*x10337*x10343))+((r11*x10352)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10338))+((r01*x10352))+(((-1.0)*r00*x10337*x10343)));
evalcond[3]=(((r20*x10350))+(((-1.0)*sj2*x10344))+(((-1.0)*r20*x10343*x10353))+(((-1.0)*r22*x10356))+((x10345*x10351))+((r21*x10349))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj2*x10344))+((r20*x10348))+(((-1.0)*r21*x10342*x10351))+((r20*x10355))+((gconst5*x10345))+((r22*x10354))+(((-1.0)*x10346)));
evalcond[5]=(((sj1*x10347))+((x10340*x10351))+(((-1.0)*r00*x10343*x10353))+((r00*x10350))+((r01*x10349))+((cj0*x10346))+(((-1.0)*r02*x10356)));
evalcond[6]=((((-1.0)*cj0*sj2*x10344))+((r00*x10348))+(((-1.0)*r01*x10342*x10351))+((cj1*x10347))+((r00*x10355))+((gconst5*x10340))+((r02*x10354)));
evalcond[7]=(((sj1*x10341))+((sj0*x10346))+((r11*x10349))+((x10339*x10351))+(((-1.0)*r10*x10343*x10353))+(((-1.0)*r12*x10356))+((r10*x10350)));
evalcond[8]=(((cj1*x10341))+(((-1.0)*sj0*sj2*x10344))+((r10*x10348))+(((-1.0)*r11*x10342*x10351))+((gconst5*x10339))+((r10*x10355))+((r12*x10354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10357=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10357.valid){
continue;
}
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10357.value)))+(x10358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10359=IKcos(j4);
IkReal x10360=IKsin(j4);
IkReal x10361=(r11*sj3);
IkReal x10362=(r01*sj3);
IkReal x10363=(cj2*sj0);
IkReal x10364=((1.0)*cj3);
IkReal x10365=((1.0)*gconst5);
IkReal x10366=((1.0)*sj1);
IkReal x10367=(r21*sj3);
IkReal x10368=(cj1*sj2);
IkReal x10369=(cj0*cj2);
IkReal x10370=(gconst4*sj3);
IkReal x10371=(cj3*gconst5);
IkReal x10372=(cj3*gconst4);
IkReal x10373=(gconst4*x10360);
IkReal x10374=(gconst4*x10359);
IkReal x10375=(sj3*x10360);
IkReal x10376=(cj3*x10359);
IkReal x10377=(x10360*x10371);
IkReal x10378=((1.0)*sj3*x10359);
evalcond[0]=(((r22*x10360))+(((-1.0)*r20*x10359*x10365))+((r21*x10374)));
evalcond[1]=(cj0+((r11*x10374))+(((-1.0)*r10*x10359*x10365))+((r12*x10360)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10374))+(((-1.0)*r00*x10359*x10365))+((r02*x10360)));
evalcond[3]=((((-1.0)*r20*x10365*x10375))+((x10367*x10373))+((r20*x10372))+((cj1*cj2))+(((-1.0)*sj2*x10366))+(((-1.0)*r22*x10378))+((r21*x10371)));
evalcond[4]=(((r22*x10376))+(((-1.0)*cj2*x10366))+(((-1.0)*r21*x10364*x10373))+(((-1.0)*x10368))+((r20*x10377))+((r20*x10370))+((gconst5*x10367)));
evalcond[5]=((((-1.0)*r00*x10365*x10375))+((r01*x10371))+((r00*x10372))+(((-1.0)*r02*x10378))+((sj1*x10369))+((x10362*x10373))+((cj0*x10368)));
evalcond[6]=(((r00*x10370))+((r00*x10377))+((cj1*x10369))+(((-1.0)*r01*x10364*x10373))+((r02*x10376))+(((-1.0)*cj0*sj2*x10366))+((gconst5*x10362)));
evalcond[7]=((((-1.0)*r10*x10365*x10375))+((sj1*x10363))+((r10*x10372))+((sj0*x10368))+((r11*x10371))+(((-1.0)*r12*x10378))+((x10361*x10373)));
evalcond[8]=((((-1.0)*r11*x10364*x10373))+(((-1.0)*sj0*sj2*x10366))+((cj1*x10363))+((r10*x10370))+((r10*x10377))+((r12*x10376))+((gconst5*x10361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10380 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10380)==0){
continue;
}
IkReal x10379=pow(x10380,-0.5);
CheckValue<IkReal> x10381 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10381.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10381.value));
IkReal gconst7=((-1.0)*r11*x10379);
IkReal gconst8=(r10*x10379);
CheckValue<IkReal> x10382 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10382.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10385 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10385.valid){
continue;
}
IkReal x10383=((-1.0)*(x10385.value));
IkReal x10384=x10379;
sj5=gconst7;
cj5=gconst8;
j5=x10383;
IkReal gconst6=x10383;
IkReal gconst7=((-1.0)*r11*x10384);
IkReal gconst8=(r10*x10384);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10386=((1.0)*sj0);
IkReal x10387=((1.0)*gconst8);
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x10387))+((cj0*gconst7*r01))+(((-1.0)*gconst8*r10*x10386))+((gconst7*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x10386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
CheckValue<IkReal> x10389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x10387)))),-1);
if(!x10389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10388.value)+(((1.5707963267949)*(x10389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10390=IKcos(j4);
IkReal x10391=IKsin(j4);
IkReal x10392=(gconst7*sj3);
IkReal x10393=(cj3*gconst8);
IkReal x10394=(cj2*sj0);
IkReal x10395=(gconst8*sj3);
IkReal x10396=(cj0*cj2);
IkReal x10397=(cj3*gconst7);
IkReal x10398=((1.0)*sj1);
IkReal x10399=(cj1*sj2);
IkReal x10400=(r20*x10391);
IkReal x10401=(r11*x10391);
IkReal x10402=((1.0)*x10391);
IkReal x10403=(r22*x10390);
IkReal x10404=((1.0)*x10390);
IkReal x10405=(cj3*x10390);
IkReal x10406=(gconst7*x10390);
evalcond[0]=(((r21*x10406))+((r22*x10391))+(((-1.0)*gconst8*r20*x10404)));
evalcond[1]=((((-1.0)*gconst8*r10*x10404))+cj0+((r12*x10391))+((r11*x10406)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10406))+((r02*x10391))+(((-1.0)*gconst8*r00*x10404)));
evalcond[3]=(((r21*x10393))+(((-1.0)*sj3*x10403))+((r21*x10391*x10392))+(((-1.0)*x10395*x10400))+(((-1.0)*sj2*x10398))+((cj1*cj2))+((r20*x10397)));
evalcond[4]=(((r21*x10395))+(((-1.0)*r21*x10397*x10402))+((cj3*x10403))+(((-1.0)*cj2*x10398))+((x10393*x10400))+(((-1.0)*x10399))+((r20*x10392)));
evalcond[5]=(((r01*x10393))+(((-1.0)*r00*x10395*x10402))+((r01*x10391*x10392))+((cj0*x10399))+((sj1*x10396))+(((-1.0)*r02*sj3*x10404))+((r00*x10397)));
evalcond[6]=(((r01*x10395))+((cj1*x10396))+((r02*x10405))+((r00*x10391*x10393))+(((-1.0)*cj0*sj2*x10398))+(((-1.0)*r01*x10397*x10402))+((r00*x10392)));
evalcond[7]=(((sj0*x10399))+((r11*x10393))+((r10*x10397))+(((-1.0)*r12*sj3*x10404))+((x10392*x10401))+(((-1.0)*r10*x10395*x10402))+((sj1*x10394)));
evalcond[8]=(((r11*x10395))+((r10*x10391*x10393))+(((-1.0)*sj0*sj2*x10398))+((cj1*x10394))+(((-1.0)*x10397*x10401))+((r10*x10392))+((r12*x10405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10407 = IKatan2WithCheck(IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*gconst8*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10407.valid){
continue;
}
CheckValue<IkReal> x10408=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x10408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10407.value)+(((1.5707963267949)*(x10408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10409=IKcos(j4);
IkReal x10410=IKsin(j4);
IkReal x10411=(gconst7*sj3);
IkReal x10412=(cj3*gconst8);
IkReal x10413=(cj2*sj0);
IkReal x10414=(gconst8*sj3);
IkReal x10415=(cj0*cj2);
IkReal x10416=(cj3*gconst7);
IkReal x10417=((1.0)*sj1);
IkReal x10418=(cj1*sj2);
IkReal x10419=(r20*x10410);
IkReal x10420=(r11*x10410);
IkReal x10421=((1.0)*x10410);
IkReal x10422=(r22*x10409);
IkReal x10423=((1.0)*x10409);
IkReal x10424=(cj3*x10409);
IkReal x10425=(gconst7*x10409);
evalcond[0]=(((r22*x10410))+(((-1.0)*gconst8*r20*x10423))+((r21*x10425)));
evalcond[1]=(cj0+((r12*x10410))+((r11*x10425))+(((-1.0)*gconst8*r10*x10423)));
evalcond[2]=(((r01*x10425))+(((-1.0)*sj0))+(((-1.0)*gconst8*r00*x10423))+((r02*x10410)));
evalcond[3]=(((r21*x10412))+(((-1.0)*sj3*x10422))+(((-1.0)*sj2*x10417))+(((-1.0)*x10414*x10419))+((r20*x10416))+((cj1*cj2))+((r21*x10410*x10411)));
evalcond[4]=(((r21*x10414))+((cj3*x10422))+((x10412*x10419))+((r20*x10411))+(((-1.0)*x10418))+(((-1.0)*r21*x10416*x10421))+(((-1.0)*cj2*x10417)));
evalcond[5]=(((r01*x10410*x10411))+((r00*x10416))+((r01*x10412))+((cj0*x10418))+((sj1*x10415))+(((-1.0)*r00*x10414*x10421))+(((-1.0)*r02*sj3*x10423)));
evalcond[6]=((((-1.0)*cj0*sj2*x10417))+((r00*x10411))+((r01*x10414))+((r02*x10424))+((cj1*x10415))+(((-1.0)*r01*x10416*x10421))+((r00*x10410*x10412)));
evalcond[7]=((((-1.0)*r10*x10414*x10421))+((x10411*x10420))+(((-1.0)*r12*sj3*x10423))+((r11*x10412))+((sj1*x10413))+((r10*x10416))+((sj0*x10418)));
evalcond[8]=((((-1.0)*x10416*x10420))+((r10*x10410*x10412))+(((-1.0)*sj0*sj2*x10417))+((r12*x10424))+((r11*x10414))+((cj1*x10413))+((r10*x10411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10427)==0){
continue;
}
IkReal x10426=pow(x10427,-0.5);
CheckValue<IkReal> x10428 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10428.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10428.value))));
IkReal gconst10=((1.0)*r11*x10426);
IkReal gconst11=((-1.0)*r10*x10426);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10432 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10432.valid){
continue;
}
IkReal x10430=((1.0)*(x10432.value));
IkReal x10431=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10430)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10430)));
IkReal gconst10=((1.0)*r11*x10431);
IkReal gconst11=((-1.0)*r10*x10431);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
IkReal x10433=((1.0)*(x10435.value));
IkReal x10434=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10433)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10433)));
IkReal gconst10=((1.0)*r11*x10434);
IkReal gconst11=((-1.0)*r10*x10434);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10438 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10438.valid){
continue;
}
IkReal x10436=((1.0)*(x10438.value));
IkReal x10437=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10436)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10436)));
IkReal gconst10=((1.0)*r11*x10437);
IkReal gconst11=((-1.0)*r10*x10437);
IkReal x10439=r12*r12;
IkReal x10440=((1.0)*sj0);
IkReal x10441=(cj0*r02);
IkReal x10442=x10426;
j4eval[0]=((IKabs((((sj0*x10439*x10442))+(((-1.0)*x10440*x10442))+((r12*x10441*x10442)))))+(IKabs(((((-1.0)*x10441))+(((-1.0)*r12*x10440))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10443=(cj1*cj2);
IkReal x10444=(cj3*r02);
IkReal x10445=((2.0)*cj3);
IkReal x10446=(gconst10*r00*sj3);
IkReal x10447=(gconst11*r01*sj3);
IkReal x10448=((1.0)*sj1*sj2);
IkReal x10449=(x10446+x10447+x10443);
op[0]=((((-1.0)*x10444))+(((-1.0)*x10448))+x10449);
op[1]=(((gconst11*r00*x10445))+(((-1.0)*gconst10*r01*x10445)));
op[2]=((((-1.0)*x10448))+x10449+x10444);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10450=(gconst11*r10);
IkReal x10451=(gconst10*r11);
op[0]=((-1.0)+(((-1.0)*x10451))+x10450);
op[1]=((2.0)*r12);
op[2]=((-1.0)+(((-1.0)*x10450))+x10451);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
IkReal x10452=((1.0)*(x10454.value));
IkReal x10453=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10452)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10452)));
IkReal gconst10=((1.0)*r11*x10453);
IkReal gconst11=((-1.0)*r10*x10453);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
IkReal x10455=((1.0)*(x10457.value));
IkReal x10456=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10455)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10455)));
IkReal gconst10=((1.0)*r11*x10456);
IkReal gconst11=((-1.0)*r10*x10456);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10458=gconst10*gconst10;
IkReal x10459=gconst11*gconst11;
IkReal x10460=(r22*sj3);
IkReal x10461=(r00*sj3);
IkReal x10462=(cj3*r20);
IkReal x10463=(r01*sj3);
IkReal x10464=((1.0)*r00);
IkReal x10465=((1.0)*r20);
IkReal x10466=((1.0)*gconst11*r01);
IkReal x10467=(r21*x10458);
IkReal x10468=(gconst10*gconst11*r21);
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(((((-1.0)*x10459*x10463*x10465))+(((-1.0)*gconst10*gconst11*x10461*x10465))+((x10461*x10467))+((x10463*x10468)))),IkReal(((((-1.0)*x10460*x10466))+(((-1.0)*gconst10*x10460*x10464)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
CheckValue<IkReal> x10470=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*x10462*x10466))+((r00*x10459*x10462))+(((-1.0)*cj3*x10464*x10468))+((cj3*r02*r22))+((cj3*r01*x10467)))),-1);
if(!x10470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10469.value)+(((1.5707963267949)*(x10470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10471=IKcos(j4);
IkReal x10472=IKsin(j4);
IkReal x10473=(cj1*cj2);
IkReal x10474=(gconst10*sj3);
IkReal x10475=(cj3*gconst10);
IkReal x10476=(gconst11*r21);
IkReal x10477=(gconst11*r00);
IkReal x10478=(cj3*gconst11);
IkReal x10479=((1.0)*sj2);
IkReal x10480=(cj2*sj1);
IkReal x10481=(gconst11*sj3);
IkReal x10482=(sj1*x10479);
IkReal x10483=(gconst10*x10471);
IkReal x10484=((1.0)*x10471);
IkReal x10485=(r11*x10472);
IkReal x10486=(r21*x10472);
IkReal x10487=(cj3*x10471);
IkReal x10488=((1.0)*x10472);
evalcond[0]=((((-1.0)*gconst11*r20*x10484))+((r21*x10483))+((r22*x10472)));
evalcond[1]=(((r12*x10472))+((r11*x10483))+(((-1.0)*gconst11*r10*x10484)));
evalcond[2]=((-1.0)+(((-1.0)*x10477*x10484))+((r02*x10472))+((r01*x10483)));
evalcond[3]=(((r00*x10474))+((r02*x10487))+(((-1.0)*r01*x10475*x10488))+((cj3*x10472*x10477))+((r01*x10481)));
evalcond[4]=(((r01*x10478))+((r00*x10475))+((r01*x10472*x10474))+(((-1.0)*sj3*x10477*x10488))+(((-1.0)*r02*sj3*x10484)));
evalcond[5]=(((x10474*x10485))+((cj1*sj2))+((r11*x10478))+(((-1.0)*r12*sj3*x10484))+(((-1.0)*r10*x10481*x10488))+x10480+((r10*x10475)));
evalcond[6]=(((r12*x10487))+((r11*x10481))+(((-1.0)*x10475*x10485))+((r10*x10472*x10478))+(((-1.0)*x10482))+x10473+((r10*x10474)));
evalcond[7]=(((r20*x10475))+((x10474*x10486))+((cj3*x10476))+(((-1.0)*r22*sj3*x10484))+(((-1.0)*x10482))+x10473+(((-1.0)*r20*x10481*x10488)));
evalcond[8]=(((r20*x10474))+(((-1.0)*x10480))+((r22*x10487))+(((-1.0)*x10475*x10486))+(((-1.0)*cj1*x10479))+((r20*x10472*x10478))+((sj3*x10476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10489=((1.0)*gconst11);
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x10489)))),-1);
if(!x10490.valid){
continue;
}
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*r10*x10489)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10490.value)))+(x10491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10492=IKcos(j4);
IkReal x10493=IKsin(j4);
IkReal x10494=(cj1*cj2);
IkReal x10495=(gconst10*sj3);
IkReal x10496=(cj3*gconst10);
IkReal x10497=(gconst11*r21);
IkReal x10498=(gconst11*r00);
IkReal x10499=(cj3*gconst11);
IkReal x10500=((1.0)*sj2);
IkReal x10501=(cj2*sj1);
IkReal x10502=(gconst11*sj3);
IkReal x10503=(sj1*x10500);
IkReal x10504=(gconst10*x10492);
IkReal x10505=((1.0)*x10492);
IkReal x10506=(r11*x10493);
IkReal x10507=(r21*x10493);
IkReal x10508=(cj3*x10492);
IkReal x10509=((1.0)*x10493);
evalcond[0]=(((r22*x10493))+(((-1.0)*gconst11*r20*x10505))+((r21*x10504)));
evalcond[1]=(((r12*x10493))+(((-1.0)*gconst11*r10*x10505))+((r11*x10504)));
evalcond[2]=((-1.0)+(((-1.0)*x10498*x10505))+((r01*x10504))+((r02*x10493)));
evalcond[3]=(((r01*x10502))+((r02*x10508))+((cj3*x10493*x10498))+(((-1.0)*r01*x10496*x10509))+((r00*x10495)));
evalcond[4]=(((r01*x10499))+(((-1.0)*sj3*x10498*x10509))+(((-1.0)*r02*sj3*x10505))+((r01*x10493*x10495))+((r00*x10496)));
evalcond[5]=(((r10*x10496))+((cj1*sj2))+((r11*x10499))+(((-1.0)*r10*x10502*x10509))+(((-1.0)*r12*sj3*x10505))+x10501+((x10495*x10506)));
evalcond[6]=(((r10*x10495))+(((-1.0)*x10503))+(((-1.0)*x10496*x10506))+x10494+((r10*x10493*x10499))+((r11*x10502))+((r12*x10508)));
evalcond[7]=((((-1.0)*r22*sj3*x10505))+(((-1.0)*x10503))+((cj3*x10497))+(((-1.0)*r20*x10502*x10509))+x10494+((r20*x10496))+((x10495*x10507)));
evalcond[8]=(((sj3*x10497))+(((-1.0)*x10496*x10507))+((r20*x10493*x10499))+((r22*x10508))+(((-1.0)*x10501))+((r20*x10495))+(((-1.0)*cj1*x10500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10510=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10510.valid){
continue;
}
CheckValue<IkReal> x10511 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10510.value)))+(x10511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10512=IKcos(j4);
IkReal x10513=IKsin(j4);
IkReal x10514=(cj1*cj2);
IkReal x10515=(gconst10*sj3);
IkReal x10516=(cj3*gconst10);
IkReal x10517=(gconst11*r21);
IkReal x10518=(gconst11*r00);
IkReal x10519=(cj3*gconst11);
IkReal x10520=((1.0)*sj2);
IkReal x10521=(cj2*sj1);
IkReal x10522=(gconst11*sj3);
IkReal x10523=(sj1*x10520);
IkReal x10524=(gconst10*x10512);
IkReal x10525=((1.0)*x10512);
IkReal x10526=(r11*x10513);
IkReal x10527=(r21*x10513);
IkReal x10528=(cj3*x10512);
IkReal x10529=((1.0)*x10513);
evalcond[0]=(((r21*x10524))+(((-1.0)*gconst11*r20*x10525))+((r22*x10513)));
evalcond[1]=(((r12*x10513))+(((-1.0)*gconst11*r10*x10525))+((r11*x10524)));
evalcond[2]=((-1.0)+(((-1.0)*x10518*x10525))+((r01*x10524))+((r02*x10513)));
evalcond[3]=(((r02*x10528))+((r00*x10515))+((r01*x10522))+((cj3*x10513*x10518))+(((-1.0)*r01*x10516*x10529)));
evalcond[4]=((((-1.0)*sj3*x10518*x10529))+((r01*x10519))+((r00*x10516))+((r01*x10513*x10515))+(((-1.0)*r02*sj3*x10525)));
evalcond[5]=(((r10*x10516))+((cj1*sj2))+(((-1.0)*r10*x10522*x10529))+x10521+((x10515*x10526))+(((-1.0)*r12*sj3*x10525))+((r11*x10519)));
evalcond[6]=(((r10*x10515))+(((-1.0)*x10523))+x10514+((r12*x10528))+((r11*x10522))+((r10*x10513*x10519))+(((-1.0)*x10516*x10526)));
evalcond[7]=((((-1.0)*x10523))+(((-1.0)*r22*sj3*x10525))+((cj3*x10517))+((r20*x10516))+(((-1.0)*r20*x10522*x10529))+x10514+((x10515*x10527)));
evalcond[8]=((((-1.0)*cj1*x10520))+((r22*x10528))+((r20*x10513*x10519))+((r20*x10515))+((sj3*x10517))+(((-1.0)*x10521))+(((-1.0)*x10516*x10527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10532 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10532.valid){
continue;
}
IkReal x10530=((1.0)*(x10532.value));
IkReal x10531=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10530)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10530)));
IkReal gconst10=((1.0)*r11*x10531);
IkReal gconst11=((-1.0)*r10*x10531);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
IkReal x10533=((1.0)*(x10535.value));
IkReal x10534=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10533)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10533)));
IkReal gconst10=((1.0)*r11*x10534);
IkReal gconst11=((-1.0)*r10*x10534);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10536=gconst10*gconst10;
IkReal x10537=gconst11*gconst11;
IkReal x10538=(r22*sj3);
IkReal x10539=(r00*sj3);
IkReal x10540=(cj3*r20);
IkReal x10541=(r01*sj3);
IkReal x10542=((1.0)*r00);
IkReal x10543=((1.0)*r20);
IkReal x10544=((1.0)*gconst11*r01);
IkReal x10545=(r21*x10536);
IkReal x10546=(gconst10*gconst11*r21);
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal((((x10539*x10545))+(((-1.0)*gconst10*gconst11*x10539*x10543))+(((-1.0)*x10537*x10541*x10543))+((x10541*x10546)))),IkReal(((((-1.0)*x10538*x10544))+(((-1.0)*gconst10*x10538*x10542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
CheckValue<IkReal> x10548=IKPowWithIntegerCheck(IKsign((((r00*x10537*x10540))+((cj3*r01*x10545))+(((-1.0)*gconst10*x10540*x10544))+(((-1.0)*cj3*x10542*x10546))+((cj3*r02*r22)))),-1);
if(!x10548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10547.value)+(((1.5707963267949)*(x10548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10549=IKcos(j4);
IkReal x10550=IKsin(j4);
IkReal x10551=(gconst10*sj3);
IkReal x10552=(cj3*gconst10);
IkReal x10553=(sj1*sj2);
IkReal x10554=(gconst11*r21);
IkReal x10555=(gconst11*r00);
IkReal x10556=(cj3*gconst11);
IkReal x10557=(cj1*cj2);
IkReal x10558=(gconst11*sj3);
IkReal x10559=((1.0)*cj1*sj2);
IkReal x10560=((1.0)*cj2*sj1);
IkReal x10561=(gconst10*x10549);
IkReal x10562=((1.0)*x10549);
IkReal x10563=(r11*x10550);
IkReal x10564=(r21*x10550);
IkReal x10565=(cj3*x10549);
IkReal x10566=((1.0)*x10550);
IkReal x10567=(x10559+x10560);
evalcond[0]=(((r22*x10550))+((r21*x10561))+(((-1.0)*gconst11*r20*x10562)));
evalcond[1]=((((-1.0)*gconst11*r10*x10562))+((r12*x10550))+((r11*x10561)));
evalcond[2]=((1.0)+((r01*x10561))+((r02*x10550))+(((-1.0)*x10555*x10562)));
evalcond[3]=((((-1.0)*r01*x10552*x10566))+((r02*x10565))+((r01*x10558))+((r00*x10551))+((cj3*x10550*x10555)));
evalcond[4]=((((-1.0)*r02*sj3*x10562))+((r01*x10550*x10551))+((r01*x10556))+((r00*x10552))+(((-1.0)*sj3*x10555*x10566)));
evalcond[5]=((((-1.0)*x10552*x10563))+((r10*x10551))+((r10*x10550*x10556))+(((-1.0)*x10557))+((r11*x10558))+x10553+((r12*x10565)));
evalcond[6]=(((cj3*x10554))+((x10551*x10564))+(((-1.0)*r22*sj3*x10562))+(((-1.0)*x10553))+((r20*x10552))+(((-1.0)*r20*x10558*x10566))+x10557);
evalcond[7]=((((-1.0)*x10552*x10564))+(((-1.0)*x10567))+((r20*x10550*x10556))+((r20*x10551))+((sj3*x10554))+((r22*x10565)));
evalcond[8]=(((x10551*x10563))+(((-1.0)*r12*sj3*x10562))+((r10*x10552))+(((-1.0)*r10*x10558*x10566))+(((-1.0)*x10567))+((r11*x10556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10568=((1.0)*gconst11);
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x10568)))),-1);
if(!x10569.valid){
continue;
}
CheckValue<IkReal> x10570 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*r20*x10568)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10569.value)))+(x10570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10571=IKcos(j4);
IkReal x10572=IKsin(j4);
IkReal x10573=(gconst10*sj3);
IkReal x10574=(cj3*gconst10);
IkReal x10575=(sj1*sj2);
IkReal x10576=(gconst11*r21);
IkReal x10577=(gconst11*r00);
IkReal x10578=(cj3*gconst11);
IkReal x10579=(cj1*cj2);
IkReal x10580=(gconst11*sj3);
IkReal x10581=((1.0)*cj1*sj2);
IkReal x10582=((1.0)*cj2*sj1);
IkReal x10583=(gconst10*x10571);
IkReal x10584=((1.0)*x10571);
IkReal x10585=(r11*x10572);
IkReal x10586=(r21*x10572);
IkReal x10587=(cj3*x10571);
IkReal x10588=((1.0)*x10572);
IkReal x10589=(x10582+x10581);
evalcond[0]=(((r21*x10583))+((r22*x10572))+(((-1.0)*gconst11*r20*x10584)));
evalcond[1]=(((r11*x10583))+(((-1.0)*gconst11*r10*x10584))+((r12*x10572)));
evalcond[2]=((1.0)+(((-1.0)*x10577*x10584))+((r02*x10572))+((r01*x10583)));
evalcond[3]=((((-1.0)*r01*x10574*x10588))+((r00*x10573))+((r02*x10587))+((cj3*x10572*x10577))+((r01*x10580)));
evalcond[4]=(((r00*x10574))+((r01*x10578))+((r01*x10572*x10573))+(((-1.0)*sj3*x10577*x10588))+(((-1.0)*r02*sj3*x10584)));
evalcond[5]=(((r12*x10587))+((r10*x10572*x10578))+((r10*x10573))+((r11*x10580))+(((-1.0)*x10574*x10585))+(((-1.0)*x10579))+x10575);
evalcond[6]=(((r20*x10574))+((x10573*x10586))+((cj3*x10576))+(((-1.0)*r22*sj3*x10584))+(((-1.0)*x10575))+x10579+(((-1.0)*r20*x10580*x10588)));
evalcond[7]=(((r20*x10573))+(((-1.0)*x10574*x10586))+((r22*x10587))+(((-1.0)*x10589))+((sj3*x10576))+((r20*x10572*x10578)));
evalcond[8]=(((x10573*x10585))+((r10*x10574))+(((-1.0)*r12*sj3*x10584))+(((-1.0)*r10*x10580*x10588))+(((-1.0)*x10589))+((r11*x10578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
CheckValue<IkReal> x10591=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x10591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10590.value)+(((1.5707963267949)*(x10591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10592=IKcos(j4);
IkReal x10593=IKsin(j4);
IkReal x10594=(gconst10*sj3);
IkReal x10595=(cj3*gconst10);
IkReal x10596=(sj1*sj2);
IkReal x10597=(gconst11*r21);
IkReal x10598=(gconst11*r00);
IkReal x10599=(cj3*gconst11);
IkReal x10600=(cj1*cj2);
IkReal x10601=(gconst11*sj3);
IkReal x10602=((1.0)*cj1*sj2);
IkReal x10603=((1.0)*cj2*sj1);
IkReal x10604=(gconst10*x10592);
IkReal x10605=((1.0)*x10592);
IkReal x10606=(r11*x10593);
IkReal x10607=(r21*x10593);
IkReal x10608=(cj3*x10592);
IkReal x10609=((1.0)*x10593);
IkReal x10610=(x10602+x10603);
evalcond[0]=(((r21*x10604))+(((-1.0)*gconst11*r20*x10605))+((r22*x10593)));
evalcond[1]=(((r11*x10604))+((r12*x10593))+(((-1.0)*gconst11*r10*x10605)));
evalcond[2]=((1.0)+(((-1.0)*x10598*x10605))+((r01*x10604))+((r02*x10593)));
evalcond[3]=(((r01*x10601))+((r00*x10594))+((r02*x10608))+((cj3*x10593*x10598))+(((-1.0)*r01*x10595*x10609)));
evalcond[4]=(((r00*x10595))+((r01*x10599))+((r01*x10593*x10594))+(((-1.0)*sj3*x10598*x10609))+(((-1.0)*r02*sj3*x10605)));
evalcond[5]=(((r11*x10601))+((r12*x10608))+(((-1.0)*x10600))+(((-1.0)*x10595*x10606))+((r10*x10593*x10599))+x10596+((r10*x10594)));
evalcond[6]=((((-1.0)*r20*x10601*x10609))+((cj3*x10597))+((x10594*x10607))+(((-1.0)*x10596))+((r20*x10595))+(((-1.0)*r22*sj3*x10605))+x10600);
evalcond[7]=(((sj3*x10597))+((r20*x10594))+((r22*x10608))+(((-1.0)*x10595*x10607))+((r20*x10593*x10599))+(((-1.0)*x10610)));
evalcond[8]=(((r11*x10599))+((x10594*x10606))+(((-1.0)*x10610))+(((-1.0)*r12*sj3*x10605))+((r10*x10595))+(((-1.0)*r10*x10601*x10609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
IkReal x10611=((1.0)*(x10613.value));
IkReal x10612=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10611)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10612);
rxp1_1=(px*r21);
rxp1_2=(r11*x10612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10611)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10616 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10616.valid){
continue;
}
IkReal x10614=((1.0)*(x10616.value));
IkReal x10615=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10614)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10615);
rxp1_1=(px*r21);
rxp1_2=(r11*x10615);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10614)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x10617=((1.0)*sj3);
j4eval[0]=(((r10*r20*x10617))+((r11*r21*x10617)));
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
IkReal x10618=((1.0)*(x10620.value));
IkReal x10619=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10618)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10619);
rxp1_1=(px*r21);
rxp1_2=(r11*x10619);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10618)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10623 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10623.valid){
continue;
}
IkReal x10621=((1.0)*(x10623.value));
IkReal x10622=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10621)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10622);
rxp1_1=(px*r21);
rxp1_2=(r11*x10622);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10621)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10626 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10626.valid){
continue;
}
IkReal x10624=((1.0)*(x10626.value));
IkReal x10625=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10624)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10625);
rxp1_1=(px*r21);
rxp1_2=(r11*x10625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10624)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10629 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10629.valid){
continue;
}
IkReal x10627=((1.0)*(x10629.value));
IkReal x10628=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10627)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10628);
rxp1_1=(px*r21);
rxp1_2=(r11*x10628);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10627)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x10632.valid){
continue;
}
IkReal x10630=x10632.value;
IkReal x10631=(sj0*x10630);
sj4array[0]=(((sj1*sj2*x10631))+(((-1.0)*cj1*cj2*x10631)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10633=IKcos(j4);
IkReal x10634=IKsin(j4);
IkReal x10635=(gconst11*r20);
IkReal x10636=(gconst10*x10633);
IkReal x10637=((1.0)*x10633);
evalcond[0]=(r02*x10633);
evalcond[1]=((((-1.0)*sj0))+((r02*x10634)));
evalcond[2]=((((-1.0)*x10635*x10637))+((r21*x10636)));
evalcond[3]=((((-1.0)*gconst11*r10*x10637))+((r11*x10636)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x10634*x10635))+(((-1.0)*gconst10*r21*x10634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10639=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x10639.valid){
continue;
}
IkReal x10638=x10639.value;
sj4array[0]=(((cj1*sj2*x10638))+((cj2*sj1*x10638)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10640=IKcos(j4);
IkReal x10641=IKsin(j4);
IkReal x10642=((1.0)*sj0);
IkReal x10643=(gconst10*x10640);
IkReal x10644=((1.0)*gconst11*x10640);
evalcond[0]=(r02*x10640);
evalcond[1]=((((-1.0)*x10642))+((r02*x10641)));
evalcond[2]=(((r21*x10643))+(((-1.0)*r20*x10644)));
evalcond[3]=((((-1.0)*r10*x10644))+((r11*x10643)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst11*r10*x10641))+(((-1.0)*gconst10*r11*x10641))+(((-1.0)*sj1*sj2*x10642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10645=IKPowWithIntegerCheck(r02,-1);
if(!x10645.valid){
continue;
}
sj4array[0]=(sj0*(x10645.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10646=IKcos(j4);
IkReal x10647=IKsin(j4);
IkReal x10648=((1.0)*sj2);
IkReal x10649=(gconst10*x10646);
IkReal x10650=(gconst11*x10647);
IkReal x10651=((1.0)*gconst11*x10646);
IkReal x10652=((1.0)*gconst10*x10647);
evalcond[0]=(r02*x10646);
evalcond[1]=(((r21*x10649))+(((-1.0)*r20*x10651)));
evalcond[2]=((((-1.0)*r10*x10651))+((r11*x10649)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x10652))+((r20*x10650))+(((-1.0)*cj1*x10648)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj1*x10648))+((r10*x10650))+(((-1.0)*r11*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10653=((1.0)*(x10655.value));
IkReal x10654=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10653)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10654);
rxp1_1=(px*r21);
rxp1_2=(r11*x10654);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10656=((1.0)*(x10658.value));
IkReal x10657=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10656)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10657);
rxp1_1=(px*r21);
rxp1_2=(r11*x10657);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10659=((1.0)*(x10661.value));
IkReal x10660=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10659)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10660);
rxp1_1=(px*r21);
rxp1_2=(r11*x10660);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10659)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10664=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10664.valid){
continue;
}
IkReal x10662=x10664.value;
IkReal x10663=(sj0*x10662);
sj4array[0]=(((sj1*sj2*x10663))+(((-1.0)*cj1*cj2*x10663)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10665=IKcos(j4);
IkReal x10666=IKsin(j4);
IkReal x10667=(gconst10*r21);
IkReal x10668=((1.0)*gconst11*x10665);
evalcond[0]=((-1.0)*r02*x10665);
evalcond[1]=((((-1.0)*sj0))+((r02*x10666)));
evalcond[2]=((((-1.0)*r20*x10668))+((x10665*x10667)));
evalcond[3]=(((gconst10*r11*x10665))+(((-1.0)*r10*x10668)));
evalcond[4]=(((x10666*x10667))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r20*x10666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10670=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x10670.valid){
continue;
}
IkReal x10669=x10670.value;
sj4array[0]=(((cj1*sj2*x10669))+((cj2*sj1*x10669)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10671=IKcos(j4);
IkReal x10672=IKsin(j4);
IkReal x10673=((1.0)*sj0);
IkReal x10674=(gconst10*x10671);
IkReal x10675=((1.0)*gconst11*x10671);
evalcond[0]=((-1.0)*r02*x10671);
evalcond[1]=(((r02*x10672))+(((-1.0)*x10673)));
evalcond[2]=((((-1.0)*r20*x10675))+((r21*x10674)));
evalcond[3]=(((r11*x10674))+(((-1.0)*r10*x10675)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x10673))+(((-1.0)*gconst11*r10*x10672))+((gconst10*r11*x10672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10676=IKPowWithIntegerCheck(r02,-1);
if(!x10676.valid){
continue;
}
sj4array[0]=(sj0*(x10676.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10677=IKcos(j4);
IkReal x10678=IKsin(j4);
IkReal x10679=(gconst10*r21);
IkReal x10680=((1.0)*sj1);
IkReal x10681=(gconst10*r11);
IkReal x10682=((1.0)*gconst11*x10677);
IkReal x10683=((1.0)*gconst11*x10678);
evalcond[0]=((-1.0)*r02*x10677);
evalcond[1]=(((x10677*x10679))+(((-1.0)*r20*x10682)));
evalcond[2]=(((x10677*x10681))+(((-1.0)*r10*x10682)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x10678*x10679))+(((-1.0)*cj2*x10680))+(((-1.0)*r20*x10683)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10680))+((x10678*x10681))+(((-1.0)*r10*x10683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(r02,-1);
if(!x10685.valid){
continue;
}
IkReal x10684=x10685.value;
CheckValue<IkReal> x10686=IKPowWithIntegerCheck(sj3,-1);
if(!x10686.valid){
continue;
}
if( IKabs((sj0*x10684)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10684*(x10686.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10684))+IKsqr((x10684*(x10686.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10684), (x10684*(x10686.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10687=IKcos(j4);
IkReal x10688=IKsin(j4);
IkReal x10689=(cj3*gconst10);
IkReal x10690=(gconst10*r21);
IkReal x10691=(cj2*sj0);
IkReal x10692=(gconst11*r21);
IkReal x10693=(gconst10*r11);
IkReal x10694=(gconst11*r11);
IkReal x10695=((1.0)*sj2);
IkReal x10696=(gconst10*sj3);
IkReal x10697=((1.0)*gconst11);
IkReal x10698=(cj0*cj2);
IkReal x10699=(cj1*sj2);
IkReal x10700=(sj3*x10688);
IkReal x10701=((1.0)*x10688);
IkReal x10702=(r02*x10687);
IkReal x10703=(cj3*gconst11*x10688);
evalcond[0]=((((-1.0)*sj0))+((r02*x10688)));
evalcond[1]=((((-1.0)*r20*x10687*x10697))+((x10687*x10690)));
evalcond[2]=(cj0+(((-1.0)*r10*x10687*x10697))+((x10687*x10693)));
evalcond[3]=(((cj0*x10699))+((sj1*x10698))+(((-1.0)*sj3*x10702)));
evalcond[4]=((((-1.0)*cj0*sj1*x10695))+((cj3*x10702))+((cj1*x10698)));
evalcond[5]=(((cj3*x10692))+((r20*x10689))+((x10690*x10700))+(((-1.0)*r20*x10697*x10700))+((cj1*cj2))+(((-1.0)*sj1*x10695)));
evalcond[6]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x10689*x10701))+(((-1.0)*cj1*x10695))+((sj3*x10692))+((r20*x10703))+((r20*x10696)));
evalcond[7]=(((cj3*x10694))+((x10693*x10700))+(((-1.0)*r10*x10697*x10700))+((sj0*x10699))+((sj1*x10691))+((r10*x10689)));
evalcond[8]=((((-1.0)*sj0*sj1*x10695))+((r10*x10696))+((cj1*x10691))+(((-1.0)*r11*x10689*x10701))+((r10*x10703))+((sj3*x10694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10704=((1.0)*gconst11);
CheckValue<IkReal> x10705=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x10704))+((gconst10*r21*sj3))),-1);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x10704))),-1);
if(!x10706.valid){
continue;
}
if( IKabs(((x10705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10704))+(((-1.0)*cj3*gconst10*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10704))+(((-1.0)*cj3*gconst10*r20))))))+IKsqr(((-1.0)*cj0*(x10706.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10705.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10704))+(((-1.0)*cj3*gconst10*r20))))), ((-1.0)*cj0*(x10706.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10707=IKcos(j4);
IkReal x10708=IKsin(j4);
IkReal x10709=(cj3*gconst10);
IkReal x10710=(gconst10*r21);
IkReal x10711=(cj2*sj0);
IkReal x10712=(gconst11*r21);
IkReal x10713=(gconst10*r11);
IkReal x10714=(gconst11*r11);
IkReal x10715=((1.0)*sj2);
IkReal x10716=(gconst10*sj3);
IkReal x10717=((1.0)*gconst11);
IkReal x10718=(cj0*cj2);
IkReal x10719=(cj1*sj2);
IkReal x10720=(sj3*x10708);
IkReal x10721=((1.0)*x10708);
IkReal x10722=(r02*x10707);
IkReal x10723=(cj3*gconst11*x10708);
evalcond[0]=((((-1.0)*sj0))+((r02*x10708)));
evalcond[1]=((((-1.0)*r20*x10707*x10717))+((x10707*x10710)));
evalcond[2]=(cj0+(((-1.0)*r10*x10707*x10717))+((x10707*x10713)));
evalcond[3]=(((cj0*x10719))+(((-1.0)*sj3*x10722))+((sj1*x10718)));
evalcond[4]=(((cj1*x10718))+(((-1.0)*cj0*sj1*x10715))+((cj3*x10722)));
evalcond[5]=(((cj3*x10712))+(((-1.0)*r20*x10717*x10720))+(((-1.0)*sj1*x10715))+((x10710*x10720))+((cj1*cj2))+((r20*x10709)));
evalcond[6]=((((-1.0)*cj1*x10715))+(((-1.0)*r21*x10709*x10721))+(((-1.0)*cj2*sj1))+((r20*x10716))+((r20*x10723))+((sj3*x10712)));
evalcond[7]=(((x10713*x10720))+(((-1.0)*r10*x10717*x10720))+((cj3*x10714))+((r10*x10709))+((sj1*x10711))+((sj0*x10719)));
evalcond[8]=(((r10*x10723))+((cj1*x10711))+(((-1.0)*r11*x10709*x10721))+(((-1.0)*sj0*sj1*x10715))+((sj3*x10714))+((r10*x10716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10724=IKPowWithIntegerCheck(r02,-1);
if(!x10724.valid){
continue;
}
CheckValue<IkReal> x10725=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10725.valid){
continue;
}
if( IKabs((sj0*(x10724.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10724.value)))+IKsqr(((-1.0)*cj0*(x10725.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10724.value)), ((-1.0)*cj0*(x10725.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10726=IKcos(j4);
IkReal x10727=IKsin(j4);
IkReal x10728=(cj3*gconst10);
IkReal x10729=(gconst10*r21);
IkReal x10730=(cj2*sj0);
IkReal x10731=(gconst11*r21);
IkReal x10732=(gconst10*r11);
IkReal x10733=(gconst11*r11);
IkReal x10734=((1.0)*sj2);
IkReal x10735=(gconst10*sj3);
IkReal x10736=((1.0)*gconst11);
IkReal x10737=(cj0*cj2);
IkReal x10738=(cj1*sj2);
IkReal x10739=(sj3*x10727);
IkReal x10740=((1.0)*x10727);
IkReal x10741=(r02*x10726);
IkReal x10742=(cj3*gconst11*x10727);
evalcond[0]=((((-1.0)*sj0))+((r02*x10727)));
evalcond[1]=((((-1.0)*r20*x10726*x10736))+((x10726*x10729)));
evalcond[2]=(cj0+(((-1.0)*r10*x10726*x10736))+((x10726*x10732)));
evalcond[3]=((((-1.0)*sj3*x10741))+((cj0*x10738))+((sj1*x10737)));
evalcond[4]=(((cj3*x10741))+((cj1*x10737))+(((-1.0)*cj0*sj1*x10734)));
evalcond[5]=(((x10729*x10739))+((r20*x10728))+(((-1.0)*sj1*x10734))+(((-1.0)*r20*x10736*x10739))+((cj1*cj2))+((cj3*x10731)));
evalcond[6]=((((-1.0)*cj2*sj1))+((r20*x10735))+((r20*x10742))+(((-1.0)*cj1*x10734))+(((-1.0)*r21*x10728*x10740))+((sj3*x10731)));
evalcond[7]=(((r10*x10728))+((x10732*x10739))+((sj0*x10738))+((sj1*x10730))+((cj3*x10733))+(((-1.0)*r10*x10736*x10739)));
evalcond[8]=(((r10*x10735))+((r10*x10742))+(((-1.0)*r11*x10728*x10740))+(((-1.0)*sj0*sj1*x10734))+((cj1*x10730))+((sj3*x10733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10745 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10745.valid){
continue;
}
IkReal x10743=((1.0)*(x10745.value));
IkReal x10744=x10426;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10743)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10743)));
IkReal gconst10=((1.0)*r11*x10744);
IkReal gconst11=((-1.0)*r10*x10744);
IkReal x10746=r12*r12;
IkReal x10747=((1.0)*sj0);
IkReal x10748=(cj0*r02);
IkReal x10749=x10426;
j4eval[0]=((IKabs(((((-1.0)*x10747*x10749))+((r12*x10748*x10749))+((sj0*x10746*x10749)))))+(IKabs(((((-1.0)*x10748))+(((-1.0)*r12*x10747))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10750=(sj1*sj2);
IkReal x10751=(r21*sj3);
IkReal x10752=((1.0)*gconst11);
IkReal x10753=(cj3*r21);
IkReal x10754=(r20*sj3);
IkReal x10755=((1.0)*gconst10);
IkReal x10756=(cj3*r20);
IkReal x10757=(cj1*cj2);
CheckValue<IkReal> x10758=IKPowWithIntegerCheck((((gconst10*x10751))+(((-1.0)*x10752*x10754))),-1);
if(!x10758.valid){
continue;
}
CheckValue<IkReal> x10759=IKPowWithIntegerCheck((((r11*x10751*(gconst10*gconst10)))+(((-1.0)*gconst10*r10*x10751*x10752))+(((-1.0)*gconst10*r11*x10752*x10754))+((r10*x10754*(gconst11*gconst11)))),-1);
if(!x10759.valid){
continue;
}
if( IKabs(((x10758.value)*(((((-1.0)*x10755*x10756))+(((-1.0)*x10752*x10753))+x10750+(((-1.0)*x10757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10759.value)*((((gconst10*r12*x10756))+((cj0*gconst11*x10754))+(((-1.0)*cj0*x10751*x10755))+(((-1.0)*r12*x10750))+((gconst11*r12*x10753))+((r12*x10757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10758.value)*(((((-1.0)*x10755*x10756))+(((-1.0)*x10752*x10753))+x10750+(((-1.0)*x10757))))))+IKsqr(((x10759.value)*((((gconst10*r12*x10756))+((cj0*gconst11*x10754))+(((-1.0)*cj0*x10751*x10755))+(((-1.0)*r12*x10750))+((gconst11*r12*x10753))+((r12*x10757))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10758.value)*(((((-1.0)*x10755*x10756))+(((-1.0)*x10752*x10753))+x10750+(((-1.0)*x10757))))), ((x10759.value)*((((gconst10*r12*x10756))+((cj0*gconst11*x10754))+(((-1.0)*cj0*x10751*x10755))+(((-1.0)*r12*x10750))+((gconst11*r12*x10753))+((r12*x10757))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10760=IKcos(j4);
IkReal x10761=IKsin(j4);
IkReal x10762=(gconst10*sj3);
IkReal x10763=(cj3*gconst10);
IkReal x10764=(cj3*gconst11);
IkReal x10765=(cj2*sj0);
IkReal x10766=((1.0)*gconst11);
IkReal x10767=(gconst11*sj3);
IkReal x10768=((1.0)*sj2);
IkReal x10769=(cj0*cj2);
IkReal x10770=(cj1*sj2);
IkReal x10771=(gconst10*x10760);
IkReal x10772=(r00*x10761);
IkReal x10773=(r11*x10761);
IkReal x10774=(r21*x10761);
IkReal x10775=(sj3*x10761);
IkReal x10776=(r01*x10761);
IkReal x10777=(cj3*x10760);
IkReal x10778=((1.0)*sj3*x10760);
evalcond[0]=((((-1.0)*r20*x10760*x10766))+((r21*x10771)));
evalcond[1]=(((r12*x10761))+((r11*x10771))+cj0+(((-1.0)*r10*x10760*x10766)));
evalcond[2]=((((-1.0)*r00*x10760*x10766))+(((-1.0)*sj0))+((r01*x10771))+((r02*x10761)));
evalcond[3]=(((r20*x10763))+(((-1.0)*sj1*x10768))+((r21*x10764))+(((-1.0)*r20*x10766*x10775))+((x10762*x10774))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj1*x10768))+(((-1.0)*cj2*sj1))+((r20*x10762))+((r20*x10761*x10764))+((r21*x10767))+(((-1.0)*x10763*x10774)));
evalcond[5]=((((-1.0)*r02*x10778))+(((-1.0)*sj3*x10766*x10772))+((r01*x10764))+((r00*x10763))+((x10762*x10776))+((cj0*x10770))+((sj1*x10769)));
evalcond[6]=(((cj1*x10769))+((r01*x10767))+(((-1.0)*x10763*x10776))+((r00*x10762))+(((-1.0)*cj0*sj1*x10768))+((r02*x10777))+((x10764*x10772)));
evalcond[7]=(((sj0*x10770))+(((-1.0)*r12*x10778))+((r11*x10764))+((x10762*x10773))+(((-1.0)*r10*x10766*x10775))+((r10*x10763))+((sj1*x10765)));
evalcond[8]=(((r10*x10761*x10764))+((cj1*x10765))+((r12*x10777))+((r11*x10767))+(((-1.0)*sj0*sj1*x10768))+(((-1.0)*x10763*x10773))+((r10*x10762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10779=((1.0)*sj0);
IkReal x10780=((1.0)*cj0);
CheckValue<IkReal> x10781=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10781.valid){
continue;
}
CheckValue<IkReal> x10782 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x10779))+(((-1.0)*gconst11*r00*x10780))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IkReal(((((-1.0)*r12*x10779))+(((-1.0)*r02*x10780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10781.value)))+(x10782.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10783=IKcos(j4);
IkReal x10784=IKsin(j4);
IkReal x10785=(gconst10*sj3);
IkReal x10786=(cj3*gconst10);
IkReal x10787=(cj3*gconst11);
IkReal x10788=(cj2*sj0);
IkReal x10789=((1.0)*gconst11);
IkReal x10790=(gconst11*sj3);
IkReal x10791=((1.0)*sj2);
IkReal x10792=(cj0*cj2);
IkReal x10793=(cj1*sj2);
IkReal x10794=(gconst10*x10783);
IkReal x10795=(r00*x10784);
IkReal x10796=(r11*x10784);
IkReal x10797=(r21*x10784);
IkReal x10798=(sj3*x10784);
IkReal x10799=(r01*x10784);
IkReal x10800=(cj3*x10783);
IkReal x10801=((1.0)*sj3*x10783);
evalcond[0]=(((r21*x10794))+(((-1.0)*r20*x10783*x10789)));
evalcond[1]=(cj0+((r12*x10784))+((r11*x10794))+(((-1.0)*r10*x10783*x10789)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10784))+(((-1.0)*r00*x10783*x10789))+((r01*x10794)));
evalcond[3]=(((r21*x10787))+((r20*x10786))+((x10785*x10797))+((cj1*cj2))+(((-1.0)*sj1*x10791))+(((-1.0)*r20*x10789*x10798)));
evalcond[4]=((((-1.0)*cj2*sj1))+((r21*x10790))+((r20*x10784*x10787))+(((-1.0)*cj1*x10791))+((r20*x10785))+(((-1.0)*x10786*x10797)));
evalcond[5]=(((cj0*x10793))+(((-1.0)*r02*x10801))+((r01*x10787))+((x10785*x10799))+((sj1*x10792))+(((-1.0)*sj3*x10789*x10795))+((r00*x10786)));
evalcond[6]=((((-1.0)*cj0*sj1*x10791))+((x10787*x10795))+((r02*x10800))+((cj1*x10792))+((r00*x10785))+((r01*x10790))+(((-1.0)*x10786*x10799)));
evalcond[7]=(((r11*x10787))+((sj1*x10788))+((x10785*x10796))+(((-1.0)*r10*x10789*x10798))+((sj0*x10793))+(((-1.0)*r12*x10801))+((r10*x10786)));
evalcond[8]=(((r10*x10784*x10787))+(((-1.0)*sj0*sj1*x10791))+((r12*x10800))+((cj1*x10788))+((r11*x10790))+((r10*x10785))+(((-1.0)*x10786*x10796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10802=((1.0)*sj0);
IkReal x10803=((1.0)*cj0);
CheckValue<IkReal> x10804=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10804.valid){
continue;
}
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r00*x10803))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r10*x10802)))),IkReal(((((-1.0)*r02*x10803))+(((-1.0)*r12*x10802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10804.value)))+(x10805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10806=IKcos(j4);
IkReal x10807=IKsin(j4);
IkReal x10808=(gconst10*sj3);
IkReal x10809=(cj3*gconst10);
IkReal x10810=(cj3*gconst11);
IkReal x10811=(cj2*sj0);
IkReal x10812=((1.0)*gconst11);
IkReal x10813=(gconst11*sj3);
IkReal x10814=((1.0)*sj2);
IkReal x10815=(cj0*cj2);
IkReal x10816=(cj1*sj2);
IkReal x10817=(gconst10*x10806);
IkReal x10818=(r00*x10807);
IkReal x10819=(r11*x10807);
IkReal x10820=(r21*x10807);
IkReal x10821=(r22*x10806);
IkReal x10822=(sj3*x10807);
IkReal x10823=(r01*x10807);
IkReal x10824=(cj3*x10806);
IkReal x10825=((1.0)*sj3*x10806);
evalcond[0]=(((r22*x10807))+(((-1.0)*r20*x10806*x10812))+((r21*x10817)));
evalcond[1]=(cj0+((r12*x10807))+(((-1.0)*r10*x10806*x10812))+((r11*x10817)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10807))+(((-1.0)*r00*x10806*x10812))+((r01*x10817)));
evalcond[3]=(((r20*x10809))+(((-1.0)*sj3*x10821))+((x10808*x10820))+(((-1.0)*sj1*x10814))+((cj1*cj2))+(((-1.0)*r20*x10812*x10822))+((r21*x10810)));
evalcond[4]=(((r20*x10808))+(((-1.0)*cj1*x10814))+(((-1.0)*cj2*sj1))+((r20*x10807*x10810))+((cj3*x10821))+(((-1.0)*x10809*x10820))+((r21*x10813)));
evalcond[5]=((((-1.0)*r02*x10825))+((sj1*x10815))+((x10808*x10823))+((r00*x10809))+((cj0*x10816))+(((-1.0)*sj3*x10812*x10818))+((r01*x10810)));
evalcond[6]=(((cj1*x10815))+(((-1.0)*cj0*sj1*x10814))+((r02*x10824))+((x10810*x10818))+((r00*x10808))+((r01*x10813))+(((-1.0)*x10809*x10823)));
evalcond[7]=(((sj0*x10816))+((sj1*x10811))+((r10*x10809))+(((-1.0)*r12*x10825))+((x10808*x10819))+(((-1.0)*r10*x10812*x10822))+((r11*x10810)));
evalcond[8]=(((r12*x10824))+((cj1*x10811))+((r10*x10808))+(((-1.0)*sj0*sj1*x10814))+((r10*x10807*x10810))+((r11*x10813))+(((-1.0)*x10809*x10819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
CheckValue<IkReal> x10827=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10826.value)+(((1.5707963267949)*(x10827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10828=IKcos(j4);
IkReal x10829=IKsin(j4);
IkReal x10830=(gconst10*sj3);
IkReal x10831=(cj3*gconst10);
IkReal x10832=(cj3*gconst11);
IkReal x10833=(cj2*sj0);
IkReal x10834=((1.0)*gconst11);
IkReal x10835=(gconst11*sj3);
IkReal x10836=((1.0)*sj2);
IkReal x10837=(cj0*cj2);
IkReal x10838=(cj1*sj2);
IkReal x10839=(gconst10*x10828);
IkReal x10840=(r00*x10829);
IkReal x10841=(r11*x10829);
IkReal x10842=(r21*x10829);
IkReal x10843=(r22*x10828);
IkReal x10844=(sj3*x10829);
IkReal x10845=(r01*x10829);
IkReal x10846=(cj3*x10828);
IkReal x10847=((1.0)*sj3*x10828);
evalcond[0]=((((-1.0)*r20*x10828*x10834))+((r21*x10839))+((r22*x10829)));
evalcond[1]=(((r12*x10829))+cj0+(((-1.0)*r10*x10828*x10834))+((r11*x10839)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10829))+((r01*x10839))+(((-1.0)*r00*x10828*x10834)));
evalcond[3]=((((-1.0)*sj3*x10843))+((x10830*x10842))+(((-1.0)*r20*x10834*x10844))+((r20*x10831))+((cj1*cj2))+(((-1.0)*sj1*x10836))+((r21*x10832)));
evalcond[4]=((((-1.0)*cj2*sj1))+((cj3*x10843))+((r20*x10829*x10832))+((r20*x10830))+((r21*x10835))+(((-1.0)*x10831*x10842))+(((-1.0)*cj1*x10836)));
evalcond[5]=(((sj1*x10837))+(((-1.0)*r02*x10847))+((cj0*x10838))+((x10830*x10845))+(((-1.0)*sj3*x10834*x10840))+((r01*x10832))+((r00*x10831)));
evalcond[6]=(((x10832*x10840))+(((-1.0)*cj0*sj1*x10836))+((r02*x10846))+((r01*x10835))+((r00*x10830))+((cj1*x10837))+(((-1.0)*x10831*x10845)));
evalcond[7]=(((sj1*x10833))+(((-1.0)*r10*x10834*x10844))+((x10830*x10841))+((r10*x10831))+(((-1.0)*r12*x10847))+((sj0*x10838))+((r11*x10832)));
evalcond[8]=((((-1.0)*sj0*sj1*x10836))+((r10*x10830))+((r10*x10829*x10832))+((r12*x10846))+((cj1*x10833))+(((-1.0)*x10831*x10841))+((r11*x10835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
CheckValue<IkReal> x10849=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x10849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10848.value)+(((1.5707963267949)*(x10849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10850=IKcos(j4);
IkReal x10851=IKsin(j4);
IkReal x10852=(gconst10*sj3);
IkReal x10853=(cj3*gconst10);
IkReal x10854=(cj3*gconst11);
IkReal x10855=(cj2*sj0);
IkReal x10856=((1.0)*gconst11);
IkReal x10857=(gconst11*sj3);
IkReal x10858=((1.0)*sj2);
IkReal x10859=(cj0*cj2);
IkReal x10860=(cj1*sj2);
IkReal x10861=(gconst10*x10850);
IkReal x10862=(r00*x10851);
IkReal x10863=(r11*x10851);
IkReal x10864=(r21*x10851);
IkReal x10865=(r22*x10850);
IkReal x10866=(sj3*x10851);
IkReal x10867=(r01*x10851);
IkReal x10868=(cj3*x10850);
IkReal x10869=((1.0)*sj3*x10850);
evalcond[0]=((((-1.0)*r20*x10850*x10856))+((r21*x10861))+((r22*x10851)));
evalcond[1]=(((r11*x10861))+cj0+((r12*x10851))+(((-1.0)*r10*x10850*x10856)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10861))+(((-1.0)*r00*x10850*x10856))+((r02*x10851)));
evalcond[3]=((((-1.0)*r20*x10856*x10866))+((r21*x10854))+((r20*x10853))+(((-1.0)*sj3*x10865))+(((-1.0)*sj1*x10858))+((cj1*cj2))+((x10852*x10864)));
evalcond[4]=(((r21*x10857))+(((-1.0)*cj2*sj1))+(((-1.0)*x10853*x10864))+((r20*x10852))+((cj3*x10865))+(((-1.0)*cj1*x10858))+((r20*x10851*x10854)));
evalcond[5]=(((sj1*x10859))+((cj0*x10860))+((r01*x10854))+(((-1.0)*r02*x10869))+((r00*x10853))+(((-1.0)*sj3*x10856*x10862))+((x10852*x10867)));
evalcond[6]=(((x10854*x10862))+(((-1.0)*x10853*x10867))+((r01*x10857))+((cj1*x10859))+((r00*x10852))+(((-1.0)*cj0*sj1*x10858))+((r02*x10868)));
evalcond[7]=((((-1.0)*r12*x10869))+((r11*x10854))+(((-1.0)*r10*x10856*x10866))+((sj0*x10860))+((sj1*x10855))+((r10*x10853))+((x10852*x10863)));
evalcond[8]=(((r11*x10857))+((r10*x10851*x10854))+((r12*x10868))+(((-1.0)*x10853*x10863))+((r10*x10852))+((cj1*x10855))+(((-1.0)*sj0*sj1*x10858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10870=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10870;
j4eval[1]=IKsign(x10870);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10871=((1.0)*cj5);
IkReal x10872=((((-1.0)*r21*x10871))+(((-1.0)*r20*sj5)));
j4eval[0]=x10872;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10871))))));
j4eval[2]=IKsign(x10872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10873=cj5*cj5;
IkReal x10874=(cj3*r11*r21);
IkReal x10875=((1.0)*cj3*cj5*sj5);
IkReal x10876=(((cj3*r12*r22))+(((-1.0)*r11*r20*x10875))+((cj3*r10*r20*x10873))+(((-1.0)*r10*r21*x10875))+(((-1.0)*x10873*x10874))+x10874);
j4eval[0]=x10876;
j4eval[1]=IKsign(x10876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10877=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10877;
j4eval[1]=IKsign(x10877);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10878=((1.0)*cj5);
IkReal x10879=((((-1.0)*r21*x10878))+(((-1.0)*r20*sj5)));
j4eval[0]=x10879;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10878))))));
j4eval[2]=IKsign(x10879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10880=cj5*cj5;
IkReal x10881=r11*r11;
IkReal x10882=(cj5*r10);
IkReal x10883=(r11*sj5);
IkReal x10884=((((-1.0)*x10880*(r10*r10)))+((x10880*x10881))+(((-1.0)*x10881))+(((2.0)*x10882*x10883))+(((-1.0)*(r12*r12))));
j4eval[0]=x10884;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10882))+x10883))));
j4eval[2]=IKsign(x10884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10885=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10885);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10885);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10886=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x10886)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x10886)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10887=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10887);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10887);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10888=((1.0)*sj2);
CheckValue<IkReal> x10889=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x10889.valid){
continue;
}
CheckValue<IkReal> x10890=IKPowWithIntegerCheck(r22,-1);
if(!x10890.valid){
continue;
}
if( IKabs(((x10889.value)*(((((-1.0)*cj1*x10888))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10890.value)*(((((-1.0)*sj1*x10888))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10889.value)*(((((-1.0)*cj1*x10888))+(((-1.0)*cj2*sj1))))))+IKsqr(((x10890.value)*(((((-1.0)*sj1*x10888))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10889.value)*(((((-1.0)*cj1*x10888))+(((-1.0)*cj2*sj1))))), ((x10890.value)*(((((-1.0)*sj1*x10888))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10891=IKcos(j4);
IkReal x10892=IKsin(j4);
IkReal x10893=(cj5*r00);
IkReal x10894=(cj5*r10);
IkReal x10895=((1.0)*x10891);
IkReal x10896=((1.0)*x10892);
IkReal x10897=(sj5*x10891);
IkReal x10898=(sj5*x10892);
evalcond[0]=(r22*x10892);
evalcond[1]=(((r01*x10897))+(((-1.0)*x10893*x10895)));
evalcond[2]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x10895)));
evalcond[3]=(((r11*x10898))+(((-1.0)*x10894*x10896)));
evalcond[4]=((1.0)+((r11*x10897))+(((-1.0)*x10894*x10895)));
evalcond[5]=(((cj2*sj1))+((r01*x10898))+(((-1.0)*x10893*x10896))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10899=((1.0)*cj5);
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(((((-1.0)*r00*x10899))+((r01*sj5))),-1);
if(!x10900.valid){
continue;
}
CheckValue<IkReal> x10901=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x10899))),-1);
if(!x10901.valid){
continue;
}
if( IKabs(((x10900.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10901.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10900.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x10901.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10900.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x10901.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10902=IKcos(j4);
IkReal x10903=IKsin(j4);
IkReal x10904=(cj5*r00);
IkReal x10905=(cj5*r10);
IkReal x10906=((1.0)*x10902);
IkReal x10907=((1.0)*x10903);
IkReal x10908=(sj5*x10902);
IkReal x10909=(sj5*x10903);
evalcond[0]=(r22*x10903);
evalcond[1]=(((r01*x10908))+(((-1.0)*x10904*x10906)));
evalcond[2]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x10906))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x10905*x10907))+((r11*x10909)));
evalcond[4]=((1.0)+(((-1.0)*x10905*x10906))+((r11*x10908)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r01*x10909))+(((-1.0)*x10904*x10907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10910=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10910);
rxp1_1=(px*r21);
rxp1_2=(r11*x10910);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10911=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10911);
rxp1_1=(px*r21);
rxp1_2=(r11*x10911);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x10912=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x10912)));
j4eval[1]=((((-1.0)*r10*x10912))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10913=((1.0)*cj5);
CheckValue<IkReal> x10914=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x10913))),-1);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915=IKPowWithIntegerCheck(((((-1.0)*r10*x10913))+((r11*sj5))),-1);
if(!x10915.valid){
continue;
}
if( IKabs(((x10914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10915.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x10915.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10914.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x10915.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10916=IKcos(j4);
IkReal x10917=IKsin(j4);
IkReal x10918=(r21*sj5);
IkReal x10919=(cj5*r10);
IkReal x10920=(r11*sj5);
IkReal x10921=((1.0)*cj5*r20);
IkReal x10922=((1.0)*x10916);
evalcond[0]=(r02*x10917);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r02*x10922))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x10916*x10921))+((x10916*x10918)));
evalcond[3]=((((-1.0)*x10917*x10919))+((x10917*x10920)));
evalcond[4]=((1.0)+(((-1.0)*x10919*x10922))+((x10916*x10920)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10917*x10921))+((cj1*cj2))+((x10917*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10923=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x10923.valid){
continue;
}
CheckValue<IkReal> x10924=IKPowWithIntegerCheck(r02,-1);
if(!x10924.valid){
continue;
}
if( IKabs(((x10923.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10924.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10923.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10924.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10923.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10924.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10925=IKcos(j4);
IkReal x10926=IKsin(j4);
IkReal x10927=(r21*sj5);
IkReal x10928=(cj5*r10);
IkReal x10929=(r11*sj5);
IkReal x10930=((1.0)*cj5*r20);
IkReal x10931=((1.0)*x10925);
evalcond[0]=(r02*x10926);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r02*x10931))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x10925*x10930))+((x10925*x10927)));
evalcond[3]=(((x10926*x10929))+(((-1.0)*x10926*x10928)));
evalcond[4]=((1.0)+((x10925*x10929))+(((-1.0)*x10928*x10931)));
evalcond[5]=((((-1.0)*x10926*x10930))+((x10926*x10927))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10932=cj5*cj5;
IkReal x10933=r11*r11;
IkReal x10934=(cj5*r10);
IkReal x10935=(r11*sj5);
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10934))+x10935)),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
CheckValue<IkReal> x10937=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10932*(r10*r10)))+((x10932*x10933))+(((-1.0)*x10933))+(((-1.0)*(r12*r12)))+(((2.0)*x10934*x10935)))),-1);
if(!x10937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10936.value)+(((1.5707963267949)*(x10937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10938=IKcos(j4);
IkReal x10939=IKsin(j4);
IkReal x10940=(cj5*r00);
IkReal x10941=(cj5*r10);
IkReal x10942=(cj5*r20);
IkReal x10943=((1.0)*x10938);
IkReal x10944=((1.0)*x10939);
IkReal x10945=(sj5*x10938);
IkReal x10946=(sj5*x10939);
evalcond[0]=(((r21*x10945))+((r22*x10939))+(((-1.0)*x10942*x10943)));
evalcond[1]=(((r02*x10939))+((r01*x10945))+(((-1.0)*x10940*x10943)));
evalcond[2]=((1.0)+((r11*x10945))+(((-1.0)*x10941*x10943))+((r12*x10939)));
evalcond[3]=(((r11*x10946))+(((-1.0)*x10941*x10944))+(((-1.0)*r12*x10943)));
evalcond[4]=(((cj2*sj1))+((r01*x10946))+((cj1*sj2))+(((-1.0)*r02*x10943))+(((-1.0)*x10940*x10944)));
evalcond[5]=(((r21*x10946))+(((-1.0)*sj1*sj2))+(((-1.0)*x10942*x10944))+(((-1.0)*r22*x10943))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10947=((1.0)*cj5);
CheckValue<IkReal> x10948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10947))+(((-1.0)*r20*sj5)))),-1);
if(!x10948.valid){
continue;
}
CheckValue<IkReal> x10949 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x10947)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10948.value)))+(x10949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10950=IKcos(j4);
IkReal x10951=IKsin(j4);
IkReal x10952=(cj5*r00);
IkReal x10953=(cj5*r10);
IkReal x10954=(cj5*r20);
IkReal x10955=((1.0)*x10950);
IkReal x10956=((1.0)*x10951);
IkReal x10957=(sj5*x10950);
IkReal x10958=(sj5*x10951);
evalcond[0]=(((r22*x10951))+((r21*x10957))+(((-1.0)*x10954*x10955)));
evalcond[1]=(((r02*x10951))+((r01*x10957))+(((-1.0)*x10952*x10955)));
evalcond[2]=((1.0)+(((-1.0)*x10953*x10955))+((r12*x10951))+((r11*x10957)));
evalcond[3]=((((-1.0)*x10953*x10956))+(((-1.0)*r12*x10955))+((r11*x10958)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10958))+(((-1.0)*x10952*x10956))+(((-1.0)*r02*x10955)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x10955))+((cj1*cj2))+((r21*x10958))+(((-1.0)*x10954*x10956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10959.value)))+(x10960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKcos(j4);
IkReal x10962=IKsin(j4);
IkReal x10963=(cj5*r00);
IkReal x10964=(cj5*r10);
IkReal x10965=(cj5*r20);
IkReal x10966=((1.0)*x10961);
IkReal x10967=((1.0)*x10962);
IkReal x10968=(sj5*x10961);
IkReal x10969=(sj5*x10962);
evalcond[0]=(((r22*x10962))+((r21*x10968))+(((-1.0)*x10965*x10966)));
evalcond[1]=(((r02*x10962))+((r01*x10968))+(((-1.0)*x10963*x10966)));
evalcond[2]=((1.0)+((r11*x10968))+((r12*x10962))+(((-1.0)*x10964*x10966)));
evalcond[3]=(((r11*x10969))+(((-1.0)*x10964*x10967))+(((-1.0)*r12*x10966)));
evalcond[4]=(((cj2*sj1))+((r01*x10969))+((cj1*sj2))+(((-1.0)*x10963*x10967))+(((-1.0)*r02*x10966)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x10966))+((r21*x10969))+((cj1*cj2))+(((-1.0)*x10965*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10970=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10970;
j4eval[1]=IKsign(x10970);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10971=((1.0)*cj5);
IkReal x10972=((((-1.0)*r21*x10971))+(((-1.0)*r20*sj5)));
j4eval[0]=x10972;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x10971)))))+(IKabs(r02)));
j4eval[2]=IKsign(x10972);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10973=cj5*cj5;
IkReal x10974=r11*r11;
IkReal x10975=(cj5*r10);
IkReal x10976=(r11*sj5);
IkReal x10977=((((2.0)*x10975*x10976))+(((-1.0)*x10973*(r10*r10)))+(((-1.0)*(r12*r12)))+((x10973*x10974))+(((-1.0)*x10974)));
j4eval[0]=x10977;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10975))+x10976))));
j4eval[2]=IKsign(x10977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10978=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10978);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10978);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10979=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10980=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x10980.valid){
continue;
}
CheckValue<IkReal> x10981=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10981.valid){
continue;
}
if( IKabs(((x10980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10981.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x10981.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10980.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x10981.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10982=IKcos(j4);
IkReal x10983=IKsin(j4);
IkReal x10984=(cj5*r00);
IkReal x10985=(cj5*r10);
IkReal x10986=((1.0)*x10982);
IkReal x10987=(sj5*x10982);
IkReal x10988=((1.0)*sj5*x10983);
evalcond[0]=(r22*x10983);
evalcond[1]=(((r22*x10982))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[2]=(((r01*x10987))+(((-1.0)*x10984*x10986)));
evalcond[3]=(((x10983*x10985))+(((-1.0)*r11*x10988)));
evalcond[4]=((1.0)+((r11*x10987))+(((-1.0)*x10985*x10986)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x10988))+((x10983*x10984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10989=((1.0)*cj1);
CheckValue<IkReal> x10990=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x10990.valid){
continue;
}
CheckValue<IkReal> x10991=IKPowWithIntegerCheck(r22,-1);
if(!x10991.valid){
continue;
}
if( IKabs(((x10990.value)*(((((-1.0)*sj2*x10989))+(((-1.0)*cj2*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10991.value)*(((((-1.0)*cj2*x10989))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10990.value)*(((((-1.0)*sj2*x10989))+(((-1.0)*cj2*sj1))))))+IKsqr(((x10991.value)*(((((-1.0)*cj2*x10989))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10990.value)*(((((-1.0)*sj2*x10989))+(((-1.0)*cj2*sj1))))), ((x10991.value)*(((((-1.0)*cj2*x10989))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10992=IKcos(j4);
IkReal x10993=IKsin(j4);
IkReal x10994=(cj5*r00);
IkReal x10995=(cj5*r10);
IkReal x10996=((1.0)*x10992);
IkReal x10997=(sj5*x10992);
IkReal x10998=((1.0)*sj5*x10993);
evalcond[0]=(r22*x10993);
evalcond[1]=(((r22*x10992))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[2]=(((r01*x10997))+(((-1.0)*x10994*x10996)));
evalcond[3]=(((x10993*x10995))+(((-1.0)*r11*x10998)));
evalcond[4]=((1.0)+((r11*x10997))+(((-1.0)*x10995*x10996)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r01*x10998))+((cj1*sj2))+((x10993*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10999=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10999);
rxp1_1=(px*r21);
rxp1_2=(r11*x10999);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11000=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11000);
rxp1_1=(px*r21);
rxp1_2=(r11*x11000);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11001=((1.0)*cj2);
CheckValue<IkReal> x11002=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11002.valid){
continue;
}
CheckValue<IkReal> x11003=IKPowWithIntegerCheck(r02,-1);
if(!x11003.valid){
continue;
}
if( IKabs(((x11002.value)*((((sj1*sj2))+(((-1.0)*cj1*x11001)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11003.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11001)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11002.value)*((((sj1*sj2))+(((-1.0)*cj1*x11001))))))+IKsqr(((x11003.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11001))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11002.value)*((((sj1*sj2))+(((-1.0)*cj1*x11001))))), ((x11003.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11001))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11004=IKcos(j4);
IkReal x11005=IKsin(j4);
IkReal x11006=(sj5*x11004);
IkReal x11007=(cj5*x11005);
IkReal x11008=((1.0)*sj5*x11005);
IkReal x11009=((1.0)*cj5*x11004);
evalcond[0]=(r02*x11005);
evalcond[1]=(((r02*x11004))+((cj2*sj1))+((cj1*sj2)));
evalcond[2]=(((r21*x11006))+(((-1.0)*r20*x11009)));
evalcond[3]=(((r10*x11007))+(((-1.0)*r11*x11008)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11009))+((r11*x11006)));
evalcond[5]=(((r20*x11007))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11008))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11010=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11010.valid){
continue;
}
CheckValue<IkReal> x11011=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11011.valid){
continue;
}
if( IKabs(((x11010.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11011.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11010.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x11011.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11010.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x11011.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11012=IKcos(j4);
IkReal x11013=IKsin(j4);
IkReal x11014=(sj5*x11012);
IkReal x11015=(cj5*x11013);
IkReal x11016=((1.0)*sj5*x11013);
IkReal x11017=((1.0)*cj5*x11012);
evalcond[0]=(r02*x11013);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x11012)));
evalcond[2]=(((r21*x11014))+(((-1.0)*r20*x11017)));
evalcond[3]=(((r10*x11015))+(((-1.0)*r11*x11016)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11017))+((r11*x11014)));
evalcond[5]=(((r20*x11015))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r21*x11016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11018=cj5*cj5;
IkReal x11019=r11*r11;
IkReal x11020=(cj5*r10);
IkReal x11021=(r11*sj5);
CheckValue<IkReal> x11022 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x11020))+x11021)),IKFAST_ATAN2_MAGTHRESH);
if(!x11022.valid){
continue;
}
CheckValue<IkReal> x11023=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11018*(r10*r10)))+((x11018*x11019))+(((2.0)*x11020*x11021))+(((-1.0)*(r12*r12)))+(((-1.0)*x11019)))),-1);
if(!x11023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11022.value)+(((1.5707963267949)*(x11023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11024=IKcos(j4);
IkReal x11025=IKsin(j4);
IkReal x11026=(cj5*r00);
IkReal x11027=((1.0)*x11024);
IkReal x11028=(sj5*x11024);
IkReal x11029=(cj5*x11025);
IkReal x11030=((1.0)*sj5*x11025);
evalcond[0]=(((r21*x11028))+(((-1.0)*cj5*r20*x11027))+((r22*x11025)));
evalcond[1]=(((r01*x11028))+(((-1.0)*x11026*x11027))+((r02*x11025)));
evalcond[2]=(((r10*x11029))+((r12*x11024))+(((-1.0)*r11*x11030)));
evalcond[3]=((1.0)+((r12*x11025))+(((-1.0)*cj5*r10*x11027))+((r11*x11028)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11025*x11026))+(((-1.0)*r01*x11030))+((r02*x11024)));
evalcond[5]=((((-1.0)*r21*x11030))+((r20*x11029))+(((-1.0)*sj1*sj2))+((r22*x11024))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11031=((1.0)*cj5);
CheckValue<IkReal> x11032 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11031)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11032.valid){
continue;
}
CheckValue<IkReal> x11033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11031))+(((-1.0)*r20*sj5)))),-1);
if(!x11033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11032.value)+(((1.5707963267949)*(x11033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11034=IKcos(j4);
IkReal x11035=IKsin(j4);
IkReal x11036=(cj5*r00);
IkReal x11037=((1.0)*x11034);
IkReal x11038=(sj5*x11034);
IkReal x11039=(cj5*x11035);
IkReal x11040=((1.0)*sj5*x11035);
evalcond[0]=(((r21*x11038))+(((-1.0)*cj5*r20*x11037))+((r22*x11035)));
evalcond[1]=(((r01*x11038))+(((-1.0)*x11036*x11037))+((r02*x11035)));
evalcond[2]=((((-1.0)*r11*x11040))+((r10*x11039))+((r12*x11034)));
evalcond[3]=((1.0)+((r12*x11035))+(((-1.0)*cj5*r10*x11037))+((r11*x11038)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x11040))+((x11035*x11036))+((cj1*sj2))+((r02*x11034)));
evalcond[5]=(((r20*x11039))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11040))+((r22*x11034))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11041=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11041.valid){
continue;
}
CheckValue<IkReal> x11042 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11041.value)))+(x11042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11043=IKcos(j4);
IkReal x11044=IKsin(j4);
IkReal x11045=(cj5*r00);
IkReal x11046=((1.0)*x11043);
IkReal x11047=(sj5*x11043);
IkReal x11048=(cj5*x11044);
IkReal x11049=((1.0)*sj5*x11044);
evalcond[0]=((((-1.0)*cj5*r20*x11046))+((r22*x11044))+((r21*x11047)));
evalcond[1]=((((-1.0)*x11045*x11046))+((r01*x11047))+((r02*x11044)));
evalcond[2]=(((r10*x11048))+(((-1.0)*r11*x11049))+((r12*x11043)));
evalcond[3]=((1.0)+((r11*x11047))+(((-1.0)*cj5*r10*x11046))+((r12*x11044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x11049))+((x11044*x11045))+((cj1*sj2))+((r02*x11043)));
evalcond[5]=(((r20*x11048))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x11049))+((r22*x11043))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11051 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11051)==0){
continue;
}
IkReal x11050=pow(x11051,-0.5);
CheckValue<IkReal> x11052 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11052.valid){
continue;
}
IkReal gconst24=((-1.0)*(x11052.value));
IkReal gconst25=((-1.0)*r01*x11050);
IkReal gconst26=(r00*x11050);
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11053.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11056 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11056.valid){
continue;
}
IkReal x11054=((-1.0)*(x11056.value));
IkReal x11055=x11050;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11054;
IkReal gconst24=x11054;
IkReal gconst25=((-1.0)*r01*x11055);
IkReal gconst26=(r00*x11055);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11059 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11059.valid){
continue;
}
IkReal x11057=((-1.0)*(x11059.value));
IkReal x11058=x11050;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11057;
IkReal gconst24=x11057;
IkReal gconst25=((-1.0)*r01*x11058);
IkReal gconst26=(r00*x11058);
CheckValue<IkReal> x11067=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11067.valid){
continue;
}
IkReal x11060=x11067.value;
IkReal x11061=(cj3*x11060);
IkReal x11062=(r21*x11061);
IkReal x11063=(r10*x11061);
IkReal x11064=(r11*x11061);
IkReal x11065=(r20*x11061);
IkReal x11066=(r00*r01*x11061);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r10*x11062))+((r20*x11063*(r00*r00)))+((r00*r01*r20*x11064))+((r11*x11062*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11068=gconst25*gconst25;
IkReal x11069=gconst26*gconst26;
IkReal x11070=((1.0)*sj3);
IkReal x11071=(gconst25*r10);
IkReal x11072=(gconst26*r21);
IkReal x11073=((1.0)*cj3);
IkReal x11074=(gconst25*r11);
IkReal x11075=(gconst26*r20);
IkReal x11076=(r20*x11069);
IkReal x11077=(r21*x11068);
CheckValue<IkReal> x11078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11070*x11076))+(((-1.0)*r12*r22*x11070))+((sj3*x11074*x11075))+(((-1.0)*r11*x11070*x11077))+((sj3*x11071*x11072)))),-1);
if(!x11078.valid){
continue;
}
CheckValue<IkReal> x11079 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x11073*x11076))+((cj3*x11072*x11074))+((cj3*r10*x11077))+(((-1.0)*x11071*x11073*x11075)))),IkReal(((((-1.0)*gconst26*r11*r22*x11073))+(((-1.0)*r22*x11071*x11073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11078.value)))+(x11079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11080=IKcos(j4);
IkReal x11081=IKsin(j4);
IkReal x11082=(cj1*cj2);
IkReal x11083=(r11*sj3);
IkReal x11084=((1.0)*sj2);
IkReal x11085=(gconst25*sj3);
IkReal x11086=(cj3*gconst25);
IkReal x11087=(cj2*sj1);
IkReal x11088=(gconst26*sj3);
IkReal x11089=(cj3*gconst26);
IkReal x11090=(sj1*x11084);
IkReal x11091=(gconst25*x11080);
IkReal x11092=(cj3*x11080);
IkReal x11093=((1.0)*x11081);
IkReal x11094=((1.0)*gconst26*x11080);
IkReal x11095=((1.0)*sj3*x11080);
evalcond[0]=((((-1.0)*r20*x11094))+((r22*x11081))+((r21*x11091)));
evalcond[1]=((((-1.0)*r00*x11094))+((r01*x11091))+((r02*x11081)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11094))+((r11*x11091))+((r12*x11081)));
evalcond[3]=(((r10*x11081*x11089))+((r12*x11092))+((r10*x11085))+((gconst26*x11083))+(((-1.0)*r11*x11086*x11093)));
evalcond[4]=((((-1.0)*r12*x11095))+(((-1.0)*r10*x11088*x11093))+((gconst25*x11081*x11083))+((r10*x11086))+((r11*x11089)));
evalcond[5]=(((r01*x11089))+((cj1*sj2))+((r00*x11086))+((r01*x11081*x11085))+x11087+(((-1.0)*r02*x11095))+(((-1.0)*r00*x11088*x11093)));
evalcond[6]=((((-1.0)*r01*x11086*x11093))+((r02*x11092))+((r01*x11088))+(((-1.0)*x11090))+((r00*x11085))+x11082+((r00*x11081*x11089)));
evalcond[7]=((((-1.0)*r20*x11088*x11093))+((r21*x11081*x11085))+(((-1.0)*r22*x11095))+((r21*x11089))+(((-1.0)*x11090))+x11082+((r20*x11086)));
evalcond[8]=((((-1.0)*cj1*x11084))+((r20*x11081*x11089))+(((-1.0)*r21*x11086*x11093))+(((-1.0)*x11087))+((r21*x11088))+((r22*x11092))+((r20*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11096=gconst25*gconst25;
IkReal x11097=gconst26*gconst26;
IkReal x11098=(cj3*r10);
IkReal x11099=(r10*sj3);
IkReal x11100=(cj3*r11);
IkReal x11101=(r11*sj3);
IkReal x11102=((1.0)*gconst25);
IkReal x11103=(gconst26*r20);
IkReal x11104=(r20*x11097);
IkReal x11105=(r21*x11096);
IkReal x11106=(gconst25*gconst26*r21);
CheckValue<IkReal> x11107=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11100*x11102*x11103))+((x11100*x11105))+((x11098*x11104))+(((-1.0)*gconst26*r21*x11098*x11102)))),-1);
if(!x11107.valid){
continue;
}
CheckValue<IkReal> x11108 = IKatan2WithCheck(IkReal(((((-1.0)*x11099*x11102*x11103))+((x11101*x11106))+((x11099*x11105))+(((-1.0)*x11101*x11104)))),IkReal(((((-1.0)*r22*x11099*x11102))+(((-1.0)*gconst26*r22*x11101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11107.value)))+(x11108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11109=IKcos(j4);
IkReal x11110=IKsin(j4);
IkReal x11111=(cj1*cj2);
IkReal x11112=(r11*sj3);
IkReal x11113=((1.0)*sj2);
IkReal x11114=(gconst25*sj3);
IkReal x11115=(cj3*gconst25);
IkReal x11116=(cj2*sj1);
IkReal x11117=(gconst26*sj3);
IkReal x11118=(cj3*gconst26);
IkReal x11119=(sj1*x11113);
IkReal x11120=(gconst25*x11109);
IkReal x11121=(cj3*x11109);
IkReal x11122=((1.0)*x11110);
IkReal x11123=((1.0)*gconst26*x11109);
IkReal x11124=((1.0)*sj3*x11109);
evalcond[0]=(((r21*x11120))+(((-1.0)*r20*x11123))+((r22*x11110)));
evalcond[1]=(((r02*x11110))+(((-1.0)*r00*x11123))+((r01*x11120)));
evalcond[2]=((1.0)+((r11*x11120))+(((-1.0)*r10*x11123))+((r12*x11110)));
evalcond[3]=(((r10*x11110*x11118))+(((-1.0)*r11*x11115*x11122))+((gconst26*x11112))+((r10*x11114))+((r12*x11121)));
evalcond[4]=(((gconst25*x11110*x11112))+(((-1.0)*r12*x11124))+(((-1.0)*r10*x11117*x11122))+((r10*x11115))+((r11*x11118)));
evalcond[5]=((((-1.0)*r00*x11117*x11122))+((cj1*sj2))+x11116+((r01*x11110*x11114))+(((-1.0)*r02*x11124))+((r00*x11115))+((r01*x11118)));
evalcond[6]=((((-1.0)*r01*x11115*x11122))+x11111+((r02*x11121))+((r00*x11110*x11118))+(((-1.0)*x11119))+((r00*x11114))+((r01*x11117)));
evalcond[7]=((((-1.0)*r20*x11117*x11122))+x11111+((r21*x11118))+((r21*x11110*x11114))+(((-1.0)*r22*x11124))+((r20*x11115))+(((-1.0)*x11119)));
evalcond[8]=((((-1.0)*x11116))+(((-1.0)*cj1*x11113))+((r22*x11121))+((r21*x11117))+(((-1.0)*r21*x11115*x11122))+((r20*x11114))+((r20*x11110*x11118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11125=((1.0)*gconst26);
CheckValue<IkReal> x11126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11125))+(((-1.0)*gconst25*r20)))),-1);
if(!x11126.valid){
continue;
}
CheckValue<IkReal> x11127 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11125))+((gconst25*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11126.value)))+(x11127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11128=IKcos(j4);
IkReal x11129=IKsin(j4);
IkReal x11130=(cj1*cj2);
IkReal x11131=(r11*sj3);
IkReal x11132=((1.0)*sj2);
IkReal x11133=(gconst25*sj3);
IkReal x11134=(cj3*gconst25);
IkReal x11135=(cj2*sj1);
IkReal x11136=(gconst26*sj3);
IkReal x11137=(cj3*gconst26);
IkReal x11138=(sj1*x11132);
IkReal x11139=(gconst25*x11128);
IkReal x11140=(cj3*x11128);
IkReal x11141=((1.0)*x11129);
IkReal x11142=((1.0)*gconst26*x11128);
IkReal x11143=((1.0)*sj3*x11128);
evalcond[0]=(((r22*x11129))+(((-1.0)*r20*x11142))+((r21*x11139)));
evalcond[1]=(((r02*x11129))+(((-1.0)*r00*x11142))+((r01*x11139)));
evalcond[2]=((1.0)+((r12*x11129))+(((-1.0)*r10*x11142))+((r11*x11139)));
evalcond[3]=((((-1.0)*r11*x11134*x11141))+((gconst26*x11131))+((r10*x11133))+((r12*x11140))+((r10*x11129*x11137)));
evalcond[4]=((((-1.0)*r10*x11136*x11141))+((gconst25*x11129*x11131))+((r10*x11134))+((r11*x11137))+(((-1.0)*r12*x11143)));
evalcond[5]=(((cj1*sj2))+x11135+(((-1.0)*r00*x11136*x11141))+((r01*x11129*x11133))+(((-1.0)*r02*x11143))+((r01*x11137))+((r00*x11134)));
evalcond[6]=(((r02*x11140))+(((-1.0)*r01*x11134*x11141))+x11130+(((-1.0)*x11138))+((r00*x11129*x11137))+((r01*x11136))+((r00*x11133)));
evalcond[7]=(((r21*x11129*x11133))+(((-1.0)*r22*x11143))+((r21*x11137))+x11130+((r20*x11134))+(((-1.0)*x11138))+(((-1.0)*r20*x11136*x11141)));
evalcond[8]=((((-1.0)*x11135))+((r20*x11129*x11137))+(((-1.0)*cj1*x11132))+((r22*x11140))+(((-1.0)*r21*x11134*x11141))+((r21*x11136))+((r20*x11133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11145 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11145)==0){
continue;
}
IkReal x11144=pow(x11145,-0.5);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x11146.value))));
IkReal gconst28=((1.0)*r01*x11144);
IkReal gconst29=((-1.0)*r00*x11144);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11147.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
IkReal x11148=((1.0)*(x11150.value));
IkReal x11149=x11144;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11148)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11148)));
IkReal gconst28=((1.0)*r01*x11149);
IkReal gconst29=((-1.0)*r00*x11149);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
IkReal x11151=((1.0)*(x11153.value));
IkReal x11152=x11144;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11151)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11151)));
IkReal gconst28=((1.0)*r01*x11152);
IkReal gconst29=((-1.0)*r00*x11152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11154=gconst28*gconst28;
IkReal x11155=gconst29*gconst29;
IkReal x11156=(r11*r21);
IkReal x11157=(gconst29*sj3);
IkReal x11158=((1.0)*r22);
IkReal x11159=(gconst28*r10);
IkReal x11160=((1.0)*r20);
IkReal x11161=((1.0)*cj3*gconst29);
CheckValue<IkReal> x11162 = IKatan2WithCheck(IkReal((((r10*r21*sj3*x11154))+((gconst28*x11156*x11157))+(((-1.0)*r11*sj3*x11155*x11160))+(((-1.0)*x11157*x11159*x11160)))),IkReal(((((-1.0)*sj3*x11158*x11159))+(((-1.0)*r11*x11157*x11158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11162.valid){
continue;
}
CheckValue<IkReal> x11163=IKPowWithIntegerCheck(IKsign((((cj3*r10*r20*x11155))+((cj3*r12*r22))+(((-1.0)*cj3*gconst28*gconst29*r11*x11160))+((cj3*x11154*x11156))+(((-1.0)*r21*x11159*x11161)))),-1);
if(!x11163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11162.value)+(((1.5707963267949)*(x11163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11164=IKcos(j4);
IkReal x11165=IKsin(j4);
IkReal x11166=(cj1*cj2);
IkReal x11167=(gconst29*sj3);
IkReal x11168=(gconst28*sj3);
IkReal x11169=(gconst28*r11);
IkReal x11170=((1.0)*sj2);
IkReal x11171=(cj3*gconst29);
IkReal x11172=(cj2*sj1);
IkReal x11173=(cj3*gconst28);
IkReal x11174=(gconst29*r20);
IkReal x11175=(gconst29*r00);
IkReal x11176=(sj1*x11170);
IkReal x11177=((1.0)*gconst29*r10);
IkReal x11178=(r21*x11165);
IkReal x11179=(cj3*x11165);
IkReal x11180=((1.0)*x11164);
IkReal x11181=(gconst28*x11164);
IkReal x11182=((1.0)*x11165);
IkReal x11183=(cj3*x11164);
evalcond[0]=((((-1.0)*x11174*x11180))+((r22*x11165))+((r21*x11181)));
evalcond[1]=((((-1.0)*x11175*x11180))+((r01*x11181))+((r02*x11165)));
evalcond[2]=((1.0)+((r12*x11165))+(((-1.0)*x11164*x11177))+((x11164*x11169)));
evalcond[3]=(((r12*x11183))+((r11*x11167))+((r10*x11165*x11171))+(((-1.0)*x11169*x11179))+((r10*x11168)));
evalcond[4]=((((-1.0)*r10*x11167*x11182))+((r11*x11171))+((r11*x11165*x11168))+((r10*x11173))+(((-1.0)*r12*sj3*x11180)));
evalcond[5]=(((r00*x11173))+((r01*x11171))+((cj1*sj2))+(((-1.0)*r00*x11167*x11182))+(((-1.0)*r02*sj3*x11180))+x11172+((r01*x11165*x11168)));
evalcond[6]=(((r01*x11167))+((r00*x11165*x11171))+((r00*x11168))+(((-1.0)*x11176))+x11166+((r02*x11183))+(((-1.0)*r01*x11173*x11182)));
evalcond[7]=(((x11168*x11178))+(((-1.0)*r22*sj3*x11180))+(((-1.0)*r20*x11167*x11182))+((r20*x11173))+(((-1.0)*x11176))+x11166+((r21*x11171)));
evalcond[8]=(((r20*x11168))+((r20*x11165*x11171))+(((-1.0)*x11173*x11178))+(((-1.0)*cj1*x11170))+(((-1.0)*x11172))+((r22*x11183))+((r21*x11167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11184=((1.0)*gconst29);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11184))+((gconst28*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
CheckValue<IkReal> x11186=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x11184)))),-1);
if(!x11186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11185.value)+(((1.5707963267949)*(x11186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11187=IKcos(j4);
IkReal x11188=IKsin(j4);
IkReal x11189=(cj1*cj2);
IkReal x11190=(gconst29*sj3);
IkReal x11191=(gconst28*sj3);
IkReal x11192=(gconst28*r11);
IkReal x11193=((1.0)*sj2);
IkReal x11194=(cj3*gconst29);
IkReal x11195=(cj2*sj1);
IkReal x11196=(cj3*gconst28);
IkReal x11197=(gconst29*r20);
IkReal x11198=(gconst29*r00);
IkReal x11199=(sj1*x11193);
IkReal x11200=((1.0)*gconst29*r10);
IkReal x11201=(r21*x11188);
IkReal x11202=(cj3*x11188);
IkReal x11203=((1.0)*x11187);
IkReal x11204=(gconst28*x11187);
IkReal x11205=((1.0)*x11188);
IkReal x11206=(cj3*x11187);
evalcond[0]=(((r21*x11204))+(((-1.0)*x11197*x11203))+((r22*x11188)));
evalcond[1]=(((r02*x11188))+(((-1.0)*x11198*x11203))+((r01*x11204)));
evalcond[2]=((1.0)+((r12*x11188))+(((-1.0)*x11187*x11200))+((x11187*x11192)));
evalcond[3]=((((-1.0)*x11192*x11202))+((r11*x11190))+((r10*x11188*x11194))+((r12*x11206))+((r10*x11191)));
evalcond[4]=(((r11*x11194))+((r11*x11188*x11191))+(((-1.0)*r10*x11190*x11205))+((r10*x11196))+(((-1.0)*r12*sj3*x11203)));
evalcond[5]=(((cj1*sj2))+((r00*x11196))+((r01*x11194))+x11195+(((-1.0)*r02*sj3*x11203))+((r01*x11188*x11191))+(((-1.0)*r00*x11190*x11205)));
evalcond[6]=(((r02*x11206))+(((-1.0)*x11199))+((r00*x11191))+((r01*x11190))+(((-1.0)*r01*x11196*x11205))+((r00*x11188*x11194))+x11189);
evalcond[7]=(((r21*x11194))+((r20*x11196))+(((-1.0)*x11199))+(((-1.0)*r22*sj3*x11203))+(((-1.0)*r20*x11190*x11205))+((x11191*x11201))+x11189);
evalcond[8]=(((r21*x11190))+((r20*x11191))+((r20*x11188*x11194))+(((-1.0)*x11196*x11201))+(((-1.0)*cj1*x11193))+(((-1.0)*x11195))+((r22*x11206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r20))+((gconst28*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x11208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11207.value)+(((1.5707963267949)*(x11208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11209=IKcos(j4);
IkReal x11210=IKsin(j4);
IkReal x11211=(cj1*cj2);
IkReal x11212=(gconst29*sj3);
IkReal x11213=(gconst28*sj3);
IkReal x11214=(gconst28*r11);
IkReal x11215=((1.0)*sj2);
IkReal x11216=(cj3*gconst29);
IkReal x11217=(cj2*sj1);
IkReal x11218=(cj3*gconst28);
IkReal x11219=(gconst29*r20);
IkReal x11220=(gconst29*r00);
IkReal x11221=(sj1*x11215);
IkReal x11222=((1.0)*gconst29*r10);
IkReal x11223=(r21*x11210);
IkReal x11224=(cj3*x11210);
IkReal x11225=((1.0)*x11209);
IkReal x11226=(gconst28*x11209);
IkReal x11227=((1.0)*x11210);
IkReal x11228=(cj3*x11209);
evalcond[0]=((((-1.0)*x11219*x11225))+((r21*x11226))+((r22*x11210)));
evalcond[1]=(((r02*x11210))+(((-1.0)*x11220*x11225))+((r01*x11226)));
evalcond[2]=((1.0)+(((-1.0)*x11209*x11222))+((r12*x11210))+((x11209*x11214)));
evalcond[3]=(((r10*x11210*x11216))+((r12*x11228))+((r11*x11212))+((r10*x11213))+(((-1.0)*x11214*x11224)));
evalcond[4]=(((r11*x11216))+((r10*x11218))+((r11*x11210*x11213))+(((-1.0)*r10*x11212*x11227))+(((-1.0)*r12*sj3*x11225)));
evalcond[5]=((((-1.0)*r02*sj3*x11225))+x11217+((cj1*sj2))+(((-1.0)*r00*x11212*x11227))+((r01*x11210*x11213))+((r01*x11216))+((r00*x11218)));
evalcond[6]=(x11211+(((-1.0)*r01*x11218*x11227))+(((-1.0)*x11221))+((r02*x11228))+((r01*x11212))+((r00*x11213))+((r00*x11210*x11216)));
evalcond[7]=(((r21*x11216))+(((-1.0)*r20*x11212*x11227))+((r20*x11218))+x11211+(((-1.0)*x11221))+(((-1.0)*r22*sj3*x11225))+((x11213*x11223)));
evalcond[8]=(((r21*x11212))+((r22*x11228))+((r20*x11213))+((r20*x11210*x11216))+(((-1.0)*x11218*x11223))+(((-1.0)*cj1*x11215))+(((-1.0)*x11217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11229=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11229);
rxp1_1=(px*r21);
rxp1_2=(r11*x11229);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11230=(r11*sj5);
IkReal x11231=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*sj3*x11231))+((sj3*x11230)));
j4eval[1]=(x11230+(((-1.0)*x11231)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11232=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11232);
rxp1_1=(px*r21);
rxp1_2=(r11*x11232);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11233=(cj5*r10);
IkReal x11234=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x11234))+((cj3*x11233)));
j4eval[1]=((((-1.0)*x11233))+x11234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11235=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11235);
rxp1_1=(px*r21);
rxp1_2=(r11*x11235);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11236=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11236);
rxp1_1=(px*r21);
rxp1_2=(r11*x11236);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11237=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11237);
rxp1_1=(px*r21);
rxp1_2=(r11*x11237);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11238=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11238.valid){
continue;
}
CheckValue<IkReal> x11239=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11239.valid){
continue;
}
if( IKabs(((x11238.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11239.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11238.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11239.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11238.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11239.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11240=IKcos(j4);
IkReal x11241=IKsin(j4);
IkReal x11242=(cj5*r10);
IkReal x11243=(cj5*r20);
IkReal x11244=((1.0)*sj2);
IkReal x11245=((1.0)*x11240);
IkReal x11246=(sj5*x11240);
IkReal x11247=((1.0)*sj5*x11241);
evalcond[0]=(r02*x11241);
evalcond[1]=((((-1.0)*sj1*x11244))+((r02*x11240))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x11243*x11245))+((r21*x11246)));
evalcond[3]=(((x11241*x11242))+(((-1.0)*r11*x11247)));
evalcond[4]=((1.0)+((r11*x11246))+(((-1.0)*x11242*x11245)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x11241*x11243))+(((-1.0)*cj1*x11244))+(((-1.0)*r21*x11247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11248=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11248.valid){
continue;
}
CheckValue<IkReal> x11249=IKPowWithIntegerCheck(r02,-1);
if(!x11249.valid){
continue;
}
if( IKabs(((x11248.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11248.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11248.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11249.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11250=IKcos(j4);
IkReal x11251=IKsin(j4);
IkReal x11252=(cj5*r10);
IkReal x11253=(cj5*r20);
IkReal x11254=((1.0)*sj2);
IkReal x11255=((1.0)*x11250);
IkReal x11256=(sj5*x11250);
IkReal x11257=((1.0)*sj5*x11251);
evalcond[0]=(r02*x11251);
evalcond[1]=(((r02*x11250))+((cj1*cj2))+(((-1.0)*sj1*x11254)));
evalcond[2]=((((-1.0)*x11253*x11255))+((r21*x11256)));
evalcond[3]=((((-1.0)*r11*x11257))+((x11251*x11252)));
evalcond[4]=((1.0)+((r11*x11256))+(((-1.0)*x11252*x11255)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11254))+(((-1.0)*r21*x11257))+((x11251*x11253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11258=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11258);
rxp1_1=(px*r21);
rxp1_2=(r11*x11258);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11259=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x11259)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11259)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11260=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11260);
rxp1_1=(px*r21);
rxp1_2=(r11*x11260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11261=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262=IKPowWithIntegerCheck(r02,-1);
if(!x11262.valid){
continue;
}
if( IKabs(((x11261.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11262.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11261.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11262.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11261.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11262.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=((1.0)*sj1);
IkReal x11266=(r21*sj5);
IkReal x11267=(cj5*r10);
IkReal x11268=(r11*sj5);
IkReal x11269=((1.0)*cj5*r20);
IkReal x11270=((1.0)*x11263);
evalcond[0]=(r02*x11264);
evalcond[1]=((((-1.0)*x11263*x11269))+((x11263*x11266)));
evalcond[2]=((((-1.0)*r02*x11270))+(((-1.0)*sj2*x11265))+((cj1*cj2)));
evalcond[3]=(((x11264*x11268))+(((-1.0)*x11264*x11267)));
evalcond[4]=((1.0)+((x11263*x11268))+(((-1.0)*x11267*x11270)));
evalcond[5]=((((-1.0)*cj2*x11265))+((x11264*x11266))+(((-1.0)*cj1*sj2))+(((-1.0)*x11264*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11271=((1.0)*cj5);
CheckValue<IkReal> x11272=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11271))),-1);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x11271))),-1);
if(!x11273.valid){
continue;
}
if( IKabs(((x11272.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11272.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11273.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11272.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11273.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11274=IKcos(j4);
IkReal x11275=IKsin(j4);
IkReal x11276=((1.0)*sj1);
IkReal x11277=(r21*sj5);
IkReal x11278=(cj5*r10);
IkReal x11279=(r11*sj5);
IkReal x11280=((1.0)*cj5*r20);
IkReal x11281=((1.0)*x11274);
evalcond[0]=(r02*x11275);
evalcond[1]=((((-1.0)*x11274*x11280))+((x11274*x11277)));
evalcond[2]=((((-1.0)*r02*x11281))+(((-1.0)*sj2*x11276))+((cj1*cj2)));
evalcond[3]=(((x11275*x11279))+(((-1.0)*x11275*x11278)));
evalcond[4]=((1.0)+(((-1.0)*x11278*x11281))+((x11274*x11279)));
evalcond[5]=((((-1.0)*cj2*x11276))+(((-1.0)*x11275*x11280))+(((-1.0)*cj1*sj2))+((x11275*x11277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11282=((1.0)*cj5);
CheckValue<IkReal> x11283=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x11282))),-1);
if(!x11283.valid){
continue;
}
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(r02,-1);
if(!x11284.valid){
continue;
}
CheckValue<IkReal> x11285=IKPowWithIntegerCheck(sj3,-1);
if(!x11285.valid){
continue;
}
if( IKabs(((x11283.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11282)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11284.value)*(x11285.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11283.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11282))))))+IKsqr(((x11284.value)*(x11285.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11283.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11282))))), ((x11284.value)*(x11285.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11286=IKcos(j4);
IkReal x11287=IKsin(j4);
IkReal x11288=(cj1*cj2);
IkReal x11289=(r21*sj5);
IkReal x11290=(cj5*sj3);
IkReal x11291=((1.0)*sj2);
IkReal x11292=(cj3*sj5);
IkReal x11293=(cj2*sj1);
IkReal x11294=(cj3*cj5);
IkReal x11295=(sj3*sj5);
IkReal x11296=(sj1*x11291);
IkReal x11297=((1.0)*x11287);
IkReal x11298=(r02*x11286);
IkReal x11299=((1.0)*cj5*x11286);
evalcond[0]=(r02*x11287);
evalcond[1]=((((-1.0)*r20*x11299))+((x11286*x11289)));
evalcond[2]=(x11293+((cj1*sj2))+(((-1.0)*sj3*x11298)));
evalcond[3]=(x11288+(((-1.0)*x11296))+((cj3*x11298)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11299))+((r11*sj5*x11286)));
evalcond[5]=((((-1.0)*r10*x11290*x11297))+((r10*x11292))+((r11*x11294))+((r11*x11287*x11295)));
evalcond[6]=(((r10*x11295))+((r11*x11290))+(((-1.0)*r11*x11292*x11297))+((r10*x11287*x11294)));
evalcond[7]=((((-1.0)*r20*x11290*x11297))+((sj3*x11287*x11289))+x11288+((r21*x11294))+(((-1.0)*x11296))+((r20*x11292)));
evalcond[8]=(((r20*x11287*x11294))+(((-1.0)*cj1*x11291))+(((-1.0)*x11293))+((r21*x11290))+(((-1.0)*cj3*x11289*x11297))+((r20*x11295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11300=((1.0)*sj5);
IkReal x11301=(cj5*r10);
CheckValue<IkReal> x11302=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x11300))+((cj3*x11301))),-1);
if(!x11302.valid){
continue;
}
CheckValue<IkReal> x11303=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x11301))),-1);
if(!x11303.valid){
continue;
}
if( IKabs(((x11302.value)*(((((-1.0)*r10*sj3*x11300))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11303.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11302.value)*(((((-1.0)*r10*sj3*x11300))+(((-1.0)*cj5*r11*sj3))))))+IKsqr(((-1.0)*(x11303.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11302.value)*(((((-1.0)*r10*sj3*x11300))+(((-1.0)*cj5*r11*sj3))))), ((-1.0)*(x11303.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11304=IKcos(j4);
IkReal x11305=IKsin(j4);
IkReal x11306=(cj1*cj2);
IkReal x11307=(r21*sj5);
IkReal x11308=(cj5*sj3);
IkReal x11309=((1.0)*sj2);
IkReal x11310=(cj3*sj5);
IkReal x11311=(cj2*sj1);
IkReal x11312=(cj3*cj5);
IkReal x11313=(sj3*sj5);
IkReal x11314=(sj1*x11309);
IkReal x11315=((1.0)*x11305);
IkReal x11316=(r02*x11304);
IkReal x11317=((1.0)*cj5*x11304);
evalcond[0]=(r02*x11305);
evalcond[1]=((((-1.0)*r20*x11317))+((x11304*x11307)));
evalcond[2]=((((-1.0)*sj3*x11316))+((cj1*sj2))+x11311);
evalcond[3]=(x11306+((cj3*x11316))+(((-1.0)*x11314)));
evalcond[4]=((1.0)+((r11*sj5*x11304))+(((-1.0)*r10*x11317)));
evalcond[5]=(((r11*x11312))+(((-1.0)*r10*x11308*x11315))+((r10*x11310))+((r11*x11305*x11313)));
evalcond[6]=(((r10*x11313))+((r10*x11305*x11312))+((r11*x11308))+(((-1.0)*r11*x11310*x11315)));
evalcond[7]=(((sj3*x11305*x11307))+((r21*x11312))+x11306+((r20*x11310))+(((-1.0)*r20*x11308*x11315))+(((-1.0)*x11314)));
evalcond[8]=(((r20*x11305*x11312))+(((-1.0)*cj3*x11307*x11315))+((r21*x11308))+((r20*x11313))+(((-1.0)*x11311))+(((-1.0)*cj1*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11318=((1.0)*cj5);
IkReal x11319=(r11*sj5);
CheckValue<IkReal> x11320=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x11318))+((sj3*x11319))),-1);
if(!x11320.valid){
continue;
}
CheckValue<IkReal> x11321=IKPowWithIntegerCheck((x11319+(((-1.0)*r10*x11318))),-1);
if(!x11321.valid){
continue;
}
if( IKabs(((x11320.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11318)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11321.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11320.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11318))))))+IKsqr(((-1.0)*(x11321.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11320.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11318))))), ((-1.0)*(x11321.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11322=IKcos(j4);
IkReal x11323=IKsin(j4);
IkReal x11324=(cj1*cj2);
IkReal x11325=(r21*sj5);
IkReal x11326=(cj5*sj3);
IkReal x11327=((1.0)*sj2);
IkReal x11328=(cj3*sj5);
IkReal x11329=(cj2*sj1);
IkReal x11330=(cj3*cj5);
IkReal x11331=(sj3*sj5);
IkReal x11332=(sj1*x11327);
IkReal x11333=((1.0)*x11323);
IkReal x11334=(r02*x11322);
IkReal x11335=((1.0)*cj5*x11322);
evalcond[0]=(r02*x11323);
evalcond[1]=((((-1.0)*r20*x11335))+((x11322*x11325)));
evalcond[2]=(((cj1*sj2))+x11329+(((-1.0)*sj3*x11334)));
evalcond[3]=(x11324+(((-1.0)*x11332))+((cj3*x11334)));
evalcond[4]=((1.0)+((r11*sj5*x11322))+(((-1.0)*r10*x11335)));
evalcond[5]=(((r11*x11330))+((r11*x11323*x11331))+((r10*x11328))+(((-1.0)*r10*x11326*x11333)));
evalcond[6]=((((-1.0)*r11*x11328*x11333))+((r10*x11331))+((r10*x11323*x11330))+((r11*x11326)));
evalcond[7]=((((-1.0)*r20*x11326*x11333))+((sj3*x11323*x11325))+x11324+(((-1.0)*x11332))+((r21*x11330))+((r20*x11328)));
evalcond[8]=(((r20*x11331))+((r21*x11326))+(((-1.0)*cj1*x11327))+(((-1.0)*x11329))+(((-1.0)*cj3*x11325*x11333))+((r20*x11323*x11330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11336=cj5*cj5;
IkReal x11337=((1.0)*cj5);
IkReal x11338=(r11*sj3);
IkReal x11339=(cj3*sj5);
IkReal x11340=(r10*r21);
IkReal x11341=(cj3*r11*r21);
IkReal x11342=((1.0)*x11336);
IkReal x11343=(r10*sj3*sj5);
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r11*r20*x11337*x11339))+x11341+((cj3*r10*r20*x11336))+(((-1.0)*x11337*x11339*x11340))+(((-1.0)*x11341*x11342)))),-1);
if(!x11344.valid){
continue;
}
CheckValue<IkReal> x11345 = IKatan2WithCheck(IkReal((((sj3*x11340))+((cj5*r21*sj5*x11338))+(((-1.0)*r20*x11338*x11342))+(((-1.0)*sj3*x11340*x11342))+(((-1.0)*r20*x11337*x11343)))),IkReal(((((-1.0)*r22*x11343))+(((-1.0)*r22*x11337*x11338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11344.value)))+(x11345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11346=IKcos(j4);
IkReal x11347=IKsin(j4);
IkReal x11348=(cj1*cj2);
IkReal x11349=((1.0)*cj5);
IkReal x11350=(cj5*r01);
IkReal x11351=((1.0)*sj1);
IkReal x11352=(cj3*sj5);
IkReal x11353=(cj3*cj5);
IkReal x11354=(cj5*sj3);
IkReal x11355=(sj3*sj5);
IkReal x11356=(cj1*sj2);
IkReal x11357=(sj2*x11351);
IkReal x11358=(sj5*x11346);
IkReal x11359=(sj3*x11347);
IkReal x11360=((1.0)*x11347);
IkReal x11361=(cj3*x11346);
IkReal x11362=((1.0)*sj3*x11346);
evalcond[0]=(((r21*x11358))+((r22*x11347))+(((-1.0)*r20*x11346*x11349)));
evalcond[1]=((((-1.0)*r00*x11346*x11349))+((r01*x11358))+((r02*x11347)));
evalcond[2]=((1.0)+((r11*x11358))+((r12*x11347))+(((-1.0)*r10*x11346*x11349)));
evalcond[3]=(((r10*x11355))+((r11*x11354))+((r10*x11347*x11353))+((r12*x11361))+(((-1.0)*r11*x11352*x11360)));
evalcond[4]=(((r10*x11352))+((r11*x11353))+((r11*x11347*x11355))+(((-1.0)*r12*x11362))+(((-1.0)*r10*x11349*x11359)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r02*x11362))+x11356+((r01*x11347*x11355))+((r00*x11352))+((cj3*x11350))+(((-1.0)*r00*x11349*x11359)));
evalcond[6]=(x11348+((sj3*x11350))+((r02*x11361))+(((-1.0)*x11357))+((r00*x11355))+(((-1.0)*r01*x11352*x11360))+((r00*x11347*x11353)));
evalcond[7]=((((-1.0)*r22*x11362))+x11348+((r20*x11352))+((r21*x11353))+(((-1.0)*x11357))+(((-1.0)*r20*x11349*x11359))+((r21*x11347*x11355)));
evalcond[8]=((((-1.0)*r21*x11352*x11360))+(((-1.0)*cj2*x11351))+((r22*x11361))+((r20*x11355))+(((-1.0)*x11356))+((r21*x11354))+((r20*x11347*x11353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11363=((1.0)*cj5);
CheckValue<IkReal> x11364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11363))+(((-1.0)*r20*sj5)))),-1);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11363)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11364.value)))+(x11365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11366=IKcos(j4);
IkReal x11367=IKsin(j4);
IkReal x11368=(cj1*cj2);
IkReal x11369=((1.0)*cj5);
IkReal x11370=(cj5*r01);
IkReal x11371=((1.0)*sj1);
IkReal x11372=(cj3*sj5);
IkReal x11373=(cj3*cj5);
IkReal x11374=(cj5*sj3);
IkReal x11375=(sj3*sj5);
IkReal x11376=(cj1*sj2);
IkReal x11377=(sj2*x11371);
IkReal x11378=(sj5*x11366);
IkReal x11379=(sj3*x11367);
IkReal x11380=((1.0)*x11367);
IkReal x11381=(cj3*x11366);
IkReal x11382=((1.0)*sj3*x11366);
evalcond[0]=((((-1.0)*r20*x11366*x11369))+((r21*x11378))+((r22*x11367)));
evalcond[1]=(((r01*x11378))+((r02*x11367))+(((-1.0)*r00*x11366*x11369)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11366*x11369))+((r12*x11367))+((r11*x11378)));
evalcond[3]=(((r12*x11381))+((r10*x11375))+((r10*x11367*x11373))+((r11*x11374))+(((-1.0)*r11*x11372*x11380)));
evalcond[4]=((((-1.0)*r10*x11369*x11379))+((r10*x11372))+((r11*x11367*x11375))+(((-1.0)*r12*x11382))+((r11*x11373)));
evalcond[5]=(((r00*x11372))+((cj2*sj1))+((cj3*x11370))+x11376+(((-1.0)*r00*x11369*x11379))+(((-1.0)*r02*x11382))+((r01*x11367*x11375)));
evalcond[6]=(((r02*x11381))+((r00*x11375))+(((-1.0)*x11377))+x11368+(((-1.0)*r01*x11372*x11380))+((r00*x11367*x11373))+((sj3*x11370)));
evalcond[7]=(((r20*x11372))+((r21*x11373))+(((-1.0)*x11377))+((r21*x11367*x11375))+x11368+(((-1.0)*r22*x11382))+(((-1.0)*r20*x11369*x11379)));
evalcond[8]=(((r20*x11375))+(((-1.0)*x11376))+((r21*x11374))+((r20*x11367*x11373))+(((-1.0)*r21*x11372*x11380))+(((-1.0)*cj2*x11371))+((r22*x11381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11383=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11383.valid){
continue;
}
CheckValue<IkReal> x11384 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11383.value)))+(x11384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11385=IKcos(j4);
IkReal x11386=IKsin(j4);
IkReal x11387=(cj1*cj2);
IkReal x11388=((1.0)*cj5);
IkReal x11389=(cj5*r01);
IkReal x11390=((1.0)*sj1);
IkReal x11391=(cj3*sj5);
IkReal x11392=(cj3*cj5);
IkReal x11393=(cj5*sj3);
IkReal x11394=(sj3*sj5);
IkReal x11395=(cj1*sj2);
IkReal x11396=(sj2*x11390);
IkReal x11397=(sj5*x11385);
IkReal x11398=(sj3*x11386);
IkReal x11399=((1.0)*x11386);
IkReal x11400=(cj3*x11385);
IkReal x11401=((1.0)*sj3*x11385);
evalcond[0]=((((-1.0)*r20*x11385*x11388))+((r21*x11397))+((r22*x11386)));
evalcond[1]=(((r02*x11386))+((r01*x11397))+(((-1.0)*r00*x11385*x11388)));
evalcond[2]=((1.0)+((r12*x11386))+((r11*x11397))+(((-1.0)*r10*x11385*x11388)));
evalcond[3]=(((r12*x11400))+((r10*x11386*x11392))+((r11*x11393))+(((-1.0)*r11*x11391*x11399))+((r10*x11394)));
evalcond[4]=(((r11*x11386*x11394))+(((-1.0)*r10*x11388*x11398))+((r11*x11392))+((r10*x11391))+(((-1.0)*r12*x11401)));
evalcond[5]=((((-1.0)*r00*x11388*x11398))+((cj2*sj1))+((r01*x11386*x11394))+((r00*x11391))+x11395+((cj3*x11389))+(((-1.0)*r02*x11401)));
evalcond[6]=(((r00*x11386*x11392))+((sj3*x11389))+((r00*x11394))+(((-1.0)*x11396))+x11387+((r02*x11400))+(((-1.0)*r01*x11391*x11399)));
evalcond[7]=(((r20*x11391))+(((-1.0)*x11396))+x11387+(((-1.0)*r22*x11401))+((r21*x11392))+(((-1.0)*r20*x11388*x11398))+((r21*x11386*x11394)));
evalcond[8]=(((r20*x11394))+((r22*x11400))+(((-1.0)*cj2*x11390))+((r20*x11386*x11392))+(((-1.0)*x11395))+(((-1.0)*r21*x11391*x11399))+((r21*x11393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11402=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11402;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11403=((1.0)*cj5);
IkReal x11404=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11403)));
j4eval[0]=x11404;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11403))))));
j4eval[2]=IKsign(x11404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11405=cj5*cj5;
IkReal x11406=(cj3*r11*r21);
IkReal x11407=((1.0)*cj3*cj5*sj5);
IkReal x11408=(((cj3*r12*r22))+x11406+(((-1.0)*r10*r21*x11407))+(((-1.0)*x11405*x11406))+((cj3*r10*r20*x11405))+(((-1.0)*r11*r20*x11407)));
j4eval[0]=x11408;
j4eval[1]=IKsign(x11408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11409=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11409;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11409);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11410=((1.0)*cj5);
IkReal x11411=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11410)));
j4eval[0]=x11411;
j4eval[1]=((IKabs(((((-1.0)*r20*x11410))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11412=cj5*cj5;
IkReal x11413=r11*r11;
IkReal x11414=(r11*sj5);
IkReal x11415=(cj5*r10);
IkReal x11416=((r12*r12)+x11413+(((-2.0)*x11414*x11415))+(((-1.0)*x11412*x11413))+((x11412*(r10*r10))));
j4eval[0]=x11416;
j4eval[1]=((IKabs(r12))+(IKabs((x11414+(((-1.0)*x11415))))));
j4eval[2]=IKsign(x11416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11417=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11417);
rxp1_1=(px*r21);
rxp1_2=(r11*x11417);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11418=((1.0)*cj5);
j4eval[0]=((((-1.0)*r20*x11418))+((r21*sj5)));
j4eval[1]=((((-1.0)*r10*x11418))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11419=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11419);
rxp1_1=(px*r21);
rxp1_2=(r11*x11419);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11420=((1.0)*cj2);
CheckValue<IkReal> x11421=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11421.valid){
continue;
}
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(r02,-1);
if(!x11422.valid){
continue;
}
if( IKabs(((x11421.value)*(((((-1.0)*cj1*x11420))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11422.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11421.value)*(((((-1.0)*cj1*x11420))+((sj1*sj2))))))+IKsqr(((x11422.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11420))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11421.value)*(((((-1.0)*cj1*x11420))+((sj1*sj2))))), ((x11422.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11420))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11423=IKcos(j4);
IkReal x11424=IKsin(j4);
IkReal x11425=((1.0)*sj1);
IkReal x11426=(r21*sj5);
IkReal x11427=(cj5*r10);
IkReal x11428=(r11*sj5);
IkReal x11429=((1.0)*cj5*r20);
IkReal x11430=((1.0)*x11423);
evalcond[0]=(r02*x11424);
evalcond[1]=(((x11423*x11426))+(((-1.0)*x11423*x11429)));
evalcond[2]=(((x11424*x11428))+(((-1.0)*x11424*x11427)));
evalcond[3]=((-1.0)+((x11423*x11428))+(((-1.0)*x11427*x11430)));
evalcond[4]=((((-1.0)*r02*x11430))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11425)));
evalcond[5]=((((-1.0)*x11424*x11429))+((cj1*cj2))+((x11424*x11426))+(((-1.0)*sj2*x11425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11431=((1.0)*cj5);
CheckValue<IkReal> x11432=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11431))),-1);
if(!x11432.valid){
continue;
}
CheckValue<IkReal> x11433=IKPowWithIntegerCheck(((((-1.0)*r10*x11431))+((r11*sj5))),-1);
if(!x11433.valid){
continue;
}
if( IKabs(((x11432.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11433.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11432.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11433.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11432.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11433.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11434=IKcos(j4);
IkReal x11435=IKsin(j4);
IkReal x11436=((1.0)*sj1);
IkReal x11437=(r21*sj5);
IkReal x11438=(cj5*r10);
IkReal x11439=(r11*sj5);
IkReal x11440=((1.0)*cj5*r20);
IkReal x11441=((1.0)*x11434);
evalcond[0]=(r02*x11435);
evalcond[1]=(((x11434*x11437))+(((-1.0)*x11434*x11440)));
evalcond[2]=((((-1.0)*x11435*x11438))+((x11435*x11439)));
evalcond[3]=((-1.0)+((x11434*x11439))+(((-1.0)*x11438*x11441)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11436))+(((-1.0)*r02*x11441)));
evalcond[5]=(((x11435*x11437))+(((-1.0)*x11435*x11440))+((cj1*cj2))+(((-1.0)*sj2*x11436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11442=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11442);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11442);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11443=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x11443)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11443)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11444=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11444);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11444);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11445=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11445.valid){
continue;
}
CheckValue<IkReal> x11446=IKPowWithIntegerCheck(r22,-1);
if(!x11446.valid){
continue;
}
if( IKabs(((x11445.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11446.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11445.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11446.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11445.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11446.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11447=IKcos(j4);
IkReal x11448=IKsin(j4);
IkReal x11449=(cj5*r00);
IkReal x11450=((1.0)*sj1);
IkReal x11451=(cj5*r10);
IkReal x11452=((1.0)*x11447);
IkReal x11453=((1.0)*x11448);
IkReal x11454=(sj5*x11447);
IkReal x11455=(sj5*x11448);
evalcond[0]=(r22*x11448);
evalcond[1]=((((-1.0)*x11449*x11452))+((r01*x11454)));
evalcond[2]=((((-1.0)*sj2*x11450))+((cj1*cj2))+(((-1.0)*r22*x11452)));
evalcond[3]=(((r11*x11455))+(((-1.0)*x11451*x11453)));
evalcond[4]=((-1.0)+((r11*x11454))+(((-1.0)*x11451*x11452)));
evalcond[5]=((((-1.0)*x11449*x11453))+(((-1.0)*cj1*sj2))+((r01*x11455))+(((-1.0)*cj2*x11450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11456=((1.0)*cj5);
CheckValue<IkReal> x11457=IKPowWithIntegerCheck(((((-1.0)*r00*x11456))+((r01*sj5))),-1);
if(!x11457.valid){
continue;
}
CheckValue<IkReal> x11458=IKPowWithIntegerCheck(((((-1.0)*r10*x11456))+((r11*sj5))),-1);
if(!x11458.valid){
continue;
}
if( IKabs(((x11457.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11458.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11457.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11458.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11457.value)*((((cj2*sj1))+((cj1*sj2))))), x11458.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11459=IKcos(j4);
IkReal x11460=IKsin(j4);
IkReal x11461=(cj5*r00);
IkReal x11462=((1.0)*sj1);
IkReal x11463=(cj5*r10);
IkReal x11464=((1.0)*x11459);
IkReal x11465=((1.0)*x11460);
IkReal x11466=(sj5*x11459);
IkReal x11467=(sj5*x11460);
evalcond[0]=(r22*x11460);
evalcond[1]=(((r01*x11466))+(((-1.0)*x11461*x11464)));
evalcond[2]=((((-1.0)*sj2*x11462))+(((-1.0)*r22*x11464))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11463*x11465))+((r11*x11467)));
evalcond[4]=((-1.0)+(((-1.0)*x11463*x11464))+((r11*x11466)));
evalcond[5]=(((r01*x11467))+(((-1.0)*x11461*x11465))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11468=cj5*cj5;
IkReal x11469=r11*r11;
IkReal x11470=(cj5*r10);
IkReal x11471=(r11*sj5);
CheckValue<IkReal> x11472 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x11470))+x11471)),IKFAST_ATAN2_MAGTHRESH);
if(!x11472.valid){
continue;
}
CheckValue<IkReal> x11473=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11468*x11469))+(r12*r12)+x11469+(((-2.0)*x11470*x11471))+((x11468*(r10*r10))))),-1);
if(!x11473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11472.value)+(((1.5707963267949)*(x11473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11474=IKcos(j4);
IkReal x11475=IKsin(j4);
IkReal x11476=(cj5*r00);
IkReal x11477=(cj5*r10);
IkReal x11478=((1.0)*sj1);
IkReal x11479=(cj5*r20);
IkReal x11480=((1.0)*x11474);
IkReal x11481=((1.0)*x11475);
IkReal x11482=(sj5*x11474);
IkReal x11483=(sj5*x11475);
evalcond[0]=((((-1.0)*x11479*x11480))+((r22*x11475))+((r21*x11482)));
evalcond[1]=(((r01*x11482))+((r02*x11475))+(((-1.0)*x11476*x11480)));
evalcond[2]=((-1.0)+((r12*x11475))+((r11*x11482))+(((-1.0)*x11477*x11480)));
evalcond[3]=((((-1.0)*r12*x11480))+((r11*x11483))+(((-1.0)*x11477*x11481)));
evalcond[4]=((((-1.0)*x11479*x11481))+(((-1.0)*sj2*x11478))+(((-1.0)*r22*x11480))+((cj1*cj2))+((r21*x11483)));
evalcond[5]=((((-1.0)*r02*x11480))+(((-1.0)*cj2*x11478))+(((-1.0)*cj1*sj2))+((r01*x11483))+(((-1.0)*x11476*x11481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11484=((1.0)*cj5);
CheckValue<IkReal> x11485 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x11484)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11485.valid){
continue;
}
CheckValue<IkReal> x11486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11484)))),-1);
if(!x11486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11485.value)+(((1.5707963267949)*(x11486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11487=IKcos(j4);
IkReal x11488=IKsin(j4);
IkReal x11489=(cj5*r00);
IkReal x11490=(cj5*r10);
IkReal x11491=((1.0)*sj1);
IkReal x11492=(cj5*r20);
IkReal x11493=((1.0)*x11487);
IkReal x11494=((1.0)*x11488);
IkReal x11495=(sj5*x11487);
IkReal x11496=(sj5*x11488);
evalcond[0]=(((r21*x11495))+((r22*x11488))+(((-1.0)*x11492*x11493)));
evalcond[1]=((((-1.0)*x11489*x11493))+((r02*x11488))+((r01*x11495)));
evalcond[2]=((-1.0)+(((-1.0)*x11490*x11493))+((r11*x11495))+((r12*x11488)));
evalcond[3]=((((-1.0)*x11490*x11494))+((r11*x11496))+(((-1.0)*r12*x11493)));
evalcond[4]=(((r21*x11496))+(((-1.0)*sj2*x11491))+(((-1.0)*r22*x11493))+((cj1*cj2))+(((-1.0)*x11492*x11494)));
evalcond[5]=((((-1.0)*cj2*x11491))+(((-1.0)*cj1*sj2))+(((-1.0)*x11489*x11494))+(((-1.0)*r02*x11493))+((r01*x11496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11497=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11497.valid){
continue;
}
CheckValue<IkReal> x11498 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11497.value)))+(x11498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11499=IKcos(j4);
IkReal x11500=IKsin(j4);
IkReal x11501=(cj5*r00);
IkReal x11502=(cj5*r10);
IkReal x11503=((1.0)*sj1);
IkReal x11504=(cj5*r20);
IkReal x11505=((1.0)*x11499);
IkReal x11506=((1.0)*x11500);
IkReal x11507=(sj5*x11499);
IkReal x11508=(sj5*x11500);
evalcond[0]=(((r21*x11507))+(((-1.0)*x11504*x11505))+((r22*x11500)));
evalcond[1]=((((-1.0)*x11501*x11505))+((r01*x11507))+((r02*x11500)));
evalcond[2]=((-1.0)+((r12*x11500))+((r11*x11507))+(((-1.0)*x11502*x11505)));
evalcond[3]=((((-1.0)*r12*x11505))+((r11*x11508))+(((-1.0)*x11502*x11506)));
evalcond[4]=(((r21*x11508))+(((-1.0)*x11504*x11506))+(((-1.0)*r22*x11505))+((cj1*cj2))+(((-1.0)*sj2*x11503)));
evalcond[5]=((((-1.0)*r02*x11505))+(((-1.0)*x11501*x11506))+(((-1.0)*cj2*x11503))+(((-1.0)*cj1*sj2))+((r01*x11508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11509=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11509;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11510=((1.0)*cj5);
IkReal x11511=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11510)));
j4eval[0]=x11511;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x11510))))));
j4eval[2]=IKsign(x11511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11512=cj5*cj5;
IkReal x11513=r11*r11;
IkReal x11514=(r11*sj5);
IkReal x11515=(cj5*r10);
IkReal x11516=((r12*r12)+(((-1.0)*x11512*x11513))+x11513+(((-2.0)*x11514*x11515))+((x11512*(r10*r10))));
j4eval[0]=x11516;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x11515))+x11514))));
j4eval[2]=IKsign(x11516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11517=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11517);
rxp1_1=(px*r21);
rxp1_2=(r11*x11517);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11518=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11518);
rxp1_1=(px*r21);
rxp1_2=(r11*x11518);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11519=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11519.valid){
continue;
}
CheckValue<IkReal> x11520=IKPowWithIntegerCheck(r02,-1);
if(!x11520.valid){
continue;
}
if( IKabs(((x11519.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11520.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11519.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11520.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11519.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11520.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11521=IKcos(j4);
IkReal x11522=IKsin(j4);
IkReal x11523=((1.0)*sj1);
IkReal x11524=(sj5*x11521);
IkReal x11525=(cj5*x11522);
IkReal x11526=((1.0)*sj5*x11522);
IkReal x11527=((1.0)*cj5*x11521);
evalcond[0]=(r02*x11522);
evalcond[1]=((((-1.0)*r20*x11527))+((r21*x11524)));
evalcond[2]=((((-1.0)*cj2*x11523))+(((-1.0)*cj1*sj2))+((r02*x11521)));
evalcond[3]=(((r10*x11525))+(((-1.0)*r11*x11526)));
evalcond[4]=((-1.0)+((r11*x11524))+(((-1.0)*r10*x11527)));
evalcond[5]=(((r20*x11525))+((cj1*cj2))+(((-1.0)*sj2*x11523))+(((-1.0)*r21*x11526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11528=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11528.valid){
continue;
}
CheckValue<IkReal> x11529=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11529.valid){
continue;
}
if( IKabs(((x11528.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11529.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11528.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11529.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11528.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11529.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11530=IKcos(j4);
IkReal x11531=IKsin(j4);
IkReal x11532=((1.0)*sj1);
IkReal x11533=(sj5*x11530);
IkReal x11534=(cj5*x11531);
IkReal x11535=((1.0)*sj5*x11531);
IkReal x11536=((1.0)*cj5*x11530);
evalcond[0]=(r02*x11531);
evalcond[1]=(((r21*x11533))+(((-1.0)*r20*x11536)));
evalcond[2]=((((-1.0)*cj2*x11532))+(((-1.0)*cj1*sj2))+((r02*x11530)));
evalcond[3]=((((-1.0)*r11*x11535))+((r10*x11534)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x11536))+((r11*x11533)));
evalcond[5]=((((-1.0)*sj2*x11532))+((r20*x11534))+((cj1*cj2))+(((-1.0)*r21*x11535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11537=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11537);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11537);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11538=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11538);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11538);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11539=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11539.valid){
continue;
}
CheckValue<IkReal> x11540=IKPowWithIntegerCheck(r22,-1);
if(!x11540.valid){
continue;
}
if( IKabs(((x11539.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11540.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11539.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11540.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11539.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11540.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11541=IKcos(j4);
IkReal x11542=IKsin(j4);
IkReal x11543=(cj5*r00);
IkReal x11544=(cj5*r10);
IkReal x11545=((1.0)*sj2);
IkReal x11546=((1.0)*x11541);
IkReal x11547=(sj5*x11541);
IkReal x11548=((1.0)*sj5*x11542);
evalcond[0]=(r22*x11542);
evalcond[1]=(((r22*x11541))+(((-1.0)*sj1*x11545))+((cj1*cj2)));
evalcond[2]=(((r01*x11547))+(((-1.0)*x11543*x11546)));
evalcond[3]=(((x11542*x11544))+(((-1.0)*r11*x11548)));
evalcond[4]=((-1.0)+((r11*x11547))+(((-1.0)*x11544*x11546)));
evalcond[5]=((((-1.0)*r01*x11548))+(((-1.0)*cj2*sj1))+((x11542*x11543))+(((-1.0)*cj1*x11545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11549=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11549.valid){
continue;
}
CheckValue<IkReal> x11550=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11550.valid){
continue;
}
if( IKabs(((x11549.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11550.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11549.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11550.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11549.value)*((((cj2*sj1))+((cj1*sj2))))), x11550.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11551=IKcos(j4);
IkReal x11552=IKsin(j4);
IkReal x11553=(cj5*r00);
IkReal x11554=(cj5*r10);
IkReal x11555=((1.0)*sj2);
IkReal x11556=((1.0)*x11551);
IkReal x11557=(sj5*x11551);
IkReal x11558=((1.0)*sj5*x11552);
evalcond[0]=(r22*x11552);
evalcond[1]=((((-1.0)*sj1*x11555))+((r22*x11551))+((cj1*cj2)));
evalcond[2]=(((r01*x11557))+(((-1.0)*x11553*x11556)));
evalcond[3]=((((-1.0)*r11*x11558))+((x11552*x11554)));
evalcond[4]=((-1.0)+((r11*x11557))+(((-1.0)*x11554*x11556)));
evalcond[5]=((((-1.0)*cj1*x11555))+(((-1.0)*cj2*sj1))+((x11552*x11553))+(((-1.0)*r01*x11558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11559=cj5*cj5;
IkReal x11560=r11*r11;
IkReal x11561=(cj5*r10);
IkReal x11562=(r11*sj5);
CheckValue<IkReal> x11563=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11560+(((-2.0)*x11561*x11562))+((x11559*(r10*r10)))+(((-1.0)*x11559*x11560)))),-1);
if(!x11563.valid){
continue;
}
CheckValue<IkReal> x11564 = IKatan2WithCheck(IkReal(r12),IkReal((x11562+(((-1.0)*x11561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11563.value)))+(x11564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11565=IKcos(j4);
IkReal x11566=IKsin(j4);
IkReal x11567=(cj5*r00);
IkReal x11568=((1.0)*sj2);
IkReal x11569=((1.0)*x11565);
IkReal x11570=(sj5*x11565);
IkReal x11571=(cj5*x11566);
IkReal x11572=((1.0)*sj5*x11566);
evalcond[0]=((((-1.0)*cj5*r20*x11569))+((r21*x11570))+((r22*x11566)));
evalcond[1]=(((r01*x11570))+((r02*x11566))+(((-1.0)*x11567*x11569)));
evalcond[2]=(((r10*x11571))+((r12*x11565))+(((-1.0)*r11*x11572)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x11569))+((r11*x11570))+((r12*x11566)));
evalcond[4]=(((r20*x11571))+(((-1.0)*r21*x11572))+(((-1.0)*sj1*x11568))+((r22*x11565))+((cj1*cj2)));
evalcond[5]=(((x11566*x11567))+(((-1.0)*r01*x11572))+(((-1.0)*cj2*sj1))+((r02*x11565))+(((-1.0)*cj1*x11568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11573=((1.0)*cj5);
CheckValue<IkReal> x11574 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x11573)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11574.valid){
continue;
}
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11573))+(((-1.0)*r00*sj5)))),-1);
if(!x11575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11574.value)+(((1.5707963267949)*(x11575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11576=IKcos(j4);
IkReal x11577=IKsin(j4);
IkReal x11578=(cj5*r00);
IkReal x11579=((1.0)*sj2);
IkReal x11580=((1.0)*x11576);
IkReal x11581=(sj5*x11576);
IkReal x11582=(cj5*x11577);
IkReal x11583=((1.0)*sj5*x11577);
evalcond[0]=(((r21*x11581))+((r22*x11577))+(((-1.0)*cj5*r20*x11580)));
evalcond[1]=(((r01*x11581))+(((-1.0)*x11578*x11580))+((r02*x11577)));
evalcond[2]=(((r12*x11576))+((r10*x11582))+(((-1.0)*r11*x11583)));
evalcond[3]=((-1.0)+((r12*x11577))+(((-1.0)*cj5*r10*x11580))+((r11*x11581)));
evalcond[4]=(((r20*x11582))+(((-1.0)*sj1*x11579))+((cj1*cj2))+((r22*x11576))+(((-1.0)*r21*x11583)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r01*x11583))+((r02*x11576))+((x11577*x11578))+(((-1.0)*cj1*x11579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11584=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11584.valid){
continue;
}
CheckValue<IkReal> x11585 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11584.value)))+(x11585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11586=IKcos(j4);
IkReal x11587=IKsin(j4);
IkReal x11588=(cj5*r00);
IkReal x11589=((1.0)*sj2);
IkReal x11590=((1.0)*x11586);
IkReal x11591=(sj5*x11586);
IkReal x11592=(cj5*x11587);
IkReal x11593=((1.0)*sj5*x11587);
evalcond[0]=((((-1.0)*cj5*r20*x11590))+((r22*x11587))+((r21*x11591)));
evalcond[1]=(((r01*x11591))+(((-1.0)*x11588*x11590))+((r02*x11587)));
evalcond[2]=(((r10*x11592))+(((-1.0)*r11*x11593))+((r12*x11586)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x11590))+((r11*x11591))+((r12*x11587)));
evalcond[4]=(((r20*x11592))+((r22*x11586))+(((-1.0)*r21*x11593))+((cj1*cj2))+(((-1.0)*sj1*x11589)));
evalcond[5]=((((-1.0)*r01*x11593))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11589))+((r02*x11586))+((x11587*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11594=((-1.0)*r00);
IkReal x11596 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11596)==0){
continue;
}
IkReal x11595=pow(x11596,-0.5);
CheckValue<IkReal> x11597 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11594),IKFAST_ATAN2_MAGTHRESH);
if(!x11597.valid){
continue;
}
IkReal gconst30=((-1.0)*(x11597.value));
IkReal gconst31=(r01*x11595);
IkReal gconst32=(x11594*x11595);
CheckValue<IkReal> x11598 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11599=((-1.0)*r00);
IkReal x11600=x11595;
CheckValue<IkReal> x11602 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11599),IKFAST_ATAN2_MAGTHRESH);
if(!x11602.valid){
continue;
}
IkReal x11601=((-1.0)*(x11602.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11601;
IkReal gconst30=x11601;
IkReal gconst31=(r01*x11600);
IkReal gconst32=(x11599*x11600);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11603=((-1.0)*r00);
IkReal x11604=x11595;
CheckValue<IkReal> x11606 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11603),IKFAST_ATAN2_MAGTHRESH);
if(!x11606.valid){
continue;
}
IkReal x11605=((-1.0)*(x11606.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11605;
IkReal gconst30=x11605;
IkReal gconst31=(r01*x11604);
IkReal gconst32=(x11603*x11604);
CheckValue<IkReal> x11614=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11614.valid){
continue;
}
IkReal x11607=x11614.value;
IkReal x11608=(cj3*x11607);
IkReal x11609=(r21*x11608);
IkReal x11610=(r10*x11608);
IkReal x11611=(r11*x11608);
IkReal x11612=(r20*x11608);
IkReal x11613=(r00*r01*x11608);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x11611))+((r00*r01*r10*x11609))+((r11*x11609*(r01*r01)))+((r20*x11610*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11615=gconst31*gconst31;
IkReal x11616=gconst32*gconst32;
IkReal x11617=((1.0)*r22);
IkReal x11618=(cj3*r10);
IkReal x11619=(r11*r20);
IkReal x11620=(gconst31*gconst32);
IkReal x11621=(r10*sj3);
IkReal x11622=(cj3*r11);
IkReal x11623=(r21*x11615);
IkReal x11624=((1.0)*x11616);
CheckValue<IkReal> x11625 = IKatan2WithCheck(IkReal((((r21*x11620*x11622))+(((-1.0)*cj3*x11619*x11624))+((x11618*x11623))+(((-1.0)*r20*x11618*x11620)))),IkReal(((((-1.0)*gconst31*x11617*x11618))+(((-1.0)*gconst32*x11617*x11622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11625.valid){
continue;
}
CheckValue<IkReal> x11626=IKPowWithIntegerCheck(IKsign((((r21*x11620*x11621))+(((-1.0)*r20*x11621*x11624))+(((-1.0)*r11*sj3*x11623))+((sj3*x11619*x11620))+(((-1.0)*r12*sj3*x11617)))),-1);
if(!x11626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11625.value)+(((1.5707963267949)*(x11626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11627=IKcos(j4);
IkReal x11628=IKsin(j4);
IkReal x11629=(gconst32*r21);
IkReal x11630=(cj3*gconst32);
IkReal x11631=(gconst31*sj3);
IkReal x11632=(sj1*sj2);
IkReal x11633=((1.0)*cj2);
IkReal x11634=(cj3*gconst31);
IkReal x11635=((1.0)*sj3);
IkReal x11636=(gconst32*sj3);
IkReal x11637=((1.0)*cj1*sj2);
IkReal x11638=(sj1*x11633);
IkReal x11639=(r00*x11628);
IkReal x11640=(r20*x11628);
IkReal x11641=(gconst31*x11627);
IkReal x11642=(r22*x11627);
IkReal x11643=(r21*x11628);
IkReal x11644=(r01*x11628);
IkReal x11645=(r12*x11627);
IkReal x11646=(r11*x11628);
IkReal x11647=(r10*x11628);
IkReal x11648=(r02*x11627);
IkReal x11649=((1.0)*gconst32*x11627);
IkReal x11650=(x11638+x11637);
evalcond[0]=(((r22*x11628))+((r21*x11641))+(((-1.0)*r20*x11649)));
evalcond[1]=(((r02*x11628))+(((-1.0)*r00*x11649))+((r01*x11641)));
evalcond[2]=((-1.0)+((r12*x11628))+((r11*x11641))+(((-1.0)*r10*x11649)));
evalcond[3]=(((r11*x11636))+((r10*x11631))+(((-1.0)*x11634*x11646))+((cj3*x11645))+((x11630*x11647)));
evalcond[4]=(((r11*x11630))+((r10*x11634))+((x11631*x11646))+(((-1.0)*x11635*x11645))+(((-1.0)*gconst32*x11635*x11647)));
evalcond[5]=(x11632+(((-1.0)*x11634*x11644))+((cj3*x11648))+((x11630*x11639))+(((-1.0)*cj1*x11633))+((r00*x11631))+((r01*x11636)));
evalcond[6]=(((cj3*x11629))+(((-1.0)*x11632))+((x11631*x11643))+(((-1.0)*x11635*x11642))+((r20*x11634))+((cj1*cj2))+(((-1.0)*gconst32*x11635*x11640)));
evalcond[7]=((((-1.0)*x11650))+(((-1.0)*x11634*x11643))+((cj3*x11642))+((x11630*x11640))+((sj3*x11629))+((r20*x11631)));
evalcond[8]=((((-1.0)*x11650))+((x11631*x11644))+(((-1.0)*x11635*x11648))+(((-1.0)*gconst32*x11635*x11639))+((r00*x11634))+((r01*x11630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11651=gconst31*gconst31;
IkReal x11652=gconst32*gconst32;
IkReal x11653=(r21*sj3);
IkReal x11654=(gconst31*gconst32);
IkReal x11655=((1.0)*r10);
IkReal x11656=(cj3*r21);
IkReal x11657=(r22*sj3);
IkReal x11658=((1.0)*r11);
IkReal x11659=(r20*sj3);
IkReal x11660=(cj3*r20);
CheckValue<IkReal> x11661 = IKatan2WithCheck(IkReal((((r11*x11653*x11654))+(((-1.0)*x11652*x11658*x11659))+(((-1.0)*x11654*x11655*x11659))+((r10*x11651*x11653)))),IkReal(((((-1.0)*gconst31*x11655*x11657))+(((-1.0)*gconst32*x11657*x11658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11661.valid){
continue;
}
CheckValue<IkReal> x11662=IKPowWithIntegerCheck(IKsign((((r11*x11651*x11656))+((cj3*r12*r22))+((r10*x11652*x11660))+(((-1.0)*x11654*x11655*x11656))+(((-1.0)*x11654*x11658*x11660)))),-1);
if(!x11662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11661.value)+(((1.5707963267949)*(x11662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11663=IKcos(j4);
IkReal x11664=IKsin(j4);
IkReal x11665=(gconst32*r21);
IkReal x11666=(cj3*gconst32);
IkReal x11667=(gconst31*sj3);
IkReal x11668=(sj1*sj2);
IkReal x11669=((1.0)*cj2);
IkReal x11670=(cj3*gconst31);
IkReal x11671=((1.0)*sj3);
IkReal x11672=(gconst32*sj3);
IkReal x11673=((1.0)*cj1*sj2);
IkReal x11674=(sj1*x11669);
IkReal x11675=(r00*x11664);
IkReal x11676=(r20*x11664);
IkReal x11677=(gconst31*x11663);
IkReal x11678=(r22*x11663);
IkReal x11679=(r21*x11664);
IkReal x11680=(r01*x11664);
IkReal x11681=(r12*x11663);
IkReal x11682=(r11*x11664);
IkReal x11683=(r10*x11664);
IkReal x11684=(r02*x11663);
IkReal x11685=((1.0)*gconst32*x11663);
IkReal x11686=(x11673+x11674);
evalcond[0]=((((-1.0)*r20*x11685))+((r21*x11677))+((r22*x11664)));
evalcond[1]=((((-1.0)*r00*x11685))+((r01*x11677))+((r02*x11664)));
evalcond[2]=((-1.0)+((r11*x11677))+(((-1.0)*r10*x11685))+((r12*x11664)));
evalcond[3]=(((r11*x11672))+(((-1.0)*x11670*x11682))+((cj3*x11681))+((r10*x11667))+((x11666*x11683)));
evalcond[4]=(((x11667*x11682))+(((-1.0)*x11671*x11681))+((r11*x11666))+((r10*x11670))+(((-1.0)*gconst32*x11671*x11683)));
evalcond[5]=(x11668+(((-1.0)*cj1*x11669))+((x11666*x11675))+((r00*x11667))+((r01*x11672))+(((-1.0)*x11670*x11680))+((cj3*x11684)));
evalcond[6]=((((-1.0)*x11671*x11678))+((r20*x11670))+((cj3*x11665))+((cj1*cj2))+((x11667*x11679))+(((-1.0)*x11668))+(((-1.0)*gconst32*x11671*x11676)));
evalcond[7]=(((sj3*x11665))+((r20*x11667))+(((-1.0)*x11686))+(((-1.0)*x11670*x11679))+((x11666*x11676))+((cj3*x11678)));
evalcond[8]=((((-1.0)*x11686))+((r01*x11666))+((r00*x11670))+((x11667*x11680))+(((-1.0)*x11671*x11684))+(((-1.0)*gconst32*x11671*x11675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11687=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x11687.valid){
continue;
}
CheckValue<IkReal> x11688 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11687.value)))+(x11688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11689=IKcos(j4);
IkReal x11690=IKsin(j4);
IkReal x11691=(gconst32*r21);
IkReal x11692=(cj3*gconst32);
IkReal x11693=(gconst31*sj3);
IkReal x11694=(sj1*sj2);
IkReal x11695=((1.0)*cj2);
IkReal x11696=(cj3*gconst31);
IkReal x11697=((1.0)*sj3);
IkReal x11698=(gconst32*sj3);
IkReal x11699=((1.0)*cj1*sj2);
IkReal x11700=(sj1*x11695);
IkReal x11701=(r00*x11690);
IkReal x11702=(r20*x11690);
IkReal x11703=(gconst31*x11689);
IkReal x11704=(r22*x11689);
IkReal x11705=(r21*x11690);
IkReal x11706=(r01*x11690);
IkReal x11707=(r12*x11689);
IkReal x11708=(r11*x11690);
IkReal x11709=(r10*x11690);
IkReal x11710=(r02*x11689);
IkReal x11711=((1.0)*gconst32*x11689);
IkReal x11712=(x11700+x11699);
evalcond[0]=((((-1.0)*r20*x11711))+((r21*x11703))+((r22*x11690)));
evalcond[1]=(((r01*x11703))+(((-1.0)*r00*x11711))+((r02*x11690)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11711))+((r12*x11690))+((r11*x11703)));
evalcond[3]=(((x11692*x11709))+((cj3*x11707))+((r10*x11693))+((r11*x11698))+(((-1.0)*x11696*x11708)));
evalcond[4]=(((x11693*x11708))+(((-1.0)*x11697*x11707))+((r10*x11696))+((r11*x11692))+(((-1.0)*gconst32*x11697*x11709)));
evalcond[5]=(x11694+((x11692*x11701))+((r01*x11698))+((r00*x11693))+(((-1.0)*cj1*x11695))+((cj3*x11710))+(((-1.0)*x11696*x11706)));
evalcond[6]=(((x11693*x11705))+((r20*x11696))+(((-1.0)*x11697*x11704))+(((-1.0)*x11694))+((cj1*cj2))+((cj3*x11691))+(((-1.0)*gconst32*x11697*x11702)));
evalcond[7]=((((-1.0)*x11712))+((x11692*x11702))+((sj3*x11691))+((r20*x11693))+((cj3*x11704))+(((-1.0)*x11696*x11705)));
evalcond[8]=((((-1.0)*x11712))+((x11693*x11706))+((r01*x11692))+((r00*x11696))+(((-1.0)*x11697*x11710))+(((-1.0)*gconst32*x11697*x11701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11713=((-1.0)*r01);
IkReal x11715 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11715)==0){
continue;
}
IkReal x11714=pow(x11715,-0.5);
CheckValue<IkReal> x11716 = IKatan2WithCheck(IkReal(x11713),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11716.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x11716.value))));
IkReal gconst34=(x11713*x11714);
IkReal gconst35=((1.0)*r00*x11714);
CheckValue<IkReal> x11717 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11717.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11717.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11718=((-1.0)*r01);
CheckValue<IkReal> x11721 = IKatan2WithCheck(IkReal(x11718),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11721.valid){
continue;
}
IkReal x11719=((1.0)*(x11721.value));
IkReal x11720=x11714;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11719)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11719)));
IkReal gconst34=(x11718*x11720);
IkReal gconst35=((1.0)*r00*x11720);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11722=((-1.0)*r01);
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(x11722),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
IkReal x11723=((1.0)*(x11725.value));
IkReal x11724=x11714;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11723)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11723)));
IkReal gconst34=(x11722*x11724);
IkReal gconst35=((1.0)*r00*x11724);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11726=gconst35*gconst35;
IkReal x11727=gconst34*gconst34;
IkReal x11728=(r22*sj3);
IkReal x11729=(cj3*r20);
IkReal x11730=(r11*r21);
IkReal x11731=(r10*r21);
IkReal x11732=((1.0)*r10);
IkReal x11733=((1.0)*gconst35*r11);
IkReal x11734=(gconst34*gconst35*sj3);
CheckValue<IkReal> x11735 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11732*x11734))+(((-1.0)*r11*r20*sj3*x11726))+((sj3*x11727*x11731))+((x11730*x11734)))),IkReal(((((-1.0)*x11728*x11733))+(((-1.0)*gconst34*x11728*x11732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11735.valid){
continue;
}
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x11727*x11730))+((r10*x11726*x11729))+(((-1.0)*cj3*gconst34*gconst35*x11731))+(((-1.0)*gconst34*x11729*x11733)))),-1);
if(!x11736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11735.value)+(((1.5707963267949)*(x11736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11737=IKcos(j4);
IkReal x11738=IKsin(j4);
IkReal x11739=((1.0)*cj1);
IkReal x11740=(gconst35*r10);
IkReal x11741=(cj3*gconst35);
IkReal x11742=(sj1*sj2);
IkReal x11743=(cj3*gconst34);
IkReal x11744=(gconst35*sj3);
IkReal x11745=(gconst34*sj3);
IkReal x11746=(sj2*x11739);
IkReal x11747=((1.0)*cj2*sj1);
IkReal x11748=((1.0)*x11737);
IkReal x11749=(gconst34*x11737);
IkReal x11750=(r20*x11738);
IkReal x11751=(cj3*x11737);
IkReal x11752=((1.0)*x11738);
IkReal x11753=(x11738*x11745);
IkReal x11754=(x11746+x11747);
evalcond[0]=((((-1.0)*gconst35*r20*x11748))+((r21*x11749))+((r22*x11738)));
evalcond[1]=((((-1.0)*gconst35*r00*x11748))+((r01*x11749))+((r02*x11738)));
evalcond[2]=((-1.0)+(((-1.0)*x11740*x11748))+((r12*x11738))+((r11*x11749)));
evalcond[3]=(((r12*x11751))+((cj3*x11738*x11740))+((r10*x11745))+(((-1.0)*r11*x11743*x11752))+((r11*x11744)));
evalcond[4]=(((r11*x11753))+((r10*x11743))+(((-1.0)*sj3*x11740*x11752))+((r11*x11741))+(((-1.0)*r12*sj3*x11748)));
evalcond[5]=(x11742+((r00*x11745))+((r01*x11744))+(((-1.0)*cj2*x11739))+((r02*x11751))+((r00*x11738*x11741))+(((-1.0)*r01*x11743*x11752)));
evalcond[6]=((((-1.0)*x11742))+((r20*x11743))+(((-1.0)*r22*sj3*x11748))+((r21*x11741))+((cj1*cj2))+((r21*x11753))+(((-1.0)*x11744*x11750)));
evalcond[7]=((((-1.0)*r21*x11743*x11752))+((x11741*x11750))+((r20*x11745))+(((-1.0)*x11754))+((r22*x11751))+((r21*x11744)));
evalcond[8]=((((-1.0)*r00*x11744*x11752))+((r00*x11743))+((r01*x11741))+(((-1.0)*r02*sj3*x11748))+(((-1.0)*x11754))+((r01*x11753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11755=((1.0)*gconst35);
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x11755)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
CheckValue<IkReal> x11757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00))+(((-1.0)*r01*x11755)))),-1);
if(!x11757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11756.value)+(((1.5707963267949)*(x11757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11758=IKcos(j4);
IkReal x11759=IKsin(j4);
IkReal x11760=((1.0)*cj1);
IkReal x11761=(gconst35*r10);
IkReal x11762=(cj3*gconst35);
IkReal x11763=(sj1*sj2);
IkReal x11764=(cj3*gconst34);
IkReal x11765=(gconst35*sj3);
IkReal x11766=(gconst34*sj3);
IkReal x11767=(sj2*x11760);
IkReal x11768=((1.0)*cj2*sj1);
IkReal x11769=((1.0)*x11758);
IkReal x11770=(gconst34*x11758);
IkReal x11771=(r20*x11759);
IkReal x11772=(cj3*x11758);
IkReal x11773=((1.0)*x11759);
IkReal x11774=(x11759*x11766);
IkReal x11775=(x11768+x11767);
evalcond[0]=((((-1.0)*gconst35*r20*x11769))+((r21*x11770))+((r22*x11759)));
evalcond[1]=(((r02*x11759))+((r01*x11770))+(((-1.0)*gconst35*r00*x11769)));
evalcond[2]=((-1.0)+((r12*x11759))+((r11*x11770))+(((-1.0)*x11761*x11769)));
evalcond[3]=(((r11*x11765))+((cj3*x11759*x11761))+((r12*x11772))+((r10*x11766))+(((-1.0)*r11*x11764*x11773)));
evalcond[4]=(((r11*x11762))+((r10*x11764))+((r11*x11774))+(((-1.0)*r12*sj3*x11769))+(((-1.0)*sj3*x11761*x11773)));
evalcond[5]=(x11763+(((-1.0)*cj2*x11760))+((r02*x11772))+(((-1.0)*r01*x11764*x11773))+((r00*x11766))+((r01*x11765))+((r00*x11759*x11762)));
evalcond[6]=((((-1.0)*r22*sj3*x11769))+((r20*x11764))+(((-1.0)*x11763))+((r21*x11774))+((cj1*cj2))+(((-1.0)*x11765*x11771))+((r21*x11762)));
evalcond[7]=(((r20*x11766))+((x11762*x11771))+(((-1.0)*r21*x11764*x11773))+(((-1.0)*x11775))+((r22*x11772))+((r21*x11765)));
evalcond[8]=((((-1.0)*r00*x11765*x11773))+(((-1.0)*r02*sj3*x11769))+((r01*x11774))+(((-1.0)*x11775))+((r00*x11764))+((r01*x11762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11776 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r00))+((gconst34*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11776.valid){
continue;
}
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x11777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11776.value)+(((1.5707963267949)*(x11777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11778=IKcos(j4);
IkReal x11779=IKsin(j4);
IkReal x11780=((1.0)*cj1);
IkReal x11781=(gconst35*r10);
IkReal x11782=(cj3*gconst35);
IkReal x11783=(sj1*sj2);
IkReal x11784=(cj3*gconst34);
IkReal x11785=(gconst35*sj3);
IkReal x11786=(gconst34*sj3);
IkReal x11787=(sj2*x11780);
IkReal x11788=((1.0)*cj2*sj1);
IkReal x11789=((1.0)*x11778);
IkReal x11790=(gconst34*x11778);
IkReal x11791=(r20*x11779);
IkReal x11792=(cj3*x11778);
IkReal x11793=((1.0)*x11779);
IkReal x11794=(x11779*x11786);
IkReal x11795=(x11787+x11788);
evalcond[0]=(((r21*x11790))+(((-1.0)*gconst35*r20*x11789))+((r22*x11779)));
evalcond[1]=((((-1.0)*gconst35*r00*x11789))+((r02*x11779))+((r01*x11790)));
evalcond[2]=((-1.0)+((r12*x11779))+((r11*x11790))+(((-1.0)*x11781*x11789)));
evalcond[3]=((((-1.0)*r11*x11784*x11793))+((r12*x11792))+((r11*x11785))+((r10*x11786))+((cj3*x11779*x11781)));
evalcond[4]=(((r11*x11782))+((r11*x11794))+(((-1.0)*sj3*x11781*x11793))+((r10*x11784))+(((-1.0)*r12*sj3*x11789)));
evalcond[5]=(x11783+((r00*x11779*x11782))+((r02*x11792))+(((-1.0)*r01*x11784*x11793))+(((-1.0)*cj2*x11780))+((r00*x11786))+((r01*x11785)));
evalcond[6]=(((r21*x11782))+((r20*x11784))+(((-1.0)*x11783))+(((-1.0)*x11785*x11791))+(((-1.0)*r22*sj3*x11789))+((cj1*cj2))+((r21*x11794)));
evalcond[7]=(((r21*x11785))+((r20*x11786))+((x11782*x11791))+((r22*x11792))+(((-1.0)*r21*x11784*x11793))+(((-1.0)*x11795)));
evalcond[8]=((((-1.0)*r02*sj3*x11789))+(((-1.0)*r00*x11785*x11793))+((r01*x11794))+(((-1.0)*x11795))+((r00*x11784))+((r01*x11782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11797 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11797)==0){
continue;
}
IkReal x11796=pow(x11797,-0.5);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
IkReal gconst36=((-1.0)*(x11798.value));
IkReal gconst37=((-1.0)*r21*x11796);
IkReal gconst38=(r20*x11796);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11799.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((-1.0)*(x11802.value));
IkReal x11801=x11796;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11800;
IkReal gconst36=x11800;
IkReal gconst37=((-1.0)*r21*x11801);
IkReal gconst38=(r20*x11801);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11805 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11805.valid){
continue;
}
IkReal x11803=((-1.0)*(x11805.value));
IkReal x11804=x11796;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11803;
IkReal gconst36=x11803;
IkReal gconst37=((-1.0)*r21*x11804);
IkReal gconst38=(r20*x11804);
CheckValue<IkReal> x11813=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x11813.valid){
continue;
}
IkReal x11806=x11813.value;
IkReal x11807=(cj3*x11806);
IkReal x11808=(r11*x11807);
IkReal x11809=(r01*x11807);
IkReal x11810=(r00*x11807);
IkReal x11811=(r10*x11807);
IkReal x11812=(r20*r21*x11807);
j4eval[0]=IKsign((((r10*x11810*(r20*r20)))+((cj3*r02*r12))+((r00*r20*r21*x11808))+((r10*r20*r21*x11809))+((r01*x11808*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11814=gconst37*gconst37;
IkReal x11815=gconst38*gconst38;
IkReal x11816=(r01*r10);
IkReal x11817=(cj3*r11);
IkReal x11818=((1.0)*r02);
IkReal x11819=(gconst37*gconst38);
IkReal x11820=(r11*sj3);
IkReal x11821=(cj3*r10);
IkReal x11822=((1.0)*r00*x11815);
CheckValue<IkReal> x11823=IKPowWithIntegerCheck(IKsign((((sj3*x11816*x11819))+(((-1.0)*r01*x11814*x11820))+(((-1.0)*r10*sj3*x11822))+((r00*x11819*x11820))+(((-1.0)*r12*sj3*x11818)))),-1);
if(!x11823.valid){
continue;
}
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal((((r01*x11817*x11819))+((cj3*x11814*x11816))+(((-1.0)*x11817*x11822))+(((-1.0)*r00*x11819*x11821)))),IkReal(((((-1.0)*gconst38*x11817*x11818))+(((-1.0)*gconst37*x11818*x11821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11823.value)))+(x11824.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11825=IKcos(j4);
IkReal x11826=IKsin(j4);
IkReal x11827=(gconst37*r11);
IkReal x11828=(gconst38*r21);
IkReal x11829=((1.0)*gconst38);
IkReal x11830=(cj3*gconst37);
IkReal x11831=(gconst37*r21);
IkReal x11832=(sj1*sj2);
IkReal x11833=((1.0)*cj1);
IkReal x11834=(gconst37*r01);
IkReal x11835=(gconst38*r01);
IkReal x11836=(gconst38*r11);
IkReal x11837=(gconst37*sj3);
IkReal x11838=(sj2*x11833);
IkReal x11839=((1.0)*cj2*sj1);
IkReal x11840=(sj3*x11826);
IkReal x11841=((1.0)*x11826);
IkReal x11842=(cj3*x11825);
IkReal x11843=((1.0)*sj3*x11825);
IkReal x11844=(cj3*gconst38*x11826);
IkReal x11845=(x11838+x11839);
evalcond[0]=(((x11825*x11831))+((r22*x11826))+(((-1.0)*r20*x11825*x11829)));
evalcond[1]=(((x11825*x11834))+((r02*x11826))+(((-1.0)*r00*x11825*x11829)));
evalcond[2]=((-1.0)+((x11825*x11827))+(((-1.0)*r10*x11825*x11829))+((r12*x11826)));
evalcond[3]=(((sj3*x11836))+(((-1.0)*cj3*x11827*x11841))+((r10*x11837))+((r12*x11842))+((r10*x11844)));
evalcond[4]=(((r10*x11830))+(((-1.0)*r12*x11843))+((x11827*x11840))+((cj3*x11836))+(((-1.0)*r10*x11829*x11840)));
evalcond[5]=(((sj3*x11835))+((r00*x11844))+(((-1.0)*r01*x11830*x11841))+(((-1.0)*cj2*x11833))+((r02*x11842))+x11832+((r00*x11837)));
evalcond[6]=(((cj3*x11828))+(((-1.0)*x11832))+((x11831*x11840))+((r20*x11830))+((cj1*cj2))+(((-1.0)*r20*x11829*x11840))+(((-1.0)*r22*x11843)));
evalcond[7]=((((-1.0)*x11845))+((r20*x11844))+((sj3*x11828))+(((-1.0)*r21*x11830*x11841))+((r22*x11842))+((r20*x11837)));
evalcond[8]=((((-1.0)*r02*x11843))+(((-1.0)*x11845))+((x11834*x11840))+(((-1.0)*r00*x11829*x11840))+((cj3*x11835))+((r00*x11830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11846=gconst37*gconst37;
IkReal x11847=gconst38*gconst38;
IkReal x11848=((1.0)*r02);
IkReal x11849=(cj3*r10);
IkReal x11850=(cj3*r11);
IkReal x11851=(gconst37*r01);
IkReal x11852=((1.0)*gconst38);
IkReal x11853=(gconst37*r00);
IkReal x11854=(r10*sj3);
IkReal x11855=(gconst38*r11*sj3);
IkReal x11856=(r00*x11847);
IkReal x11857=(r01*x11846);
CheckValue<IkReal> x11858=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x11850*x11852*x11853))+(((-1.0)*x11849*x11851*x11852))+((x11849*x11856))+((x11850*x11857)))),-1);
if(!x11858.valid){
continue;
}
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal((((x11854*x11857))+(((-1.0)*x11852*x11853*x11854))+(((-1.0)*r11*sj3*x11856))+((x11851*x11855)))),IkReal(((((-1.0)*gconst37*x11848*x11854))+(((-1.0)*x11848*x11855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11858.value)))+(x11859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11860=IKcos(j4);
IkReal x11861=IKsin(j4);
IkReal x11862=(gconst37*r11);
IkReal x11863=(gconst38*r21);
IkReal x11864=((1.0)*gconst38);
IkReal x11865=(cj3*gconst37);
IkReal x11866=(gconst37*r21);
IkReal x11867=(sj1*sj2);
IkReal x11868=((1.0)*cj1);
IkReal x11869=(gconst37*r01);
IkReal x11870=(gconst38*r01);
IkReal x11871=(gconst38*r11);
IkReal x11872=(gconst37*sj3);
IkReal x11873=(sj2*x11868);
IkReal x11874=((1.0)*cj2*sj1);
IkReal x11875=(sj3*x11861);
IkReal x11876=((1.0)*x11861);
IkReal x11877=(cj3*x11860);
IkReal x11878=((1.0)*sj3*x11860);
IkReal x11879=(cj3*gconst38*x11861);
IkReal x11880=(x11873+x11874);
evalcond[0]=((((-1.0)*r20*x11860*x11864))+((x11860*x11866))+((r22*x11861)));
evalcond[1]=(((r02*x11861))+(((-1.0)*r00*x11860*x11864))+((x11860*x11869)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11860*x11864))+((r12*x11861))+((x11860*x11862)));
evalcond[3]=((((-1.0)*cj3*x11862*x11876))+((sj3*x11871))+((r12*x11877))+((r10*x11879))+((r10*x11872)));
evalcond[4]=((((-1.0)*r10*x11864*x11875))+((x11862*x11875))+((r10*x11865))+((cj3*x11871))+(((-1.0)*r12*x11878)));
evalcond[5]=(((sj3*x11870))+(((-1.0)*r01*x11865*x11876))+((r00*x11879))+((r00*x11872))+(((-1.0)*cj2*x11868))+x11867+((r02*x11877)));
evalcond[6]=((((-1.0)*r20*x11864*x11875))+(((-1.0)*r22*x11878))+(((-1.0)*x11867))+((r20*x11865))+((x11866*x11875))+((cj1*cj2))+((cj3*x11863)));
evalcond[7]=(((sj3*x11863))+((r20*x11879))+((r20*x11872))+(((-1.0)*r21*x11865*x11876))+((r22*x11877))+(((-1.0)*x11880)));
evalcond[8]=((((-1.0)*r00*x11864*x11875))+((x11869*x11875))+((r00*x11865))+((cj3*x11870))+(((-1.0)*r02*x11878))+(((-1.0)*x11880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11881=((1.0)*gconst38);
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x11881)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
CheckValue<IkReal> x11883=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r00))+(((-1.0)*r01*x11881)))),-1);
if(!x11883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11882.value)+(((1.5707963267949)*(x11883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11884=IKcos(j4);
IkReal x11885=IKsin(j4);
IkReal x11886=(gconst37*r11);
IkReal x11887=(gconst38*r21);
IkReal x11888=((1.0)*gconst38);
IkReal x11889=(cj3*gconst37);
IkReal x11890=(gconst37*r21);
IkReal x11891=(sj1*sj2);
IkReal x11892=((1.0)*cj1);
IkReal x11893=(gconst37*r01);
IkReal x11894=(gconst38*r01);
IkReal x11895=(gconst38*r11);
IkReal x11896=(gconst37*sj3);
IkReal x11897=(sj2*x11892);
IkReal x11898=((1.0)*cj2*sj1);
IkReal x11899=(sj3*x11885);
IkReal x11900=((1.0)*x11885);
IkReal x11901=(cj3*x11884);
IkReal x11902=((1.0)*sj3*x11884);
IkReal x11903=(cj3*gconst38*x11885);
IkReal x11904=(x11898+x11897);
evalcond[0]=(((x11884*x11890))+((r22*x11885))+(((-1.0)*r20*x11884*x11888)));
evalcond[1]=((((-1.0)*r00*x11884*x11888))+((x11884*x11893))+((r02*x11885)));
evalcond[2]=((-1.0)+((r12*x11885))+(((-1.0)*r10*x11884*x11888))+((x11884*x11886)));
evalcond[3]=(((r12*x11901))+(((-1.0)*cj3*x11886*x11900))+((r10*x11896))+((r10*x11903))+((sj3*x11895)));
evalcond[4]=(((x11886*x11899))+(((-1.0)*r12*x11902))+((r10*x11889))+(((-1.0)*r10*x11888*x11899))+((cj3*x11895)));
evalcond[5]=(((r00*x11896))+((r00*x11903))+(((-1.0)*cj2*x11892))+((r02*x11901))+((sj3*x11894))+(((-1.0)*r01*x11889*x11900))+x11891);
evalcond[6]=(((cj3*x11887))+(((-1.0)*x11891))+(((-1.0)*r22*x11902))+((x11890*x11899))+((cj1*cj2))+(((-1.0)*r20*x11888*x11899))+((r20*x11889)));
evalcond[7]=(((r22*x11901))+(((-1.0)*x11904))+((r20*x11903))+((sj3*x11887))+((r20*x11896))+(((-1.0)*r21*x11889*x11900)));
evalcond[8]=((((-1.0)*r02*x11902))+((r00*x11889))+(((-1.0)*r00*x11888*x11899))+(((-1.0)*x11904))+((x11893*x11899))+((cj3*x11894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11906 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11906)==0){
continue;
}
IkReal x11905=pow(x11906,-0.5);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x11907.value))));
IkReal gconst40=((1.0)*r21*x11905);
IkReal gconst41=((-1.0)*r20*x11905);
CheckValue<IkReal> x11908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11908.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11911.valid){
continue;
}
IkReal x11909=((1.0)*(x11911.value));
IkReal x11910=x11905;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11909)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11909)));
IkReal gconst40=((1.0)*r21*x11910);
IkReal gconst41=((-1.0)*r20*x11910);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11914.valid){
continue;
}
IkReal x11912=((1.0)*(x11914.value));
IkReal x11913=x11905;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11912)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11912)));
IkReal gconst40=((1.0)*r21*x11913);
IkReal gconst41=((-1.0)*r20*x11913);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11917.valid){
continue;
}
IkReal x11915=((1.0)*(x11917.value));
IkReal x11916=x11905;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11915)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11915)));
IkReal gconst40=((1.0)*r21*x11916);
IkReal gconst41=((-1.0)*r20*x11916);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11918=gconst40*gconst40;
IkReal x11919=gconst41*gconst41;
IkReal x11920=(r11*r21);
IkReal x11921=(cj3*r10);
IkReal x11922=((1.0)*r20);
IkReal x11923=(r10*sj3);
IkReal x11924=(gconst40*gconst41);
IkReal x11925=((1.0)*r11*sj3);
IkReal x11926=(r20*x11919);
IkReal x11927=(sj3*x11924);
CheckValue<IkReal> x11928=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x11918*x11920))+(((-1.0)*cj3*r11*x11922*x11924))+((x11921*x11926))+(((-1.0)*r21*x11921*x11924)))),-1);
if(!x11928.valid){
continue;
}
CheckValue<IkReal> x11929 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj3*x11919*x11922))+(((-1.0)*x11922*x11923*x11924))+((r21*x11918*x11923))+((x11920*x11927)))),IkReal(((((-1.0)*gconst40*r22*x11923))+(((-1.0)*gconst41*r22*x11925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11928.value)))+(x11929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11930=IKcos(j4);
IkReal x11931=IKsin(j4);
IkReal x11932=(gconst40*sj3);
IkReal x11933=(gconst40*r11);
IkReal x11934=(gconst41*r11);
IkReal x11935=(cj3*gconst40);
IkReal x11936=(sj1*sj2);
IkReal x11937=(gconst41*sj3);
IkReal x11938=((1.0)*cj1);
IkReal x11939=(cj3*gconst41);
IkReal x11940=(sj2*x11938);
IkReal x11941=((1.0)*cj2*sj1);
IkReal x11942=(r21*x11931);
IkReal x11943=((1.0)*x11931);
IkReal x11944=(gconst40*x11930);
IkReal x11945=(cj3*x11930);
IkReal x11946=((1.0)*gconst41*x11930);
IkReal x11947=((1.0)*sj3*x11930);
IkReal x11948=(x11940+x11941);
evalcond[0]=((((-1.0)*r20*x11946))+((r21*x11944))+((r22*x11931)));
evalcond[1]=(((r02*x11931))+(((-1.0)*r00*x11946))+((r01*x11944)));
evalcond[2]=((-1.0)+((x11930*x11933))+((r12*x11931))+(((-1.0)*r10*x11946)));
evalcond[3]=(((r10*x11932))+((r12*x11945))+((r10*x11931*x11939))+(((-1.0)*cj3*x11933*x11943))+((sj3*x11934)));
evalcond[4]=(((r10*x11935))+((r11*x11931*x11932))+((cj3*x11934))+(((-1.0)*r10*x11937*x11943))+(((-1.0)*r12*x11947)));
evalcond[5]=(x11936+((r02*x11945))+(((-1.0)*r01*x11935*x11943))+((r00*x11931*x11939))+((r00*x11932))+((r01*x11937))+(((-1.0)*cj2*x11938)));
evalcond[6]=(((r21*x11939))+((x11932*x11942))+(((-1.0)*r22*x11947))+((r20*x11935))+((cj1*cj2))+(((-1.0)*x11936))+(((-1.0)*r20*x11937*x11943)));
evalcond[7]=((((-1.0)*x11948))+((r21*x11937))+(((-1.0)*x11935*x11942))+((r20*x11932))+((r22*x11945))+((r20*x11931*x11939)));
evalcond[8]=((((-1.0)*r00*x11937*x11943))+(((-1.0)*x11948))+(((-1.0)*r02*x11947))+((r01*x11931*x11932))+((r00*x11935))+((r01*x11939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11949=((1.0)*gconst41);
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11949))+((gconst40*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
CheckValue<IkReal> x11951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r00))+(((-1.0)*r01*x11949)))),-1);
if(!x11951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11950.value)+(((1.5707963267949)*(x11951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11952=IKcos(j4);
IkReal x11953=IKsin(j4);
IkReal x11954=(gconst40*sj3);
IkReal x11955=(gconst40*r11);
IkReal x11956=(gconst41*r11);
IkReal x11957=(cj3*gconst40);
IkReal x11958=(sj1*sj2);
IkReal x11959=(gconst41*sj3);
IkReal x11960=((1.0)*cj1);
IkReal x11961=(cj3*gconst41);
IkReal x11962=(sj2*x11960);
IkReal x11963=((1.0)*cj2*sj1);
IkReal x11964=(r21*x11953);
IkReal x11965=((1.0)*x11953);
IkReal x11966=(gconst40*x11952);
IkReal x11967=(cj3*x11952);
IkReal x11968=((1.0)*gconst41*x11952);
IkReal x11969=((1.0)*sj3*x11952);
IkReal x11970=(x11962+x11963);
evalcond[0]=((((-1.0)*r20*x11968))+((r21*x11966))+((r22*x11953)));
evalcond[1]=(((r01*x11966))+((r02*x11953))+(((-1.0)*r00*x11968)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11968))+((r12*x11953))+((x11952*x11955)));
evalcond[3]=(((r12*x11967))+((r10*x11954))+(((-1.0)*cj3*x11955*x11965))+((sj3*x11956))+((r10*x11953*x11961)));
evalcond[4]=((((-1.0)*r12*x11969))+((r10*x11957))+(((-1.0)*r10*x11959*x11965))+((r11*x11953*x11954))+((cj3*x11956)));
evalcond[5]=(x11958+((r02*x11967))+((r01*x11959))+((r00*x11954))+(((-1.0)*cj2*x11960))+(((-1.0)*r01*x11957*x11965))+((r00*x11953*x11961)));
evalcond[6]=(((r20*x11957))+(((-1.0)*x11958))+((x11954*x11964))+(((-1.0)*r22*x11969))+((cj1*cj2))+((r21*x11961))+(((-1.0)*r20*x11959*x11965)));
evalcond[7]=(((r20*x11954))+((r21*x11959))+(((-1.0)*x11957*x11964))+(((-1.0)*x11970))+((r20*x11953*x11961))+((r22*x11967)));
evalcond[8]=(((r01*x11961))+(((-1.0)*x11970))+((r01*x11953*x11954))+((r00*x11957))+(((-1.0)*r02*x11969))+(((-1.0)*r00*x11959*x11965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11971=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x11971.valid){
continue;
}
CheckValue<IkReal> x11972 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r00))+((gconst40*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11971.value)))+(x11972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11973=IKcos(j4);
IkReal x11974=IKsin(j4);
IkReal x11975=(gconst40*sj3);
IkReal x11976=(gconst40*r11);
IkReal x11977=(gconst41*r11);
IkReal x11978=(cj3*gconst40);
IkReal x11979=(sj1*sj2);
IkReal x11980=(gconst41*sj3);
IkReal x11981=((1.0)*cj1);
IkReal x11982=(cj3*gconst41);
IkReal x11983=(sj2*x11981);
IkReal x11984=((1.0)*cj2*sj1);
IkReal x11985=(r21*x11974);
IkReal x11986=((1.0)*x11974);
IkReal x11987=(gconst40*x11973);
IkReal x11988=(cj3*x11973);
IkReal x11989=((1.0)*gconst41*x11973);
IkReal x11990=((1.0)*sj3*x11973);
IkReal x11991=(x11983+x11984);
evalcond[0]=(((r21*x11987))+(((-1.0)*r20*x11989))+((r22*x11974)));
evalcond[1]=((((-1.0)*r00*x11989))+((r02*x11974))+((r01*x11987)));
evalcond[2]=((-1.0)+((x11973*x11976))+(((-1.0)*r10*x11989))+((r12*x11974)));
evalcond[3]=(((sj3*x11977))+((r10*x11975))+((r12*x11988))+((r10*x11974*x11982))+(((-1.0)*cj3*x11976*x11986)));
evalcond[4]=(((r11*x11974*x11975))+(((-1.0)*r10*x11980*x11986))+((cj3*x11977))+((r10*x11978))+(((-1.0)*r12*x11990)));
evalcond[5]=(x11979+((r00*x11975))+(((-1.0)*cj2*x11981))+((r02*x11988))+((r00*x11974*x11982))+((r01*x11980))+(((-1.0)*r01*x11978*x11986)));
evalcond[6]=(((r21*x11982))+(((-1.0)*x11979))+((x11975*x11985))+((r20*x11978))+((cj1*cj2))+(((-1.0)*r22*x11990))+(((-1.0)*r20*x11980*x11986)));
evalcond[7]=(((r21*x11980))+((r20*x11974*x11982))+((r20*x11975))+((r22*x11988))+(((-1.0)*x11978*x11985))+(((-1.0)*x11991)));
evalcond[8]=(((r00*x11978))+(((-1.0)*r02*x11990))+((r01*x11974*x11975))+(((-1.0)*r00*x11980*x11986))+((r01*x11982))+(((-1.0)*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11992=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11992);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11992);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11993=(r11*sj5);
IkReal x11994=((1.0)*cj5*r10);
j4eval[0]=(((sj3*x11993))+(((-1.0)*sj3*x11994)));
j4eval[1]=(x11993+(((-1.0)*x11994)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11995=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11995);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11995);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11996=(cj5*r10);
IkReal x11997=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x11997))+((cj3*x11996)));
j4eval[1]=(x11997+(((-1.0)*x11996)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11998=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11998);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11998);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11999=((1.0)*cj5);
CheckValue<IkReal> x12000=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x11999))),-1);
if(!x12000.valid){
continue;
}
CheckValue<IkReal> x12001=IKPowWithIntegerCheck(r22,-1);
if(!x12001.valid){
continue;
}
CheckValue<IkReal> x12002=IKPowWithIntegerCheck(sj3,-1);
if(!x12002.valid){
continue;
}
if( IKabs(((x12000.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11999)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12001.value)*(x12002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12000.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11999))))))+IKsqr(((x12001.value)*(x12002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12000.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11999))))), ((x12001.value)*(x12002.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12003=IKcos(j4);
IkReal x12004=IKsin(j4);
IkReal x12005=((1.0)*cj5);
IkReal x12006=(sj1*sj2);
IkReal x12007=(cj5*r01);
IkReal x12008=(cj3*sj5);
IkReal x12009=(cj3*cj5);
IkReal x12010=((1.0)*cj2);
IkReal x12011=(sj3*sj5);
IkReal x12012=(r01*sj5);
IkReal x12013=(r11*sj5);
IkReal x12014=((1.0)*cj1*sj2);
IkReal x12015=(sj1*x12010);
IkReal x12016=(sj3*x12004);
IkReal x12017=(r22*x12003);
IkReal x12018=((1.0)*x12004);
IkReal x12019=(x12015+x12014);
evalcond[0]=(r22*x12004);
evalcond[1]=((((-1.0)*r00*x12003*x12005))+((x12003*x12012)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12003*x12005))+((x12003*x12013)));
evalcond[3]=((((-1.0)*x12006))+(((-1.0)*sj3*x12017))+((cj1*cj2)));
evalcond[4]=(((cj3*x12017))+(((-1.0)*x12019)));
evalcond[5]=((((-1.0)*r10*x12005*x12016))+((r11*x12004*x12011))+((r10*x12008))+((r11*x12009)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x12004*x12009))+((r10*x12011))+(((-1.0)*r11*x12008*x12018)));
evalcond[7]=((((-1.0)*cj1*x12010))+((r00*x12004*x12009))+x12006+((r00*x12011))+(((-1.0)*r01*x12008*x12018))+((sj3*x12007)));
evalcond[8]=(((r00*x12008))+((r01*x12004*x12011))+(((-1.0)*x12019))+(((-1.0)*r00*x12005*x12016))+((cj3*x12007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12020=((1.0)*sj5);
IkReal x12021=(cj5*r10);
CheckValue<IkReal> x12022=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x12020))+((cj3*x12021))),-1);
if(!x12022.valid){
continue;
}
CheckValue<IkReal> x12023=IKPowWithIntegerCheck(((((-1.0)*x12021))+((r11*sj5))),-1);
if(!x12023.valid){
continue;
}
if( IKabs(((x12022.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12020)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12023.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12022.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12020))))))+IKsqr(x12023.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12022.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12020))))), x12023.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12024=IKcos(j4);
IkReal x12025=IKsin(j4);
IkReal x12026=((1.0)*cj5);
IkReal x12027=(sj1*sj2);
IkReal x12028=(cj5*r01);
IkReal x12029=(cj3*sj5);
IkReal x12030=(cj3*cj5);
IkReal x12031=((1.0)*cj2);
IkReal x12032=(sj3*sj5);
IkReal x12033=(r01*sj5);
IkReal x12034=(r11*sj5);
IkReal x12035=((1.0)*cj1*sj2);
IkReal x12036=(sj1*x12031);
IkReal x12037=(sj3*x12025);
IkReal x12038=(r22*x12024);
IkReal x12039=((1.0)*x12025);
IkReal x12040=(x12035+x12036);
evalcond[0]=(r22*x12025);
evalcond[1]=(((x12024*x12033))+(((-1.0)*r00*x12024*x12026)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12024*x12026))+((x12024*x12034)));
evalcond[3]=((((-1.0)*x12027))+((cj1*cj2))+(((-1.0)*sj3*x12038)));
evalcond[4]=((((-1.0)*x12040))+((cj3*x12038)));
evalcond[5]=(((r11*x12025*x12032))+(((-1.0)*r10*x12026*x12037))+((r11*x12030))+((r10*x12029)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x12025*x12030))+(((-1.0)*r11*x12029*x12039))+((r10*x12032)));
evalcond[7]=((((-1.0)*cj1*x12031))+((r00*x12025*x12030))+((r00*x12032))+x12027+(((-1.0)*r01*x12029*x12039))+((sj3*x12028)));
evalcond[8]=(((r00*x12029))+(((-1.0)*x12040))+(((-1.0)*r00*x12026*x12037))+((cj3*x12028))+((r01*x12025*x12032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12041=((1.0)*cj5);
IkReal x12042=(r11*sj5);
CheckValue<IkReal> x12043=IKPowWithIntegerCheck((((sj3*x12042))+(((-1.0)*r10*sj3*x12041))),-1);
if(!x12043.valid){
continue;
}
CheckValue<IkReal> x12044=IKPowWithIntegerCheck((x12042+(((-1.0)*r10*x12041))),-1);
if(!x12044.valid){
continue;
}
if( IKabs(((x12043.value)*(((((-1.0)*cj3*r11*x12041))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12044.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12043.value)*(((((-1.0)*cj3*r11*x12041))+(((-1.0)*cj3*r10*sj5))))))+IKsqr(x12044.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12043.value)*(((((-1.0)*cj3*r11*x12041))+(((-1.0)*cj3*r10*sj5))))), x12044.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12045=IKcos(j4);
IkReal x12046=IKsin(j4);
IkReal x12047=((1.0)*cj5);
IkReal x12048=(sj1*sj2);
IkReal x12049=(cj5*r01);
IkReal x12050=(cj3*sj5);
IkReal x12051=(cj3*cj5);
IkReal x12052=((1.0)*cj2);
IkReal x12053=(sj3*sj5);
IkReal x12054=(r01*sj5);
IkReal x12055=(r11*sj5);
IkReal x12056=((1.0)*cj1*sj2);
IkReal x12057=(sj1*x12052);
IkReal x12058=(sj3*x12046);
IkReal x12059=(r22*x12045);
IkReal x12060=((1.0)*x12046);
IkReal x12061=(x12057+x12056);
evalcond[0]=(r22*x12046);
evalcond[1]=(((x12045*x12054))+(((-1.0)*r00*x12045*x12047)));
evalcond[2]=((-1.0)+((x12045*x12055))+(((-1.0)*r10*x12045*x12047)));
evalcond[3]=((((-1.0)*sj3*x12059))+(((-1.0)*x12048))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x12061))+((cj3*x12059)));
evalcond[5]=(((r10*x12050))+(((-1.0)*r10*x12047*x12058))+((r11*x12046*x12053))+((r11*x12051)));
evalcond[6]=(((r10*x12053))+((cj5*r11*sj3))+(((-1.0)*r11*x12050*x12060))+((r10*x12046*x12051)));
evalcond[7]=(((sj3*x12049))+(((-1.0)*cj1*x12052))+((r00*x12053))+x12048+(((-1.0)*r01*x12050*x12060))+((r00*x12046*x12051)));
evalcond[8]=(((r01*x12046*x12053))+((r00*x12050))+((cj3*x12049))+(((-1.0)*x12061))+(((-1.0)*r00*x12047*x12058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12062=cj5*cj5;
IkReal x12063=((1.0)*cj5);
IkReal x12064=(r11*sj3);
IkReal x12065=(cj3*sj5);
IkReal x12066=(r10*r21);
IkReal x12067=(cj3*r11*r21);
IkReal x12068=((1.0)*x12062);
IkReal x12069=(r10*sj3*sj5);
CheckValue<IkReal> x12070 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12064*x12068))+((cj5*r21*sj5*x12064))+((sj3*x12066))+(((-1.0)*sj3*x12066*x12068))+(((-1.0)*r20*x12063*x12069)))),IkReal(((((-1.0)*r22*x12063*x12064))+(((-1.0)*r22*x12069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12070.valid){
continue;
}
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12067*x12068))+x12067+(((-1.0)*x12063*x12065*x12066))+(((-1.0)*r11*r20*x12063*x12065))+((cj3*r10*r20*x12062)))),-1);
if(!x12071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12070.value)+(((1.5707963267949)*(x12071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12072=IKcos(j4);
IkReal x12073=IKsin(j4);
IkReal x12074=((1.0)*cj5);
IkReal x12075=(sj1*sj2);
IkReal x12076=(cj5*r01);
IkReal x12077=((1.0)*cj1);
IkReal x12078=(cj3*sj5);
IkReal x12079=(cj3*cj5);
IkReal x12080=(cj5*sj3);
IkReal x12081=(sj3*sj5);
IkReal x12082=(sj2*x12077);
IkReal x12083=((1.0)*cj2*sj1);
IkReal x12084=(sj5*x12072);
IkReal x12085=(sj3*x12073);
IkReal x12086=((1.0)*x12073);
IkReal x12087=(cj3*x12072);
IkReal x12088=((1.0)*sj3*x12072);
IkReal x12089=(x12082+x12083);
evalcond[0]=(((r22*x12073))+((r21*x12084))+(((-1.0)*r20*x12072*x12074)));
evalcond[1]=(((r01*x12084))+(((-1.0)*r00*x12072*x12074))+((r02*x12073)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12072*x12074))+((r11*x12084))+((r12*x12073)));
evalcond[3]=((((-1.0)*r11*x12078*x12086))+((r10*x12073*x12079))+((r10*x12081))+((r12*x12087))+((r11*x12080)));
evalcond[4]=((((-1.0)*r12*x12088))+((r11*x12079))+((r10*x12078))+((r11*x12073*x12081))+(((-1.0)*r10*x12074*x12085)));
evalcond[5]=((((-1.0)*r01*x12078*x12086))+((r02*x12087))+((r00*x12073*x12079))+((r00*x12081))+x12075+((sj3*x12076))+(((-1.0)*cj2*x12077)));
evalcond[6]=((((-1.0)*x12075))+(((-1.0)*r20*x12074*x12085))+((r21*x12073*x12081))+(((-1.0)*r22*x12088))+((r20*x12078))+((cj1*cj2))+((r21*x12079)));
evalcond[7]=(((r20*x12081))+((r20*x12073*x12079))+(((-1.0)*x12089))+(((-1.0)*r21*x12078*x12086))+((r22*x12087))+((r21*x12080)));
evalcond[8]=((((-1.0)*x12089))+((r01*x12073*x12081))+(((-1.0)*r02*x12088))+(((-1.0)*r00*x12074*x12085))+((cj3*x12076))+((r00*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12090=((1.0)*cj5);
CheckValue<IkReal> x12091 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12090)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12091.valid){
continue;
}
CheckValue<IkReal> x12092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12090)))),-1);
if(!x12092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12091.value)+(((1.5707963267949)*(x12092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12093=IKcos(j4);
IkReal x12094=IKsin(j4);
IkReal x12095=((1.0)*cj5);
IkReal x12096=(sj1*sj2);
IkReal x12097=(cj5*r01);
IkReal x12098=((1.0)*cj1);
IkReal x12099=(cj3*sj5);
IkReal x12100=(cj3*cj5);
IkReal x12101=(cj5*sj3);
IkReal x12102=(sj3*sj5);
IkReal x12103=(sj2*x12098);
IkReal x12104=((1.0)*cj2*sj1);
IkReal x12105=(sj5*x12093);
IkReal x12106=(sj3*x12094);
IkReal x12107=((1.0)*x12094);
IkReal x12108=(cj3*x12093);
IkReal x12109=((1.0)*sj3*x12093);
IkReal x12110=(x12104+x12103);
evalcond[0]=(((r22*x12094))+(((-1.0)*r20*x12093*x12095))+((r21*x12105)));
evalcond[1]=(((r01*x12105))+((r02*x12094))+(((-1.0)*r00*x12093*x12095)));
evalcond[2]=((-1.0)+((r12*x12094))+(((-1.0)*r10*x12093*x12095))+((r11*x12105)));
evalcond[3]=(((r10*x12102))+(((-1.0)*r11*x12099*x12107))+((r10*x12094*x12100))+((r12*x12108))+((r11*x12101)));
evalcond[4]=((((-1.0)*r12*x12109))+((r10*x12099))+((r11*x12094*x12102))+((r11*x12100))+(((-1.0)*r10*x12095*x12106)));
evalcond[5]=(((r02*x12108))+(((-1.0)*r01*x12099*x12107))+((r00*x12102))+((sj3*x12097))+x12096+(((-1.0)*cj2*x12098))+((r00*x12094*x12100)));
evalcond[6]=((((-1.0)*r20*x12095*x12106))+(((-1.0)*x12096))+(((-1.0)*r22*x12109))+((r20*x12099))+((r21*x12094*x12102))+((cj1*cj2))+((r21*x12100)));
evalcond[7]=(((r20*x12102))+(((-1.0)*x12110))+((r20*x12094*x12100))+(((-1.0)*r21*x12099*x12107))+((r22*x12108))+((r21*x12101)));
evalcond[8]=((((-1.0)*r00*x12095*x12106))+((r00*x12099))+((r01*x12094*x12102))+(((-1.0)*x12110))+(((-1.0)*r02*x12109))+((cj3*x12097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12111=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12111.valid){
continue;
}
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12111.value)))+(x12112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12113=IKcos(j4);
IkReal x12114=IKsin(j4);
IkReal x12115=((1.0)*cj5);
IkReal x12116=(sj1*sj2);
IkReal x12117=(cj5*r01);
IkReal x12118=((1.0)*cj1);
IkReal x12119=(cj3*sj5);
IkReal x12120=(cj3*cj5);
IkReal x12121=(cj5*sj3);
IkReal x12122=(sj3*sj5);
IkReal x12123=(sj2*x12118);
IkReal x12124=((1.0)*cj2*sj1);
IkReal x12125=(sj5*x12113);
IkReal x12126=(sj3*x12114);
IkReal x12127=((1.0)*x12114);
IkReal x12128=(cj3*x12113);
IkReal x12129=((1.0)*sj3*x12113);
IkReal x12130=(x12123+x12124);
evalcond[0]=(((r21*x12125))+(((-1.0)*r20*x12113*x12115))+((r22*x12114)));
evalcond[1]=(((r02*x12114))+((r01*x12125))+(((-1.0)*r00*x12113*x12115)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12113*x12115))+((r12*x12114))+((r11*x12125)));
evalcond[3]=(((r12*x12128))+(((-1.0)*r11*x12119*x12127))+((r10*x12114*x12120))+((r10*x12122))+((r11*x12121)));
evalcond[4]=(((r10*x12119))+(((-1.0)*r12*x12129))+(((-1.0)*r10*x12115*x12126))+((r11*x12120))+((r11*x12114*x12122)));
evalcond[5]=(((r00*x12114*x12120))+((r00*x12122))+(((-1.0)*r01*x12119*x12127))+x12116+((sj3*x12117))+((r02*x12128))+(((-1.0)*cj2*x12118)));
evalcond[6]=((((-1.0)*x12116))+((r21*x12114*x12122))+((r20*x12119))+(((-1.0)*r20*x12115*x12126))+((r21*x12120))+(((-1.0)*r22*x12129))+((cj1*cj2)));
evalcond[7]=((((-1.0)*x12130))+((r21*x12121))+((r22*x12128))+((r20*x12114*x12120))+(((-1.0)*r21*x12119*x12127))+((r20*x12122)));
evalcond[8]=(((r01*x12114*x12122))+((cj3*x12117))+(((-1.0)*x12130))+((r00*x12119))+(((-1.0)*r00*x12115*x12126))+(((-1.0)*r02*x12129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12132 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12132)==0){
continue;
}
IkReal x12131=pow(x12132,-0.5);
CheckValue<IkReal> x12133 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12133.valid){
continue;
}
IkReal gconst12=((-1.0)*(x12133.value));
IkReal gconst13=((-1.0)*r01*x12131);
IkReal gconst14=(r00*x12131);
CheckValue<IkReal> x12134 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12134.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12134.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
IkReal x12135=((-1.0)*(x12137.value));
IkReal x12136=x12131;
sj5=gconst13;
cj5=gconst14;
j5=x12135;
IkReal gconst12=x12135;
IkReal gconst13=((-1.0)*r01*x12136);
IkReal gconst14=(r00*x12136);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12138=((1.0)*sj0);
IkReal x12139=((1.0)*cj0);
CheckValue<IkReal> x12140 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r00*x12139))+(((-1.0)*gconst14*r10*x12138))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IkReal(((((-1.0)*r12*x12138))+(((-1.0)*r02*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12140.value)+(((1.5707963267949)*(x12141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12142=IKcos(j4);
IkReal x12143=IKsin(j4);
IkReal x12144=(cj3*r11);
IkReal x12145=(gconst13*sj3);
IkReal x12146=(sj0*sj1);
IkReal x12147=((1.0)*sj2);
IkReal x12148=(gconst14*sj3);
IkReal x12149=(cj3*gconst14);
IkReal x12150=(cj2*sj1);
IkReal x12151=(cj3*gconst13);
IkReal x12152=(cj1*cj2);
IkReal x12153=(cj1*sj2);
IkReal x12154=((1.0)*gconst14*r00);
IkReal x12155=((1.0)*x12143);
IkReal x12156=(gconst13*x12142);
IkReal x12157=(cj3*x12142);
IkReal x12158=((1.0)*x12142);
evalcond[0]=(((r22*x12143))+(((-1.0)*gconst14*r20*x12158))+((r21*x12156)));
evalcond[1]=(cj0+((r12*x12143))+((r11*x12156))+(((-1.0)*gconst14*r10*x12158)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x12142*x12154))+((r02*x12143))+((r01*x12156)));
evalcond[3]=(((r21*x12143*x12145))+x12152+((r20*x12151))+(((-1.0)*sj1*x12147))+(((-1.0)*r22*sj3*x12158))+((r21*x12149))+(((-1.0)*r20*x12148*x12155)));
evalcond[4]=(((r20*x12143*x12149))+((r22*x12157))+(((-1.0)*r21*x12151*x12155))+(((-1.0)*x12150))+((r20*x12145))+(((-1.0)*cj1*x12147))+((r21*x12148)));
evalcond[5]=(((r01*x12143*x12145))+((cj0*x12150))+((cj0*x12153))+(((-1.0)*r02*sj3*x12158))+((r01*x12149))+((r00*x12151))+(((-1.0)*r00*x12148*x12155)));
evalcond[6]=(((r02*x12157))+((cj0*x12152))+((r00*x12145))+(((-1.0)*cj0*sj1*x12147))+((r01*x12148))+(((-1.0)*r01*x12151*x12155))+((r00*x12143*x12149)));
evalcond[7]=(((sj0*x12153))+(((-1.0)*r12*sj3*x12158))+((r10*x12151))+((gconst14*x12144))+((r11*x12143*x12145))+((cj2*x12146))+(((-1.0)*r10*x12148*x12155)));
evalcond[8]=(((sj0*x12152))+((r10*x12143*x12149))+((r10*x12145))+((r12*x12157))+((r11*x12148))+(((-1.0)*gconst13*x12144*x12155))+(((-1.0)*x12146*x12147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12159=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x12159.valid){
continue;
}
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r20*sj0))+((gconst13*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12159.value)))+(x12160.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12161=IKcos(j4);
IkReal x12162=IKsin(j4);
IkReal x12163=(cj3*r11);
IkReal x12164=(gconst13*sj3);
IkReal x12165=(sj0*sj1);
IkReal x12166=((1.0)*sj2);
IkReal x12167=(gconst14*sj3);
IkReal x12168=(cj3*gconst14);
IkReal x12169=(cj2*sj1);
IkReal x12170=(cj3*gconst13);
IkReal x12171=(cj1*cj2);
IkReal x12172=(cj1*sj2);
IkReal x12173=((1.0)*gconst14*r00);
IkReal x12174=((1.0)*x12162);
IkReal x12175=(gconst13*x12161);
IkReal x12176=(cj3*x12161);
IkReal x12177=((1.0)*x12161);
evalcond[0]=(((r21*x12175))+(((-1.0)*gconst14*r20*x12177))+((r22*x12162)));
evalcond[1]=(cj0+(((-1.0)*gconst14*r10*x12177))+((r11*x12175))+((r12*x12162)));
evalcond[2]=(((r02*x12162))+(((-1.0)*sj0))+(((-1.0)*x12161*x12173))+((r01*x12175)));
evalcond[3]=(((r21*x12168))+((r20*x12170))+(((-1.0)*sj1*x12166))+(((-1.0)*r22*sj3*x12177))+x12171+(((-1.0)*r20*x12167*x12174))+((r21*x12162*x12164)));
evalcond[4]=(((r21*x12167))+(((-1.0)*x12169))+((r20*x12164))+(((-1.0)*r21*x12170*x12174))+(((-1.0)*cj1*x12166))+((r22*x12176))+((r20*x12162*x12168)));
evalcond[5]=((((-1.0)*r02*sj3*x12177))+((cj0*x12172))+((cj0*x12169))+((r00*x12170))+((r01*x12168))+(((-1.0)*r00*x12167*x12174))+((r01*x12162*x12164)));
evalcond[6]=((((-1.0)*cj0*sj1*x12166))+((cj0*x12171))+((r00*x12164))+((r01*x12167))+(((-1.0)*r01*x12170*x12174))+((r00*x12162*x12168))+((r02*x12176)));
evalcond[7]=(((cj2*x12165))+(((-1.0)*r12*sj3*x12177))+((r10*x12170))+((sj0*x12172))+((gconst14*x12163))+((r11*x12162*x12164))+(((-1.0)*r10*x12167*x12174)));
evalcond[8]=((((-1.0)*x12165*x12166))+((r10*x12164))+((sj0*x12171))+(((-1.0)*gconst13*x12163*x12174))+((r11*x12167))+((r10*x12162*x12168))+((r12*x12176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12179 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12179)==0){
continue;
}
IkReal x12178=pow(x12179,-0.5);
CheckValue<IkReal> x12180 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12180.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x12180.value))));
IkReal gconst16=((1.0)*r01*x12178);
IkReal gconst17=((-1.0)*r00*x12178);
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12181.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x12184 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12184.valid){
continue;
}
IkReal x12182=((1.0)*(x12184.value));
IkReal x12183=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12182)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12182)));
IkReal gconst16=((1.0)*r01*x12183);
IkReal gconst17=((-1.0)*r00*x12183);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12187 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12187.valid){
continue;
}
IkReal x12185=((1.0)*(x12187.value));
IkReal x12186=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12185)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12185)));
IkReal gconst16=((1.0)*r01*x12186);
IkReal gconst17=((-1.0)*r00*x12186);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12188=((1.0)*(x12190.value));
IkReal x12189=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12188)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12188)));
IkReal gconst16=((1.0)*r01*x12189);
IkReal gconst17=((-1.0)*r00*x12189);
IkReal x12191=r02*r02;
IkReal x12192=(r12*sj0);
IkReal x12193=((1.0)*cj0);
IkReal x12194=x12178;
j4eval[0]=((IKabs(((((-1.0)*r02*x12193))+(((-1.0)*x12192)))))+(IKabs((((cj0*x12191*x12194))+(((-1.0)*x12193*x12194))+((r02*x12192*x12194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
IkReal x12195=((1.0)*(x12197.value));
IkReal x12196=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12195)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12195)));
IkReal gconst16=((1.0)*r01*x12196);
IkReal gconst17=((-1.0)*r00*x12196);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12200.valid){
continue;
}
IkReal x12198=((1.0)*(x12200.value));
IkReal x12199=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12198)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12198)));
IkReal gconst16=((1.0)*r01*x12199);
IkReal gconst17=((-1.0)*r00*x12199);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12201=gconst16*gconst16;
IkReal x12202=gconst17*gconst17;
IkReal x12203=(cj3*r11);
IkReal x12204=((1.0)*sj3);
IkReal x12205=(gconst16*r10);
IkReal x12206=(gconst17*r20);
IkReal x12207=(gconst17*r11);
IkReal x12208=(r21*x12201);
IkReal x12209=(r20*x12202);
CheckValue<IkReal> x12210=IKPowWithIntegerCheck(IKsign((((cj3*r10*x12209))+((cj3*r12*r22))+(((-1.0)*gconst16*x12203*x12206))+((x12203*x12208))+(((-1.0)*cj3*gconst17*r21*x12205)))),-1);
if(!x12210.valid){
continue;
}
CheckValue<IkReal> x12211 = IKatan2WithCheck(IkReal((((r10*sj3*x12208))+(((-1.0)*r11*x12204*x12209))+((gconst16*r21*sj3*x12207))+(((-1.0)*x12204*x12205*x12206)))),IkReal(((((-1.0)*r22*x12204*x12205))+(((-1.0)*r22*x12204*x12207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12210.value)))+(x12211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12212=IKcos(j4);
IkReal x12213=IKsin(j4);
IkReal x12214=((1.0)*cj1);
IkReal x12215=(r21*sj3);
IkReal x12216=(cj3*gconst16);
IkReal x12217=(sj1*sj2);
IkReal x12218=(r11*sj3);
IkReal x12219=((1.0)*cj3);
IkReal x12220=(r01*sj3);
IkReal x12221=(cj3*gconst17);
IkReal x12222=(gconst17*r20);
IkReal x12223=(gconst16*sj3);
IkReal x12224=(sj2*x12214);
IkReal x12225=((1.0)*cj2*sj1);
IkReal x12226=(gconst16*x12213);
IkReal x12227=((1.0)*x12212);
IkReal x12228=(cj3*x12212);
IkReal x12229=(gconst16*x12212);
IkReal x12230=(x12213*x12221);
IkReal x12231=((1.0)*gconst17*sj3*x12213);
IkReal x12232=(x12224+x12225);
evalcond[0]=(((r22*x12213))+((r21*x12229))+(((-1.0)*x12222*x12227)));
evalcond[1]=(((r02*x12213))+(((-1.0)*gconst17*r00*x12227))+((r01*x12229)));
evalcond[2]=((-1.0)+((r11*x12229))+((r12*x12213))+(((-1.0)*gconst17*r10*x12227)));
evalcond[3]=(((r10*x12230))+((gconst17*x12218))+(((-1.0)*r11*x12213*x12216))+((r10*x12223))+((r12*x12228)));
evalcond[4]=(((r11*x12221))+(((-1.0)*r12*sj3*x12227))+((x12218*x12226))+((r10*x12216))+(((-1.0)*r10*x12231)));
evalcond[5]=(((gconst17*x12220))+(((-1.0)*r01*x12213*x12216))+((r02*x12228))+((r00*x12230))+x12217+(((-1.0)*cj2*x12214))+((r00*x12223)));
evalcond[6]=(((x12215*x12226))+(((-1.0)*r22*sj3*x12227))+(((-1.0)*sj3*x12213*x12222))+((r21*x12221))+((cj1*cj2))+((r20*x12216))+(((-1.0)*x12217)));
evalcond[7]=(((gconst17*x12215))+((r22*x12228))+((r20*x12230))+(((-1.0)*x12232))+(((-1.0)*r21*x12213*x12216))+((r20*x12223)));
evalcond[8]=((((-1.0)*r00*x12231))+(((-1.0)*x12232))+(((-1.0)*r02*sj3*x12227))+((r01*x12221))+((r00*x12216))+((x12220*x12226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12233=((1.0)*gconst17);
CheckValue<IkReal> x12234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x12233)))),-1);
if(!x12234.valid){
continue;
}
CheckValue<IkReal> x12235 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12233))+((gconst16*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12234.value)))+(x12235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12236=IKcos(j4);
IkReal x12237=IKsin(j4);
IkReal x12238=((1.0)*cj1);
IkReal x12239=(r21*sj3);
IkReal x12240=(cj3*gconst16);
IkReal x12241=(sj1*sj2);
IkReal x12242=(r11*sj3);
IkReal x12243=((1.0)*cj3);
IkReal x12244=(r01*sj3);
IkReal x12245=(cj3*gconst17);
IkReal x12246=(gconst17*r20);
IkReal x12247=(gconst16*sj3);
IkReal x12248=(sj2*x12238);
IkReal x12249=((1.0)*cj2*sj1);
IkReal x12250=(gconst16*x12237);
IkReal x12251=((1.0)*x12236);
IkReal x12252=(cj3*x12236);
IkReal x12253=(gconst16*x12236);
IkReal x12254=(x12237*x12245);
IkReal x12255=((1.0)*gconst17*sj3*x12237);
IkReal x12256=(x12248+x12249);
evalcond[0]=(((r21*x12253))+(((-1.0)*x12246*x12251))+((r22*x12237)));
evalcond[1]=((((-1.0)*gconst17*r00*x12251))+((r01*x12253))+((r02*x12237)));
evalcond[2]=((-1.0)+((r12*x12237))+((r11*x12253))+(((-1.0)*gconst17*r10*x12251)));
evalcond[3]=(((r12*x12252))+((r10*x12254))+((r10*x12247))+(((-1.0)*r11*x12237*x12240))+((gconst17*x12242)));
evalcond[4]=(((r11*x12245))+((r10*x12240))+(((-1.0)*r10*x12255))+(((-1.0)*r12*sj3*x12251))+((x12242*x12250)));
evalcond[5]=((((-1.0)*cj2*x12238))+x12241+(((-1.0)*r01*x12237*x12240))+((r00*x12254))+((r00*x12247))+((r02*x12252))+((gconst17*x12244)));
evalcond[6]=(((r20*x12240))+((x12239*x12250))+(((-1.0)*x12241))+((cj1*cj2))+(((-1.0)*sj3*x12237*x12246))+(((-1.0)*r22*sj3*x12251))+((r21*x12245)));
evalcond[7]=(((r22*x12252))+(((-1.0)*r21*x12237*x12240))+((gconst17*x12239))+((r20*x12247))+((r20*x12254))+(((-1.0)*x12256)));
evalcond[8]=(((x12244*x12250))+((r00*x12240))+((r01*x12245))+(((-1.0)*x12256))+(((-1.0)*r00*x12255))+(((-1.0)*r02*sj3*x12251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12257 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r00))+((gconst16*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12257.valid){
continue;
}
CheckValue<IkReal> x12258=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x12258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12257.value)+(((1.5707963267949)*(x12258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12259=IKcos(j4);
IkReal x12260=IKsin(j4);
IkReal x12261=((1.0)*cj1);
IkReal x12262=(r21*sj3);
IkReal x12263=(cj3*gconst16);
IkReal x12264=(sj1*sj2);
IkReal x12265=(r11*sj3);
IkReal x12266=((1.0)*cj3);
IkReal x12267=(r01*sj3);
IkReal x12268=(cj3*gconst17);
IkReal x12269=(gconst17*r20);
IkReal x12270=(gconst16*sj3);
IkReal x12271=(sj2*x12261);
IkReal x12272=((1.0)*cj2*sj1);
IkReal x12273=(gconst16*x12260);
IkReal x12274=((1.0)*x12259);
IkReal x12275=(cj3*x12259);
IkReal x12276=(gconst16*x12259);
IkReal x12277=(x12260*x12268);
IkReal x12278=((1.0)*gconst17*sj3*x12260);
IkReal x12279=(x12272+x12271);
evalcond[0]=((((-1.0)*x12269*x12274))+((r21*x12276))+((r22*x12260)));
evalcond[1]=((((-1.0)*gconst17*r00*x12274))+((r01*x12276))+((r02*x12260)));
evalcond[2]=((-1.0)+((r12*x12260))+(((-1.0)*gconst17*r10*x12274))+((r11*x12276)));
evalcond[3]=((((-1.0)*r11*x12260*x12263))+((r10*x12270))+((r10*x12277))+((r12*x12275))+((gconst17*x12265)));
evalcond[4]=((((-1.0)*r12*sj3*x12274))+((r10*x12263))+((r11*x12268))+(((-1.0)*r10*x12278))+((x12265*x12273)));
evalcond[5]=((((-1.0)*r01*x12260*x12263))+x12264+((r02*x12275))+((gconst17*x12267))+((r00*x12277))+((r00*x12270))+(((-1.0)*cj2*x12261)));
evalcond[6]=(((x12262*x12273))+(((-1.0)*x12264))+(((-1.0)*r22*sj3*x12274))+((r20*x12263))+((cj1*cj2))+(((-1.0)*sj3*x12260*x12269))+((r21*x12268)));
evalcond[7]=(((r20*x12270))+((r20*x12277))+(((-1.0)*x12279))+(((-1.0)*r21*x12260*x12263))+((r22*x12275))+((gconst17*x12262)));
evalcond[8]=((((-1.0)*x12279))+(((-1.0)*r02*sj3*x12274))+((r00*x12263))+((r01*x12268))+((x12267*x12273))+(((-1.0)*r00*x12278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12280=(gconst17*r20);
IkReal x12281=(gconst16*r21);
op[0]=(x12280+(((-1.0)*x12281)));
op[1]=((2.0)*r22);
op[2]=(x12281+(((-1.0)*x12280)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12282=(gconst17*r20);
IkReal x12283=(gconst16*r21);
op[0]=(x12282+(((-1.0)*x12283)));
op[1]=((2.0)*r22);
op[2]=(x12283+(((-1.0)*x12282)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12286 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12286.valid){
continue;
}
IkReal x12284=((1.0)*(x12286.value));
IkReal x12285=x12178;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12284)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12284)));
IkReal gconst16=((1.0)*r01*x12285);
IkReal gconst17=((-1.0)*r00*x12285);
IkReal x12287=r02*r02;
IkReal x12288=(r12*sj0);
IkReal x12289=((1.0)*cj0);
IkReal x12290=x12178;
j4eval[0]=((IKabs((((cj0*x12287*x12290))+((r02*x12288*x12290))+(((-1.0)*x12289*x12290)))))+(IKabs(((((-1.0)*x12288))+(((-1.0)*r02*x12289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12291=(sj1*sj2);
IkReal x12292=((1.0)*r21);
IkReal x12293=(gconst16*sj3);
IkReal x12294=(cj3*gconst17);
IkReal x12295=(gconst17*r20);
IkReal x12296=(cj1*cj2);
IkReal x12297=(cj3*gconst16*r20);
CheckValue<IkReal> x12298=IKPowWithIntegerCheck((((r21*x12293))+(((-1.0)*sj3*x12295))),-1);
if(!x12298.valid){
continue;
}
CheckValue<IkReal> x12299=IKPowWithIntegerCheck((((gconst17*r10*sj3*x12295))+(((-1.0)*gconst17*r10*x12292*x12293))+((gconst16*r11*r21*x12293))+(((-1.0)*r11*x12293*x12295))),-1);
if(!x12299.valid){
continue;
}
if( IKabs(((x12298.value)*(((((-1.0)*x12292*x12294))+x12291+(((-1.0)*x12297))+(((-1.0)*x12296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12299.value)*((((r12*r21*x12294))+((r12*x12297))+((r12*x12296))+((cj0*sj3*x12295))+(((-1.0)*cj0*x12292*x12293))+(((-1.0)*r12*x12291)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12298.value)*(((((-1.0)*x12292*x12294))+x12291+(((-1.0)*x12297))+(((-1.0)*x12296))))))+IKsqr(((x12299.value)*((((r12*r21*x12294))+((r12*x12297))+((r12*x12296))+((cj0*sj3*x12295))+(((-1.0)*cj0*x12292*x12293))+(((-1.0)*r12*x12291))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12298.value)*(((((-1.0)*x12292*x12294))+x12291+(((-1.0)*x12297))+(((-1.0)*x12296))))), ((x12299.value)*((((r12*r21*x12294))+((r12*x12297))+((r12*x12296))+((cj0*sj3*x12295))+(((-1.0)*cj0*x12292*x12293))+(((-1.0)*r12*x12291))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12300=IKcos(j4);
IkReal x12301=IKsin(j4);
IkReal x12302=(gconst17*sj3);
IkReal x12303=(cj3*r20);
IkReal x12304=(cj2*sj0);
IkReal x12305=((1.0)*sj0);
IkReal x12306=((1.0)*sj1);
IkReal x12307=(cj3*gconst17);
IkReal x12308=(gconst16*sj3);
IkReal x12309=(cj3*gconst16);
IkReal x12310=(cj1*sj2);
IkReal x12311=(cj0*cj2);
IkReal x12312=(gconst17*x12301);
IkReal x12313=((1.0)*x12301);
IkReal x12314=(gconst16*x12300);
IkReal x12315=((1.0)*x12300);
IkReal x12316=(cj3*x12300);
IkReal x12317=(x12301*x12308);
evalcond[0]=((((-1.0)*gconst17*r20*x12315))+((r21*x12314)));
evalcond[1]=((((-1.0)*gconst17*r10*x12315))+cj0+((r11*x12314))+((r12*x12301)));
evalcond[2]=((((-1.0)*gconst17*r00*x12315))+(((-1.0)*x12305))+((r01*x12314))+((r02*x12301)));
evalcond[3]=(((gconst16*x12303))+(((-1.0)*r20*x12302*x12313))+((r21*x12307))+((cj1*cj2))+(((-1.0)*sj2*x12306))+((r21*x12317)));
evalcond[4]=((((-1.0)*r21*x12309*x12313))+(((-1.0)*cj2*x12306))+((r21*x12302))+(((-1.0)*x12310))+((r20*x12308))+((x12303*x12312)));
evalcond[5]=((((-1.0)*r02*sj3*x12315))+((sj1*x12311))+((cj0*x12310))+((r00*x12309))+((r01*x12307))+((r01*x12317))+(((-1.0)*r00*x12302*x12313)));
evalcond[6]=(((cj1*x12311))+((r00*x12301*x12307))+((r02*x12316))+(((-1.0)*r01*x12309*x12313))+((r00*x12308))+((r01*x12302))+(((-1.0)*cj0*sj2*x12306)));
evalcond[7]=((((-1.0)*r10*x12302*x12313))+((r10*x12309))+((r11*x12317))+((r11*x12307))+((sj0*x12310))+((sj1*x12304))+(((-1.0)*r12*sj3*x12315)));
evalcond[8]=(((r10*x12308))+((r12*x12316))+(((-1.0)*r11*x12309*x12313))+((r11*x12302))+((r10*x12301*x12307))+(((-1.0)*sj1*sj2*x12305))+((cj1*x12304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12318=((1.0)*sj0);
IkReal x12319=((1.0)*gconst17);
CheckValue<IkReal> x12320=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12319)))),-1);
if(!x12320.valid){
continue;
}
CheckValue<IkReal> x12321 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r10*x12318))+((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x12319)))),IkReal(((((-1.0)*r12*x12318))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12320.value)))+(x12321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12322=IKcos(j4);
IkReal x12323=IKsin(j4);
IkReal x12324=(gconst17*sj3);
IkReal x12325=(cj3*r20);
IkReal x12326=(cj2*sj0);
IkReal x12327=((1.0)*sj0);
IkReal x12328=((1.0)*sj1);
IkReal x12329=(cj3*gconst17);
IkReal x12330=(gconst16*sj3);
IkReal x12331=(cj3*gconst16);
IkReal x12332=(cj1*sj2);
IkReal x12333=(cj0*cj2);
IkReal x12334=(gconst17*x12323);
IkReal x12335=((1.0)*x12323);
IkReal x12336=(gconst16*x12322);
IkReal x12337=((1.0)*x12322);
IkReal x12338=(cj3*x12322);
IkReal x12339=(x12323*x12330);
evalcond[0]=(((r21*x12336))+(((-1.0)*gconst17*r20*x12337)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x12337))+((r12*x12323))+((r11*x12336)));
evalcond[2]=(((r01*x12336))+(((-1.0)*gconst17*r00*x12337))+(((-1.0)*x12327))+((r02*x12323)));
evalcond[3]=(((r21*x12339))+((r21*x12329))+((gconst16*x12325))+(((-1.0)*sj2*x12328))+(((-1.0)*r20*x12324*x12335))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r21*x12331*x12335))+((r20*x12330))+((r21*x12324))+((x12325*x12334))+(((-1.0)*cj2*x12328))+(((-1.0)*x12332)));
evalcond[5]=(((cj0*x12332))+((r01*x12339))+((r00*x12331))+((r01*x12329))+(((-1.0)*r00*x12324*x12335))+((sj1*x12333))+(((-1.0)*r02*sj3*x12337)));
evalcond[6]=((((-1.0)*cj0*sj2*x12328))+(((-1.0)*r01*x12331*x12335))+((r00*x12330))+((r01*x12324))+((cj1*x12333))+((r02*x12338))+((r00*x12323*x12329)));
evalcond[7]=((((-1.0)*r10*x12324*x12335))+(((-1.0)*r12*sj3*x12337))+((r10*x12331))+((sj1*x12326))+((sj0*x12332))+((r11*x12329))+((r11*x12339)));
evalcond[8]=(((cj1*x12326))+(((-1.0)*r11*x12331*x12335))+((r12*x12338))+(((-1.0)*sj1*sj2*x12327))+((r10*x12330))+((r11*x12324))+((r10*x12323*x12329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12340=((1.0)*sj0);
IkReal x12341=((1.0)*gconst17);
CheckValue<IkReal> x12342 = IKatan2WithCheck(IkReal((((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x12340))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x12341)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12341)))),-1);
if(!x12343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12342.value)+(((1.5707963267949)*(x12343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12344=IKcos(j4);
IkReal x12345=IKsin(j4);
IkReal x12346=(gconst17*sj3);
IkReal x12347=(cj3*r20);
IkReal x12348=(cj2*sj0);
IkReal x12349=((1.0)*sj0);
IkReal x12350=((1.0)*sj1);
IkReal x12351=(cj3*gconst17);
IkReal x12352=(cj3*gconst16);
IkReal x12353=(cj1*sj2);
IkReal x12354=(cj0*cj2);
IkReal x12355=(gconst16*sj3);
IkReal x12356=(gconst17*x12345);
IkReal x12357=(r22*x12344);
IkReal x12358=((1.0)*x12345);
IkReal x12359=(gconst16*x12344);
IkReal x12360=((1.0)*x12344);
IkReal x12361=(cj3*x12344);
IkReal x12362=(x12345*x12355);
evalcond[0]=(((r22*x12345))+((r21*x12359))+(((-1.0)*gconst17*r20*x12360)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x12360))+((r11*x12359))+((r12*x12345)));
evalcond[2]=((((-1.0)*gconst17*r00*x12360))+(((-1.0)*x12349))+((r01*x12359))+((r02*x12345)));
evalcond[3]=((((-1.0)*sj3*x12357))+((gconst16*x12347))+((r21*x12362))+(((-1.0)*sj2*x12350))+((r21*x12351))+((cj1*cj2))+(((-1.0)*r20*x12346*x12358)));
evalcond[4]=((((-1.0)*x12353))+((r20*x12355))+(((-1.0)*r21*x12352*x12358))+(((-1.0)*cj2*x12350))+((cj3*x12357))+((x12347*x12356))+((r21*x12346)));
evalcond[5]=((((-1.0)*r02*sj3*x12360))+((cj0*x12353))+((r01*x12351))+((r00*x12352))+(((-1.0)*r00*x12346*x12358))+((r01*x12362))+((sj1*x12354)));
evalcond[6]=((((-1.0)*cj0*sj2*x12350))+(((-1.0)*r01*x12352*x12358))+((r00*x12355))+((r01*x12346))+((r00*x12345*x12351))+((cj1*x12354))+((r02*x12361)));
evalcond[7]=(((r11*x12362))+((r11*x12351))+(((-1.0)*r10*x12346*x12358))+((sj1*x12348))+((sj0*x12353))+((r10*x12352))+(((-1.0)*r12*sj3*x12360)));
evalcond[8]=((((-1.0)*r11*x12352*x12358))+((cj1*x12348))+((r10*x12345*x12351))+((r11*x12346))+(((-1.0)*sj1*sj2*x12349))+((r10*x12355))+((r12*x12361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r20*sj0))+((gconst16*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
CheckValue<IkReal> x12364=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x12364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12363.value)+(((1.5707963267949)*(x12364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12365=IKcos(j4);
IkReal x12366=IKsin(j4);
IkReal x12367=(gconst17*sj3);
IkReal x12368=(cj3*r20);
IkReal x12369=(cj2*sj0);
IkReal x12370=((1.0)*sj0);
IkReal x12371=((1.0)*sj1);
IkReal x12372=(cj3*gconst17);
IkReal x12373=(cj3*gconst16);
IkReal x12374=(cj1*sj2);
IkReal x12375=(cj0*cj2);
IkReal x12376=(gconst16*sj3);
IkReal x12377=(gconst17*x12366);
IkReal x12378=(r22*x12365);
IkReal x12379=((1.0)*x12366);
IkReal x12380=(gconst16*x12365);
IkReal x12381=((1.0)*x12365);
IkReal x12382=(cj3*x12365);
IkReal x12383=(x12366*x12376);
evalcond[0]=(((r21*x12380))+((r22*x12366))+(((-1.0)*gconst17*r20*x12381)));
evalcond[1]=(((r11*x12380))+cj0+(((-1.0)*gconst17*r10*x12381))+((r12*x12366)));
evalcond[2]=((((-1.0)*x12370))+((r01*x12380))+((r02*x12366))+(((-1.0)*gconst17*r00*x12381)));
evalcond[3]=((((-1.0)*r20*x12367*x12379))+((r21*x12372))+((r21*x12383))+(((-1.0)*sj2*x12371))+(((-1.0)*sj3*x12378))+((cj1*cj2))+((gconst16*x12368)));
evalcond[4]=(((x12368*x12377))+((r21*x12367))+((cj3*x12378))+(((-1.0)*cj2*x12371))+(((-1.0)*x12374))+((r20*x12376))+(((-1.0)*r21*x12373*x12379)));
evalcond[5]=((((-1.0)*r00*x12367*x12379))+((r01*x12383))+(((-1.0)*r02*sj3*x12381))+((cj0*x12374))+((r01*x12372))+((r00*x12373))+((sj1*x12375)));
evalcond[6]=((((-1.0)*cj0*sj2*x12371))+((r02*x12382))+((r00*x12366*x12372))+((cj1*x12375))+((r00*x12376))+(((-1.0)*r01*x12373*x12379))+((r01*x12367)));
evalcond[7]=(((r11*x12383))+((r11*x12372))+((r10*x12373))+(((-1.0)*r10*x12367*x12379))+(((-1.0)*r12*sj3*x12381))+((sj1*x12369))+((sj0*x12374)));
evalcond[8]=(((r12*x12382))+((r11*x12367))+((r10*x12366*x12372))+((r10*x12376))+((cj1*x12369))+(((-1.0)*sj1*sj2*x12370))+(((-1.0)*r11*x12373*x12379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12384=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x12384.valid){
continue;
}
CheckValue<IkReal> x12385 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12384.value)))+(x12385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12386=IKcos(j4);
IkReal x12387=IKsin(j4);
IkReal x12388=(gconst17*sj3);
IkReal x12389=(cj3*r20);
IkReal x12390=(cj2*sj0);
IkReal x12391=((1.0)*sj0);
IkReal x12392=((1.0)*sj1);
IkReal x12393=(cj3*gconst17);
IkReal x12394=(cj3*gconst16);
IkReal x12395=(cj1*sj2);
IkReal x12396=(cj0*cj2);
IkReal x12397=(gconst16*sj3);
IkReal x12398=(gconst17*x12387);
IkReal x12399=(r22*x12386);
IkReal x12400=((1.0)*x12387);
IkReal x12401=(gconst16*x12386);
IkReal x12402=((1.0)*x12386);
IkReal x12403=(cj3*x12386);
IkReal x12404=(x12387*x12397);
evalcond[0]=((((-1.0)*gconst17*r20*x12402))+((r21*x12401))+((r22*x12387)));
evalcond[1]=(((r12*x12387))+(((-1.0)*gconst17*r10*x12402))+cj0+((r11*x12401)));
evalcond[2]=(((r02*x12387))+(((-1.0)*gconst17*r00*x12402))+(((-1.0)*x12391))+((r01*x12401)));
evalcond[3]=((((-1.0)*sj2*x12392))+((r21*x12393))+(((-1.0)*r20*x12388*x12400))+((r21*x12404))+((cj1*cj2))+(((-1.0)*sj3*x12399))+((gconst16*x12389)));
evalcond[4]=(((x12389*x12398))+((cj3*x12399))+((r20*x12397))+((r21*x12388))+(((-1.0)*x12395))+(((-1.0)*r21*x12394*x12400))+(((-1.0)*cj2*x12392)));
evalcond[5]=(((r01*x12393))+((r00*x12394))+(((-1.0)*r00*x12388*x12400))+(((-1.0)*r02*sj3*x12402))+((cj0*x12395))+((r01*x12404))+((sj1*x12396)));
evalcond[6]=(((r02*x12403))+(((-1.0)*cj0*sj2*x12392))+((r00*x12387*x12393))+(((-1.0)*r01*x12394*x12400))+((cj1*x12396))+((r00*x12397))+((r01*x12388)));
evalcond[7]=(((r11*x12393))+(((-1.0)*r12*sj3*x12402))+((r10*x12394))+(((-1.0)*r10*x12388*x12400))+((sj0*x12395))+((r11*x12404))+((sj1*x12390)));
evalcond[8]=((((-1.0)*sj1*sj2*x12391))+((r11*x12388))+((r10*x12397))+((cj1*x12390))+((r10*x12387*x12393))+(((-1.0)*r11*x12394*x12400))+((r12*x12403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12405=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12405;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12405);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12406=((1.0)*cj5);
IkReal x12407=((((-1.0)*r21*x12406))+(((-1.0)*r20*sj5)));
j4eval[0]=x12407;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12406)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12408=cj5*cj5;
IkReal x12409=(cj3*r00);
IkReal x12410=(cj3*r01);
IkReal x12411=((1.0)*cj5*sj5);
IkReal x12412=((((-1.0)*r21*x12409*x12411))+(((-1.0)*r20*x12410*x12411))+((r21*x12410))+((r20*x12408*x12409))+((cj3*r02*r22))+(((-1.0)*r21*x12408*x12410)));
j4eval[0]=x12412;
j4eval[1]=IKsign(x12412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12413=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12413;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12414=((1.0)*cj5);
IkReal x12415=((((-1.0)*r21*x12414))+(((-1.0)*r20*sj5)));
j4eval[0]=x12415;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12414))+((r11*sj5))))));
j4eval[2]=IKsign(x12415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12416=cj5*cj5;
IkReal x12417=r01*r01;
IkReal x12418=(cj5*r00);
IkReal x12419=(r01*sj5);
IkReal x12420=(((x12416*(r00*r00)))+(((-1.0)*x12416*x12417))+(((-2.0)*x12418*x12419))+(r02*r02)+x12417);
j4eval[0]=x12420;
j4eval[1]=IKsign(x12420);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12418))+x12419))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12421=cj5*cj5;
IkReal x12422=r01*r01;
IkReal x12423=(r01*sj5);
IkReal x12424=(cj5*r00);
CheckValue<IkReal> x12425 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12424))+x12423)),IKFAST_ATAN2_MAGTHRESH);
if(!x12425.valid){
continue;
}
CheckValue<IkReal> x12426=IKPowWithIntegerCheck(IKsign((((x12421*(r00*r00)))+(((-1.0)*x12421*x12422))+(r02*r02)+x12422+(((-2.0)*x12423*x12424)))),-1);
if(!x12426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12425.value)+(((1.5707963267949)*(x12426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12427=IKcos(j4);
IkReal x12428=IKsin(j4);
IkReal x12429=(cj5*r00);
IkReal x12430=(cj5*r10);
IkReal x12431=(cj5*r20);
IkReal x12432=((1.0)*x12427);
IkReal x12433=((1.0)*x12428);
IkReal x12434=(sj5*x12427);
IkReal x12435=(sj5*x12428);
evalcond[0]=((((-1.0)*x12431*x12432))+((r21*x12434))+((r22*x12428)));
evalcond[1]=((((-1.0)*x12430*x12432))+((r12*x12428))+((r11*x12434)));
evalcond[2]=((-1.0)+(((-1.0)*x12429*x12432))+((r02*x12428))+((r01*x12434)));
evalcond[3]=((((-1.0)*x12429*x12433))+(((-1.0)*r02*x12432))+((r01*x12435)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x12430*x12433))+((cj1*sj2))+(((-1.0)*r12*x12432))+((r11*x12435)));
evalcond[5]=((((-1.0)*x12431*x12433))+((r21*x12435))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x12432))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12436=((1.0)*cj5);
CheckValue<IkReal> x12437 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12436))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12437.valid){
continue;
}
CheckValue<IkReal> x12438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12436))+(((-1.0)*r20*sj5)))),-1);
if(!x12438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12437.value)+(((1.5707963267949)*(x12438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12439=IKcos(j4);
IkReal x12440=IKsin(j4);
IkReal x12441=(cj5*r00);
IkReal x12442=(cj5*r10);
IkReal x12443=(cj5*r20);
IkReal x12444=((1.0)*x12439);
IkReal x12445=((1.0)*x12440);
IkReal x12446=(sj5*x12439);
IkReal x12447=(sj5*x12440);
evalcond[0]=(((r21*x12446))+((r22*x12440))+(((-1.0)*x12443*x12444)));
evalcond[1]=(((r11*x12446))+((r12*x12440))+(((-1.0)*x12442*x12444)));
evalcond[2]=((-1.0)+(((-1.0)*x12441*x12444))+((r01*x12446))+((r02*x12440)));
evalcond[3]=((((-1.0)*r02*x12444))+(((-1.0)*x12441*x12445))+((r01*x12447)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12444))+((r11*x12447))+(((-1.0)*x12442*x12445)));
evalcond[5]=((((-1.0)*r22*x12444))+(((-1.0)*sj1*sj2))+((r21*x12447))+(((-1.0)*x12443*x12445))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12448 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12448.valid){
continue;
}
CheckValue<IkReal> x12449=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12448.value)+(((1.5707963267949)*(x12449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12450=IKcos(j4);
IkReal x12451=IKsin(j4);
IkReal x12452=(cj5*r00);
IkReal x12453=(cj5*r10);
IkReal x12454=(cj5*r20);
IkReal x12455=((1.0)*x12450);
IkReal x12456=((1.0)*x12451);
IkReal x12457=(sj5*x12450);
IkReal x12458=(sj5*x12451);
evalcond[0]=(((r22*x12451))+(((-1.0)*x12454*x12455))+((r21*x12457)));
evalcond[1]=(((r11*x12457))+((r12*x12451))+(((-1.0)*x12453*x12455)));
evalcond[2]=((-1.0)+((r02*x12451))+(((-1.0)*x12452*x12455))+((r01*x12457)));
evalcond[3]=((((-1.0)*r02*x12455))+(((-1.0)*x12452*x12456))+((r01*x12458)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12455))+((cj1*sj2))+((r11*x12458))+(((-1.0)*x12453*x12456)));
evalcond[5]=((((-1.0)*r22*x12455))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x12454*x12456))+((r21*x12458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12459=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12459;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12460=((1.0)*cj5);
IkReal x12461=((((-1.0)*r21*x12460))+(((-1.0)*r20*sj5)));
j4eval[0]=x12461;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12460))))));
j4eval[2]=IKsign(x12461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12462=cj5*cj5;
IkReal x12463=r01*r01;
IkReal x12464=(cj5*r00);
IkReal x12465=(r01*sj5);
IkReal x12466=(((x12462*(r00*r00)))+(r02*r02)+(((-1.0)*x12462*x12463))+x12463+(((-2.0)*x12464*x12465)));
j4eval[0]=x12466;
j4eval[1]=IKsign(x12466);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12464))+x12465))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12467=cj5*cj5;
IkReal x12468=r01*r01;
IkReal x12469=(r01*sj5);
IkReal x12470=(cj5*r00);
CheckValue<IkReal> x12471 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12470))+x12469)),IKFAST_ATAN2_MAGTHRESH);
if(!x12471.valid){
continue;
}
CheckValue<IkReal> x12472=IKPowWithIntegerCheck(IKsign((((x12467*(r00*r00)))+(((-2.0)*x12469*x12470))+(((-1.0)*x12467*x12468))+(r02*r02)+x12468)),-1);
if(!x12472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12471.value)+(((1.5707963267949)*(x12472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12473=IKcos(j4);
IkReal x12474=IKsin(j4);
IkReal x12475=(cj5*r00);
IkReal x12476=((1.0)*x12473);
IkReal x12477=(sj5*x12473);
IkReal x12478=(cj5*x12474);
IkReal x12479=((1.0)*sj5*x12474);
evalcond[0]=((((-1.0)*cj5*r20*x12476))+((r22*x12474))+((r21*x12477)));
evalcond[1]=(((r12*x12474))+((r11*x12477))+(((-1.0)*cj5*r10*x12476)));
evalcond[2]=(((x12474*x12475))+((r02*x12473))+(((-1.0)*r01*x12479)));
evalcond[3]=((-1.0)+((r01*x12477))+(((-1.0)*x12475*x12476))+((r02*x12474)));
evalcond[4]=((((-1.0)*r11*x12479))+((cj2*sj1))+((cj1*sj2))+((r12*x12473))+((r10*x12478)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x12479))+((r20*x12478))+((cj1*cj2))+((r22*x12473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12480=((1.0)*cj5);
CheckValue<IkReal> x12481 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12480))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12481.valid){
continue;
}
CheckValue<IkReal> x12482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12480))+(((-1.0)*r20*sj5)))),-1);
if(!x12482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12481.value)+(((1.5707963267949)*(x12482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12483=IKcos(j4);
IkReal x12484=IKsin(j4);
IkReal x12485=(cj5*r00);
IkReal x12486=((1.0)*x12483);
IkReal x12487=(sj5*x12483);
IkReal x12488=(cj5*x12484);
IkReal x12489=((1.0)*sj5*x12484);
evalcond[0]=((((-1.0)*cj5*r20*x12486))+((r22*x12484))+((r21*x12487)));
evalcond[1]=(((r12*x12484))+((r11*x12487))+(((-1.0)*cj5*r10*x12486)));
evalcond[2]=(((x12484*x12485))+((r02*x12483))+(((-1.0)*r01*x12489)));
evalcond[3]=((-1.0)+((r02*x12484))+(((-1.0)*x12485*x12486))+((r01*x12487)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x12489))+((cj1*sj2))+((r12*x12483))+((r10*x12488)));
evalcond[5]=(((r22*x12483))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x12488))+(((-1.0)*r21*x12489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12490 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12490.valid){
continue;
}
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12490.value)+(((1.5707963267949)*(x12491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12492=IKcos(j4);
IkReal x12493=IKsin(j4);
IkReal x12494=(cj5*r00);
IkReal x12495=((1.0)*x12492);
IkReal x12496=(sj5*x12492);
IkReal x12497=(cj5*x12493);
IkReal x12498=((1.0)*sj5*x12493);
evalcond[0]=(((r21*x12496))+(((-1.0)*cj5*r20*x12495))+((r22*x12493)));
evalcond[1]=((((-1.0)*cj5*r10*x12495))+((r12*x12493))+((r11*x12496)));
evalcond[2]=((((-1.0)*r01*x12498))+((x12493*x12494))+((r02*x12492)));
evalcond[3]=((-1.0)+((r01*x12496))+((r02*x12493))+(((-1.0)*x12494*x12495)));
evalcond[4]=(((cj2*sj1))+((r10*x12497))+((cj1*sj2))+(((-1.0)*r11*x12498))+((r12*x12492)));
evalcond[5]=(((r20*x12497))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x12498))+((cj1*cj2))+((r22*x12492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12499=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12499);
rxp0_2=(py*r00);
rxp1_0=(r21*x12499);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12500=(r01*sj5);
IkReal x12501=((1.0)*cj5*r00);
j4eval[0]=(((sj3*x12500))+(((-1.0)*sj3*x12501)));
j4eval[1]=((((-1.0)*x12501))+x12500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12502=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12502);
rxp0_2=(py*r00);
rxp1_0=(r21*x12502);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12503=(cj5*r00);
IkReal x12504=(r01*sj5);
j4eval[0]=(((cj3*x12503))+(((-1.0)*cj3*x12504)));
j4eval[1]=((((-1.0)*x12503))+x12504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12505=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12505);
rxp0_2=(py*r00);
rxp1_0=(r21*x12505);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12506=((1.0)*cj3);
CheckValue<IkReal> x12507=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x12507.valid){
continue;
}
CheckValue<IkReal> x12508=IKPowWithIntegerCheck(r12,-1);
if(!x12508.valid){
continue;
}
CheckValue<IkReal> x12509=IKPowWithIntegerCheck(sj3,-1);
if(!x12509.valid){
continue;
}
if( IKabs(((x12507.value)*(((((-1.0)*cj5*r01*x12506))+(((-1.0)*r00*sj5*x12506)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12508.value)*(x12509.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12507.value)*(((((-1.0)*cj5*r01*x12506))+(((-1.0)*r00*sj5*x12506))))))+IKsqr(((x12508.value)*(x12509.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12507.value)*(((((-1.0)*cj5*r01*x12506))+(((-1.0)*r00*sj5*x12506))))), ((x12508.value)*(x12509.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12510=IKcos(j4);
IkReal x12511=IKsin(j4);
IkReal x12512=(cj1*cj2);
IkReal x12513=(cj5*r00);
IkReal x12514=(cj5*r01);
IkReal x12515=((1.0)*sj1);
IkReal x12516=(r01*sj5);
IkReal x12517=(cj5*r20);
IkReal x12518=(cj1*sj2);
IkReal x12519=(r00*sj5);
IkReal x12520=(cj5*r21);
IkReal x12521=(r20*sj5);
IkReal x12522=(r21*sj5);
IkReal x12523=(sj2*x12515);
IkReal x12524=((1.0)*x12510);
IkReal x12525=(sj5*x12510);
IkReal x12526=(cj3*x12511);
IkReal x12527=(sj3*x12511);
evalcond[0]=(r12*x12511);
evalcond[1]=(((x12510*x12522))+(((-1.0)*x12517*x12524)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12524))+x12518);
evalcond[3]=(((cj3*r12*x12510))+(((-1.0)*x12523))+x12512);
evalcond[4]=((-1.0)+((x12510*x12516))+(((-1.0)*x12513*x12524)));
evalcond[5]=(((x12516*x12527))+(((-1.0)*x12513*x12527))+((cj3*x12519))+((cj3*x12514)));
evalcond[6]=(((x12513*x12526))+(((-1.0)*x12516*x12526))+((sj3*x12519))+((sj3*x12514)));
evalcond[7]=((((-1.0)*x12523))+((x12522*x12527))+(((-1.0)*x12517*x12527))+x12512+((cj3*x12520))+((cj3*x12521)));
evalcond[8]=(((sj3*x12520))+((sj3*x12521))+((x12517*x12526))+(((-1.0)*x12518))+(((-1.0)*x12522*x12526))+(((-1.0)*cj2*x12515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12528=(cj5*r00);
IkReal x12529=(r01*sj5);
IkReal x12530=((1.0)*sj3);
CheckValue<IkReal> x12531=IKPowWithIntegerCheck(((((-1.0)*cj3*x12529))+((cj3*x12528))),-1);
if(!x12531.valid){
continue;
}
CheckValue<IkReal> x12532=IKPowWithIntegerCheck((x12529+(((-1.0)*x12528))),-1);
if(!x12532.valid){
continue;
}
if( IKabs(((x12531.value)*(((((-1.0)*r00*sj5*x12530))+(((-1.0)*cj5*r01*x12530)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12532.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12531.value)*(((((-1.0)*r00*sj5*x12530))+(((-1.0)*cj5*r01*x12530))))))+IKsqr(x12532.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12531.value)*(((((-1.0)*r00*sj5*x12530))+(((-1.0)*cj5*r01*x12530))))), x12532.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12533=IKcos(j4);
IkReal x12534=IKsin(j4);
IkReal x12535=(cj1*cj2);
IkReal x12536=(cj5*r00);
IkReal x12537=(cj5*r01);
IkReal x12538=((1.0)*sj1);
IkReal x12539=(r01*sj5);
IkReal x12540=(cj5*r20);
IkReal x12541=(cj1*sj2);
IkReal x12542=(r00*sj5);
IkReal x12543=(cj5*r21);
IkReal x12544=(r20*sj5);
IkReal x12545=(r21*sj5);
IkReal x12546=(sj2*x12538);
IkReal x12547=((1.0)*x12533);
IkReal x12548=(sj5*x12533);
IkReal x12549=(cj3*x12534);
IkReal x12550=(sj3*x12534);
evalcond[0]=(r12*x12534);
evalcond[1]=(((x12533*x12545))+(((-1.0)*x12540*x12547)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12547))+x12541);
evalcond[3]=(((cj3*r12*x12533))+x12535+(((-1.0)*x12546)));
evalcond[4]=((-1.0)+(((-1.0)*x12536*x12547))+((x12533*x12539)));
evalcond[5]=(((x12539*x12550))+(((-1.0)*x12536*x12550))+((cj3*x12537))+((cj3*x12542)));
evalcond[6]=((((-1.0)*x12539*x12549))+((sj3*x12542))+((sj3*x12537))+((x12536*x12549)));
evalcond[7]=(((cj3*x12544))+((cj3*x12543))+(((-1.0)*x12540*x12550))+((x12545*x12550))+x12535+(((-1.0)*x12546)));
evalcond[8]=((((-1.0)*x12541))+(((-1.0)*cj2*x12538))+((x12540*x12549))+(((-1.0)*x12545*x12549))+((sj3*x12543))+((sj3*x12544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12551=((1.0)*cj3);
IkReal x12552=(r01*sj5);
IkReal x12553=((1.0)*cj5*r00);
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(((((-1.0)*sj3*x12553))+((sj3*x12552))),-1);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555=IKPowWithIntegerCheck((x12552+(((-1.0)*x12553))),-1);
if(!x12555.valid){
continue;
}
if( IKabs(((x12554.value)*(((((-1.0)*r00*sj5*x12551))+(((-1.0)*cj5*r01*x12551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12555.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12554.value)*(((((-1.0)*r00*sj5*x12551))+(((-1.0)*cj5*r01*x12551))))))+IKsqr(x12555.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12554.value)*(((((-1.0)*r00*sj5*x12551))+(((-1.0)*cj5*r01*x12551))))), x12555.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12556=IKcos(j4);
IkReal x12557=IKsin(j4);
IkReal x12558=(cj1*cj2);
IkReal x12559=(cj5*r00);
IkReal x12560=(cj5*r01);
IkReal x12561=((1.0)*sj1);
IkReal x12562=(r01*sj5);
IkReal x12563=(cj5*r20);
IkReal x12564=(cj1*sj2);
IkReal x12565=(r00*sj5);
IkReal x12566=(cj5*r21);
IkReal x12567=(r20*sj5);
IkReal x12568=(r21*sj5);
IkReal x12569=(sj2*x12561);
IkReal x12570=((1.0)*x12556);
IkReal x12571=(sj5*x12556);
IkReal x12572=(cj3*x12557);
IkReal x12573=(sj3*x12557);
evalcond[0]=(r12*x12557);
evalcond[1]=((((-1.0)*x12563*x12570))+((x12556*x12568)));
evalcond[2]=(((cj2*sj1))+x12564+(((-1.0)*r12*sj3*x12570)));
evalcond[3]=(((cj3*r12*x12556))+x12558+(((-1.0)*x12569)));
evalcond[4]=((-1.0)+((x12556*x12562))+(((-1.0)*x12559*x12570)));
evalcond[5]=(((cj3*x12560))+((cj3*x12565))+(((-1.0)*x12559*x12573))+((x12562*x12573)));
evalcond[6]=((((-1.0)*x12562*x12572))+((x12559*x12572))+((sj3*x12560))+((sj3*x12565)));
evalcond[7]=(((cj3*x12567))+((cj3*x12566))+((x12568*x12573))+x12558+(((-1.0)*x12563*x12573))+(((-1.0)*x12569)));
evalcond[8]=(((x12563*x12572))+(((-1.0)*x12568*x12572))+(((-1.0)*x12564))+(((-1.0)*cj2*x12561))+((sj3*x12567))+((sj3*x12566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12574=cj5*cj5;
IkReal x12575=((1.0)*r00);
IkReal x12576=(r01*sj3);
IkReal x12577=(sj3*sj5);
IkReal x12578=(r21*sj3);
IkReal x12579=((1.0)*cj5);
IkReal x12580=(cj5*r21*sj5);
IkReal x12581=(cj3*r01*r21);
IkReal x12582=(r20*x12574);
CheckValue<IkReal> x12583 = IKatan2WithCheck(IkReal((((x12576*x12580))+(((-1.0)*x12576*x12582))+((r00*x12578))+(((-1.0)*cj5*r20*x12575*x12577))+(((-1.0)*x12574*x12575*x12578)))),IkReal(((((-1.0)*r22*x12576*x12579))+(((-1.0)*r22*x12575*x12577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12583.valid){
continue;
}
CheckValue<IkReal> x12584=IKPowWithIntegerCheck(IKsign((((cj3*r00*x12582))+(((-1.0)*cj3*x12575*x12580))+(((-1.0)*cj3*r01*r20*sj5*x12579))+(((-1.0)*x12574*x12581))+((cj3*r02*r22))+x12581)),-1);
if(!x12584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12583.value)+(((1.5707963267949)*(x12584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12585=IKcos(j4);
IkReal x12586=IKsin(j4);
IkReal x12587=(cj1*cj2);
IkReal x12588=((1.0)*cj5);
IkReal x12589=(cj5*r01);
IkReal x12590=((1.0)*sj1);
IkReal x12591=(cj3*sj5);
IkReal x12592=(cj3*cj5);
IkReal x12593=(cj5*sj3);
IkReal x12594=(sj3*sj5);
IkReal x12595=(cj1*sj2);
IkReal x12596=(sj2*x12590);
IkReal x12597=(sj5*x12585);
IkReal x12598=(sj3*x12586);
IkReal x12599=((1.0)*x12586);
IkReal x12600=(cj3*x12585);
IkReal x12601=((1.0)*sj3*x12585);
evalcond[0]=((((-1.0)*r20*x12585*x12588))+((r21*x12597))+((r22*x12586)));
evalcond[1]=(((r12*x12586))+(((-1.0)*r10*x12585*x12588))+((r11*x12597)));
evalcond[2]=((-1.0)+((r01*x12597))+(((-1.0)*r00*x12585*x12588))+((r02*x12586)));
evalcond[3]=(((r00*x12586*x12592))+((r00*x12594))+(((-1.0)*r01*x12591*x12599))+((sj3*x12589))+((r02*x12600)));
evalcond[4]=(((r00*x12591))+((cj3*x12589))+((r01*x12586*x12594))+(((-1.0)*r02*x12601))+(((-1.0)*r00*x12588*x12598)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r10*x12588*x12598))+((r11*x12586*x12594))+(((-1.0)*r12*x12601))+x12595+((r11*x12592))+((r10*x12591)));
evalcond[6]=(((r12*x12600))+(((-1.0)*r11*x12591*x12599))+((r10*x12586*x12592))+(((-1.0)*x12596))+x12587+((r11*x12593))+((r10*x12594)));
evalcond[7]=((((-1.0)*r20*x12588*x12598))+((r21*x12592))+(((-1.0)*r22*x12601))+(((-1.0)*x12596))+((r21*x12586*x12594))+x12587+((r20*x12591)));
evalcond[8]=((((-1.0)*cj2*x12590))+((r21*x12593))+(((-1.0)*r21*x12591*x12599))+((r22*x12600))+(((-1.0)*x12595))+((r20*x12594))+((r20*x12586*x12592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12602=((1.0)*cj5);
CheckValue<IkReal> x12603 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12602)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12603.valid){
continue;
}
CheckValue<IkReal> x12604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12602))+(((-1.0)*r20*sj5)))),-1);
if(!x12604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12603.value)+(((1.5707963267949)*(x12604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12605=IKcos(j4);
IkReal x12606=IKsin(j4);
IkReal x12607=(cj1*cj2);
IkReal x12608=((1.0)*cj5);
IkReal x12609=(cj5*r01);
IkReal x12610=((1.0)*sj1);
IkReal x12611=(cj3*sj5);
IkReal x12612=(cj3*cj5);
IkReal x12613=(cj5*sj3);
IkReal x12614=(sj3*sj5);
IkReal x12615=(cj1*sj2);
IkReal x12616=(sj2*x12610);
IkReal x12617=(sj5*x12605);
IkReal x12618=(sj3*x12606);
IkReal x12619=((1.0)*x12606);
IkReal x12620=(cj3*x12605);
IkReal x12621=((1.0)*sj3*x12605);
evalcond[0]=(((r21*x12617))+((r22*x12606))+(((-1.0)*r20*x12605*x12608)));
evalcond[1]=((((-1.0)*r10*x12605*x12608))+((r12*x12606))+((r11*x12617)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12605*x12608))+((r02*x12606))+((r01*x12617)));
evalcond[3]=(((r02*x12620))+(((-1.0)*r01*x12611*x12619))+((r00*x12606*x12612))+((r00*x12614))+((sj3*x12609)));
evalcond[4]=((((-1.0)*r02*x12621))+((r01*x12606*x12614))+((cj3*x12609))+((r00*x12611))+(((-1.0)*r00*x12608*x12618)));
evalcond[5]=(((cj2*sj1))+((r11*x12606*x12614))+(((-1.0)*r12*x12621))+(((-1.0)*r10*x12608*x12618))+x12615+((r11*x12612))+((r10*x12611)));
evalcond[6]=((((-1.0)*r11*x12611*x12619))+((r10*x12606*x12612))+x12607+((r11*x12613))+((r12*x12620))+(((-1.0)*x12616))+((r10*x12614)));
evalcond[7]=((((-1.0)*r22*x12621))+((r21*x12612))+((r21*x12606*x12614))+((r20*x12611))+x12607+(((-1.0)*r20*x12608*x12618))+(((-1.0)*x12616)));
evalcond[8]=((((-1.0)*r21*x12611*x12619))+(((-1.0)*cj2*x12610))+((r22*x12620))+(((-1.0)*x12615))+((r21*x12613))+((r20*x12606*x12612))+((r20*x12614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12622 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12622.valid){
continue;
}
CheckValue<IkReal> x12623=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12622.value)+(((1.5707963267949)*(x12623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12624=IKcos(j4);
IkReal x12625=IKsin(j4);
IkReal x12626=(cj1*cj2);
IkReal x12627=((1.0)*cj5);
IkReal x12628=(cj5*r01);
IkReal x12629=((1.0)*sj1);
IkReal x12630=(cj3*sj5);
IkReal x12631=(cj3*cj5);
IkReal x12632=(cj5*sj3);
IkReal x12633=(sj3*sj5);
IkReal x12634=(cj1*sj2);
IkReal x12635=(sj2*x12629);
IkReal x12636=(sj5*x12624);
IkReal x12637=(sj3*x12625);
IkReal x12638=((1.0)*x12625);
IkReal x12639=(cj3*x12624);
IkReal x12640=((1.0)*sj3*x12624);
evalcond[0]=(((r22*x12625))+(((-1.0)*r20*x12624*x12627))+((r21*x12636)));
evalcond[1]=(((r11*x12636))+((r12*x12625))+(((-1.0)*r10*x12624*x12627)));
evalcond[2]=((-1.0)+((r02*x12625))+((r01*x12636))+(((-1.0)*r00*x12624*x12627)));
evalcond[3]=(((r00*x12625*x12631))+((r00*x12633))+((r02*x12639))+((sj3*x12628))+(((-1.0)*r01*x12630*x12638)));
evalcond[4]=((((-1.0)*r02*x12640))+((cj3*x12628))+((r00*x12630))+((r01*x12625*x12633))+(((-1.0)*r00*x12627*x12637)));
evalcond[5]=(((r11*x12631))+((cj2*sj1))+(((-1.0)*r10*x12627*x12637))+((r11*x12625*x12633))+x12634+((r10*x12630))+(((-1.0)*r12*x12640)));
evalcond[6]=(((r11*x12632))+((r12*x12639))+((r10*x12625*x12631))+(((-1.0)*x12635))+x12626+(((-1.0)*r11*x12630*x12638))+((r10*x12633)));
evalcond[7]=(((r20*x12630))+(((-1.0)*r22*x12640))+(((-1.0)*r20*x12627*x12637))+((r21*x12625*x12633))+(((-1.0)*x12635))+x12626+((r21*x12631)));
evalcond[8]=((((-1.0)*cj2*x12629))+(((-1.0)*x12634))+((r20*x12633))+((r20*x12625*x12631))+(((-1.0)*r21*x12630*x12638))+((r22*x12639))+((r21*x12632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12641=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12641;
j4eval[1]=IKsign(x12641);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12642=((1.0)*cj5);
IkReal x12643=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12642)));
j4eval[0]=x12643;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12642))+((r21*sj5))))));
j4eval[2]=IKsign(x12643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12644=cj5*cj5;
IkReal x12645=(cj3*r00);
IkReal x12646=(cj3*r01);
IkReal x12647=((1.0)*cj5*sj5);
IkReal x12648=(((r20*x12644*x12645))+(((-1.0)*r20*x12646*x12647))+(((-1.0)*r21*x12645*x12647))+(((-1.0)*r21*x12644*x12646))+((cj3*r02*r22))+((r21*x12646)));
j4eval[0]=x12648;
j4eval[1]=IKsign(x12648);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12649=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12649;
j4eval[1]=IKsign(x12649);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12650=((1.0)*cj5);
IkReal x12651=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12650)));
j4eval[0]=x12651;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12650)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12651);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12652=cj5*cj5;
IkReal x12653=r01*r01;
IkReal x12654=(r01*sj5);
IkReal x12655=(cj5*r00);
IkReal x12656=(((x12652*x12653))+(((-1.0)*(r02*r02)))+(((-1.0)*x12653))+(((-1.0)*x12652*(r00*r00)))+(((2.0)*x12654*x12655)));
j4eval[0]=x12656;
j4eval[1]=IKsign(x12656);
j4eval[2]=((IKabs(r02))+(IKabs((x12654+(((-1.0)*x12655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12657=cj5*cj5;
IkReal x12658=r01*r01;
IkReal x12659=(r01*sj5);
IkReal x12660=(cj5*r00);
CheckValue<IkReal> x12661 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12660))+x12659)),IKFAST_ATAN2_MAGTHRESH);
if(!x12661.valid){
continue;
}
CheckValue<IkReal> x12662=IKPowWithIntegerCheck(IKsign(((((2.0)*x12659*x12660))+(((-1.0)*x12657*(r00*r00)))+(((-1.0)*(r02*r02)))+((x12657*x12658))+(((-1.0)*x12658)))),-1);
if(!x12662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12661.value)+(((1.5707963267949)*(x12662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12663=IKcos(j4);
IkReal x12664=IKsin(j4);
IkReal x12665=(cj5*r00);
IkReal x12666=(cj5*r10);
IkReal x12667=((1.0)*sj1);
IkReal x12668=(cj5*r20);
IkReal x12669=((1.0)*x12663);
IkReal x12670=((1.0)*x12664);
IkReal x12671=(sj5*x12663);
IkReal x12672=(sj5*x12664);
evalcond[0]=(((r21*x12671))+((r22*x12664))+(((-1.0)*x12668*x12669)));
evalcond[1]=((((-1.0)*x12666*x12669))+((r12*x12664))+((r11*x12671)));
evalcond[2]=((1.0)+((r02*x12664))+(((-1.0)*x12665*x12669))+((r01*x12671)));
evalcond[3]=((((-1.0)*x12665*x12670))+(((-1.0)*r02*x12669))+((r01*x12672)));
evalcond[4]=((((-1.0)*r22*x12669))+((r21*x12672))+((cj1*cj2))+(((-1.0)*x12668*x12670))+(((-1.0)*sj2*x12667)));
evalcond[5]=((((-1.0)*cj2*x12667))+(((-1.0)*x12666*x12670))+(((-1.0)*cj1*sj2))+((r11*x12672))+(((-1.0)*r12*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12673=((1.0)*cj5);
CheckValue<IkReal> x12674 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12673)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12674.valid){
continue;
}
CheckValue<IkReal> x12675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12673)))),-1);
if(!x12675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12674.value)+(((1.5707963267949)*(x12675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12676=IKcos(j4);
IkReal x12677=IKsin(j4);
IkReal x12678=(cj5*r00);
IkReal x12679=(cj5*r10);
IkReal x12680=((1.0)*sj1);
IkReal x12681=(cj5*r20);
IkReal x12682=((1.0)*x12676);
IkReal x12683=((1.0)*x12677);
IkReal x12684=(sj5*x12676);
IkReal x12685=(sj5*x12677);
evalcond[0]=(((r21*x12684))+((r22*x12677))+(((-1.0)*x12681*x12682)));
evalcond[1]=(((r11*x12684))+((r12*x12677))+(((-1.0)*x12679*x12682)));
evalcond[2]=((1.0)+((r01*x12684))+((r02*x12677))+(((-1.0)*x12678*x12682)));
evalcond[3]=(((r01*x12685))+(((-1.0)*r02*x12682))+(((-1.0)*x12678*x12683)));
evalcond[4]=(((r21*x12685))+((cj1*cj2))+(((-1.0)*r22*x12682))+(((-1.0)*sj2*x12680))+(((-1.0)*x12681*x12683)));
evalcond[5]=(((r11*x12685))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12680))+(((-1.0)*r12*x12682))+(((-1.0)*x12679*x12683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12686=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12686.valid){
continue;
}
CheckValue<IkReal> x12687 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12686.value)))+(x12687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12688=IKcos(j4);
IkReal x12689=IKsin(j4);
IkReal x12690=(cj5*r00);
IkReal x12691=(cj5*r10);
IkReal x12692=((1.0)*sj1);
IkReal x12693=(cj5*r20);
IkReal x12694=((1.0)*x12688);
IkReal x12695=((1.0)*x12689);
IkReal x12696=(sj5*x12688);
IkReal x12697=(sj5*x12689);
evalcond[0]=(((r21*x12696))+((r22*x12689))+(((-1.0)*x12693*x12694)));
evalcond[1]=(((r12*x12689))+(((-1.0)*x12691*x12694))+((r11*x12696)));
evalcond[2]=((1.0)+((r02*x12689))+(((-1.0)*x12690*x12694))+((r01*x12696)));
evalcond[3]=((((-1.0)*r02*x12694))+(((-1.0)*x12690*x12695))+((r01*x12697)));
evalcond[4]=((((-1.0)*r22*x12694))+((r21*x12697))+(((-1.0)*sj2*x12692))+((cj1*cj2))+(((-1.0)*x12693*x12695)));
evalcond[5]=((((-1.0)*r12*x12694))+(((-1.0)*cj1*sj2))+(((-1.0)*x12691*x12695))+((r11*x12697))+(((-1.0)*cj2*x12692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12698=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12698;
j4eval[1]=IKsign(x12698);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12699=((1.0)*cj5);
IkReal x12700=((((-1.0)*r11*x12699))+(((-1.0)*r10*sj5)));
j4eval[0]=x12700;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12699))))));
j4eval[2]=IKsign(x12700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12701=cj5*cj5;
IkReal x12702=r01*r01;
IkReal x12703=(r01*sj5);
IkReal x12704=(cj5*r00);
IkReal x12705=((((-1.0)*x12701*(r00*r00)))+(((2.0)*x12703*x12704))+(((-1.0)*(r02*r02)))+((x12701*x12702))+(((-1.0)*x12702)));
j4eval[0]=x12705;
j4eval[1]=IKsign(x12705);
j4eval[2]=((IKabs((x12703+(((-1.0)*x12704)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12706=cj5*cj5;
IkReal x12707=r01*r01;
IkReal x12708=(r01*sj5);
IkReal x12709=(cj5*r00);
CheckValue<IkReal> x12710 = IKatan2WithCheck(IkReal(r02),IkReal((x12708+(((-1.0)*x12709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12710.valid){
continue;
}
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(IKsign(((((2.0)*x12708*x12709))+(((-1.0)*(r02*r02)))+((x12706*x12707))+(((-1.0)*x12706*(r00*r00)))+(((-1.0)*x12707)))),-1);
if(!x12711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12710.value)+(((1.5707963267949)*(x12711.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12712=IKcos(j4);
IkReal x12713=IKsin(j4);
IkReal x12714=(cj5*r00);
IkReal x12715=((1.0)*sj2);
IkReal x12716=((1.0)*x12712);
IkReal x12717=(sj5*x12712);
IkReal x12718=(cj5*x12713);
IkReal x12719=((1.0)*sj5*x12713);
evalcond[0]=(((r21*x12717))+((r22*x12713))+(((-1.0)*cj5*r20*x12716)));
evalcond[1]=(((r12*x12713))+((r11*x12717))+(((-1.0)*cj5*r10*x12716)));
evalcond[2]=(((r02*x12712))+((x12713*x12714))+(((-1.0)*r01*x12719)));
evalcond[3]=((1.0)+((r02*x12713))+(((-1.0)*x12714*x12716))+((r01*x12717)));
evalcond[4]=(((r22*x12712))+(((-1.0)*sj1*x12715))+((r20*x12718))+(((-1.0)*r21*x12719))+((cj1*cj2)));
evalcond[5]=(((r12*x12712))+(((-1.0)*cj2*sj1))+((r10*x12718))+(((-1.0)*cj1*x12715))+(((-1.0)*r11*x12719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12720=((1.0)*cj5);
CheckValue<IkReal> x12721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12720)))),-1);
if(!x12721.valid){
continue;
}
CheckValue<IkReal> x12722 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12720)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12721.value)))+(x12722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12723=IKcos(j4);
IkReal x12724=IKsin(j4);
IkReal x12725=(cj5*r00);
IkReal x12726=((1.0)*sj2);
IkReal x12727=((1.0)*x12723);
IkReal x12728=(sj5*x12723);
IkReal x12729=(cj5*x12724);
IkReal x12730=((1.0)*sj5*x12724);
evalcond[0]=(((r21*x12728))+(((-1.0)*cj5*r20*x12727))+((r22*x12724)));
evalcond[1]=(((r11*x12728))+((r12*x12724))+(((-1.0)*cj5*r10*x12727)));
evalcond[2]=((((-1.0)*r01*x12730))+((r02*x12723))+((x12724*x12725)));
evalcond[3]=((1.0)+((r02*x12724))+(((-1.0)*x12725*x12727))+((r01*x12728)));
evalcond[4]=((((-1.0)*sj1*x12726))+((r20*x12729))+((cj1*cj2))+(((-1.0)*r21*x12730))+((r22*x12723)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x12723))+((r10*x12729))+(((-1.0)*r11*x12730))+(((-1.0)*cj1*x12726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12731=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12731.valid){
continue;
}
CheckValue<IkReal> x12732 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12731.value)))+(x12732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12733=IKcos(j4);
IkReal x12734=IKsin(j4);
IkReal x12735=(cj5*r00);
IkReal x12736=((1.0)*sj2);
IkReal x12737=((1.0)*x12733);
IkReal x12738=(sj5*x12733);
IkReal x12739=(cj5*x12734);
IkReal x12740=((1.0)*sj5*x12734);
evalcond[0]=(((r21*x12738))+(((-1.0)*cj5*r20*x12737))+((r22*x12734)));
evalcond[1]=(((r11*x12738))+(((-1.0)*cj5*r10*x12737))+((r12*x12734)));
evalcond[2]=(((r02*x12733))+((x12734*x12735))+(((-1.0)*r01*x12740)));
evalcond[3]=((1.0)+((r02*x12734))+(((-1.0)*x12735*x12737))+((r01*x12738)));
evalcond[4]=((((-1.0)*sj1*x12736))+((r20*x12739))+((cj1*cj2))+((r22*x12733))+(((-1.0)*r21*x12740)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x12733))+(((-1.0)*r11*x12740))+((r10*x12739))+(((-1.0)*cj1*x12736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12741=((-1.0)*r10);
IkReal x12743 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12743)==0){
continue;
}
IkReal x12742=pow(x12743,-0.5);
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12741),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
IkReal gconst54=((-1.0)*(x12744.value));
IkReal gconst55=(r11*x12742);
IkReal gconst56=(x12741*x12742);
CheckValue<IkReal> x12745 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12746=((-1.0)*r10);
IkReal x12747=x12742;
CheckValue<IkReal> x12749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12746),IKFAST_ATAN2_MAGTHRESH);
if(!x12749.valid){
continue;
}
IkReal x12748=((-1.0)*(x12749.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12748;
IkReal gconst54=x12748;
IkReal gconst55=(r11*x12747);
IkReal gconst56=(x12746*x12747);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12750=((-1.0)*r10);
IkReal x12751=x12742;
CheckValue<IkReal> x12753 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12750),IKFAST_ATAN2_MAGTHRESH);
if(!x12753.valid){
continue;
}
IkReal x12752=((-1.0)*(x12753.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12752;
IkReal gconst54=x12752;
IkReal gconst55=(r11*x12751);
IkReal gconst56=(x12750*x12751);
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12761.valid){
continue;
}
IkReal x12754=x12761.value;
IkReal x12755=(cj3*x12754);
IkReal x12756=(r00*x12755);
IkReal x12757=(r21*x12755);
IkReal x12758=(r20*x12755);
IkReal x12759=(r01*x12755);
IkReal x12760=(r10*r11*x12755);
j4eval[0]=IKsign((((r01*x12757*(r11*r11)))+((r01*r10*r11*x12758))+((cj3*r02*r22))+((r20*x12756*(r10*r10)))+((r10*r11*r21*x12756))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12762=gconst56*gconst56;
IkReal x12763=gconst55*gconst55;
IkReal x12764=(r01*sj3);
IkReal x12765=(cj3*r00);
IkReal x12766=((1.0)*sj3);
IkReal x12767=(cj3*r01);
IkReal x12768=((1.0)*r22);
IkReal x12769=(gconst55*gconst56*r20);
IkReal x12770=(gconst55*gconst56*r21);
IkReal x12771=(r21*x12763);
IkReal x12772=(r20*x12762);
CheckValue<IkReal> x12773=IKPowWithIntegerCheck(IKsign((((x12764*x12769))+(((-1.0)*r00*x12766*x12772))+(((-1.0)*x12764*x12771))+(((-1.0)*r02*r22*x12766))+((r00*sj3*x12770)))),-1);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774 = IKatan2WithCheck(IkReal((((x12765*x12771))+(((-1.0)*x12767*x12772))+((x12767*x12770))+(((-1.0)*x12765*x12769)))),IkReal(((((-1.0)*gconst56*x12767*x12768))+(((-1.0)*gconst55*x12765*x12768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12773.value)))+(x12774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12775=IKcos(j4);
IkReal x12776=IKsin(j4);
IkReal x12777=((1.0)*cj3);
IkReal x12778=(cj3*gconst56);
IkReal x12779=(sj1*sj2);
IkReal x12780=(gconst55*r10);
IkReal x12781=(gconst55*sj3);
IkReal x12782=((1.0)*cj1);
IkReal x12783=(gconst56*sj3);
IkReal x12784=(cj3*gconst55);
IkReal x12785=(sj2*x12782);
IkReal x12786=((1.0)*cj2*sj1);
IkReal x12787=(r00*x12776);
IkReal x12788=(gconst55*x12775);
IkReal x12789=((1.0)*x12775);
IkReal x12790=(cj3*x12775);
IkReal x12791=(r01*x12776);
IkReal x12792=(r10*x12776);
IkReal x12793=(r20*x12776);
IkReal x12794=(r11*x12776);
IkReal x12795=(gconst55*r21*x12776);
IkReal x12796=(x12786+x12785);
evalcond[0]=(((r21*x12788))+(((-1.0)*gconst56*r20*x12789))+((r22*x12776)));
evalcond[1]=((((-1.0)*gconst56*r10*x12789))+((r11*x12788))+((r12*x12776)));
evalcond[2]=((1.0)+((r01*x12788))+((r02*x12776))+(((-1.0)*gconst56*r00*x12789)));
evalcond[3]=(((r02*x12790))+((x12778*x12787))+((r01*x12783))+(((-1.0)*gconst55*x12777*x12791))+((r00*x12781)));
evalcond[4]=(((r01*x12778))+((x12781*x12791))+((r00*x12784))+(((-1.0)*x12783*x12787))+(((-1.0)*r02*sj3*x12789)));
evalcond[5]=((((-1.0)*cj2*x12782))+(((-1.0)*gconst55*x12777*x12794))+((r11*x12783))+((r12*x12790))+((sj3*x12780))+x12779+((x12778*x12792)));
evalcond[6]=(((r20*x12784))+(((-1.0)*x12783*x12793))+(((-1.0)*r22*sj3*x12789))+(((-1.0)*x12779))+((r21*x12776*x12781))+((r21*x12778))+((cj1*cj2)));
evalcond[7]=(((r20*x12781))+(((-1.0)*x12796))+(((-1.0)*x12777*x12795))+((r21*x12783))+((r22*x12790))+((x12778*x12793)));
evalcond[8]=((((-1.0)*x12796))+((x12781*x12794))+(((-1.0)*x12783*x12792))+((r11*x12778))+(((-1.0)*r12*sj3*x12789))+((cj3*x12780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12797=gconst55*gconst55;
IkReal x12798=gconst56*gconst56;
IkReal x12799=(r01*r21);
IkReal x12800=(gconst55*gconst56);
IkReal x12801=(cj3*r00);
IkReal x12802=((1.0)*sj3);
IkReal x12803=(r20*x12798);
CheckValue<IkReal> x12804 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12802*x12803))+((r00*r21*sj3*x12797))+(((-1.0)*r00*r20*x12800*x12802))+((sj3*x12799*x12800)))),IkReal(((((-1.0)*gconst55*r00*r22*x12802))+(((-1.0)*gconst56*r01*r22*x12802)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12804.valid){
continue;
}
CheckValue<IkReal> x12805=IKPowWithIntegerCheck(IKsign((((x12801*x12803))+(((-1.0)*cj3*r01*r20*x12800))+((cj3*r02*r22))+((cj3*x12797*x12799))+(((-1.0)*r21*x12800*x12801)))),-1);
if(!x12805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12804.value)+(((1.5707963267949)*(x12805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12806=IKcos(j4);
IkReal x12807=IKsin(j4);
IkReal x12808=((1.0)*cj3);
IkReal x12809=(cj3*gconst56);
IkReal x12810=(sj1*sj2);
IkReal x12811=(gconst55*r10);
IkReal x12812=(gconst55*sj3);
IkReal x12813=((1.0)*cj1);
IkReal x12814=(gconst56*sj3);
IkReal x12815=(cj3*gconst55);
IkReal x12816=(sj2*x12813);
IkReal x12817=((1.0)*cj2*sj1);
IkReal x12818=(r00*x12807);
IkReal x12819=(gconst55*x12806);
IkReal x12820=((1.0)*x12806);
IkReal x12821=(cj3*x12806);
IkReal x12822=(r01*x12807);
IkReal x12823=(r10*x12807);
IkReal x12824=(r20*x12807);
IkReal x12825=(r11*x12807);
IkReal x12826=(gconst55*r21*x12807);
IkReal x12827=(x12817+x12816);
evalcond[0]=(((r21*x12819))+(((-1.0)*gconst56*r20*x12820))+((r22*x12807)));
evalcond[1]=((((-1.0)*gconst56*r10*x12820))+((r12*x12807))+((r11*x12819)));
evalcond[2]=((1.0)+((r02*x12807))+(((-1.0)*gconst56*r00*x12820))+((r01*x12819)));
evalcond[3]=(((r01*x12814))+((r00*x12812))+((r02*x12821))+(((-1.0)*gconst55*x12808*x12822))+((x12809*x12818)));
evalcond[4]=((((-1.0)*x12814*x12818))+(((-1.0)*r02*sj3*x12820))+((x12812*x12822))+((r00*x12815))+((r01*x12809)));
evalcond[5]=(x12810+((sj3*x12811))+((r12*x12821))+((r11*x12814))+(((-1.0)*cj2*x12813))+((x12809*x12823))+(((-1.0)*gconst55*x12808*x12825)));
evalcond[6]=(((r20*x12815))+(((-1.0)*x12814*x12824))+((r21*x12809))+((r21*x12807*x12812))+(((-1.0)*x12810))+(((-1.0)*r22*sj3*x12820))+((cj1*cj2)));
evalcond[7]=((((-1.0)*x12808*x12826))+((r20*x12812))+((r22*x12821))+((r21*x12814))+((x12809*x12824))+(((-1.0)*x12827)));
evalcond[8]=(((x12812*x12825))+((cj3*x12811))+(((-1.0)*x12814*x12823))+((r11*x12809))+(((-1.0)*r12*sj3*x12820))+(((-1.0)*x12827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12828=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x12828.valid){
continue;
}
CheckValue<IkReal> x12829 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*r10))+((gconst55*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12828.value)))+(x12829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12830=IKcos(j4);
IkReal x12831=IKsin(j4);
IkReal x12832=((1.0)*cj3);
IkReal x12833=(cj3*gconst56);
IkReal x12834=(sj1*sj2);
IkReal x12835=(gconst55*r10);
IkReal x12836=(gconst55*sj3);
IkReal x12837=((1.0)*cj1);
IkReal x12838=(gconst56*sj3);
IkReal x12839=(cj3*gconst55);
IkReal x12840=(sj2*x12837);
IkReal x12841=((1.0)*cj2*sj1);
IkReal x12842=(r00*x12831);
IkReal x12843=(gconst55*x12830);
IkReal x12844=((1.0)*x12830);
IkReal x12845=(cj3*x12830);
IkReal x12846=(r01*x12831);
IkReal x12847=(r10*x12831);
IkReal x12848=(r20*x12831);
IkReal x12849=(r11*x12831);
IkReal x12850=(gconst55*r21*x12831);
IkReal x12851=(x12840+x12841);
evalcond[0]=(((r22*x12831))+(((-1.0)*gconst56*r20*x12844))+((r21*x12843)));
evalcond[1]=((((-1.0)*gconst56*r10*x12844))+((r12*x12831))+((r11*x12843)));
evalcond[2]=((1.0)+((r01*x12843))+(((-1.0)*gconst56*r00*x12844))+((r02*x12831)));
evalcond[3]=((((-1.0)*gconst55*x12832*x12846))+((x12833*x12842))+((r02*x12845))+((r00*x12836))+((r01*x12838)));
evalcond[4]=(((x12836*x12846))+(((-1.0)*r02*sj3*x12844))+((r00*x12839))+((r01*x12833))+(((-1.0)*x12838*x12842)));
evalcond[5]=(x12834+(((-1.0)*gconst55*x12832*x12849))+((x12833*x12847))+((r11*x12838))+((sj3*x12835))+(((-1.0)*cj2*x12837))+((r12*x12845)));
evalcond[6]=(((r21*x12833))+((r21*x12831*x12836))+((r20*x12839))+((cj1*cj2))+(((-1.0)*x12834))+(((-1.0)*r22*sj3*x12844))+(((-1.0)*x12838*x12848)));
evalcond[7]=(((r21*x12838))+((x12833*x12848))+((r22*x12845))+((r20*x12836))+(((-1.0)*x12851))+(((-1.0)*x12832*x12850)));
evalcond[8]=(((cj3*x12835))+((x12836*x12849))+((r11*x12833))+(((-1.0)*x12851))+(((-1.0)*x12838*x12847))+(((-1.0)*r12*sj3*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12852=((-1.0)*r11);
IkReal x12854 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12854)==0){
continue;
}
IkReal x12853=pow(x12854,-0.5);
CheckValue<IkReal> x12855 = IKatan2WithCheck(IkReal(x12852),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12855.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x12855.value))));
IkReal gconst58=(x12852*x12853);
IkReal gconst59=((1.0)*r10*x12853);
CheckValue<IkReal> x12856 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12856.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12856.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12857=((-1.0)*r11);
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal(x12857),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
IkReal x12858=((1.0)*(x12860.value));
IkReal x12859=x12853;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12858)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12858)));
IkReal gconst58=(x12857*x12859);
IkReal gconst59=((1.0)*r10*x12859);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12861=((-1.0)*r11);
CheckValue<IkReal> x12864 = IKatan2WithCheck(IkReal(x12861),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12864.valid){
continue;
}
IkReal x12862=((1.0)*(x12864.value));
IkReal x12863=x12853;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12862)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12862)));
IkReal gconst58=(x12861*x12863);
IkReal gconst59=((1.0)*r10*x12863);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12865=gconst58*gconst58;
IkReal x12866=gconst59*gconst59;
IkReal x12867=(cj3*r00);
IkReal x12868=(gconst59*r20);
IkReal x12869=(cj3*r01);
IkReal x12870=((1.0)*gconst58);
IkReal x12871=(gconst59*r21);
IkReal x12872=((1.0)*r01*sj3);
IkReal x12873=(r20*x12866);
IkReal x12874=(r21*x12865);
IkReal x12875=(r00*sj3*x12870);
CheckValue<IkReal> x12876=IKPowWithIntegerCheck(IKsign((((x12869*x12874))+(((-1.0)*x12868*x12869*x12870))+(((-1.0)*x12867*x12870*x12871))+((cj3*r02*r22))+((x12867*x12873)))),-1);
if(!x12876.valid){
continue;
}
CheckValue<IkReal> x12877 = IKatan2WithCheck(IkReal(((((-1.0)*x12872*x12873))+(((-1.0)*x12868*x12875))+((gconst58*r01*sj3*x12871))+((r00*sj3*x12874)))),IkReal(((((-1.0)*r22*x12875))+(((-1.0)*gconst59*r22*x12872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12876.value)))+(x12877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12878=IKcos(j4);
IkReal x12879=IKsin(j4);
IkReal x12880=((1.0)*r00);
IkReal x12881=(cj3*r10);
IkReal x12882=(sj1*sj2);
IkReal x12883=(cj3*gconst58);
IkReal x12884=((1.0)*r20);
IkReal x12885=((1.0)*cj2);
IkReal x12886=(gconst58*sj3);
IkReal x12887=((1.0)*sj3);
IkReal x12888=(cj3*gconst59);
IkReal x12889=(gconst59*sj3);
IkReal x12890=((1.0)*cj1*sj2);
IkReal x12891=(sj1*x12885);
IkReal x12892=(gconst59*x12879);
IkReal x12893=(gconst59*x12878);
IkReal x12894=(gconst58*x12878);
IkReal x12895=(r22*x12878);
IkReal x12896=(r21*x12879);
IkReal x12897=((1.0)*x12879);
IkReal x12898=(r12*x12878);
IkReal x12899=(r02*x12878);
IkReal x12900=(x12891+x12890);
evalcond[0]=((((-1.0)*x12884*x12893))+((r21*x12894))+((r22*x12879)));
evalcond[1]=(((r12*x12879))+(((-1.0)*r10*x12893))+((r11*x12894)));
evalcond[2]=((1.0)+((r01*x12894))+((r02*x12879))+(((-1.0)*x12880*x12893)));
evalcond[3]=(((r00*x12886))+((r00*x12879*x12888))+((r01*x12889))+(((-1.0)*r01*x12883*x12897))+((cj3*x12899)));
evalcond[4]=(((r00*x12883))+((r01*x12888))+((r01*x12879*x12886))+(((-1.0)*x12887*x12899))+(((-1.0)*x12879*x12880*x12889)));
evalcond[5]=(x12882+(((-1.0)*cj1*x12885))+((r10*x12886))+((r11*x12889))+((x12881*x12892))+((cj3*x12898))+(((-1.0)*r11*x12883*x12897)));
evalcond[6]=(((x12886*x12896))+(((-1.0)*x12882))+((r20*x12883))+(((-1.0)*x12879*x12884*x12889))+((cj1*cj2))+(((-1.0)*x12887*x12895))+((r21*x12888)));
evalcond[7]=(((r20*x12886))+(((-1.0)*x12900))+(((-1.0)*x12883*x12896))+((r20*x12879*x12888))+((r21*x12889))+((cj3*x12895)));
evalcond[8]=(((r11*x12879*x12886))+((gconst58*x12881))+(((-1.0)*x12900))+(((-1.0)*r10*x12887*x12892))+((r11*x12888))+(((-1.0)*x12887*x12898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12901=((1.0)*gconst59);
CheckValue<IkReal> x12902=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r10))+(((-1.0)*r11*x12901)))),-1);
if(!x12902.valid){
continue;
}
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12901))+((gconst58*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12902.value)))+(x12903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12904=IKcos(j4);
IkReal x12905=IKsin(j4);
IkReal x12906=((1.0)*r00);
IkReal x12907=(cj3*r10);
IkReal x12908=(sj1*sj2);
IkReal x12909=(cj3*gconst58);
IkReal x12910=((1.0)*r20);
IkReal x12911=((1.0)*cj2);
IkReal x12912=(gconst58*sj3);
IkReal x12913=((1.0)*sj3);
IkReal x12914=(cj3*gconst59);
IkReal x12915=(gconst59*sj3);
IkReal x12916=((1.0)*cj1*sj2);
IkReal x12917=(sj1*x12911);
IkReal x12918=(gconst59*x12905);
IkReal x12919=(gconst59*x12904);
IkReal x12920=(gconst58*x12904);
IkReal x12921=(r22*x12904);
IkReal x12922=(r21*x12905);
IkReal x12923=((1.0)*x12905);
IkReal x12924=(r12*x12904);
IkReal x12925=(r02*x12904);
IkReal x12926=(x12916+x12917);
evalcond[0]=((((-1.0)*x12910*x12919))+((r21*x12920))+((r22*x12905)));
evalcond[1]=(((r11*x12920))+((r12*x12905))+(((-1.0)*r10*x12919)));
evalcond[2]=((1.0)+(((-1.0)*x12906*x12919))+((r02*x12905))+((r01*x12920)));
evalcond[3]=(((r00*x12912))+((r00*x12905*x12914))+((cj3*x12925))+(((-1.0)*r01*x12909*x12923))+((r01*x12915)));
evalcond[4]=(((r00*x12909))+((r01*x12905*x12912))+(((-1.0)*x12905*x12906*x12915))+(((-1.0)*x12913*x12925))+((r01*x12914)));
evalcond[5]=(x12908+((cj3*x12924))+((x12907*x12918))+((r10*x12912))+((r11*x12915))+(((-1.0)*r11*x12909*x12923))+(((-1.0)*cj1*x12911)));
evalcond[6]=((((-1.0)*x12908))+(((-1.0)*x12905*x12910*x12915))+((r20*x12909))+((r21*x12914))+((cj1*cj2))+(((-1.0)*x12913*x12921))+((x12912*x12922)));
evalcond[7]=(((cj3*x12921))+(((-1.0)*x12909*x12922))+((r20*x12912))+((r21*x12915))+(((-1.0)*x12926))+((r20*x12905*x12914)));
evalcond[8]=(((r11*x12905*x12912))+((gconst58*x12907))+(((-1.0)*r10*x12913*x12918))+((r11*x12914))+(((-1.0)*x12913*x12924))+(((-1.0)*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12927=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x12927.valid){
continue;
}
CheckValue<IkReal> x12928 = IKatan2WithCheck(IkReal((((gconst58*r11))+(((-1.0)*gconst59*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12927.value)))+(x12928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12929=IKcos(j4);
IkReal x12930=IKsin(j4);
IkReal x12931=((1.0)*r00);
IkReal x12932=(cj3*r10);
IkReal x12933=(sj1*sj2);
IkReal x12934=(cj3*gconst58);
IkReal x12935=((1.0)*r20);
IkReal x12936=((1.0)*cj2);
IkReal x12937=(gconst58*sj3);
IkReal x12938=((1.0)*sj3);
IkReal x12939=(cj3*gconst59);
IkReal x12940=(gconst59*sj3);
IkReal x12941=((1.0)*cj1*sj2);
IkReal x12942=(sj1*x12936);
IkReal x12943=(gconst59*x12930);
IkReal x12944=(gconst59*x12929);
IkReal x12945=(gconst58*x12929);
IkReal x12946=(r22*x12929);
IkReal x12947=(r21*x12930);
IkReal x12948=((1.0)*x12930);
IkReal x12949=(r12*x12929);
IkReal x12950=(r02*x12929);
IkReal x12951=(x12941+x12942);
evalcond[0]=(((r21*x12945))+((r22*x12930))+(((-1.0)*x12935*x12944)));
evalcond[1]=(((r12*x12930))+(((-1.0)*r10*x12944))+((r11*x12945)));
evalcond[2]=((1.0)+((r02*x12930))+(((-1.0)*x12931*x12944))+((r01*x12945)));
evalcond[3]=(((cj3*x12950))+((r01*x12940))+((r00*x12930*x12939))+((r00*x12937))+(((-1.0)*r01*x12934*x12948)));
evalcond[4]=((((-1.0)*x12930*x12931*x12940))+((r01*x12930*x12937))+((r01*x12939))+((r00*x12934))+(((-1.0)*x12938*x12950)));
evalcond[5]=(x12933+((cj3*x12949))+(((-1.0)*r11*x12934*x12948))+((r11*x12940))+((r10*x12937))+(((-1.0)*cj1*x12936))+((x12932*x12943)));
evalcond[6]=(((r20*x12934))+((x12937*x12947))+(((-1.0)*x12933))+((cj1*cj2))+(((-1.0)*x12938*x12946))+(((-1.0)*x12930*x12935*x12940))+((r21*x12939)));
evalcond[7]=(((r20*x12937))+((cj3*x12946))+((r20*x12930*x12939))+((r21*x12940))+(((-1.0)*x12951))+(((-1.0)*x12934*x12947)));
evalcond[8]=(((r11*x12930*x12937))+((r11*x12939))+(((-1.0)*r10*x12938*x12943))+(((-1.0)*x12951))+((gconst58*x12932))+(((-1.0)*x12938*x12949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12953 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12953)==0){
continue;
}
IkReal x12952=pow(x12953,-0.5);
CheckValue<IkReal> x12954 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12954.valid){
continue;
}
IkReal gconst60=((-1.0)*(x12954.value));
IkReal gconst61=((-1.0)*r21*x12952);
IkReal gconst62=(r20*x12952);
CheckValue<IkReal> x12955 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12955.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12955.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
IkReal x12956=((-1.0)*(x12958.value));
IkReal x12957=x12952;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12956;
IkReal gconst60=x12956;
IkReal gconst61=((-1.0)*r21*x12957);
IkReal gconst62=(r20*x12957);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12961 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12961.valid){
continue;
}
IkReal x12959=((-1.0)*(x12961.value));
IkReal x12960=x12952;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12959;
IkReal gconst60=x12959;
IkReal gconst61=((-1.0)*r21*x12960);
IkReal gconst62=(r20*x12960);
CheckValue<IkReal> x12969=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12969.valid){
continue;
}
IkReal x12962=x12969.value;
IkReal x12963=(cj3*x12962);
IkReal x12964=(r11*x12963);
IkReal x12965=(r01*x12963);
IkReal x12966=(r00*x12963);
IkReal x12967=(r10*x12963);
IkReal x12968=(r20*r21*x12963);
j4eval[0]=IKsign((((r10*x12966*(r20*r20)))+((cj3*r02*r12))+((r00*r20*r21*x12964))+((r10*r20*r21*x12965))+((r01*x12964*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12970=gconst62*gconst62;
IkReal x12971=gconst61*gconst61;
IkReal x12972=((1.0)*sj3);
IkReal x12973=(r01*r11);
IkReal x12974=(gconst62*r01);
IkReal x12975=(gconst61*r10);
IkReal x12976=((1.0)*cj3);
IkReal x12977=(gconst61*gconst62);
IkReal x12978=(r00*r11);
IkReal x12979=(r10*x12970);
CheckValue<IkReal> x12980 = IKatan2WithCheck(IkReal((((cj3*x12973*x12977))+((cj3*x12971*x12978))+(((-1.0)*r01*x12976*x12979))+(((-1.0)*gconst62*r00*x12975*x12976)))),IkReal(((((-1.0)*r12*x12974*x12976))+(((-1.0)*gconst61*r00*r12*x12976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12980.valid){
continue;
}
CheckValue<IkReal> x12981=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12971*x12972*x12973))+(((-1.0)*r02*r12*x12972))+((sj3*x12974*x12975))+((sj3*x12977*x12978))+(((-1.0)*r00*x12972*x12979)))),-1);
if(!x12981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12980.value)+(((1.5707963267949)*(x12981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12982=IKcos(j4);
IkReal x12983=IKsin(j4);
IkReal x12984=(gconst62*r00);
IkReal x12985=(cj3*r20);
IkReal x12986=(gconst61*sj3);
IkReal x12987=(cj3*gconst62);
IkReal x12988=(sj1*sj2);
IkReal x12989=(cj1*cj2);
IkReal x12990=((1.0)*sj3);
IkReal x12991=(cj3*gconst61);
IkReal x12992=(gconst62*sj3);
IkReal x12993=((1.0)*cj1*sj2);
IkReal x12994=((1.0)*cj2*sj1);
IkReal x12995=((1.0)*x12982);
IkReal x12996=(gconst62*x12983);
IkReal x12997=(r21*x12983);
IkReal x12998=(cj3*x12982);
IkReal x12999=(gconst61*x12982);
IkReal x13000=((1.0)*x12983);
IkReal x13001=(x12993+x12994);
evalcond[0]=(((r22*x12983))+(((-1.0)*gconst62*r20*x12995))+((r21*x12999)));
evalcond[1]=((((-1.0)*gconst62*r10*x12995))+((r11*x12999))+((r12*x12983)));
evalcond[2]=((1.0)+((r01*x12999))+(((-1.0)*x12984*x12995))+((r02*x12983)));
evalcond[3]=(((r01*x12992))+((r00*x12986))+(((-1.0)*r01*x12991*x13000))+((cj3*x12983*x12984))+((r02*x12998)));
evalcond[4]=((((-1.0)*x12983*x12984*x12990))+(((-1.0)*r02*x12982*x12990))+((r01*x12987))+((r00*x12991))+((r01*x12983*x12986)));
evalcond[5]=(x12988+((r10*x12986))+((r11*x12992))+((r12*x12998))+(((-1.0)*x12989))+(((-1.0)*r11*x12991*x13000))+((r10*x12983*x12987)));
evalcond[6]=(x12989+((gconst61*x12985))+(((-1.0)*r22*x12982*x12990))+((r21*x12987))+(((-1.0)*x12988))+(((-1.0)*r20*x12990*x12996))+((x12986*x12997)));
evalcond[7]=((((-1.0)*x12991*x12997))+((r22*x12998))+(((-1.0)*x13001))+((r21*x12992))+((x12985*x12996))+((r20*x12986)));
evalcond[8]=((((-1.0)*r10*x12990*x12996))+((r10*x12991))+((r11*x12983*x12986))+(((-1.0)*x13001))+((r11*x12987))+(((-1.0)*r12*x12982*x12990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13002=gconst61*gconst61;
IkReal x13003=gconst62*gconst62;
IkReal x13004=(gconst62*r11);
IkReal x13005=(r12*sj3);
IkReal x13006=((1.0)*r01);
IkReal x13007=(r10*sj3);
IkReal x13008=(cj3*r10);
IkReal x13009=((1.0)*gconst61*r00);
IkReal x13010=(r11*x13002);
CheckValue<IkReal> x13011=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13004*x13009))+((cj3*r01*x13010))+((cj3*r02*r12))+((r00*x13003*x13008))+(((-1.0)*gconst61*gconst62*x13006*x13008)))),-1);
if(!x13011.valid){
continue;
}
CheckValue<IkReal> x13012 = IKatan2WithCheck(IkReal((((r00*sj3*x13010))+(((-1.0)*gconst62*x13007*x13009))+(((-1.0)*x13003*x13006*x13007))+((gconst61*r01*sj3*x13004)))),IkReal(((((-1.0)*x13005*x13009))+(((-1.0)*gconst62*x13005*x13006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13011.value)))+(x13012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13013=IKcos(j4);
IkReal x13014=IKsin(j4);
IkReal x13015=(gconst62*r00);
IkReal x13016=(cj3*r20);
IkReal x13017=(gconst61*sj3);
IkReal x13018=(cj3*gconst62);
IkReal x13019=(sj1*sj2);
IkReal x13020=(cj1*cj2);
IkReal x13021=((1.0)*sj3);
IkReal x13022=(cj3*gconst61);
IkReal x13023=(gconst62*sj3);
IkReal x13024=((1.0)*cj1*sj2);
IkReal x13025=((1.0)*cj2*sj1);
IkReal x13026=((1.0)*x13013);
IkReal x13027=(gconst62*x13014);
IkReal x13028=(r21*x13014);
IkReal x13029=(cj3*x13013);
IkReal x13030=(gconst61*x13013);
IkReal x13031=((1.0)*x13014);
IkReal x13032=(x13025+x13024);
evalcond[0]=((((-1.0)*gconst62*r20*x13026))+((r22*x13014))+((r21*x13030)));
evalcond[1]=(((r11*x13030))+(((-1.0)*gconst62*r10*x13026))+((r12*x13014)));
evalcond[2]=((1.0)+((r02*x13014))+(((-1.0)*x13015*x13026))+((r01*x13030)));
evalcond[3]=(((cj3*x13014*x13015))+((r01*x13023))+((r00*x13017))+(((-1.0)*r01*x13022*x13031))+((r02*x13029)));
evalcond[4]=(((r01*x13018))+((r00*x13022))+((r01*x13014*x13017))+(((-1.0)*x13014*x13015*x13021))+(((-1.0)*r02*x13013*x13021)));
evalcond[5]=(((r10*x13014*x13018))+(((-1.0)*x13020))+(((-1.0)*r11*x13022*x13031))+((r11*x13023))+x13019+((r12*x13029))+((r10*x13017)));
evalcond[6]=((((-1.0)*r22*x13013*x13021))+((r21*x13018))+((gconst61*x13016))+(((-1.0)*x13019))+(((-1.0)*r20*x13021*x13027))+x13020+((x13017*x13028)));
evalcond[7]=(((x13016*x13027))+((r21*x13023))+((r20*x13017))+((r22*x13029))+(((-1.0)*x13032))+(((-1.0)*x13022*x13028)));
evalcond[8]=(((r11*x13014*x13017))+((r11*x13018))+(((-1.0)*r12*x13013*x13021))+(((-1.0)*x13032))+(((-1.0)*r10*x13021*x13027))+((r10*x13022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13033=((1.0)*gconst62);
CheckValue<IkReal> x13034 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13033))+((gconst61*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13034.valid){
continue;
}
CheckValue<IkReal> x13035=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r10))+(((-1.0)*r11*x13033)))),-1);
if(!x13035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13034.value)+(((1.5707963267949)*(x13035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13036=IKcos(j4);
IkReal x13037=IKsin(j4);
IkReal x13038=(gconst62*r00);
IkReal x13039=(cj3*r20);
IkReal x13040=(gconst61*sj3);
IkReal x13041=(cj3*gconst62);
IkReal x13042=(sj1*sj2);
IkReal x13043=(cj1*cj2);
IkReal x13044=((1.0)*sj3);
IkReal x13045=(cj3*gconst61);
IkReal x13046=(gconst62*sj3);
IkReal x13047=((1.0)*cj1*sj2);
IkReal x13048=((1.0)*cj2*sj1);
IkReal x13049=((1.0)*x13036);
IkReal x13050=(gconst62*x13037);
IkReal x13051=(r21*x13037);
IkReal x13052=(cj3*x13036);
IkReal x13053=(gconst61*x13036);
IkReal x13054=((1.0)*x13037);
IkReal x13055=(x13048+x13047);
evalcond[0]=(((r22*x13037))+((r21*x13053))+(((-1.0)*gconst62*r20*x13049)));
evalcond[1]=(((r12*x13037))+(((-1.0)*gconst62*r10*x13049))+((r11*x13053)));
evalcond[2]=((1.0)+(((-1.0)*x13038*x13049))+((r02*x13037))+((r01*x13053)));
evalcond[3]=(((cj3*x13037*x13038))+((r02*x13052))+((r01*x13046))+((r00*x13040))+(((-1.0)*r01*x13045*x13054)));
evalcond[4]=((((-1.0)*x13037*x13038*x13044))+((r01*x13041))+(((-1.0)*r02*x13036*x13044))+((r00*x13045))+((r01*x13037*x13040)));
evalcond[5]=(((r12*x13052))+((r11*x13046))+(((-1.0)*x13043))+((r10*x13037*x13041))+(((-1.0)*r11*x13045*x13054))+((r10*x13040))+x13042);
evalcond[6]=((((-1.0)*x13042))+((r21*x13041))+(((-1.0)*r20*x13044*x13050))+((x13040*x13051))+((gconst61*x13039))+x13043+(((-1.0)*r22*x13036*x13044)));
evalcond[7]=(((r20*x13040))+((r21*x13046))+((r22*x13052))+((x13039*x13050))+(((-1.0)*x13045*x13051))+(((-1.0)*x13055)));
evalcond[8]=(((r11*x13041))+((r10*x13045))+(((-1.0)*r10*x13044*x13050))+((r11*x13037*x13040))+(((-1.0)*x13055))+(((-1.0)*r12*x13036*x13044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13057 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13057)==0){
continue;
}
IkReal x13056=pow(x13057,-0.5);
CheckValue<IkReal> x13058 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13058.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x13058.value))));
IkReal gconst64=((1.0)*r21*x13056);
IkReal gconst65=((-1.0)*r20*x13056);
CheckValue<IkReal> x13059 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13059.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13059.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13062 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13062.valid){
continue;
}
IkReal x13060=((1.0)*(x13062.value));
IkReal x13061=x13056;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13060)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13060)));
IkReal gconst64=((1.0)*r21*x13061);
IkReal gconst65=((-1.0)*r20*x13061);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
IkReal x13063=((1.0)*(x13065.value));
IkReal x13064=x13056;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13063)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13063)));
IkReal gconst64=((1.0)*r21*x13064);
IkReal gconst65=((-1.0)*r20*x13064);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
IkReal x13066=((1.0)*(x13068.value));
IkReal x13067=x13056;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13066)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13066)));
IkReal gconst64=((1.0)*r21*x13067);
IkReal gconst65=((-1.0)*r20*x13067);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13069=gconst64*gconst64;
IkReal x13070=gconst65*gconst65;
IkReal x13071=((1.0)*gconst64);
IkReal x13072=(gconst65*r01);
IkReal x13073=(cj3*r20);
IkReal x13074=(r22*sj3);
IkReal x13075=(r21*sj3);
IkReal x13076=(gconst65*r00);
IkReal x13077=(cj3*r21);
IkReal x13078=(r20*sj3);
CheckValue<IkReal> x13079=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13071*x13076*x13077))+((r00*x13070*x13073))+(((-1.0)*x13071*x13072*x13073))+((r01*x13069*x13077))+((cj3*r02*r22)))),-1);
if(!x13079.valid){
continue;
}
CheckValue<IkReal> x13080 = IKatan2WithCheck(IkReal(((((-1.0)*x13071*x13076*x13078))+(((-1.0)*r01*x13070*x13078))+((gconst64*x13072*x13075))+((r00*x13069*x13075)))),IkReal(((((-1.0)*x13072*x13074))+(((-1.0)*r00*x13071*x13074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13079.value)))+(x13080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13081=IKcos(j4);
IkReal x13082=IKsin(j4);
IkReal x13083=(cj3*r00);
IkReal x13084=(gconst64*sj3);
IkReal x13085=(cj3*gconst64);
IkReal x13086=((1.0)*sj3);
IkReal x13087=(sj1*sj2);
IkReal x13088=(gconst65*r11);
IkReal x13089=((1.0)*cj2);
IkReal x13090=(gconst65*r21);
IkReal x13091=(gconst65*r01);
IkReal x13092=((1.0)*cj1*sj2);
IkReal x13093=(sj1*x13089);
IkReal x13094=(gconst65*x13082);
IkReal x13095=(r01*x13082);
IkReal x13096=(r12*x13081);
IkReal x13097=(r22*x13081);
IkReal x13098=((1.0)*x13082);
IkReal x13099=(gconst64*x13081);
IkReal x13100=(r02*x13081);
IkReal x13101=((1.0)*gconst65*x13081);
IkReal x13102=(x13092+x13093);
evalcond[0]=(((r22*x13082))+(((-1.0)*r20*x13101))+((r21*x13099)));
evalcond[1]=(((r11*x13099))+((r12*x13082))+(((-1.0)*r10*x13101)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13101))+((r02*x13082))+((r01*x13099)));
evalcond[3]=(((cj3*x13100))+((sj3*x13091))+((r00*x13084))+(((-1.0)*x13085*x13095))+((x13083*x13094)));
evalcond[4]=(((cj3*x13091))+((gconst64*x13083))+(((-1.0)*x13086*x13100))+((x13084*x13095))+(((-1.0)*r00*x13086*x13094)));
evalcond[5]=((((-1.0)*cj1*x13089))+((cj3*x13096))+((cj3*r10*x13094))+((sj3*x13088))+(((-1.0)*r11*x13085*x13098))+x13087+((r10*x13084)));
evalcond[6]=(((r20*x13085))+((cj3*x13090))+(((-1.0)*x13086*x13097))+((r21*x13082*x13084))+((cj1*cj2))+(((-1.0)*x13087))+(((-1.0)*r20*x13086*x13094)));
evalcond[7]=(((r20*x13084))+((cj3*x13097))+(((-1.0)*r21*x13085*x13098))+((cj3*r20*x13094))+((sj3*x13090))+(((-1.0)*x13102)));
evalcond[8]=((((-1.0)*r10*x13086*x13094))+((cj3*x13088))+(((-1.0)*x13086*x13096))+(((-1.0)*x13102))+((r11*x13082*x13084))+((r10*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13103=((1.0)*gconst65);
CheckValue<IkReal> x13104 = IKatan2WithCheck(IkReal((((gconst64*r21))+(((-1.0)*r20*x13103)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13104.valid){
continue;
}
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13103))+(((-1.0)*gconst64*r10)))),-1);
if(!x13105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13104.value)+(((1.5707963267949)*(x13105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13106=IKcos(j4);
IkReal x13107=IKsin(j4);
IkReal x13108=(cj3*r00);
IkReal x13109=(gconst64*sj3);
IkReal x13110=(cj3*gconst64);
IkReal x13111=((1.0)*sj3);
IkReal x13112=(sj1*sj2);
IkReal x13113=(gconst65*r11);
IkReal x13114=((1.0)*cj2);
IkReal x13115=(gconst65*r21);
IkReal x13116=(gconst65*r01);
IkReal x13117=((1.0)*cj1*sj2);
IkReal x13118=(sj1*x13114);
IkReal x13119=(gconst65*x13107);
IkReal x13120=(r01*x13107);
IkReal x13121=(r12*x13106);
IkReal x13122=(r22*x13106);
IkReal x13123=((1.0)*x13107);
IkReal x13124=(gconst64*x13106);
IkReal x13125=(r02*x13106);
IkReal x13126=((1.0)*gconst65*x13106);
IkReal x13127=(x13117+x13118);
evalcond[0]=((((-1.0)*r20*x13126))+((r22*x13107))+((r21*x13124)));
evalcond[1]=(((r11*x13124))+(((-1.0)*r10*x13126))+((r12*x13107)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13126))+((r01*x13124))+((r02*x13107)));
evalcond[3]=(((r00*x13109))+((cj3*x13125))+((x13108*x13119))+((sj3*x13116))+(((-1.0)*x13110*x13120)));
evalcond[4]=((((-1.0)*r00*x13111*x13119))+(((-1.0)*x13111*x13125))+((gconst64*x13108))+((cj3*x13116))+((x13109*x13120)));
evalcond[5]=(((cj3*x13121))+((cj3*r10*x13119))+x13112+(((-1.0)*cj1*x13114))+((r10*x13109))+((sj3*x13113))+(((-1.0)*r11*x13110*x13123)));
evalcond[6]=((((-1.0)*x13112))+(((-1.0)*x13111*x13122))+((cj3*x13115))+(((-1.0)*r20*x13111*x13119))+((cj1*cj2))+((r20*x13110))+((r21*x13107*x13109)));
evalcond[7]=(((cj3*x13122))+((r20*x13109))+(((-1.0)*r21*x13110*x13123))+(((-1.0)*x13127))+((sj3*x13115))+((cj3*r20*x13119)));
evalcond[8]=((((-1.0)*r10*x13111*x13119))+((r11*x13107*x13109))+(((-1.0)*x13111*x13121))+((cj3*x13113))+(((-1.0)*x13127))+((r10*x13110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13128 = IKatan2WithCheck(IkReal((((gconst64*r11))+(((-1.0)*gconst65*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x13129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13128.value)+(((1.5707963267949)*(x13129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13130=IKcos(j4);
IkReal x13131=IKsin(j4);
IkReal x13132=(cj3*r00);
IkReal x13133=(gconst64*sj3);
IkReal x13134=(cj3*gconst64);
IkReal x13135=((1.0)*sj3);
IkReal x13136=(sj1*sj2);
IkReal x13137=(gconst65*r11);
IkReal x13138=((1.0)*cj2);
IkReal x13139=(gconst65*r21);
IkReal x13140=(gconst65*r01);
IkReal x13141=((1.0)*cj1*sj2);
IkReal x13142=(sj1*x13138);
IkReal x13143=(gconst65*x13131);
IkReal x13144=(r01*x13131);
IkReal x13145=(r12*x13130);
IkReal x13146=(r22*x13130);
IkReal x13147=((1.0)*x13131);
IkReal x13148=(gconst64*x13130);
IkReal x13149=(r02*x13130);
IkReal x13150=((1.0)*gconst65*x13130);
IkReal x13151=(x13142+x13141);
evalcond[0]=((((-1.0)*r20*x13150))+((r21*x13148))+((r22*x13131)));
evalcond[1]=(((r12*x13131))+((r11*x13148))+(((-1.0)*r10*x13150)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13150))+((r02*x13131))+((r01*x13148)));
evalcond[3]=(((x13132*x13143))+(((-1.0)*x13134*x13144))+((r00*x13133))+((cj3*x13149))+((sj3*x13140)));
evalcond[4]=(((x13133*x13144))+(((-1.0)*r00*x13135*x13143))+((cj3*x13140))+((gconst64*x13132))+(((-1.0)*x13135*x13149)));
evalcond[5]=(((r10*x13133))+(((-1.0)*r11*x13134*x13147))+(((-1.0)*cj1*x13138))+((cj3*x13145))+((cj3*r10*x13143))+((sj3*x13137))+x13136);
evalcond[6]=(((r21*x13131*x13133))+((r20*x13134))+((cj3*x13139))+(((-1.0)*x13135*x13146))+((cj1*cj2))+(((-1.0)*r20*x13135*x13143))+(((-1.0)*x13136)));
evalcond[7]=(((r20*x13133))+(((-1.0)*x13151))+((cj3*x13146))+(((-1.0)*r21*x13134*x13147))+((sj3*x13139))+((cj3*r20*x13143)));
evalcond[8]=(((r10*x13134))+((cj3*x13137))+(((-1.0)*x13151))+(((-1.0)*r10*x13135*x13143))+(((-1.0)*x13135*x13145))+((r11*x13131*x13133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13152=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13152);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13152);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13153=(r01*sj5);
IkReal x13154=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*sj3*x13154))+((sj3*x13153)));
j4eval[1]=((((-1.0)*x13154))+x13153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13155=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13155);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13155);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13156=(cj5*r00);
IkReal x13157=(r01*sj5);
j4eval[0]=((((-1.0)*cj3*x13157))+((cj3*x13156)));
j4eval[1]=(x13157+(((-1.0)*x13156)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13158=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13159=((1.0)*cj3);
CheckValue<IkReal> x13160=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x13160.valid){
continue;
}
CheckValue<IkReal> x13161=IKPowWithIntegerCheck(r22,-1);
if(!x13161.valid){
continue;
}
CheckValue<IkReal> x13162=IKPowWithIntegerCheck(sj3,-1);
if(!x13162.valid){
continue;
}
if( IKabs(((x13160.value)*(((((-1.0)*cj5*r01*x13159))+(((-1.0)*r00*sj5*x13159)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13161.value)*(x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13160.value)*(((((-1.0)*cj5*r01*x13159))+(((-1.0)*r00*sj5*x13159))))))+IKsqr(((x13161.value)*(x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13160.value)*(((((-1.0)*cj5*r01*x13159))+(((-1.0)*r00*sj5*x13159))))), ((x13161.value)*(x13162.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13163=IKcos(j4);
IkReal x13164=IKsin(j4);
IkReal x13165=((1.0)*cj5);
IkReal x13166=(sj1*sj2);
IkReal x13167=(cj5*r01);
IkReal x13168=(cj3*sj5);
IkReal x13169=(cj3*cj5);
IkReal x13170=((1.0)*cj2);
IkReal x13171=(sj3*sj5);
IkReal x13172=(r01*sj5);
IkReal x13173=(r11*sj5);
IkReal x13174=((1.0)*cj1*sj2);
IkReal x13175=(sj1*x13170);
IkReal x13176=(sj3*x13164);
IkReal x13177=(r22*x13163);
IkReal x13178=((1.0)*x13164);
IkReal x13179=(x13175+x13174);
evalcond[0]=(r22*x13164);
evalcond[1]=((((-1.0)*r10*x13163*x13165))+((x13163*x13173)));
evalcond[2]=((1.0)+((x13163*x13172))+(((-1.0)*r00*x13163*x13165)));
evalcond[3]=((((-1.0)*sj3*x13177))+(((-1.0)*x13166))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x13179))+((cj3*x13177)));
evalcond[5]=(((r00*x13168))+((cj3*x13167))+((r01*x13164*x13171))+(((-1.0)*r00*x13165*x13176)));
evalcond[6]=(((sj3*x13167))+((r00*x13171))+((r00*x13164*x13169))+(((-1.0)*r01*x13168*x13178)));
evalcond[7]=((((-1.0)*cj1*x13170))+((cj5*r11*sj3))+(((-1.0)*r11*x13168*x13178))+x13166+((r10*x13171))+((r10*x13164*x13169)));
evalcond[8]=(((r11*x13164*x13171))+(((-1.0)*x13179))+(((-1.0)*r10*x13165*x13176))+((r11*x13169))+((r10*x13168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13180=(cj5*r00);
IkReal x13181=(r01*sj5);
IkReal x13182=((1.0)*sj3);
CheckValue<IkReal> x13183=IKPowWithIntegerCheck((((cj3*x13180))+(((-1.0)*cj3*x13181))),-1);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184=IKPowWithIntegerCheck(((((-1.0)*x13180))+x13181),-1);
if(!x13184.valid){
continue;
}
if( IKabs(((x13183.value)*(((((-1.0)*r00*sj5*x13182))+(((-1.0)*cj5*r01*x13182)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13184.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13183.value)*(((((-1.0)*r00*sj5*x13182))+(((-1.0)*cj5*r01*x13182))))))+IKsqr(((-1.0)*(x13184.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13183.value)*(((((-1.0)*r00*sj5*x13182))+(((-1.0)*cj5*r01*x13182))))), ((-1.0)*(x13184.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13185=IKcos(j4);
IkReal x13186=IKsin(j4);
IkReal x13187=((1.0)*cj5);
IkReal x13188=(sj1*sj2);
IkReal x13189=(cj5*r01);
IkReal x13190=(cj3*sj5);
IkReal x13191=(cj3*cj5);
IkReal x13192=((1.0)*cj2);
IkReal x13193=(sj3*sj5);
IkReal x13194=(r01*sj5);
IkReal x13195=(r11*sj5);
IkReal x13196=((1.0)*cj1*sj2);
IkReal x13197=(sj1*x13192);
IkReal x13198=(sj3*x13186);
IkReal x13199=(r22*x13185);
IkReal x13200=((1.0)*x13186);
IkReal x13201=(x13197+x13196);
evalcond[0]=(r22*x13186);
evalcond[1]=(((x13185*x13195))+(((-1.0)*r10*x13185*x13187)));
evalcond[2]=((1.0)+((x13185*x13194))+(((-1.0)*r00*x13185*x13187)));
evalcond[3]=((((-1.0)*x13188))+((cj1*cj2))+(((-1.0)*sj3*x13199)));
evalcond[4]=((((-1.0)*x13201))+((cj3*x13199)));
evalcond[5]=(((cj3*x13189))+((r01*x13186*x13193))+((r00*x13190))+(((-1.0)*r00*x13187*x13198)));
evalcond[6]=(((r00*x13193))+((sj3*x13189))+((r00*x13186*x13191))+(((-1.0)*r01*x13190*x13200)));
evalcond[7]=((((-1.0)*r11*x13190*x13200))+((cj5*r11*sj3))+((r10*x13193))+(((-1.0)*cj1*x13192))+((r10*x13186*x13191))+x13188);
evalcond[8]=((((-1.0)*r10*x13187*x13198))+((r11*x13191))+((r10*x13190))+((r11*x13186*x13193))+(((-1.0)*x13201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13202=((1.0)*cj3);
IkReal x13203=(r01*sj5);
IkReal x13204=((1.0)*cj5*r00);
CheckValue<IkReal> x13205=IKPowWithIntegerCheck(((((-1.0)*sj3*x13204))+((sj3*x13203))),-1);
if(!x13205.valid){
continue;
}
CheckValue<IkReal> x13206=IKPowWithIntegerCheck(((((-1.0)*x13204))+x13203),-1);
if(!x13206.valid){
continue;
}
if( IKabs(((x13205.value)*(((((-1.0)*r00*sj5*x13202))+(((-1.0)*cj5*r01*x13202)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13206.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13205.value)*(((((-1.0)*r00*sj5*x13202))+(((-1.0)*cj5*r01*x13202))))))+IKsqr(((-1.0)*(x13206.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13205.value)*(((((-1.0)*r00*sj5*x13202))+(((-1.0)*cj5*r01*x13202))))), ((-1.0)*(x13206.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13207=IKcos(j4);
IkReal x13208=IKsin(j4);
IkReal x13209=((1.0)*cj5);
IkReal x13210=(sj1*sj2);
IkReal x13211=(cj5*r01);
IkReal x13212=(cj3*sj5);
IkReal x13213=(cj3*cj5);
IkReal x13214=((1.0)*cj2);
IkReal x13215=(sj3*sj5);
IkReal x13216=(r01*sj5);
IkReal x13217=(r11*sj5);
IkReal x13218=((1.0)*cj1*sj2);
IkReal x13219=(sj1*x13214);
IkReal x13220=(sj3*x13208);
IkReal x13221=(r22*x13207);
IkReal x13222=((1.0)*x13208);
IkReal x13223=(x13218+x13219);
evalcond[0]=(r22*x13208);
evalcond[1]=((((-1.0)*r10*x13207*x13209))+((x13207*x13217)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13207*x13209))+((x13207*x13216)));
evalcond[3]=((((-1.0)*x13210))+(((-1.0)*sj3*x13221))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x13223))+((cj3*x13221)));
evalcond[5]=(((r00*x13212))+(((-1.0)*r00*x13209*x13220))+((cj3*x13211))+((r01*x13208*x13215)));
evalcond[6]=(((r00*x13208*x13213))+((r00*x13215))+(((-1.0)*r01*x13212*x13222))+((sj3*x13211)));
evalcond[7]=((((-1.0)*cj1*x13214))+((cj5*r11*sj3))+((r10*x13215))+x13210+((r10*x13208*x13213))+(((-1.0)*r11*x13212*x13222)));
evalcond[8]=(((r11*x13213))+((r10*x13212))+(((-1.0)*r10*x13209*x13220))+(((-1.0)*x13223))+((r11*x13208*x13215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13224=cj5*cj5;
IkReal x13225=((1.0)*r00);
IkReal x13226=(r01*sj3);
IkReal x13227=(sj3*sj5);
IkReal x13228=(r21*sj3);
IkReal x13229=((1.0)*cj5);
IkReal x13230=(cj5*r21*sj5);
IkReal x13231=(cj3*r01*r21);
IkReal x13232=(r20*x13224);
CheckValue<IkReal> x13233 = IKatan2WithCheck(IkReal(((((-1.0)*x13224*x13225*x13228))+((x13226*x13230))+(((-1.0)*x13226*x13232))+((r00*x13228))+(((-1.0)*cj5*r20*x13225*x13227)))),IkReal(((((-1.0)*r22*x13226*x13229))+(((-1.0)*r22*x13225*x13227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13233.valid){
continue;
}
CheckValue<IkReal> x13234=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x13225*x13230))+(((-1.0)*cj3*r01*r20*sj5*x13229))+(((-1.0)*x13224*x13231))+((cj3*r02*r22))+((cj3*r00*x13232))+x13231)),-1);
if(!x13234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13233.value)+(((1.5707963267949)*(x13234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13235=IKcos(j4);
IkReal x13236=IKsin(j4);
IkReal x13237=(cj5*r00);
IkReal x13238=(sj1*sj2);
IkReal x13239=(cj5*r01);
IkReal x13240=((1.0)*cj1);
IkReal x13241=(cj3*sj5);
IkReal x13242=(cj5*sj3);
IkReal x13243=(sj3*sj5);
IkReal x13244=(cj3*cj5);
IkReal x13245=(cj5*r10);
IkReal x13246=(cj5*r20);
IkReal x13247=(sj2*x13240);
IkReal x13248=((1.0)*cj2*sj1);
IkReal x13249=((1.0)*x13235);
IkReal x13250=(sj5*x13235);
IkReal x13251=(cj3*x13236);
IkReal x13252=(cj3*x13235);
IkReal x13253=((1.0)*x13236);
IkReal x13254=(x13247+x13248);
evalcond[0]=(((r21*x13250))+((r22*x13236))+(((-1.0)*x13246*x13249)));
evalcond[1]=(((r11*x13250))+((r12*x13236))+(((-1.0)*x13245*x13249)));
evalcond[2]=((1.0)+(((-1.0)*x13237*x13249))+((r02*x13236))+((r01*x13250)));
evalcond[3]=((((-1.0)*r01*x13241*x13253))+((sj3*x13239))+((x13237*x13251))+((r02*x13252))+((r00*x13243)));
evalcond[4]=((((-1.0)*r02*sj3*x13249))+((r01*x13236*x13243))+((r00*x13241))+((cj3*x13239))+(((-1.0)*sj3*x13237*x13253)));
evalcond[5]=(((r10*x13243))+((r10*x13236*x13244))+(((-1.0)*r11*x13241*x13253))+((r12*x13252))+((r11*x13242))+(((-1.0)*cj2*x13240))+x13238);
evalcond[6]=(((r21*x13244))+(((-1.0)*r22*sj3*x13249))+((r21*x13236*x13243))+((cj1*cj2))+(((-1.0)*x13238))+((r20*x13241))+(((-1.0)*r20*x13242*x13253)));
evalcond[7]=(((r21*x13242))+((r22*x13252))+((r20*x13236*x13244))+(((-1.0)*x13254))+(((-1.0)*r21*x13241*x13253))+((r20*x13243)));
evalcond[8]=(((r10*x13241))+(((-1.0)*r10*x13242*x13253))+(((-1.0)*r12*sj3*x13249))+((r11*x13244))+((r11*x13236*x13243))+(((-1.0)*x13254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13255=((1.0)*cj5);
CheckValue<IkReal> x13256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13255)))),-1);
if(!x13256.valid){
continue;
}
CheckValue<IkReal> x13257 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13255)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13256.value)))+(x13257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13258=IKcos(j4);
IkReal x13259=IKsin(j4);
IkReal x13260=(cj5*r00);
IkReal x13261=(sj1*sj2);
IkReal x13262=(cj5*r01);
IkReal x13263=((1.0)*cj1);
IkReal x13264=(cj3*sj5);
IkReal x13265=(cj5*sj3);
IkReal x13266=(sj3*sj5);
IkReal x13267=(cj3*cj5);
IkReal x13268=(cj5*r10);
IkReal x13269=(cj5*r20);
IkReal x13270=(sj2*x13263);
IkReal x13271=((1.0)*cj2*sj1);
IkReal x13272=((1.0)*x13258);
IkReal x13273=(sj5*x13258);
IkReal x13274=(cj3*x13259);
IkReal x13275=(cj3*x13258);
IkReal x13276=((1.0)*x13259);
IkReal x13277=(x13270+x13271);
evalcond[0]=((((-1.0)*x13269*x13272))+((r21*x13273))+((r22*x13259)));
evalcond[1]=((((-1.0)*x13268*x13272))+((r11*x13273))+((r12*x13259)));
evalcond[2]=((1.0)+((r02*x13259))+((r01*x13273))+(((-1.0)*x13260*x13272)));
evalcond[3]=(((x13260*x13274))+((r00*x13266))+((sj3*x13262))+((r02*x13275))+(((-1.0)*r01*x13264*x13276)));
evalcond[4]=(((r00*x13264))+((cj3*x13262))+(((-1.0)*r02*sj3*x13272))+(((-1.0)*sj3*x13260*x13276))+((r01*x13259*x13266)));
evalcond[5]=(((r11*x13265))+((r12*x13275))+((r10*x13259*x13267))+((r10*x13266))+(((-1.0)*cj2*x13263))+(((-1.0)*r11*x13264*x13276))+x13261);
evalcond[6]=(((r21*x13267))+(((-1.0)*x13261))+((r20*x13264))+(((-1.0)*r22*sj3*x13272))+((r21*x13259*x13266))+(((-1.0)*r20*x13265*x13276))+((cj1*cj2)));
evalcond[7]=(((r20*x13259*x13267))+(((-1.0)*r21*x13264*x13276))+(((-1.0)*x13277))+((r21*x13265))+((r20*x13266))+((r22*x13275)));
evalcond[8]=(((r11*x13267))+(((-1.0)*x13277))+((r11*x13259*x13266))+((r10*x13264))+(((-1.0)*r10*x13265*x13276))+(((-1.0)*r12*sj3*x13272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13278=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13278.valid){
continue;
}
CheckValue<IkReal> x13279 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13278.value)))+(x13279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13280=IKcos(j4);
IkReal x13281=IKsin(j4);
IkReal x13282=(cj5*r00);
IkReal x13283=(sj1*sj2);
IkReal x13284=(cj5*r01);
IkReal x13285=((1.0)*cj1);
IkReal x13286=(cj3*sj5);
IkReal x13287=(cj5*sj3);
IkReal x13288=(sj3*sj5);
IkReal x13289=(cj3*cj5);
IkReal x13290=(cj5*r10);
IkReal x13291=(cj5*r20);
IkReal x13292=(sj2*x13285);
IkReal x13293=((1.0)*cj2*sj1);
IkReal x13294=((1.0)*x13280);
IkReal x13295=(sj5*x13280);
IkReal x13296=(cj3*x13281);
IkReal x13297=(cj3*x13280);
IkReal x13298=((1.0)*x13281);
IkReal x13299=(x13292+x13293);
evalcond[0]=((((-1.0)*x13291*x13294))+((r22*x13281))+((r21*x13295)));
evalcond[1]=(((r11*x13295))+((r12*x13281))+(((-1.0)*x13290*x13294)));
evalcond[2]=((1.0)+((r02*x13281))+(((-1.0)*x13282*x13294))+((r01*x13295)));
evalcond[3]=(((sj3*x13284))+((r02*x13297))+((r00*x13288))+((x13282*x13296))+(((-1.0)*r01*x13286*x13298)));
evalcond[4]=((((-1.0)*sj3*x13282*x13298))+((r01*x13281*x13288))+((r00*x13286))+((cj3*x13284))+(((-1.0)*r02*sj3*x13294)));
evalcond[5]=(((r12*x13297))+((r11*x13287))+(((-1.0)*cj2*x13285))+(((-1.0)*r11*x13286*x13298))+((r10*x13288))+x13283+((r10*x13281*x13289)));
evalcond[6]=(((r20*x13286))+(((-1.0)*x13283))+(((-1.0)*r22*sj3*x13294))+((r21*x13289))+((cj1*cj2))+(((-1.0)*r20*x13287*x13298))+((r21*x13281*x13288)));
evalcond[7]=((((-1.0)*r21*x13286*x13298))+((r20*x13288))+((r22*x13297))+((r21*x13287))+(((-1.0)*x13299))+((r20*x13281*x13289)));
evalcond[8]=(((r11*x13289))+((r10*x13286))+(((-1.0)*r10*x13287*x13298))+((r11*x13281*x13288))+(((-1.0)*r12*sj3*x13294))+(((-1.0)*x13299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13300=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13300);
rxp1_1=(px*r21);
rxp1_2=(r11*x13300);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13301=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13301);
rxp1_1=(px*r21);
rxp1_2=(r11*x13301);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13302=((1.0)*cj5);
j4eval[0]=(((r21*sj3*sj5))+(((-1.0)*r20*sj3*x13302)));
j4eval[1]=((((-1.0)*r10*x13302))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13303=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13303);
rxp1_1=(px*r21);
rxp1_2=(r11*x13303);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13304=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13304);
rxp1_1=(px*r21);
rxp1_2=(r11*x13304);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13305=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13305);
rxp1_1=(px*r21);
rxp1_2=(r11*x13305);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13306=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13306);
rxp1_1=(px*r21);
rxp1_2=(r11*x13306);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13309=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13309.valid){
continue;
}
IkReal x13307=x13309.value;
IkReal x13308=(sj0*x13307);
sj4array[0]=(((sj1*sj2*x13308))+(((-1.0)*cj1*cj2*x13308)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13310=IKcos(j4);
IkReal x13311=IKsin(j4);
IkReal x13312=(r21*sj5);
IkReal x13313=((1.0)*cj5*x13310);
evalcond[0]=(r02*x13310);
evalcond[1]=((((-1.0)*sj0))+((r02*x13311)));
evalcond[2]=((((-1.0)*r20*x13313))+((x13310*x13312)));
evalcond[3]=(((r11*sj5*x13310))+(((-1.0)*r10*x13313)));
evalcond[4]=(((cj5*r20*x13311))+(((-1.0)*x13311*x13312))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13315=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13315.valid){
continue;
}
IkReal x13314=x13315.value;
sj4array[0]=(((cj1*sj2*x13314))+((cj2*sj1*x13314)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13316=IKcos(j4);
IkReal x13317=IKsin(j4);
IkReal x13318=((1.0)*sj0);
IkReal x13319=(r11*sj5);
IkReal x13320=((1.0)*cj5*x13316);
evalcond[0]=(r02*x13316);
evalcond[1]=((((-1.0)*x13318))+((r02*x13317)));
evalcond[2]=(((r21*sj5*x13316))+(((-1.0)*r20*x13320)));
evalcond[3]=((((-1.0)*r10*x13320))+((x13316*x13319)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x13318))+(((-1.0)*x13317*x13319))+((cj5*r10*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13321=IKPowWithIntegerCheck(r02,-1);
if(!x13321.valid){
continue;
}
sj4array[0]=(sj0*(x13321.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13322=IKcos(j4);
IkReal x13323=IKsin(j4);
IkReal x13324=((1.0)*sj1);
IkReal x13325=(sj5*x13322);
IkReal x13326=(cj5*x13323);
IkReal x13327=((1.0)*sj5*x13323);
IkReal x13328=((1.0)*cj5*x13322);
evalcond[0]=(r02*x13322);
evalcond[1]=(((r21*x13325))+(((-1.0)*r20*x13328)));
evalcond[2]=((((-1.0)*r10*x13328))+((r11*x13325)));
evalcond[3]=(((r20*x13326))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13324))+(((-1.0)*r21*x13327)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x13327))+((r10*x13326))+(((-1.0)*sj0*sj2*x13324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13329=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13329);
rxp1_1=(px*r21);
rxp1_2=(r11*x13329);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13330=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13330);
rxp1_1=(px*r21);
rxp1_2=(r11*x13330);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13331=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13331);
rxp1_1=(px*r21);
rxp1_2=(r11*x13331);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13334=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13334.valid){
continue;
}
IkReal x13332=x13334.value;
IkReal x13333=(sj0*x13332);
sj4array[0]=((((-1.0)*cj1*cj2*x13333))+((sj1*sj2*x13333)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13335=IKcos(j4);
IkReal x13336=IKsin(j4);
IkReal x13337=(r21*sj5);
IkReal x13338=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x13335);
evalcond[1]=((((-1.0)*sj0))+((r02*x13336)));
evalcond[2]=(((x13335*x13337))+(((-1.0)*x13335*x13338)));
evalcond[3]=(((r11*sj5*x13335))+(((-1.0)*cj5*r10*x13335)));
evalcond[4]=(((x13336*x13337))+(((-1.0)*cj2*sj1))+(((-1.0)*x13336*x13338))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13340=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13340.valid){
continue;
}
IkReal x13339=x13340.value;
sj4array[0]=(((cj1*sj2*x13339))+((cj2*sj1*x13339)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13341=IKcos(j4);
IkReal x13342=IKsin(j4);
IkReal x13343=((1.0)*sj0);
IkReal x13344=((1.0)*cj5);
IkReal x13345=(sj5*x13341);
evalcond[0]=((-1.0)*r02*x13341);
evalcond[1]=((((-1.0)*x13343))+((r02*x13342)));
evalcond[2]=((((-1.0)*r20*x13341*x13344))+((r21*x13345)));
evalcond[3]=((((-1.0)*r10*x13341*x13344))+((r11*x13345)));
evalcond[4]=(((r11*sj5*x13342))+((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x13343))+(((-1.0)*r10*x13342*x13344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13346=IKPowWithIntegerCheck(r02,-1);
if(!x13346.valid){
continue;
}
sj4array[0]=(sj0*(x13346.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13347=IKcos(j4);
IkReal x13348=IKsin(j4);
IkReal x13349=((1.0)*sj1);
IkReal x13350=(r21*sj5);
IkReal x13351=(r11*sj5);
IkReal x13352=((1.0)*cj5*x13348);
IkReal x13353=((1.0)*cj5*x13347);
evalcond[0]=((-1.0)*r02*x13347);
evalcond[1]=(((x13347*x13350))+(((-1.0)*r20*x13353)));
evalcond[2]=(((x13347*x13351))+(((-1.0)*r10*x13353)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x13348*x13350))+(((-1.0)*cj2*x13349))+(((-1.0)*r20*x13352)));
evalcond[4]=(((cj1*cj2*sj0))+((x13348*x13351))+(((-1.0)*sj0*sj2*x13349))+(((-1.0)*r10*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x13354 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13354.valid){
continue;
}
IkReal gconst66=((-1.0)*(x13354.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13355.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13356=((-1.0)*r10);
CheckValue<IkReal> x13358 = IKatan2WithCheck(IkReal(x13356),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13358.valid){
continue;
}
IkReal x13357=((-1.0)*(x13358.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13356);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13357;
IkReal gconst66=x13357;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13359=((-1.0)*r10);
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(x13359),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
IkReal x13360=((-1.0)*(x13361.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13359);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13360;
IkReal gconst66=x13360;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13362=((-1.0)*r10);
CheckValue<IkReal> x13364 = IKatan2WithCheck(IkReal(x13362),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13364.valid){
continue;
}
IkReal x13363=((-1.0)*(x13364.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13362);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13363;
IkReal gconst66=x13363;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=((((-1.0)*r11*r20*sj3))+((r10*r21*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13365=((1.0)*cj3);
CheckValue<IkReal> x13366=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x13366.valid){
continue;
}
CheckValue<IkReal> x13367=IKPowWithIntegerCheck(r02,-1);
if(!x13367.valid){
continue;
}
CheckValue<IkReal> x13368=IKPowWithIntegerCheck(sj3,-1);
if(!x13368.valid){
continue;
}
if( IKabs(((x13366.value)*(((((-1.0)*gconst67*r20*x13365))+(((-1.0)*gconst68*r21*x13365))+(((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13367.value)*(x13368.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13366.value)*(((((-1.0)*gconst67*r20*x13365))+(((-1.0)*gconst68*r21*x13365))+(((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x13367.value)*(x13368.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13366.value)*(((((-1.0)*gconst67*r20*x13365))+(((-1.0)*gconst68*r21*x13365))+(((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x13367.value)*(x13368.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13369=IKcos(j4);
IkReal x13370=IKsin(j4);
IkReal x13371=(cj2*sj0);
IkReal x13372=(gconst68*sj3);
IkReal x13373=(cj0*cj2);
IkReal x13374=(gconst67*sj3);
IkReal x13375=(cj1*sj2);
IkReal x13376=(cj3*r20);
IkReal x13377=(cj3*gconst68);
IkReal x13378=(cj3*r10);
IkReal x13379=((1.0)*sj1*sj2);
IkReal x13380=(gconst67*x13369);
IkReal x13381=(gconst68*x13370);
IkReal x13382=(r02*x13369);
IkReal x13383=((1.0)*x13370);
IkReal x13384=((1.0)*gconst68*x13369);
IkReal x13385=(cj3*gconst67*x13383);
evalcond[0]=(((r02*x13370))+(((-1.0)*sj0)));
evalcond[1]=((((-1.0)*r20*x13384))+((r21*x13380)));
evalcond[2]=(((r11*x13380))+cj0+(((-1.0)*r10*x13384)));
evalcond[3]=((((-1.0)*sj3*x13382))+((cj0*x13375))+((sj1*x13373)));
evalcond[4]=(((cj1*x13373))+((cj3*x13382))+(((-1.0)*cj0*x13379)));
evalcond[5]=(((r21*x13370*x13374))+(((-1.0)*r20*x13372*x13383))+((cj1*cj2))+(((-1.0)*x13379))+((gconst67*x13376))+((r21*x13377)));
evalcond[6]=((((-1.0)*cj2*sj1))+((r20*x13374))+(((-1.0)*r21*x13385))+((x13376*x13381))+((r21*x13372))+(((-1.0)*x13375)));
evalcond[7]=(((sj0*x13375))+((r11*x13377))+((r11*x13370*x13374))+(((-1.0)*r10*x13372*x13383))+((gconst67*x13378))+((sj1*x13371)));
evalcond[8]=(((r10*x13374))+((r11*x13372))+((cj1*x13371))+(((-1.0)*sj0*x13379))+((r10*x13370*x13377))+(((-1.0)*r11*x13385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13387=IKPowWithIntegerCheck(r02,-1);
if(!x13387.valid){
continue;
}
IkReal x13386=x13387.value;
CheckValue<IkReal> x13388=IKPowWithIntegerCheck(cj3,-1);
if(!x13388.valid){
continue;
}
if( IKabs((sj0*x13386)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13386*(x13388.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13386))+IKsqr((x13386*(x13388.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13386), (x13386*(x13388.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13389=IKcos(j4);
IkReal x13390=IKsin(j4);
IkReal x13391=(cj2*sj0);
IkReal x13392=(gconst68*sj3);
IkReal x13393=(cj0*cj2);
IkReal x13394=(gconst67*sj3);
IkReal x13395=(cj1*sj2);
IkReal x13396=(cj3*r20);
IkReal x13397=(cj3*gconst68);
IkReal x13398=(cj3*r10);
IkReal x13399=((1.0)*sj1*sj2);
IkReal x13400=(gconst67*x13389);
IkReal x13401=(gconst68*x13390);
IkReal x13402=(r02*x13389);
IkReal x13403=((1.0)*x13390);
IkReal x13404=((1.0)*gconst68*x13389);
IkReal x13405=(cj3*gconst67*x13403);
evalcond[0]=((((-1.0)*sj0))+((r02*x13390)));
evalcond[1]=(((r21*x13400))+(((-1.0)*r20*x13404)));
evalcond[2]=(cj0+((r11*x13400))+(((-1.0)*r10*x13404)));
evalcond[3]=(((sj1*x13393))+(((-1.0)*sj3*x13402))+((cj0*x13395)));
evalcond[4]=((((-1.0)*cj0*x13399))+((cj1*x13393))+((cj3*x13402)));
evalcond[5]=(((r21*x13397))+((r21*x13390*x13394))+(((-1.0)*r20*x13392*x13403))+(((-1.0)*x13399))+((gconst67*x13396))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x13395))+((r21*x13392))+((r20*x13394))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x13405))+((x13396*x13401)));
evalcond[7]=(((r11*x13397))+((sj1*x13391))+(((-1.0)*r10*x13392*x13403))+((sj0*x13395))+((gconst67*x13398))+((r11*x13390*x13394)));
evalcond[8]=(((r11*x13392))+((r10*x13394))+((cj1*x13391))+(((-1.0)*r11*x13405))+(((-1.0)*sj0*x13399))+((r10*x13390*x13397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13407=IKPowWithIntegerCheck(r02,-1);
if(!x13407.valid){
continue;
}
IkReal x13406=x13407.value;
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(sj3,-1);
if(!x13408.valid){
continue;
}
if( IKabs((sj0*x13406)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13406*(x13408.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13406))+IKsqr((x13406*(x13408.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13406), (x13406*(x13408.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13409=IKcos(j4);
IkReal x13410=IKsin(j4);
IkReal x13411=(cj2*sj0);
IkReal x13412=(gconst68*sj3);
IkReal x13413=(cj0*cj2);
IkReal x13414=(gconst67*sj3);
IkReal x13415=(cj1*sj2);
IkReal x13416=(cj3*r20);
IkReal x13417=(cj3*gconst68);
IkReal x13418=(cj3*r10);
IkReal x13419=((1.0)*sj1*sj2);
IkReal x13420=(gconst67*x13409);
IkReal x13421=(gconst68*x13410);
IkReal x13422=(r02*x13409);
IkReal x13423=((1.0)*x13410);
IkReal x13424=((1.0)*gconst68*x13409);
IkReal x13425=(cj3*gconst67*x13423);
evalcond[0]=(((r02*x13410))+(((-1.0)*sj0)));
evalcond[1]=((((-1.0)*r20*x13424))+((r21*x13420)));
evalcond[2]=(cj0+((r11*x13420))+(((-1.0)*r10*x13424)));
evalcond[3]=(((cj0*x13415))+(((-1.0)*sj3*x13422))+((sj1*x13413)));
evalcond[4]=(((cj3*x13422))+(((-1.0)*cj0*x13419))+((cj1*x13413)));
evalcond[5]=((((-1.0)*r20*x13412*x13423))+((gconst67*x13416))+((r21*x13410*x13414))+((cj1*cj2))+((r21*x13417))+(((-1.0)*x13419)));
evalcond[6]=((((-1.0)*x13415))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x13425))+((r20*x13414))+((x13416*x13421))+((r21*x13412)));
evalcond[7]=(((gconst67*x13418))+(((-1.0)*r10*x13412*x13423))+((r11*x13410*x13414))+((r11*x13417))+((sj0*x13415))+((sj1*x13411)));
evalcond[8]=(((r10*x13410*x13417))+(((-1.0)*sj0*x13419))+(((-1.0)*r11*x13425))+((cj1*x13411))+((r10*x13414))+((r11*x13412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13426=((-1.0)*r10);
CheckValue<IkReal> x13427 = IKatan2WithCheck(IkReal(x13426),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13427.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x13427.value))));
IkReal gconst70=x13426;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x13428 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13428.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13428.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13429=((-1.0)*r10);
IkReal x13430=((-1.0)*r11);
CheckValue<IkReal> x13432 = IKatan2WithCheck(IkReal(x13429),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13432.valid){
continue;
}
IkReal x13431=((1.0)*(x13432.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13429);
rxp1_1=(px*r21);
rxp1_2=(px*x13430);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13431)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13431)));
IkReal gconst70=x13429;
IkReal gconst71=x13430;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13433=((-1.0)*r10);
IkReal x13434=((-1.0)*r11);
CheckValue<IkReal> x13436 = IKatan2WithCheck(IkReal(x13433),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13436.valid){
continue;
}
IkReal x13435=((1.0)*(x13436.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13433);
rxp1_1=(px*r21);
rxp1_2=(px*x13434);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13435)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13435)));
IkReal gconst70=x13433;
IkReal gconst71=x13434;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13437=((-1.0)*r10);
IkReal x13438=((-1.0)*r11);
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(x13437),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
IkReal x13439=((1.0)*(x13440.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13437);
rxp1_1=(px*r21);
rxp1_2=(px*x13438);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13439)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13439)));
IkReal gconst70=x13437;
IkReal gconst71=x13438;
IkReal x13441=((1.0)*sj3);
j4eval[0]=((((-1.0)*r10*r21*x13441))+((r11*r20*x13441)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13442=((1.0)*r20);
CheckValue<IkReal> x13443=IKPowWithIntegerCheck((((gconst70*r21*sj3))+(((-1.0)*gconst71*sj3*x13442))),-1);
if(!x13443.valid){
continue;
}
CheckValue<IkReal> x13444=IKPowWithIntegerCheck(r02,-1);
if(!x13444.valid){
continue;
}
CheckValue<IkReal> x13445=IKPowWithIntegerCheck(sj3,-1);
if(!x13445.valid){
continue;
}
if( IKabs(((x13443.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13442))+(((-1.0)*cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13444.value)*(x13445.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13443.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13442))+(((-1.0)*cj3*gconst71*r21))))))+IKsqr(((x13444.value)*(x13445.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13443.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst70*x13442))+(((-1.0)*cj3*gconst71*r21))))), ((x13444.value)*(x13445.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13446=IKcos(j4);
IkReal x13447=IKsin(j4);
IkReal x13448=(cj2*sj0);
IkReal x13449=(cj3*r20);
IkReal x13450=((1.0)*sj0);
IkReal x13451=((1.0)*sj1);
IkReal x13452=(gconst71*r21);
IkReal x13453=(gconst70*sj3);
IkReal x13454=(cj3*gconst70);
IkReal x13455=(cj1*sj2);
IkReal x13456=(gconst71*r11);
IkReal x13457=(cj0*cj2);
IkReal x13458=((1.0)*sj3);
IkReal x13459=(gconst71*x13447);
IkReal x13460=((1.0)*x13447);
IkReal x13461=(gconst70*x13446);
IkReal x13462=(r02*x13446);
IkReal x13463=(x13447*x13453);
IkReal x13464=((1.0)*gconst71*x13446);
evalcond[0]=(((r02*x13447))+(((-1.0)*x13450)));
evalcond[1]=(((r21*x13461))+(((-1.0)*r20*x13464)));
evalcond[2]=(cj0+(((-1.0)*r10*x13464))+((r11*x13461)));
evalcond[3]=(((sj1*x13457))+((cj0*x13455))+(((-1.0)*x13458*x13462)));
evalcond[4]=((((-1.0)*cj0*sj2*x13451))+((cj1*x13457))+((cj3*x13462)));
evalcond[5]=(((r21*x13463))+((gconst70*x13449))+(((-1.0)*sj2*x13451))+((cj1*cj2))+((cj3*x13452))+(((-1.0)*r20*x13458*x13459)));
evalcond[6]=((((-1.0)*cj2*x13451))+((r20*x13453))+((x13449*x13459))+((sj3*x13452))+(((-1.0)*r21*x13454*x13460))+(((-1.0)*x13455)));
evalcond[7]=((((-1.0)*r10*x13458*x13459))+((r10*x13454))+((sj0*x13455))+((r11*x13463))+((sj1*x13448))+((cj3*x13456)));
evalcond[8]=(((r10*x13453))+(((-1.0)*r11*x13454*x13460))+((sj3*x13456))+((cj1*x13448))+(((-1.0)*sj1*sj2*x13450))+((cj3*r10*x13459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13466=IKPowWithIntegerCheck(r02,-1);
if(!x13466.valid){
continue;
}
IkReal x13465=x13466.value;
CheckValue<IkReal> x13467=IKPowWithIntegerCheck(cj3,-1);
if(!x13467.valid){
continue;
}
if( IKabs((sj0*x13465)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13465*(x13467.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13465))+IKsqr((x13465*(x13467.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13465), (x13465*(x13467.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13468=IKcos(j4);
IkReal x13469=IKsin(j4);
IkReal x13470=(cj2*sj0);
IkReal x13471=(cj3*r20);
IkReal x13472=((1.0)*sj0);
IkReal x13473=((1.0)*sj1);
IkReal x13474=(gconst71*r21);
IkReal x13475=(gconst70*sj3);
IkReal x13476=(cj3*gconst70);
IkReal x13477=(cj1*sj2);
IkReal x13478=(gconst71*r11);
IkReal x13479=(cj0*cj2);
IkReal x13480=((1.0)*sj3);
IkReal x13481=(gconst71*x13469);
IkReal x13482=((1.0)*x13469);
IkReal x13483=(gconst70*x13468);
IkReal x13484=(r02*x13468);
IkReal x13485=(x13469*x13475);
IkReal x13486=((1.0)*gconst71*x13468);
evalcond[0]=((((-1.0)*x13472))+((r02*x13469)));
evalcond[1]=((((-1.0)*r20*x13486))+((r21*x13483)));
evalcond[2]=((((-1.0)*r10*x13486))+cj0+((r11*x13483)));
evalcond[3]=(((sj1*x13479))+((cj0*x13477))+(((-1.0)*x13480*x13484)));
evalcond[4]=(((cj1*x13479))+(((-1.0)*cj0*sj2*x13473))+((cj3*x13484)));
evalcond[5]=((((-1.0)*sj2*x13473))+(((-1.0)*r20*x13480*x13481))+((cj1*cj2))+((cj3*x13474))+((gconst70*x13471))+((r21*x13485)));
evalcond[6]=(((sj3*x13474))+(((-1.0)*r21*x13476*x13482))+(((-1.0)*x13477))+((x13471*x13481))+((r20*x13475))+(((-1.0)*cj2*x13473)));
evalcond[7]=(((r10*x13476))+(((-1.0)*r10*x13480*x13481))+((sj1*x13470))+((sj0*x13477))+((r11*x13485))+((cj3*x13478)));
evalcond[8]=(((sj3*x13478))+((r10*x13475))+(((-1.0)*r11*x13476*x13482))+((cj1*x13470))+(((-1.0)*sj1*sj2*x13472))+((cj3*r10*x13481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13488=IKPowWithIntegerCheck(r02,-1);
if(!x13488.valid){
continue;
}
IkReal x13487=x13488.value;
CheckValue<IkReal> x13489=IKPowWithIntegerCheck(sj3,-1);
if(!x13489.valid){
continue;
}
if( IKabs((sj0*x13487)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13487))+IKsqr((x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13487), (x13487*(x13489.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13490=IKcos(j4);
IkReal x13491=IKsin(j4);
IkReal x13492=(cj2*sj0);
IkReal x13493=(cj3*r20);
IkReal x13494=((1.0)*sj0);
IkReal x13495=((1.0)*sj1);
IkReal x13496=(gconst71*r21);
IkReal x13497=(gconst70*sj3);
IkReal x13498=(cj3*gconst70);
IkReal x13499=(cj1*sj2);
IkReal x13500=(gconst71*r11);
IkReal x13501=(cj0*cj2);
IkReal x13502=((1.0)*sj3);
IkReal x13503=(gconst71*x13491);
IkReal x13504=((1.0)*x13491);
IkReal x13505=(gconst70*x13490);
IkReal x13506=(r02*x13490);
IkReal x13507=(x13491*x13497);
IkReal x13508=((1.0)*gconst71*x13490);
evalcond[0]=(((r02*x13491))+(((-1.0)*x13494)));
evalcond[1]=((((-1.0)*r20*x13508))+((r21*x13505)));
evalcond[2]=(cj0+(((-1.0)*r10*x13508))+((r11*x13505)));
evalcond[3]=(((cj0*x13499))+(((-1.0)*x13502*x13506))+((sj1*x13501)));
evalcond[4]=(((cj1*x13501))+(((-1.0)*cj0*sj2*x13495))+((cj3*x13506)));
evalcond[5]=((((-1.0)*sj2*x13495))+(((-1.0)*r20*x13502*x13503))+((gconst70*x13493))+((cj3*x13496))+((cj1*cj2))+((r21*x13507)));
evalcond[6]=((((-1.0)*x13499))+((x13493*x13503))+(((-1.0)*cj2*x13495))+((r20*x13497))+((sj3*x13496))+(((-1.0)*r21*x13498*x13504)));
evalcond[7]=(((r11*x13507))+(((-1.0)*r10*x13502*x13503))+((cj3*x13500))+((r10*x13498))+((sj0*x13499))+((sj1*x13492)));
evalcond[8]=((((-1.0)*r11*x13498*x13504))+((cj3*r10*x13503))+(((-1.0)*sj1*sj2*x13494))+((r10*x13497))+((cj1*x13492))+((sj3*x13500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(r02,-1);
if(!x13510.valid){
continue;
}
IkReal x13509=x13510.value;
CheckValue<IkReal> x13511=IKPowWithIntegerCheck(sj3,-1);
if(!x13511.valid){
continue;
}
if( IKabs((sj0*x13509)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13509*(x13511.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13509))+IKsqr((x13509*(x13511.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13509), (x13509*(x13511.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13512=IKcos(j4);
IkReal x13513=IKsin(j4);
IkReal x13514=(cj2*sj0);
IkReal x13515=(cj3*cj5);
IkReal x13516=(cj0*cj2);
IkReal x13517=((1.0)*sj1);
IkReal x13518=(cj3*sj5);
IkReal x13519=(cj1*sj2);
IkReal x13520=(sj3*sj5);
IkReal x13521=(cj5*sj3);
IkReal x13522=(sj5*x13512);
IkReal x13523=(r02*x13512);
IkReal x13524=(r11*x13513);
IkReal x13525=(r21*x13513);
IkReal x13526=((1.0)*cj5*x13512);
IkReal x13527=((1.0)*x13513*x13521);
evalcond[0]=((((-1.0)*sj0))+((r02*x13513)));
evalcond[1]=(((r21*x13522))+(((-1.0)*r20*x13526)));
evalcond[2]=(cj0+(((-1.0)*r10*x13526))+((r11*x13522)));
evalcond[3]=(((cj0*x13519))+(((-1.0)*sj3*x13523))+((sj1*x13516)));
evalcond[4]=(((cj1*x13516))+(((-1.0)*cj0*sj2*x13517))+((cj3*x13523)));
evalcond[5]=((((-1.0)*sj2*x13517))+((r21*x13515))+((x13520*x13525))+((r20*x13518))+(((-1.0)*r20*x13527))+((cj1*cj2)));
evalcond[6]=(((r21*x13521))+((r20*x13520))+((r20*x13513*x13515))+(((-1.0)*x13519))+(((-1.0)*cj2*x13517))+(((-1.0)*x13518*x13525)));
evalcond[7]=(((x13520*x13524))+(((-1.0)*r10*x13527))+((r11*x13515))+((sj1*x13514))+((sj0*x13519))+((r10*x13518)));
evalcond[8]=(((r10*x13513*x13515))+((cj1*x13514))+(((-1.0)*sj0*sj2*x13517))+(((-1.0)*x13518*x13524))+((r11*x13521))+((r10*x13520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13528=((1.0)*cj5);
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x13528))+((r21*sj3*sj5))),-1);
if(!x13529.valid){
continue;
}
CheckValue<IkReal> x13530=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13528))),-1);
if(!x13530.valid){
continue;
}
if( IKabs(((x13529.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13528))+(((-1.0)*cj3*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13530.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13529.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13528))+(((-1.0)*cj3*r20*sj5))))))+IKsqr(((-1.0)*cj0*(x13530.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13529.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13528))+(((-1.0)*cj3*r20*sj5))))), ((-1.0)*cj0*(x13530.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13531=IKcos(j4);
IkReal x13532=IKsin(j4);
IkReal x13533=(cj2*sj0);
IkReal x13534=(cj3*cj5);
IkReal x13535=(cj0*cj2);
IkReal x13536=((1.0)*sj1);
IkReal x13537=(cj3*sj5);
IkReal x13538=(cj1*sj2);
IkReal x13539=(sj3*sj5);
IkReal x13540=(cj5*sj3);
IkReal x13541=(sj5*x13531);
IkReal x13542=(r02*x13531);
IkReal x13543=(r11*x13532);
IkReal x13544=(r21*x13532);
IkReal x13545=((1.0)*cj5*x13531);
IkReal x13546=((1.0)*x13532*x13540);
evalcond[0]=((((-1.0)*sj0))+((r02*x13532)));
evalcond[1]=(((r21*x13541))+(((-1.0)*r20*x13545)));
evalcond[2]=(cj0+((r11*x13541))+(((-1.0)*r10*x13545)));
evalcond[3]=(((cj0*x13538))+((sj1*x13535))+(((-1.0)*sj3*x13542)));
evalcond[4]=(((cj3*x13542))+((cj1*x13535))+(((-1.0)*cj0*sj2*x13536)));
evalcond[5]=(((r20*x13537))+((x13539*x13544))+(((-1.0)*sj2*x13536))+((cj1*cj2))+((r21*x13534))+(((-1.0)*r20*x13546)));
evalcond[6]=(((r20*x13532*x13534))+((r21*x13540))+((r20*x13539))+(((-1.0)*x13538))+(((-1.0)*x13537*x13544))+(((-1.0)*cj2*x13536)));
evalcond[7]=(((x13539*x13543))+((sj0*x13538))+((sj1*x13533))+(((-1.0)*r10*x13546))+((r10*x13537))+((r11*x13534)));
evalcond[8]=(((r11*x13540))+(((-1.0)*sj0*sj2*x13536))+((cj1*x13533))+(((-1.0)*x13537*x13543))+((r10*x13532*x13534))+((r10*x13539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13547=IKPowWithIntegerCheck(r02,-1);
if(!x13547.valid){
continue;
}
CheckValue<IkReal> x13548=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13548.valid){
continue;
}
if( IKabs((sj0*(x13547.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13548.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x13547.value)))+IKsqr(((-1.0)*cj0*(x13548.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x13547.value)), ((-1.0)*cj0*(x13548.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13549=IKcos(j4);
IkReal x13550=IKsin(j4);
IkReal x13551=(cj2*sj0);
IkReal x13552=(cj3*cj5);
IkReal x13553=(cj0*cj2);
IkReal x13554=((1.0)*sj1);
IkReal x13555=(cj3*sj5);
IkReal x13556=(cj1*sj2);
IkReal x13557=(sj3*sj5);
IkReal x13558=(cj5*sj3);
IkReal x13559=(sj5*x13549);
IkReal x13560=(r02*x13549);
IkReal x13561=(r11*x13550);
IkReal x13562=(r21*x13550);
IkReal x13563=((1.0)*cj5*x13549);
IkReal x13564=((1.0)*x13550*x13558);
evalcond[0]=((((-1.0)*sj0))+((r02*x13550)));
evalcond[1]=(((r21*x13559))+(((-1.0)*r20*x13563)));
evalcond[2]=(cj0+((r11*x13559))+(((-1.0)*r10*x13563)));
evalcond[3]=(((sj1*x13553))+(((-1.0)*sj3*x13560))+((cj0*x13556)));
evalcond[4]=((((-1.0)*cj0*sj2*x13554))+((cj3*x13560))+((cj1*x13553)));
evalcond[5]=(((x13557*x13562))+((r21*x13552))+(((-1.0)*sj2*x13554))+((cj1*cj2))+((r20*x13555))+(((-1.0)*r20*x13564)));
evalcond[6]=(((r20*x13550*x13552))+(((-1.0)*x13555*x13562))+(((-1.0)*cj2*x13554))+((r21*x13558))+((r20*x13557))+(((-1.0)*x13556)));
evalcond[7]=(((x13557*x13561))+((sj1*x13551))+((sj0*x13556))+((r10*x13555))+((r11*x13552))+(((-1.0)*r10*x13564)));
evalcond[8]=((((-1.0)*x13555*x13561))+((r10*x13557))+((r11*x13558))+((r10*x13550*x13552))+((cj1*x13551))+(((-1.0)*sj0*sj2*x13554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13565=((1.0)*sj0);
IkReal x13566=((1.0)*cj0);
CheckValue<IkReal> x13567 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x13566))+(((-1.0)*cj5*r10*x13565))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r02*x13566))+(((-1.0)*r12*x13565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13567.valid){
continue;
}
CheckValue<IkReal> x13568=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x13568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13567.value)+(((1.5707963267949)*(x13568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13569=IKcos(j4);
IkReal x13570=IKsin(j4);
IkReal x13571=((1.0)*cj5);
IkReal x13572=(cj2*sj0);
IkReal x13573=(cj5*r01);
IkReal x13574=((1.0)*sj0);
IkReal x13575=((1.0)*sj1);
IkReal x13576=(cj3*sj5);
IkReal x13577=(cj3*cj5);
IkReal x13578=(cj1*sj2);
IkReal x13579=(sj3*sj5);
IkReal x13580=(cj0*cj2);
IkReal x13581=(cj5*sj3);
IkReal x13582=(sj5*x13569);
IkReal x13583=(sj3*x13570);
IkReal x13584=(cj3*x13569);
IkReal x13585=((1.0)*x13570);
IkReal x13586=((1.0)*sj3*x13569);
evalcond[0]=((((-1.0)*r20*x13569*x13571))+((r21*x13582))+((r22*x13570)));
evalcond[1]=(cj0+((r12*x13570))+(((-1.0)*r10*x13569*x13571))+((r11*x13582)));
evalcond[2]=(((r01*x13582))+((r02*x13570))+(((-1.0)*r00*x13569*x13571))+(((-1.0)*x13574)));
evalcond[3]=((((-1.0)*sj2*x13575))+((r20*x13576))+(((-1.0)*r20*x13571*x13583))+((r21*x13570*x13579))+((r21*x13577))+((cj1*cj2))+(((-1.0)*r22*x13586)));
evalcond[4]=(((r20*x13579))+(((-1.0)*cj2*x13575))+((r21*x13581))+(((-1.0)*x13578))+(((-1.0)*r21*x13576*x13585))+((r20*x13570*x13577))+((r22*x13584)));
evalcond[5]=(((r00*x13576))+(((-1.0)*r00*x13571*x13583))+(((-1.0)*r02*x13586))+((cj0*x13578))+((sj1*x13580))+((r01*x13570*x13579))+((cj3*x13573)));
evalcond[6]=(((r00*x13579))+((r00*x13570*x13577))+((cj1*x13580))+((sj3*x13573))+(((-1.0)*cj0*sj2*x13575))+((r02*x13584))+(((-1.0)*r01*x13576*x13585)));
evalcond[7]=((((-1.0)*r10*x13571*x13583))+((r10*x13576))+(((-1.0)*r12*x13586))+((sj0*x13578))+((r11*x13570*x13579))+((sj1*x13572))+((r11*x13577)));
evalcond[8]=(((r10*x13579))+((r12*x13584))+(((-1.0)*sj1*sj2*x13574))+((cj1*x13572))+((r10*x13570*x13577))+(((-1.0)*r11*x13576*x13585))+((r11*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13587.value)+(((1.5707963267949)*(x13588.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13589=IKcos(j4);
IkReal x13590=IKsin(j4);
IkReal x13591=((1.0)*cj5);
IkReal x13592=(cj2*sj0);
IkReal x13593=(cj5*r01);
IkReal x13594=((1.0)*sj0);
IkReal x13595=((1.0)*sj1);
IkReal x13596=(cj3*sj5);
IkReal x13597=(cj3*cj5);
IkReal x13598=(cj1*sj2);
IkReal x13599=(sj3*sj5);
IkReal x13600=(cj0*cj2);
IkReal x13601=(cj5*sj3);
IkReal x13602=(sj5*x13589);
IkReal x13603=(sj3*x13590);
IkReal x13604=(cj3*x13589);
IkReal x13605=((1.0)*x13590);
IkReal x13606=((1.0)*sj3*x13589);
evalcond[0]=(((r22*x13590))+(((-1.0)*r20*x13589*x13591))+((r21*x13602)));
evalcond[1]=(((r11*x13602))+(((-1.0)*r10*x13589*x13591))+cj0+((r12*x13590)));
evalcond[2]=((((-1.0)*r00*x13589*x13591))+((r02*x13590))+(((-1.0)*x13594))+((r01*x13602)));
evalcond[3]=((((-1.0)*r20*x13591*x13603))+((r21*x13597))+(((-1.0)*sj2*x13595))+(((-1.0)*r22*x13606))+((r21*x13590*x13599))+((cj1*cj2))+((r20*x13596)));
evalcond[4]=(((r22*x13604))+(((-1.0)*x13598))+((r21*x13601))+(((-1.0)*cj2*x13595))+((r20*x13599))+((r20*x13590*x13597))+(((-1.0)*r21*x13596*x13605)));
evalcond[5]=((((-1.0)*r02*x13606))+(((-1.0)*r00*x13591*x13603))+((r00*x13596))+((r01*x13590*x13599))+((sj1*x13600))+((cj3*x13593))+((cj0*x13598)));
evalcond[6]=(((r00*x13599))+((r02*x13604))+((sj3*x13593))+(((-1.0)*r01*x13596*x13605))+((cj1*x13600))+(((-1.0)*cj0*sj2*x13595))+((r00*x13590*x13597)));
evalcond[7]=(((sj0*x13598))+((r11*x13597))+((r10*x13596))+((sj1*x13592))+(((-1.0)*r10*x13591*x13603))+(((-1.0)*r12*x13606))+((r11*x13590*x13599)));
evalcond[8]=(((r11*x13601))+((r10*x13599))+((cj1*x13592))+((r10*x13590*x13597))+((r12*x13604))+(((-1.0)*sj1*sj2*x13594))+(((-1.0)*r11*x13596*x13605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13607 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13607.valid){
continue;
}
CheckValue<IkReal> x13608=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13607.value)+(((1.5707963267949)*(x13608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13609=IKcos(j4);
IkReal x13610=IKsin(j4);
IkReal x13611=((1.0)*cj5);
IkReal x13612=(cj2*sj0);
IkReal x13613=(cj5*r01);
IkReal x13614=((1.0)*sj0);
IkReal x13615=((1.0)*sj1);
IkReal x13616=(cj3*sj5);
IkReal x13617=(cj3*cj5);
IkReal x13618=(cj1*sj2);
IkReal x13619=(sj3*sj5);
IkReal x13620=(cj0*cj2);
IkReal x13621=(cj5*sj3);
IkReal x13622=(sj5*x13609);
IkReal x13623=(sj3*x13610);
IkReal x13624=(cj3*x13609);
IkReal x13625=((1.0)*x13610);
IkReal x13626=((1.0)*sj3*x13609);
evalcond[0]=((((-1.0)*r20*x13609*x13611))+((r21*x13622))+((r22*x13610)));
evalcond[1]=(cj0+((r11*x13622))+(((-1.0)*r10*x13609*x13611))+((r12*x13610)));
evalcond[2]=((((-1.0)*r00*x13609*x13611))+(((-1.0)*x13614))+((r01*x13622))+((r02*x13610)));
evalcond[3]=((((-1.0)*sj2*x13615))+(((-1.0)*r20*x13611*x13623))+((r21*x13617))+((r20*x13616))+(((-1.0)*r22*x13626))+((cj1*cj2))+((r21*x13610*x13619)));
evalcond[4]=(((r20*x13610*x13617))+((r20*x13619))+((r21*x13621))+(((-1.0)*x13618))+((r22*x13624))+(((-1.0)*cj2*x13615))+(((-1.0)*r21*x13616*x13625)));
evalcond[5]=(((cj3*x13613))+(((-1.0)*r00*x13611*x13623))+((r00*x13616))+((sj1*x13620))+((cj0*x13618))+((r01*x13610*x13619))+(((-1.0)*r02*x13626)));
evalcond[6]=(((r00*x13610*x13617))+((sj3*x13613))+(((-1.0)*cj0*sj2*x13615))+(((-1.0)*r01*x13616*x13625))+((r00*x13619))+((r02*x13624))+((cj1*x13620)));
evalcond[7]=(((sj1*x13612))+((r11*x13610*x13619))+((r11*x13617))+((r10*x13616))+(((-1.0)*r12*x13626))+(((-1.0)*r10*x13611*x13623))+((sj0*x13618)));
evalcond[8]=(((r12*x13624))+(((-1.0)*r11*x13616*x13625))+((r11*x13621))+((cj1*x13612))+(((-1.0)*sj1*sj2*x13614))+((r10*x13610*x13617))+((r10*x13619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13627=r21*r21;
IkReal x13628=cj5*cj5;
IkReal x13629=r20*r20;
IkReal x13630=(cj3*r20);
IkReal x13631=((1.0)*sj5);
IkReal x13632=(sj1*sj2);
IkReal x13633=((1.0)*sj3);
IkReal x13634=(cj3*cj5);
IkReal x13635=(cj1*cj2);
IkReal x13636=(cj5*r20);
IkReal x13637=(r21*sj5);
IkReal x13638=((1.0)*r22);
IkReal x13639=(sj3*x13627);
CheckValue<IkReal> x13640 = IKatan2WithCheck(IkReal((((x13632*x13636))+(((-1.0)*r21*x13631*x13632))+(((-2.0)*r21*x13628*x13630))+((x13635*x13637))+(((-1.0)*x13629*x13631*x13634))+((sj5*x13627*x13634))+((r21*x13630))+(((-1.0)*x13635*x13636)))),IkReal(((((-1.0)*r21*x13634*x13638))+((r22*x13632))+(((-1.0)*r22*x13630*x13631))+(((-1.0)*x13635*x13638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13640.valid){
continue;
}
CheckValue<IkReal> x13641=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13627*x13633))+(((2.0)*sj3*x13636*x13637))+(((-1.0)*x13628*x13629*x13633))+((x13628*x13639))+(((-1.0)*x13633*(r22*r22))))),-1);
if(!x13641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13640.value)+(((1.5707963267949)*(x13641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13642=IKcos(j4);
IkReal x13643=IKsin(j4);
IkReal x13644=(cj5*r21);
IkReal x13645=((1.0)*sj2);
IkReal x13646=(r20*sj5);
IkReal x13647=(r21*sj5);
IkReal x13648=(cj5*r20);
IkReal x13649=(r22*x13642);
IkReal x13650=(sj3*x13643);
IkReal x13651=(cj3*x13643);
evalcond[0]=(((r22*x13643))+(((-1.0)*x13642*x13648))+((x13642*x13647)));
evalcond[1]=((((-1.0)*x13648*x13650))+(((-1.0)*sj1*x13645))+(((-1.0)*sj3*x13649))+((cj1*cj2))+((x13647*x13650))+((cj3*x13644))+((cj3*x13646)));
evalcond[2]=(((x13648*x13651))+(((-1.0)*cj1*x13645))+(((-1.0)*cj2*sj1))+((sj3*x13644))+((sj3*x13646))+(((-1.0)*x13647*x13651))+((cj3*x13649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13652=(cj4*cj5);
IkReal x13653=(cj4*sj5);
if( IKabs((((r01*x13653))+(((-1.0)*r00*x13652))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x13653))+((r10*x13652))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x13653))+(((-1.0)*r00*x13652))+((r02*sj4))))+IKsqr(((((-1.0)*r11*x13653))+((r10*x13652))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x13653))+(((-1.0)*r00*x13652))+((r02*sj4))), ((((-1.0)*r11*x13653))+((r10*x13652))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13654=IKcos(j0);
IkReal x13655=IKsin(j0);
IkReal x13656=((0.238)*sj2);
IkReal x13657=((1.0)*cj4);
IkReal x13658=(cj3*cj4);
IkReal x13659=((0.238)*cj2);
IkReal x13660=((1.0)*sj2);
IkReal x13661=(cj5*r01);
IkReal x13662=(cj5*r00);
IkReal x13663=(sj3*sj4);
IkReal x13664=(r01*sj5);
IkReal x13665=(cj5*r11);
IkReal x13666=(r00*sj5);
IkReal x13667=(r11*sj5);
IkReal x13668=(cj3*r10);
IkReal x13669=(cj3*sj4);
IkReal x13670=(r10*sj5);
IkReal x13671=(cj5*r10);
IkReal x13672=(sj1*x13655);
IkReal x13673=(cj1*x13654);
IkReal x13674=(cj1*x13655);
IkReal x13675=(sj1*x13654);
evalcond[0]=(x13654+(((-1.0)*x13657*x13671))+((r12*sj4))+((cj4*x13667)));
evalcond[1]=((((-1.0)*x13655))+(((-1.0)*x13657*x13662))+((r02*sj4))+((cj4*x13664)));
evalcond[2]=(((x13659*x13675))+(((0.265)*x13675))+(((-0.113)*x13655))+((x13656*x13673))+(((-1.0)*px))+(((-0.095)*x13661))+(((-0.095)*x13666)));
evalcond[3]=(((x13659*x13672))+(((0.113)*x13654))+(((0.265)*x13672))+((x13656*x13674))+(((-1.0)*py))+(((-0.095)*x13670))+(((-0.095)*x13665)));
evalcond[4]=(((cj3*x13661))+((cj3*x13666))+((cj2*x13675))+(((-1.0)*r02*sj3*x13657))+(((-1.0)*x13662*x13663))+((sj2*x13673))+((x13663*x13664)));
evalcond[5]=((((-1.0)*x13664*x13669))+((cj2*x13673))+((sj3*x13666))+((sj3*x13661))+(((-1.0)*x13660*x13675))+((r02*x13658))+((x13662*x13669)));
evalcond[6]=(((cj3*x13665))+((cj2*x13672))+((sj5*x13668))+((sj2*x13674))+(((-1.0)*x13663*x13671))+(((-1.0)*r12*sj3*x13657))+((x13663*x13667)));
evalcond[7]=((((-1.0)*x13667*x13669))+((r12*x13658))+((cj2*x13674))+((sj3*x13665))+(((-1.0)*x13660*x13672))+((sj3*x13670))+((cj5*sj4*x13668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13676=r21*r21;
IkReal x13677=cj5*cj5;
IkReal x13678=r20*r20;
IkReal x13679=(r20*r21);
IkReal x13680=(cj5*sj5);
IkReal x13681=((1.0)*sj3);
IkReal x13682=(cj1*sj2);
IkReal x13683=(cj5*r20);
IkReal x13684=(cj2*sj1);
IkReal x13685=(cj3*x13677);
IkReal x13686=((1.0)*r21*sj5);
CheckValue<IkReal> x13687 = IKatan2WithCheck(IkReal((((x13682*x13683))+(((-1.0)*x13684*x13686))+((sj3*x13676*x13680))+(((-1.0)*x13682*x13686))+((sj3*x13679))+((x13683*x13684))+(((-2.0)*sj3*x13677*x13679))+(((-1.0)*x13678*x13680*x13681)))),IkReal((((r22*x13682))+((r22*x13684))+(((-1.0)*r20*r22*sj5*x13681))+(((-1.0)*cj5*r21*r22*x13681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13687.valid){
continue;
}
CheckValue<IkReal> x13688=IKPowWithIntegerCheck(IKsign((((cj3*x13676))+((cj3*(r22*r22)))+(((-2.0)*cj3*x13679*x13680))+((x13678*x13685))+(((-1.0)*x13676*x13685)))),-1);
if(!x13688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13687.value)+(((1.5707963267949)*(x13688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13689=IKcos(j4);
IkReal x13690=IKsin(j4);
IkReal x13691=(cj5*r21);
IkReal x13692=((1.0)*sj2);
IkReal x13693=(r20*sj5);
IkReal x13694=(r21*sj5);
IkReal x13695=(cj5*r20);
IkReal x13696=(r22*x13689);
IkReal x13697=(sj3*x13690);
IkReal x13698=(cj3*x13690);
evalcond[0]=(((r22*x13690))+((x13689*x13694))+(((-1.0)*x13689*x13695)));
evalcond[1]=((((-1.0)*x13695*x13697))+(((-1.0)*sj3*x13696))+(((-1.0)*sj1*x13692))+((cj1*cj2))+((cj3*x13693))+((cj3*x13691))+((x13694*x13697)));
evalcond[2]=(((x13695*x13698))+((sj3*x13693))+((sj3*x13691))+(((-1.0)*cj2*sj1))+(((-1.0)*x13694*x13698))+(((-1.0)*cj1*x13692))+((cj3*x13696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13699=(cj4*cj5);
IkReal x13700=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x13699))+((r02*sj4))+((r01*x13700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13699))+(((-1.0)*r11*x13700))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x13699))+((r02*sj4))+((r01*x13700))))+IKsqr((((r10*x13699))+(((-1.0)*r11*x13700))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x13699))+((r02*sj4))+((r01*x13700))), (((r10*x13699))+(((-1.0)*r11*x13700))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13701=IKcos(j0);
IkReal x13702=IKsin(j0);
IkReal x13703=((0.238)*sj2);
IkReal x13704=((1.0)*cj4);
IkReal x13705=(cj3*cj4);
IkReal x13706=((0.238)*cj2);
IkReal x13707=((1.0)*sj2);
IkReal x13708=(cj5*r01);
IkReal x13709=(cj5*r00);
IkReal x13710=(sj3*sj4);
IkReal x13711=(r01*sj5);
IkReal x13712=(cj5*r11);
IkReal x13713=(r00*sj5);
IkReal x13714=(r11*sj5);
IkReal x13715=(cj3*r10);
IkReal x13716=(cj3*sj4);
IkReal x13717=(r10*sj5);
IkReal x13718=(cj5*r10);
IkReal x13719=(sj1*x13702);
IkReal x13720=(cj1*x13701);
IkReal x13721=(cj1*x13702);
IkReal x13722=(sj1*x13701);
evalcond[0]=(x13701+((r12*sj4))+(((-1.0)*x13704*x13718))+((cj4*x13714)));
evalcond[1]=((((-1.0)*x13702))+((r02*sj4))+(((-1.0)*x13704*x13709))+((cj4*x13711)));
evalcond[2]=((((0.265)*x13722))+((x13706*x13722))+(((-1.0)*px))+(((-0.095)*x13713))+(((-0.095)*x13708))+(((-0.113)*x13702))+((x13703*x13720)));
evalcond[3]=((((0.113)*x13701))+((x13706*x13719))+(((0.265)*x13719))+(((-1.0)*py))+(((-0.095)*x13712))+(((-0.095)*x13717))+((x13703*x13721)));
evalcond[4]=(((sj2*x13720))+((x13710*x13711))+((cj3*x13713))+((cj3*x13708))+(((-1.0)*x13709*x13710))+(((-1.0)*r02*sj3*x13704))+((cj2*x13722)));
evalcond[5]=(((sj3*x13708))+((sj3*x13713))+(((-1.0)*x13707*x13722))+((x13709*x13716))+((r02*x13705))+((cj2*x13720))+(((-1.0)*x13711*x13716)));
evalcond[6]=(((sj2*x13721))+((x13710*x13714))+((sj5*x13715))+((cj3*x13712))+((cj2*x13719))+(((-1.0)*x13710*x13718))+(((-1.0)*r12*sj3*x13704)));
evalcond[7]=(((cj5*sj4*x13715))+((r12*x13705))+((sj3*x13712))+((sj3*x13717))+(((-1.0)*x13707*x13719))+(((-1.0)*x13714*x13716))+((cj2*x13721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - elerobot (dcbd2ffaa68b525a8d7d2adcb2eb6f08)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
