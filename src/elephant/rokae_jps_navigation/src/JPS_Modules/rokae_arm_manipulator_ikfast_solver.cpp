/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2022-04-06 20:22:03.723317
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "JPS_Modules/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[0]);
x11=IKsin(j[4]);
x12=((0.095)*x2);
x13=((1.0)*x5);
x14=((0.095)*x4);
x15=((1.0)*x0);
x16=((0.13)*x5);
x17=((0.24)*x2);
x18=((0.13)*x11);
x19=((1.0)*x2);
x20=((1.0)*x4);
x21=((0.13)*x6);
x22=((0.24)*x4);
x23=((1.0)*x11);
x24=((1.0)*x6);
x25=(x10*x9);
x26=(x1*x10);
x27=((-1.0)*x5);
x28=(x10*x3);
x29=(x0*x3);
x30=(x0*x1);
x31=((-1.0)*x6);
x32=(x20*x3);
x33=(x1*x15*x2);
x34=(x19*x26);
x35=((((-1.0)*x32))+((x1*x19)));
x36=(((x19*x3))+((x1*x20)));
x37=((-1.0)*x36);
x38=(((x29*x4))+(((-1.0)*x33)));
x39=((((-1.0)*x34))+((x28*x4)));
x40=(x37*x6);
IkReal x49=((1.0)*x15);
x41=((((-1.0)*x2*x3*x49))+(((-1.0)*x1*x4*x49)));
x42=((((-1.0)*x19*x28))+(((-1.0)*x20*x26)));
x43=(((x35*x6))+((x36*x5)));
x44=(((x5*((x33+(((-1.0)*x15*x3*x4))))))+((x41*x6)));
x45=(((x5*((x34+(((-1.0)*x20*x28))))))+((x42*x6)));
x46=((((-1.0)*x24*x38))+(((-1.0)*x13*x41)));
x47=((((-1.0)*x24*x39))+(((-1.0)*x13*x42)));
x48=(x11*x47);
eerot[0]=(((x7*(((((-1.0)*x25))+((x11*((((x27*x41))+((x31*x38))))))))))+((x44*x8)));
eerot[1]=(((x8*(((((1.0)*x25))+(((-1.0)*x23*x46))))))+((x44*x7)));
eerot[2]=(((x46*x9))+((x10*x11)));
eetrans[0]=((0.005)+(((0.265)*x30))+((x6*((((x14*x30))+((x12*x29))))))+((x5*(((((-1.0)*x12*x30))+((x14*x29))))))+((x22*x30))+((x9*(((((-1.0)*x16*x41))+(((-1.0)*x21*x38))))))+((x17*x29))+(((-0.115)*x10))+((x10*x18)));
eerot[3]=(((x45*x8))+((x7*((((x0*x9))+x48)))));
eerot[4]=(((x45*x7))+((x8*(((((-1.0)*x15*x9))+(((-1.0)*x23*x47)))))));
eerot[5]=(((x47*x9))+(((-1.0)*x11*x15)));
eetrans[1]=(((x22*x26))+((x5*(((((-1.0)*x12*x26))+((x14*x28))))))+(((0.115)*x0))+(((-1.0)*x0*x18))+((x17*x28))+((x9*(((((-1.0)*x16*x42))+(((-1.0)*x21*x39))))))+(((0.265)*x26))+((x6*((((x14*x26))+((x12*x28)))))));
eerot[6]=(((x43*x8))+((x11*x7*((((x27*x35))+((x31*x37)))))));
eerot[7]=(((x11*x8*((((x35*x5))+x40))))+((x43*x7)));
eerot[8]=(x9*(((((-1.0)*x24*x37))+(((-1.0)*x13*x35)))));
IkReal x50=((1.0)*x12);
IkReal x51=((1.0)*x1);
eetrans[2]=((0.115)+((x9*(((((-1.0)*x16*x35))+(((-1.0)*x21*x37))))))+(((0.265)*x3))+(((-1.0)*x17*x51))+((x22*x3))+((x6*(((((-1.0)*x1*x50))+((x14*x3))))))+((x5*(((((-1.0)*x14*x51))+(((-1.0)*x3*x50)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.005)+(((-0.13)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.13)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.115)+(((-0.13)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.19)*npx);
IkReal x56=((0.19)*npy);
IkReal x57=((0.095)*r20);
IkReal x58=((0.095)*r22);
IkReal x59=((-0.095)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.095)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*rxp2_2);
IkReal x66=((-1.0)*npx);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x65;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-0.095)*r22);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x65;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x58;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=((-1.0)*npy);
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=r21;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=rxp1_2;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=npy;
matrixinvcoeffs[122]=x63;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x64;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npx;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=x60;
matrixinvcoeffs[140]=x57;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x61;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x66;
matrixinvcoeffs[154]=r20;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x57;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp0_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=((-1.0)*r22);
matrixinvcoeffs[172]=x58;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x65;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=((-1.0)*npz);
matrixinvcoeffs[186]=r22;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x58;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=r21;
matrixinvcoeffs[197]=npy;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x64;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=r21;
matrixinvcoeffs[215]=npy;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x64;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=((0.095)*r21);
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x60;
matrixinvcoeffs[229]=x66;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp0_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x57;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x60;
matrixinvcoeffs[247]=x66;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp0_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_11=matrixinvcoeffs[180], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_10=matrixinvcoeffs[165], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_10=matrixinvcoeffs[173], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_10=matrixinvcoeffs[175], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x67=pz*pz;
IkReal x68=(gclwh8_8*rxp0_2);
IkReal x69=(gclwh8_8*r20);
IkReal x70=(gclwh13_13*r21);
IkReal x71=((0.1007)*rxp1_2);
IkReal x72=(npy*pz);
IkReal x73=((4.0)*gclwh12_11);
IkReal x74=(pp*r20);
IkReal x75=((0.001037875)*r22);
IkReal x76=(gclwh5_0*r22);
IkReal x77=((0.009025)*pz);
IkReal x78=((0.0912)*rxp1_2);
IkReal x79=((0.38)*rxp0_2);
IkReal x80=(pp*r22);
IkReal x81=(npz*pz);
IkReal x82=((0.19)*rxp1_2);
IkReal x83=(gclwh9_9*rxp0_2);
IkReal x84=(gclwh11_0*rxp2_2);
IkReal x85=(gclwh14_2*pz);
IkReal x86=(gclwh6_3*rxp1_2);
IkReal x87=(gclwh8_14*rxp0_2);
IkReal x88=((2.0)*gclwh4_11);
IkReal x89=((0.01805)*r22);
IkReal x90=((0.19)*rxp0_2);
IkReal x91=((0.02185)*rxp1_2);
IkReal x92=(pp*r21);
IkReal x93=(npx*pz);
IkReal x94=((0.0361)*r22);
IkReal x95=(gclwh10_2*rxp2_2);
IkReal x96=((0.01805)*r20);
IkReal x97=((0.00911525)*r20);
IkReal x98=(gclwh9_15*r20);
IkReal x99=((0.02185)*rxp0_2);
IkReal x100=(gclwh14_2*r20);
IkReal x101=((0.19)*rxp2_2);
IkReal x102=((4.0)*gclwh15_10);
IkReal x103=((2.0)*gclwh15_10);
IkReal x104=(gclwh12_11*r21);
IkReal x105=(gclwh11_1*rxp2_2);
IkReal x106=((1.0)*pz);
IkReal x107=((4.0)*gclwh14_11);
IkReal x108=(gclwh4_3*r22);
IkReal x109=(gclwh9_0*rxp0_2);
IkReal x110=(gclwh12_2*r21);
IkReal x111=((2.0)*gclwh13_10);
IkReal x112=((0.0912)*rxp0_2);
IkReal x113=((0.38)*rxp2_2);
IkReal x114=((0.1919)*rxp2_2);
IkReal x115=((0.1007)*rxp2_2);
IkReal x116=((0.02185)*rxp2_2);
IkReal x117=((0.0912)*rxp2_2);
IkReal x118=((0.0437)*rxp1_2);
IkReal x119=((0.00478325)*r21);
IkReal x120=(gclwh6_12*rxp1_2);
IkReal x121=((0.38)*rxp1_2);
IkReal x122=(gclwh12_12*r21);
IkReal x123=((0.004332)*r22);
IkReal x124=(gclwh13_0*r21);
IkReal x125=((0.009025)*r22);
IkReal x126=((0.001037875)*r20);
IkReal x127=(gclwh7_0*rxp1_2);
IkReal x128=(gclwh15_10*r20);
IkReal x129=(gclwh6_8*rxp1_2);
IkReal x130=((0.23)*gclwh11_15);
IkReal x131=((0.76)*rxp1_2);
IkReal x132=(gclwh6_2*rxp1_2);
IkReal x133=((0.23)*gclwh8_14);
IkReal x134=(gclwh8_2*rxp0_2);
IkReal x135=(gclwh14_12*r20);
IkReal x136=(gclwh4_12*r22);
IkReal x137=((0.00478325)*r22);
IkReal x138=(gclwh15_0*r20);
IkReal x139=((0.001037875)*r21);
IkReal x140=(gclwh13_10*r21);
IkReal x141=(gclwh10_8*rxp2_2);
IkReal x142=((4.0)*gclwh4_11);
IkReal x143=((0.76)*rxp0_2);
IkReal x144=((4.0)*gclwh5_10);
IkReal x145=((2.0)*gclwh12_11);
IkReal x146=((0.0437)*rxp2_2);
IkReal x147=((0.00091675)*rxp0_2);
IkReal x148=((2.0)*gclwh14_11);
IkReal x149=((0.23)*gclwh9_15);
IkReal x150=((0.00207575)*r22);
IkReal x151=(gclwh11_9*rxp2_2);
IkReal x152=((0.004332)*r21);
IkReal x153=((0.23)*gclwh7_15);
IkReal x154=(gclwh4_2*r22);
IkReal x155=(gclwh7_1*rxp1_2);
IkReal x156=((0.00207575)*r21);
IkReal x157=((2.0)*gclwh5_10);
IkReal x158=(gclwh8_12*rxp0_2);
IkReal x159=((4.0)*gclwh13_10);
IkReal x160=(gclwh14_11*r20);
IkReal x161=((0.01805)*r21);
IkReal x162=((0.23)*gclwh10_14);
IkReal x163=((0.19)*pz);
IkReal x164=((0.76)*rxp2_2);
IkReal x165=((0.004332)*r20);
IkReal x166=((0.04925275)*rxp0_2);
IkReal x167=(gclwh7_9*rxp1_2);
IkReal x168=((0.23)*gclwh6_14);
IkReal x169=((0.02185)*x87);
IkReal x170=(gclwh10_14*x116);
IkReal x171=(gclwh10_5*x116);
IkReal x172=(gclwh8_5*x99);
IkReal x173=(gclwh4_5*x75);
IkReal x174=(gclwh12_5*x139);
IkReal x175=(gclwh6_14*x91);
IkReal x176=(gclwh6_5*x91);
IkReal x177=(gclwh14_5*x126);
IkReal x178=(gclwh6_11*x82);
IkReal x179=((0.009025)*x160);
IkReal x180=(gclwh4_11*x125);
IkReal x181=(gclwh10_11*x101);
IkReal x182=(gclwh8_11*x90);
IkReal x183=((0.009025)*x104);
IkReal x184=(gclwh9_10*x90);
IkReal x185=((0.009025)*x140);
IkReal x186=(gclwh11_10*x101);
IkReal x187=(gclwh5_10*x125);
IkReal x188=(gclwh7_10*x82);
IkReal x189=((0.009025)*x128);
IkReal x190=(gclwh11_7*x116);
IkReal x191=(gclwh9_15*x99);
IkReal x192=(gclwh9_7*x99);
IkReal x193=(gclwh5_7*x75);
IkReal x194=(gclwh13_7*x139);
IkReal x195=(gclwh11_15*x116);
IkReal x196=(gclwh15_7*x126);
IkReal x197=(gclwh7_15*x91);
IkReal x198=(gclwh7_7*x91);
IkReal x199=(gclwh14_5*x99);
IkReal x200=(gclwh8_5*x126);
IkReal x201=(gclwh10_14*x75);
IkReal x202=(gclwh8_14*x126);
IkReal x203=(gclwh10_5*x75);
IkReal x204=(gclwh6_14*x139);
IkReal x205=(gclwh12_5*x91);
IkReal x206=(gclwh6_5*x139);
IkReal x207=(gclwh4_5*x116);
IkReal x208=(gclwh13_7*x91);
IkReal x209=(gclwh7_15*x139);
IkReal x210=(gclwh5_7*x116);
IkReal x211=(gclwh7_7*x139);
IkReal x212=(gclwh15_7*x99);
IkReal x213=(gclwh9_7*x126);
IkReal x214=((0.001037875)*x98);
IkReal x215=(gclwh11_15*x75);
IkReal x216=(gclwh11_7*x75);
IkReal x217=(gclwh10_11*x113);
IkReal x218=((0.01805)*x104);
IkReal x219=(gclwh8_11*x79);
IkReal x220=(gclwh4_11*x89);
IkReal x221=(gclwh6_11*x121);
IkReal x222=(gclwh14_11*x96);
IkReal x223=(gclwh6_14*x118);
IkReal x224=((0.01805)*x140);
IkReal x225=(gclwh9_10*x79);
IkReal x226=(gclwh11_10*x113);
IkReal x227=(gclwh5_10*x89);
IkReal x228=(gclwh7_10*x121);
IkReal x229=(gclwh15_10*x96);
IkReal x230=((0.23)*gclwh14_5*x93);
IkReal x231=((0.115)*gclwh4_5*x80);
IkReal x232=((0.115)*gclwh12_5*x92);
IkReal x233=((0.23)*gclwh12_5*x72);
IkReal x234=((0.115)*gclwh14_5*x74);
IkReal x235=((0.23)*gclwh4_5*x81);
IkReal x236=(x74*x85);
IkReal x237=(x81*x88);
IkReal x238=(gclwh8_3*pp*x90);
IkReal x239=(gclwh4_3*pp*x80);
IkReal x240=(x100*x77);
IkReal x241=(gclwh6_2*pz*x82);
IkReal x242=(x145*x72);
IkReal x243=(gclwh8_2*pz*x90);
IkReal x244=(x148*x93);
IkReal x245=(gclwh6_3*pp*x82);
IkReal x246=(x163*x95);
IkReal x247=(x110*x77);
IkReal x248=(x154*x77);
IkReal x249=(gclwh15_0*pz*x74);
IkReal x250=(gclwh9_1*pp*x90);
IkReal x251=(gclwh7_0*pz*x82);
IkReal x252=(gclwh11_1*pp*x101);
IkReal x253=(x103*x93);
IkReal x254=(x138*x77);
IkReal x255=(x163*x84);
IkReal x256=(gclwh9_0*pz*x90);
IkReal x257=(x124*x77);
IkReal x258=(x76*x77);
IkReal x259=(x157*x81);
IkReal x260=(x111*x72);
IkReal x261=(gclwh7_1*pp*x82);
IkReal x262=((0.115)*gclwh5_7*x80);
IkReal x263=((0.23)*gclwh15_7*x93);
IkReal x264=((0.115)*gclwh13_7*x92);
IkReal x265=((0.115)*gclwh15_7*x74);
IkReal x266=((0.23)*gclwh5_7*x81);
IkReal x267=((0.23)*gclwh13_7*x72);
IkReal x268=((0.115)*gclwh10_14*x80);
IkReal x269=(x168*x72);
IkReal x270=((0.23)*gclwh6_5*x72);
IkReal x271=((0.115)*gclwh10_5*x80);
IkReal x272=((0.115)*gclwh8_5*x74);
IkReal x273=((0.115)*gclwh8_14*x74);
IkReal x274=((0.23)*gclwh10_5*x81);
IkReal x275=((0.23)*gclwh8_5*x93);
IkReal x276=((0.115)*gclwh6_5*x92);
IkReal x277=(x162*x81);
IkReal x278=((0.115)*gclwh6_14*x92);
IkReal x279=(x133*x93);
IkReal x280=((0.115)*gclwh7_7*x92);
IkReal x281=((0.115)*gclwh7_15*x92);
IkReal x282=((0.23)*gclwh9_7*x93);
IkReal x283=((0.23)*gclwh11_7*x81);
IkReal x284=(x149*x93);
IkReal x285=(x130*x81);
IkReal x286=((0.115)*gclwh11_7*x80);
IkReal x287=((0.23)*gclwh7_7*x72);
IkReal x288=((0.115)*gclwh9_15*x74);
IkReal x289=(x153*x72);
IkReal x290=((0.115)*gclwh11_15*x80);
IkReal x291=((0.115)*gclwh9_7*x74);
IkReal x292=(x80*x88);
IkReal x293=(x145*x92);
IkReal x294=(x107*x93);
IkReal x295=(x148*x74);
IkReal x296=(x72*x73);
IkReal x297=(x142*x81);
IkReal x298=(x111*x92);
IkReal x299=(x102*x93);
IkReal x300=(x157*x80);
IkReal x301=(x103*x74);
IkReal x302=(x144*x81);
IkReal x303=(x159*x72);
IkReal x304=((2.0)*npz*x67);
IkReal x305=((2.0)*npx*x67);
IkReal x306=((2.0)*npy*x67);
IkReal x307=(gclwh12_2*x306);
IkReal x308=(gclwh4_2*x304);
IkReal x309=((2.0)*gclwh4_3*pp*x81);
IkReal x310=(gclwh12_2*x106*x92);
IkReal x311=(gclwh4_2*x106*x80);
IkReal x312=(gclwh14_2*x305);
IkReal x313=(gclwh5_0*x304);
IkReal x314=(gclwh13_0*x306);
IkReal x315=(pp*x106*x76);
IkReal x316=(gclwh15_0*x305);
IkReal x317=(gclwh13_0*x106*x92);
IkReal x318=(((gclwh10_14*x146))+(((0.0437)*x87)));
IkReal x319=(x170+x169);
IkReal x320=(x191+x195);
IkReal x321=(x318+(((-1.0)*x223)));
IkReal x322=((((-0.0437)*gclwh9_15*rxp0_2))+(((-1.0)*gclwh11_15*x146))+((gclwh7_15*x118)));
IkReal x323=(x188+x189+x259+x260);
IkReal x324=(x179+x178+x237+x242);
IkReal x325=(x209+x285+x284+x281);
IkReal x326=(x204+x277+x278+x279);
IkReal x327=(x180+x181+x182+x183+x244);
IkReal x328=(x184+x185+x186+x187+x253);
IkReal x329=(x177+x176+x233+x234+x235);
IkReal x330=(x198+x196+x265+x267+x266);
IkReal x331=(x302+x303+x301+x229+x228);
IkReal x332=(x221+x222+x295+x296+x297);
IkReal x333=(x202+x201+x269+x268+x273);
IkReal x334=(x214+x215+x290+x289+x288);
IkReal x335=(x210+x211+x208+x283+x282+x280);
IkReal x336=(x199+x203+x200+x272+x270+x271);
IkReal x337=(x207+x206+x205+x276+x274+x275);
IkReal x338=(x212+x213+x216+x291+x287+x286);
IkReal x339=(x217+x218+x219+x220+x292+x293+x294);
IkReal x340=(x171+x173+x172+x174+x232+x230+x231);
IkReal x341=(x300+x225+x224+x227+x226+x298+x299);
IkReal x342=(x193+x192+x190+x194+x264+x263+x262);
IkReal x343=(x314+x313+x254+x250+x251+x252+x249);
IkReal x344=(x308+x307+x238+x239+x236+x241+x240);
IkReal x345=(x315+x317+x316+x258+x255+x256+x257+x261);
IkReal x346=(x309+x311+x310+x312+x243+x247+x246+x245+x248);
op[0]=((0.11615)+(((-1.0)*x329))+x175+x340+(((-1.0)*x319)));
op[1]=((((-0.2502)*gclwh4_3*x80))+(((-0.0779)*x141))+(((-1.01)*gclwh4_2*x81))+(((0.505)*gclwh4_2*x80))+(((-1.01)*gclwh12_2*x72))+(((-0.09595)*x132))+(((1.01)*npx*x85))+(((0.51845)*gclwh4_3*x81))+(((-1.0)*x324))+(((0.004557625)*x110))+(((-0.0779)*x68))+(((0.0779)*x129))+((gclwh4_11*x80))+(((0.505)*gclwh12_2*x92))+(((0.09595)*x95))+x327+x344+(((-0.004557625)*x100))+(((0.004557625)*x154))+(((-0.505)*gclwh14_2*x74))+(((0.09595)*x134))+(((-1.0)*x346))+(((-1.0)*gclwh8_3*x166))+((gclwh12_11*x92))+(((-1.0)*gclwh14_11*x74))+(((-0.002339505625)*x108))+(((0.04925275)*x86)));
op[2]=((((0.48)*gclwh12_12*x92))+(((-0.1007)*x68))+(((0.96)*gclwh14_12*x93))+((gclwh8_12*x112))+((gclwh10_12*x117))+(((0.004332)*x122))+x339+(((0.48)*gclwh4_12*x80))+(((-0.96)*gclwh4_12*x81))+(((-0.96)*gclwh12_12*x72))+(((-1.0)*x332))+(((-1.0)*gclwh10_8*x115))+((gclwh4_12*x123))+(((-0.48)*gclwh14_12*x74))+((gclwh6_8*x71))+(((-1.0)*gclwh6_12*x78))+(((-0.004332)*x135)));
op[3]=x321;
op[4]=((0.00575)+(((-1.0)*x175))+(((-1.0)*x329))+x319+x340);
op[5]=((((0.0042)*gclwh4_3*x80))+(((0.00475)*x95))+(((0.0228)*x141))+(((-0.0228)*x129))+(((0.00965)*gclwh4_3*x81))+(((-1.0)*gclwh4_11*x80))+(((0.0228)*x68))+(((-1.0)*x327))+x324+x344+(((0.00475)*x134))+((gclwh14_11*x74))+(((0.000225625)*x154))+(((-0.025)*gclwh14_2*x74))+(((0.05)*npx*x85))+(((-1.0)*gclwh8_3*x147))+(((0.025)*gclwh4_2*x80))+(((-0.00475)*x132))+(((-1.0)*gclwh12_11*x92))+(((0.00091675)*x86))+(((-1.0)*x346))+(((-0.05)*gclwh12_2*x72))+(((-0.000225625)*x100))+(((0.025)*gclwh12_2*x92))+(((-0.05)*gclwh4_2*x81))+(((-4.3545625e-5)*x108))+(((0.000225625)*x110)));
op[6]=((((-0.114)*x167))+(((0.04925275)*x155))+(((0.114)*x83))+(((-1.0)*gclwh5_10*x80))+(((0.505)*pp*x76))+(((-0.505)*gclwh15_0*x74))+(((-0.09595)*x127))+(((0.114)*x151))+(((1.01)*gclwh15_0*x93))+(((-1.0)*x328))+(((-0.004557625)*x138))+(((0.004557625)*x124))+(((-1.0)*gclwh9_1*x166))+(((-1.0)*gclwh13_10*x92))+x323+x343+(((0.09595)*x84))+((gclwh15_10*x74))+(((0.505)*gclwh13_0*x92))+(((-1.0)*x345))+(((0.09595)*x109))+(((-1.01)*gclwh5_0*x81))+(((0.004557625)*x76))+(((-0.04925275)*x105))+(((-1.01)*gclwh13_0*x72)));
op[7]=((0.11615)+(((-1.0)*x320))+x197+x342+(((-1.0)*x330)));
op[8]=x322;
op[9]=(((gclwh7_9*x71))+(((-1.0)*gclwh15_13*x165))+(((-1.0)*gclwh7_13*x78))+(((-0.96)*gclwh5_13*x81))+(((-0.96)*gclwh13_13*x72))+(((0.48)*gclwh5_13*x80))+(((0.004332)*x70))+((gclwh5_13*x123))+(((-0.48)*gclwh15_13*x74))+((gclwh9_13*x112))+(((0.48)*pp*x70))+x341+(((-1.0)*x331))+(((-0.1007)*x83))+(((0.96)*gclwh15_13*x93))+((gclwh11_13*x117))+(((-1.0)*gclwh11_9*x115)));
op[10]=(((gclwh5_10*x80))+(((-1.0)*gclwh9_1*x147))+(((-1.0)*x323))+(((-0.05)*gclwh5_0*x81))+(((-0.00091675)*x105))+x328+x343+(((0.0133)*x83))+(((0.025)*gclwh13_0*x92))+(((-0.00475)*x127))+(((0.000225625)*x124))+(((0.00091675)*x155))+(((0.025)*pp*x76))+(((-0.0133)*x167))+(((-0.05)*gclwh13_0*x72))+(((0.00475)*x109))+(((0.000225625)*x76))+(((-1.0)*x345))+((gclwh13_10*x92))+(((-0.025)*gclwh15_0*x74))+(((0.05)*gclwh15_0*x93))+(((-1.0)*gclwh15_10*x74))+(((0.0133)*x151))+(((-0.000225625)*x138))+(((0.00475)*x84)));
op[11]=((0.00575)+(((-1.0)*x197))+x320+x342+(((-1.0)*x330)));
op[12]=(x336+x326+(((-1.0)*x333))+(((-1.0)*x337)));
op[13]=((-0.2418)+(((0.82)*gclwh10_8*npz*pz))+(((-1.01)*gclwh8_2*npx*pz))+(((-0.41)*gclwh8_8*pp*r20))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((0.09595)*gclwh14_2*rxp0_2))+(((0.505)*gclwh3_2*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((-0.26825)*gclwh3_3*pp*r21))+(((-1.01)*gclwh1_2*npx*pz))+(((-2.0)*gclwh8_11*npx*pz))+(((0.004557625)*gclwh8_2*r20))+(((-0.82)*gclwh6_8*npy*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.41)*gclwh6_8*pp*r21))+(((0.82)*gclwh8_8*npx*pz))+((gclwh6_2*pp*pz*r21))+(((0.505)*gclwh10_2*pp*r22))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.004557625)*gclwh3_2*r21))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((2.0)*gclwh6_11*npy*pz))+(((-0.004557625)*gclwh1_2*r20))+(((0.505)*gclwh8_2*pp*r20))+(((0.009025)*gclwh3_2*pz*r21))+((gclwh8_11*pp*r20))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.19)*gclwh14_11*rxp0_2))+((gclwh3_3*r21*(pp*pp)))+(((-0.09595)*gclwh4_2*rxp2_2))+((gclwh1_3*r20*(pp*pp)))+(((0.2502)*gclwh6_3*pp*r21))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.002339505625)*gclwh6_3*r21))+(((-1.01)*gclwh3_2*npy*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((0.002339505625)*gclwh3_3*r21))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.505)*gclwh1_2*pp*r20))+(((-0.26825)*gclwh1_3*pp*r20))+(((0.51845)*gclwh8_3*npx*pz))+(((-1.01)*gclwh10_2*npz*pz))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-2.0)*gclwh10_11*npz*pz))+(((0.009025)*gclwh10_11*r22))+(((-0.00370025)*gclwh10_8*r22))+(((-0.41)*gclwh10_8*pp*r22))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((0.51845)*gclwh3_3*npy*pz))+(((-0.51845)*gclwh6_3*npy*pz))+(((-0.009025)*gclwh10_2*pz*r22))+(((-0.505)*gclwh6_2*pp*r21))+(((-0.004557625)*gclwh6_2*r21))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-0.002339505625)*gclwh8_3*r20))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+(((-0.00370025)*gclwh8_8*r20))+(((-0.09595)*gclwh12_2*rxp1_2))+((gclwh10_11*pp*r22))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.004557625)*gclwh10_2*r22))+(((-0.2502)*gclwh8_3*pp*r20))+(((0.00370025)*gclwh6_8*r21))+(((0.04925275)*gclwh4_3*rxp2_2))+(((0.002339505625)*gclwh1_3*r20))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((1.01)*gclwh6_2*npy*pz))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((0.51845)*gclwh1_3*npx*pz))+((gclwh8_3*r20*(pp*pp))));
op[14]=((0.0012)+(((1.06)*gclwh10_8*x81))+(((0.53)*gclwh6_8*x92))+(((-0.00478325)*x69))+(((-2.0)*gclwh6_11*x92))+(((-1.0)*gclwh6_11*x161))+(((-1.0)*gclwh12_11*x121))+(((-1.0)*gclwh6_12*x152))+(((2.0)*gclwh10_11*x80))+(((-4.0)*gclwh8_11*x93))+(((4.0)*gclwh6_11*x72))+(((2.0)*gclwh8_11*x74))+(((-1.0)*gclwh4_11*x113))+((gclwh10_12*x123))+(((-1.0)*gclwh4_12*x117))+(((-0.53)*gclwh10_8*x80))+((gclwh6_8*x119))+(((-4.0)*gclwh10_11*x81))+((gclwh14_11*x79))+(((-0.53)*pp*x69))+((gclwh8_12*x165))+(((1.06)*gclwh8_8*x93))+(((-1.06)*gclwh6_8*x72))+(((-1.0)*gclwh12_12*x78))+(((0.48)*gclwh10_12*x80))+((gclwh8_11*x96))+(((-0.96)*gclwh10_12*x81))+(((-0.96)*gclwh8_12*x93))+(((-1.0)*gclwh10_8*x137))+(((-0.48)*gclwh6_12*x92))+(((0.48)*gclwh8_12*x74))+((gclwh10_11*x89))+((gclwh14_12*x112))+(((0.96)*gclwh6_12*x72)));
op[15]=((((0.46)*gclwh6_14*x72))+((x162*x80))+(((-0.46)*gclwh10_14*x81))+(((0.00207575)*gclwh8_14*r20))+((gclwh10_14*x150))+(((-1.0)*gclwh6_14*x156))+(((-0.46)*gclwh8_14*x93))+((x133*x74))+(((-1.0)*x168*x92)));
op[16]=((((-1.0)*x326))+x333+x336+(((-1.0)*x337)));
op[17]=((-0.0126)+(((-0.24)*gclwh10_8*npz*pz))+(((-4.3545625e-5)*gclwh8_3*r20))+(((0.001083)*gclwh10_8*r22))+(((-0.19)*gclwh14_11*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((-0.05)*gclwh10_2*npz*pz))+(((4.3545625e-5)*gclwh6_3*r21))+(((-0.05)*gclwh3_2*npy*pz))+(((-0.12)*gclwh6_8*pp*r21))+(((-0.00475)*gclwh4_2*rxp2_2))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.19)*gclwh4_11*rxp2_2))+(((-1.0)*gclwh8_11*pp*r20))+(((0.000225625)*gclwh10_2*r22))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.00475)*gclwh14_2*rxp0_2))+(((0.001083)*gclwh8_8*r20))+((gclwh6_2*pp*pz*r21))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.001083)*gclwh6_8*r21))+(((0.00091675)*gclwh4_3*rxp2_2))+(((4.3545625e-5)*gclwh1_3*r20))+(((-0.009025)*gclwh8_11*r20))+(((0.025)*gclwh10_2*pp*r22))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((-0.01385)*gclwh3_3*pp*r21))+(((-0.05)*gclwh1_2*npx*pz))+(((0.009025)*gclwh3_2*pz*r21))+(((0.24)*gclwh6_8*npy*pz))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((-0.000225625)*gclwh3_2*r21))+(((2.0)*gclwh10_11*npz*pz))+(((0.12)*gclwh10_8*pp*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((0.12)*gclwh8_8*pp*r20))+(((0.00965)*gclwh3_3*npy*pz))+(((0.025)*gclwh3_2*pp*r21))+(((-0.000225625)*gclwh6_2*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((4.3545625e-5)*gclwh3_3*r21))+(((-0.01385)*gclwh1_3*pp*r20))+(((0.000225625)*gclwh8_2*r20))+(((0.19)*gclwh12_11*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.025)*gclwh6_2*pp*r21))+(((0.0042)*gclwh8_3*pp*r20))+(((-0.00965)*gclwh6_3*npy*pz))+(((-2.0)*gclwh6_11*npy*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-0.00475)*gclwh12_2*rxp1_2))+(((-0.000225625)*gclwh1_2*r20))+(((-0.0042)*gclwh6_3*pp*r21))+(((0.00965)*gclwh1_3*npx*pz))+(((0.00965)*gclwh8_3*npx*pz))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.009025)*gclwh10_2*pz*r22))+(((0.05)*gclwh6_2*npy*pz))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.009025)*gclwh6_2*pz*r21))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.025)*gclwh8_2*pp*r20))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.009025)*gclwh6_11*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((-0.05)*gclwh8_2*npx*pz))+((gclwh8_3*r20*(pp*pp)))+(((-0.24)*gclwh8_8*npx*pz))+(((0.025)*gclwh1_2*pp*r20)));
op[18]=((0.2418)+(((0.19)*gclwh15_0*pz*rxp0_2))+(((1.2)*gclwh11_9*npz*pz))+(((-0.005415)*gclwh11_9*r22))+(((-1.01)*gclwh0_0*npx*pz))+(((-0.19)*gclwh5_10*rxp2_2))+(((-0.09595)*gclwh15_0*rxp0_2))+(((0.002339505625)*gclwh2_1*r21))+(((0.009025)*gclwh11_10*r22))+(((0.19)*pz))+(((0.51845)*gclwh0_1*npx*pz))+(((1.01)*gclwh11_0*npz*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.505)*gclwh7_0*pp*r21))+(((0.005415)*gclwh7_9*r21))+(((-2.0)*gclwh11_10*npz*pz))+((gclwh7_1*r21*(pp*pp)))+(((0.09595)*gclwh5_0*rxp2_2))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((0.002339505625)*gclwh9_1*r20))+(((-0.505)*gclwh11_0*pp*r22))+(((-1.2)*gclwh7_9*npy*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.004557625)*gclwh9_0*r20))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.26825)*gclwh0_1*pp*r20))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((0.2502)*gclwh9_1*pp*r20))+(((-0.26825)*gclwh2_1*pp*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-1.0)*gclwh7_10*pp*r21))+(((-0.6)*gclwh11_9*pp*r22))+(((-0.2502)*gclwh7_1*pp*r21))+(((0.009025)*gclwh0_0*pz*r20))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((0.505)*gclwh2_0*pp*r21))+(((-0.005415)*gclwh9_9*r20))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.6)*gclwh9_9*pp*r20))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.004557625)*gclwh7_0*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.51845)*gclwh7_1*npy*pz))+(((0.2502)*gclwh11_1*pp*r22))+(((-1.01)*gclwh7_0*npy*pz))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((-0.505)*gclwh9_0*pp*r20))+(((-0.51845)*gclwh9_1*npx*pz))+(((-0.51845)*gclwh11_1*npz*pz))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((0.09595)*gclwh13_0*rxp1_2))+(((-0.004557625)*gclwh0_0*r20))+(((0.002339505625)*gclwh0_1*r20))+(((0.19)*gclwh15_10*rxp0_2))+(((-0.009025)*gclwh7_10*r21))+(((0.51845)*gclwh2_1*npy*pz))+(((1.01)*gclwh9_0*npx*pz))+(((1.2)*gclwh9_9*npx*pz))+(((2.0)*gclwh7_10*npy*pz))+(((-0.002339505625)*gclwh7_1*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.002339505625)*gclwh11_1*r22))+(((-1.01)*gclwh2_0*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((-0.004557625)*gclwh11_0*r22))+(((-2.0)*gclwh9_10*npx*pz))+(((0.6)*gclwh7_9*pp*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.004557625)*gclwh2_0*r21))+((gclwh0_1*r20*(pp*pp)))+((gclwh9_0*pp*pz*r20))+(((0.505)*gclwh0_0*pp*r20)));
op[19]=((((-1.0)*x325))+x335+x334+(((-1.0)*x338)));
op[20]=((((-1.0)*x153*x92))+(((0.00207575)*x98))+(((0.46)*gclwh7_15*x72))+(((-0.46)*gclwh9_15*x93))+((gclwh11_15*x150))+((x130*x80))+((x149*x74))+(((-0.46)*gclwh11_15*x81))+(((-1.0)*gclwh7_15*x156)));
op[21]=((0.0012)+(((-1.0)*gclwh7_9*x119))+(((0.53)*gclwh11_9*x80))+(((-1.0)*gclwh11_13*x123))+(((0.96)*gclwh11_13*x81))+(((-1.0)*gclwh11_10*x89))+(((-1.0)*gclwh9_10*x96))+(((-4.0)*gclwh7_10*x72))+(((-0.53)*gclwh7_9*x92))+((gclwh5_13*x117))+(((0.48)*gclwh7_13*x92))+(((-1.0)*gclwh9_13*x165))+(((-1.0)*gclwh15_13*x112))+((gclwh11_9*x137))+((gclwh7_13*x152))+((gclwh13_13*x78))+(((-2.0)*gclwh11_10*x80))+(((4.0)*gclwh11_10*x81))+((gclwh5_10*x113))+(((-0.48)*gclwh9_13*x74))+(((1.06)*gclwh7_9*x72))+(((-1.0)*gclwh15_10*x79))+((gclwh13_10*x121))+(((-0.48)*gclwh11_13*x80))+(((0.53)*gclwh9_9*x74))+(((-1.06)*gclwh11_9*x81))+((gclwh7_10*x161))+(((-2.0)*gclwh9_10*x74))+(((2.0)*gclwh7_10*x92))+(((0.00478325)*gclwh9_9*r20))+(((-1.06)*gclwh9_9*x93))+(((0.96)*gclwh9_13*x93))+(((4.0)*gclwh9_10*x93))+(((-0.96)*gclwh7_13*x72)));
op[22]=((0.0126)+(((-0.00063175)*gclwh11_9*r22))+(((0.19)*gclwh5_10*rxp2_2))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((4.3545625e-5)*gclwh11_1*r22))+(((0.00965)*gclwh7_1*npy*pz))+(((-0.05)*gclwh2_0*npy*pz))+(((-0.000225625)*gclwh9_0*r20))+(((2.0)*gclwh11_10*npz*pz))+(((0.14)*gclwh9_9*npx*pz))+(((-0.00965)*gclwh11_1*npz*pz))+(((-0.0042)*gclwh11_1*pp*r22))+(((0.19)*pz))+(((2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.05)*gclwh11_0*npz*pz))+(((-0.01385)*gclwh0_1*pp*r20))+(((0.07)*gclwh7_9*pp*r21))+((gclwh7_1*r21*(pp*pp)))+(((-2.0)*gclwh7_10*npy*pz))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.025)*gclwh7_0*pp*r21))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((-0.07)*gclwh9_9*pp*r20))+(((0.025)*gclwh0_0*pp*r20))+(((0.009025)*gclwh7_10*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0042)*gclwh9_1*pp*r20))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.009025)*gclwh11_10*r22))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.025)*gclwh9_0*pp*r20))+(((4.3545625e-5)*gclwh0_1*r20))+(((-0.14)*gclwh7_9*npy*pz))+(((-0.01385)*gclwh2_1*pp*r21))+((gclwh7_10*pp*r21))+(((0.00965)*gclwh2_1*npy*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.05)*gclwh0_0*npx*pz))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((4.3545625e-5)*gclwh2_1*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.0042)*gclwh7_1*pp*r21))+(((-0.000225625)*gclwh0_0*r20))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.19)*gclwh15_10*rxp0_2))+(((0.00475)*gclwh5_0*rxp2_2))+(((-0.00965)*gclwh9_1*npx*pz))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.07)*gclwh11_9*pp*r22))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((-0.00475)*gclwh15_0*rxp0_2))+(((0.009025)*gclwh2_0*pz*r21))+(((4.3545625e-5)*gclwh9_1*r20))+(((0.00965)*gclwh0_1*npx*pz))+((gclwh2_1*r21*(pp*pp)))+(((-0.000225625)*gclwh11_0*r22))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.05)*gclwh9_0*npx*pz))+(((-0.05)*gclwh7_0*npy*pz))+(((-0.00063175)*gclwh9_9*r20))+(((0.025)*gclwh2_0*pp*r21))+(((-4.3545625e-5)*gclwh7_1*r21))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.14)*gclwh11_9*npz*pz))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.000225625)*gclwh7_0*r21))+(((-0.025)*gclwh11_0*pp*r22))+(((0.19)*gclwh13_10*rxp1_2))+(((0.00063175)*gclwh7_9*r21))+(((-0.000225625)*gclwh2_0*r21))+(((0.00475)*gclwh13_0*rxp1_2))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+((gclwh9_0*pp*pz*r20)));
op[23]=(x335+x325+(((-1.0)*x338))+(((-1.0)*x334)));
op[24]=((((0.00911525)*x136))+(((-1.0)*gclwh14_12*x97))+(((-1.01)*gclwh14_12*x74))+(((1.01)*gclwh12_12*x92))+((gclwh10_12*x114))+(((0.1919)*x158))+(((2.02)*gclwh14_12*x93))+x339+(((1.01)*gclwh4_12*x80))+(((-1.0)*x332))+(((-2.02)*gclwh12_12*x72))+(((-2.02)*gclwh4_12*x81))+(((-0.1919)*x120))+(((0.00911525)*x122)));
op[25]=x321;
op[26]=((-0.2208)+(((0.0874)*gclwh10_14*rxp2_2))+(((0.0874)*x87))+(((-0.0874)*gclwh6_14*rxp1_2)));
op[27]=((((0.96)*gclwh14_2*x74))+(((-0.008664)*x110))+((gclwh6_11*x131))+(((-1.0)*x73*x92))+((x107*x74))+(((8.0)*gclwh4_11*x81))+(((-0.0361)*x104))+(((-1.0)*x142*x80))+(((-0.1824)*x95))+(((-0.96)*gclwh4_2*x80))+(((1.92)*gclwh4_2*x81))+(((8.0)*gclwh12_11*x72))+(((-0.96)*gclwh12_2*x92))+(((-8.0)*gclwh14_11*x93))+(((-1.0)*gclwh8_11*x143))+(((-0.008664)*x154))+(((-1.0)*gclwh4_11*x94))+(((0.0361)*x160))+(((1.92)*gclwh12_2*x72))+(((0.1824)*x132))+(((-0.1824)*x134))+(((0.008664)*x100))+(((-1.0)*gclwh10_11*x164))+(((-1.92)*npx*x85)));
op[28]=((((0.00045125)*x136))+(((0.05)*gclwh4_12*x80))+(((0.1)*gclwh14_12*x93))+(((0.00045125)*x122))+(((0.05)*gclwh12_12*x92))+(((-0.0095)*x120))+(((-0.05)*gclwh14_12*x74))+x332+(((0.0095)*x158))+(((-0.00045125)*x135))+(((0.0095)*gclwh10_12*rxp2_2))+(((-1.0)*x339))+(((-0.1)*gclwh4_12*x81))+(((-0.1)*gclwh12_12*x72)));
op[29]=(x223+(((-1.0)*x318)));
op[30]=x322;
op[31]=((((0.1919)*gclwh9_13*rxp0_2))+(((0.00911525)*gclwh5_13*r22))+(((-1.01)*gclwh15_13*x74))+(((-0.1919)*gclwh7_13*rxp1_2))+x341+(((-1.0)*gclwh15_13*x97))+(((-2.02)*gclwh13_13*x72))+(((-1.0)*x331))+(((0.00911525)*x70))+(((2.02)*gclwh15_13*x93))+(((1.01)*gclwh5_13*x80))+(((-2.02)*gclwh5_13*x81))+(((1.01)*pp*x70))+((gclwh11_13*x114)));
op[32]=((((-0.96)*gclwh13_0*x92))+((gclwh5_10*x94))+(((-0.008664)*x124))+((gclwh9_10*x143))+((gclwh11_10*x164))+(((-0.0361)*x128))+(((-1.0)*gclwh7_10*x131))+(((1.92)*gclwh5_0*x81))+(((-0.1824)*x84))+(((8.0)*gclwh15_10*x93))+((x144*x80))+(((-0.96)*pp*x76))+(((-8.0)*gclwh13_10*x72))+(((-1.92)*gclwh15_0*x93))+(((-8.0)*gclwh5_10*x81))+((x159*x92))+(((0.96)*gclwh15_0*x74))+(((-0.1824)*x109))+(((0.008664)*x138))+(((-0.008664)*x76))+(((0.1824)*x127))+(((0.0361)*x140))+(((-1.0)*x102*x74))+(((1.92)*gclwh13_0*x72)));
IkReal x347=pz*pz;
IkReal x348=(npx*pz);
IkReal x349=(gclwh9_15*rxp0_2);
IkReal x350=(gclwh8_8*r20);
IkReal x351=(gclwh13_13*r21);
IkReal x352=(pp*r20);
IkReal x353=(npy*pz);
IkReal x354=(gclwh14_12*rxp0_2);
IkReal x355=(gclwh8_8*rxp0_2);
IkReal x356=((4.0)*gclwh8_11);
IkReal x357=((0.38)*rxp2_2);
IkReal x358=((0.38)*rxp0_2);
IkReal x359=(gclwh13_13*rxp1_2);
IkReal x360=(pp*r22);
IkReal x361=(npz*pz);
IkReal x362=((0.46)*gclwh11_15);
IkReal x363=(gclwh5_0*r22);
IkReal x364=(gclwh9_9*rxp0_2);
IkReal x365=(gclwh11_0*rxp2_2);
IkReal x366=(gclwh13_10*rxp1_2);
IkReal x367=(gclwh14_2*pz);
IkReal x368=(gclwh6_3*rxp1_2);
IkReal x369=((0.008664)*r21);
IkReal x370=((2.0)*gclwh4_11);
IkReal x371=((0.01805)*r22);
IkReal x372=((0.001037875)*r22);
IkReal x373=((0.19)*rxp0_2);
IkReal x374=((0.02185)*rxp1_2);
IkReal x375=(pp*r21);
IkReal x376=(gclwh9_15*r20);
IkReal x377=(gclwh9_10*r20);
IkReal x378=(gclwh7_15*rxp1_2);
IkReal x379=((0.46)*gclwh6_14);
IkReal x380=((0.000225625)*r20);
IkReal x381=((0.19)*rxp2_2);
IkReal x382=((0.00045125)*r22);
IkReal x383=((2.0)*gclwh15_10);
IkReal x384=(gclwh12_11*r21);
IkReal x385=((0.1824)*rxp2_2);
IkReal x386=(gclwh9_13*rxp0_2);
IkReal x387=((1.0)*pz);
IkReal x388=(gclwh4_3*r22);
IkReal x389=(gclwh9_0*rxp0_2);
IkReal x390=((0.46)*gclwh9_15);
IkReal x391=((0.009025)*pz);
IkReal x392=((2.0)*gclwh13_10);
IkReal x393=((0.0361)*r21);
IkReal x394=(gclwh6_14*r21);
IkReal x395=((0.008664)*r22);
IkReal x396=((0.00911525)*r21);
IkReal x397=((0.1919)*rxp2_2);
IkReal x398=((0.19)*rxp1_2);
IkReal x399=((0.1007)*rxp2_2);
IkReal x400=(gclwh8_11*r20);
IkReal x401=((4.0)*gclwh11_10);
IkReal x402=((0.46)*gclwh10_14);
IkReal x403=((0.0912)*rxp2_2);
IkReal x404=((0.02185)*rxp2_2);
IkReal x405=((0.00478325)*r21);
IkReal x406=((0.38)*rxp1_2);
IkReal x407=((0.0912)*rxp0_2);
IkReal x408=((0.004332)*r22);
IkReal x409=(gclwh7_9*rxp1_2);
IkReal x410=(gclwh13_0*r21);
IkReal x411=((0.009025)*r22);
IkReal x412=((0.001037875)*r20);
IkReal x413=(gclwh7_0*rxp1_2);
IkReal x414=((0.02185)*rxp0_2);
IkReal x415=((0.004332)*r21);
IkReal x416=(gclwh12_2*r21);
IkReal x417=((0.23)*gclwh11_15);
IkReal x418=((0.00478325)*r22);
IkReal x419=((4.0)*gclwh9_10);
IkReal x420=((0.1824)*rxp0_2);
IkReal x421=(gclwh6_2*rxp1_2);
IkReal x422=((0.76)*rxp0_2);
IkReal x423=((0.23)*gclwh8_14);
IkReal x424=((0.76)*rxp2_2);
IkReal x425=((0.009025)*r20);
IkReal x426=((4.0)*gclwh7_10);
IkReal x427=((0.00045125)*r20);
IkReal x428=(gclwh12_12*rxp1_2);
IkReal x429=(gclwh10_2*rxp2_2);
IkReal x430=(gclwh11_15*rxp2_2);
IkReal x431=((0.0095)*rxp2_2);
IkReal x432=(gclwh13_10*r21);
IkReal x433=(gclwh10_8*rxp2_2);
IkReal x434=((4.0)*gclwh10_11);
IkReal x435=((0.004332)*r20);
IkReal x436=((0.004557625)*r20);
IkReal x437=((0.0361)*r22);
IkReal x438=((0.008664)*r20);
IkReal x439=((2.0)*gclwh12_11);
IkReal x440=((0.00091675)*rxp0_2);
IkReal x441=((0.01805)*r21);
IkReal x442=((0.23)*gclwh9_15);
IkReal x443=(gclwh11_15*r22);
IkReal x444=(gclwh11_9*rxp2_2);
IkReal x445=((0.23)*gclwh7_15);
IkReal x446=((0.23)*gclwh6_14);
IkReal x447=((0.001037875)*r21);
IkReal x448=(gclwh4_2*r22);
IkReal x449=(gclwh7_1*rxp1_2);
IkReal x450=(gclwh11_1*rxp2_2);
IkReal x451=(gclwh15_13*rxp0_2);
IkReal x452=((2.0)*gclwh5_10);
IkReal x453=((0.01805)*r20);
IkReal x454=((0.46)*gclwh7_15);
IkReal x455=((0.00045125)*r21);
IkReal x456=((4.0)*gclwh6_11);
IkReal x457=((0.46)*gclwh8_14);
IkReal x458=(gclwh7_15*r21);
IkReal x459=(gclwh7_13*rxp1_2);
IkReal x460=((0.00911525)*r22);
IkReal x461=((0.23)*gclwh10_14);
IkReal x462=((0.00911525)*r20);
IkReal x463=(gclwh10_14*r22);
IkReal x464=(gclwh6_8*rxp1_2);
IkReal x465=(gclwh8_14*r20);
IkReal x466=((0.04925275)*rxp0_2);
IkReal x467=((0.1824)*rxp1_2);
IkReal x468=((2.0)*gclwh14_11);
IkReal x469=(gclwh8_2*rxp0_2);
IkReal x470=(gclwh4_11*x357);
IkReal x471=(gclwh6_11*x441);
IkReal x472=(gclwh12_11*x406);
IkReal x473=(gclwh10_11*x371);
IkReal x474=(gclwh14_11*x358);
IkReal x475=((0.01805)*x400);
IkReal x476=(gclwh11_10*x371);
IkReal x477=((0.01805)*x377);
IkReal x478=(gclwh15_10*x358);
IkReal x479=(gclwh5_10*x357);
IkReal x480=((0.38)*x366);
IkReal x481=(gclwh7_10*x441);
IkReal x482=(gclwh10_5*x404);
IkReal x483=(gclwh6_14*x374);
IkReal x484=(gclwh8_5*x414);
IkReal x485=(gclwh4_5*x372);
IkReal x486=(gclwh12_5*x447);
IkReal x487=(gclwh8_14*x414);
IkReal x488=(gclwh10_14*x404);
IkReal x489=(gclwh6_5*x374);
IkReal x490=(gclwh14_5*x412);
IkReal x491=(gclwh4_11*x411);
IkReal x492=(gclwh10_11*x381);
IkReal x493=(gclwh8_11*x373);
IkReal x494=((0.009025)*x384);
IkReal x495=(gclwh6_11*x398);
IkReal x496=(gclwh14_11*x425);
IkReal x497=(gclwh7_10*x406);
IkReal x498=(gclwh15_10*x453);
IkReal x499=((0.01805)*x432);
IkReal x500=(gclwh9_10*x358);
IkReal x501=(gclwh11_10*x357);
IkReal x502=(gclwh5_10*x371);
IkReal x503=(gclwh7_10*x398);
IkReal x504=(gclwh15_10*x425);
IkReal x505=(gclwh9_10*x373);
IkReal x506=((0.009025)*x432);
IkReal x507=(gclwh11_10*x381);
IkReal x508=(gclwh5_10*x411);
IkReal x509=(gclwh11_7*x404);
IkReal x510=(gclwh7_15*x374);
IkReal x511=(gclwh9_7*x414);
IkReal x512=(gclwh5_7*x372);
IkReal x513=(gclwh13_7*x447);
IkReal x514=((0.02185)*x349);
IkReal x515=(gclwh15_7*x412);
IkReal x516=(gclwh7_7*x374);
IkReal x517=(gclwh11_15*x404);
IkReal x518=(gclwh14_5*x414);
IkReal x519=((0.001037875)*x394);
IkReal x520=(gclwh8_5*x412);
IkReal x521=(gclwh10_5*x372);
IkReal x522=(gclwh12_5*x374);
IkReal x523=(gclwh10_14*x372);
IkReal x524=(gclwh6_5*x447);
IkReal x525=(gclwh4_5*x404);
IkReal x526=(gclwh8_14*x412);
IkReal x527=((0.96)*x353);
IkReal x528=(x348*x356);
IkReal x529=((2.0)*gclwh6_11*x375);
IkReal x530=(x361*x434);
IkReal x531=((2.0)*gclwh8_11*x352);
IkReal x532=((2.0)*gclwh10_11*x360);
IkReal x533=(x353*x456);
IkReal x534=((2.0)*gclwh11_10*x360);
IkReal x535=(x353*x426);
IkReal x536=((2.0)*gclwh9_10*x352);
IkReal x537=((2.0)*gclwh7_10*x375);
IkReal x538=(x348*x419);
IkReal x539=(x361*x401);
IkReal x540=((0.23)*gclwh14_5*x348);
IkReal x541=((0.115)*gclwh4_5*x360);
IkReal x542=((0.115)*gclwh12_5*x375);
IkReal x543=((0.23)*gclwh12_5*x353);
IkReal x544=((0.115)*gclwh14_5*x352);
IkReal x545=((0.23)*gclwh4_5*x361);
IkReal x546=(x352*x367);
IkReal x547=(x348*x468);
IkReal x548=(gclwh8_3*pp*x373);
IkReal x549=(gclwh4_3*pp*x360);
IkReal x550=(x367*x425);
IkReal x551=(gclwh6_2*pz*x398);
IkReal x552=(gclwh8_2*pz*x373);
IkReal x553=(x361*x370);
IkReal x554=((0.19)*pp*x368);
IkReal x555=(gclwh10_2*pz*x381);
IkReal x556=(x391*x416);
IkReal x557=(x391*x448);
IkReal x558=(x353*x439);
IkReal x559=(x352*x383);
IkReal x560=((4.0)*gclwh5_10*x361);
IkReal x561=((4.0)*gclwh13_10*x353);
IkReal x562=(x375*x392);
IkReal x563=((4.0)*gclwh15_10*x348);
IkReal x564=(x360*x452);
IkReal x565=(gclwh15_0*pz*x352);
IkReal x566=(gclwh9_1*pp*x373);
IkReal x567=(gclwh7_0*pz*x398);
IkReal x568=(gclwh11_1*pp*x381);
IkReal x569=(gclwh15_0*r20*x391);
IkReal x570=(x361*x452);
IkReal x571=(x353*x392);
IkReal x572=((0.19)*pz*x365);
IkReal x573=(gclwh9_0*pz*x373);
IkReal x574=(x391*x410);
IkReal x575=(x363*x391);
IkReal x576=(x348*x383);
IkReal x577=(gclwh7_1*pp*x398);
IkReal x578=((0.115)*gclwh5_7*x360);
IkReal x579=((0.23)*gclwh15_7*x348);
IkReal x580=((0.115)*gclwh13_7*x375);
IkReal x581=((0.115)*gclwh15_7*x352);
IkReal x582=((0.23)*gclwh5_7*x361);
IkReal x583=((0.23)*gclwh13_7*x353);
IkReal x584=(x361*x461);
IkReal x585=((0.23)*gclwh6_5*x353);
IkReal x586=((0.115)*gclwh10_5*x360);
IkReal x587=((0.115)*gclwh6_14*x375);
IkReal x588=(x348*x423);
IkReal x589=((0.115)*gclwh8_5*x352);
IkReal x590=((0.23)*gclwh10_5*x361);
IkReal x591=((0.115)*gclwh10_14*x360);
IkReal x592=(x353*x446);
IkReal x593=((0.23)*gclwh8_5*x348);
IkReal x594=((0.115)*gclwh6_5*x375);
IkReal x595=((0.115)*gclwh8_14*x352);
IkReal x596=((2.0)*npz*x347);
IkReal x597=((2.0)*npx*x347);
IkReal x598=((2.0)*npy*x347);
IkReal x599=(gclwh12_2*x598);
IkReal x600=(gclwh4_2*x596);
IkReal x601=x309;
IkReal x602=(gclwh12_2*x375*x387);
IkReal x603=(gclwh4_2*x360*x387);
IkReal x604=(gclwh14_2*x597);
IkReal x605=(gclwh5_0*x596);
IkReal x606=(gclwh13_0*x598);
IkReal x607=(gclwh5_0*x360*x387);
IkReal x608=(gclwh15_0*x597);
IkReal x609=(gclwh13_0*x375*x387);
IkReal x610=(x488+x487);
IkReal x611=(x517+x514);
IkReal x612=((((0.0437)*x430))+(((0.0437)*x349))+(((-0.0437)*x378)));
IkReal x613=(x496+x495+x558+x553);
IkReal x614=(x503+x504+x571+x570);
IkReal x615=(((x361*x402))+((x348*x457))+((x375*x446))+(((0.00207575)*x394)));
IkReal x616=(((x361*x362))+((x375*x445))+(((0.00207575)*x458))+((x348*x390)));
IkReal x617=(x519+x584+x587+x588);
IkReal x618=(x492+x493+x491+x494+x547);
IkReal x619=(x508+x505+x506+x507+x576);
IkReal x620=(((x353*x379))+((x352*x423))+((x360*x461))+(((0.00207575)*x463))+(((0.00207575)*x465)));
IkReal x621=(((x360*x417))+((x352*x442))+((x353*x454))+(((0.00207575)*x376))+(((0.00207575)*x443)));
IkReal x622=(x489+x490+x544+x545+x543);
IkReal x623=(x523+x526+x595+x592+x591);
IkReal x624=(x516+x515+x581+x582+x583);
IkReal x625=(x498+x497+x559+x560+x561);
IkReal x626=(x476+x477+x478+x535+x534+x536);
IkReal x627=(x522+x524+x525+x594+x593+x590);
IkReal x628=(x470+x471+x472+x530+x528+x529);
IkReal x629=(x481+x480+x479+x537+x539+x538);
IkReal x630=(x520+x521+x518+x585+x586+x589);
IkReal x631=(x474+x475+x473+x531+x533+x532);
IkReal x632=(x499+x500+x501+x502+x564+x562+x563);
IkReal x633=(x482+x485+x484+x486+x540+x541+x542);
IkReal x634=(x509+x513+x512+x511+x579+x578+x580);
IkReal x635=(x551+x550+x546+x548+x549+x599+x600);
IkReal x636=(x568+x569+x566+x567+x565+x606+x605);
IkReal x637=((((-1.0)*x620))+x615);
IkReal x638=((((-1.0)*x621))+x616);
IkReal x639=(x575+x574+x577+x573+x572+x607+x609+x608);
IkReal x640=(x552+x557+x556+x555+x554+x603+x602+x601+x604);
op[33]=((-0.2208)+(((-0.0874)*x378))+(((0.0874)*x349))+(((0.0874)*x430)));
op[34]=x612;
op[35]=((((0.0095)*x386))+((gclwh5_13*x382))+(((-0.1)*gclwh13_13*x353))+(((-0.05)*gclwh15_13*x352))+((gclwh11_13*x431))+(((0.1)*gclwh15_13*x348))+(((-1.0)*x632))+(((-0.1)*gclwh5_13*x361))+(((0.05)*pp*x351))+(((-1.0)*gclwh15_13*x427))+(((-0.0095)*x459))+(((0.00045125)*x351))+x625+(((0.05)*gclwh5_13*x360)));
op[36]=((0.5365)+(((2.02)*gclwh6_12*x353))+(((1.01)*gclwh8_12*x352))+(((0.1919)*x354))+(((-1.0)*x628))+(((-0.1919)*x428))+(((-2.02)*gclwh8_12*x348))+(((1.01)*gclwh10_12*x360))+(((-1.01)*gclwh6_12*x375))+x631+(((-2.02)*gclwh10_12*x361))+((gclwh8_12*x462))+(((-1.0)*gclwh6_12*x396))+(((-1.0)*gclwh4_12*x397))+((gclwh10_12*x460)));
op[37]=((((-1.0)*x615))+x620);
op[38]=((((-0.92)*gclwh8_14*x348))+(((-0.92)*gclwh10_14*x361))+(((0.0041515)*x463))+(((0.0041515)*x465))+((x360*x402))+(((0.92)*gclwh6_14*x353))+((x352*x457))+(((-0.0041515)*x394))+(((-1.0)*x375*x379)));
op[39]=((-0.1034)+(((-1.0)*gclwh14_11*x422))+(((-1.0)*gclwh10_2*x395))+((gclwh4_11*x424))+(((-1.0)*gclwh8_2*x438))+(((1.92)*gclwh8_2*x348))+((x375*x456))+(((-0.96)*gclwh10_2*x360))+(((-1.92)*gclwh6_2*x353))+((gclwh12_2*x467))+((gclwh4_2*x385))+(((0.96)*gclwh6_2*x375))+(((0.76)*gclwh12_11*rxp1_2))+(((1.92)*gclwh10_2*x361))+(((-1.0)*gclwh10_11*x437))+(((-0.96)*gclwh1_2*x352))+((gclwh3_2*x369))+(((1.92)*gclwh3_2*x353))+(((-0.96)*gclwh3_2*x375))+((gclwh6_2*x369))+(((-1.0)*x360*x434))+(((-0.96)*gclwh8_2*x352))+(((-8.0)*gclwh6_11*x353))+((gclwh1_2*x438))+(((8.0)*gclwh8_11*x348))+((gclwh6_11*x393))+(((-0.0361)*x400))+(((8.0)*gclwh10_11*x361))+(((-1.0)*x352*x356))+(((1.92)*gclwh1_2*x348))+(((-1.0)*gclwh14_2*x420)));
op[40]=((-0.0277)+(((0.0095)*x354))+((gclwh10_12*x382))+(((-0.1)*gclwh8_12*x348))+(((0.1)*gclwh6_12*x353))+(((-1.0)*gclwh4_12*x431))+(((-0.1)*gclwh10_12*x361))+(((-1.0)*x631))+(((0.05)*gclwh10_12*x360))+((gclwh8_12*x427))+(((-0.05)*gclwh6_12*x375))+(((-1.0)*gclwh6_12*x455))+(((0.05)*gclwh8_12*x352))+x628+(((-0.0095)*x428)));
op[41]=x637;
op[42]=((((-1.0)*x616))+x621);
op[43]=((0.5365)+(((-0.1919)*x451))+(((-1.0)*gclwh9_13*x462))+(((-1.01)*gclwh9_13*x352))+(((0.1919)*x359))+(((-1.0)*x626))+(((1.01)*gclwh7_13*x375))+(((-2.02)*gclwh7_13*x353))+((gclwh5_13*x397))+(((-1.0)*gclwh11_13*x460))+x629+((gclwh7_13*x396))+(((2.02)*gclwh9_13*x348))+(((2.02)*gclwh11_13*x361))+(((-1.01)*gclwh11_13*x360)));
op[44]=((0.1034)+((gclwh15_0*x420))+(((-1.92)*gclwh9_0*x348))+(((-1.0)*gclwh13_0*x467))+(((-0.96)*gclwh2_0*x375))+((gclwh2_0*x369))+(((0.96)*gclwh11_0*x360))+((gclwh9_0*x438))+(((1.92)*gclwh0_0*x348))+((gclwh11_0*x395))+(((0.96)*gclwh9_0*x352))+((x375*x426))+(((-0.0361)*x377))+(((8.0)*gclwh9_10*x348))+(((1.92)*gclwh2_0*x353))+((gclwh5_10*x424))+(((1.92)*gclwh7_0*x353))+(((-8.0)*gclwh7_10*x353))+(((-0.96)*gclwh7_0*x375))+(((-1.0)*gclwh7_0*x369))+(((-1.0)*x352*x419))+(((-1.0)*gclwh11_10*x437))+((gclwh0_0*x438))+(((-1.0)*gclwh5_0*x385))+(((-1.0)*gclwh15_10*x422))+(((-1.92)*gclwh11_0*x361))+((gclwh7_10*x393))+(((0.76)*x366))+(((-0.96)*gclwh0_0*x352))+(((8.0)*gclwh11_10*x361))+(((-1.0)*x360*x401)));
op[45]=((((-1.0)*x352*x390))+((x375*x454))+(((0.92)*gclwh11_15*x361))+(((0.0041515)*x458))+(((-1.0)*x360*x362))+(((-0.92)*gclwh7_15*x353))+(((-0.0041515)*x376))+(((0.92)*gclwh9_15*x348))+(((-0.0041515)*x443)));
op[46]=x638;
op[47]=((-0.0277)+(((-1.0)*gclwh9_13*x427))+(((-0.05)*gclwh11_13*x360))+(((0.0095)*x359))+(((0.1)*gclwh11_13*x361))+(((-1.0)*gclwh11_13*x382))+(((-1.0)*x629))+((gclwh7_13*x455))+(((0.1)*gclwh9_13*x348))+((gclwh5_13*x431))+(((0.05)*gclwh7_13*x375))+(((-0.0095)*x451))+(((-0.05)*gclwh9_13*x352))+x626+(((-0.1)*gclwh7_13*x353)));
op[48]=((-0.11615)+(((-1.0)*x483))+(((-1.0)*x622))+x610+x633);
op[49]=((((-0.0779)*x355))+(((-0.505)*gclwh4_2*x360))+(((-0.2502)*gclwh4_3*x360))+(((-0.0779)*x433))+((gclwh14_2*x436))+(((-1.0)*gclwh4_11*x360))+(((-0.002339505625)*x388))+(((0.51845)*gclwh4_3*x361))+((gclwh14_11*x352))+(((-1.01)*gclwh14_2*x348))+(((-0.505)*gclwh12_2*x375))+(((-1.0)*gclwh8_3*x466))+(((1.01)*gclwh12_2*x353))+(((0.04925275)*x368))+(((1.01)*gclwh4_2*x361))+(((-1.0)*x640))+(((0.505)*gclwh14_2*x352))+(((-1.0)*gclwh12_11*x375))+(((-1.0)*x618))+(((-0.09595)*x429))+x613+x635+(((-0.004557625)*x448))+(((0.09595)*x421))+(((-0.004557625)*x416))+(((-0.09595)*x469))+(((0.0779)*x464)));
op[50]=((((0.0912)*gclwh6_12*rxp1_2))+((gclwh6_11*x406))+(((-0.48)*gclwh4_12*x360))+((gclwh14_11*x453))+((gclwh14_12*x435))+(((-1.0)*x360*x370))+(((-1.0)*gclwh8_11*x358))+(((-1.0)*x375*x439))+(((-1.0)*gclwh10_8*x399))+(((-1.0)*gclwh10_11*x357))+(((-1.0)*gclwh8_12*x407))+(((-1.0)*gclwh4_12*x408))+(((-1.0)*gclwh10_12*x403))+(((-1.0)*gclwh12_12*x415))+(((0.96)*gclwh4_12*x361))+(((4.0)*gclwh4_11*x361))+(((-4.0)*gclwh14_11*x348))+((x352*x468))+(((4.0)*gclwh12_11*x353))+(((-0.1007)*x355))+((gclwh12_12*x527))+(((-0.01805)*x384))+(((0.1007)*x464))+(((-0.96)*gclwh14_12*x348))+(((-1.0)*gclwh4_11*x371))+(((0.48)*gclwh14_12*x352))+(((-0.48)*gclwh12_12*x375)));
op[51]=((((-0.0437)*gclwh10_14*rxp2_2))+(((-0.0437)*gclwh8_14*rxp0_2))+(((0.0437)*gclwh6_14*rxp1_2)));
op[52]=((-0.00575)+(((-1.0)*x622))+x483+(((-1.0)*x610))+x633);
op[53]=((((-0.05)*gclwh14_2*x348))+(((0.00091675)*x368))+(((0.00965)*gclwh4_3*x361))+(((0.0042)*gclwh4_3*x360))+((gclwh12_11*x375))+(((0.05)*gclwh4_2*x361))+(((-0.00475)*x429))+(((-0.025)*gclwh12_2*x375))+(((-1.0)*gclwh14_11*x352))+(((0.00475)*x421))+(((-0.00475)*x469))+(((-0.025)*gclwh4_2*x360))+(((0.025)*gclwh14_2*x352))+(((-1.0)*x640))+((gclwh14_2*x380))+(((0.0228)*x433))+(((-4.3545625e-5)*x388))+(((-0.0228)*x464))+(((0.05)*gclwh12_2*x353))+(((-0.000225625)*x416))+(((-1.0)*x613))+x618+x635+(((-1.0)*gclwh8_3*x440))+(((0.0228)*x355))+(((-0.000225625)*x448))+((gclwh4_11*x360)));
op[54]=((((0.09595)*x413))+(((-0.505)*gclwh13_0*x375))+(((-0.04925275)*x450))+(((-0.114)*x409))+((gclwh15_0*x436))+(((0.04925275)*x449))+((gclwh13_10*x375))+(((0.114)*x444))+(((-1.0)*x639))+(((0.505)*gclwh15_0*x352))+(((-1.01)*gclwh15_0*x348))+(((-0.09595)*x389))+((gclwh5_10*x360))+(((-1.0)*gclwh9_1*x466))+(((0.114)*x364))+(((-0.09595)*x365))+(((-1.0)*x614))+(((-0.004557625)*x363))+x619+x636+(((1.01)*gclwh13_0*x353))+(((1.01)*gclwh5_0*x361))+(((-1.0)*gclwh15_10*x352))+(((-0.004557625)*x410))+(((-0.505)*gclwh5_0*x360)));
op[55]=((-0.11615)+(((-1.0)*x624))+x611+x634+(((-1.0)*x510)));
op[56]=x612;
op[57]=(((gclwh13_13*x527))+(((-0.96)*gclwh15_13*x348))+(((-1.0)*gclwh11_13*x403))+(((0.1007)*x409))+(((-0.1007)*x364))+(((-1.0)*gclwh11_9*x399))+(((-1.0)*x632))+(((0.96)*gclwh5_13*x361))+((gclwh15_13*x435))+(((0.48)*gclwh15_13*x352))+(((0.0912)*x459))+(((-0.004332)*x351))+(((-0.0912)*x386))+(((-0.48)*gclwh5_13*x360))+x625+(((-1.0)*gclwh5_13*x408))+(((-0.48)*pp*x351)));
op[58]=((((0.05)*gclwh5_0*x361))+(((0.0133)*x364))+((gclwh15_0*x380))+(((0.0133)*x444))+(((-1.0)*gclwh5_10*x360))+(((0.025)*gclwh15_0*x352))+(((-0.000225625)*x363))+(((-0.05)*gclwh15_0*x348))+(((-1.0)*x639))+(((-0.00475)*x389))+(((-0.000225625)*x410))+(((-1.0)*x619))+(((-0.0133)*x409))+(((-1.0)*gclwh9_1*x440))+(((0.05)*gclwh13_0*x353))+(((0.00091675)*x449))+x614+x636+(((0.00475)*x413))+(((-1.0)*gclwh13_10*x375))+((gclwh15_10*x352))+(((-0.00091675)*x450))+(((-0.025)*gclwh13_0*x375))+(((-0.00475)*x365))+(((-0.025)*gclwh5_0*x360)));
op[59]=((-0.00575)+(((-1.0)*x624))+x510+(((-1.0)*x611))+x634);
op[60]=((((-1.0)*x627))+(((-1.0)*x617))+x623+x630);
op[61]=((0.2418)+(((0.82)*gclwh10_8*npz*pz))+(((0.505)*gclwh6_2*pp*r21))+(((-0.41)*gclwh8_8*pp*r20))+(((-0.19)*gclwh14_11*rxp0_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((-0.009025)*gclwh10_11*r22))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.19)*gclwh4_11*rxp2_2))+(((-0.26825)*gclwh3_3*pp*r21))+(((-1.0)*gclwh8_11*pp*r20))+(((-0.82)*gclwh6_8*npy*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.41)*gclwh6_8*pp*r21))+(((0.82)*gclwh8_8*npx*pz))+(((0.09595)*gclwh12_2*rxp1_2))+((gclwh6_2*pp*pz*r21))+(((2.0)*gclwh6_3*npy*pp*pz))+(((1.01)*gclwh8_2*npx*pz))+(((1.01)*gclwh10_2*npz*pz))+(((-0.009025)*gclwh8_11*r20))+(((-0.004557625)*gclwh8_2*r20))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.004557625)*gclwh3_2*r21))+(((-0.505)*gclwh8_2*pp*r20))+(((0.009025)*gclwh3_2*pz*r21))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((2.0)*gclwh10_11*npz*pz))+(((-0.19)*gclwh14_2*pz*rxp0_2))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((1.01)*gclwh1_2*npx*pz))+(((0.2502)*gclwh6_3*pp*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.002339505625)*gclwh6_3*r21))+(((2.0)*gclwh8_11*npx*pz))+(((0.009025)*gclwh1_2*pz*r20))+(((0.002339505625)*gclwh3_3*r21))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((-0.505)*gclwh1_2*pp*r20))+(((-0.26825)*gclwh1_3*pp*r20))+(((0.51845)*gclwh8_3*npx*pz))+(((0.19)*gclwh12_11*rxp1_2))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-1.01)*gclwh6_2*npy*pz))+(((-0.505)*gclwh10_2*pp*r22))+(((1.01)*gclwh3_2*npy*pz))+(((-0.00370025)*gclwh10_8*r22))+(((-2.0)*gclwh6_11*npy*pz))+(((-0.41)*gclwh10_8*pp*r22))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((0.51845)*gclwh3_3*npy*pz))+(((-0.09595)*gclwh14_2*rxp0_2))+(((-1.0)*gclwh10_11*pp*r22))+((gclwh6_11*pp*r21))+(((-0.51845)*gclwh6_3*npy*pz))+(((-0.009025)*gclwh10_2*pz*r22))+(((-0.004557625)*gclwh10_2*r22))+(((0.09595)*gclwh4_2*rxp2_2))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-0.002339505625)*gclwh8_3*r20))+(((0.004557625)*gclwh1_2*r20))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((-0.505)*gclwh3_2*pp*r21))+(((0.009025)*gclwh6_2*pz*r21))+(((-0.00370025)*gclwh8_8*r20))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((0.004557625)*gclwh6_2*r21))+(((-0.2502)*gclwh8_3*pp*r20))+(((0.00370025)*gclwh6_8*r21))+(((0.04925275)*gclwh4_3*rxp2_2))+(((0.002339505625)*gclwh1_3*r20))+(((0.009025)*gclwh6_11*r21))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+(((0.51845)*gclwh1_3*npx*pz))+((gclwh8_3*r20*(pp*pp))));
op[62]=((-0.0012)+(((0.96)*gclwh8_12*x348))+(((-1.0)*gclwh8_12*x435))+(((-0.48)*gclwh10_12*x360))+(((0.96)*gclwh10_12*x361))+(((-0.53)*gclwh10_8*x360))+(((-0.0912)*x354))+(((-0.53)*pp*x350))+(((-1.0)*gclwh10_12*x408))+((gclwh6_8*x405))+(((-1.0)*x631))+((gclwh6_12*x415))+(((-1.0)*gclwh10_8*x418))+(((-0.48)*gclwh8_12*x352))+((gclwh4_12*x403))+(((1.06)*gclwh10_8*x361))+(((-1.06)*gclwh6_8*x353))+x628+(((-1.0)*gclwh6_12*x527))+(((1.06)*gclwh8_8*x348))+(((0.48)*gclwh6_12*x375))+(((-0.00478325)*x350))+(((0.53)*gclwh6_8*x375))+(((0.0912)*x428)));
op[63]=x637;
op[64]=((((-1.0)*x627))+(((-1.0)*x623))+x617+x630);
op[65]=((0.0126)+(((-0.24)*gclwh10_8*npz*pz))+(((-4.3545625e-5)*gclwh8_3*r20))+(((0.001083)*gclwh10_8*r22))+(((0.00475)*gclwh12_2*rxp1_2))+(((2.0)*gclwh3_2*npy*(pz*pz)))+(((4.3545625e-5)*gclwh6_3*r21))+(((-0.12)*gclwh6_8*pp*r21))+(((2.0)*gclwh1_2*npx*(pz*pz)))+(((0.19)*gclwh12_2*pz*rxp1_2))+(((0.19)*pz))+(((0.025)*gclwh6_2*pp*r21))+(((-2.0)*gclwh8_11*npx*pz))+(((-1.0)*gclwh1_2*pp*pz*r20))+(((0.001083)*gclwh8_8*r20))+(((-0.000225625)*gclwh10_2*r22))+((gclwh6_2*pp*pz*r21))+(((2.0)*gclwh6_3*npy*pp*pz))+(((-0.001083)*gclwh6_8*r21))+(((0.00091675)*gclwh4_3*rxp2_2))+(((4.3545625e-5)*gclwh1_3*r20))+(((-0.000225625)*gclwh8_2*r20))+(((-0.05)*gclwh6_2*npy*pz))+(((-1.0)*gclwh6_3*r21*(pp*pp)))+(((0.009025)*gclwh8_11*r20))+(((-0.01385)*gclwh3_3*pp*r21))+(((-0.025)*gclwh8_2*pp*r20))+(((2.0)*gclwh6_11*npy*pz))+(((0.009025)*gclwh3_2*pz*r21))+((gclwh8_11*pp*r20))+(((0.24)*gclwh6_8*npy*pz))+(((2.0)*gclwh10_2*npz*(pz*pz)))+(((0.12)*gclwh10_8*pp*r22))+(((-0.19)*gclwh14_2*pz*rxp0_2))+(((0.05)*gclwh3_2*npy*pz))+(((0.19)*gclwh14_11*rxp0_2))+(((-0.025)*gclwh10_2*pp*r22))+((gclwh3_3*r21*(pp*pp)))+((gclwh1_3*r20*(pp*pp)))+(((-0.19)*gclwh12_11*rxp1_2))+(((-0.009025)*gclwh6_11*r21))+(((0.12)*gclwh8_8*pp*r20))+(((0.05)*gclwh8_2*npx*pz))+(((0.00965)*gclwh3_3*npy*pz))+(((0.000225625)*gclwh3_2*r21))+(((2.0)*gclwh8_2*npx*(pz*pz)))+(((-0.009025)*gclwh8_2*pz*r20))+(((0.009025)*gclwh1_2*pz*r20))+(((-2.0)*gclwh6_2*npy*(pz*pz)))+(((0.000225625)*gclwh6_2*r21))+(((4.3545625e-5)*gclwh3_3*r21))+(((0.05)*gclwh10_2*npz*pz))+(((-0.01385)*gclwh1_3*pp*r20))+(((-1.0)*gclwh3_2*pp*pz*r21))+(((-0.025)*gclwh1_2*pp*r20))+(((-2.0)*gclwh10_11*npz*pz))+(((0.009025)*gclwh10_11*r22))+(((0.0042)*gclwh8_3*pp*r20))+(((-0.00965)*gclwh6_3*npy*pz))+(((-2.0)*gclwh8_3*npx*pp*pz))+(((-1.0)*gclwh6_11*pp*r21))+(((-0.0042)*gclwh6_3*pp*r21))+(((0.00965)*gclwh1_3*npx*pz))+(((0.00965)*gclwh8_3*npx*pz))+(((-0.00475)*gclwh14_2*rxp0_2))+(((-0.009025)*gclwh10_2*pz*r22))+(((-0.025)*gclwh3_2*pp*r21))+(((-0.19)*gclwh4_3*pp*rxp2_2))+(((-2.0)*gclwh1_3*npx*pp*pz))+(((0.00475)*gclwh4_2*rxp2_2))+(((-0.19)*gclwh4_11*rxp2_2))+(((0.009025)*gclwh6_2*pz*r21))+((gclwh10_11*pp*r22))+(((-2.0)*gclwh3_3*npy*pp*pz))+(((0.05)*gclwh1_2*npx*pz))+(((0.19)*gclwh4_2*pz*rxp2_2))+(((-1.0)*gclwh10_2*pp*pz*r22))+(((-1.0)*gclwh8_2*pp*pz*r20))+((gclwh8_3*r20*(pp*pp)))+(((-0.24)*gclwh8_8*npx*pz))+(((0.000225625)*gclwh1_2*r20)));
op[66]=((-0.2418)+(((0.19)*gclwh5_10*rxp2_2))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((1.2)*gclwh11_9*npz*pz))+(((-0.005415)*gclwh11_9*r22))+(((1.01)*gclwh0_0*npx*pz))+(((2.0)*gclwh11_10*npz*pz))+(((0.002339505625)*gclwh2_1*r21))+(((0.19)*pz))+(((0.51845)*gclwh0_1*npx*pz))+(((2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.09595)*gclwh5_0*rxp2_2))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((0.505)*gclwh11_0*pp*r22))+(((0.005415)*gclwh7_9*r21))+((gclwh7_1*r21*(pp*pp)))+(((0.004557625)*gclwh0_0*r20))+(((-2.0)*gclwh7_10*npy*pz))+(((-0.09595)*gclwh13_0*rxp1_2))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.009025)*gclwh9_10*r20))+(((0.002339505625)*gclwh9_1*r20))+(((-1.2)*gclwh7_9*npy*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.26825)*gclwh0_1*pp*r20))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((0.2502)*gclwh9_1*pp*r20))+(((0.009025)*gclwh7_10*r21))+(((-0.26825)*gclwh2_1*pp*r21))+(((2.0)*gclwh9_1*npx*pp*pz))+(((1.01)*gclwh7_0*npy*pz))+(((-0.6)*gclwh11_9*pp*r22))+(((-0.2502)*gclwh7_1*pp*r21))+(((0.004557625)*gclwh9_0*r20))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.009025)*gclwh11_10*r22))+(((-0.004557625)*gclwh7_0*r21))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.005415)*gclwh9_9*r20))+((gclwh7_10*pp*r21))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((-0.6)*gclwh9_9*pp*r20))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.009025)*gclwh9_0*pz*r20))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((0.505)*gclwh9_0*pp*r20))+(((-0.505)*gclwh0_0*pp*r20))+(((-1.01)*gclwh11_0*npz*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.51845)*gclwh7_1*npy*pz))+(((0.2502)*gclwh11_1*pp*r22))+(((-1.0)*gclwh9_10*pp*r20))+(((-0.19)*gclwh15_10*rxp0_2))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-1.0)*gclwh11_10*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((-1.01)*gclwh9_0*npx*pz))+(((-0.51845)*gclwh9_1*npx*pz))+(((1.01)*gclwh2_0*npy*pz))+(((-0.51845)*gclwh11_1*npz*pz))+((gclwh2_1*r21*(pp*pp)))+(((0.002339505625)*gclwh0_1*r20))+(((0.09595)*gclwh15_0*rxp0_2))+(((0.51845)*gclwh2_1*npy*pz))+(((1.2)*gclwh9_9*npx*pz))+(((-0.505)*gclwh7_0*pp*r21))+(((-0.002339505625)*gclwh7_1*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.505)*gclwh2_0*pp*r21))+(((0.004557625)*gclwh11_0*r22))+(((0.002339505625)*gclwh11_1*r22))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.004557625)*gclwh2_0*r21))+(((0.19)*gclwh13_10*rxp1_2))+(((0.6)*gclwh7_9*pp*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+((gclwh9_0*pp*pz*r20)));
op[67]=((((-0.115)*gclwh11_7*x360))+(((0.115)*gclwh7_15*x375))+(((-0.115)*gclwh9_15*x352))+(((-1.0)*gclwh15_7*x414))+((gclwh7_15*x447))+((x361*x417))+(((-1.0)*gclwh11_7*x372))+(((-1.0)*x353*x445))+(((-0.001037875)*x376))+(((-0.23)*gclwh7_7*x353))+(((-0.115)*gclwh11_15*x360))+((gclwh5_7*x404))+(((0.23)*gclwh9_7*x348))+((gclwh13_7*x374))+((gclwh7_7*x447))+(((0.115)*gclwh7_7*x375))+(((-1.0)*gclwh9_7*x412))+(((0.23)*gclwh11_7*x361))+(((-0.115)*gclwh9_7*x352))+((x348*x442))+(((-1.0)*gclwh11_15*x372)));
op[68]=x638;
op[69]=((-0.0012)+(((-0.0912)*x359))+(((-1.0)*gclwh7_13*x415))+((gclwh9_13*x435))+(((-0.53)*gclwh7_9*x375))+(((-1.0)*gclwh7_9*x405))+(((-1.0)*x629))+(((-0.96)*gclwh9_13*x348))+(((0.48)*gclwh11_13*x360))+(((-1.06)*gclwh9_9*x348))+((gclwh11_13*x408))+((gclwh15_13*x407))+(((0.53)*gclwh9_9*x352))+(((-0.48)*gclwh7_13*x375))+x626+(((1.06)*gclwh7_9*x353))+(((-1.0)*gclwh5_13*x403))+((gclwh7_13*x527))+(((-1.06)*gclwh11_9*x361))+(((-0.96)*gclwh11_13*x361))+(((0.53)*gclwh11_9*x360))+(((0.48)*gclwh9_13*x352))+(((0.00478325)*gclwh9_9*r20))+((gclwh11_9*x418)));
IkReal x641=((0.115)*pp);
IkReal x642=(gclwh11_15*r22);
IkReal x643=(gclwh9_7*r20);
IkReal x644=((0.23)*pz);
IkReal x645=(gclwh9_15*r20);
IkReal x646=(gclwh11_7*r22);
IkReal x647=((0.001037875)*r21);
op[70]=((-0.0126)+(((0.000225625)*gclwh11_0*r22))+(((-0.00063175)*gclwh11_9*r22))+(((0.19)*gclwh15_0*pz*rxp0_2))+(((4.3545625e-5)*gclwh11_1*r22))+(((0.00965)*gclwh7_1*npy*pz))+(((-0.19)*gclwh5_10*rxp2_2))+(((0.14)*gclwh9_9*npx*pz))+(((-0.00475)*gclwh13_0*rxp1_2))+(((-0.00965)*gclwh11_1*npz*pz))+(((0.009025)*gclwh11_10*r22))+(((-0.0042)*gclwh11_1*pp*r22))+(((0.19)*pz))+(((0.025)*gclwh11_0*pp*r22))+(((0.00475)*gclwh15_0*rxp0_2))+(((2.0)*gclwh0_0*npx*(pz*pz)))+(((2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.01385)*gclwh0_1*pp*r20))+(((-2.0)*gclwh11_10*npz*pz))+(((0.07)*gclwh7_9*pp*r21))+((gclwh7_1*r21*(pp*pp)))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-1.0)*gclwh0_0*pp*pz*r20))+(((-0.025)*gclwh2_0*pp*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.009025)*gclwh9_10*r20))+(((-0.19)*gclwh5_0*pz*rxp2_2))+(((-0.19)*gclwh13_0*pz*rxp1_2))+(((-0.07)*gclwh9_9*pp*r20))+(((-0.00475)*gclwh5_0*rxp2_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.0042)*gclwh9_1*pp*r20))+(((-1.0)*gclwh7_10*pp*r21))+(((0.009025)*gclwh0_0*pz*r20))+(((-0.025)*gclwh0_0*pp*r20))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.19)*gclwh13_10*rxp1_2))+(((4.3545625e-5)*gclwh0_1*r20))+(((0.05)*gclwh2_0*npy*pz))+(((-0.05)*gclwh11_0*npz*pz))+(((-0.14)*gclwh7_9*npy*pz))+(((-0.01385)*gclwh2_1*pp*r21))+(((0.00965)*gclwh2_1*npy*pz))+(((-2.0)*gclwh0_1*npx*pp*pz))+(((0.000225625)*gclwh9_0*r20))+(((0.009025)*gclwh11_0*pz*r22))+((gclwh11_0*pp*pz*r22))+(((0.000225625)*gclwh0_0*r20))+(((0.009025)*gclwh9_0*pz*r20))+(((0.05)*gclwh0_0*npx*pz))+(((4.3545625e-5)*gclwh2_1*r21))+(((-1.0)*gclwh2_0*pp*pz*r21))+(((-0.05)*gclwh9_0*npx*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((0.0042)*gclwh7_1*pp*r21))+(((-0.00965)*gclwh9_1*npx*pz))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.07)*gclwh11_9*pp*r22))+(((-0.009025)*gclwh7_0*pz*r21))+(((0.009025)*gclwh2_0*pz*r21))+(((4.3545625e-5)*gclwh9_1*r20))+(((0.025)*gclwh9_0*pp*r20))+(((0.00965)*gclwh0_1*npx*pz))+((gclwh11_10*pp*r22))+((gclwh2_1*r21*(pp*pp)))+((gclwh9_10*pp*r20))+(((0.19)*gclwh15_10*rxp0_2))+(((0.000225625)*gclwh2_0*r21))+(((0.05)*gclwh7_0*npy*pz))+(((-0.009025)*gclwh7_10*r21))+(((2.0)*gclwh7_10*npy*pz))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.025)*gclwh7_0*pp*r21))+(((-0.00063175)*gclwh9_9*r20))+(((-4.3545625e-5)*gclwh7_1*r21))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.14)*gclwh11_9*npz*pz))+(((-2.0)*gclwh2_1*npy*pp*pz))+(((0.00063175)*gclwh7_9*r21))+(((-2.0)*gclwh9_10*npx*pz))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh0_1*r20*(pp*pp)))+(((-0.000225625)*gclwh7_0*r21))+((gclwh9_0*pp*pz*r20)));
op[71]=((((0.001037875)*x645))+(((0.001037875)*x642))+(((-0.02185)*gclwh15_7*rxp0_2))+(((0.02185)*gclwh13_7*rxp1_2))+(((-1.0)*x641*x646))+(((-1.0)*x641*x643))+((gclwh9_7*npx*x644))+((gclwh11_7*npz*x644))+(((-1.0)*gclwh7_7*npy*x644))+((x641*x645))+((x641*x642))+(((0.02185)*gclwh5_7*rxp2_2))+(((-0.001037875)*x643))+(((-0.001037875)*x646))+(((-1.0)*gclwh11_15*npz*x644))+(((-1.0)*gclwh7_15*x647))+((gclwh7_7*r21*x641))+(((-1.0)*gclwh9_15*npx*x644))+((gclwh7_15*npy*x644))+((gclwh7_7*x647))+(((-1.0)*gclwh7_15*r21*x641)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x648=htj1*htj1;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(((1.0)+x648),-1);
if(!x649.valid){
continue;
}
cj1array[numsolutions]=((x649.value)*(((1.0)+(((-1.0)*x648)))));
CheckValue<IkReal> x650=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x650.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x650.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x651=htj2*htj2;
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((1.0)+x651),-1);
if(!x652.valid){
continue;
}
cj2array[numsolutions]=((x652.value)*(((1.0)+(((-1.0)*x651)))));
CheckValue<IkReal> x653=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x653.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x653.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x654=htj3*htj3;
CheckValue<IkReal> x655=IKPowWithIntegerCheck(((1.0)+x654),-1);
if(!x655.valid){
continue;
}
cj3array[numsolutions]=((x655.value)*(((1.0)+(((-1.0)*x654)))));
CheckValue<IkReal> x656=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x656.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x656.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x657=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x657);
rxp1_0=(pz*r11);
rxp1_1=(r01*x657);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x658=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x658);
rxp1_0=(pz*r11);
rxp1_1=(r01*x658);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x659=IKPowWithIntegerCheck(cj3,-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660=IKPowWithIntegerCheck(r22,-1);
if(!x660.valid){
continue;
}
cj4array[0]=((-1.0)*(x659.value)*(x660.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x661=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x661);
rxp1_0=(pz*r11);
rxp1_1=(r01*x661);
IkReal x662=((4.0)*r00);
IkReal x663=(cj3*sj4);
IkReal x664=((4.0)*sj3);
IkReal x665=((8.0)*r01);
IkReal x666=(sj1*sj2);
IkReal x667=(r02*sj4);
IkReal x668=((4.0)*r10);
IkReal x669=((16.0)*r11);
IkReal x670=(r12*sj4);
IkReal x671=((16.0)*sj3);
IkReal x672=(cj3*cj4);
IkReal x673=((16.0)*r01);
IkReal x674=((8.0)*sj3);
IkReal x675=((8.0)*r11);
IkReal x676=(r01*x664);
IkReal x677=(r11*x664);
IkReal x678=(cj1*cj2*cj4);
IkReal x679=((4.0)*cj1*cj2);
IkReal x680=((12.0)*cj1*cj2);
IkReal x681=((12.0)*r02*x672);
IkReal x682=(x662*x663);
IkReal x683=(x663*x668);
IkReal x684=((12.0)*r12*x672);
IkReal x685=(cj4*r01*x666);
IkReal x686=(cj4*x666*x668);
IkReal x687=(x670*x680);
IkReal x688=((12.0)*x666*x670);
IkReal x689=(x668*x678);
IkReal x690=(x662*x678);
IkReal x691=(cj4*x662*x666);
IkReal x692=((12.0)*x666*x667);
IkReal x693=(x667*x680);
IkReal x694=(x684+x693);
IkReal x695=(x688+x681);
IkReal x696=(x677+x683+x691);
IkReal x697=(x676+x689+x682);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x686))+((x670*x679))+(((-4.0)*x666*x670))+x697+(((-4.0)*r02*x672)))))))+(((0.5)*(IKabs((((x669*x678))+(((-1.0)*r00*x671))+(((-1.0)*cj4*x666*x669))+((x663*x673)))))))+(((0.5)*(IKabs(((((-1.0)*x686))+x687+x697+(((-1.0)*x695)))))))+(((0.5)*(IKabs((x687+x686+(((-1.0)*x697))+(((-1.0)*x695)))))))+(((0.5)*(IKabs((x690+x692+(((-1.0)*x696))+(((-1.0)*x694)))))))+(IKabs(((((-1.0)*cj4*x666*x675))+((x663*x665))+((x675*x678))+(((-1.0)*r00*x674)))))+(((0.5)*(IKabs((x696+x692+(((-1.0)*x690))+(((-1.0)*x694)))))))+(((0.5)*(IKabs((((cj4*x666*x673))+((x663*x669))+(((-1.0)*r10*x671))+(((-1.0)*x673*x678)))))))+(((0.5)*(IKabs(((((-4.0)*r12*x672))+(((4.0)*x666*x667))+(((-1.0)*x667*x679))+x696+(((-1.0)*x690)))))))+(IKabs((((cj4*x665*x666))+(((-1.0)*x665*x678))+(((-1.0)*r10*x674))+((x663*x675))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x698=(cj1*cj2);
IkReal x699=(sj1*sj2);
IkReal x700=(r10*sj3);
IkReal x701=((4.0)*r11*sj3);
IkReal x702=(cj3*cj4*r12);
IkReal x703=((4.0)*r02*sj4);
IkReal x704=((16.0)*cj4*r01);
IkReal x705=((12.0)*r02*sj4);
IkReal x706=(cj3*r11*sj4);
IkReal x707=((8.0)*cj4*r01);
IkReal x708=((4.0)*cj4*r00);
IkReal x709=((4.0)*cj3*r10*sj4);
IkReal x710=((12.0)*x702);
IkReal x711=((4.0)*x702);
IkReal x712=(x699*x708);
IkReal x713=(x698*x708);
IkReal x714=(x699*x705);
IkReal x715=(x698*x705);
IkReal x716=(x699*x703);
IkReal x717=(x698*x703);
IkReal x718=(x710+x715);
IkReal x719=(x711+x717);
IkReal x720=(x712+x709+x701);
IkReal x721=((((-8.0)*x700))+(((-1.0)*x698*x707))+(((8.0)*x706))+((x699*x707)));
op[0]=((((-1.0)*x719))+(((-1.0)*x713))+x716+x720);
op[1]=x721;
op[2]=((((-1.0)*x718))+(((-1.0)*x713))+x714+x720);
op[3]=((((16.0)*x706))+(((-1.0)*x698*x704))+(((-16.0)*x700))+((x699*x704)));
op[4]=((((-1.0)*x720))+(((-1.0)*x718))+x713+x714);
op[5]=x721;
op[6]=((((-1.0)*x720))+(((-1.0)*x719))+x713+x716);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x722=(sj1*sj2);
IkReal x723=(r12*sj4);
IkReal x724=(cj1*cj2);
IkReal x725=(cj4*r11);
IkReal x726=(r00*sj3);
IkReal x727=(cj3*sj4);
IkReal x728=((4.0)*r01*sj3);
IkReal x729=((4.0)*cj4*r10);
IkReal x730=(cj3*cj4*r02);
IkReal x731=((4.0)*r00*x727);
IkReal x732=((12.0)*x730);
IkReal x733=((4.0)*x730);
IkReal x734=(x722*x729);
IkReal x735=((4.0)*x723*x724);
IkReal x736=(x724*x729);
IkReal x737=((12.0)*x723*x724);
IkReal x738=((12.0)*x722*x723);
IkReal x739=((4.0)*x722*x723);
IkReal x740=(x733+x739);
IkReal x741=(x732+x738);
IkReal x742=(x736+x731+x728);
IkReal x743=((((-8.0)*x722*x725))+(((-8.0)*x726))+(((8.0)*r01*x727))+(((8.0)*x724*x725)));
j5evalpoly[0]=(((htj5*x743))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x734))+x737+x742+(((-1.0)*x741))))))+(((htj5*htj5)*((x737+x734+(((-1.0)*x741))+(((-1.0)*x742))))))+(((htj5*htj5*htj5)*(((((16.0)*r01*x727))+(((16.0)*x724*x725))+(((-16.0)*x722*x725))+(((-16.0)*x726))))))+((x743*(htj5*htj5*htj5*htj5*htj5)))+x735+x734+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x734))+x735+x742+(((-1.0)*x740))))))+(((-1.0)*x740))+(((-1.0)*x742)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x744=(cj4*cj5);
IkReal x745=(cj4*sj5);
if( IKabs((((r02*sj4))+((r01*x745))+(((-1.0)*r00*x744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x744))+(((-1.0)*r11*x745))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+((r01*x745))+(((-1.0)*r00*x744))))+IKsqr((((r10*x744))+(((-1.0)*r11*x745))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+((r01*x745))+(((-1.0)*r00*x744))), (((r10*x744))+(((-1.0)*r11*x745))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x746=IKcos(j0);
IkReal x747=IKsin(j0);
IkReal x748=((1.0)*cj4);
IkReal x749=(cj3*cj4);
IkReal x750=((1.0)*sj2);
IkReal x751=(cj5*r01);
IkReal x752=(cj1*cj2);
IkReal x753=((0.24)*cj2);
IkReal x754=(cj5*r00);
IkReal x755=(sj3*sj4);
IkReal x756=(r01*sj5);
IkReal x757=(cj5*r11);
IkReal x758=(r00*sj5);
IkReal x759=(r11*sj5);
IkReal x760=(cj3*r10);
IkReal x761=(cj3*sj4);
IkReal x762=(r10*sj5);
IkReal x763=(cj5*r10);
IkReal x764=(sj1*x747);
IkReal x765=(sj1*x746);
IkReal x766=(cj1*sj2*x746);
IkReal x767=(cj1*sj2*x747);
evalcond[0]=(((r12*sj4))+x746+(((-1.0)*x748*x763))+((cj4*x759)));
evalcond[1]=(((r02*sj4))+(((-1.0)*x747))+(((-1.0)*x748*x754))+((cj4*x756)));
evalcond[2]=((((0.265)*x765))+(((-1.0)*px))+(((0.24)*x766))+(((-0.115)*x747))+((x753*x765))+(((-0.095)*x751))+(((-0.095)*x758)));
evalcond[3]=((((0.265)*x764))+(((0.115)*x746))+(((-1.0)*py))+(((0.24)*x767))+(((-0.095)*x762))+((x753*x764))+(((-0.095)*x757)));
evalcond[4]=((((-1.0)*r02*sj3*x748))+((cj2*x765))+((cj3*x751))+((cj3*x758))+(((-1.0)*x754*x755))+((x755*x756))+x766);
evalcond[5]=(((r02*x749))+(((-1.0)*x756*x761))+(((-1.0)*x750*x765))+((x746*x752))+((sj3*x758))+((sj3*x751))+((x754*x761)));
evalcond[6]=((((-1.0)*r12*sj3*x748))+((cj2*x764))+((cj3*x757))+((x755*x759))+x767+(((-1.0)*x755*x763))+((sj5*x760)));
evalcond[7]=(((sj3*x762))+((x747*x752))+((cj5*sj4*x760))+(((-1.0)*x750*x764))+(((-1.0)*x759*x761))+((r12*x749))+((sj3*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x768=IKPowWithIntegerCheck(r22,-1);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769=IKPowWithIntegerCheck(sj3,-1);
if(!x769.valid){
continue;
}
cj4array[0]=((x768.value)*(x769.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x770=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x770);
rxp1_0=(pz*r11);
rxp1_1=(r01*x770);
IkReal x771=((4.0)*r00);
IkReal x772=(cj3*sj4);
IkReal x773=((4.0)*sj3);
IkReal x774=((8.0)*r01);
IkReal x775=(sj1*sj2);
IkReal x776=(r02*sj4);
IkReal x777=((4.0)*r10);
IkReal x778=((16.0)*r11);
IkReal x779=(r12*sj4);
IkReal x780=((16.0)*sj3);
IkReal x781=(cj3*cj4);
IkReal x782=((16.0)*r01);
IkReal x783=((8.0)*sj3);
IkReal x784=((8.0)*r11);
IkReal x785=(r01*x773);
IkReal x786=(r11*x773);
IkReal x787=(cj1*cj2*cj4);
IkReal x788=((4.0)*cj1*cj2);
IkReal x789=((12.0)*cj1*cj2);
IkReal x790=((12.0)*r02*x781);
IkReal x791=(x771*x772);
IkReal x792=(x772*x777);
IkReal x793=((12.0)*r12*x781);
IkReal x794=(cj4*r01*x775);
IkReal x795=(cj4*x775*x777);
IkReal x796=(x779*x789);
IkReal x797=((12.0)*x775*x779);
IkReal x798=(x777*x787);
IkReal x799=(x771*x787);
IkReal x800=(cj4*x771*x775);
IkReal x801=((12.0)*x775*x776);
IkReal x802=(x776*x789);
IkReal x803=(x793+x802);
IkReal x804=(x790+x797);
IkReal x805=(x792+x786+x800);
IkReal x806=(x791+x798+x785);
j5eval[0]=((((0.5)*(IKabs((x799+x801+(((-1.0)*x803))+(((-1.0)*x805)))))))+(((0.5)*(IKabs(((((-1.0)*x795))+(((-4.0)*r02*x781))+((x779*x788))+(((-4.0)*x775*x779))+x806)))))+(IKabs(((((-1.0)*cj4*x775*x784))+(((-1.0)*r00*x783))+((x772*x774))+((x784*x787)))))+(((0.5)*(IKabs(((((-1.0)*r00*x780))+((x778*x787))+((x772*x782))+(((-1.0)*cj4*x775*x778)))))))+(((0.5)*(IKabs(((((-1.0)*x795))+x796+x806+(((-1.0)*x804)))))))+(IKabs((((cj4*x774*x775))+(((-1.0)*r10*x783))+(((-1.0)*x774*x787))+((x772*x784)))))+(((0.5)*(IKabs((x795+x796+(((-1.0)*x806))+(((-1.0)*x804)))))))+(((0.5)*(IKabs(((((-1.0)*x799))+(((-4.0)*r12*x781))+(((4.0)*x775*x776))+(((-1.0)*x776*x788))+x805)))))+(((0.5)*(IKabs(((((-1.0)*x799))+x805+x801+(((-1.0)*x803)))))))+(((0.5)*(IKabs((((cj4*x775*x782))+((x772*x778))+(((-1.0)*r10*x780))+(((-1.0)*x782*x787))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x807=(cj1*cj2);
IkReal x808=(sj1*sj2);
IkReal x809=(r10*sj3);
IkReal x810=((4.0)*r11*sj3);
IkReal x811=(cj3*cj4*r12);
IkReal x812=((4.0)*r02*sj4);
IkReal x813=((16.0)*cj4*r01);
IkReal x814=((12.0)*r02*sj4);
IkReal x815=(cj3*r11*sj4);
IkReal x816=((8.0)*cj4*r01);
IkReal x817=((4.0)*cj4*r00);
IkReal x818=((4.0)*cj3*r10*sj4);
IkReal x819=((12.0)*x811);
IkReal x820=((4.0)*x811);
IkReal x821=(x808*x817);
IkReal x822=(x807*x817);
IkReal x823=(x808*x814);
IkReal x824=(x807*x814);
IkReal x825=(x808*x812);
IkReal x826=(x807*x812);
IkReal x827=(x819+x824);
IkReal x828=(x820+x826);
IkReal x829=(x818+x810+x821);
IkReal x830=((((8.0)*x815))+((x808*x816))+(((-1.0)*x807*x816))+(((-8.0)*x809)));
op[0]=((((-1.0)*x828))+(((-1.0)*x822))+x829+x825);
op[1]=x830;
op[2]=((((-1.0)*x827))+(((-1.0)*x822))+x829+x823);
op[3]=((((-16.0)*x809))+((x808*x813))+(((-1.0)*x807*x813))+(((16.0)*x815)));
op[4]=((((-1.0)*x829))+(((-1.0)*x827))+x823+x822);
op[5]=x830;
op[6]=((((-1.0)*x828))+(((-1.0)*x829))+x822+x825);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x831=(sj1*sj2);
IkReal x832=(r12*sj4);
IkReal x833=(cj1*cj2);
IkReal x834=(cj4*r11);
IkReal x835=(r00*sj3);
IkReal x836=(cj3*sj4);
IkReal x837=((4.0)*r01*sj3);
IkReal x838=((4.0)*cj4*r10);
IkReal x839=(cj3*cj4*r02);
IkReal x840=((4.0)*r00*x836);
IkReal x841=((12.0)*x839);
IkReal x842=((4.0)*x839);
IkReal x843=(x831*x838);
IkReal x844=((4.0)*x832*x833);
IkReal x845=(x833*x838);
IkReal x846=((12.0)*x832*x833);
IkReal x847=((12.0)*x831*x832);
IkReal x848=((4.0)*x831*x832);
IkReal x849=(x842+x848);
IkReal x850=(x841+x847);
IkReal x851=(x837+x840+x845);
IkReal x852=((((-8.0)*x831*x834))+(((8.0)*r01*x836))+(((-8.0)*x835))+(((8.0)*x833*x834)));
j5evalpoly[0]=((((-1.0)*x851))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x850))+(((-1.0)*x843))+x851+x846))))+((x852*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x852))+(((htj5*htj5*htj5)*(((((16.0)*r01*x836))+(((-16.0)*x835))+(((-16.0)*x831*x834))+(((16.0)*x833*x834))))))+(((-1.0)*x849))+x843+x844+(((htj5*htj5)*(((((-1.0)*x850))+(((-1.0)*x851))+x843+x846))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x843))+(((-1.0)*x849))+x851+x844)))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x853=(cj4*cj5);
IkReal x854=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x853))+((r02*sj4))+((r01*x854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x853))+(((-1.0)*r11*x854))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x853))+((r02*sj4))+((r01*x854))))+IKsqr((((r10*x853))+(((-1.0)*r11*x854))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x853))+((r02*sj4))+((r01*x854))), (((r10*x853))+(((-1.0)*r11*x854))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x855=IKcos(j0);
IkReal x856=IKsin(j0);
IkReal x857=((1.0)*cj4);
IkReal x858=(cj3*cj4);
IkReal x859=((1.0)*sj2);
IkReal x860=(cj5*r01);
IkReal x861=(cj1*cj2);
IkReal x862=((0.24)*cj2);
IkReal x863=(cj5*r00);
IkReal x864=(sj3*sj4);
IkReal x865=(r01*sj5);
IkReal x866=(cj5*r11);
IkReal x867=(r00*sj5);
IkReal x868=(r11*sj5);
IkReal x869=(cj3*r10);
IkReal x870=(cj3*sj4);
IkReal x871=(r10*sj5);
IkReal x872=(cj5*r10);
IkReal x873=(sj1*x856);
IkReal x874=(sj1*x855);
IkReal x875=(cj1*sj2*x855);
IkReal x876=(cj1*sj2*x856);
evalcond[0]=((((-1.0)*x857*x872))+((r12*sj4))+((cj4*x868))+x855);
evalcond[1]=((((-1.0)*x856))+((r02*sj4))+((cj4*x865))+(((-1.0)*x857*x863)));
evalcond[2]=((((-0.115)*x856))+(((0.265)*x874))+(((-1.0)*px))+(((-0.095)*x867))+(((-0.095)*x860))+(((0.24)*x875))+((x862*x874)));
evalcond[3]=((((0.115)*x855))+(((0.265)*x873))+(((-0.095)*x871))+(((-1.0)*py))+(((-0.095)*x866))+(((0.24)*x876))+((x862*x873)));
evalcond[4]=(((cj2*x874))+((cj3*x867))+((cj3*x860))+(((-1.0)*r02*sj3*x857))+x875+(((-1.0)*x863*x864))+((x864*x865)));
evalcond[5]=(((sj3*x860))+((sj3*x867))+((x863*x870))+((x855*x861))+((r02*x858))+(((-1.0)*x865*x870))+(((-1.0)*x859*x874)));
evalcond[6]=(((cj2*x873))+((cj3*x866))+((sj5*x869))+(((-1.0)*r12*sj3*x857))+(((-1.0)*x864*x872))+x876+((x864*x868)));
evalcond[7]=(((sj3*x866))+((sj3*x871))+((r12*x858))+((cj5*sj4*x869))+((x856*x861))+(((-1.0)*x868*x870))+(((-1.0)*x859*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x877=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x877);
rxp1_0=(pz*r11);
rxp1_1=(r01*x877);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x878=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x878);
rxp1_0=(pz*r11);
rxp1_1=(r01*x878);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x879=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x879);
rxp1_0=(pz*r11);
rxp1_1=(r01*x879);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x880=IKPowWithIntegerCheck(r22,-1);
if(!x880.valid){
continue;
}
cj4array[0]=((x880.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x881=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x881);
rxp1_0=(pz*r11);
rxp1_1=(r01*x881);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
IkReal x882=x883.value;
j5array[0]=((-1.0)*x882);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x882)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x884=(cj4*cj5);
IkReal x885=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x884))+((r01*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x885))+((r10*x884)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x884))+((r01*x885))))+IKsqr(((((-1.0)*r11*x885))+((r10*x884))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x884))+((r01*x885))), ((((-1.0)*r11*x885))+((r10*x884))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x886=IKcos(j0);
IkReal x887=IKsin(j0);
IkReal x888=(cj5*r01);
IkReal x889=((1.0)*sj2);
IkReal x890=(cj1*cj2);
IkReal x891=(r00*sj5);
IkReal x892=(cj5*r11);
IkReal x893=(cj4*sj5);
IkReal x894=(r10*sj5);
IkReal x895=(sj1*x887);
IkReal x896=((1.0)*cj4*cj5);
IkReal x897=(sj1*x886);
evalcond[0]=(((r11*x893))+(((-1.0)*r10*x896))+x886);
evalcond[1]=(((r01*x893))+(((-1.0)*x887))+(((-1.0)*r00*x896)));
evalcond[2]=(((x886*x890))+(((-1.0)*x889*x897))+x888+x891);
evalcond[3]=((((-1.0)*x889*x895))+x894+x892+((x887*x890)));
evalcond[4]=((((-0.095)*x891))+(((-0.095)*x888))+(((-0.115)*x887))+(((-1.0)*px))+(((0.265)*x897)));
evalcond[5]=((((-0.095)*x894))+(((-0.095)*x892))+(((-1.0)*py))+(((0.115)*x886))+(((0.265)*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x898=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x898);
rxp1_0=(pz*r11);
rxp1_1=(r01*x898);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(r22,-1);
if(!x899.valid){
continue;
}
cj4array[0]=((-1.0)*(x899.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x900=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x900);
rxp1_0=(pz*r11);
rxp1_1=(r01*x900);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
IkReal x901=x902.value;
j5array[0]=((-1.0)*x901);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x901)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x903=(cj4*cj5);
IkReal x904=(cj4*sj5);
if( IKabs((((r01*x904))+(((-1.0)*r00*x903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x904))+((r10*x903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x904))+(((-1.0)*r00*x903))))+IKsqr(((((-1.0)*r11*x904))+((r10*x903))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x904))+(((-1.0)*r00*x903))), ((((-1.0)*r11*x904))+((r10*x903))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x905=IKcos(j0);
IkReal x906=IKsin(j0);
IkReal x907=((1.0)*sj2);
IkReal x908=(cj1*cj2);
IkReal x909=((1.0)*cj5);
IkReal x910=(r00*sj5);
IkReal x911=((0.095)*cj5);
IkReal x912=(r10*sj5);
IkReal x913=(cj4*sj5);
IkReal x914=(sj1*x906);
IkReal x915=(sj1*x905);
evalcond[0]=((((-1.0)*cj4*r10*x909))+((r11*x913))+x905);
evalcond[1]=((((-1.0)*x906))+(((-1.0)*cj4*r00*x909))+((r01*x913)));
evalcond[2]=(((x905*x908))+(((-1.0)*r01*x909))+(((-1.0)*x910))+(((-1.0)*x907*x915)));
evalcond[3]=(((x906*x908))+(((-1.0)*r11*x909))+(((-1.0)*x912))+(((-1.0)*x907*x914)));
evalcond[4]=((((-1.0)*r01*x911))+(((-0.095)*x910))+(((-1.0)*px))+(((0.265)*x915))+(((-0.115)*x906)));
evalcond[5]=((((0.115)*x905))+(((-0.095)*x912))+(((-1.0)*py))+(((-1.0)*r11*x911))+(((0.265)*x914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x917=IKPowWithIntegerCheck(r22,-1);
if(!x917.valid){
continue;
}
cj4array[0]=((-1.0)*(x917.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x920 = IKatan2WithCheck(IkReal((r00*sj4)),IkReal(((-1.0)*r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x920.valid){
continue;
}
IkReal x919=x920.value;
j5array[0]=((-1.0)*x919);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x919)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj4*(IKcos(j5))))+(((-1.0)*r11*sj4*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x921=(cj4*cj5);
IkReal x922=(cj4*sj5);
if( IKabs((((r01*x922))+(((-1.0)*r00*x921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x921))+(((-1.0)*r11*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x922))+(((-1.0)*r00*x921))))+IKsqr((((r10*x921))+(((-1.0)*r11*x922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x922))+(((-1.0)*r00*x921))), (((r10*x921))+(((-1.0)*r11*x922))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x923=IKcos(j0);
IkReal x924=IKsin(j0);
IkReal x925=(r00*sj5);
IkReal x926=(cj5*r01);
IkReal x927=((0.24)*cj2);
IkReal x928=(cj5*r11);
IkReal x929=(cj1*sj2);
IkReal x930=(cj4*sj5);
IkReal x931=(r10*sj5);
IkReal x932=(sj1*x924);
IkReal x933=((1.0)*cj4*cj5);
IkReal x934=(sj1*x923);
evalcond[0]=((((-1.0)*r10*x933))+((r11*x930))+x923);
evalcond[1]=((((-1.0)*x924))+((r01*x930))+(((-1.0)*r00*x933)));
evalcond[2]=(((cj2*x934))+((x923*x929))+x926+x925);
evalcond[3]=(((x924*x929))+((cj2*x932))+x931+x928);
evalcond[4]=((((0.265)*x934))+(((0.24)*x923*x929))+((x927*x934))+(((-1.0)*px))+(((-0.115)*x924))+(((-0.095)*x926))+(((-0.095)*x925)));
evalcond[5]=((((0.265)*x932))+((x927*x932))+(((-1.0)*py))+(((0.115)*x923))+(((0.24)*x924*x929))+(((-0.095)*x931))+(((-0.095)*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x935=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x935);
rxp1_0=(pz*r11);
rxp1_1=(r01*x935);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x936=IKPowWithIntegerCheck(r22,-1);
if(!x936.valid){
continue;
}
cj4array[0]=((x936.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x937=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x937);
rxp1_0=(pz*r11);
rxp1_1=(r01*x937);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj4)),IkReal((r01*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
IkReal x938=x939.value;
j5array[0]=((-1.0)*x938);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x938)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj4*(IKsin(j5))))+(((-1.0)*r10*sj4*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x940=(cj4*cj5);
IkReal x941=(cj4*sj5);
if( IKabs((((r01*x941))+(((-1.0)*r00*x940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x941))+((r10*x940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x941))+(((-1.0)*r00*x940))))+IKsqr(((((-1.0)*r11*x941))+((r10*x940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x941))+(((-1.0)*r00*x940))), ((((-1.0)*r11*x941))+((r10*x940))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x942=IKcos(j0);
IkReal x943=IKsin(j0);
IkReal x944=(r00*sj5);
IkReal x945=((0.24)*cj2);
IkReal x946=((1.0)*cj5);
IkReal x947=((0.095)*cj5);
IkReal x948=(r10*sj5);
IkReal x949=(cj1*sj2);
IkReal x950=(cj4*sj5);
IkReal x951=(sj1*x943);
IkReal x952=(sj1*x942);
evalcond[0]=((((-1.0)*cj4*r10*x946))+((r11*x950))+x942);
evalcond[1]=(((r01*x950))+(((-1.0)*x943))+(((-1.0)*cj4*r00*x946)));
evalcond[2]=((((-1.0)*r01*x946))+(((-1.0)*x944))+((x942*x949))+((cj2*x952)));
evalcond[3]=((((-1.0)*r11*x946))+((x943*x949))+(((-1.0)*x948))+((cj2*x951)));
evalcond[4]=((((-1.0)*r01*x947))+(((0.265)*x952))+(((-1.0)*px))+(((-0.115)*x943))+((x945*x952))+(((-0.095)*x944))+(((0.24)*x942*x949)));
evalcond[5]=((((-1.0)*r11*x947))+(((0.265)*x951))+(((-1.0)*py))+((x945*x951))+(((0.115)*x942))+(((-0.095)*x948))+(((0.24)*x943*x949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x953=IKPowWithIntegerCheck(cj3,-1);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(r22,-1);
if(!x954.valid){
continue;
}
cj4array[0]=((-1.0)*(x953.value)*(x954.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*sj3*(IKcos(j4))))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x955=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x955);
rxp1_0=(pz*r11);
rxp1_1=(r01*x955);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x956=((0.38)*r11);
IkReal x957=((0.38)*r01);
IkReal x958=((12.0)*px);
IkReal x959=((12.0)*py);
IkReal x960=((1.92)*r01);
IkReal x961=((0.96)*r00);
IkReal x962=(cj4*sj1);
IkReal x963=((3.84)*r01);
IkReal x964=((0.92)*cj4);
IkReal x965=((1.92)*r11);
IkReal x966=((0.46)*cj4);
IkReal x967=((0.96)*r10);
IkReal x968=((1.84)*cj4);
IkReal x969=((3.84)*r11);
IkReal x970=(r10*x966);
IkReal x971=(r00*x966);
IkReal x972=(cj1*cj4*sj2);
IkReal x973=((1.06)*r00*x962);
IkReal x974=((1.06)*r10*x962);
IkReal x975=(x961*x972);
IkReal x976=(cj2*x961*x962);
IkReal x977=(x967*x972);
IkReal x978=(cj2*x962*x967);
IkReal x979=(x973+x975+x976+x956);
IkReal x980=(x971+x974+x977+x978);
j5eval[0]=((IKabs(((((-1.0)*x965*x972))+(((-1.0)*r01*x964))+(((-1.0)*cj2*x962*x965))+(((-2.12)*r11*x962))+(((-0.76)*r00)))))+(((0.5)*(IKabs(((((-1.0)*x959))+x970+(((-1.0)*x979)))))))+(((0.5)*(IKabs(((((-1.0)*x957))+(((-1.0)*x958))+x980)))))+(((0.5)*(IKabs(((((-1.0)*x969*x972))+(((-4.24)*r11*x962))+(((-1.0)*r01*x968))+(((-1.52)*r00))+(((-1.0)*cj2*x962*x969)))))))+(((0.5)*(IKabs(((((-1.0)*x959))+x979+(((-1.0)*x970)))))))+(((0.5)*(IKabs(((((-1.0)*x980))+(((-4.0)*px))+x957)))))+(((0.5)*(IKabs((((cj2*x962*x963))+((x963*x972))+(((-1.52)*r10))+(((4.24)*r01*x962))+(((-1.0)*r11*x968)))))))+(IKabs(((((2.12)*r01*x962))+((x960*x972))+((cj2*x960*x962))+(((-1.0)*r11*x964))+(((-0.76)*r10)))))+(((0.5)*(IKabs(((((-4.0)*py))+x979+(((-1.0)*x970)))))))+(((0.5)*(IKabs(((((-1.0)*x980))+(((-1.0)*x958))+x957))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x981=((12.0)*py);
IkReal x982=((0.38)*r11);
IkReal x983=((4.0)*py);
IkReal x984=(cj2*sj1);
IkReal x985=(cj1*sj2);
IkReal x986=(cj4*r01);
IkReal x987=(cj4*r11);
IkReal x988=(cj4*r00);
IkReal x989=((0.46)*cj4*r10);
IkReal x990=((3.84)*x986);
IkReal x991=((1.06)*sj1*x988);
IkReal x992=((0.96)*x985*x988);
IkReal x993=((0.96)*x984*x988);
IkReal x994=(x993+x992+x991+x982);
IkReal x995=((((1.92)*x984*x986))+(((2.12)*sj1*x986))+(((-0.92)*x987))+(((1.92)*x985*x986))+(((-0.76)*r10)));
op[0]=((((-1.0)*x989))+(((-1.0)*x983))+x994);
op[1]=x995;
op[2]=((((-1.0)*x989))+(((-1.0)*x981))+x994);
op[3]=((((-1.52)*r10))+(((-1.84)*x987))+((x985*x990))+(((4.24)*sj1*x986))+((x984*x990)));
op[4]=((((-1.0)*x981))+(((-1.0)*x994))+x989);
op[5]=x995;
op[6]=((((-1.0)*x983))+(((-1.0)*x994))+x989);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x996=((0.38)*r01);
IkReal x997=((12.0)*px);
IkReal x998=((4.0)*px);
IkReal x999=(cj4*r01);
IkReal x1000=((0.46)*cj4*r00);
IkReal x1001=(cj4*r11*sj1);
IkReal x1002=(cj1*cj4*sj2);
IkReal x1003=(cj4*r10*sj1);
IkReal x1004=((1.06)*x1003);
IkReal x1005=((0.96)*r10*x1002);
IkReal x1006=((0.96)*cj2*x1003);
IkReal x1007=(x1006+x1005+x1004+x1000);
IkReal x1008=((((-1.92)*cj2*x1001))+(((-2.12)*x1001))+(((-1.92)*r11*x1002))+(((-0.92)*x999))+(((-0.76)*r00)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5)*(((((-1.0)*x1007))+(((-1.0)*x997))+x996))))+x1007+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1007))+(((-1.0)*x998))+x996))))+(((htj5*htj5)*((x1007+(((-1.0)*x996))+(((-1.0)*x997))))))+(((-1.0)*x996))+(((-1.0)*x998))+(((htj5*htj5*htj5)*(((((-1.84)*x999))+(((-1.52)*r00))+(((-3.84)*cj2*x1001))+(((-3.84)*r11*x1002))+(((-4.24)*x1001))))))+((htj5*x1008))+((x1008*(htj5*htj5*htj5*htj5*htj5))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1009=(cj4*cj5);
IkReal x1010=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x1009))+((r01*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1010))+((r10*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1009))+((r01*x1010))))+IKsqr(((((-1.0)*r11*x1010))+((r10*x1009))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1009))+((r01*x1010))), ((((-1.0)*r11*x1010))+((r10*x1009))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1011=IKcos(j0);
IkReal x1012=IKsin(j0);
IkReal x1013=(r00*sj5);
IkReal x1014=((1.0)*sj2);
IkReal x1015=(cj5*r01);
IkReal x1016=(cj1*cj2);
IkReal x1017=((0.24)*cj2);
IkReal x1018=(sj3*sj4);
IkReal x1019=(r01*sj5);
IkReal x1020=(cj5*r11);
IkReal x1021=(r11*sj5);
IkReal x1022=(cj3*r10);
IkReal x1023=(cj5*sj4);
IkReal x1024=(r10*sj5);
IkReal x1025=(cj1*sj2);
IkReal x1026=(sj1*x1012);
IkReal x1027=((1.0)*cj5*r00);
IkReal x1028=(sj1*x1011);
IkReal x1029=((1.0)*cj3*sj4);
IkReal x1030=((1.0)*cj5*r10);
evalcond[0]=((((-1.0)*cj4*x1030))+x1011+((cj4*x1021)));
evalcond[1]=((((-1.0)*cj4*x1027))+((cj4*x1019))+(((-1.0)*x1012)));
evalcond[2]=(((cj2*x1028))+((x1011*x1025))+((cj3*x1015))+((cj3*x1013))+(((-1.0)*x1018*x1027))+((x1018*x1019)));
evalcond[3]=(((cj2*x1026))+((x1018*x1021))+((x1012*x1025))+((sj5*x1022))+(((-1.0)*x1018*x1030))+((cj3*x1020)));
evalcond[4]=((((-1.0)*x1019*x1029))+(((-1.0)*x1014*x1028))+((sj3*x1015))+((sj3*x1013))+((cj3*r00*x1023))+((x1011*x1016)));
evalcond[5]=((((-1.0)*x1021*x1029))+((x1012*x1016))+(((-1.0)*x1014*x1026))+((x1022*x1023))+((sj3*x1024))+((sj3*x1020)));
evalcond[6]=(((x1017*x1028))+(((-0.115)*x1012))+(((-0.095)*x1015))+(((-0.095)*x1013))+(((-1.0)*px))+(((0.265)*x1028))+(((0.24)*x1011*x1025)));
evalcond[7]=(((x1017*x1026))+(((-0.095)*x1024))+(((-0.095)*x1020))+(((0.24)*x1012*x1025))+(((-1.0)*py))+(((0.115)*x1011))+(((0.265)*x1026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(r22,-1);
if(!x1031.valid){
continue;
}
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(sj3,-1);
if(!x1032.valid){
continue;
}
cj4array[0]=((x1031.value)*(x1032.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+((cj3*r22*(IKcos(j4))))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1033=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1033);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1033);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1034=((0.38)*r11);
IkReal x1035=((0.38)*r01);
IkReal x1036=((12.0)*px);
IkReal x1037=((12.0)*py);
IkReal x1038=((1.92)*r01);
IkReal x1039=((0.96)*r00);
IkReal x1040=(cj4*sj1);
IkReal x1041=((3.84)*r01);
IkReal x1042=((0.92)*cj4);
IkReal x1043=((1.92)*r11);
IkReal x1044=((0.46)*cj4);
IkReal x1045=((0.96)*r10);
IkReal x1046=((1.84)*cj4);
IkReal x1047=((3.84)*r11);
IkReal x1048=(r10*x1044);
IkReal x1049=(r00*x1044);
IkReal x1050=(cj1*cj4*sj2);
IkReal x1051=((1.06)*r00*x1040);
IkReal x1052=((1.06)*r10*x1040);
IkReal x1053=(x1039*x1050);
IkReal x1054=(cj2*x1039*x1040);
IkReal x1055=(x1045*x1050);
IkReal x1056=(cj2*x1040*x1045);
IkReal x1057=(x1051+x1053+x1054+x1034);
IkReal x1058=(x1052+x1055+x1056+x1049);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1036))+(((-1.0)*x1035))+x1058)))))+(((0.5)*(IKabs(((((-1.0)*x1058))+(((-1.0)*x1036))+x1035)))))+(((0.5)*(IKabs(((((-1.0)*x1058))+x1035+(((-4.0)*px)))))))+(IKabs(((((-1.0)*r01*x1042))+(((-1.0)*x1043*x1050))+(((-2.12)*r11*x1040))+(((-0.76)*r00))+(((-1.0)*cj2*x1040*x1043)))))+(((0.5)*(IKabs(((((-1.0)*x1037))+x1057+(((-1.0)*x1048)))))))+(((0.5)*(IKabs(((((-1.0)*r01*x1046))+(((-1.52)*r00))+(((-4.24)*r11*x1040))+(((-1.0)*cj2*x1040*x1047))+(((-1.0)*x1047*x1050)))))))+(((0.5)*(IKabs((x1057+(((-4.0)*py))+(((-1.0)*x1048)))))))+(IKabs((((x1038*x1050))+(((2.12)*r01*x1040))+(((-1.0)*r11*x1042))+((cj2*x1038*x1040))+(((-0.76)*r10)))))+(((0.5)*(IKabs((((x1041*x1050))+(((-1.52)*r10))+(((-1.0)*r11*x1046))+(((4.24)*r01*x1040))+((cj2*x1040*x1041)))))))+(((0.5)*(IKabs(((((-1.0)*x1057))+(((-1.0)*x1037))+x1048))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1059=((12.0)*py);
IkReal x1060=((0.38)*r11);
IkReal x1061=((4.0)*py);
IkReal x1062=(cj2*sj1);
IkReal x1063=(cj1*sj2);
IkReal x1064=(cj4*r01);
IkReal x1065=(cj4*r11);
IkReal x1066=(cj4*r00);
IkReal x1067=((0.46)*cj4*r10);
IkReal x1068=((3.84)*x1064);
IkReal x1069=((1.06)*sj1*x1066);
IkReal x1070=((0.96)*x1063*x1066);
IkReal x1071=((0.96)*x1062*x1066);
IkReal x1072=(x1070+x1071+x1069+x1060);
IkReal x1073=((((1.92)*x1062*x1064))+(((-0.92)*x1065))+(((2.12)*sj1*x1064))+(((1.92)*x1063*x1064))+(((-0.76)*r10)));
op[0]=(x1072+(((-1.0)*x1061))+(((-1.0)*x1067)));
op[1]=x1073;
op[2]=((((-1.0)*x1059))+x1072+(((-1.0)*x1067)));
op[3]=((((-1.84)*x1065))+(((-1.52)*r10))+((x1062*x1068))+((x1063*x1068))+(((4.24)*sj1*x1064)));
op[4]=((((-1.0)*x1059))+x1067+(((-1.0)*x1072)));
op[5]=x1073;
op[6]=(x1067+(((-1.0)*x1061))+(((-1.0)*x1072)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1074=((0.38)*r01);
IkReal x1075=((12.0)*px);
IkReal x1076=((4.0)*px);
IkReal x1077=(cj4*r01);
IkReal x1078=((0.46)*cj4*r00);
IkReal x1079=(cj4*r11*sj1);
IkReal x1080=(cj1*cj4*sj2);
IkReal x1081=(cj4*r10*sj1);
IkReal x1082=((1.06)*x1081);
IkReal x1083=((0.96)*r10*x1080);
IkReal x1084=((0.96)*cj2*x1081);
IkReal x1085=(x1078+x1084+x1083+x1082);
IkReal x1086=((((-0.92)*x1077))+(((-1.92)*r11*x1080))+(((-2.12)*x1079))+(((-1.92)*cj2*x1079))+(((-0.76)*r00)));
j5evalpoly[0]=(x1085+(((htj5*htj5*htj5)*(((((-1.84)*x1077))+(((-1.52)*r00))+(((-4.24)*x1079))+(((-3.84)*cj2*x1079))+(((-3.84)*r11*x1080))))))+((x1086*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1086))+(((htj5*htj5)*((x1085+(((-1.0)*x1075))+(((-1.0)*x1074))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1074+(((-1.0)*x1085))+(((-1.0)*x1076))))))+(((htj5*htj5*htj5*htj5)*((x1074+(((-1.0)*x1085))+(((-1.0)*x1075))))))+(((-1.0)*x1074))+(((-1.0)*x1076)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1087=(cj4*cj5);
IkReal x1088=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x1087))+((r01*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1088))+((r10*x1087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1087))+((r01*x1088))))+IKsqr(((((-1.0)*r11*x1088))+((r10*x1087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1087))+((r01*x1088))), ((((-1.0)*r11*x1088))+((r10*x1087))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1089=IKcos(j0);
IkReal x1090=IKsin(j0);
IkReal x1091=(r00*sj5);
IkReal x1092=((1.0)*sj2);
IkReal x1093=(cj5*r01);
IkReal x1094=(cj1*cj2);
IkReal x1095=((0.24)*cj2);
IkReal x1096=(sj3*sj4);
IkReal x1097=(r01*sj5);
IkReal x1098=(cj5*r11);
IkReal x1099=(r11*sj5);
IkReal x1100=(cj3*r10);
IkReal x1101=(cj5*sj4);
IkReal x1102=(r10*sj5);
IkReal x1103=(cj1*sj2);
IkReal x1104=(sj1*x1090);
IkReal x1105=((1.0)*cj5*r00);
IkReal x1106=(sj1*x1089);
IkReal x1107=((1.0)*cj3*sj4);
IkReal x1108=((1.0)*cj5*r10);
evalcond[0]=(x1089+(((-1.0)*cj4*x1108))+((cj4*x1099)));
evalcond[1]=((((-1.0)*cj4*x1105))+((cj4*x1097))+(((-1.0)*x1090)));
evalcond[2]=(((x1089*x1103))+((cj2*x1106))+((x1096*x1097))+(((-1.0)*x1096*x1105))+((cj3*x1091))+((cj3*x1093)));
evalcond[3]=(((x1090*x1103))+((cj2*x1104))+((x1096*x1099))+((sj5*x1100))+(((-1.0)*x1096*x1108))+((cj3*x1098)));
evalcond[4]=((((-1.0)*x1092*x1106))+((x1089*x1094))+((cj3*r00*x1101))+((sj3*x1091))+((sj3*x1093))+(((-1.0)*x1097*x1107)));
evalcond[5]=(((sj3*x1102))+(((-1.0)*x1092*x1104))+(((-1.0)*x1099*x1107))+((x1100*x1101))+((sj3*x1098))+((x1090*x1094)));
evalcond[6]=((((-0.095)*x1091))+(((-0.095)*x1093))+(((-0.115)*x1090))+(((0.265)*x1106))+(((-1.0)*px))+(((0.24)*x1089*x1103))+((x1095*x1106)));
evalcond[7]=((((0.115)*x1089))+(((0.24)*x1090*x1103))+(((-0.095)*x1098))+(((0.265)*x1104))+(((-0.095)*x1102))+(((-1.0)*py))+((x1095*x1104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1111 = IKatan2WithCheck(IkReal(((-0.095)*r21)),IkReal(((-0.095)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1111.valid){
continue;
}
IkReal x1109=((1.0)*(x1111.value));
if((((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.009025)*(r21*r21)))+(((0.009025)*(r20*r20)))))),-1);
if(!x1112.valid){
continue;
}
if( (((x1112.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x1112.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1110=IKasin(((x1112.value)*(((((-0.24)*sj1*sj2))+(((-1.0)*pz))+(((0.265)*cj1))+(((0.24)*cj1*cj2))))));
j5array[0]=((((-1.0)*x1110))+(((-1.0)*x1109)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x1110+(((-1.0)*x1109)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1113=cj5*cj5;
IkReal x1114=r21*r21;
IkReal x1115=(cj3*x1113);
IkReal x1116=((((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+(((-1.0)*x1114*x1115))+((cj3*x1114))+((x1115*(r20*r20))));
j4eval[0]=x1116;
j4eval[1]=IKsign(x1116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1117=r21*r21;
IkReal x1118=cj5*cj5;
IkReal x1119=((1.0)*sj3);
IkReal x1120=(sj3*x1118);
IkReal x1121=((((-1.0)*x1119*(r22*r22)))+((x1117*x1120))+(((-1.0)*x1118*x1119*(r20*r20)))+(((2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1117*x1119)));
j4eval[0]=x1121;
j4eval[1]=IKsign(x1121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1122=cj1*cj1;
IkReal x1123=cj2*cj2;
IkReal x1124=(cj2*x1122);
IkReal x1125=(cj1*sj1*sj2);
IkReal x1126=(x1122*x1123);
j0eval[0]=((6.60990099009901)+(((-9.12475247524752)*x1126))+(((10.0752475247525)*x1125))+(((-10.0752475247525)*x1124))+(((9.12475247524752)*cj2*x1125))+(((10.0752475247525)*cj2))+(((-1.0)*x1122))+(((4.56237623762376)*x1123)));
j0eval[1]=IKsign(((3338.0)+(((-505.0)*x1122))+(((-5088.0)*x1124))+(((5088.0)*x1125))+(((2304.0)*x1123))+(((-4608.0)*x1126))+(((5088.0)*cj2))+(((4608.0)*cj2*x1125))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1127=((1.0)*cj5);
IkReal x1128=((1.0)*sj5);
IkReal x1129=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x1129;
j0eval[1]=((IKabs(((((-1.0)*r11*x1127))+(((-1.0)*r10*x1128)))))+(IKabs(((((-1.0)*r00*x1128))+(((-1.0)*r01*x1127))))));
j0eval[2]=IKsign(x1129);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1130=cj5*cj5;
IkReal x1131=r21*r21;
IkReal x1132=(cj1*sj2);
IkReal x1133=(cj5*r20);
IkReal x1134=(r21*sj5);
IkReal x1135=(cj2*sj1);
IkReal x1136=(x1131+(r22*r22)+(((-1.0)*x1130*x1131))+((x1130*(r20*r20)))+(((-2.0)*x1133*x1134)));
j4eval[0]=x1136;
j4eval[1]=IKsign(x1136);
j4eval[2]=((IKabs((((r22*x1132))+((r22*x1135)))))+(IKabs(((((-1.0)*x1132*x1134))+(((-1.0)*x1134*x1135))+((x1133*x1135))+((x1132*x1133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1137=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1137;
j4eval[1]=IKsign(x1137);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1138=cj5*cj5;
IkReal x1139=(r11*r21);
IkReal x1140=((1.0)*r20);
IkReal x1141=(cj5*sj5);
IkReal x1142=((((-1.0)*r12*r22))+((r11*r20*x1141))+((x1138*x1139))+(((-1.0)*x1139))+(((-1.0)*r10*x1138*x1140))+((r10*r21*x1141)));
j4eval[0]=x1142;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1140)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1143=cj5*cj5;
IkReal x1144=((1.0)*r21);
IkReal x1145=(cj5*sj5);
IkReal x1146=((1.0)*r20);
IkReal x1147=(((r01*r21))+((r00*r20*x1143))+(((-1.0)*r01*x1143*x1144))+((r02*r22))+(((-1.0)*r01*x1145*x1146))+(((-1.0)*r00*x1144*x1145)));
j4eval[0]=x1147;
j4eval[1]=IKsign(x1147);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1146)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1148=cj5*cj5;
IkReal x1149=((1.0)*r21);
IkReal x1150=(cj5*sj5);
IkReal x1151=((1.0)*r20);
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1149*x1150))+((r01*r21))+((r00*r20*x1148))+(((-1.0)*r01*x1148*x1149))+((r02*r22))+(((-1.0)*r01*x1150*x1151)))),-1);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1151)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1152.value)))+(x1153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1154=IKcos(j4);
IkReal x1155=IKsin(j4);
IkReal x1156=(cj5*r00);
IkReal x1157=(r01*sj5);
IkReal x1158=(r11*sj5);
IkReal x1159=(r21*sj5);
IkReal x1160=(cj5*r10);
IkReal x1161=(cj5*r20);
IkReal x1162=((1.0)*x1154);
IkReal x1163=((1.0)*x1155);
evalcond[0]=(((r22*x1155))+(((-1.0)*x1161*x1162))+((x1154*x1159)));
evalcond[1]=((((-1.0)*x1159*x1163))+((r22*x1154))+((x1155*x1161)));
evalcond[2]=(((r12*x1155))+cj0+(((-1.0)*x1160*x1162))+((x1154*x1158)));
evalcond[3]=(cj0+((r02*x1154))+(((-1.0)*x1157*x1163))+((x1155*x1156)));
evalcond[4]=(sj0+((r12*x1154))+(((-1.0)*x1158*x1163))+((x1155*x1160)));
evalcond[5]=((((-1.0)*x1156*x1162))+(((-1.0)*sj0))+((r02*x1155))+((x1154*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1164=cj5*cj5;
IkReal x1165=(r11*r21);
IkReal x1166=((1.0)*r20);
IkReal x1167=(cj5*sj5);
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(IKsign((((r11*r20*x1167))+((x1164*x1165))+((r10*r21*x1167))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1164*x1166))+(((-1.0)*x1165)))),-1);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1168.value)))+(x1169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j4);
IkReal x1171=IKsin(j4);
IkReal x1172=(cj5*r00);
IkReal x1173=(r01*sj5);
IkReal x1174=(r11*sj5);
IkReal x1175=(r21*sj5);
IkReal x1176=(cj5*r10);
IkReal x1177=(cj5*r20);
IkReal x1178=((1.0)*x1170);
IkReal x1179=((1.0)*x1171);
evalcond[0]=(((r22*x1171))+(((-1.0)*x1177*x1178))+((x1170*x1175)));
evalcond[1]=((((-1.0)*x1175*x1179))+((r22*x1170))+((x1171*x1177)));
evalcond[2]=(cj0+((r12*x1171))+(((-1.0)*x1176*x1178))+((x1170*x1174)));
evalcond[3]=(((r02*x1170))+(((-1.0)*x1173*x1179))+cj0+((x1171*x1172)));
evalcond[4]=(sj0+((r12*x1170))+(((-1.0)*x1174*x1179))+((x1171*x1176)));
evalcond[5]=(((r02*x1171))+(((-1.0)*sj0))+(((-1.0)*x1172*x1178))+((x1170*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1180.value)+(((1.5707963267949)*(x1181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1182=IKcos(j4);
IkReal x1183=IKsin(j4);
IkReal x1184=(cj5*r00);
IkReal x1185=(r01*sj5);
IkReal x1186=(r11*sj5);
IkReal x1187=(r21*sj5);
IkReal x1188=(cj5*r10);
IkReal x1189=(cj5*r20);
IkReal x1190=((1.0)*x1182);
IkReal x1191=((1.0)*x1183);
evalcond[0]=((((-1.0)*x1189*x1190))+((x1182*x1187))+((r22*x1183)));
evalcond[1]=(((x1183*x1189))+((r22*x1182))+(((-1.0)*x1187*x1191)));
evalcond[2]=(cj0+((x1182*x1186))+(((-1.0)*x1188*x1190))+((r12*x1183)));
evalcond[3]=(((x1183*x1184))+cj0+((r02*x1182))+(((-1.0)*x1185*x1191)));
evalcond[4]=(sj0+((x1183*x1188))+(((-1.0)*x1186*x1191))+((r12*x1182)));
evalcond[5]=((((-1.0)*sj0))+((x1182*x1185))+(((-1.0)*x1184*x1190))+((r02*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1192=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1192;
j4eval[1]=IKsign(x1192);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1193=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1193;
j4eval[1]=IKsign(x1193);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1194=cj5*cj5;
IkReal x1195=(r11*r21);
IkReal x1196=((1.0)*r20);
IkReal x1197=(cj5*sj5);
IkReal x1198=(((x1194*x1195))+(((-1.0)*r12*r22))+((r10*r21*x1197))+((r11*r20*x1197))+(((-1.0)*r10*x1194*x1196))+(((-1.0)*x1195)));
j4eval[0]=x1198;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1196))))));
j4eval[2]=IKsign(x1198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1199=cj5*cj5;
IkReal x1200=(r11*r21);
IkReal x1201=((1.0)*r20);
IkReal x1202=(cj5*sj5);
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1199*x1201))+(((-1.0)*r12*r22))+((r11*r20*x1202))+((x1199*x1200))+(((-1.0)*x1200))+((r10*r21*x1202)))),-1);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1203.value)))+(x1204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j4);
IkReal x1206=IKsin(j4);
IkReal x1207=((1.0)*sj0);
IkReal x1208=(cj5*r00);
IkReal x1209=(cj5*r10);
IkReal x1210=(cj5*r20);
IkReal x1211=((1.0)*x1205);
IkReal x1212=(sj5*x1205);
IkReal x1213=((1.0)*sj5*x1206);
evalcond[0]=((((-1.0)*x1210*x1211))+((r21*x1212))+((r22*x1206)));
evalcond[1]=(((x1206*x1210))+(((-1.0)*r21*x1213))+((r22*x1205)));
evalcond[2]=((((-1.0)*x1209*x1211))+((r11*x1212))+cj0+((r12*x1206)));
evalcond[3]=((((-1.0)*x1208*x1211))+((r01*x1212))+(((-1.0)*x1207))+((r02*x1206)));
evalcond[4]=((((-1.0)*r01*x1213))+((x1206*x1208))+((r02*x1205))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1205))+(((-1.0)*x1207))+((x1206*x1209))+(((-1.0)*r11*x1213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1214 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1214.valid){
continue;
}
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1214.value)+(((1.5707963267949)*(x1215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1216=IKcos(j4);
IkReal x1217=IKsin(j4);
IkReal x1218=((1.0)*sj0);
IkReal x1219=(cj5*r00);
IkReal x1220=(cj5*r10);
IkReal x1221=(cj5*r20);
IkReal x1222=((1.0)*x1216);
IkReal x1223=(sj5*x1216);
IkReal x1224=((1.0)*sj5*x1217);
evalcond[0]=(((r22*x1217))+(((-1.0)*x1221*x1222))+((r21*x1223)));
evalcond[1]=(((r22*x1216))+((x1217*x1221))+(((-1.0)*r21*x1224)));
evalcond[2]=(((r12*x1217))+cj0+(((-1.0)*x1220*x1222))+((r11*x1223)));
evalcond[3]=(((r01*x1223))+((r02*x1217))+(((-1.0)*x1218))+(((-1.0)*x1219*x1222)));
evalcond[4]=((((-1.0)*r01*x1224))+((r02*x1216))+((x1217*x1219))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1216))+((x1217*x1220))+(((-1.0)*r11*x1224))+(((-1.0)*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1225 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1225.valid){
continue;
}
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1225.value)+(((1.5707963267949)*(x1226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1227=IKcos(j4);
IkReal x1228=IKsin(j4);
IkReal x1229=((1.0)*sj0);
IkReal x1230=(cj5*r00);
IkReal x1231=(cj5*r10);
IkReal x1232=(cj5*r20);
IkReal x1233=((1.0)*x1227);
IkReal x1234=(sj5*x1227);
IkReal x1235=((1.0)*sj5*x1228);
evalcond[0]=(((r22*x1228))+((r21*x1234))+(((-1.0)*x1232*x1233)));
evalcond[1]=((((-1.0)*r21*x1235))+((r22*x1227))+((x1228*x1232)));
evalcond[2]=(cj0+((r11*x1234))+(((-1.0)*x1231*x1233))+((r12*x1228)));
evalcond[3]=((((-1.0)*x1229))+((r01*x1234))+(((-1.0)*x1230*x1233))+((r02*x1228)));
evalcond[4]=((((-1.0)*r01*x1235))+((r02*x1227))+((x1228*x1230))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1229))+(((-1.0)*r11*x1235))+((x1228*x1231))+((r12*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.37807070101857)*py))+(((3.17555422408628)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((1.37807070101857)*py))+(((3.17555422408628)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((1.37807070101857)*py))+(((3.17555422408628)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1236=IKcos(j0);
IkReal x1237=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.115)*x1237))+(((0.265)*x1236)));
evalcond[1]=((((0.115)*x1236))+(((-1.0)*py))+(((0.265)*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1238=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1238;
j4eval[1]=IKsign(x1238);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1239=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1239;
j4eval[1]=IKsign(x1239);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1240=cj5*cj5;
IkReal x1241=(r11*r21);
IkReal x1242=((1.0)*r20);
IkReal x1243=(cj5*sj5);
IkReal x1244=(((r11*r20*x1243))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1240*x1242))+((x1240*x1241))+(((-1.0)*x1241))+((r10*r21*x1243)));
j4eval[0]=x1244;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1242))))));
j4eval[2]=IKsign(x1244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1245=cj5*cj5;
IkReal x1246=(r11*r21);
IkReal x1247=((1.0)*r20);
IkReal x1248=(cj5*sj5);
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(IKsign((((r11*r20*x1248))+(((-1.0)*r12*r22))+(((-1.0)*x1246))+((x1245*x1246))+(((-1.0)*r10*x1245*x1247))+((r10*r21*x1248)))),-1);
if(!x1250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1249.value)+(((1.5707963267949)*(x1250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1251=IKcos(j4);
IkReal x1252=IKsin(j4);
IkReal x1253=((1.0)*sj0);
IkReal x1254=(cj5*r00);
IkReal x1255=(cj5*r10);
IkReal x1256=(cj5*r20);
IkReal x1257=((1.0)*x1251);
IkReal x1258=(sj5*x1251);
IkReal x1259=((1.0)*sj5*x1252);
evalcond[0]=(((r22*x1252))+((r21*x1258))+(((-1.0)*x1256*x1257)));
evalcond[1]=((((-1.0)*r21*x1259))+((r22*x1251))+((x1252*x1256)));
evalcond[2]=(((r11*x1258))+cj0+((r12*x1252))+(((-1.0)*x1255*x1257)));
evalcond[3]=((((-1.0)*x1253))+((r02*x1252))+(((-1.0)*x1254*x1257))+((r01*x1258)));
evalcond[4]=(((r02*x1251))+(((-1.0)*r01*x1259))+((x1252*x1254))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1253))+(((-1.0)*r11*x1259))+((r12*x1251))+((x1252*x1255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1260.value)+(((1.5707963267949)*(x1261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1262=IKcos(j4);
IkReal x1263=IKsin(j4);
IkReal x1264=((1.0)*sj0);
IkReal x1265=(cj5*r00);
IkReal x1266=(cj5*r10);
IkReal x1267=(cj5*r20);
IkReal x1268=((1.0)*x1262);
IkReal x1269=(sj5*x1262);
IkReal x1270=((1.0)*sj5*x1263);
evalcond[0]=(((r21*x1269))+((r22*x1263))+(((-1.0)*x1267*x1268)));
evalcond[1]=(((r22*x1262))+((x1263*x1267))+(((-1.0)*r21*x1270)));
evalcond[2]=(((r11*x1269))+cj0+((r12*x1263))+(((-1.0)*x1266*x1268)));
evalcond[3]=(((r02*x1263))+(((-1.0)*x1265*x1268))+((r01*x1269))+(((-1.0)*x1264)));
evalcond[4]=((((-1.0)*r01*x1270))+((r02*x1262))+((x1263*x1265))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1262))+(((-1.0)*r11*x1270))+((x1263*x1266))+(((-1.0)*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1271.value)+(((1.5707963267949)*(x1272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j4);
IkReal x1274=IKsin(j4);
IkReal x1275=((1.0)*sj0);
IkReal x1276=(cj5*r00);
IkReal x1277=(cj5*r10);
IkReal x1278=(cj5*r20);
IkReal x1279=((1.0)*x1273);
IkReal x1280=(sj5*x1273);
IkReal x1281=((1.0)*sj5*x1274);
evalcond[0]=(((r22*x1274))+((r21*x1280))+(((-1.0)*x1278*x1279)));
evalcond[1]=(((r22*x1273))+((x1274*x1278))+(((-1.0)*r21*x1281)));
evalcond[2]=(((r12*x1274))+((r11*x1280))+cj0+(((-1.0)*x1277*x1279)));
evalcond[3]=((((-1.0)*x1275))+((r02*x1274))+(((-1.0)*x1276*x1279))+((r01*x1280)));
evalcond[4]=(((r02*x1273))+((x1274*x1276))+(((-1.0)*r01*x1281))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1273))+(((-1.0)*x1275))+((x1274*x1277))+(((-1.0)*r11*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.37807070101857)*py))+(((3.17555422408628)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((1.37807070101857)*py))+(((3.17555422408628)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((1.37807070101857)*py))+(((3.17555422408628)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1282=IKcos(j0);
IkReal x1283=IKsin(j0);
evalcond[0]=((((-0.115)*x1283))+(((-1.0)*px))+(((0.265)*x1282)));
evalcond[1]=((((-1.0)*py))+(((0.115)*x1282))+(((0.265)*x1283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1284=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1284;
j4eval[1]=IKsign(x1284);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1285=cj5*cj5;
IkReal x1286=(r11*r21);
IkReal x1287=((1.0)*r20);
IkReal x1288=(cj5*sj5);
IkReal x1289=(((x1285*x1286))+(((-1.0)*x1286))+(((-1.0)*r10*x1285*x1287))+(((-1.0)*r12*r22))+((r10*r21*x1288))+((r11*r20*x1288)));
j4eval[0]=x1289;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1287)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1289);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1290=cj5*cj5;
IkReal x1291=((1.0)*r21);
IkReal x1292=(cj5*sj5);
IkReal x1293=((1.0)*r20);
IkReal x1294=((((-1.0)*r01*x1292*x1293))+((r01*r21))+(((-1.0)*r00*x1291*x1292))+((r00*r20*x1290))+((r02*r22))+(((-1.0)*r01*x1290*x1291)));
j4eval[0]=x1294;
j4eval[1]=IKsign(x1294);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1293))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1295=cj5*cj5;
IkReal x1296=((1.0)*r21);
IkReal x1297=(cj5*sj5);
IkReal x1298=((1.0)*r20);
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1295))+(((-1.0)*r01*x1297*x1298))+(((-1.0)*r00*x1296*x1297))+((r02*r22))+(((-1.0)*r01*x1295*x1296)))),-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1298)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1299.value)))+(x1300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1301=IKcos(j4);
IkReal x1302=IKsin(j4);
IkReal x1303=(cj5*r00);
IkReal x1304=(r01*sj5);
IkReal x1305=(r11*sj5);
IkReal x1306=(r21*sj5);
IkReal x1307=(cj5*r10);
IkReal x1308=(cj5*r20);
IkReal x1309=((1.0)*x1301);
IkReal x1310=((1.0)*x1302);
evalcond[0]=((((-1.0)*x1308*x1309))+((r22*x1302))+((x1301*x1306)));
evalcond[1]=((((-1.0)*x1306*x1310))+((x1302*x1308))+((r22*x1301)));
evalcond[2]=((((-1.0)*x1307*x1309))+cj0+((r12*x1302))+((x1301*x1305)));
evalcond[3]=((((-1.0)*x1304*x1310))+cj0+((x1302*x1303))+((r02*x1301)));
evalcond[4]=(sj0+((r12*x1301))+(((-1.0)*x1305*x1310))+((x1302*x1307)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1303*x1309))+((r02*x1302))+((x1301*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1311=cj5*cj5;
IkReal x1312=(r11*r21);
IkReal x1313=((1.0)*r20);
IkReal x1314=(cj5*sj5);
CheckValue<IkReal> x1315 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1315.valid){
continue;
}
CheckValue<IkReal> x1316=IKPowWithIntegerCheck(IKsign((((x1311*x1312))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1311*x1313))+(((-1.0)*x1312))+((r11*r20*x1314))+((r10*r21*x1314)))),-1);
if(!x1316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1315.value)+(((1.5707963267949)*(x1316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1317=IKcos(j4);
IkReal x1318=IKsin(j4);
IkReal x1319=(cj5*r00);
IkReal x1320=(r01*sj5);
IkReal x1321=(r11*sj5);
IkReal x1322=(r21*sj5);
IkReal x1323=(cj5*r10);
IkReal x1324=(cj5*r20);
IkReal x1325=((1.0)*x1317);
IkReal x1326=((1.0)*x1318);
evalcond[0]=((((-1.0)*x1324*x1325))+((r22*x1318))+((x1317*x1322)));
evalcond[1]=((((-1.0)*x1322*x1326))+((r22*x1317))+((x1318*x1324)));
evalcond[2]=((((-1.0)*x1323*x1325))+cj0+((r12*x1318))+((x1317*x1321)));
evalcond[3]=(((x1318*x1319))+cj0+((r02*x1317))+(((-1.0)*x1320*x1326)));
evalcond[4]=(sj0+(((-1.0)*x1321*x1326))+((r12*x1317))+((x1318*x1323)));
evalcond[5]=((((-1.0)*x1319*x1325))+(((-1.0)*sj0))+((r02*x1318))+((x1317*x1320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1327.value)+(((1.5707963267949)*(x1328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1329=IKcos(j4);
IkReal x1330=IKsin(j4);
IkReal x1331=(cj5*r00);
IkReal x1332=(r01*sj5);
IkReal x1333=(r11*sj5);
IkReal x1334=(r21*sj5);
IkReal x1335=(cj5*r10);
IkReal x1336=(cj5*r20);
IkReal x1337=((1.0)*x1329);
IkReal x1338=((1.0)*x1330);
evalcond[0]=(((x1329*x1334))+(((-1.0)*x1336*x1337))+((r22*x1330)));
evalcond[1]=((((-1.0)*x1334*x1338))+((r22*x1329))+((x1330*x1336)));
evalcond[2]=((((-1.0)*x1335*x1337))+((x1329*x1333))+((r12*x1330))+cj0);
evalcond[3]=(cj0+((r02*x1329))+(((-1.0)*x1332*x1338))+((x1330*x1331)));
evalcond[4]=(sj0+((r12*x1329))+(((-1.0)*x1333*x1338))+((x1330*x1335)));
evalcond[5]=(((x1329*x1332))+(((-1.0)*sj0))+(((-1.0)*x1331*x1337))+((r02*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1339=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1339;
j4eval[1]=IKsign(x1339);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1340=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1341=cj5*cj5;
IkReal x1342=(r11*r21);
IkReal x1343=((1.0)*r20);
IkReal x1344=(cj5*sj5);
IkReal x1345=((((-1.0)*r10*x1341*x1343))+(((-1.0)*r12*r22))+((r11*r20*x1344))+((r10*r21*x1344))+((x1341*x1342))+(((-1.0)*x1342)));
j4eval[0]=x1345;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1343))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1346=cj5*cj5;
IkReal x1347=(r11*r21);
IkReal x1348=((1.0)*r20);
IkReal x1349=(cj5*sj5);
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1348))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1346*x1348))+(((-1.0)*r12*r22))+((r11*r20*x1349))+((x1346*x1347))+((r10*r21*x1349))+(((-1.0)*x1347)))),-1);
if(!x1351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1350.value)+(((1.5707963267949)*(x1351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1352=IKcos(j4);
IkReal x1353=IKsin(j4);
IkReal x1354=((1.0)*sj0);
IkReal x1355=(cj5*r00);
IkReal x1356=(cj5*r10);
IkReal x1357=(cj5*r20);
IkReal x1358=((1.0)*x1352);
IkReal x1359=(sj5*x1352);
IkReal x1360=((1.0)*sj5*x1353);
evalcond[0]=(((r22*x1353))+(((-1.0)*x1357*x1358))+((r21*x1359)));
evalcond[1]=(((r22*x1352))+(((-1.0)*r21*x1360))+((x1353*x1357)));
evalcond[2]=(cj0+((r11*x1359))+(((-1.0)*x1356*x1358))+((r12*x1353)));
evalcond[3]=((((-1.0)*x1354))+((r02*x1353))+(((-1.0)*x1355*x1358))+((r01*x1359)));
evalcond[4]=(((r02*x1352))+(((-1.0)*r01*x1360))+((x1353*x1355))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1354))+(((-1.0)*r11*x1360))+((r12*x1352))+((x1353*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1361.value)+(((1.5707963267949)*(x1362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1363=IKcos(j4);
IkReal x1364=IKsin(j4);
IkReal x1365=((1.0)*sj0);
IkReal x1366=(cj5*r00);
IkReal x1367=(cj5*r10);
IkReal x1368=(cj5*r20);
IkReal x1369=((1.0)*x1363);
IkReal x1370=(sj5*x1363);
IkReal x1371=((1.0)*sj5*x1364);
evalcond[0]=(((r22*x1364))+((r21*x1370))+(((-1.0)*x1368*x1369)));
evalcond[1]=(((r22*x1363))+(((-1.0)*r21*x1371))+((x1364*x1368)));
evalcond[2]=(cj0+((r11*x1370))+((r12*x1364))+(((-1.0)*x1367*x1369)));
evalcond[3]=((((-1.0)*x1366*x1369))+((r02*x1364))+((r01*x1370))+(((-1.0)*x1365)));
evalcond[4]=((((-1.0)*r01*x1371))+((r02*x1363))+((x1364*x1366))+(((-1.0)*cj0)));
evalcond[5]=(((x1364*x1367))+(((-1.0)*r11*x1371))+((r12*x1363))+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1372 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1372.valid){
continue;
}
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1372.value)+(((1.5707963267949)*(x1373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1374=IKcos(j4);
IkReal x1375=IKsin(j4);
IkReal x1376=((1.0)*sj0);
IkReal x1377=(cj5*r00);
IkReal x1378=(cj5*r10);
IkReal x1379=(cj5*r20);
IkReal x1380=((1.0)*x1374);
IkReal x1381=(sj5*x1374);
IkReal x1382=((1.0)*sj5*x1375);
evalcond[0]=(((r21*x1381))+((r22*x1375))+(((-1.0)*x1379*x1380)));
evalcond[1]=(((x1375*x1379))+(((-1.0)*r21*x1382))+((r22*x1374)));
evalcond[2]=(cj0+((r12*x1375))+((r11*x1381))+(((-1.0)*x1378*x1380)));
evalcond[3]=((((-1.0)*x1377*x1380))+(((-1.0)*x1376))+((r01*x1381))+((r02*x1375)));
evalcond[4]=(((x1375*x1377))+(((-1.0)*r01*x1382))+((r02*x1374))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1382))+((x1375*x1378))+((r12*x1374))+(((-1.0)*x1376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1383=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1383;
j4eval[1]=IKsign(x1383);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1384=cj5*cj5;
IkReal x1385=(r11*r21);
IkReal x1386=((1.0)*r20);
IkReal x1387=(cj5*sj5);
IkReal x1388=((((-1.0)*r12*r22))+((r11*r20*x1387))+(((-1.0)*x1385))+((r10*r21*x1387))+((x1384*x1385))+(((-1.0)*r10*x1384*x1386)));
j4eval[0]=x1388;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1386))))));
j4eval[2]=IKsign(x1388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1389=cj5*cj5;
IkReal x1390=((1.0)*r21);
IkReal x1391=(cj5*sj5);
IkReal x1392=((1.0)*r20);
IkReal x1393=((((-1.0)*r01*x1389*x1390))+(((-1.0)*r01*x1391*x1392))+(((-1.0)*r00*x1390*x1391))+((r01*r21))+((r02*r22))+((r00*r20*x1389)));
j4eval[0]=x1393;
j4eval[1]=IKsign(x1393);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1392))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1394=cj5*cj5;
IkReal x1395=((1.0)*r21);
IkReal x1396=(cj5*sj5);
IkReal x1397=((1.0)*r20);
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1394*x1395))+((r01*r21))+(((-1.0)*r01*x1396*x1397))+(((-1.0)*r00*x1395*x1396))+((r02*r22))+((r00*r20*x1394)))),-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1397)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1398.value)))+(x1399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1400=IKcos(j4);
IkReal x1401=IKsin(j4);
IkReal x1402=(cj5*r00);
IkReal x1403=(r01*sj5);
IkReal x1404=(r11*sj5);
IkReal x1405=(r21*sj5);
IkReal x1406=(cj5*r10);
IkReal x1407=(cj5*r20);
IkReal x1408=((1.0)*x1400);
IkReal x1409=((1.0)*x1401);
evalcond[0]=((((-1.0)*x1407*x1408))+((r22*x1401))+((x1400*x1405)));
evalcond[1]=((((-1.0)*x1405*x1409))+((r22*x1400))+((x1401*x1407)));
evalcond[2]=(cj0+((r12*x1401))+(((-1.0)*x1406*x1408))+((x1400*x1404)));
evalcond[3]=(cj0+((r02*x1400))+(((-1.0)*x1403*x1409))+((x1401*x1402)));
evalcond[4]=(sj0+((r12*x1400))+(((-1.0)*x1404*x1409))+((x1401*x1406)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1401))+(((-1.0)*x1402*x1408))+((x1400*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1410=cj5*cj5;
IkReal x1411=(r11*r21);
IkReal x1412=((1.0)*r20);
IkReal x1413=(cj5*sj5);
CheckValue<IkReal> x1414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1414.valid){
continue;
}
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r10*r21*x1413))+((r11*r20*x1413))+((x1410*x1411))+(((-1.0)*r10*x1410*x1412))+(((-1.0)*x1411)))),-1);
if(!x1415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1414.value)+(((1.5707963267949)*(x1415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1416=IKcos(j4);
IkReal x1417=IKsin(j4);
IkReal x1418=(cj5*r00);
IkReal x1419=(r01*sj5);
IkReal x1420=(r11*sj5);
IkReal x1421=(r21*sj5);
IkReal x1422=(cj5*r10);
IkReal x1423=(cj5*r20);
IkReal x1424=((1.0)*x1416);
IkReal x1425=((1.0)*x1417);
evalcond[0]=((((-1.0)*x1423*x1424))+((r22*x1417))+((x1416*x1421)));
evalcond[1]=((((-1.0)*x1421*x1425))+((r22*x1416))+((x1417*x1423)));
evalcond[2]=(cj0+(((-1.0)*x1422*x1424))+((r12*x1417))+((x1416*x1420)));
evalcond[3]=(cj0+((x1417*x1418))+(((-1.0)*x1419*x1425))+((r02*x1416)));
evalcond[4]=(sj0+(((-1.0)*x1420*x1425))+((r12*x1416))+((x1417*x1422)));
evalcond[5]=((((-1.0)*sj0))+((x1416*x1419))+(((-1.0)*x1418*x1424))+((r02*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1426 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1426.valid){
continue;
}
CheckValue<IkReal> x1427=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1426.value)+(((1.5707963267949)*(x1427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1428=IKcos(j4);
IkReal x1429=IKsin(j4);
IkReal x1430=(cj5*r00);
IkReal x1431=(r01*sj5);
IkReal x1432=(r11*sj5);
IkReal x1433=(r21*sj5);
IkReal x1434=(cj5*r10);
IkReal x1435=(cj5*r20);
IkReal x1436=((1.0)*x1428);
IkReal x1437=((1.0)*x1429);
evalcond[0]=(((x1428*x1433))+(((-1.0)*x1435*x1436))+((r22*x1429)));
evalcond[1]=(((x1429*x1435))+((r22*x1428))+(((-1.0)*x1433*x1437)));
evalcond[2]=(((x1428*x1432))+cj0+(((-1.0)*x1434*x1436))+((r12*x1429)));
evalcond[3]=(((x1429*x1430))+cj0+(((-1.0)*x1431*x1437))+((r02*x1428)));
evalcond[4]=(((x1429*x1434))+sj0+(((-1.0)*x1432*x1437))+((r12*x1428)));
evalcond[5]=(((x1428*x1431))+(((-1.0)*sj0))+((r02*x1429))+(((-1.0)*x1430*x1436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.17555422408628)*px))+(((1.37807070101857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((-3.17555422408628)*px))+(((1.37807070101857)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((-3.17555422408628)*px))+(((1.37807070101857)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1438=IKcos(j0);
IkReal x1439=IKsin(j0);
evalcond[0]=((((-0.265)*x1438))+(((-1.0)*px))+(((-0.115)*x1439)));
evalcond[1]=((((-0.265)*x1439))+(((-1.0)*py))+(((0.115)*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1440=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1440;
j4eval[1]=IKsign(x1440);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1441=cj5*cj5;
IkReal x1442=(r11*r21);
IkReal x1443=((1.0)*r20);
IkReal x1444=(cj5*sj5);
IkReal x1445=(((x1441*x1442))+((r11*r20*x1444))+(((-1.0)*r12*r22))+(((-1.0)*x1442))+(((-1.0)*r10*x1441*x1443))+((r10*r21*x1444)));
j4eval[0]=x1445;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1443)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1446=cj5*cj5;
IkReal x1447=((1.0)*r21);
IkReal x1448=(cj5*sj5);
IkReal x1449=((1.0)*r20);
IkReal x1450=((((-1.0)*r01*x1446*x1447))+((r00*r20*x1446))+((r01*r21))+(((-1.0)*r01*x1448*x1449))+(((-1.0)*r00*x1447*x1448))+((r02*r22)));
j4eval[0]=x1450;
j4eval[1]=IKsign(x1450);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1449))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1451=cj5*cj5;
IkReal x1452=((1.0)*r21);
IkReal x1453=(cj5*sj5);
IkReal x1454=((1.0)*r20);
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1454)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1452*x1453))+(((-1.0)*r01*x1451*x1452))+((r01*r21))+((r00*r20*x1451))+(((-1.0)*r01*x1453*x1454))+((r02*r22)))),-1);
if(!x1456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1455.value)+(((1.5707963267949)*(x1456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1457=IKcos(j4);
IkReal x1458=IKsin(j4);
IkReal x1459=(cj5*r00);
IkReal x1460=(r01*sj5);
IkReal x1461=(r11*sj5);
IkReal x1462=(r21*sj5);
IkReal x1463=(cj5*r10);
IkReal x1464=(cj5*r20);
IkReal x1465=((1.0)*x1457);
IkReal x1466=((1.0)*x1458);
evalcond[0]=((((-1.0)*x1464*x1465))+((x1457*x1462))+((r22*x1458)));
evalcond[1]=((((-1.0)*x1462*x1466))+((x1458*x1464))+((r22*x1457)));
evalcond[2]=(cj0+((r12*x1458))+(((-1.0)*x1463*x1465))+((x1457*x1461)));
evalcond[3]=(cj0+((x1458*x1459))+(((-1.0)*x1460*x1466))+((r02*x1457)));
evalcond[4]=(sj0+((r12*x1457))+((x1458*x1463))+(((-1.0)*x1461*x1466)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1459*x1465))+((x1457*x1460))+((r02*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1467=cj5*cj5;
IkReal x1468=(r11*r21);
IkReal x1469=((1.0)*r20);
IkReal x1470=(cj5*sj5);
CheckValue<IkReal> x1471=IKPowWithIntegerCheck(IKsign((((r11*r20*x1470))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1467*x1469))+((x1467*x1468))+(((-1.0)*x1468))+((r10*r21*x1470)))),-1);
if(!x1471.valid){
continue;
}
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1471.value)))+(x1472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1473=IKcos(j4);
IkReal x1474=IKsin(j4);
IkReal x1475=(cj5*r00);
IkReal x1476=(r01*sj5);
IkReal x1477=(r11*sj5);
IkReal x1478=(r21*sj5);
IkReal x1479=(cj5*r10);
IkReal x1480=(cj5*r20);
IkReal x1481=((1.0)*x1473);
IkReal x1482=((1.0)*x1474);
evalcond[0]=(((r22*x1474))+(((-1.0)*x1480*x1481))+((x1473*x1478)));
evalcond[1]=(((r22*x1473))+((x1474*x1480))+(((-1.0)*x1478*x1482)));
evalcond[2]=(((r12*x1474))+(((-1.0)*x1479*x1481))+cj0+((x1473*x1477)));
evalcond[3]=(cj0+((x1474*x1475))+((r02*x1473))+(((-1.0)*x1476*x1482)));
evalcond[4]=(((r12*x1473))+sj0+((x1474*x1479))+(((-1.0)*x1477*x1482)));
evalcond[5]=((((-1.0)*sj0))+((r02*x1474))+((x1473*x1476))+(((-1.0)*x1475*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1483 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1483.valid){
continue;
}
CheckValue<IkReal> x1484=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1483.value)+(((1.5707963267949)*(x1484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1485=IKcos(j4);
IkReal x1486=IKsin(j4);
IkReal x1487=(cj5*r00);
IkReal x1488=(r01*sj5);
IkReal x1489=(r11*sj5);
IkReal x1490=(r21*sj5);
IkReal x1491=(cj5*r10);
IkReal x1492=(cj5*r20);
IkReal x1493=((1.0)*x1485);
IkReal x1494=((1.0)*x1486);
evalcond[0]=((((-1.0)*x1492*x1493))+((x1485*x1490))+((r22*x1486)));
evalcond[1]=(((x1486*x1492))+(((-1.0)*x1490*x1494))+((r22*x1485)));
evalcond[2]=(cj0+((r12*x1486))+(((-1.0)*x1491*x1493))+((x1485*x1489)));
evalcond[3]=(cj0+((x1486*x1487))+(((-1.0)*x1488*x1494))+((r02*x1485)));
evalcond[4]=(sj0+((r12*x1485))+((x1486*x1491))+(((-1.0)*x1489*x1494)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1487*x1493))+((x1485*x1488))+((r02*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.17555422408628)*px))+(((1.37807070101857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((-3.17555422408628)*px))+(((1.37807070101857)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((-3.17555422408628)*px))+(((1.37807070101857)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1495=IKcos(j0);
IkReal x1496=IKsin(j0);
evalcond[0]=((((-0.265)*x1495))+(((-0.115)*x1496))+(((-1.0)*px)));
evalcond[1]=((((-0.265)*x1496))+(((-1.0)*py))+(((0.115)*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1497=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1497;
j4eval[1]=IKsign(x1497);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1498=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1498;
j4eval[1]=IKsign(x1498);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1499=cj5*cj5;
IkReal x1500=(r11*r21);
IkReal x1501=((1.0)*r20);
IkReal x1502=(cj5*sj5);
IkReal x1503=(((x1499*x1500))+(((-1.0)*x1500))+(((-1.0)*r12*r22))+(((-1.0)*r10*x1499*x1501))+((r11*r20*x1502))+((r10*r21*x1502)));
j4eval[0]=x1503;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1501)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1504=cj5*cj5;
IkReal x1505=(r11*r21);
IkReal x1506=((1.0)*r20);
IkReal x1507=(cj5*sj5);
CheckValue<IkReal> x1508 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1508.valid){
continue;
}
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1505))+(((-1.0)*r12*r22))+((x1504*x1505))+((r11*r20*x1507))+((r10*r21*x1507))+(((-1.0)*r10*x1504*x1506)))),-1);
if(!x1509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1508.value)+(((1.5707963267949)*(x1509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1510=IKcos(j4);
IkReal x1511=IKsin(j4);
IkReal x1512=((1.0)*sj0);
IkReal x1513=(cj5*r00);
IkReal x1514=(cj5*r10);
IkReal x1515=(cj5*r20);
IkReal x1516=((1.0)*x1510);
IkReal x1517=(sj5*x1510);
IkReal x1518=((1.0)*sj5*x1511);
evalcond[0]=((((-1.0)*x1515*x1516))+((r22*x1511))+((r21*x1517)));
evalcond[1]=(((r22*x1510))+((x1511*x1515))+(((-1.0)*r21*x1518)));
evalcond[2]=(((r11*x1517))+cj0+((r12*x1511))+(((-1.0)*x1514*x1516)));
evalcond[3]=((((-1.0)*x1512))+(((-1.0)*x1513*x1516))+((r01*x1517))+((r02*x1511)));
evalcond[4]=((((-1.0)*r01*x1518))+((r02*x1510))+((x1511*x1513))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1512))+((r12*x1510))+(((-1.0)*r11*x1518))+((x1511*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1519.value)+(((1.5707963267949)*(x1520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1521=IKcos(j4);
IkReal x1522=IKsin(j4);
IkReal x1523=((1.0)*sj0);
IkReal x1524=(cj5*r00);
IkReal x1525=(cj5*r10);
IkReal x1526=(cj5*r20);
IkReal x1527=((1.0)*x1521);
IkReal x1528=(sj5*x1521);
IkReal x1529=((1.0)*sj5*x1522);
evalcond[0]=(((r21*x1528))+(((-1.0)*x1526*x1527))+((r22*x1522)));
evalcond[1]=(((x1522*x1526))+((r22*x1521))+(((-1.0)*r21*x1529)));
evalcond[2]=(cj0+((r12*x1522))+((r11*x1528))+(((-1.0)*x1525*x1527)));
evalcond[3]=((((-1.0)*x1524*x1527))+(((-1.0)*x1523))+((r01*x1528))+((r02*x1522)));
evalcond[4]=((((-1.0)*r01*x1529))+((x1522*x1524))+((r02*x1521))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x1529))+((r12*x1521))+((x1522*x1525))+(((-1.0)*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1530.value)+(((1.5707963267949)*(x1531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1532=IKcos(j4);
IkReal x1533=IKsin(j4);
IkReal x1534=((1.0)*sj0);
IkReal x1535=(cj5*r00);
IkReal x1536=(cj5*r10);
IkReal x1537=(cj5*r20);
IkReal x1538=((1.0)*x1532);
IkReal x1539=(sj5*x1532);
IkReal x1540=((1.0)*sj5*x1533);
evalcond[0]=((((-1.0)*x1537*x1538))+((r21*x1539))+((r22*x1533)));
evalcond[1]=((((-1.0)*r21*x1540))+((r22*x1532))+((x1533*x1537)));
evalcond[2]=(((r12*x1533))+cj0+((r11*x1539))+(((-1.0)*x1536*x1538)));
evalcond[3]=((((-1.0)*x1534))+((r01*x1539))+(((-1.0)*x1535*x1538))+((r02*x1533)));
evalcond[4]=((((-1.0)*r01*x1540))+((r02*x1532))+((x1533*x1535))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x1532))+(((-1.0)*x1534))+(((-1.0)*r11*x1540))+((x1533*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1541=(cj1*sj2);
IkReal x1542=((200.0)*px);
IkReal x1543=(cj5*r01);
IkReal x1544=(cj2*sj1);
IkReal x1545=(r00*sj5);
IkReal x1546=((53.0)*sj1);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(((((23.0)*x1544))+(((23.0)*x1541))),-1);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck((x1544+x1541),-1);
if(!x1548.valid){
continue;
}
if( IKabs(((x1547.value)*(((((-1.0)*x1543*x1546))+(((-67.0)*x1543*x1544))+(((-67.0)*x1544*x1545))+(((-67.0)*x1541*x1543))+(((-67.0)*x1541*x1545))+(((-1.0)*x1542*x1544))+(((-1.0)*x1545*x1546))+(((-1.0)*x1541*x1542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1548.value)*(((((-1.0)*x1543))+(((-1.0)*x1545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1547.value)*(((((-1.0)*x1543*x1546))+(((-67.0)*x1543*x1544))+(((-67.0)*x1544*x1545))+(((-67.0)*x1541*x1543))+(((-67.0)*x1541*x1545))+(((-1.0)*x1542*x1544))+(((-1.0)*x1545*x1546))+(((-1.0)*x1541*x1542))))))+IKsqr(((x1548.value)*(((((-1.0)*x1543))+(((-1.0)*x1545))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1547.value)*(((((-1.0)*x1543*x1546))+(((-67.0)*x1543*x1544))+(((-67.0)*x1544*x1545))+(((-67.0)*x1541*x1543))+(((-67.0)*x1541*x1545))+(((-1.0)*x1542*x1544))+(((-1.0)*x1545*x1546))+(((-1.0)*x1541*x1542))))), ((x1548.value)*(((((-1.0)*x1543))+(((-1.0)*x1545))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1549=IKcos(j0);
IkReal x1550=IKsin(j0);
IkReal x1551=(r00*sj5);
IkReal x1552=(cj5*r01);
IkReal x1553=((0.24)*cj2);
IkReal x1554=(cj5*r11);
IkReal x1555=(cj1*sj2);
IkReal x1556=(r10*sj5);
IkReal x1557=(sj1*x1550);
IkReal x1558=(sj1*x1549);
evalcond[0]=(((cj2*x1558))+((x1549*x1555))+x1551+x1552);
evalcond[1]=(((x1550*x1555))+((cj2*x1557))+x1554+x1556);
evalcond[2]=(((x1553*x1558))+(((0.265)*x1558))+(((-0.095)*x1551))+(((-0.095)*x1552))+(((-1.0)*px))+(((-0.115)*x1550))+(((0.24)*x1549*x1555)));
evalcond[3]=((((0.115)*x1549))+((x1553*x1557))+(((0.265)*x1557))+(((-0.095)*x1556))+(((-0.095)*x1554))+(((-1.0)*py))+(((0.24)*x1550*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1559=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1559;
j4eval[1]=IKsign(x1559);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1560=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1560;
j4eval[1]=IKsign(x1560);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1561=((1.0)*sj0);
IkReal x1562=((1.0)*cj0);
IkReal x1563=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1563;
j4eval[1]=((IKabs(((((-1.0)*r02*x1562))+(((-1.0)*r12*x1561)))))+(IKabs(((((-1.0)*cj5*r10*x1561))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x1562))))));
j4eval[2]=IKsign(x1563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1564=((-1.0)*r20);
IkReal x1566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1566)==0){
continue;
}
IkReal x1565=pow(x1566,-0.5);
CheckValue<IkReal> x1567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1564),IKFAST_ATAN2_MAGTHRESH);
if(!x1567.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1567.value));
IkReal gconst79=(r21*x1565);
IkReal gconst80=(x1564*x1565);
CheckValue<IkReal> x1568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1569=((-1.0)*r20);
IkReal x1570=x1565;
CheckValue<IkReal> x1572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1569),IKFAST_ATAN2_MAGTHRESH);
if(!x1572.valid){
continue;
}
IkReal x1571=((-1.0)*(x1572.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1571;
IkReal gconst78=x1571;
IkReal gconst79=(r21*x1570);
IkReal gconst80=(x1569*x1570);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1573=((-1.0)*r20);
IkReal x1574=x1565;
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1573),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
IkReal x1575=((-1.0)*(x1576.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1575;
IkReal gconst78=x1575;
IkReal gconst79=(r21*x1574);
IkReal gconst80=(x1573*x1574);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1577=((-1.0)*r20);
IkReal x1578=x1565;
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1577),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
IkReal x1579=((-1.0)*(x1580.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x1579;
IkReal gconst78=x1579;
IkReal gconst79=(r21*x1578);
IkReal gconst80=(x1577*x1578);
IkReal x1581=r22*r22;
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1581))),-1);
if(!x1584.valid){
continue;
}
IkReal x1582=x1584.value;
IkReal x1583=(((x1582*(r21*r21*r21*r21)))+x1581+((x1582*(r20*r20*r20*r20)))+(((2.0)*x1582*(r20*r20)*(r21*r21))));
j4eval[0]=x1583;
j4eval[1]=IKsign(x1583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1585=(gconst80*r20);
IkReal x1586=(cj1*sj2);
IkReal x1587=(cj2*sj1);
IkReal x1588=((1.0)*gconst79*r21);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(((((-1.0)*x1586*x1588))+((x1585*x1586))+((x1585*x1587))+(((-1.0)*x1587*x1588)))),IkReal((((r22*x1586))+((r22*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst79*r21*x1585))+(x1585*x1585)+(((gconst79*gconst79)*(r21*r21))))),-1);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1591=IKcos(j4);
IkReal x1592=IKsin(j4);
IkReal x1593=(cj1*cj2);
IkReal x1594=((1.0)*sj1);
IkReal x1595=(gconst80*x1592);
IkReal x1596=(gconst79*x1591);
IkReal x1597=((1.0)*gconst80*x1591);
IkReal x1598=((1.0)*gconst79*x1592);
evalcond[0]=(((r22*x1592))+(((-1.0)*r20*x1597))+((r21*x1596)));
evalcond[1]=(cj0+((r12*x1592))+((r11*x1596))+(((-1.0)*r10*x1597)));
evalcond[2]=(((r01*x1596))+(((-1.0)*sj0))+(((-1.0)*r00*x1597))+((r02*x1592)));
evalcond[3]=((((-1.0)*cj2*x1594))+((r20*x1595))+(((-1.0)*cj1*sj2))+((r22*x1591))+(((-1.0)*r21*x1598)));
evalcond[4]=(((r00*x1595))+(((-1.0)*r01*x1598))+(((-1.0)*cj0*sj2*x1594))+((r02*x1591))+((cj0*x1593)));
evalcond[5]=((((-1.0)*sj0*sj2*x1594))+((r12*x1591))+((sj0*x1593))+((r10*x1595))+(((-1.0)*r11*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1599.value)+(((1.5707963267949)*(x1600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1601=IKcos(j4);
IkReal x1602=IKsin(j4);
IkReal x1603=(cj1*cj2);
IkReal x1604=((1.0)*sj1);
IkReal x1605=(gconst80*x1602);
IkReal x1606=(gconst79*x1601);
IkReal x1607=((1.0)*gconst80*x1601);
IkReal x1608=((1.0)*gconst79*x1602);
evalcond[0]=((((-1.0)*r20*x1607))+((r21*x1606))+((r22*x1602)));
evalcond[1]=(cj0+((r11*x1606))+((r12*x1602))+(((-1.0)*r10*x1607)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1606))+(((-1.0)*r00*x1607))+((r02*x1602)));
evalcond[3]=((((-1.0)*r21*x1608))+(((-1.0)*cj1*sj2))+((r22*x1601))+(((-1.0)*cj2*x1604))+((r20*x1605)));
evalcond[4]=(((r00*x1605))+((cj0*x1603))+(((-1.0)*r01*x1608))+((r02*x1601))+(((-1.0)*cj0*sj2*x1604)));
evalcond[5]=(((sj0*x1603))+((r12*x1601))+(((-1.0)*sj0*sj2*x1604))+((r10*x1605))+(((-1.0)*r11*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1609.valid){
continue;
}
CheckValue<IkReal> x1610 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1609.value)))+(x1610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1611=IKcos(j4);
IkReal x1612=IKsin(j4);
IkReal x1613=(cj1*cj2);
IkReal x1614=((1.0)*sj1);
IkReal x1615=(gconst80*x1612);
IkReal x1616=(gconst79*x1611);
IkReal x1617=((1.0)*gconst80*x1611);
IkReal x1618=((1.0)*gconst79*x1612);
evalcond[0]=((((-1.0)*r20*x1617))+((r21*x1616))+((r22*x1612)));
evalcond[1]=(cj0+((r12*x1612))+((r11*x1616))+(((-1.0)*r10*x1617)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1616))+(((-1.0)*r00*x1617))+((r02*x1612)));
evalcond[3]=(((r20*x1615))+(((-1.0)*r21*x1618))+(((-1.0)*cj1*sj2))+((r22*x1611))+(((-1.0)*cj2*x1614)));
evalcond[4]=(((r00*x1615))+((cj0*x1613))+(((-1.0)*r01*x1618))+(((-1.0)*cj0*sj2*x1614))+((r02*x1611)));
evalcond[5]=((((-1.0)*r11*x1618))+((sj0*x1613))+((r12*x1611))+(((-1.0)*sj0*sj2*x1614))+((r10*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1619=((-1.0)*r21);
IkReal x1621 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1621)==0){
continue;
}
IkReal x1620=pow(x1621,-0.5);
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal(x1619),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1622.value))));
IkReal gconst82=(x1619*x1620);
IkReal gconst83=((1.0)*r20*x1620);
CheckValue<IkReal> x1623 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1623.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1623.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1624=((-1.0)*r21);
CheckValue<IkReal> x1627 = IKatan2WithCheck(IkReal(x1624),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1627.valid){
continue;
}
IkReal x1625=((1.0)*(x1627.value));
IkReal x1626=x1620;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1625)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1625)));
IkReal gconst82=(x1624*x1626);
IkReal gconst83=((1.0)*r20*x1626);
IkReal x1628=r22*r22;
IkReal x1629=((1.0)*x1628);
CheckValue<IkReal> x1633=IKPowWithIntegerCheck(((-1.0)+x1628),-1);
if(!x1633.valid){
continue;
}
IkReal x1630=x1633.value;
if((((1.0)+(((-1.0)*x1629)))) < -0.00001)
continue;
IkReal x1631=IKsqrt(((1.0)+(((-1.0)*x1629))));
IkReal x1632=(cj0*x1630*x1631);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x1632+(((-1.0)*x1629*x1632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1634=((-1.0)*r21);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal(x1634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
IkReal x1635=((1.0)*(x1637.value));
IkReal x1636=x1620;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1635)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1635)));
IkReal gconst82=(x1634*x1636);
IkReal gconst83=((1.0)*r20*x1636);
IkReal x1638=r22*r22;
IkReal x1639=((1.0)*x1638);
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(((-1.0)+x1638),-1);
if(!x1643.valid){
continue;
}
IkReal x1640=x1643.value;
if((((1.0)+(((-1.0)*x1639)))) < -0.00001)
continue;
IkReal x1641=IKsqrt(((1.0)+(((-1.0)*x1639))));
IkReal x1642=(sj0*x1640*x1641);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1642+(((-1.0)*x1639*x1642))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1644=((-1.0)*r21);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal(x1644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
IkReal x1645=((1.0)*(x1647.value));
IkReal x1646=x1620;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1645)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1645)));
IkReal gconst82=(x1644*x1646);
IkReal gconst83=((1.0)*r20*x1646);
IkReal x1648=r22*r22;
IkReal x1649=((1.0)*r12*sj0);
IkReal x1650=((1.0)*cj0*r02);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(((-1.0)+x1648),-1);
if(!x1654.valid){
continue;
}
IkReal x1651=x1654.value;
if((((1.0)+(((-1.0)*x1648)))) < -0.00001)
continue;
IkReal x1652=IKsqrt(((1.0)+(((-1.0)*x1648))));
IkReal x1653=(r22*x1651*x1652);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x1649))+(((-1.0)*x1650)))))+(IKabs(((((-1.0)*x1650*x1653))+(((-1.0)*x1649*x1653))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1655=((1.0)*sj0);
IkReal x1656=((1.0)*cj0);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r00*x1656))+((gconst82*r11*sj0))+(((-1.0)*gconst83*r10*x1655))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r12*x1655))+(((-1.0)*r02*x1656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1659=IKcos(j4);
IkReal x1660=IKsin(j4);
IkReal x1661=(cj1*cj2);
IkReal x1662=((1.0)*sj1);
IkReal x1663=(gconst82*x1659);
IkReal x1664=(gconst83*x1660);
IkReal x1665=((1.0)*gconst82*x1660);
IkReal x1666=((1.0)*gconst83*x1659);
evalcond[0]=((((-1.0)*r20*x1666))+((r21*x1663))+((r22*x1660)));
evalcond[1]=(cj0+((r12*x1660))+((r11*x1663))+(((-1.0)*r10*x1666)));
evalcond[2]=((((-1.0)*r00*x1666))+(((-1.0)*sj0))+((r02*x1660))+((r01*x1663)));
evalcond[3]=(((r22*x1659))+((r20*x1664))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1665))+(((-1.0)*cj2*x1662)));
evalcond[4]=((((-1.0)*r01*x1665))+((r02*x1659))+((r00*x1664))+(((-1.0)*cj0*sj2*x1662))+((cj0*x1661)));
evalcond[5]=(((r10*x1664))+((sj0*x1661))+((r12*x1659))+(((-1.0)*r11*x1665))+(((-1.0)*sj0*sj2*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1667.valid){
continue;
}
CheckValue<IkReal> x1668 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1667.value)))+(x1668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1669=IKcos(j4);
IkReal x1670=IKsin(j4);
IkReal x1671=(cj1*cj2);
IkReal x1672=((1.0)*sj1);
IkReal x1673=(gconst82*x1669);
IkReal x1674=(gconst83*x1670);
IkReal x1675=((1.0)*gconst82*x1670);
IkReal x1676=((1.0)*gconst83*x1669);
evalcond[0]=(((r21*x1673))+((r22*x1670))+(((-1.0)*r20*x1676)));
evalcond[1]=(cj0+(((-1.0)*r10*x1676))+((r11*x1673))+((r12*x1670)));
evalcond[2]=(((r02*x1670))+(((-1.0)*sj0))+(((-1.0)*r00*x1676))+((r01*x1673)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1672))+((r20*x1674))+(((-1.0)*r21*x1675))+((r22*x1669)));
evalcond[4]=(((r00*x1674))+((cj0*x1671))+((r02*x1669))+(((-1.0)*cj0*sj2*x1672))+(((-1.0)*r01*x1675)));
evalcond[5]=(((sj0*x1671))+((r12*x1669))+(((-1.0)*sj0*sj2*x1672))+(((-1.0)*r11*x1675))+((r10*x1674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1677.value)))+(x1678.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1679=IKcos(j4);
IkReal x1680=IKsin(j4);
IkReal x1681=(cj1*cj2);
IkReal x1682=((1.0)*sj1);
IkReal x1683=(gconst82*x1679);
IkReal x1684=(gconst83*x1680);
IkReal x1685=((1.0)*gconst82*x1680);
IkReal x1686=((1.0)*gconst83*x1679);
evalcond[0]=((((-1.0)*r20*x1686))+((r22*x1680))+((r21*x1683)));
evalcond[1]=(((r11*x1683))+cj0+(((-1.0)*r10*x1686))+((r12*x1680)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1683))+((r02*x1680))+(((-1.0)*r00*x1686)));
evalcond[3]=((((-1.0)*r21*x1685))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1682))+((r22*x1679))+((r20*x1684)));
evalcond[4]=((((-1.0)*r01*x1685))+((r02*x1679))+((r00*x1684))+(((-1.0)*cj0*sj2*x1682))+((cj0*x1681)));
evalcond[5]=((((-1.0)*r11*x1685))+(((-1.0)*sj0*sj2*x1682))+((r10*x1684))+((sj0*x1681))+((r12*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1688 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1688)==0){
continue;
}
IkReal x1687=pow(x1688,-0.5);
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1689.value));
IkReal gconst85=((-1.0)*r11*x1687);
IkReal gconst86=(r10*x1687);
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1690.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1693 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1693.valid){
continue;
}
IkReal x1691=((-1.0)*(x1693.value));
IkReal x1692=x1687;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x1691;
IkReal gconst84=x1691;
IkReal gconst85=((-1.0)*r11*x1692);
IkReal gconst86=(r10*x1692);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1694=((1.0)*sj0);
IkReal x1695=((1.0)*gconst86);
CheckValue<IkReal> x1696 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r10*x1694))+((gconst85*r11*sj0))+(((-1.0)*cj0*r00*x1695))+((cj0*gconst85*r01)))),IkReal(((((-1.0)*r12*x1694))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1696.valid){
continue;
}
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1695)))),-1);
if(!x1697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1696.value)+(((1.5707963267949)*(x1697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1698=IKcos(j4);
IkReal x1699=IKsin(j4);
IkReal x1700=(cj1*cj2);
IkReal x1701=((1.0)*sj1);
IkReal x1702=(gconst86*x1699);
IkReal x1703=(gconst85*x1698);
IkReal x1704=((1.0)*gconst85*x1699);
IkReal x1705=((1.0)*gconst86*x1698);
evalcond[0]=((((-1.0)*r20*x1705))+((r22*x1699))+((r21*x1703)));
evalcond[1]=(((r12*x1699))+cj0+((r11*x1703))+(((-1.0)*r10*x1705)));
evalcond[2]=((((-1.0)*sj0))+((r01*x1703))+((r02*x1699))+(((-1.0)*r00*x1705)));
evalcond[3]=((((-1.0)*cj2*x1701))+(((-1.0)*r21*x1704))+(((-1.0)*cj1*sj2))+((r20*x1702))+((r22*x1698)));
evalcond[4]=((((-1.0)*cj0*sj2*x1701))+((cj0*x1700))+((r00*x1702))+((r02*x1698))+(((-1.0)*r01*x1704)));
evalcond[5]=(((r12*x1698))+(((-1.0)*sj0*sj2*x1701))+((r10*x1702))+((sj0*x1700))+(((-1.0)*r11*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1706.valid){
continue;
}
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1706.value)))+(x1707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1708=IKcos(j4);
IkReal x1709=IKsin(j4);
IkReal x1710=(cj1*cj2);
IkReal x1711=((1.0)*sj1);
IkReal x1712=(gconst86*x1709);
IkReal x1713=(gconst85*x1708);
IkReal x1714=((1.0)*gconst85*x1709);
IkReal x1715=((1.0)*gconst86*x1708);
evalcond[0]=(((r22*x1709))+(((-1.0)*r20*x1715))+((r21*x1713)));
evalcond[1]=(((r12*x1709))+cj0+((r11*x1713))+(((-1.0)*r10*x1715)));
evalcond[2]=((((-1.0)*r00*x1715))+(((-1.0)*sj0))+((r02*x1709))+((r01*x1713)));
evalcond[3]=(((r22*x1708))+((r20*x1712))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1714))+(((-1.0)*cj2*x1711)));
evalcond[4]=(((r02*x1708))+(((-1.0)*cj0*sj2*x1711))+((cj0*x1710))+((r00*x1712))+(((-1.0)*r01*x1714)));
evalcond[5]=(((r12*x1708))+(((-1.0)*sj0*sj2*x1711))+((r10*x1712))+(((-1.0)*r11*x1714))+((sj0*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1717 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1717)==0){
continue;
}
IkReal x1716=pow(x1717,-0.5);
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1718.value))));
IkReal gconst88=((1.0)*r11*x1716);
IkReal gconst89=((-1.0)*r10*x1716);
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1719.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
IkReal x1720=((1.0)*(x1722.value));
IkReal x1721=x1716;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1720)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1720)));
IkReal gconst88=((1.0)*r11*x1721);
IkReal gconst89=((-1.0)*r10*x1721);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
IkReal x1723=((1.0)*(x1725.value));
IkReal x1724=x1716;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1723)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1723)));
IkReal gconst88=((1.0)*r11*x1724);
IkReal gconst89=((-1.0)*r10*x1724);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
IkReal x1726=((1.0)*(x1728.value));
IkReal x1727=x1716;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x1726)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1726)));
IkReal gconst88=((1.0)*r11*x1727);
IkReal gconst89=((-1.0)*r10*x1727);
IkReal x1729=r12*r12;
IkReal x1730=((1.0)*sj0);
IkReal x1731=(cj0*r02);
IkReal x1732=x1716;
j4eval[0]=((IKabs((((r12*x1731*x1732))+(((-1.0)*x1730*x1732))+((sj0*x1729*x1732)))))+(IKabs(((((-1.0)*r12*x1730))+(((-1.0)*x1731))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1733=((1.0)*sj0);
IkReal x1734=((1.0)*gconst89);
CheckValue<IkReal> x1735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1734)))),-1);
if(!x1735.valid){
continue;
}
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal((((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x1734))+(((-1.0)*gconst89*r10*x1733)))),IkReal(((((-1.0)*r12*x1733))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1735.value)))+(x1736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1737=IKcos(j4);
IkReal x1738=IKsin(j4);
IkReal x1739=(gconst88*r11);
IkReal x1740=(cj1*cj2);
IkReal x1741=((1.0)*sj1);
IkReal x1742=((1.0)*x1738);
IkReal x1743=(gconst89*x1738);
IkReal x1744=(gconst88*x1737);
IkReal x1745=((1.0)*gconst89*x1737);
evalcond[0]=(((r22*x1738))+((r21*x1744))+(((-1.0)*r20*x1745)));
evalcond[1]=(cj0+((x1737*x1739))+(((-1.0)*r10*x1745))+((r12*x1738)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1738))+(((-1.0)*r00*x1745))+((r01*x1744)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x1742))+((r22*x1737))+((r20*x1743))+(((-1.0)*cj2*x1741)));
evalcond[4]=((((-1.0)*cj0*sj2*x1741))+(((-1.0)*gconst88*r01*x1742))+((r02*x1737))+((r00*x1743))+((cj0*x1740)));
evalcond[5]=((((-1.0)*x1739*x1742))+((sj0*x1740))+(((-1.0)*sj0*sj2*x1741))+((r12*x1737))+((r10*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1746 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1746.value)+(((1.5707963267949)*(x1747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1748=IKcos(j4);
IkReal x1749=IKsin(j4);
IkReal x1750=(gconst88*r11);
IkReal x1751=(cj1*cj2);
IkReal x1752=((1.0)*sj1);
IkReal x1753=((1.0)*x1749);
IkReal x1754=(gconst89*x1749);
IkReal x1755=(gconst88*x1748);
IkReal x1756=((1.0)*gconst89*x1748);
evalcond[0]=(((r22*x1749))+((r21*x1755))+(((-1.0)*r20*x1756)));
evalcond[1]=(((r12*x1749))+cj0+(((-1.0)*r10*x1756))+((x1748*x1750)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1749))+(((-1.0)*r00*x1756))+((r01*x1755)));
evalcond[3]=(((r22*x1748))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x1753))+((r20*x1754))+(((-1.0)*cj2*x1752)));
evalcond[4]=((((-1.0)*gconst88*r01*x1753))+((r02*x1748))+((cj0*x1751))+((r00*x1754))+(((-1.0)*cj0*sj2*x1752)));
evalcond[5]=(((r12*x1748))+(((-1.0)*x1750*x1753))+((sj0*x1751))+(((-1.0)*sj0*sj2*x1752))+((r10*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1757.valid){
continue;
}
CheckValue<IkReal> x1758 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1757.value)))+(x1758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1759=IKcos(j4);
IkReal x1760=IKsin(j4);
IkReal x1761=(gconst88*r11);
IkReal x1762=(cj1*cj2);
IkReal x1763=((1.0)*sj1);
IkReal x1764=((1.0)*x1760);
IkReal x1765=(gconst89*x1760);
IkReal x1766=(gconst88*x1759);
IkReal x1767=((1.0)*gconst89*x1759);
evalcond[0]=(((r21*x1766))+(((-1.0)*r20*x1767))+((r22*x1760)));
evalcond[1]=(cj0+((x1759*x1761))+((r12*x1760))+(((-1.0)*r10*x1767)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1767))+((r01*x1766))+((r02*x1760)));
evalcond[3]=((((-1.0)*cj2*x1763))+((r20*x1765))+((r22*x1759))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst88*r21*x1764)));
evalcond[4]=((((-1.0)*cj0*sj2*x1763))+((r02*x1759))+((cj0*x1762))+((r00*x1765))+(((-1.0)*gconst88*r01*x1764)));
evalcond[5]=(((sj0*x1762))+(((-1.0)*sj0*sj2*x1763))+(((-1.0)*x1761*x1764))+((r10*x1765))+((r12*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1768=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1768;
j4eval[1]=IKsign(x1768);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1769=((1.0)*cj5);
IkReal x1770=((((-1.0)*r21*x1769))+(((-1.0)*r20*sj5)));
j4eval[0]=x1770;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x1769))+((r01*sj5))))));
j4eval[2]=IKsign(x1770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1771=cj5*cj5;
IkReal x1772=r11*r11;
IkReal x1773=(cj5*r10);
IkReal x1774=(r11*sj5);
IkReal x1775=((((-1.0)*x1772))+((x1771*x1772))+(((-1.0)*(r12*r12)))+(((-1.0)*x1771*(r10*r10)))+(((2.0)*x1773*x1774)));
j4eval[0]=x1775;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x1773))+x1774))));
j4eval[2]=IKsign(x1775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=cj5*cj5;
IkReal x1777=r11*r11;
IkReal x1778=(cj5*r10);
IkReal x1779=(r11*sj5);
CheckValue<IkReal> x1780 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x1778))+x1779)),IKFAST_ATAN2_MAGTHRESH);
if(!x1780.valid){
continue;
}
CheckValue<IkReal> x1781=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1777))+((x1776*x1777))+(((-1.0)*x1776*(r10*r10)))+(((2.0)*x1778*x1779))+(((-1.0)*(r12*r12))))),-1);
if(!x1781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1780.value)+(((1.5707963267949)*(x1781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1782=IKcos(j4);
IkReal x1783=IKsin(j4);
IkReal x1784=(cj5*r00);
IkReal x1785=((1.0)*sj2);
IkReal x1786=((1.0)*x1782);
IkReal x1787=(sj5*x1782);
IkReal x1788=(cj5*x1783);
IkReal x1789=((1.0)*sj5*x1783);
evalcond[0]=(((r21*x1787))+((r22*x1783))+(((-1.0)*cj5*r20*x1786)));
evalcond[1]=(((r02*x1783))+(((-1.0)*x1784*x1786))+((r01*x1787)));
evalcond[2]=(((r10*x1788))+(((-1.0)*r11*x1789))+((r12*x1782)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1786))+((r12*x1783))+((r11*x1787)));
evalcond[4]=((((-1.0)*sj1*x1785))+((x1783*x1784))+(((-1.0)*r01*x1789))+((r02*x1782))+((cj1*cj2)));
evalcond[5]=(((r20*x1788))+(((-1.0)*cj2*sj1))+((r22*x1782))+(((-1.0)*cj1*x1785))+(((-1.0)*r21*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1790=((1.0)*cj5);
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1790))+(((-1.0)*r20*sj5)))),-1);
if(!x1791.valid){
continue;
}
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1790)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1791.value)))+(x1792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1793=IKcos(j4);
IkReal x1794=IKsin(j4);
IkReal x1795=(cj5*r00);
IkReal x1796=((1.0)*sj2);
IkReal x1797=((1.0)*x1793);
IkReal x1798=(sj5*x1793);
IkReal x1799=(cj5*x1794);
IkReal x1800=((1.0)*sj5*x1794);
evalcond[0]=(((r21*x1798))+(((-1.0)*cj5*r20*x1797))+((r22*x1794)));
evalcond[1]=((((-1.0)*x1795*x1797))+((r02*x1794))+((r01*x1798)));
evalcond[2]=(((r10*x1799))+((r12*x1793))+(((-1.0)*r11*x1800)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1797))+((r12*x1794))+((r11*x1798)));
evalcond[4]=((((-1.0)*r01*x1800))+((r02*x1793))+((x1794*x1795))+((cj1*cj2))+(((-1.0)*sj1*x1796)));
evalcond[5]=((((-1.0)*r21*x1800))+(((-1.0)*cj2*sj1))+((r22*x1793))+(((-1.0)*cj1*x1796))+((r20*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1801=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1801.valid){
continue;
}
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1801.value)))+(x1802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1803=IKcos(j4);
IkReal x1804=IKsin(j4);
IkReal x1805=(cj5*r00);
IkReal x1806=((1.0)*sj2);
IkReal x1807=((1.0)*x1803);
IkReal x1808=(sj5*x1803);
IkReal x1809=(cj5*x1804);
IkReal x1810=((1.0)*sj5*x1804);
evalcond[0]=((((-1.0)*cj5*r20*x1807))+((r22*x1804))+((r21*x1808)));
evalcond[1]=((((-1.0)*x1805*x1807))+((r02*x1804))+((r01*x1808)));
evalcond[2]=((((-1.0)*r11*x1810))+((r12*x1803))+((r10*x1809)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x1807))+((r12*x1804))+((r11*x1808)));
evalcond[4]=((((-1.0)*r01*x1810))+((r02*x1803))+(((-1.0)*sj1*x1806))+((cj1*cj2))+((x1804*x1805)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x1803))+(((-1.0)*cj1*x1806))+((r20*x1809))+(((-1.0)*r21*x1810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1811=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1811;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1812=((1.0)*cj5);
IkReal x1813=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1812)));
j4eval[0]=x1813;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1812))))));
j4eval[2]=IKsign(x1813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1814=cj5*cj5;
IkReal x1815=r11*r11;
IkReal x1816=(r11*sj5);
IkReal x1817=(cj5*r10);
IkReal x1818=((r12*r12)+((x1814*(r10*r10)))+(((-1.0)*x1814*x1815))+x1815+(((-2.0)*x1816*x1817)));
j4eval[0]=x1818;
j4eval[1]=((IKabs((x1816+(((-1.0)*x1817)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1819=cj5*cj5;
IkReal x1820=r11*r11;
IkReal x1821=(cj5*r10);
IkReal x1822=(r11*sj5);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x1821))+x1822)),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1821*x1822))+(r12*r12)+((x1819*(r10*r10)))+(((-1.0)*x1819*x1820))+x1820)),-1);
if(!x1824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1823.value)+(((1.5707963267949)*(x1824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1825=IKcos(j4);
IkReal x1826=IKsin(j4);
IkReal x1827=(cj5*r00);
IkReal x1828=((1.0)*cj1);
IkReal x1829=(cj5*r20);
IkReal x1830=(cj5*r10);
IkReal x1831=((1.0)*x1825);
IkReal x1832=(sj5*x1825);
IkReal x1833=((1.0)*sj5*x1826);
evalcond[0]=(((r22*x1826))+((r21*x1832))+(((-1.0)*x1829*x1831)));
evalcond[1]=(((r01*x1832))+(((-1.0)*x1827*x1831))+((r02*x1826)));
evalcond[2]=(((x1826*x1830))+(((-1.0)*r11*x1833))+((r12*x1825)));
evalcond[3]=((-1.0)+((r11*x1832))+((r12*x1826))+(((-1.0)*x1830*x1831)));
evalcond[4]=((((-1.0)*cj2*x1828))+((x1826*x1827))+(((-1.0)*r01*x1833))+((sj1*sj2))+((r02*x1825)));
evalcond[5]=((((-1.0)*r21*x1833))+((x1826*x1829))+(((-1.0)*cj2*sj1))+((r22*x1825))+(((-1.0)*sj2*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1834=((1.0)*cj5);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x1834))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1834))+(((-1.0)*r00*sj5)))),-1);
if(!x1836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1837=IKcos(j4);
IkReal x1838=IKsin(j4);
IkReal x1839=(cj5*r00);
IkReal x1840=((1.0)*cj1);
IkReal x1841=(cj5*r20);
IkReal x1842=(cj5*r10);
IkReal x1843=((1.0)*x1837);
IkReal x1844=(sj5*x1837);
IkReal x1845=((1.0)*sj5*x1838);
evalcond[0]=((((-1.0)*x1841*x1843))+((r22*x1838))+((r21*x1844)));
evalcond[1]=((((-1.0)*x1839*x1843))+((r02*x1838))+((r01*x1844)));
evalcond[2]=(((x1838*x1842))+(((-1.0)*r11*x1845))+((r12*x1837)));
evalcond[3]=((-1.0)+(((-1.0)*x1842*x1843))+((r12*x1838))+((r11*x1844)));
evalcond[4]=(((x1838*x1839))+(((-1.0)*r01*x1845))+((sj1*sj2))+((r02*x1837))+(((-1.0)*cj2*x1840)));
evalcond[5]=(((x1838*x1841))+((r22*x1837))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x1840))+(((-1.0)*r21*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x1846.valid){
continue;
}
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1846.value)))+(x1847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1848=IKcos(j4);
IkReal x1849=IKsin(j4);
IkReal x1850=(cj5*r00);
IkReal x1851=((1.0)*cj1);
IkReal x1852=(cj5*r20);
IkReal x1853=(cj5*r10);
IkReal x1854=((1.0)*x1848);
IkReal x1855=(sj5*x1848);
IkReal x1856=((1.0)*sj5*x1849);
evalcond[0]=(((r22*x1849))+(((-1.0)*x1852*x1854))+((r21*x1855)));
evalcond[1]=(((r01*x1855))+((r02*x1849))+(((-1.0)*x1850*x1854)));
evalcond[2]=(((x1849*x1853))+(((-1.0)*r11*x1856))+((r12*x1848)));
evalcond[3]=((-1.0)+((r11*x1855))+((r12*x1849))+(((-1.0)*x1853*x1854)));
evalcond[4]=((((-1.0)*cj2*x1851))+((r02*x1848))+((x1849*x1850))+((sj1*sj2))+(((-1.0)*r01*x1856)));
evalcond[5]=(((r22*x1848))+((x1849*x1852))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x1856))+(((-1.0)*sj2*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1858 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1858)==0){
continue;
}
IkReal x1857=pow(x1858,-0.5);
CheckValue<IkReal> x1859 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1859.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1859.value));
IkReal gconst91=((-1.0)*r01*x1857);
IkReal gconst92=(r00*x1857);
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1860.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
IkReal x1861=((-1.0)*(x1863.value));
IkReal x1862=x1857;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x1861;
IkReal gconst90=x1861;
IkReal gconst91=((-1.0)*r01*x1862);
IkReal gconst92=(r00*x1862);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1864=((1.0)*sj0);
IkReal x1865=((1.0)*gconst92);
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r10*x1864))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*cj0*r00*x1865)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
CheckValue<IkReal> x1867=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x1865)))),-1);
if(!x1867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1866.value)+(((1.5707963267949)*(x1867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1868=IKcos(j4);
IkReal x1869=IKsin(j4);
IkReal x1870=(cj1*cj2);
IkReal x1871=(gconst92*r00);
IkReal x1872=((1.0)*sj1);
IkReal x1873=(gconst92*r10);
IkReal x1874=(gconst92*r20);
IkReal x1875=(gconst91*x1868);
IkReal x1876=((1.0)*x1868);
IkReal x1877=((1.0)*gconst91*x1869);
evalcond[0]=((((-1.0)*x1874*x1876))+((r22*x1869))+((r21*x1875)));
evalcond[1]=(((r12*x1869))+(((-1.0)*x1873*x1876))+cj0+((r11*x1875)));
evalcond[2]=((((-1.0)*sj0))+((r02*x1869))+((r01*x1875))+(((-1.0)*x1871*x1876)));
evalcond[3]=(((r22*x1868))+(((-1.0)*cj2*x1872))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x1877))+((x1869*x1874)));
evalcond[4]=((((-1.0)*r01*x1877))+((r02*x1868))+(((-1.0)*cj0*sj2*x1872))+((x1869*x1871))+((cj0*x1870)));
evalcond[5]=(((r12*x1868))+(((-1.0)*sj0*sj2*x1872))+((sj0*x1870))+(((-1.0)*r11*x1877))+((x1869*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKcos(j4);
IkReal x1881=IKsin(j4);
IkReal x1882=(cj1*cj2);
IkReal x1883=(gconst92*r00);
IkReal x1884=((1.0)*sj1);
IkReal x1885=(gconst92*r10);
IkReal x1886=(gconst92*r20);
IkReal x1887=(gconst91*x1880);
IkReal x1888=((1.0)*x1880);
IkReal x1889=((1.0)*gconst91*x1881);
evalcond[0]=(((r21*x1887))+((r22*x1881))+(((-1.0)*x1886*x1888)));
evalcond[1]=(((r12*x1881))+cj0+(((-1.0)*x1885*x1888))+((r11*x1887)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x1883*x1888))+((r01*x1887))+((r02*x1881)));
evalcond[3]=(((x1881*x1886))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1884))+((r22*x1880))+(((-1.0)*r21*x1889)));
evalcond[4]=((((-1.0)*cj0*sj2*x1884))+((x1881*x1883))+(((-1.0)*r01*x1889))+((cj0*x1882))+((r02*x1880)));
evalcond[5]=(((x1881*x1885))+((r12*x1880))+(((-1.0)*r11*x1889))+(((-1.0)*sj0*sj2*x1884))+((sj0*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1891 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1891)==0){
continue;
}
IkReal x1890=pow(x1891,-0.5);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x1892.value))));
IkReal gconst94=((1.0)*r01*x1890);
IkReal gconst95=((-1.0)*r00*x1890);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
IkReal x1894=((1.0)*(x1896.value));
IkReal x1895=x1890;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1894)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1894)));
IkReal gconst94=((1.0)*r01*x1895);
IkReal gconst95=((-1.0)*r00*x1895);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal x1897=((1.0)*(x1899.value));
IkReal x1898=x1890;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1897)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1897)));
IkReal gconst94=((1.0)*r01*x1898);
IkReal gconst95=((-1.0)*r00*x1898);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x1902 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1902.valid){
continue;
}
IkReal x1900=((1.0)*(x1902.value));
IkReal x1901=x1890;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x1900)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x1900)));
IkReal gconst94=((1.0)*r01*x1901);
IkReal gconst95=((-1.0)*r00*x1901);
IkReal x1903=r02*r02;
IkReal x1904=(r12*sj0);
IkReal x1905=((1.0)*cj0);
IkReal x1906=x1890;
j4eval[0]=((IKabs((((cj0*x1903*x1906))+(((-1.0)*x1905*x1906))+((r02*x1904*x1906)))))+(IKabs(((((-1.0)*x1904))+(((-1.0)*r02*x1905))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1907=((1.0)*sj0);
IkReal x1908=((1.0)*gconst95);
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1908))+(((-1.0)*gconst94*r20)))),-1);
if(!x1909.valid){
continue;
}
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal((((gconst94*r11*sj0))+(((-1.0)*cj0*r00*x1908))+((cj0*gconst94*r01))+(((-1.0)*gconst95*r10*x1907)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1909.value)))+(x1910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1911=IKcos(j4);
IkReal x1912=IKsin(j4);
IkReal x1913=(cj1*cj2);
IkReal x1914=((1.0)*sj1);
IkReal x1915=(gconst95*x1912);
IkReal x1916=(gconst94*x1911);
IkReal x1917=((1.0)*gconst95*x1911);
IkReal x1918=((1.0)*gconst94*x1912);
evalcond[0]=(((r22*x1912))+((r21*x1916))+(((-1.0)*r20*x1917)));
evalcond[1]=(cj0+((r11*x1916))+(((-1.0)*r10*x1917))+((r12*x1912)));
evalcond[2]=((((-1.0)*r00*x1917))+(((-1.0)*sj0))+((r01*x1916))+((r02*x1912)));
evalcond[3]=(((r22*x1911))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x1914))+(((-1.0)*r21*x1918))+((r20*x1915)));
evalcond[4]=((((-1.0)*r01*x1918))+((r00*x1915))+(((-1.0)*cj0*sj2*x1914))+((cj0*x1913))+((r02*x1911)));
evalcond[5]=(((r10*x1915))+(((-1.0)*r11*x1918))+((r12*x1911))+((sj0*x1913))+(((-1.0)*sj0*sj2*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x1919.valid){
continue;
}
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1919.value)))+(x1920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1921=IKcos(j4);
IkReal x1922=IKsin(j4);
IkReal x1923=(cj1*cj2);
IkReal x1924=((1.0)*sj1);
IkReal x1925=(gconst95*x1922);
IkReal x1926=(gconst94*x1921);
IkReal x1927=((1.0)*gconst95*x1921);
IkReal x1928=((1.0)*gconst94*x1922);
evalcond[0]=(((r22*x1922))+(((-1.0)*r20*x1927))+((r21*x1926)));
evalcond[1]=(cj0+((r11*x1926))+((r12*x1922))+(((-1.0)*r10*x1927)));
evalcond[2]=(((r01*x1926))+(((-1.0)*sj0))+(((-1.0)*r00*x1927))+((r02*x1922)));
evalcond[3]=(((r22*x1921))+(((-1.0)*r21*x1928))+(((-1.0)*cj1*sj2))+((r20*x1925))+(((-1.0)*cj2*x1924)));
evalcond[4]=(((r00*x1925))+(((-1.0)*r01*x1928))+((cj0*x1923))+((r02*x1921))+(((-1.0)*cj0*sj2*x1924)));
evalcond[5]=((((-1.0)*r11*x1928))+(((-1.0)*sj0*sj2*x1924))+((r10*x1925))+((r12*x1921))+((sj0*x1923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x1930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1929.value)+(((1.5707963267949)*(x1930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1931=IKcos(j4);
IkReal x1932=IKsin(j4);
IkReal x1933=(cj1*cj2);
IkReal x1934=((1.0)*sj1);
IkReal x1935=(gconst95*x1932);
IkReal x1936=(gconst94*x1931);
IkReal x1937=((1.0)*gconst95*x1931);
IkReal x1938=((1.0)*gconst94*x1932);
evalcond[0]=((((-1.0)*r20*x1937))+((r21*x1936))+((r22*x1932)));
evalcond[1]=(cj0+(((-1.0)*r10*x1937))+((r12*x1932))+((r11*x1936)));
evalcond[2]=(((r02*x1932))+(((-1.0)*sj0))+((r01*x1936))+(((-1.0)*r00*x1937)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x1931))+(((-1.0)*r21*x1938))+(((-1.0)*cj2*x1934))+((r20*x1935)));
evalcond[4]=((((-1.0)*r01*x1938))+((r02*x1931))+((r00*x1935))+(((-1.0)*cj0*sj2*x1934))+((cj0*x1933)));
evalcond[5]=(((r12*x1931))+((sj0*x1933))+(((-1.0)*r11*x1938))+(((-1.0)*sj0*sj2*x1934))+((r10*x1935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1939=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1939;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x1939);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1940=((1.0)*cj5);
IkReal x1941=((((-1.0)*r21*x1940))+(((-1.0)*r20*sj5)));
j4eval[0]=x1941;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x1940)))))+(IKabs(r12)));
j4eval[2]=IKsign(x1941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1942=cj5*cj5;
IkReal x1943=r01*r01;
IkReal x1944=(cj5*r00);
IkReal x1945=(r01*sj5);
IkReal x1946=(((x1942*(r00*r00)))+x1943+(((-1.0)*x1942*x1943))+(r02*r02)+(((-2.0)*x1944*x1945)));
j4eval[0]=x1946;
j4eval[1]=IKsign(x1946);
j4eval[2]=((IKabs(r02))+(IKabs((x1945+(((-1.0)*x1944))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1947=cj5*cj5;
IkReal x1948=r01*r01;
IkReal x1949=(r01*sj5);
IkReal x1950=(cj5*r00);
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(r02),IkReal((x1949+(((-1.0)*x1950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(IKsign((((x1947*(r00*r00)))+(((-1.0)*x1947*x1948))+(((-2.0)*x1949*x1950))+x1948+(r02*r02))),-1);
if(!x1952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1951.value)+(((1.5707963267949)*(x1952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1953=IKcos(j4);
IkReal x1954=IKsin(j4);
IkReal x1955=(cj5*r00);
IkReal x1956=((1.0)*sj2);
IkReal x1957=((1.0)*x1953);
IkReal x1958=(sj5*x1953);
IkReal x1959=(cj5*x1954);
IkReal x1960=((1.0)*sj5*x1954);
evalcond[0]=((((-1.0)*cj5*r20*x1957))+((r21*x1958))+((r22*x1954)));
evalcond[1]=((((-1.0)*cj5*r10*x1957))+((r11*x1958))+((r12*x1954)));
evalcond[2]=(((x1954*x1955))+(((-1.0)*r01*x1960))+((r02*x1953)));
evalcond[3]=((-1.0)+((r01*x1958))+(((-1.0)*x1955*x1957))+((r02*x1954)));
evalcond[4]=((((-1.0)*sj1*x1956))+((r12*x1953))+((r10*x1959))+((cj1*cj2))+(((-1.0)*r11*x1960)));
evalcond[5]=(((r20*x1959))+(((-1.0)*cj2*sj1))+((r22*x1953))+(((-1.0)*r21*x1960))+(((-1.0)*cj1*x1956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1961=((1.0)*cj5);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x1961)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1961))+(((-1.0)*r20*sj5)))),-1);
if(!x1963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1962.value)+(((1.5707963267949)*(x1963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1964=IKcos(j4);
IkReal x1965=IKsin(j4);
IkReal x1966=(cj5*r00);
IkReal x1967=((1.0)*sj2);
IkReal x1968=((1.0)*x1964);
IkReal x1969=(sj5*x1964);
IkReal x1970=(cj5*x1965);
IkReal x1971=((1.0)*sj5*x1965);
evalcond[0]=((((-1.0)*cj5*r20*x1968))+((r21*x1969))+((r22*x1965)));
evalcond[1]=(((r12*x1965))+(((-1.0)*cj5*r10*x1968))+((r11*x1969)));
evalcond[2]=(((r02*x1964))+(((-1.0)*r01*x1971))+((x1965*x1966)));
evalcond[3]=((-1.0)+((r02*x1965))+(((-1.0)*x1966*x1968))+((r01*x1969)));
evalcond[4]=(((r10*x1970))+((r12*x1964))+(((-1.0)*sj1*x1967))+((cj1*cj2))+(((-1.0)*r11*x1971)));
evalcond[5]=(((r20*x1970))+(((-1.0)*cj2*sj1))+((r22*x1964))+(((-1.0)*cj1*x1967))+(((-1.0)*r21*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1972 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1972.value)+(((1.5707963267949)*(x1973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1974=IKcos(j4);
IkReal x1975=IKsin(j4);
IkReal x1976=(cj5*r00);
IkReal x1977=((1.0)*sj2);
IkReal x1978=((1.0)*x1974);
IkReal x1979=(sj5*x1974);
IkReal x1980=(cj5*x1975);
IkReal x1981=((1.0)*sj5*x1975);
evalcond[0]=((((-1.0)*cj5*r20*x1978))+((r21*x1979))+((r22*x1975)));
evalcond[1]=(((r12*x1975))+(((-1.0)*cj5*r10*x1978))+((r11*x1979)));
evalcond[2]=(((r02*x1974))+((x1975*x1976))+(((-1.0)*r01*x1981)));
evalcond[3]=((-1.0)+(((-1.0)*x1976*x1978))+((r02*x1975))+((r01*x1979)));
evalcond[4]=(((r12*x1974))+(((-1.0)*sj1*x1977))+((r10*x1980))+(((-1.0)*r11*x1981))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x1974))+(((-1.0)*cj1*x1977))+(((-1.0)*r21*x1981))+((r20*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1982=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x1982;
j4eval[1]=IKsign(x1982);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1983=((1.0)*cj5);
IkReal x1984=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1983)));
j4eval[0]=x1984;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x1983))))));
j4eval[2]=IKsign(x1984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1985=cj5*cj5;
IkReal x1986=r01*r01;
IkReal x1987=(r01*sj5);
IkReal x1988=(cj5*r00);
IkReal x1989=((((-1.0)*x1985*(r00*r00)))+(((2.0)*x1987*x1988))+(((-1.0)*(r02*r02)))+(((-1.0)*x1986))+((x1985*x1986)));
j4eval[0]=x1989;
j4eval[1]=IKsign(x1989);
j4eval[2]=((IKabs(r02))+(IKabs((x1987+(((-1.0)*x1988))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1990=cj5*cj5;
IkReal x1991=r01*r01;
IkReal x1992=(r01*sj5);
IkReal x1993=(cj5*r00);
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(r02),IkReal((x1992+(((-1.0)*x1993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x1992*x1993))+((x1990*x1991))+(((-1.0)*x1991))+(((-1.0)*x1990*(r00*r00))))),-1);
if(!x1995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1994.value)+(((1.5707963267949)*(x1995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1996=IKcos(j4);
IkReal x1997=IKsin(j4);
IkReal x1998=(cj5*r00);
IkReal x1999=((1.0)*cj1);
IkReal x2000=((1.0)*x1996);
IkReal x2001=(sj5*x1996);
IkReal x2002=(cj5*x1997);
IkReal x2003=((1.0)*sj5*x1997);
evalcond[0]=(((r21*x2001))+(((-1.0)*cj5*r20*x2000))+((r22*x1997)));
evalcond[1]=(((r11*x2001))+((r12*x1997))+(((-1.0)*cj5*r10*x2000)));
evalcond[2]=((((-1.0)*r01*x2003))+((r02*x1996))+((x1997*x1998)));
evalcond[3]=((1.0)+(((-1.0)*x1998*x2000))+((r01*x2001))+((r02*x1997)));
evalcond[4]=(((r12*x1996))+(((-1.0)*cj2*x1999))+((r10*x2002))+(((-1.0)*r11*x2003))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x2002))+(((-1.0)*sj2*x1999))+(((-1.0)*r21*x2003))+((r22*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2004=((1.0)*cj5);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2004)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
CheckValue<IkReal> x2006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2004)))),-1);
if(!x2006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2005.value)+(((1.5707963267949)*(x2006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2007=IKcos(j4);
IkReal x2008=IKsin(j4);
IkReal x2009=(cj5*r00);
IkReal x2010=((1.0)*cj1);
IkReal x2011=((1.0)*x2007);
IkReal x2012=(sj5*x2007);
IkReal x2013=(cj5*x2008);
IkReal x2014=((1.0)*sj5*x2008);
evalcond[0]=(((r22*x2008))+((r21*x2012))+(((-1.0)*cj5*r20*x2011)));
evalcond[1]=(((r12*x2008))+(((-1.0)*cj5*r10*x2011))+((r11*x2012)));
evalcond[2]=(((r02*x2007))+((x2008*x2009))+(((-1.0)*r01*x2014)));
evalcond[3]=((1.0)+(((-1.0)*x2009*x2011))+((r02*x2008))+((r01*x2012)));
evalcond[4]=(((r12*x2007))+((r10*x2013))+((sj1*sj2))+(((-1.0)*r11*x2014))+(((-1.0)*cj2*x2010)));
evalcond[5]=(((r22*x2007))+(((-1.0)*r21*x2014))+((r20*x2013))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2015.valid){
continue;
}
CheckValue<IkReal> x2016 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2015.value)))+(x2016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2017=IKcos(j4);
IkReal x2018=IKsin(j4);
IkReal x2019=(cj5*r00);
IkReal x2020=((1.0)*cj1);
IkReal x2021=((1.0)*x2017);
IkReal x2022=(sj5*x2017);
IkReal x2023=(cj5*x2018);
IkReal x2024=((1.0)*sj5*x2018);
evalcond[0]=((((-1.0)*cj5*r20*x2021))+((r22*x2018))+((r21*x2022)));
evalcond[1]=((((-1.0)*cj5*r10*x2021))+((r11*x2022))+((r12*x2018)));
evalcond[2]=((((-1.0)*r01*x2024))+((r02*x2017))+((x2018*x2019)));
evalcond[3]=((1.0)+((r01*x2022))+(((-1.0)*x2019*x2021))+((r02*x2018)));
evalcond[4]=(((r10*x2023))+(((-1.0)*cj2*x2020))+(((-1.0)*r11*x2024))+((sj1*sj2))+((r12*x2017)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x2017))+(((-1.0)*sj2*x2020))+(((-1.0)*r21*x2024))+((r20*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2025=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2025);
rxp1_1=(px*r21);
rxp1_2=(r11*x2025);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2026=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2026);
rxp1_1=(px*r21);
rxp1_2=(r11*x2026);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2027=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2027);
rxp1_1=(px*r21);
rxp1_2=(r11*x2027);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2030=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2030.valid){
continue;
}
IkReal x2028=x2030.value;
IkReal x2029=(sj0*x2028);
sj4array[0]=((((-1.0)*cj1*cj2*x2029))+((sj1*sj2*x2029)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2031=IKcos(j4);
IkReal x2032=IKsin(j4);
IkReal x2033=(r21*sj5);
IkReal x2034=((1.0)*cj5*x2031);
evalcond[0]=(r02*x2031);
evalcond[1]=((((-1.0)*sj0))+((r02*x2032)));
evalcond[2]=(((x2031*x2033))+(((-1.0)*r20*x2034)));
evalcond[3]=((((-1.0)*r10*x2034))+((r11*sj5*x2031)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2032))+(((-1.0)*x2032*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2036=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2036.valid){
continue;
}
IkReal x2035=x2036.value;
sj4array[0]=(((cj2*sj1*x2035))+((cj1*sj2*x2035)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2037=IKcos(j4);
IkReal x2038=IKsin(j4);
IkReal x2039=((1.0)*sj0);
IkReal x2040=(r11*sj5);
IkReal x2041=((1.0)*cj5*x2037);
evalcond[0]=(r02*x2037);
evalcond[1]=(((r02*x2038))+(((-1.0)*x2039)));
evalcond[2]=(((r21*sj5*x2037))+(((-1.0)*r20*x2041)));
evalcond[3]=(((x2037*x2040))+(((-1.0)*r10*x2041)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x2038*x2040))+(((-1.0)*sj1*sj2*x2039))+((cj5*r10*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(r02,-1);
if(!x2042.valid){
continue;
}
sj4array[0]=(sj0*(x2042.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2043=IKcos(j4);
IkReal x2044=IKsin(j4);
IkReal x2045=((1.0)*sj1);
IkReal x2046=(sj5*x2043);
IkReal x2047=(cj5*x2044);
IkReal x2048=((1.0)*sj5*x2044);
IkReal x2049=((1.0)*cj5*x2043);
evalcond[0]=(r02*x2043);
evalcond[1]=(((r21*x2046))+(((-1.0)*r20*x2049)));
evalcond[2]=((((-1.0)*r10*x2049))+((r11*x2046)));
evalcond[3]=((((-1.0)*cj2*x2045))+((r20*x2047))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2048)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x2045))+((r10*x2047))+(((-1.0)*r11*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2050=((1.0)*sj0);
IkReal x2051=((1.0)*cj0);
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x2050))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2051)))),IkReal(((((-1.0)*r12*x2050))+(((-1.0)*r02*x2051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
CheckValue<IkReal> x2053=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2052.value)+(((1.5707963267949)*(x2053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2054=IKcos(j4);
IkReal x2055=IKsin(j4);
IkReal x2056=(cj5*r00);
IkReal x2057=(cj1*cj2);
IkReal x2058=((1.0)*sj1);
IkReal x2059=((1.0)*x2054);
IkReal x2060=(sj5*x2054);
IkReal x2061=(cj5*x2055);
IkReal x2062=((1.0)*sj5*x2055);
evalcond[0]=(((r21*x2060))+((r22*x2055))+(((-1.0)*cj5*r20*x2059)));
evalcond[1]=((((-1.0)*cj5*r10*x2059))+((r12*x2055))+cj0+((r11*x2060)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2056*x2059))+((r02*x2055))+((r01*x2060)));
evalcond[3]=(((r22*x2054))+(((-1.0)*cj2*x2058))+(((-1.0)*cj1*sj2))+((r20*x2061))+(((-1.0)*r21*x2062)));
evalcond[4]=((((-1.0)*cj0*sj2*x2058))+((x2055*x2056))+((cj0*x2057))+((r02*x2054))+(((-1.0)*r01*x2062)));
evalcond[5]=(((r12*x2054))+(((-1.0)*r11*x2062))+(((-1.0)*sj0*sj2*x2058))+((sj0*x2057))+((r10*x2061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
CheckValue<IkReal> x2064=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2063.value)+(((1.5707963267949)*(x2064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2065=IKcos(j4);
IkReal x2066=IKsin(j4);
IkReal x2067=(cj5*r00);
IkReal x2068=(cj1*cj2);
IkReal x2069=((1.0)*sj1);
IkReal x2070=((1.0)*x2065);
IkReal x2071=(sj5*x2065);
IkReal x2072=(cj5*x2066);
IkReal x2073=((1.0)*sj5*x2066);
evalcond[0]=(((r22*x2066))+(((-1.0)*cj5*r20*x2070))+((r21*x2071)));
evalcond[1]=((((-1.0)*cj5*r10*x2070))+cj0+((r12*x2066))+((r11*x2071)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2066))+((r01*x2071))+(((-1.0)*x2067*x2070)));
evalcond[3]=(((r22*x2065))+(((-1.0)*cj2*x2069))+((r20*x2072))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2073)));
evalcond[4]=(((x2066*x2067))+((cj0*x2068))+(((-1.0)*cj0*sj2*x2069))+((r02*x2065))+(((-1.0)*r01*x2073)));
evalcond[5]=((((-1.0)*r11*x2073))+(((-1.0)*sj0*sj2*x2069))+((r12*x2065))+((sj0*x2068))+((r10*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2074 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2074.valid){
continue;
}
CheckValue<IkReal> x2075=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2074.value)+(((1.5707963267949)*(x2075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2076=IKcos(j4);
IkReal x2077=IKsin(j4);
IkReal x2078=(cj5*r00);
IkReal x2079=(cj1*cj2);
IkReal x2080=((1.0)*sj1);
IkReal x2081=((1.0)*x2076);
IkReal x2082=(sj5*x2076);
IkReal x2083=(cj5*x2077);
IkReal x2084=((1.0)*sj5*x2077);
evalcond[0]=(((r22*x2077))+(((-1.0)*cj5*r20*x2081))+((r21*x2082)));
evalcond[1]=((((-1.0)*cj5*r10*x2081))+cj0+((r12*x2077))+((r11*x2082)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2078*x2081))+((r02*x2077))+((r01*x2082)));
evalcond[3]=((((-1.0)*r21*x2084))+((r22*x2076))+((r20*x2083))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2080)));
evalcond[4]=(((r02*x2076))+((x2077*x2078))+(((-1.0)*cj0*sj2*x2080))+(((-1.0)*r01*x2084))+((cj0*x2079)));
evalcond[5]=(((r12*x2076))+((r10*x2083))+((sj0*x2079))+(((-1.0)*r11*x2084))+(((-1.0)*sj0*sj2*x2080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2085=cj5*cj5;
IkReal x2086=r21*r21;
IkReal x2087=(cj1*sj2);
IkReal x2088=(cj5*r20);
IkReal x2089=(r21*sj5);
IkReal x2090=(cj2*sj1);
CheckValue<IkReal> x2091 = IKatan2WithCheck(IkReal(((((-1.0)*x2087*x2089))+((x2088*x2090))+(((-1.0)*x2089*x2090))+((x2087*x2088)))),IkReal((((r22*x2090))+((r22*x2087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2091.valid){
continue;
}
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2086+(((-1.0)*x2085*x2086))+((x2085*(r20*r20)))+(((-2.0)*x2088*x2089)))),-1);
if(!x2092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2091.value)+(((1.5707963267949)*(x2092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2093=IKcos(j4);
IkReal x2094=IKsin(j4);
IkReal x2095=(r21*sj5);
IkReal x2096=(cj5*r20);
evalcond[0]=((((-1.0)*x2093*x2096))+((r22*x2094))+((x2093*x2095)));
evalcond[1]=(((x2094*x2096))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r22*x2093))+(((-1.0)*x2094*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2097=(cj4*cj5);
IkReal x2098=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x2097))+((r01*x2098))+((r02*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2097))+(((-1.0)*r11*x2098))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2097))+((r01*x2098))+((r02*sj4))))+IKsqr((((r10*x2097))+(((-1.0)*r11*x2098))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x2097))+((r01*x2098))+((r02*sj4))), (((r10*x2097))+(((-1.0)*r11*x2098))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2099=IKcos(j0);
IkReal x2100=IKsin(j0);
IkReal x2101=(r00*sj5);
IkReal x2102=(cj5*r00);
IkReal x2103=(cj5*r01);
IkReal x2104=((1.0)*sj2);
IkReal x2105=(cj1*cj2);
IkReal x2106=((0.24)*cj2);
IkReal x2107=((1.0)*cj4);
IkReal x2108=(cj5*r11);
IkReal x2109=(cj5*r10);
IkReal x2110=(cj1*sj2);
IkReal x2111=(cj4*sj5);
IkReal x2112=(r10*sj5);
IkReal x2113=(sj1*x2100);
IkReal x2114=((1.0)*sj4*sj5);
IkReal x2115=(sj1*x2099);
evalcond[0]=((((-1.0)*x2107*x2109))+x2099+((r12*sj4))+((r11*x2111)));
evalcond[1]=(((r01*x2111))+(((-1.0)*x2102*x2107))+((r02*sj4))+(((-1.0)*x2100)));
evalcond[2]=(x2103+x2101+((x2099*x2110))+((cj2*x2115)));
evalcond[3]=(x2112+x2108+((x2100*x2110))+((cj2*x2113)));
evalcond[4]=((((-1.0)*r01*x2114))+((x2099*x2105))+((sj4*x2102))+(((-1.0)*x2104*x2115))+((cj4*r02)));
evalcond[5]=(((sj4*x2109))+(((-1.0)*x2104*x2113))+((x2100*x2105))+(((-1.0)*r11*x2114))+((cj4*r12)));
evalcond[6]=((((-0.115)*x2100))+((x2106*x2115))+(((0.24)*x2099*x2110))+(((-0.095)*x2101))+(((-0.095)*x2103))+(((-1.0)*px))+(((0.265)*x2115)));
evalcond[7]=((((0.115)*x2099))+(((0.24)*x2100*x2110))+((x2106*x2113))+(((-0.095)*x2108))+(((-1.0)*py))+(((0.265)*x2113))+(((-0.095)*x2112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2116=((1.0)*cj5);
IkReal x2117=((1.0)*sj5);
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x2118.valid){
continue;
}
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2117))+(((-1.0)*r11*x2116)))),IkReal(((((-1.0)*r01*x2116))+(((-1.0)*r00*x2117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2118.value)))+(x2119.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2120=IKcos(j0);
IkReal x2121=IKsin(j0);
IkReal x2122=(r00*sj5);
IkReal x2123=(cj5*r01);
IkReal x2124=((0.24)*cj2);
IkReal x2125=(cj5*r11);
IkReal x2126=(cj1*sj2);
IkReal x2127=(r10*sj5);
IkReal x2128=(sj1*x2121);
IkReal x2129=(sj1*x2120);
evalcond[0]=(((cj2*x2129))+x2123+x2122+((x2120*x2126)));
evalcond[1]=(((cj2*x2128))+x2125+x2127+((x2121*x2126)));
evalcond[2]=((((-0.095)*x2122))+(((-0.095)*x2123))+(((0.24)*x2120*x2126))+(((-1.0)*px))+(((-0.115)*x2121))+((x2124*x2129))+(((0.265)*x2129)));
evalcond[3]=((((-0.095)*x2125))+(((-0.095)*x2127))+(((-1.0)*py))+(((0.115)*x2120))+((x2124*x2128))+(((0.265)*x2128))+(((0.24)*x2121*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2130=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2130;
j4eval[1]=IKsign(x2130);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2131=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2131;
j4eval[1]=IKsign(x2131);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2132=((1.0)*sj0);
IkReal x2133=((1.0)*cj0);
IkReal x2134=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2134;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x2132))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2133)))))+(IKabs(((((-1.0)*r12*x2132))+(((-1.0)*r02*x2133))))));
j4eval[2]=IKsign(x2134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2135=((-1.0)*r20);
IkReal x2137 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2137)==0){
continue;
}
IkReal x2136=pow(x2137,-0.5);
CheckValue<IkReal> x2138 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2135),IKFAST_ATAN2_MAGTHRESH);
if(!x2138.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2138.value));
IkReal gconst79=(r21*x2136);
IkReal gconst80=(x2135*x2136);
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2139.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2140=((-1.0)*r20);
IkReal x2141=x2136;
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2140),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
IkReal x2142=((-1.0)*(x2143.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2142;
IkReal gconst78=x2142;
IkReal gconst79=(r21*x2141);
IkReal gconst80=(x2140*x2141);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2144=((-1.0)*r20);
IkReal x2145=x2136;
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2144),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
IkReal x2146=((-1.0)*(x2147.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2146;
IkReal gconst78=x2146;
IkReal gconst79=(r21*x2145);
IkReal gconst80=(x2144*x2145);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2148=((-1.0)*r20);
IkReal x2149=x2136;
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2148),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
IkReal x2150=((-1.0)*(x2151.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2150;
IkReal gconst78=x2150;
IkReal gconst79=(r21*x2149);
IkReal gconst80=(x2148*x2149);
IkReal x2152=r22*r22;
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2152))),-1);
if(!x2155.valid){
continue;
}
IkReal x2153=x2155.value;
IkReal x2154=((((2.0)*x2153*(r20*r20)*(r21*r21)))+((x2153*(r21*r21*r21*r21)))+x2152+((x2153*(r20*r20*r20*r20))));
j4eval[0]=x2154;
j4eval[1]=IKsign(x2154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2156=(gconst80*r20);
IkReal x2157=(cj1*sj2);
IkReal x2158=(cj2*sj1);
IkReal x2159=((1.0)*gconst79*r21);
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal((((x2156*x2158))+((x2156*x2157))+(((-1.0)*x2157*x2159))+(((-1.0)*x2158*x2159)))),IkReal((((r22*x2158))+((r22*x2157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
CheckValue<IkReal> x2161=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2156*x2156)+(((gconst79*gconst79)*(r21*r21)))+(((-2.0)*gconst79*r21*x2156)))),-1);
if(!x2161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2160.value)+(((1.5707963267949)*(x2161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2162=IKcos(j4);
IkReal x2163=IKsin(j4);
IkReal x2164=(cj1*cj2);
IkReal x2165=((1.0)*sj1);
IkReal x2166=(gconst80*x2163);
IkReal x2167=(gconst79*x2162);
IkReal x2168=((1.0)*gconst80*x2162);
IkReal x2169=((1.0)*gconst79*x2163);
evalcond[0]=((((-1.0)*r20*x2168))+((r21*x2167))+((r22*x2163)));
evalcond[1]=((((-1.0)*r10*x2168))+((r12*x2163))+cj0+((r11*x2167)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2167))+((r02*x2163))+(((-1.0)*r00*x2168)));
evalcond[3]=((((-1.0)*cj2*x2165))+(((-1.0)*r21*x2169))+(((-1.0)*cj1*sj2))+((r20*x2166))+((r22*x2162)));
evalcond[4]=((((-1.0)*r01*x2169))+((r00*x2166))+(((-1.0)*cj0*sj2*x2165))+((cj0*x2164))+((r02*x2162)));
evalcond[5]=(((r12*x2162))+((sj0*x2164))+(((-1.0)*sj0*sj2*x2165))+((r10*x2166))+(((-1.0)*r11*x2169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2170 = IKatan2WithCheck(IkReal((((gconst79*r21*sj0))+(((-1.0)*gconst80*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2170.valid){
continue;
}
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2170.value)+(((1.5707963267949)*(x2171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2172=IKcos(j4);
IkReal x2173=IKsin(j4);
IkReal x2174=(cj1*cj2);
IkReal x2175=((1.0)*sj1);
IkReal x2176=(gconst80*x2173);
IkReal x2177=(gconst79*x2172);
IkReal x2178=((1.0)*gconst80*x2172);
IkReal x2179=((1.0)*gconst79*x2173);
evalcond[0]=(((r22*x2173))+(((-1.0)*r20*x2178))+((r21*x2177)));
evalcond[1]=(((r11*x2177))+cj0+(((-1.0)*r10*x2178))+((r12*x2173)));
evalcond[2]=(((r01*x2177))+(((-1.0)*sj0))+((r02*x2173))+(((-1.0)*r00*x2178)));
evalcond[3]=((((-1.0)*r21*x2179))+(((-1.0)*cj2*x2175))+((r22*x2172))+(((-1.0)*cj1*sj2))+((r20*x2176)));
evalcond[4]=((((-1.0)*cj0*sj2*x2175))+((r00*x2176))+((cj0*x2174))+((r02*x2172))+(((-1.0)*r01*x2179)));
evalcond[5]=((((-1.0)*sj0*sj2*x2175))+((r10*x2176))+(((-1.0)*r11*x2179))+((r12*x2172))+((sj0*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2180=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*gconst80*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2180.value)))+(x2181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2182=IKcos(j4);
IkReal x2183=IKsin(j4);
IkReal x2184=(cj1*cj2);
IkReal x2185=((1.0)*sj1);
IkReal x2186=(gconst80*x2183);
IkReal x2187=(gconst79*x2182);
IkReal x2188=((1.0)*gconst80*x2182);
IkReal x2189=((1.0)*gconst79*x2183);
evalcond[0]=(((r22*x2183))+(((-1.0)*r20*x2188))+((r21*x2187)));
evalcond[1]=(cj0+(((-1.0)*r10*x2188))+((r12*x2183))+((r11*x2187)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2183))+((r01*x2187))+(((-1.0)*r00*x2188)));
evalcond[3]=(((r22*x2182))+(((-1.0)*r21*x2189))+((r20*x2186))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2185)));
evalcond[4]=(((cj0*x2184))+(((-1.0)*cj0*sj2*x2185))+((r02*x2182))+(((-1.0)*r01*x2189))+((r00*x2186)));
evalcond[5]=((((-1.0)*sj0*sj2*x2185))+((sj0*x2184))+((r12*x2182))+(((-1.0)*r11*x2189))+((r10*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2190=((-1.0)*r21);
IkReal x2192 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2192)==0){
continue;
}
IkReal x2191=pow(x2192,-0.5);
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(x2190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2193.value))));
IkReal gconst82=(x2190*x2191);
IkReal gconst83=((1.0)*r20*x2191);
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2194.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2195=((-1.0)*r21);
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(x2195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
IkReal x2196=((1.0)*(x2198.value));
IkReal x2197=x2191;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2196)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2196)));
IkReal gconst82=(x2195*x2197);
IkReal gconst83=((1.0)*r20*x2197);
IkReal x2199=r22*r22;
IkReal x2200=((1.0)*x2199);
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(((-1.0)+x2199),-1);
if(!x2204.valid){
continue;
}
IkReal x2201=x2204.value;
if((((1.0)+(((-1.0)*x2200)))) < -0.00001)
continue;
IkReal x2202=IKsqrt(((1.0)+(((-1.0)*x2200))));
IkReal x2203=(cj0*x2201*x2202);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2203+(((-1.0)*x2200*x2203))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2205=((-1.0)*r21);
CheckValue<IkReal> x2208 = IKatan2WithCheck(IkReal(x2205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2208.valid){
continue;
}
IkReal x2206=((1.0)*(x2208.value));
IkReal x2207=x2191;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2206)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2206)));
IkReal gconst82=(x2205*x2207);
IkReal gconst83=((1.0)*r20*x2207);
IkReal x2209=r22*r22;
IkReal x2210=((1.0)*x2209);
CheckValue<IkReal> x2214=IKPowWithIntegerCheck(((-1.0)+x2209),-1);
if(!x2214.valid){
continue;
}
IkReal x2211=x2214.value;
if((((1.0)+(((-1.0)*x2210)))) < -0.00001)
continue;
IkReal x2212=IKsqrt(((1.0)+(((-1.0)*x2210))));
IkReal x2213=(sj0*x2211*x2212);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2210*x2213))+x2213))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2215=((-1.0)*r21);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(x2215),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal x2216=((1.0)*(x2218.value));
IkReal x2217=x2191;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2216)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2216)));
IkReal gconst82=(x2215*x2217);
IkReal gconst83=((1.0)*r20*x2217);
IkReal x2219=r22*r22;
IkReal x2220=((1.0)*r12*sj0);
IkReal x2221=((1.0)*cj0*r02);
CheckValue<IkReal> x2225=IKPowWithIntegerCheck(((-1.0)+x2219),-1);
if(!x2225.valid){
continue;
}
IkReal x2222=x2225.value;
if((((1.0)+(((-1.0)*x2219)))) < -0.00001)
continue;
IkReal x2223=IKsqrt(((1.0)+(((-1.0)*x2219))));
IkReal x2224=(r22*x2222*x2223);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2220*x2224))+(((-1.0)*x2221*x2224)))))+(IKabs(((((-1.0)*x2221))+(((-1.0)*x2220))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2226=((1.0)*sj0);
IkReal x2227=((1.0)*cj0);
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r00*x2227))+((gconst82*r11*sj0))+(((-1.0)*gconst83*r10*x2226))+((cj0*gconst82*r01)))),IkReal(((((-1.0)*r02*x2227))+(((-1.0)*r12*x2226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2228.value)))+(x2229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2230=IKcos(j4);
IkReal x2231=IKsin(j4);
IkReal x2232=(cj1*cj2);
IkReal x2233=((1.0)*sj1);
IkReal x2234=(gconst82*x2230);
IkReal x2235=(gconst83*x2231);
IkReal x2236=((1.0)*gconst82*x2231);
IkReal x2237=((1.0)*gconst83*x2230);
evalcond[0]=((((-1.0)*r20*x2237))+((r22*x2231))+((r21*x2234)));
evalcond[1]=((((-1.0)*r10*x2237))+cj0+((r11*x2234))+((r12*x2231)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2231))+(((-1.0)*r00*x2237))+((r01*x2234)));
evalcond[3]=((((-1.0)*r21*x2236))+((r22*x2230))+(((-1.0)*cj1*sj2))+((r20*x2235))+(((-1.0)*cj2*x2233)));
evalcond[4]=(((r02*x2230))+((cj0*x2232))+(((-1.0)*r01*x2236))+(((-1.0)*cj0*sj2*x2233))+((r00*x2235)));
evalcond[5]=(((sj0*x2232))+(((-1.0)*sj0*sj2*x2233))+((r10*x2235))+(((-1.0)*r11*x2236))+((r12*x2230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2238=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2238.valid){
continue;
}
CheckValue<IkReal> x2239 = IKatan2WithCheck(IkReal((((gconst82*r21*sj0))+(((-1.0)*gconst83*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2238.value)))+(x2239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2240=IKcos(j4);
IkReal x2241=IKsin(j4);
IkReal x2242=(cj1*cj2);
IkReal x2243=((1.0)*sj1);
IkReal x2244=(gconst82*x2240);
IkReal x2245=(gconst83*x2241);
IkReal x2246=((1.0)*gconst82*x2241);
IkReal x2247=((1.0)*gconst83*x2240);
evalcond[0]=(((r21*x2244))+(((-1.0)*r20*x2247))+((r22*x2241)));
evalcond[1]=(cj0+((r11*x2244))+(((-1.0)*r10*x2247))+((r12*x2241)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2247))+((r01*x2244))+((r02*x2241)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x2245))+(((-1.0)*cj2*x2243))+(((-1.0)*r21*x2246))+((r22*x2240)));
evalcond[4]=((((-1.0)*r01*x2246))+((r00*x2245))+(((-1.0)*cj0*sj2*x2243))+((r02*x2240))+((cj0*x2242)));
evalcond[5]=(((r10*x2245))+(((-1.0)*sj0*sj2*x2243))+((sj0*x2242))+(((-1.0)*r11*x2246))+((r12*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2248=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2248.valid){
continue;
}
CheckValue<IkReal> x2249 = IKatan2WithCheck(IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*gconst83*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2248.value)))+(x2249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2250=IKcos(j4);
IkReal x2251=IKsin(j4);
IkReal x2252=(cj1*cj2);
IkReal x2253=((1.0)*sj1);
IkReal x2254=(gconst82*x2250);
IkReal x2255=(gconst83*x2251);
IkReal x2256=((1.0)*gconst82*x2251);
IkReal x2257=((1.0)*gconst83*x2250);
evalcond[0]=(((r22*x2251))+((r21*x2254))+(((-1.0)*r20*x2257)));
evalcond[1]=(cj0+((r12*x2251))+(((-1.0)*r10*x2257))+((r11*x2254)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2257))+((r01*x2254))+((r02*x2251)));
evalcond[3]=((((-1.0)*r21*x2256))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2253))+((r20*x2255))+((r22*x2250)));
evalcond[4]=(((cj0*x2252))+(((-1.0)*cj0*sj2*x2253))+(((-1.0)*r01*x2256))+((r00*x2255))+((r02*x2250)));
evalcond[5]=(((r10*x2255))+((r12*x2250))+(((-1.0)*sj0*sj2*x2253))+(((-1.0)*r11*x2256))+((sj0*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2259 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2259)==0){
continue;
}
IkReal x2258=pow(x2259,-0.5);
CheckValue<IkReal> x2260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2260.value));
IkReal gconst85=((-1.0)*r11*x2258);
IkReal gconst86=(r10*x2258);
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2261.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
IkReal x2262=((-1.0)*(x2264.value));
IkReal x2263=x2258;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2262;
IkReal gconst84=x2262;
IkReal gconst85=((-1.0)*r11*x2263);
IkReal gconst86=(r10*x2263);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2265=((1.0)*sj0);
IkReal x2266=((1.0)*gconst86);
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r10*x2265))+(((-1.0)*cj0*r00*x2266))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2266)))),-1);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2267.value)+(((1.5707963267949)*(x2268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2269=IKcos(j4);
IkReal x2270=IKsin(j4);
IkReal x2271=(cj1*cj2);
IkReal x2272=((1.0)*sj1);
IkReal x2273=(gconst86*x2270);
IkReal x2274=(gconst85*x2269);
IkReal x2275=((1.0)*gconst85*x2270);
IkReal x2276=((1.0)*gconst86*x2269);
evalcond[0]=(((r21*x2274))+(((-1.0)*r20*x2276))+((r22*x2270)));
evalcond[1]=(cj0+((r11*x2274))+((r12*x2270))+(((-1.0)*r10*x2276)));
evalcond[2]=(((r01*x2274))+(((-1.0)*sj0))+(((-1.0)*r00*x2276))+((r02*x2270)));
evalcond[3]=((((-1.0)*r21*x2275))+((r22*x2269))+(((-1.0)*cj1*sj2))+((r20*x2273))+(((-1.0)*cj2*x2272)));
evalcond[4]=(((r00*x2273))+(((-1.0)*r01*x2275))+((cj0*x2271))+(((-1.0)*cj0*sj2*x2272))+((r02*x2269)));
evalcond[5]=(((sj0*x2271))+((r10*x2273))+(((-1.0)*sj0*sj2*x2272))+((r12*x2269))+(((-1.0)*r11*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2277=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2277.valid){
continue;
}
CheckValue<IkReal> x2278 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst86*r20))+((cj0*gconst85*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2277.value)))+(x2278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2279=IKcos(j4);
IkReal x2280=IKsin(j4);
IkReal x2281=(cj1*cj2);
IkReal x2282=((1.0)*sj1);
IkReal x2283=(gconst86*x2280);
IkReal x2284=(gconst85*x2279);
IkReal x2285=((1.0)*gconst85*x2280);
IkReal x2286=((1.0)*gconst86*x2279);
evalcond[0]=(((r21*x2284))+(((-1.0)*r20*x2286))+((r22*x2280)));
evalcond[1]=(((r11*x2284))+cj0+((r12*x2280))+(((-1.0)*r10*x2286)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2284))+(((-1.0)*r00*x2286))+((r02*x2280)));
evalcond[3]=((((-1.0)*cj2*x2282))+((r20*x2283))+(((-1.0)*cj1*sj2))+((r22*x2279))+(((-1.0)*r21*x2285)));
evalcond[4]=(((cj0*x2281))+((r02*x2279))+((r00*x2283))+(((-1.0)*r01*x2285))+(((-1.0)*cj0*sj2*x2282)));
evalcond[5]=((((-1.0)*sj0*sj2*x2282))+((r10*x2283))+(((-1.0)*r11*x2285))+((sj0*x2281))+((r12*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2288 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2288)==0){
continue;
}
IkReal x2287=pow(x2288,-0.5);
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2289.value))));
IkReal gconst88=((1.0)*r11*x2287);
IkReal gconst89=((-1.0)*r10*x2287);
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
IkReal x2291=((1.0)*(x2293.value));
IkReal x2292=x2287;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2291)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2291)));
IkReal gconst88=((1.0)*r11*x2292);
IkReal gconst89=((-1.0)*r10*x2292);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
IkReal x2294=((1.0)*(x2296.value));
IkReal x2295=x2287;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2294)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2294)));
IkReal gconst88=((1.0)*r11*x2295);
IkReal gconst89=((-1.0)*r10*x2295);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2299.valid){
continue;
}
IkReal x2297=((1.0)*(x2299.value));
IkReal x2298=x2287;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2297)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2297)));
IkReal gconst88=((1.0)*r11*x2298);
IkReal gconst89=((-1.0)*r10*x2298);
IkReal x2300=r12*r12;
IkReal x2301=((1.0)*sj0);
IkReal x2302=(cj0*r02);
IkReal x2303=x2287;
j4eval[0]=((IKabs((((sj0*x2300*x2303))+(((-1.0)*x2301*x2303))+((r12*x2302*x2303)))))+(IKabs(((((-1.0)*x2302))+(((-1.0)*r12*x2301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2304=((1.0)*sj0);
IkReal x2305=((1.0)*gconst89);
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r10*x2304))+((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*cj0*r00*x2305)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2304)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2305))+(((-1.0)*gconst88*r20)))),-1);
if(!x2307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2306.value)+(((1.5707963267949)*(x2307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2308=IKcos(j4);
IkReal x2309=IKsin(j4);
IkReal x2310=(gconst88*r11);
IkReal x2311=(cj1*cj2);
IkReal x2312=((1.0)*sj1);
IkReal x2313=((1.0)*x2309);
IkReal x2314=(gconst89*x2309);
IkReal x2315=(gconst88*x2308);
IkReal x2316=((1.0)*gconst89*x2308);
evalcond[0]=((((-1.0)*r20*x2316))+((r21*x2315))+((r22*x2309)));
evalcond[1]=(((r12*x2309))+cj0+((x2308*x2310))+(((-1.0)*r10*x2316)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2309))+((r01*x2315))+(((-1.0)*r00*x2316)));
evalcond[3]=((((-1.0)*gconst88*r21*x2313))+(((-1.0)*cj2*x2312))+(((-1.0)*cj1*sj2))+((r22*x2308))+((r20*x2314)));
evalcond[4]=((((-1.0)*gconst88*r01*x2313))+((r02*x2308))+(((-1.0)*cj0*sj2*x2312))+((r00*x2314))+((cj0*x2311)));
evalcond[5]=(((r10*x2314))+((r12*x2308))+((sj0*x2311))+(((-1.0)*x2310*x2313))+(((-1.0)*sj0*sj2*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj0))+((gconst88*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2317.value)+(((1.5707963267949)*(x2318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2319=IKcos(j4);
IkReal x2320=IKsin(j4);
IkReal x2321=(gconst88*r11);
IkReal x2322=(cj1*cj2);
IkReal x2323=((1.0)*sj1);
IkReal x2324=((1.0)*x2320);
IkReal x2325=(gconst89*x2320);
IkReal x2326=(gconst88*x2319);
IkReal x2327=((1.0)*gconst89*x2319);
evalcond[0]=(((r22*x2320))+((r21*x2326))+(((-1.0)*r20*x2327)));
evalcond[1]=(cj0+((x2319*x2321))+(((-1.0)*r10*x2327))+((r12*x2320)));
evalcond[2]=(((r02*x2320))+(((-1.0)*sj0))+(((-1.0)*r00*x2327))+((r01*x2326)));
evalcond[3]=((((-1.0)*gconst88*r21*x2324))+((r22*x2319))+(((-1.0)*cj2*x2323))+(((-1.0)*cj1*sj2))+((r20*x2325)));
evalcond[4]=(((cj0*x2322))+(((-1.0)*gconst88*r01*x2324))+(((-1.0)*cj0*sj2*x2323))+((r00*x2325))+((r02*x2319)));
evalcond[5]=(((r10*x2325))+(((-1.0)*x2321*x2324))+((r12*x2319))+((sj0*x2322))+(((-1.0)*sj0*sj2*x2323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2328.valid){
continue;
}
CheckValue<IkReal> x2329 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst89*r20))+((cj0*gconst88*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2328.value)))+(x2329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2330=IKcos(j4);
IkReal x2331=IKsin(j4);
IkReal x2332=(gconst88*r11);
IkReal x2333=(cj1*cj2);
IkReal x2334=((1.0)*sj1);
IkReal x2335=((1.0)*x2331);
IkReal x2336=(gconst89*x2331);
IkReal x2337=(gconst88*x2330);
IkReal x2338=((1.0)*gconst89*x2330);
evalcond[0]=(((r21*x2337))+((r22*x2331))+(((-1.0)*r20*x2338)));
evalcond[1]=(cj0+(((-1.0)*r10*x2338))+((r12*x2331))+((x2330*x2332)));
evalcond[2]=(((r02*x2331))+(((-1.0)*sj0))+((r01*x2337))+(((-1.0)*r00*x2338)));
evalcond[3]=((((-1.0)*gconst88*r21*x2335))+(((-1.0)*cj1*sj2))+((r22*x2330))+(((-1.0)*cj2*x2334))+((r20*x2336)));
evalcond[4]=(((r02*x2330))+(((-1.0)*gconst88*r01*x2335))+(((-1.0)*cj0*sj2*x2334))+((r00*x2336))+((cj0*x2333)));
evalcond[5]=((((-1.0)*x2332*x2335))+((r12*x2330))+((sj0*x2333))+(((-1.0)*sj0*sj2*x2334))+((r10*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2339=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2339;
j4eval[1]=IKsign(x2339);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2340=((1.0)*cj5);
IkReal x2341=((((-1.0)*r21*x2340))+(((-1.0)*r20*sj5)));
j4eval[0]=x2341;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2340))))));
j4eval[2]=IKsign(x2341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2342=cj5*cj5;
IkReal x2343=r11*r11;
IkReal x2344=(cj5*r10);
IkReal x2345=(r11*sj5);
IkReal x2346=((((-1.0)*x2343))+(((-1.0)*x2342*(r10*r10)))+(((2.0)*x2344*x2345))+(((-1.0)*(r12*r12)))+((x2342*x2343)));
j4eval[0]=x2346;
j4eval[1]=((IKabs(r12))+(IKabs((x2345+(((-1.0)*x2344))))));
j4eval[2]=IKsign(x2346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2347=cj5*cj5;
IkReal x2348=r11*r11;
IkReal x2349=(cj5*r10);
IkReal x2350=(r11*sj5);
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2348))+(((2.0)*x2349*x2350))+(((-1.0)*x2347*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2347*x2348)))),-1);
if(!x2351.valid){
continue;
}
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal(r12),IkReal((x2350+(((-1.0)*x2349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2351.value)))+(x2352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2353=IKcos(j4);
IkReal x2354=IKsin(j4);
IkReal x2355=(cj5*r00);
IkReal x2356=((1.0)*sj2);
IkReal x2357=((1.0)*x2353);
IkReal x2358=(sj5*x2353);
IkReal x2359=(cj5*x2354);
IkReal x2360=((1.0)*sj5*x2354);
evalcond[0]=(((r22*x2354))+(((-1.0)*cj5*r20*x2357))+((r21*x2358)));
evalcond[1]=(((r01*x2358))+(((-1.0)*x2355*x2357))+((r02*x2354)));
evalcond[2]=(((r10*x2359))+((r12*x2353))+(((-1.0)*r11*x2360)));
evalcond[3]=((1.0)+((r12*x2354))+((r11*x2358))+(((-1.0)*cj5*r10*x2357)));
evalcond[4]=(((x2354*x2355))+(((-1.0)*r01*x2360))+(((-1.0)*sj1*x2356))+((cj1*cj2))+((r02*x2353)));
evalcond[5]=(((r22*x2353))+(((-1.0)*r21*x2360))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2356))+((r20*x2359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2361=((1.0)*cj5);
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2361))+(((-1.0)*r20*sj5)))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x2361)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2364=IKcos(j4);
IkReal x2365=IKsin(j4);
IkReal x2366=(cj5*r00);
IkReal x2367=((1.0)*sj2);
IkReal x2368=((1.0)*x2364);
IkReal x2369=(sj5*x2364);
IkReal x2370=(cj5*x2365);
IkReal x2371=((1.0)*sj5*x2365);
evalcond[0]=(((r22*x2365))+(((-1.0)*cj5*r20*x2368))+((r21*x2369)));
evalcond[1]=(((r02*x2365))+(((-1.0)*x2366*x2368))+((r01*x2369)));
evalcond[2]=(((r12*x2364))+((r10*x2370))+(((-1.0)*r11*x2371)));
evalcond[3]=((1.0)+((r11*x2369))+((r12*x2365))+(((-1.0)*cj5*r10*x2368)));
evalcond[4]=(((r02*x2364))+((x2365*x2366))+(((-1.0)*r01*x2371))+((cj1*cj2))+(((-1.0)*sj1*x2367)));
evalcond[5]=(((r20*x2370))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2371))+((r22*x2364))+(((-1.0)*cj1*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2372=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2372.valid){
continue;
}
CheckValue<IkReal> x2373 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2372.value)))+(x2373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2374=IKcos(j4);
IkReal x2375=IKsin(j4);
IkReal x2376=(cj5*r00);
IkReal x2377=((1.0)*sj2);
IkReal x2378=((1.0)*x2374);
IkReal x2379=(sj5*x2374);
IkReal x2380=(cj5*x2375);
IkReal x2381=((1.0)*sj5*x2375);
evalcond[0]=(((r22*x2375))+(((-1.0)*cj5*r20*x2378))+((r21*x2379)));
evalcond[1]=(((r02*x2375))+(((-1.0)*x2376*x2378))+((r01*x2379)));
evalcond[2]=(((r12*x2374))+((r10*x2380))+(((-1.0)*r11*x2381)));
evalcond[3]=((1.0)+((r12*x2375))+(((-1.0)*cj5*r10*x2378))+((r11*x2379)));
evalcond[4]=(((x2375*x2376))+(((-1.0)*r01*x2381))+((r02*x2374))+((cj1*cj2))+(((-1.0)*sj1*x2377)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x2381))+((r20*x2380))+((r22*x2374))+(((-1.0)*cj1*x2377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2382=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2382;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x2382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2383=((1.0)*cj5);
IkReal x2384=((((-1.0)*r01*x2383))+(((-1.0)*r00*sj5)));
j4eval[0]=x2384;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2383))))));
j4eval[2]=IKsign(x2384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2385=cj5*cj5;
IkReal x2386=r11*r11;
IkReal x2387=(r11*sj5);
IkReal x2388=(cj5*r10);
IkReal x2389=((r12*r12)+x2386+(((-2.0)*x2387*x2388))+((x2385*(r10*r10)))+(((-1.0)*x2385*x2386)));
j4eval[0]=x2389;
j4eval[1]=((IKabs(r12))+(IKabs((x2387+(((-1.0)*x2388))))));
j4eval[2]=IKsign(x2389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2390=cj5*cj5;
IkReal x2391=r11*r11;
IkReal x2392=(cj5*r10);
IkReal x2393=(r11*sj5);
CheckValue<IkReal> x2394 = IKatan2WithCheck(IkReal(r12),IkReal((x2393+(((-1.0)*x2392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2394.valid){
continue;
}
CheckValue<IkReal> x2395=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2390*(r10*r10)))+x2391+(((-2.0)*x2392*x2393))+(((-1.0)*x2390*x2391)))),-1);
if(!x2395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2394.value)+(((1.5707963267949)*(x2395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2396=IKcos(j4);
IkReal x2397=IKsin(j4);
IkReal x2398=(cj5*r00);
IkReal x2399=((1.0)*cj1);
IkReal x2400=(cj5*r20);
IkReal x2401=(cj5*r10);
IkReal x2402=((1.0)*x2396);
IkReal x2403=(sj5*x2396);
IkReal x2404=((1.0)*sj5*x2397);
evalcond[0]=((((-1.0)*x2400*x2402))+((r21*x2403))+((r22*x2397)));
evalcond[1]=(((r01*x2403))+((r02*x2397))+(((-1.0)*x2398*x2402)));
evalcond[2]=(((r12*x2396))+((x2397*x2401))+(((-1.0)*r11*x2404)));
evalcond[3]=((-1.0)+(((-1.0)*x2401*x2402))+((r12*x2397))+((r11*x2403)));
evalcond[4]=((((-1.0)*r01*x2404))+((sj1*sj2))+((r02*x2396))+((x2397*x2398))+(((-1.0)*cj2*x2399)));
evalcond[5]=((((-1.0)*sj2*x2399))+(((-1.0)*cj2*sj1))+((x2397*x2400))+((r22*x2396))+(((-1.0)*r21*x2404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2405=((1.0)*cj5);
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2405)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2405))+(((-1.0)*r00*sj5)))),-1);
if(!x2407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2406.value)+(((1.5707963267949)*(x2407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2408=IKcos(j4);
IkReal x2409=IKsin(j4);
IkReal x2410=(cj5*r00);
IkReal x2411=((1.0)*cj1);
IkReal x2412=(cj5*r20);
IkReal x2413=(cj5*r10);
IkReal x2414=((1.0)*x2408);
IkReal x2415=(sj5*x2408);
IkReal x2416=((1.0)*sj5*x2409);
evalcond[0]=(((r21*x2415))+((r22*x2409))+(((-1.0)*x2412*x2414)));
evalcond[1]=(((r01*x2415))+((r02*x2409))+(((-1.0)*x2410*x2414)));
evalcond[2]=(((r12*x2408))+(((-1.0)*r11*x2416))+((x2409*x2413)));
evalcond[3]=((-1.0)+((r11*x2415))+((r12*x2409))+(((-1.0)*x2413*x2414)));
evalcond[4]=(((r02*x2408))+((x2409*x2410))+((sj1*sj2))+(((-1.0)*cj2*x2411))+(((-1.0)*r01*x2416)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x2409*x2412))+((r22*x2408))+(((-1.0)*sj2*x2411))+(((-1.0)*r21*x2416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2417.valid){
continue;
}
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2417.value)))+(x2418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2419=IKcos(j4);
IkReal x2420=IKsin(j4);
IkReal x2421=(cj5*r00);
IkReal x2422=((1.0)*cj1);
IkReal x2423=(cj5*r20);
IkReal x2424=(cj5*r10);
IkReal x2425=((1.0)*x2419);
IkReal x2426=(sj5*x2419);
IkReal x2427=((1.0)*sj5*x2420);
evalcond[0]=(((r22*x2420))+((r21*x2426))+(((-1.0)*x2423*x2425)));
evalcond[1]=((((-1.0)*x2421*x2425))+((r01*x2426))+((r02*x2420)));
evalcond[2]=(((x2420*x2424))+(((-1.0)*r11*x2427))+((r12*x2419)));
evalcond[3]=((-1.0)+(((-1.0)*x2424*x2425))+((r11*x2426))+((r12*x2420)));
evalcond[4]=((((-1.0)*r01*x2427))+((x2420*x2421))+((sj1*sj2))+((r02*x2419))+(((-1.0)*cj2*x2422)));
evalcond[5]=(((r22*x2419))+((x2420*x2423))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x2427))+(((-1.0)*sj2*x2422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2429 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2429)==0){
continue;
}
IkReal x2428=pow(x2429,-0.5);
CheckValue<IkReal> x2430 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2430.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2430.value));
IkReal gconst91=((-1.0)*r01*x2428);
IkReal gconst92=(r00*x2428);
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
IkReal x2432=((-1.0)*(x2434.value));
IkReal x2433=x2428;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2432;
IkReal gconst90=x2432;
IkReal gconst91=((-1.0)*r01*x2433);
IkReal gconst92=(r00*x2433);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*sj0);
IkReal x2436=((1.0)*gconst92);
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2436)))),-1);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2436))+((gconst91*r11*sj0))+(((-1.0)*gconst92*r10*x2435))+((cj0*gconst91*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2437.value)))+(x2438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKcos(j4);
IkReal x2440=IKsin(j4);
IkReal x2441=(cj1*cj2);
IkReal x2442=(gconst92*r00);
IkReal x2443=((1.0)*sj1);
IkReal x2444=(gconst92*r10);
IkReal x2445=(gconst92*r20);
IkReal x2446=(gconst91*x2439);
IkReal x2447=((1.0)*x2439);
IkReal x2448=((1.0)*gconst91*x2440);
evalcond[0]=(((r22*x2440))+(((-1.0)*x2445*x2447))+((r21*x2446)));
evalcond[1]=(cj0+(((-1.0)*x2444*x2447))+((r12*x2440))+((r11*x2446)));
evalcond[2]=(((r02*x2440))+(((-1.0)*sj0))+((r01*x2446))+(((-1.0)*x2442*x2447)));
evalcond[3]=((((-1.0)*r21*x2448))+((x2440*x2445))+(((-1.0)*cj1*sj2))+((r22*x2439))+(((-1.0)*cj2*x2443)));
evalcond[4]=(((x2440*x2442))+((r02*x2439))+((cj0*x2441))+(((-1.0)*cj0*sj2*x2443))+(((-1.0)*r01*x2448)));
evalcond[5]=(((sj0*x2441))+((x2440*x2444))+((r12*x2439))+(((-1.0)*r11*x2448))+(((-1.0)*sj0*sj2*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2449 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj0))+((gconst91*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2449.valid){
continue;
}
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2449.value)+(((1.5707963267949)*(x2450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2451=IKcos(j4);
IkReal x2452=IKsin(j4);
IkReal x2453=(cj1*cj2);
IkReal x2454=(gconst92*r00);
IkReal x2455=((1.0)*sj1);
IkReal x2456=(gconst92*r10);
IkReal x2457=(gconst92*r20);
IkReal x2458=(gconst91*x2451);
IkReal x2459=((1.0)*x2451);
IkReal x2460=((1.0)*gconst91*x2452);
evalcond[0]=(((r22*x2452))+(((-1.0)*x2457*x2459))+((r21*x2458)));
evalcond[1]=(cj0+(((-1.0)*x2456*x2459))+((r12*x2452))+((r11*x2458)));
evalcond[2]=(((r02*x2452))+(((-1.0)*sj0))+(((-1.0)*x2454*x2459))+((r01*x2458)));
evalcond[3]=(((x2452*x2457))+((r22*x2451))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2460))+(((-1.0)*cj2*x2455)));
evalcond[4]=(((r02*x2451))+(((-1.0)*r01*x2460))+((x2452*x2454))+((cj0*x2453))+(((-1.0)*cj0*sj2*x2455)));
evalcond[5]=(((sj0*x2453))+((x2452*x2456))+(((-1.0)*r11*x2460))+((r12*x2451))+(((-1.0)*sj0*sj2*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2462 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2462)==0){
continue;
}
IkReal x2461=pow(x2462,-0.5);
CheckValue<IkReal> x2463 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2463.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2463.value))));
IkReal gconst94=((1.0)*r01*x2461);
IkReal gconst95=((-1.0)*r00*x2461);
CheckValue<IkReal> x2464 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2464.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2464.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2467 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2467.valid){
continue;
}
IkReal x2465=((1.0)*(x2467.value));
IkReal x2466=x2461;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2465)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2465)));
IkReal gconst94=((1.0)*r01*x2466);
IkReal gconst95=((-1.0)*r00*x2466);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
IkReal x2468=((1.0)*(x2470.value));
IkReal x2469=x2461;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2468)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2468)));
IkReal gconst94=((1.0)*r01*x2469);
IkReal gconst95=((-1.0)*r00*x2469);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
IkReal x2471=((1.0)*(x2473.value));
IkReal x2472=x2461;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2471)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2471)));
IkReal gconst94=((1.0)*r01*x2472);
IkReal gconst95=((-1.0)*r00*x2472);
IkReal x2474=r02*r02;
IkReal x2475=(r12*sj0);
IkReal x2476=((1.0)*cj0);
IkReal x2477=x2461;
j4eval[0]=((IKabs((((cj0*x2474*x2477))+((r02*x2475*x2477))+(((-1.0)*x2476*x2477)))))+(IKabs(((((-1.0)*x2475))+(((-1.0)*r02*x2476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2478=((1.0)*sj0);
IkReal x2479=((1.0)*gconst95);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x2479))+(((-1.0)*gconst95*r10*x2478))+((gconst94*r11*sj0))+((cj0*gconst94*r01)))),IkReal(((((-1.0)*r12*x2478))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2479))+(((-1.0)*gconst94*r20)))),-1);
if(!x2481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2480.value)+(((1.5707963267949)*(x2481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2482=IKcos(j4);
IkReal x2483=IKsin(j4);
IkReal x2484=(cj1*cj2);
IkReal x2485=((1.0)*sj1);
IkReal x2486=(gconst95*x2483);
IkReal x2487=(gconst94*x2482);
IkReal x2488=((1.0)*gconst95*x2482);
IkReal x2489=((1.0)*gconst94*x2483);
evalcond[0]=(((r22*x2483))+(((-1.0)*r20*x2488))+((r21*x2487)));
evalcond[1]=(cj0+(((-1.0)*r10*x2488))+((r11*x2487))+((r12*x2483)));
evalcond[2]=(((r01*x2487))+(((-1.0)*sj0))+((r02*x2483))+(((-1.0)*r00*x2488)));
evalcond[3]=(((r22*x2482))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2489))+(((-1.0)*cj2*x2485))+((r20*x2486)));
evalcond[4]=(((r02*x2482))+(((-1.0)*r01*x2489))+(((-1.0)*cj0*sj2*x2485))+((cj0*x2484))+((r00*x2486)));
evalcond[5]=(((sj0*x2484))+(((-1.0)*sj0*sj2*x2485))+((r12*x2482))+(((-1.0)*r11*x2489))+((r10*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2490=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2490.valid){
continue;
}
CheckValue<IkReal> x2491 = IKatan2WithCheck(IkReal((((gconst94*r21*sj0))+(((-1.0)*gconst95*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2490.value)))+(x2491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2492=IKcos(j4);
IkReal x2493=IKsin(j4);
IkReal x2494=(cj1*cj2);
IkReal x2495=((1.0)*sj1);
IkReal x2496=(gconst95*x2493);
IkReal x2497=(gconst94*x2492);
IkReal x2498=((1.0)*gconst95*x2492);
IkReal x2499=((1.0)*gconst94*x2493);
evalcond[0]=(((r22*x2493))+(((-1.0)*r20*x2498))+((r21*x2497)));
evalcond[1]=(cj0+(((-1.0)*r10*x2498))+((r11*x2497))+((r12*x2493)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2493))+(((-1.0)*r00*x2498))+((r01*x2497)));
evalcond[3]=(((r22*x2492))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2499))+(((-1.0)*cj2*x2495))+((r20*x2496)));
evalcond[4]=(((r00*x2496))+((r02*x2492))+(((-1.0)*r01*x2499))+(((-1.0)*cj0*sj2*x2495))+((cj0*x2494)));
evalcond[5]=(((r12*x2492))+(((-1.0)*sj0*sj2*x2495))+(((-1.0)*r11*x2499))+((r10*x2496))+((sj0*x2494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst95*r20))+((cj0*gconst94*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2500.value)+(((1.5707963267949)*(x2501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2502=IKcos(j4);
IkReal x2503=IKsin(j4);
IkReal x2504=(cj1*cj2);
IkReal x2505=((1.0)*sj1);
IkReal x2506=(gconst95*x2503);
IkReal x2507=(gconst94*x2502);
IkReal x2508=((1.0)*gconst95*x2502);
IkReal x2509=((1.0)*gconst94*x2503);
evalcond[0]=(((r22*x2503))+((r21*x2507))+(((-1.0)*r20*x2508)));
evalcond[1]=(((r12*x2503))+cj0+(((-1.0)*r10*x2508))+((r11*x2507)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2503))+(((-1.0)*r00*x2508))+((r01*x2507)));
evalcond[3]=((((-1.0)*cj2*x2505))+((r22*x2502))+(((-1.0)*cj1*sj2))+((r20*x2506))+(((-1.0)*r21*x2509)));
evalcond[4]=((((-1.0)*cj0*sj2*x2505))+((r02*x2502))+((cj0*x2504))+(((-1.0)*r01*x2509))+((r00*x2506)));
evalcond[5]=((((-1.0)*sj0*sj2*x2505))+((r12*x2502))+((r10*x2506))+(((-1.0)*r11*x2509))+((sj0*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2510=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2510;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2511=((1.0)*cj5);
IkReal x2512=((((-1.0)*r21*x2511))+(((-1.0)*r20*sj5)));
j4eval[0]=x2512;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2511)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2513=cj5*cj5;
IkReal x2514=r01*r01;
IkReal x2515=(cj5*r00);
IkReal x2516=(r01*sj5);
IkReal x2517=(x2514+((x2513*(r00*r00)))+(((-2.0)*x2515*x2516))+(((-1.0)*x2513*x2514))+(r02*r02));
j4eval[0]=x2517;
j4eval[1]=IKsign(x2517);
j4eval[2]=((IKabs(r02))+(IKabs((x2516+(((-1.0)*x2515))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2518=cj5*cj5;
IkReal x2519=r01*r01;
IkReal x2520=(r01*sj5);
IkReal x2521=(cj5*r00);
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign((x2519+((x2518*(r00*r00)))+(r02*r02)+(((-2.0)*x2520*x2521))+(((-1.0)*x2518*x2519)))),-1);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(r02),IkReal((x2520+(((-1.0)*x2521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2522.value)))+(x2523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2524=IKcos(j4);
IkReal x2525=IKsin(j4);
IkReal x2526=(cj5*r00);
IkReal x2527=((1.0)*sj2);
IkReal x2528=((1.0)*x2524);
IkReal x2529=(sj5*x2524);
IkReal x2530=(cj5*x2525);
IkReal x2531=((1.0)*sj5*x2525);
evalcond[0]=(((r22*x2525))+(((-1.0)*cj5*r20*x2528))+((r21*x2529)));
evalcond[1]=(((r12*x2525))+((r11*x2529))+(((-1.0)*cj5*r10*x2528)));
evalcond[2]=(((r02*x2524))+(((-1.0)*r01*x2531))+((x2525*x2526)));
evalcond[3]=((-1.0)+((r02*x2525))+((r01*x2529))+(((-1.0)*x2526*x2528)));
evalcond[4]=(((r12*x2524))+((r10*x2530))+((cj1*cj2))+(((-1.0)*sj1*x2527))+(((-1.0)*r11*x2531)));
evalcond[5]=(((r22*x2524))+(((-1.0)*r21*x2531))+((r20*x2530))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2532=((1.0)*cj5);
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2532))+(((-1.0)*r20*sj5)))),-1);
if(!x2533.valid){
continue;
}
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2532))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2533.value)))+(x2534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2535=IKcos(j4);
IkReal x2536=IKsin(j4);
IkReal x2537=(cj5*r00);
IkReal x2538=((1.0)*sj2);
IkReal x2539=((1.0)*x2535);
IkReal x2540=(sj5*x2535);
IkReal x2541=(cj5*x2536);
IkReal x2542=((1.0)*sj5*x2536);
evalcond[0]=(((r21*x2540))+(((-1.0)*cj5*r20*x2539))+((r22*x2536)));
evalcond[1]=(((r11*x2540))+(((-1.0)*cj5*r10*x2539))+((r12*x2536)));
evalcond[2]=(((x2536*x2537))+((r02*x2535))+(((-1.0)*r01*x2542)));
evalcond[3]=((-1.0)+(((-1.0)*x2537*x2539))+((r02*x2536))+((r01*x2540)));
evalcond[4]=((((-1.0)*r11*x2542))+(((-1.0)*sj1*x2538))+((cj1*cj2))+((r12*x2535))+((r10*x2541)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x2535))+((r20*x2541))+(((-1.0)*r21*x2542))+(((-1.0)*cj1*x2538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2543 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2543.valid){
continue;
}
CheckValue<IkReal> x2544=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2543.value)+(((1.5707963267949)*(x2544.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2545=IKcos(j4);
IkReal x2546=IKsin(j4);
IkReal x2547=(cj5*r00);
IkReal x2548=((1.0)*sj2);
IkReal x2549=((1.0)*x2545);
IkReal x2550=(sj5*x2545);
IkReal x2551=(cj5*x2546);
IkReal x2552=((1.0)*sj5*x2546);
evalcond[0]=((((-1.0)*cj5*r20*x2549))+((r21*x2550))+((r22*x2546)));
evalcond[1]=(((r12*x2546))+((r11*x2550))+(((-1.0)*cj5*r10*x2549)));
evalcond[2]=((((-1.0)*r01*x2552))+((x2546*x2547))+((r02*x2545)));
evalcond[3]=((-1.0)+((r01*x2550))+((r02*x2546))+(((-1.0)*x2547*x2549)));
evalcond[4]=((((-1.0)*r11*x2552))+((r12*x2545))+(((-1.0)*sj1*x2548))+((cj1*cj2))+((r10*x2551)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r21*x2552))+(((-1.0)*cj1*x2548))+((r20*x2551))+((r22*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2553=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2553;
j4eval[1]=IKsign(x2553);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2554=((1.0)*cj5);
IkReal x2555=((((-1.0)*r11*x2554))+(((-1.0)*r10*sj5)));
j4eval[0]=x2555;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2554)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2556=cj5*cj5;
IkReal x2557=r01*r01;
IkReal x2558=(r01*sj5);
IkReal x2559=(cj5*r00);
IkReal x2560=((((2.0)*x2558*x2559))+(((-1.0)*(r02*r02)))+(((-1.0)*x2556*(r00*r00)))+(((-1.0)*x2557))+((x2556*x2557)));
j4eval[0]=x2560;
j4eval[1]=IKsign(x2560);
j4eval[2]=((IKabs(r02))+(IKabs((x2558+(((-1.0)*x2559))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2561=cj5*cj5;
IkReal x2562=r01*r01;
IkReal x2563=(r01*sj5);
IkReal x2564=(cj5*r00);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(r02),IkReal((x2563+(((-1.0)*x2564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2562))+(((-1.0)*(r02*r02)))+(((-1.0)*x2561*(r00*r00)))+((x2561*x2562))+(((2.0)*x2563*x2564)))),-1);
if(!x2566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2565.value)+(((1.5707963267949)*(x2566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2567=IKcos(j4);
IkReal x2568=IKsin(j4);
IkReal x2569=(cj5*r00);
IkReal x2570=((1.0)*cj1);
IkReal x2571=((1.0)*x2567);
IkReal x2572=(sj5*x2567);
IkReal x2573=(cj5*x2568);
IkReal x2574=((1.0)*sj5*x2568);
evalcond[0]=(((r22*x2568))+((r21*x2572))+(((-1.0)*cj5*r20*x2571)));
evalcond[1]=(((r11*x2572))+(((-1.0)*cj5*r10*x2571))+((r12*x2568)));
evalcond[2]=((((-1.0)*r01*x2574))+((x2568*x2569))+((r02*x2567)));
evalcond[3]=((1.0)+(((-1.0)*x2569*x2571))+((r01*x2572))+((r02*x2568)));
evalcond[4]=(((r10*x2573))+(((-1.0)*cj2*x2570))+((sj1*sj2))+((r12*x2567))+(((-1.0)*r11*x2574)));
evalcond[5]=(((r22*x2567))+(((-1.0)*cj2*sj1))+((r20*x2573))+(((-1.0)*r21*x2574))+(((-1.0)*sj2*x2570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2575=((1.0)*cj5);
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x2575)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2575)))),-1);
if(!x2577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2576.value)+(((1.5707963267949)*(x2577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2578=IKcos(j4);
IkReal x2579=IKsin(j4);
IkReal x2580=(cj5*r00);
IkReal x2581=((1.0)*cj1);
IkReal x2582=((1.0)*x2578);
IkReal x2583=(sj5*x2578);
IkReal x2584=(cj5*x2579);
IkReal x2585=((1.0)*sj5*x2579);
evalcond[0]=((((-1.0)*cj5*r20*x2582))+((r21*x2583))+((r22*x2579)));
evalcond[1]=(((r12*x2579))+((r11*x2583))+(((-1.0)*cj5*r10*x2582)));
evalcond[2]=((((-1.0)*r01*x2585))+((x2579*x2580))+((r02*x2578)));
evalcond[3]=((1.0)+((r01*x2583))+((r02*x2579))+(((-1.0)*x2580*x2582)));
evalcond[4]=(((r12*x2578))+((sj1*sj2))+(((-1.0)*cj2*x2581))+((r10*x2584))+(((-1.0)*r11*x2585)));
evalcond[5]=((((-1.0)*r21*x2585))+(((-1.0)*cj2*sj1))+((r20*x2584))+(((-1.0)*sj2*x2581))+((r22*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2586.valid){
continue;
}
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2586.value)))+(x2587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2588=IKcos(j4);
IkReal x2589=IKsin(j4);
IkReal x2590=(cj5*r00);
IkReal x2591=((1.0)*cj1);
IkReal x2592=((1.0)*x2588);
IkReal x2593=(sj5*x2588);
IkReal x2594=(cj5*x2589);
IkReal x2595=((1.0)*sj5*x2589);
evalcond[0]=(((r22*x2589))+(((-1.0)*cj5*r20*x2592))+((r21*x2593)));
evalcond[1]=(((r12*x2589))+((r11*x2593))+(((-1.0)*cj5*r10*x2592)));
evalcond[2]=((((-1.0)*r01*x2595))+((x2589*x2590))+((r02*x2588)));
evalcond[3]=((1.0)+(((-1.0)*x2590*x2592))+((r01*x2593))+((r02*x2589)));
evalcond[4]=(((sj1*sj2))+((r10*x2594))+((r12*x2588))+(((-1.0)*cj2*x2591))+(((-1.0)*r11*x2595)));
evalcond[5]=(((r22*x2588))+(((-1.0)*r21*x2595))+(((-1.0)*cj2*sj1))+((r20*x2594))+(((-1.0)*sj2*x2591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2596=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2596);
rxp1_1=(px*r21);
rxp1_2=(r11*x2596);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2597=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2597);
rxp1_1=(px*r21);
rxp1_2=(r11*x2597);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2598=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2598);
rxp1_1=(px*r21);
rxp1_2=(r11*x2598);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2601=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2601.valid){
continue;
}
IkReal x2599=x2601.value;
IkReal x2600=(sj0*x2599);
sj4array[0]=((((-1.0)*cj1*cj2*x2600))+((sj1*sj2*x2600)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2602=IKcos(j4);
IkReal x2603=IKsin(j4);
IkReal x2604=(r21*sj5);
IkReal x2605=((1.0)*cj5*x2602);
evalcond[0]=(r02*x2602);
evalcond[1]=((((-1.0)*sj0))+((r02*x2603)));
evalcond[2]=(((x2602*x2604))+(((-1.0)*r20*x2605)));
evalcond[3]=(((r11*sj5*x2602))+(((-1.0)*r10*x2605)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((cj5*r20*x2603))+(((-1.0)*x2603*x2604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2607=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2607.valid){
continue;
}
IkReal x2606=x2607.value;
sj4array[0]=(((cj2*sj1*x2606))+((cj1*sj2*x2606)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2608=IKcos(j4);
IkReal x2609=IKsin(j4);
IkReal x2610=((1.0)*sj0);
IkReal x2611=(r11*sj5);
IkReal x2612=((1.0)*cj5*x2608);
evalcond[0]=(r02*x2608);
evalcond[1]=(((r02*x2609))+(((-1.0)*x2610)));
evalcond[2]=(((r21*sj5*x2608))+(((-1.0)*r20*x2612)));
evalcond[3]=(((x2608*x2611))+(((-1.0)*r10*x2612)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r10*x2609))+(((-1.0)*x2609*x2611))+(((-1.0)*sj1*sj2*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(r02,-1);
if(!x2613.valid){
continue;
}
sj4array[0]=(sj0*(x2613.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2614=IKcos(j4);
IkReal x2615=IKsin(j4);
IkReal x2616=((1.0)*sj1);
IkReal x2617=(sj5*x2614);
IkReal x2618=(cj5*x2615);
IkReal x2619=((1.0)*sj5*x2615);
IkReal x2620=((1.0)*cj5*x2614);
evalcond[0]=(r02*x2614);
evalcond[1]=(((r21*x2617))+(((-1.0)*r20*x2620)));
evalcond[2]=((((-1.0)*r10*x2620))+((r11*x2617)));
evalcond[3]=((((-1.0)*r21*x2619))+((r20*x2618))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2616)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x2619))+((r10*x2618))+(((-1.0)*sj0*sj2*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2621=((1.0)*sj0);
IkReal x2622=((1.0)*cj0);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x2621))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2622)))),IkReal(((((-1.0)*r12*x2621))+(((-1.0)*r02*x2622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2623.value)+(((1.5707963267949)*(x2624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2625=IKcos(j4);
IkReal x2626=IKsin(j4);
IkReal x2627=(cj5*r00);
IkReal x2628=(cj1*cj2);
IkReal x2629=((1.0)*sj1);
IkReal x2630=((1.0)*x2625);
IkReal x2631=(sj5*x2625);
IkReal x2632=(cj5*x2626);
IkReal x2633=((1.0)*sj5*x2626);
evalcond[0]=((((-1.0)*cj5*r20*x2630))+((r21*x2631))+((r22*x2626)));
evalcond[1]=(cj0+((r11*x2631))+(((-1.0)*cj5*r10*x2630))+((r12*x2626)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2626))+((r01*x2631))+(((-1.0)*x2627*x2630)));
evalcond[3]=((((-1.0)*r21*x2633))+(((-1.0)*cj1*sj2))+((r20*x2632))+((r22*x2625))+(((-1.0)*cj2*x2629)));
evalcond[4]=(((x2626*x2627))+(((-1.0)*r01*x2633))+(((-1.0)*cj0*sj2*x2629))+((r02*x2625))+((cj0*x2628)));
evalcond[5]=(((r10*x2632))+(((-1.0)*r11*x2633))+((sj0*x2628))+((r12*x2625))+(((-1.0)*sj0*sj2*x2629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
CheckValue<IkReal> x2635=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2634.value)+(((1.5707963267949)*(x2635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2636=IKcos(j4);
IkReal x2637=IKsin(j4);
IkReal x2638=(cj5*r00);
IkReal x2639=(cj1*cj2);
IkReal x2640=((1.0)*sj1);
IkReal x2641=((1.0)*x2636);
IkReal x2642=(sj5*x2636);
IkReal x2643=(cj5*x2637);
IkReal x2644=((1.0)*sj5*x2637);
evalcond[0]=(((r21*x2642))+(((-1.0)*cj5*r20*x2641))+((r22*x2637)));
evalcond[1]=(((r11*x2642))+cj0+(((-1.0)*cj5*r10*x2641))+((r12*x2637)));
evalcond[2]=((((-1.0)*sj0))+((r01*x2642))+(((-1.0)*x2638*x2641))+((r02*x2637)));
evalcond[3]=(((r22*x2636))+(((-1.0)*cj2*x2640))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2644))+((r20*x2643)));
evalcond[4]=((((-1.0)*r01*x2644))+((cj0*x2639))+((x2637*x2638))+(((-1.0)*cj0*sj2*x2640))+((r02*x2636)));
evalcond[5]=(((sj0*x2639))+(((-1.0)*r11*x2644))+(((-1.0)*sj0*sj2*x2640))+((r10*x2643))+((r12*x2636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2645.value)+(((1.5707963267949)*(x2646.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2647=IKcos(j4);
IkReal x2648=IKsin(j4);
IkReal x2649=(cj5*r00);
IkReal x2650=(cj1*cj2);
IkReal x2651=((1.0)*sj1);
IkReal x2652=((1.0)*x2647);
IkReal x2653=(sj5*x2647);
IkReal x2654=(cj5*x2648);
IkReal x2655=((1.0)*sj5*x2648);
evalcond[0]=(((r21*x2653))+(((-1.0)*cj5*r20*x2652))+((r22*x2648)));
evalcond[1]=(((r12*x2648))+((r11*x2653))+cj0+(((-1.0)*cj5*r10*x2652)));
evalcond[2]=((((-1.0)*sj0))+((r02*x2648))+((r01*x2653))+(((-1.0)*x2649*x2652)));
evalcond[3]=((((-1.0)*cj2*x2651))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x2655))+((r22*x2647))+((r20*x2654)));
evalcond[4]=((((-1.0)*r01*x2655))+((x2648*x2649))+((r02*x2647))+((cj0*x2650))+(((-1.0)*cj0*sj2*x2651)));
evalcond[5]=(((sj0*x2650))+((r12*x2647))+(((-1.0)*r11*x2655))+(((-1.0)*sj0*sj2*x2651))+((r10*x2654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2656=(((cj2*sj1))+((cj1*sj2)));
j0eval[0]=x2656;
j0eval[1]=IKsign(x2656);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x2657=r21*r21;
IkReal x2658=cj5*cj5;
IkReal x2659=(cj1*sj2);
IkReal x2660=(cj5*r20);
IkReal x2661=(r21*sj5);
IkReal x2662=(cj2*sj1);
IkReal x2663=((((2.0)*x2660*x2661))+((x2657*x2658))+(((-1.0)*(r22*r22)))+(((-1.0)*x2658*(r20*r20)))+(((-1.0)*x2657)));
j4eval[0]=x2663;
j4eval[1]=IKsign(x2663);
j4eval[2]=((IKabs(((((-1.0)*x2659*x2661))+((x2659*x2660))+((x2660*x2662))+(((-1.0)*x2661*x2662)))))+(IKabs((((r22*x2662))+((r22*x2659))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(((cj2*sj1))+((cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2664=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2664;
j4eval[1]=IKsign(x2664);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2665=cj5*cj5;
IkReal x2666=(r11*r21);
IkReal x2667=((1.0)*r20);
IkReal x2668=(cj5*sj5);
IkReal x2669=((((-1.0)*x2666))+(((-1.0)*r12*r22))+(((-1.0)*r10*x2665*x2667))+((r10*r21*x2668))+((r11*r20*x2668))+((x2665*x2666)));
j4eval[0]=x2669;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x2667))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x2669);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2670=cj5*cj5;
IkReal x2671=((1.0)*r20);
IkReal x2672=(r01*r21);
IkReal x2673=(r21*sj5);
IkReal x2674=(((cj5*r01*r20*sj5))+(((-1.0)*x2672))+(((-1.0)*r02*r22))+((cj5*r00*x2673))+(((-1.0)*r00*x2670*x2671))+((x2670*x2672)));
j4eval[0]=x2674;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2671))+((cj0*x2673)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2675=cj5*cj5;
IkReal x2676=((1.0)*r20);
IkReal x2677=(r01*r21);
IkReal x2678=(r21*sj5);
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x2677))+(((-1.0)*r02*r22))+((cj5*r00*x2678))+((x2675*x2677))+(((-1.0)*r00*x2675*x2676)))),-1);
if(!x2679.valid){
continue;
}
CheckValue<IkReal> x2680 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2676))+((cj0*x2678)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2679.value)))+(x2680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2681=IKcos(j4);
IkReal x2682=IKsin(j4);
IkReal x2683=(cj5*r00);
IkReal x2684=(cj5*r20);
IkReal x2685=(cj5*r10);
IkReal x2686=(r21*sj5);
IkReal x2687=((1.0)*x2681);
IkReal x2688=((1.0)*x2682);
IkReal x2689=(sj5*x2681);
IkReal x2690=(sj5*x2682);
evalcond[0]=((((-1.0)*x2684*x2687))+((r22*x2682))+((x2681*x2686)));
evalcond[1]=((((-1.0)*x2685*x2687))+((r11*x2689))+cj0+((r12*x2682)));
evalcond[2]=((((-1.0)*x2684*x2688))+(((-1.0)*r22*x2687))+((x2682*x2686)));
evalcond[3]=((((-1.0)*r02*x2687))+cj0+(((-1.0)*x2683*x2688))+((r01*x2690)));
evalcond[4]=((((-1.0)*r12*x2687))+(((-1.0)*x2685*x2688))+sj0+((r11*x2690)));
evalcond[5]=(((r02*x2682))+(((-1.0)*sj0))+(((-1.0)*x2683*x2687))+((r01*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2691=cj5*cj5;
IkReal x2692=(r11*r21);
IkReal x2693=((1.0)*r20);
IkReal x2694=(cj5*sj5);
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(IKsign((((x2691*x2692))+((r10*r21*x2694))+(((-1.0)*r12*r22))+((r11*r20*x2694))+(((-1.0)*x2692))+(((-1.0)*r10*x2691*x2693)))),-1);
if(!x2695.valid){
continue;
}
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2695.value)))+(x2696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2697=IKcos(j4);
IkReal x2698=IKsin(j4);
IkReal x2699=(cj5*r00);
IkReal x2700=(cj5*r20);
IkReal x2701=(cj5*r10);
IkReal x2702=(r21*sj5);
IkReal x2703=((1.0)*x2697);
IkReal x2704=((1.0)*x2698);
IkReal x2705=(sj5*x2697);
IkReal x2706=(sj5*x2698);
evalcond[0]=(((r22*x2698))+((x2697*x2702))+(((-1.0)*x2700*x2703)));
evalcond[1]=(((r12*x2698))+((r11*x2705))+cj0+(((-1.0)*x2701*x2703)));
evalcond[2]=((((-1.0)*r22*x2703))+((x2698*x2702))+(((-1.0)*x2700*x2704)));
evalcond[3]=(cj0+((r01*x2706))+(((-1.0)*r02*x2703))+(((-1.0)*x2699*x2704)));
evalcond[4]=(sj0+((r11*x2706))+(((-1.0)*r12*x2703))+(((-1.0)*x2701*x2704)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2705))+(((-1.0)*x2699*x2703))+((r02*x2698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2707.value)+(((1.5707963267949)*(x2708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2709=IKcos(j4);
IkReal x2710=IKsin(j4);
IkReal x2711=(cj5*r00);
IkReal x2712=(cj5*r20);
IkReal x2713=(cj5*r10);
IkReal x2714=(r21*sj5);
IkReal x2715=((1.0)*x2709);
IkReal x2716=((1.0)*x2710);
IkReal x2717=(sj5*x2709);
IkReal x2718=(sj5*x2710);
evalcond[0]=((((-1.0)*x2712*x2715))+((x2709*x2714))+((r22*x2710)));
evalcond[1]=(((r12*x2710))+cj0+(((-1.0)*x2713*x2715))+((r11*x2717)));
evalcond[2]=((((-1.0)*x2712*x2716))+((x2710*x2714))+(((-1.0)*r22*x2715)));
evalcond[3]=(cj0+(((-1.0)*r02*x2715))+(((-1.0)*x2711*x2716))+((r01*x2718)));
evalcond[4]=(sj0+(((-1.0)*x2713*x2716))+((r11*x2718))+(((-1.0)*r12*x2715)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2710))+(((-1.0)*x2711*x2715))+((r01*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2719=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2719;
j4eval[1]=IKsign(x2719);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2720=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2720;
j4eval[1]=IKsign(x2720);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2721=cj5*cj5;
IkReal x2722=(r11*r21);
IkReal x2723=((1.0)*r20);
IkReal x2724=(cj5*sj5);
IkReal x2725=((((-1.0)*r12*r22))+(((-1.0)*r10*x2721*x2723))+(((-1.0)*x2722))+((x2721*x2722))+((r11*r20*x2724))+((r10*r21*x2724)));
j4eval[0]=x2725;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2723)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2726=cj5*cj5;
IkReal x2727=(r11*r21);
IkReal x2728=((1.0)*r20);
IkReal x2729=(cj5*sj5);
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x2727))+((x2726*x2727))+((r11*r20*x2729))+((r10*r21*x2729))+(((-1.0)*r10*x2726*x2728)))),-1);
if(!x2730.valid){
continue;
}
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2730.value)))+(x2731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2732=IKcos(j4);
IkReal x2733=IKsin(j4);
IkReal x2734=((1.0)*sj0);
IkReal x2735=(cj5*r00);
IkReal x2736=(cj5*r20);
IkReal x2737=(cj5*r10);
IkReal x2738=((1.0)*x2732);
IkReal x2739=((1.0)*x2733);
IkReal x2740=(sj5*x2732);
IkReal x2741=(sj5*x2733);
evalcond[0]=(((r21*x2740))+((r22*x2733))+(((-1.0)*x2736*x2738)));
evalcond[1]=((((-1.0)*x2737*x2738))+((r11*x2740))+cj0+((r12*x2733)));
evalcond[2]=(((r21*x2741))+(((-1.0)*x2736*x2739))+(((-1.0)*r22*x2738)));
evalcond[3]=(((r02*x2733))+(((-1.0)*x2735*x2738))+((r01*x2740))+(((-1.0)*x2734)));
evalcond[4]=((((-1.0)*x2735*x2739))+((r01*x2741))+(((-1.0)*r02*x2738))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2737*x2739))+((r11*x2741))+(((-1.0)*r12*x2738))+(((-1.0)*x2734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
CheckValue<IkReal> x2743=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2742.value)+(((1.5707963267949)*(x2743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2744=IKcos(j4);
IkReal x2745=IKsin(j4);
IkReal x2746=((1.0)*sj0);
IkReal x2747=(cj5*r00);
IkReal x2748=(cj5*r20);
IkReal x2749=(cj5*r10);
IkReal x2750=((1.0)*x2744);
IkReal x2751=((1.0)*x2745);
IkReal x2752=(sj5*x2744);
IkReal x2753=(sj5*x2745);
evalcond[0]=(((r22*x2745))+((r21*x2752))+(((-1.0)*x2748*x2750)));
evalcond[1]=(((r11*x2752))+cj0+((r12*x2745))+(((-1.0)*x2749*x2750)));
evalcond[2]=((((-1.0)*r22*x2750))+((r21*x2753))+(((-1.0)*x2748*x2751)));
evalcond[3]=(((r01*x2752))+(((-1.0)*x2746))+((r02*x2745))+(((-1.0)*x2747*x2750)));
evalcond[4]=(((r01*x2753))+(((-1.0)*x2747*x2751))+(((-1.0)*cj0))+(((-1.0)*r02*x2750)));
evalcond[5]=(((r11*x2753))+(((-1.0)*r12*x2750))+(((-1.0)*x2746))+(((-1.0)*x2749*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2754 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2754.valid){
continue;
}
CheckValue<IkReal> x2755=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2754.value)+(((1.5707963267949)*(x2755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2756=IKcos(j4);
IkReal x2757=IKsin(j4);
IkReal x2758=((1.0)*sj0);
IkReal x2759=(cj5*r00);
IkReal x2760=(cj5*r20);
IkReal x2761=(cj5*r10);
IkReal x2762=((1.0)*x2756);
IkReal x2763=((1.0)*x2757);
IkReal x2764=(sj5*x2756);
IkReal x2765=(sj5*x2757);
evalcond[0]=(((r22*x2757))+(((-1.0)*x2760*x2762))+((r21*x2764)));
evalcond[1]=(cj0+(((-1.0)*x2761*x2762))+((r12*x2757))+((r11*x2764)));
evalcond[2]=((((-1.0)*x2760*x2763))+((r21*x2765))+(((-1.0)*r22*x2762)));
evalcond[3]=(((r01*x2764))+(((-1.0)*x2759*x2762))+(((-1.0)*x2758))+((r02*x2757)));
evalcond[4]=(((r01*x2765))+(((-1.0)*x2759*x2763))+(((-1.0)*r02*x2762))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2762))+(((-1.0)*x2761*x2763))+(((-1.0)*x2758))+((r11*x2765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.37807070101857)*py))+(((3.17555422408628)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((1.37807070101857)*py))+(((3.17555422408628)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((1.37807070101857)*py))+(((3.17555422408628)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2766=IKcos(j0);
IkReal x2767=IKsin(j0);
evalcond[0]=((((0.265)*x2766))+(((-0.115)*x2767))+(((-1.0)*px)));
evalcond[1]=((((0.115)*x2766))+(((0.265)*x2767))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2768=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2768;
j4eval[1]=IKsign(x2768);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2769=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2769;
j4eval[1]=IKsign(x2769);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2770=cj5*cj5;
IkReal x2771=(r11*r21);
IkReal x2772=((1.0)*r20);
IkReal x2773=(cj5*sj5);
IkReal x2774=(((x2770*x2771))+(((-1.0)*x2771))+(((-1.0)*r12*r22))+((r10*r21*x2773))+((r11*r20*x2773))+(((-1.0)*r10*x2770*x2772)));
j4eval[0]=x2774;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2772)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2775=cj5*cj5;
IkReal x2776=(r11*r21);
IkReal x2777=((1.0)*r20);
IkReal x2778=(cj5*sj5);
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2776))+((x2775*x2776))+(((-1.0)*r12*r22))+((r10*r21*x2778))+((r11*r20*x2778))+(((-1.0)*r10*x2775*x2777)))),-1);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2779.value)))+(x2780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2781=IKcos(j4);
IkReal x2782=IKsin(j4);
IkReal x2783=((1.0)*sj0);
IkReal x2784=(cj5*r00);
IkReal x2785=(cj5*r20);
IkReal x2786=(cj5*r10);
IkReal x2787=((1.0)*x2781);
IkReal x2788=((1.0)*x2782);
IkReal x2789=(sj5*x2781);
IkReal x2790=(sj5*x2782);
evalcond[0]=(((r21*x2789))+(((-1.0)*x2785*x2787))+((r22*x2782)));
evalcond[1]=(cj0+(((-1.0)*x2786*x2787))+((r12*x2782))+((r11*x2789)));
evalcond[2]=(((r21*x2790))+(((-1.0)*x2785*x2788))+(((-1.0)*r22*x2787)));
evalcond[3]=((((-1.0)*x2783))+(((-1.0)*x2784*x2787))+((r02*x2782))+((r01*x2789)));
evalcond[4]=((((-1.0)*x2784*x2788))+((r01*x2790))+(((-1.0)*r02*x2787))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2783))+(((-1.0)*r12*x2787))+(((-1.0)*x2786*x2788))+((r11*x2790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2793=IKcos(j4);
IkReal x2794=IKsin(j4);
IkReal x2795=((1.0)*sj0);
IkReal x2796=(cj5*r00);
IkReal x2797=(cj5*r20);
IkReal x2798=(cj5*r10);
IkReal x2799=((1.0)*x2793);
IkReal x2800=((1.0)*x2794);
IkReal x2801=(sj5*x2793);
IkReal x2802=(sj5*x2794);
evalcond[0]=((((-1.0)*x2797*x2799))+((r22*x2794))+((r21*x2801)));
evalcond[1]=(cj0+(((-1.0)*x2798*x2799))+((r12*x2794))+((r11*x2801)));
evalcond[2]=((((-1.0)*r22*x2799))+(((-1.0)*x2797*x2800))+((r21*x2802)));
evalcond[3]=((((-1.0)*x2795))+(((-1.0)*x2796*x2799))+((r02*x2794))+((r01*x2801)));
evalcond[4]=((((-1.0)*x2796*x2800))+((r01*x2802))+(((-1.0)*cj0))+(((-1.0)*r02*x2799)));
evalcond[5]=((((-1.0)*x2795))+(((-1.0)*x2798*x2800))+(((-1.0)*r12*x2799))+((r11*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2803 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2803.value)+(((1.5707963267949)*(x2804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2805=IKcos(j4);
IkReal x2806=IKsin(j4);
IkReal x2807=((1.0)*sj0);
IkReal x2808=(cj5*r00);
IkReal x2809=(cj5*r20);
IkReal x2810=(cj5*r10);
IkReal x2811=((1.0)*x2805);
IkReal x2812=((1.0)*x2806);
IkReal x2813=(sj5*x2805);
IkReal x2814=(sj5*x2806);
evalcond[0]=((((-1.0)*x2809*x2811))+((r21*x2813))+((r22*x2806)));
evalcond[1]=(((r12*x2806))+(((-1.0)*x2810*x2811))+cj0+((r11*x2813)));
evalcond[2]=((((-1.0)*x2809*x2812))+((r21*x2814))+(((-1.0)*r22*x2811)));
evalcond[3]=(((r01*x2813))+(((-1.0)*x2807))+((r02*x2806))+(((-1.0)*x2808*x2811)));
evalcond[4]=(((r01*x2814))+(((-1.0)*r02*x2811))+(((-1.0)*x2808*x2812))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x2811))+(((-1.0)*x2810*x2812))+(((-1.0)*x2807))+((r11*x2814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.37807070101857)*py))+(((3.17555422408628)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((1.37807070101857)*py))+(((3.17555422408628)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((1.37807070101857)*py))+(((3.17555422408628)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2815=IKcos(j0);
IkReal x2816=IKsin(j0);
evalcond[0]=((((0.265)*x2815))+(((-1.0)*px))+(((-0.115)*x2816)));
evalcond[1]=((((0.265)*x2816))+(((-1.0)*py))+(((0.115)*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2817=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2817;
j4eval[1]=IKsign(x2817);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2818=cj5*cj5;
IkReal x2819=(r11*r21);
IkReal x2820=((1.0)*r20);
IkReal x2821=(cj5*sj5);
IkReal x2822=((((-1.0)*x2819))+(((-1.0)*r12*r22))+((r11*r20*x2821))+((x2818*x2819))+(((-1.0)*r10*x2818*x2820))+((r10*r21*x2821)));
j4eval[0]=x2822;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2820))))));
j4eval[2]=IKsign(x2822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x2823=cj5*cj5;
IkReal x2824=((1.0)*r20);
IkReal x2825=(r01*r21);
IkReal x2826=(r21*sj5);
IkReal x2827=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x2826))+(((-1.0)*x2825))+((x2823*x2825))+(((-1.0)*r00*x2823*x2824)));
j4eval[0]=x2827;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2824))+((cj0*x2826)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2828=cj5*cj5;
IkReal x2829=((1.0)*r20);
IkReal x2830=(r01*r21);
IkReal x2831=(r21*sj5);
CheckValue<IkReal> x2832 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2829))+((cj0*x2831)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2832.valid){
continue;
}
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x2830))+(((-1.0)*r02*r22))+((x2828*x2830))+((cj5*r00*x2831))+(((-1.0)*r00*x2828*x2829)))),-1);
if(!x2833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2832.value)+(((1.5707963267949)*(x2833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2834=IKcos(j4);
IkReal x2835=IKsin(j4);
IkReal x2836=(cj5*r00);
IkReal x2837=(cj5*r20);
IkReal x2838=(cj5*r10);
IkReal x2839=(r21*sj5);
IkReal x2840=((1.0)*x2834);
IkReal x2841=((1.0)*x2835);
IkReal x2842=(sj5*x2834);
IkReal x2843=(sj5*x2835);
evalcond[0]=(((x2834*x2839))+((r22*x2835))+(((-1.0)*x2837*x2840)));
evalcond[1]=(((r12*x2835))+((r11*x2842))+cj0+(((-1.0)*x2838*x2840)));
evalcond[2]=((((-1.0)*r22*x2840))+((x2835*x2839))+(((-1.0)*x2837*x2841)));
evalcond[3]=(cj0+(((-1.0)*r02*x2840))+(((-1.0)*x2836*x2841))+((r01*x2843)));
evalcond[4]=(sj0+((r11*x2843))+(((-1.0)*r12*x2840))+(((-1.0)*x2838*x2841)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2835))+(((-1.0)*x2836*x2840))+((r01*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2844=cj5*cj5;
IkReal x2845=(r11*r21);
IkReal x2846=((1.0)*r20);
IkReal x2847=(cj5*sj5);
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(IKsign((((x2844*x2845))+(((-1.0)*r12*r22))+((r10*r21*x2847))+(((-1.0)*x2845))+(((-1.0)*r10*x2844*x2846))+((r11*r20*x2847)))),-1);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2848.value)))+(x2849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2850=IKcos(j4);
IkReal x2851=IKsin(j4);
IkReal x2852=(cj5*r00);
IkReal x2853=(cj5*r20);
IkReal x2854=(cj5*r10);
IkReal x2855=(r21*sj5);
IkReal x2856=((1.0)*x2850);
IkReal x2857=((1.0)*x2851);
IkReal x2858=(sj5*x2850);
IkReal x2859=(sj5*x2851);
evalcond[0]=(((x2850*x2855))+((r22*x2851))+(((-1.0)*x2853*x2856)));
evalcond[1]=(cj0+((r11*x2858))+((r12*x2851))+(((-1.0)*x2854*x2856)));
evalcond[2]=(((x2851*x2855))+(((-1.0)*r22*x2856))+(((-1.0)*x2853*x2857)));
evalcond[3]=(cj0+(((-1.0)*r02*x2856))+((r01*x2859))+(((-1.0)*x2852*x2857)));
evalcond[4]=(sj0+((r11*x2859))+(((-1.0)*r12*x2856))+(((-1.0)*x2854*x2857)));
evalcond[5]=((((-1.0)*sj0))+((r01*x2858))+(((-1.0)*x2852*x2856))+((r02*x2851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2860.value)+(((1.5707963267949)*(x2861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2862=IKcos(j4);
IkReal x2863=IKsin(j4);
IkReal x2864=(cj5*r00);
IkReal x2865=(cj5*r20);
IkReal x2866=(cj5*r10);
IkReal x2867=(r21*sj5);
IkReal x2868=((1.0)*x2862);
IkReal x2869=((1.0)*x2863);
IkReal x2870=(sj5*x2862);
IkReal x2871=(sj5*x2863);
evalcond[0]=(((r22*x2863))+(((-1.0)*x2865*x2868))+((x2862*x2867)));
evalcond[1]=(cj0+((r12*x2863))+((r11*x2870))+(((-1.0)*x2866*x2868)));
evalcond[2]=((((-1.0)*x2865*x2869))+(((-1.0)*r22*x2868))+((x2863*x2867)));
evalcond[3]=((((-1.0)*r02*x2868))+cj0+(((-1.0)*x2864*x2869))+((r01*x2871)));
evalcond[4]=((((-1.0)*r12*x2868))+sj0+((r11*x2871))+(((-1.0)*x2866*x2869)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2864*x2868))+((r01*x2870))+((r02*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2872;
j4eval[1]=IKsign(x2872);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2873=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2873;
j4eval[1]=IKsign(x2873);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2874=cj5*cj5;
IkReal x2875=(r11*r21);
IkReal x2876=((1.0)*r20);
IkReal x2877=(cj5*sj5);
IkReal x2878=((((-1.0)*r12*r22))+(((-1.0)*x2875))+(((-1.0)*r10*x2874*x2876))+((r11*r20*x2877))+((x2874*x2875))+((r10*r21*x2877)));
j4eval[0]=x2878;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2876)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=cj5*cj5;
IkReal x2880=(r11*r21);
IkReal x2881=((1.0)*r20);
IkReal x2882=(cj5*sj5);
CheckValue<IkReal> x2883 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2879*x2881))+(((-1.0)*r12*r22))+((x2879*x2880))+(((-1.0)*x2880))+((r10*r21*x2882))+((r11*r20*x2882)))),-1);
if(!x2884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2883.value)+(((1.5707963267949)*(x2884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2885=IKcos(j4);
IkReal x2886=IKsin(j4);
IkReal x2887=((1.0)*sj0);
IkReal x2888=(cj5*r00);
IkReal x2889=(cj5*r20);
IkReal x2890=(cj5*r10);
IkReal x2891=((1.0)*x2885);
IkReal x2892=((1.0)*x2886);
IkReal x2893=(sj5*x2885);
IkReal x2894=(sj5*x2886);
evalcond[0]=((((-1.0)*x2889*x2891))+((r22*x2886))+((r21*x2893)));
evalcond[1]=((((-1.0)*x2890*x2891))+cj0+((r11*x2893))+((r12*x2886)));
evalcond[2]=((((-1.0)*r22*x2891))+(((-1.0)*x2889*x2892))+((r21*x2894)));
evalcond[3]=((((-1.0)*x2888*x2891))+((r01*x2893))+(((-1.0)*x2887))+((r02*x2886)));
evalcond[4]=((((-1.0)*r02*x2891))+(((-1.0)*x2888*x2892))+((r01*x2894))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2890*x2892))+((r11*x2894))+(((-1.0)*x2887))+(((-1.0)*r12*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2895.value)+(((1.5707963267949)*(x2896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2897=IKcos(j4);
IkReal x2898=IKsin(j4);
IkReal x2899=((1.0)*sj0);
IkReal x2900=(cj5*r00);
IkReal x2901=(cj5*r20);
IkReal x2902=(cj5*r10);
IkReal x2903=((1.0)*x2897);
IkReal x2904=((1.0)*x2898);
IkReal x2905=(sj5*x2897);
IkReal x2906=(sj5*x2898);
evalcond[0]=((((-1.0)*x2901*x2903))+((r21*x2905))+((r22*x2898)));
evalcond[1]=((((-1.0)*x2902*x2903))+cj0+((r12*x2898))+((r11*x2905)));
evalcond[2]=((((-1.0)*x2901*x2904))+((r21*x2906))+(((-1.0)*r22*x2903)));
evalcond[3]=((((-1.0)*x2900*x2903))+((r01*x2905))+(((-1.0)*x2899))+((r02*x2898)));
evalcond[4]=((((-1.0)*r02*x2903))+(((-1.0)*x2900*x2904))+((r01*x2906))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2902*x2904))+(((-1.0)*x2899))+(((-1.0)*r12*x2903))+((r11*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2907.value)+(((1.5707963267949)*(x2908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2909=IKcos(j4);
IkReal x2910=IKsin(j4);
IkReal x2911=((1.0)*sj0);
IkReal x2912=(cj5*r00);
IkReal x2913=(cj5*r20);
IkReal x2914=(cj5*r10);
IkReal x2915=((1.0)*x2909);
IkReal x2916=((1.0)*x2910);
IkReal x2917=(sj5*x2909);
IkReal x2918=(sj5*x2910);
evalcond[0]=((((-1.0)*x2913*x2915))+((r21*x2917))+((r22*x2910)));
evalcond[1]=(((r11*x2917))+((r12*x2910))+cj0+(((-1.0)*x2914*x2915)));
evalcond[2]=((((-1.0)*x2913*x2916))+((r21*x2918))+(((-1.0)*r22*x2915)));
evalcond[3]=(((r01*x2917))+(((-1.0)*x2912*x2915))+((r02*x2910))+(((-1.0)*x2911)));
evalcond[4]=(((r01*x2918))+(((-1.0)*x2912*x2916))+(((-1.0)*r02*x2915))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x2918))+(((-1.0)*r12*x2915))+(((-1.0)*x2914*x2916))+(((-1.0)*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-8.69565217391304)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.69565217391304)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.69565217391304)*px))+IKsqr(((8.69565217391304)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-8.69565217391304)*px), ((8.69565217391304)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.115)*(IKsin(j0)))));
evalcond[1]=((((0.115)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2919=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2919;
j4eval[1]=IKsign(x2919);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2920=cj5*cj5;
IkReal x2921=(r11*r21);
IkReal x2922=((1.0)*r20);
IkReal x2923=(cj5*sj5);
IkReal x2924=(((r11*r20*x2923))+(((-1.0)*r12*r22))+((r10*r21*x2923))+(((-1.0)*r10*x2920*x2922))+((x2920*x2921))+(((-1.0)*x2921)));
j4eval[0]=x2924;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2922)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2925=cj5*cj5;
IkReal x2926=((1.0)*r20);
IkReal x2927=(r01*r21);
IkReal x2928=(r21*sj5);
IkReal x2929=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x2925*x2927))+(((-1.0)*x2927))+(((-1.0)*r00*x2925*x2926))+((cj5*r00*x2928)));
j4eval[0]=x2929;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x2926))+((cj0*x2928)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=cj5*cj5;
IkReal x2931=((1.0)*r20);
IkReal x2932=(r01*r21);
IkReal x2933=(r21*sj5);
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x2933))+((x2930*x2932))+(((-1.0)*x2932))+(((-1.0)*r00*x2930*x2931)))),-1);
if(!x2934.valid){
continue;
}
CheckValue<IkReal> x2935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x2931))+((cj0*x2933)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2934.value)))+(x2935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2936=IKcos(j4);
IkReal x2937=IKsin(j4);
IkReal x2938=(cj5*r00);
IkReal x2939=(cj5*r20);
IkReal x2940=(cj5*r10);
IkReal x2941=(r21*sj5);
IkReal x2942=((1.0)*x2936);
IkReal x2943=((1.0)*x2937);
IkReal x2944=(sj5*x2936);
IkReal x2945=(sj5*x2937);
evalcond[0]=((((-1.0)*x2939*x2942))+((x2936*x2941))+((r22*x2937)));
evalcond[1]=((((-1.0)*x2940*x2942))+cj0+((r11*x2944))+((r12*x2937)));
evalcond[2]=((((-1.0)*x2939*x2943))+(((-1.0)*r22*x2942))+((x2937*x2941)));
evalcond[3]=(cj0+(((-1.0)*r02*x2942))+((r01*x2945))+(((-1.0)*x2938*x2943)));
evalcond[4]=((((-1.0)*x2940*x2943))+(((-1.0)*r12*x2942))+sj0+((r11*x2945)));
evalcond[5]=(((r02*x2937))+(((-1.0)*sj0))+((r01*x2944))+(((-1.0)*x2938*x2942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2946=cj5*cj5;
IkReal x2947=(r11*r21);
IkReal x2948=((1.0)*r20);
IkReal x2949=(cj5*sj5);
CheckValue<IkReal> x2950 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x2948))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2950.valid){
continue;
}
CheckValue<IkReal> x2951=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2947))+((x2946*x2947))+((r10*r21*x2949))+(((-1.0)*r12*r22))+(((-1.0)*r10*x2946*x2948))+((r11*r20*x2949)))),-1);
if(!x2951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2950.value)+(((1.5707963267949)*(x2951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2952=IKcos(j4);
IkReal x2953=IKsin(j4);
IkReal x2954=(cj5*r00);
IkReal x2955=(cj5*r20);
IkReal x2956=(cj5*r10);
IkReal x2957=(r21*sj5);
IkReal x2958=((1.0)*x2952);
IkReal x2959=((1.0)*x2953);
IkReal x2960=(sj5*x2952);
IkReal x2961=(sj5*x2953);
evalcond[0]=(((r22*x2953))+(((-1.0)*x2955*x2958))+((x2952*x2957)));
evalcond[1]=(cj0+((r11*x2960))+(((-1.0)*x2956*x2958))+((r12*x2953)));
evalcond[2]=((((-1.0)*x2955*x2959))+((x2953*x2957))+(((-1.0)*r22*x2958)));
evalcond[3]=((((-1.0)*r02*x2958))+cj0+(((-1.0)*x2954*x2959))+((r01*x2961)));
evalcond[4]=(sj0+((r11*x2961))+(((-1.0)*x2956*x2959))+(((-1.0)*r12*x2958)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x2954*x2958))+((r01*x2960))+((r02*x2953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2962.value)+(((1.5707963267949)*(x2963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2964=IKcos(j4);
IkReal x2965=IKsin(j4);
IkReal x2966=(cj5*r00);
IkReal x2967=(cj5*r20);
IkReal x2968=(cj5*r10);
IkReal x2969=(r21*sj5);
IkReal x2970=((1.0)*x2964);
IkReal x2971=((1.0)*x2965);
IkReal x2972=(sj5*x2964);
IkReal x2973=(sj5*x2965);
evalcond[0]=(((r22*x2965))+(((-1.0)*x2967*x2970))+((x2964*x2969)));
evalcond[1]=(cj0+(((-1.0)*x2968*x2970))+((r11*x2972))+((r12*x2965)));
evalcond[2]=(((x2965*x2969))+(((-1.0)*r22*x2970))+(((-1.0)*x2967*x2971)));
evalcond[3]=(cj0+(((-1.0)*r02*x2970))+((r01*x2973))+(((-1.0)*x2966*x2971)));
evalcond[4]=(sj0+(((-1.0)*r12*x2970))+(((-1.0)*x2968*x2971))+((r11*x2973)));
evalcond[5]=((((-1.0)*sj0))+((r02*x2965))+((r01*x2972))+(((-1.0)*x2966*x2970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.17555422408628)*px))+(((1.37807070101857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((-3.17555422408628)*px))+(((1.37807070101857)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((-3.17555422408628)*px))+(((1.37807070101857)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2974=IKcos(j0);
IkReal x2975=IKsin(j0);
evalcond[0]=((((-0.265)*x2974))+(((-0.115)*x2975))+(((-1.0)*px)));
evalcond[1]=((((-0.265)*x2975))+(((0.115)*x2974))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2976=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2976;
j4eval[1]=IKsign(x2976);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2977=cj5*cj5;
IkReal x2978=(r11*r21);
IkReal x2979=((1.0)*r20);
IkReal x2980=(cj5*sj5);
IkReal x2981=(((x2977*x2978))+(((-1.0)*x2978))+(((-1.0)*r12*r22))+(((-1.0)*r10*x2977*x2979))+((r10*r21*x2980))+((r11*r20*x2980)));
j4eval[0]=x2981;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x2979))))));
j4eval[2]=IKsign(x2981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x2982=cj5*cj5;
IkReal x2983=((1.0)*r20);
IkReal x2984=(r01*r21);
IkReal x2985=(r21*sj5);
IkReal x2986=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x2982*x2983))+(((-1.0)*r02*r22))+((cj5*r00*x2985))+(((-1.0)*x2984))+((x2982*x2984)));
j4eval[0]=x2986;
j4eval[1]=((IKabs((((cj0*x2985))+(((-1.0)*cj0*cj5*x2983)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2987=cj5*cj5;
IkReal x2988=((1.0)*r20);
IkReal x2989=(r01*r21);
IkReal x2990=(r21*sj5);
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal((((cj0*x2990))+(((-1.0)*cj0*cj5*x2988)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
CheckValue<IkReal> x2992=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x2987*x2988))+(((-1.0)*r02*r22))+(((-1.0)*x2989))+((x2987*x2989))+((cj5*r00*x2990)))),-1);
if(!x2992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2991.value)+(((1.5707963267949)*(x2992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2993=IKcos(j4);
IkReal x2994=IKsin(j4);
IkReal x2995=(cj5*r00);
IkReal x2996=(cj5*r20);
IkReal x2997=(cj5*r10);
IkReal x2998=(r21*sj5);
IkReal x2999=((1.0)*x2993);
IkReal x3000=((1.0)*x2994);
IkReal x3001=(sj5*x2993);
IkReal x3002=(sj5*x2994);
evalcond[0]=((((-1.0)*x2996*x2999))+((x2993*x2998))+((r22*x2994)));
evalcond[1]=(cj0+((r12*x2994))+(((-1.0)*x2997*x2999))+((r11*x3001)));
evalcond[2]=((((-1.0)*r22*x2999))+(((-1.0)*x2996*x3000))+((x2994*x2998)));
evalcond[3]=(((r01*x3002))+cj0+(((-1.0)*x2995*x3000))+(((-1.0)*r02*x2999)));
evalcond[4]=((((-1.0)*x2997*x3000))+sj0+(((-1.0)*r12*x2999))+((r11*x3002)));
evalcond[5]=(((r01*x3001))+(((-1.0)*x2995*x2999))+(((-1.0)*sj0))+((r02*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=cj5*cj5;
IkReal x3004=(r11*r21);
IkReal x3005=((1.0)*r20);
IkReal x3006=(cj5*sj5);
CheckValue<IkReal> x3007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3007.valid){
continue;
}
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3004))+((r10*r21*x3006))+(((-1.0)*r12*r22))+((r11*r20*x3006))+((x3003*x3004))+(((-1.0)*r10*x3003*x3005)))),-1);
if(!x3008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3007.value)+(((1.5707963267949)*(x3008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3009=IKcos(j4);
IkReal x3010=IKsin(j4);
IkReal x3011=(cj5*r00);
IkReal x3012=(cj5*r20);
IkReal x3013=(cj5*r10);
IkReal x3014=(r21*sj5);
IkReal x3015=((1.0)*x3009);
IkReal x3016=((1.0)*x3010);
IkReal x3017=(sj5*x3009);
IkReal x3018=(sj5*x3010);
evalcond[0]=(((x3009*x3014))+((r22*x3010))+(((-1.0)*x3012*x3015)));
evalcond[1]=(cj0+((r12*x3010))+((r11*x3017))+(((-1.0)*x3013*x3015)));
evalcond[2]=(((x3010*x3014))+(((-1.0)*r22*x3015))+(((-1.0)*x3012*x3016)));
evalcond[3]=(((r01*x3018))+cj0+(((-1.0)*r02*x3015))+(((-1.0)*x3011*x3016)));
evalcond[4]=(sj0+(((-1.0)*r12*x3015))+((r11*x3018))+(((-1.0)*x3013*x3016)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3017))+(((-1.0)*x3011*x3015))+((r02*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3019 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3019.value)+(((1.5707963267949)*(x3020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3021=IKcos(j4);
IkReal x3022=IKsin(j4);
IkReal x3023=(cj5*r00);
IkReal x3024=(cj5*r20);
IkReal x3025=(cj5*r10);
IkReal x3026=(r21*sj5);
IkReal x3027=((1.0)*x3021);
IkReal x3028=((1.0)*x3022);
IkReal x3029=(sj5*x3021);
IkReal x3030=(sj5*x3022);
evalcond[0]=(((x3021*x3026))+((r22*x3022))+(((-1.0)*x3024*x3027)));
evalcond[1]=(((r12*x3022))+((r11*x3029))+cj0+(((-1.0)*x3025*x3027)));
evalcond[2]=((((-1.0)*x3024*x3028))+(((-1.0)*r22*x3027))+((x3022*x3026)));
evalcond[3]=(cj0+((r01*x3030))+(((-1.0)*x3023*x3028))+(((-1.0)*r02*x3027)));
evalcond[4]=((((-1.0)*r12*x3027))+sj0+((r11*x3030))+(((-1.0)*x3025*x3028)));
evalcond[5]=((((-1.0)*sj0))+((r02*x3022))+(((-1.0)*x3023*x3027))+((r01*x3029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-3.17555422408628)*py))+(((-1.37807070101857)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.17555422408628)*px))+(((1.37807070101857)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))))+IKsqr(((((-3.17555422408628)*px))+(((1.37807070101857)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.17555422408628)*py))+(((-1.37807070101857)*px))), ((((-3.17555422408628)*px))+(((1.37807070101857)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3031=IKcos(j0);
IkReal x3032=IKsin(j0);
evalcond[0]=((((-0.265)*x3031))+(((-1.0)*px))+(((-0.115)*x3032)));
evalcond[1]=((((-0.265)*x3032))+(((0.115)*x3031))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3033=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3033;
j4eval[1]=IKsign(x3033);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3034=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3034;
j4eval[1]=IKsign(x3034);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3035=cj5*cj5;
IkReal x3036=(r11*r21);
IkReal x3037=((1.0)*r20);
IkReal x3038=(cj5*sj5);
IkReal x3039=((((-1.0)*r12*r22))+((x3035*x3036))+(((-1.0)*x3036))+((r11*r20*x3038))+(((-1.0)*r10*x3035*x3037))+((r10*r21*x3038)));
j4eval[0]=x3039;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3037))))));
j4eval[2]=IKsign(x3039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3040=cj5*cj5;
IkReal x3041=(r11*r21);
IkReal x3042=((1.0)*r20);
IkReal x3043=(cj5*sj5);
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(IKsign((((r11*r20*x3043))+(((-1.0)*r12*r22))+((r10*r21*x3043))+((x3040*x3041))+(((-1.0)*r10*x3040*x3042))+(((-1.0)*x3041)))),-1);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x3042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3044.value)))+(x3045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3046=IKcos(j4);
IkReal x3047=IKsin(j4);
IkReal x3048=((1.0)*sj0);
IkReal x3049=(cj5*r00);
IkReal x3050=(cj5*r20);
IkReal x3051=(cj5*r10);
IkReal x3052=((1.0)*x3046);
IkReal x3053=((1.0)*x3047);
IkReal x3054=(sj5*x3046);
IkReal x3055=(sj5*x3047);
evalcond[0]=(((r22*x3047))+((r21*x3054))+(((-1.0)*x3050*x3052)));
evalcond[1]=(cj0+(((-1.0)*x3051*x3052))+((r11*x3054))+((r12*x3047)));
evalcond[2]=(((r21*x3055))+(((-1.0)*x3050*x3053))+(((-1.0)*r22*x3052)));
evalcond[3]=((((-1.0)*x3048))+((r01*x3054))+((r02*x3047))+(((-1.0)*x3049*x3052)));
evalcond[4]=(((r01*x3055))+(((-1.0)*r02*x3052))+(((-1.0)*x3049*x3053))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3051*x3053))+(((-1.0)*x3048))+((r11*x3055))+(((-1.0)*r12*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3056 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3056.valid){
continue;
}
CheckValue<IkReal> x3057=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3056.value)+(((1.5707963267949)*(x3057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3058=IKcos(j4);
IkReal x3059=IKsin(j4);
IkReal x3060=((1.0)*sj0);
IkReal x3061=(cj5*r00);
IkReal x3062=(cj5*r20);
IkReal x3063=(cj5*r10);
IkReal x3064=((1.0)*x3058);
IkReal x3065=((1.0)*x3059);
IkReal x3066=(sj5*x3058);
IkReal x3067=(sj5*x3059);
evalcond[0]=((((-1.0)*x3062*x3064))+((r22*x3059))+((r21*x3066)));
evalcond[1]=(cj0+(((-1.0)*x3063*x3064))+((r12*x3059))+((r11*x3066)));
evalcond[2]=((((-1.0)*r22*x3064))+(((-1.0)*x3062*x3065))+((r21*x3067)));
evalcond[3]=(((r02*x3059))+((r01*x3066))+(((-1.0)*x3061*x3064))+(((-1.0)*x3060)));
evalcond[4]=(((r01*x3067))+(((-1.0)*x3061*x3065))+(((-1.0)*r02*x3064))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3063*x3065))+(((-1.0)*r12*x3064))+(((-1.0)*x3060))+((r11*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3068 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3068.valid){
continue;
}
CheckValue<IkReal> x3069=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3068.value)+(((1.5707963267949)*(x3069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3070=IKcos(j4);
IkReal x3071=IKsin(j4);
IkReal x3072=((1.0)*sj0);
IkReal x3073=(cj5*r00);
IkReal x3074=(cj5*r20);
IkReal x3075=(cj5*r10);
IkReal x3076=((1.0)*x3070);
IkReal x3077=((1.0)*x3071);
IkReal x3078=(sj5*x3070);
IkReal x3079=(sj5*x3071);
evalcond[0]=((((-1.0)*x3074*x3076))+((r22*x3071))+((r21*x3078)));
evalcond[1]=(cj0+((r12*x3071))+((r11*x3078))+(((-1.0)*x3075*x3076)));
evalcond[2]=((((-1.0)*r22*x3076))+(((-1.0)*x3074*x3077))+((r21*x3079)));
evalcond[3]=(((r01*x3078))+(((-1.0)*x3073*x3076))+(((-1.0)*x3072))+((r02*x3071)));
evalcond[4]=(((r01*x3079))+(((-1.0)*r02*x3076))+(((-1.0)*x3073*x3077))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3072))+(((-1.0)*r12*x3076))+((r11*x3079))+(((-1.0)*x3075*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3080=(cj1*sj2);
IkReal x3081=(r00*sj5);
IkReal x3082=(cj2*sj1);
IkReal x3083=((200.0)*px);
IkReal x3084=((53.0)*sj1);
IkReal x3085=(cj5*r01);
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(((((23.0)*x3080))+(((23.0)*x3082))),-1);
if(!x3086.valid){
continue;
}
CheckValue<IkReal> x3087=IKPowWithIntegerCheck((x3080+x3082),-1);
if(!x3087.valid){
continue;
}
if( IKabs(((x3086.value)*(((((29.0)*x3080*x3081))+(((29.0)*x3080*x3085))+(((-1.0)*x3080*x3083))+((x3081*x3084))+(((29.0)*x3081*x3082))+(((-1.0)*x3082*x3083))+((x3084*x3085))+(((29.0)*x3082*x3085)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3087.value)*((x3085+x3081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3086.value)*(((((29.0)*x3080*x3081))+(((29.0)*x3080*x3085))+(((-1.0)*x3080*x3083))+((x3081*x3084))+(((29.0)*x3081*x3082))+(((-1.0)*x3082*x3083))+((x3084*x3085))+(((29.0)*x3082*x3085))))))+IKsqr(((x3087.value)*((x3085+x3081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3086.value)*(((((29.0)*x3080*x3081))+(((29.0)*x3080*x3085))+(((-1.0)*x3080*x3083))+((x3081*x3084))+(((29.0)*x3081*x3082))+(((-1.0)*x3082*x3083))+((x3084*x3085))+(((29.0)*x3082*x3085))))), ((x3087.value)*((x3085+x3081))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3088=IKcos(j0);
IkReal x3089=IKsin(j0);
IkReal x3090=(r00*sj5);
IkReal x3091=((0.24)*cj2);
IkReal x3092=(cj5*r11);
IkReal x3093=(r10*sj5);
IkReal x3094=(cj5*r01);
IkReal x3095=(cj1*sj2);
IkReal x3096=(sj1*x3089);
IkReal x3097=(sj1*x3088);
evalcond[0]=(((x3088*x3095))+((cj2*x3097))+(((-1.0)*x3094))+(((-1.0)*x3090)));
evalcond[1]=(((cj2*x3096))+((x3089*x3095))+(((-1.0)*x3093))+(((-1.0)*x3092)));
evalcond[2]=((((0.265)*x3097))+(((-1.0)*px))+((x3091*x3097))+(((-0.095)*x3090))+(((-0.095)*x3094))+(((-0.115)*x3089))+(((0.24)*x3088*x3095)));
evalcond[3]=((((0.265)*x3096))+(((-1.0)*py))+((x3091*x3096))+(((0.24)*x3089*x3095))+(((-0.095)*x3092))+(((-0.095)*x3093))+(((0.115)*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3098=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3098;
j4eval[1]=IKsign(x3098);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3099=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3099;
j4eval[1]=IKsign(x3099);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3100=((1.0)*sj0);
IkReal x3101=((1.0)*cj0);
IkReal x3102=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3102;
j4eval[1]=((IKabs(((((-1.0)*r12*x3100))+(((-1.0)*r02*x3101)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3101))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3100))))));
j4eval[2]=IKsign(x3102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3103=((-1.0)*r20);
IkReal x3105 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3105)==0){
continue;
}
IkReal x3104=pow(x3105,-0.5);
CheckValue<IkReal> x3106 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3103),IKFAST_ATAN2_MAGTHRESH);
if(!x3106.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3106.value));
IkReal gconst97=(r21*x3104);
IkReal gconst98=(x3103*x3104);
CheckValue<IkReal> x3107 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3107.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3107.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3108=((-1.0)*r20);
IkReal x3109=x3104;
CheckValue<IkReal> x3111 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3108),IKFAST_ATAN2_MAGTHRESH);
if(!x3111.valid){
continue;
}
IkReal x3110=((-1.0)*(x3111.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3110;
IkReal gconst96=x3110;
IkReal gconst97=(r21*x3109);
IkReal gconst98=(x3108*x3109);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3112=((-1.0)*r20);
IkReal x3113=x3104;
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3112),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
IkReal x3114=((-1.0)*(x3115.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3114;
IkReal gconst96=x3114;
IkReal gconst97=(r21*x3113);
IkReal gconst98=(x3112*x3113);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3116=((-1.0)*r20);
IkReal x3117=x3104;
CheckValue<IkReal> x3119 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3116),IKFAST_ATAN2_MAGTHRESH);
if(!x3119.valid){
continue;
}
IkReal x3118=((-1.0)*(x3119.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3118;
IkReal gconst96=x3118;
IkReal gconst97=(r21*x3117);
IkReal gconst98=(x3116*x3117);
IkReal x3120=((1.0)*(r22*r22));
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3120))),-1);
if(!x3124.valid){
continue;
}
IkReal x3121=x3124.value;
IkReal x3122=((1.0)*x3121);
IkReal x3123=((((-1.0)*x3122*(r20*r20*r20*r20)))+(((-2.0)*x3121*(r20*r20)*(r21*r21)))+(((-1.0)*x3122*(r21*r21*r21*r21)))+(((-1.0)*x3120)));
j4eval[0]=x3123;
j4eval[1]=IKsign(x3123);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3125=(cj2*sj1);
IkReal x3126=(gconst98*r20);
IkReal x3127=(cj1*sj2);
IkReal x3128=((1.0)*gconst97*r21);
CheckValue<IkReal> x3129=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3126*x3126)))+(((2.0)*gconst97*r21*x3126))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x3128)))),-1);
if(!x3129.valid){
continue;
}
CheckValue<IkReal> x3130 = IKatan2WithCheck(IkReal(((((-1.0)*x3125*x3128))+((x3125*x3126))+((x3126*x3127))+(((-1.0)*x3127*x3128)))),IkReal((((r22*x3127))+((r22*x3125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3129.value)))+(x3130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3131=IKcos(j4);
IkReal x3132=IKsin(j4);
IkReal x3133=(gconst98*r10);
IkReal x3134=(gconst97*r21);
IkReal x3135=(gconst98*r20);
IkReal x3136=(cj1*cj2);
IkReal x3137=((1.0)*sj1);
IkReal x3138=(gconst98*r00);
IkReal x3139=((1.0)*x3131);
IkReal x3140=((1.0)*x3132);
IkReal x3141=(gconst97*x3132);
IkReal x3142=(gconst97*x3131);
evalcond[0]=(((x3131*x3134))+((r22*x3132))+(((-1.0)*x3135*x3139)));
evalcond[1]=(cj0+(((-1.0)*x3133*x3139))+((r11*x3142))+((r12*x3132)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3138*x3139))+((r01*x3142))+((r02*x3132)));
evalcond[3]=(((x3132*x3134))+(((-1.0)*cj1*sj2))+(((-1.0)*x3135*x3140))+(((-1.0)*cj2*x3137))+(((-1.0)*r22*x3139)));
evalcond[4]=((((-1.0)*r02*x3139))+(((-1.0)*cj0*sj2*x3137))+((r01*x3141))+(((-1.0)*x3138*x3140))+((cj0*x3136)));
evalcond[5]=(((r11*x3141))+(((-1.0)*r12*x3139))+(((-1.0)*sj0*sj2*x3137))+(((-1.0)*x3133*x3140))+((sj0*x3136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3143 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3143.valid){
continue;
}
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3143.value)+(((1.5707963267949)*(x3144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3145=IKcos(j4);
IkReal x3146=IKsin(j4);
IkReal x3147=(gconst98*r10);
IkReal x3148=(gconst97*r21);
IkReal x3149=(gconst98*r20);
IkReal x3150=(cj1*cj2);
IkReal x3151=((1.0)*sj1);
IkReal x3152=(gconst98*r00);
IkReal x3153=((1.0)*x3145);
IkReal x3154=((1.0)*x3146);
IkReal x3155=(gconst97*x3146);
IkReal x3156=(gconst97*x3145);
evalcond[0]=(((x3145*x3148))+((r22*x3146))+(((-1.0)*x3149*x3153)));
evalcond[1]=(cj0+((r12*x3146))+((r11*x3156))+(((-1.0)*x3147*x3153)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3146))+((r01*x3156))+(((-1.0)*x3152*x3153)));
evalcond[3]=((((-1.0)*r22*x3153))+((x3146*x3148))+(((-1.0)*cj1*sj2))+(((-1.0)*x3149*x3154))+(((-1.0)*cj2*x3151)));
evalcond[4]=(((cj0*x3150))+((r01*x3155))+(((-1.0)*r02*x3153))+(((-1.0)*x3152*x3154))+(((-1.0)*cj0*sj2*x3151)));
evalcond[5]=(((r11*x3155))+(((-1.0)*sj0*sj2*x3151))+((sj0*x3150))+(((-1.0)*r12*x3153))+(((-1.0)*x3147*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3157.value)+(((1.5707963267949)*(x3158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3159=IKcos(j4);
IkReal x3160=IKsin(j4);
IkReal x3161=(gconst98*r10);
IkReal x3162=(gconst97*r21);
IkReal x3163=(gconst98*r20);
IkReal x3164=(cj1*cj2);
IkReal x3165=((1.0)*sj1);
IkReal x3166=(gconst98*r00);
IkReal x3167=((1.0)*x3159);
IkReal x3168=((1.0)*x3160);
IkReal x3169=(gconst97*x3160);
IkReal x3170=(gconst97*x3159);
evalcond[0]=(((r22*x3160))+(((-1.0)*x3163*x3167))+((x3159*x3162)));
evalcond[1]=(((r11*x3170))+(((-1.0)*x3161*x3167))+cj0+((r12*x3160)));
evalcond[2]=(((r02*x3160))+(((-1.0)*sj0))+(((-1.0)*x3166*x3167))+((r01*x3170)));
evalcond[3]=((((-1.0)*x3163*x3168))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3165))+((x3160*x3162))+(((-1.0)*r22*x3167)));
evalcond[4]=(((cj0*x3164))+((r01*x3169))+(((-1.0)*x3166*x3168))+(((-1.0)*r02*x3167))+(((-1.0)*cj0*sj2*x3165)));
evalcond[5]=((((-1.0)*r12*x3167))+(((-1.0)*x3161*x3168))+((r11*x3169))+(((-1.0)*sj0*sj2*x3165))+((sj0*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3171=((-1.0)*r21);
IkReal x3173 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3173)==0){
continue;
}
IkReal x3172=pow(x3173,-0.5);
CheckValue<IkReal> x3174 = IKatan2WithCheck(IkReal(x3171),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3174.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3174.value))));
IkReal gconst100=(x3171*x3172);
IkReal gconst101=((1.0)*r20*x3172);
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3175.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3176=((-1.0)*r21);
CheckValue<IkReal> x3179 = IKatan2WithCheck(IkReal(x3176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3179.valid){
continue;
}
IkReal x3177=((1.0)*(x3179.value));
IkReal x3178=x3172;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3177)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3177)));
IkReal gconst100=(x3176*x3178);
IkReal gconst101=((1.0)*r20*x3178);
IkReal x3180=r22*r22;
IkReal x3181=((1.0)*x3180);
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(((-1.0)+x3180),-1);
if(!x3185.valid){
continue;
}
IkReal x3182=x3185.value;
if((((1.0)+(((-1.0)*x3181)))) < -0.00001)
continue;
IkReal x3183=IKsqrt(((1.0)+(((-1.0)*x3181))));
IkReal x3184=(cj0*x3182*x3183);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3184+(((-1.0)*x3181*x3184))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3186=((-1.0)*r21);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal(x3186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
IkReal x3187=((1.0)*(x3189.value));
IkReal x3188=x3172;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3187)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3187)));
IkReal gconst100=(x3186*x3188);
IkReal gconst101=((1.0)*r20*x3188);
IkReal x3190=r22*r22;
IkReal x3191=((1.0)*x3190);
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(((-1.0)+x3190),-1);
if(!x3195.valid){
continue;
}
IkReal x3192=x3195.value;
if((((1.0)+(((-1.0)*x3191)))) < -0.00001)
continue;
IkReal x3193=IKsqrt(((1.0)+(((-1.0)*x3191))));
IkReal x3194=(sj0*x3192*x3193);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3194+(((-1.0)*x3191*x3194))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3196=((-1.0)*r21);
CheckValue<IkReal> x3199 = IKatan2WithCheck(IkReal(x3196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3199.valid){
continue;
}
IkReal x3197=((1.0)*(x3199.value));
IkReal x3198=x3172;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3197)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3197)));
IkReal gconst100=(x3196*x3198);
IkReal gconst101=((1.0)*r20*x3198);
IkReal x3200=r22*r22;
IkReal x3201=((1.0)*r12*sj0);
IkReal x3202=((1.0)*cj0*r02);
CheckValue<IkReal> x3206=IKPowWithIntegerCheck(((-1.0)+x3200),-1);
if(!x3206.valid){
continue;
}
IkReal x3203=x3206.value;
if((((1.0)+(((-1.0)*x3200)))) < -0.00001)
continue;
IkReal x3204=IKsqrt(((1.0)+(((-1.0)*x3200))));
IkReal x3205=(r22*x3203*x3204);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3202))+(((-1.0)*x3201)))))+(IKabs(((((-1.0)*x3202*x3205))+(((-1.0)*x3201*x3205))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3207=((1.0)*sj0);
IkReal x3208=((1.0)*cj0);
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210 = IKatan2WithCheck(IkReal((((cj0*gconst100*r01))+(((-1.0)*gconst101*r10*x3207))+(((-1.0)*gconst101*r00*x3208))+((gconst100*r11*sj0)))),IkReal(((((-1.0)*r02*x3208))+(((-1.0)*r12*x3207)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3209.value)))+(x3210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3211=IKcos(j4);
IkReal x3212=IKsin(j4);
IkReal x3213=(cj1*cj2);
IkReal x3214=(gconst101*r20);
IkReal x3215=(gconst101*r10);
IkReal x3216=((1.0)*sj2);
IkReal x3217=(gconst101*r00);
IkReal x3218=((1.0)*x3211);
IkReal x3219=((1.0)*x3212);
IkReal x3220=(gconst100*x3212);
IkReal x3221=(gconst100*x3211);
evalcond[0]=((((-1.0)*x3214*x3218))+((r22*x3212))+((r21*x3221)));
evalcond[1]=(cj0+(((-1.0)*x3215*x3218))+((r11*x3221))+((r12*x3212)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3217*x3218))+((r01*x3221))+((r02*x3212)));
evalcond[3]=((((-1.0)*x3214*x3219))+(((-1.0)*cj2*sj1))+((r21*x3220))+(((-1.0)*cj1*x3216))+(((-1.0)*r22*x3218)));
evalcond[4]=((((-1.0)*x3217*x3219))+((r01*x3220))+(((-1.0)*r02*x3218))+(((-1.0)*cj0*sj1*x3216))+((cj0*x3213)));
evalcond[5]=((((-1.0)*x3215*x3219))+((r11*x3220))+(((-1.0)*r12*x3218))+((sj0*x3213))+(((-1.0)*sj0*sj1*x3216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3222.value)+(((1.5707963267949)*(x3223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3224=IKcos(j4);
IkReal x3225=IKsin(j4);
IkReal x3226=(cj1*cj2);
IkReal x3227=(gconst101*r20);
IkReal x3228=(gconst101*r10);
IkReal x3229=((1.0)*sj2);
IkReal x3230=(gconst101*r00);
IkReal x3231=((1.0)*x3224);
IkReal x3232=((1.0)*x3225);
IkReal x3233=(gconst100*x3225);
IkReal x3234=(gconst100*x3224);
evalcond[0]=((((-1.0)*x3227*x3231))+((r22*x3225))+((r21*x3234)));
evalcond[1]=(((r12*x3225))+cj0+(((-1.0)*x3228*x3231))+((r11*x3234)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3225))+((r01*x3234))+(((-1.0)*x3230*x3231)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*x3227*x3232))+(((-1.0)*r22*x3231))+(((-1.0)*cj1*x3229))+((r21*x3233)));
evalcond[4]=((((-1.0)*r02*x3231))+(((-1.0)*cj0*sj1*x3229))+((cj0*x3226))+((r01*x3233))+(((-1.0)*x3230*x3232)));
evalcond[5]=((((-1.0)*sj0*sj1*x3229))+(((-1.0)*x3228*x3232))+((r11*x3233))+(((-1.0)*r12*x3231))+((sj0*x3226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3235 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3235.value)+(((1.5707963267949)*(x3236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=(cj1*cj2);
IkReal x3240=(gconst101*r20);
IkReal x3241=(gconst101*r10);
IkReal x3242=((1.0)*sj2);
IkReal x3243=(gconst101*r00);
IkReal x3244=((1.0)*x3237);
IkReal x3245=((1.0)*x3238);
IkReal x3246=(gconst100*x3238);
IkReal x3247=(gconst100*x3237);
evalcond[0]=(((r21*x3247))+((r22*x3238))+(((-1.0)*x3240*x3244)));
evalcond[1]=(cj0+((r12*x3238))+(((-1.0)*x3241*x3244))+((r11*x3247)));
evalcond[2]=(((r01*x3247))+(((-1.0)*x3243*x3244))+(((-1.0)*sj0))+((r02*x3238)));
evalcond[3]=(((r21*x3246))+(((-1.0)*x3240*x3245))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3242))+(((-1.0)*r22*x3244)));
evalcond[4]=(((r01*x3246))+(((-1.0)*x3243*x3245))+((cj0*x3239))+(((-1.0)*r02*x3244))+(((-1.0)*cj0*sj1*x3242)));
evalcond[5]=((((-1.0)*r12*x3244))+(((-1.0)*sj0*sj1*x3242))+(((-1.0)*x3241*x3245))+((r11*x3246))+((sj0*x3239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3249 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3249)==0){
continue;
}
IkReal x3248=pow(x3249,-0.5);
CheckValue<IkReal> x3250 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3250.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3250.value));
IkReal gconst103=((-1.0)*r11*x3248);
IkReal gconst104=(r10*x3248);
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3251.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
IkReal x3252=((-1.0)*(x3254.value));
IkReal x3253=x3248;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3252;
IkReal gconst102=x3252;
IkReal gconst103=((-1.0)*r11*x3253);
IkReal gconst104=(r10*x3253);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3255=((1.0)*sj0);
IkReal x3256=((1.0)*cj0);
CheckValue<IkReal> x3257 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r00*x3256))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r10*x3255))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r02*x3256))+(((-1.0)*r12*x3255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3257.valid){
continue;
}
CheckValue<IkReal> x3258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3257.value)+(((1.5707963267949)*(x3258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3259=IKcos(j4);
IkReal x3260=IKsin(j4);
IkReal x3261=(gconst103*r11);
IkReal x3262=(cj1*cj2);
IkReal x3263=((1.0)*sj1);
IkReal x3264=((1.0)*x3259);
IkReal x3265=(gconst103*x3259);
IkReal x3266=(gconst103*x3260);
IkReal x3267=((1.0)*gconst104*x3260);
evalcond[0]=(((r21*x3265))+(((-1.0)*gconst104*r20*x3264))+((r22*x3260)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x3264))+((r12*x3260))+((x3259*x3261)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3265))+((r02*x3260))+(((-1.0)*gconst104*r00*x3264)));
evalcond[3]=(((r21*x3266))+(((-1.0)*r20*x3267))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3263))+(((-1.0)*r22*x3264)));
evalcond[4]=(((r01*x3266))+(((-1.0)*cj0*sj2*x3263))+(((-1.0)*r00*x3267))+(((-1.0)*r02*x3264))+((cj0*x3262)));
evalcond[5]=(((sj0*x3262))+(((-1.0)*r12*x3264))+(((-1.0)*r10*x3267))+(((-1.0)*sj0*sj2*x3263))+((x3260*x3261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3268.value)))+(x3269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKcos(j4);
IkReal x3271=IKsin(j4);
IkReal x3272=(gconst103*r11);
IkReal x3273=(cj1*cj2);
IkReal x3274=((1.0)*sj1);
IkReal x3275=((1.0)*x3270);
IkReal x3276=(gconst103*x3270);
IkReal x3277=(gconst103*x3271);
IkReal x3278=((1.0)*gconst104*x3271);
evalcond[0]=((((-1.0)*gconst104*r20*x3275))+((r21*x3276))+((r22*x3271)));
evalcond[1]=(cj0+(((-1.0)*gconst104*r10*x3275))+((r12*x3271))+((x3270*x3272)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3276))+((r02*x3271))+(((-1.0)*gconst104*r00*x3275)));
evalcond[3]=(((r21*x3277))+(((-1.0)*r20*x3278))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3274))+(((-1.0)*r22*x3275)));
evalcond[4]=(((cj0*x3273))+((r01*x3277))+(((-1.0)*cj0*sj2*x3274))+(((-1.0)*r00*x3278))+(((-1.0)*r02*x3275)));
evalcond[5]=((((-1.0)*r12*x3275))+((sj0*x3273))+(((-1.0)*r10*x3278))+(((-1.0)*sj0*sj2*x3274))+((x3271*x3272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3280 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3280)==0){
continue;
}
IkReal x3279=pow(x3280,-0.5);
CheckValue<IkReal> x3281 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3281.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3281.value))));
IkReal gconst106=((1.0)*r11*x3279);
IkReal gconst107=((-1.0)*r10*x3279);
CheckValue<IkReal> x3282 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3282.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3282.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3285 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3285.valid){
continue;
}
IkReal x3283=((1.0)*(x3285.value));
IkReal x3284=x3279;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3283)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3283)));
IkReal gconst106=((1.0)*r11*x3284);
IkReal gconst107=((-1.0)*r10*x3284);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
IkReal x3286=((1.0)*(x3288.value));
IkReal x3287=x3279;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3286)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3286)));
IkReal gconst106=((1.0)*r11*x3287);
IkReal gconst107=((-1.0)*r10*x3287);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
IkReal x3289=((1.0)*(x3291.value));
IkReal x3290=x3279;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3289)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3289)));
IkReal gconst106=((1.0)*r11*x3290);
IkReal gconst107=((-1.0)*r10*x3290);
IkReal x3292=r12*r12;
IkReal x3293=((1.0)*sj0);
IkReal x3294=(cj0*r02);
IkReal x3295=x3279;
j4eval[0]=((IKabs((((sj0*x3292*x3295))+(((-1.0)*x3293*x3295))+((r12*x3294*x3295)))))+(IKabs(((((-1.0)*r12*x3293))+(((-1.0)*x3294))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=((1.0)*sj0);
IkReal x3297=((1.0)*gconst107);
CheckValue<IkReal> x3298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3297))+(((-1.0)*gconst106*r20)))),-1);
if(!x3298.valid){
continue;
}
CheckValue<IkReal> x3299 = IKatan2WithCheck(IkReal((((cj0*gconst106*r01))+(((-1.0)*gconst107*r10*x3296))+((gconst106*r11*sj0))+(((-1.0)*cj0*r00*x3297)))),IkReal(((((-1.0)*r12*x3296))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3298.value)))+(x3299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3300=IKcos(j4);
IkReal x3301=IKsin(j4);
IkReal x3302=(cj1*cj2);
IkReal x3303=(gconst107*r10);
IkReal x3304=(gconst107*r00);
IkReal x3305=(gconst107*r20);
IkReal x3306=((1.0)*sj1);
IkReal x3307=((1.0)*x3300);
IkReal x3308=(gconst106*x3300);
IkReal x3309=(gconst106*x3301);
IkReal x3310=((1.0)*x3301);
evalcond[0]=((((-1.0)*x3305*x3307))+((r21*x3308))+((r22*x3301)));
evalcond[1]=(cj0+((r11*x3308))+((r12*x3301))+(((-1.0)*x3303*x3307)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3304*x3307))+((r02*x3301))+((r01*x3308)));
evalcond[3]=((((-1.0)*x3305*x3310))+((r21*x3309))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3307))+(((-1.0)*cj2*x3306)));
evalcond[4]=((((-1.0)*x3304*x3310))+((cj0*x3302))+(((-1.0)*r02*x3307))+(((-1.0)*cj0*sj2*x3306))+((r01*x3309)));
evalcond[5]=(((r11*x3309))+(((-1.0)*sj0*sj2*x3306))+(((-1.0)*r12*x3307))+(((-1.0)*x3303*x3310))+((sj0*x3302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3311=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3311.valid){
continue;
}
CheckValue<IkReal> x3312 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3311.value)))+(x3312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3313=IKcos(j4);
IkReal x3314=IKsin(j4);
IkReal x3315=(cj1*cj2);
IkReal x3316=(gconst107*r10);
IkReal x3317=(gconst107*r00);
IkReal x3318=(gconst107*r20);
IkReal x3319=((1.0)*sj1);
IkReal x3320=((1.0)*x3313);
IkReal x3321=(gconst106*x3313);
IkReal x3322=(gconst106*x3314);
IkReal x3323=((1.0)*x3314);
evalcond[0]=(((r22*x3314))+((r21*x3321))+(((-1.0)*x3318*x3320)));
evalcond[1]=(cj0+((r11*x3321))+((r12*x3314))+(((-1.0)*x3316*x3320)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3321))+((r02*x3314))+(((-1.0)*x3317*x3320)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3319))+((r21*x3322))+(((-1.0)*x3318*x3323))+(((-1.0)*r22*x3320)));
evalcond[4]=((((-1.0)*r02*x3320))+((r01*x3322))+((cj0*x3315))+(((-1.0)*x3317*x3323))+(((-1.0)*cj0*sj2*x3319)));
evalcond[5]=(((r11*x3322))+(((-1.0)*sj0*sj2*x3319))+(((-1.0)*r12*x3320))+(((-1.0)*x3316*x3323))+((sj0*x3315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3324.value)))+(x3325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j4);
IkReal x3327=IKsin(j4);
IkReal x3328=(cj1*cj2);
IkReal x3329=(gconst107*r10);
IkReal x3330=(gconst107*r00);
IkReal x3331=(gconst107*r20);
IkReal x3332=((1.0)*sj1);
IkReal x3333=((1.0)*x3326);
IkReal x3334=(gconst106*x3326);
IkReal x3335=(gconst106*x3327);
IkReal x3336=((1.0)*x3327);
evalcond[0]=(((r22*x3327))+((r21*x3334))+(((-1.0)*x3331*x3333)));
evalcond[1]=(((r12*x3327))+cj0+((r11*x3334))+(((-1.0)*x3329*x3333)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3330*x3333))+((r01*x3334))+((r02*x3327)));
evalcond[3]=(((r21*x3335))+(((-1.0)*x3331*x3336))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3333))+(((-1.0)*cj2*x3332)));
evalcond[4]=((((-1.0)*x3330*x3336))+(((-1.0)*r02*x3333))+(((-1.0)*cj0*sj2*x3332))+((r01*x3335))+((cj0*x3328)));
evalcond[5]=(((sj0*x3328))+(((-1.0)*sj0*sj2*x3332))+((r11*x3335))+(((-1.0)*x3329*x3336))+(((-1.0)*r12*x3333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3337=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3337;
j4eval[1]=IKsign(x3337);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3338=((1.0)*cj5);
IkReal x3339=((((-1.0)*r21*x3338))+(((-1.0)*r20*sj5)));
j4eval[0]=x3339;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3338))))));
j4eval[2]=IKsign(x3339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3340=cj5*cj5;
IkReal x3341=r11*r11;
IkReal x3342=(cj5*r10);
IkReal x3343=(r11*sj5);
IkReal x3344=(((x3340*x3341))+(((-1.0)*x3341))+(((2.0)*x3342*x3343))+(((-1.0)*(r12*r12)))+(((-1.0)*x3340*(r10*r10))));
j4eval[0]=x3344;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3342))+x3343))));
j4eval[2]=IKsign(x3344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3345=cj5*cj5;
IkReal x3346=r11*r11;
IkReal x3347=(cj5*r10);
IkReal x3348=(r11*sj5);
CheckValue<IkReal> x3349=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3346))+(((2.0)*x3347*x3348))+(((-1.0)*x3345*(r10*r10)))+(((-1.0)*(r12*r12)))+((x3345*x3346)))),-1);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3347))+x3348)),IKFAST_ATAN2_MAGTHRESH);
if(!x3350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3349.value)))+(x3350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3351=IKcos(j4);
IkReal x3352=IKsin(j4);
IkReal x3353=(cj5*r00);
IkReal x3354=(cj5*r10);
IkReal x3355=((1.0)*sj1);
IkReal x3356=(cj5*r20);
IkReal x3357=((1.0)*x3351);
IkReal x3358=((1.0)*x3352);
IkReal x3359=(sj5*x3351);
IkReal x3360=(sj5*x3352);
evalcond[0]=((((-1.0)*x3356*x3357))+((r21*x3359))+((r22*x3352)));
evalcond[1]=(((r01*x3359))+(((-1.0)*x3353*x3357))+((r02*x3352)));
evalcond[2]=((1.0)+((r12*x3352))+((r11*x3359))+(((-1.0)*x3354*x3357)));
evalcond[3]=((((-1.0)*x3354*x3358))+(((-1.0)*r12*x3357))+((r11*x3360)));
evalcond[4]=((((-1.0)*r02*x3357))+((r01*x3360))+(((-1.0)*sj2*x3355))+(((-1.0)*x3353*x3358))+((cj1*cj2)));
evalcond[5]=(((r21*x3360))+(((-1.0)*cj1*sj2))+(((-1.0)*x3356*x3358))+(((-1.0)*cj2*x3355))+(((-1.0)*r22*x3357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3361=((1.0)*cj5);
CheckValue<IkReal> x3362 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x3361)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3362.valid){
continue;
}
CheckValue<IkReal> x3363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3361))+(((-1.0)*r20*sj5)))),-1);
if(!x3363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3362.value)+(((1.5707963267949)*(x3363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3364=IKcos(j4);
IkReal x3365=IKsin(j4);
IkReal x3366=(cj5*r00);
IkReal x3367=(cj5*r10);
IkReal x3368=((1.0)*sj1);
IkReal x3369=(cj5*r20);
IkReal x3370=((1.0)*x3364);
IkReal x3371=((1.0)*x3365);
IkReal x3372=(sj5*x3364);
IkReal x3373=(sj5*x3365);
evalcond[0]=(((r22*x3365))+((r21*x3372))+(((-1.0)*x3369*x3370)));
evalcond[1]=(((r01*x3372))+(((-1.0)*x3366*x3370))+((r02*x3365)));
evalcond[2]=((1.0)+(((-1.0)*x3367*x3370))+((r12*x3365))+((r11*x3372)));
evalcond[3]=((((-1.0)*x3367*x3371))+(((-1.0)*r12*x3370))+((r11*x3373)));
evalcond[4]=(((r01*x3373))+(((-1.0)*x3366*x3371))+(((-1.0)*r02*x3370))+((cj1*cj2))+(((-1.0)*sj2*x3368)));
evalcond[5]=((((-1.0)*r22*x3370))+(((-1.0)*cj2*x3368))+(((-1.0)*cj1*sj2))+((r21*x3373))+(((-1.0)*x3369*x3371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3374=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3374.value)))+(x3375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3376=IKcos(j4);
IkReal x3377=IKsin(j4);
IkReal x3378=(cj5*r00);
IkReal x3379=(cj5*r10);
IkReal x3380=((1.0)*sj1);
IkReal x3381=(cj5*r20);
IkReal x3382=((1.0)*x3376);
IkReal x3383=((1.0)*x3377);
IkReal x3384=(sj5*x3376);
IkReal x3385=(sj5*x3377);
evalcond[0]=(((r22*x3377))+(((-1.0)*x3381*x3382))+((r21*x3384)));
evalcond[1]=(((r01*x3384))+(((-1.0)*x3378*x3382))+((r02*x3377)));
evalcond[2]=((1.0)+((r12*x3377))+(((-1.0)*x3379*x3382))+((r11*x3384)));
evalcond[3]=((((-1.0)*x3379*x3383))+((r11*x3385))+(((-1.0)*r12*x3382)));
evalcond[4]=(((r01*x3385))+(((-1.0)*sj2*x3380))+(((-1.0)*x3378*x3383))+(((-1.0)*r02*x3382))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x3382))+(((-1.0)*x3381*x3383))+(((-1.0)*cj1*sj2))+((r21*x3385))+(((-1.0)*cj2*x3380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3386=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3386;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x3386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3387=((1.0)*cj5);
IkReal x3388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3387)));
j4eval[0]=x3388;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3387))))));
j4eval[2]=IKsign(x3388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3389=cj5*cj5;
IkReal x3390=r11*r11;
IkReal x3391=(r11*sj5);
IkReal x3392=(cj5*r10);
IkReal x3393=((r12*r12)+x3390+((x3389*(r10*r10)))+(((-2.0)*x3391*x3392))+(((-1.0)*x3389*x3390)));
j4eval[0]=x3393;
j4eval[1]=((IKabs(r12))+(IKabs((x3391+(((-1.0)*x3392))))));
j4eval[2]=IKsign(x3393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3394=cj5*cj5;
IkReal x3395=r11*r11;
IkReal x3396=(cj5*r10);
IkReal x3397=(r11*sj5);
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal(r12),IkReal((x3397+(((-1.0)*x3396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(IKsign(((r12*r12)+x3395+((x3394*(r10*r10)))+(((-1.0)*x3394*x3395))+(((-2.0)*x3396*x3397)))),-1);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3398.value)+(((1.5707963267949)*(x3399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKcos(j4);
IkReal x3401=IKsin(j4);
IkReal x3402=(cj5*r00);
IkReal x3403=(cj5*r10);
IkReal x3404=((1.0)*cj2);
IkReal x3405=(cj5*r20);
IkReal x3406=((1.0)*x3400);
IkReal x3407=((1.0)*x3401);
IkReal x3408=(sj5*x3400);
IkReal x3409=(sj5*x3401);
evalcond[0]=(((r22*x3401))+(((-1.0)*x3405*x3406))+((r21*x3408)));
evalcond[1]=(((r02*x3401))+(((-1.0)*x3402*x3406))+((r01*x3408)));
evalcond[2]=((-1.0)+((r11*x3408))+((r12*x3401))+(((-1.0)*x3403*x3406)));
evalcond[3]=(((r11*x3409))+(((-1.0)*r12*x3406))+(((-1.0)*x3403*x3407)));
evalcond[4]=((((-1.0)*x3402*x3407))+((sj1*sj2))+(((-1.0)*cj1*x3404))+(((-1.0)*r02*x3406))+((r01*x3409)));
evalcond[5]=((((-1.0)*x3405*x3407))+(((-1.0)*sj1*x3404))+(((-1.0)*cj1*sj2))+((r21*x3409))+(((-1.0)*r22*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3410=((1.0)*cj5);
CheckValue<IkReal> x3411 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3410)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3411.valid){
continue;
}
CheckValue<IkReal> x3412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3410)))),-1);
if(!x3412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3411.value)+(((1.5707963267949)*(x3412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3413=IKcos(j4);
IkReal x3414=IKsin(j4);
IkReal x3415=(cj5*r00);
IkReal x3416=(cj5*r10);
IkReal x3417=((1.0)*cj2);
IkReal x3418=(cj5*r20);
IkReal x3419=((1.0)*x3413);
IkReal x3420=((1.0)*x3414);
IkReal x3421=(sj5*x3413);
IkReal x3422=(sj5*x3414);
evalcond[0]=((((-1.0)*x3418*x3419))+((r22*x3414))+((r21*x3421)));
evalcond[1]=((((-1.0)*x3415*x3419))+((r02*x3414))+((r01*x3421)));
evalcond[2]=((-1.0)+((r12*x3414))+(((-1.0)*x3416*x3419))+((r11*x3421)));
evalcond[3]=((((-1.0)*x3416*x3420))+(((-1.0)*r12*x3419))+((r11*x3422)));
evalcond[4]=((((-1.0)*r02*x3419))+((sj1*sj2))+(((-1.0)*cj1*x3417))+(((-1.0)*x3415*x3420))+((r01*x3422)));
evalcond[5]=((((-1.0)*r22*x3419))+(((-1.0)*sj1*x3417))+(((-1.0)*cj1*sj2))+(((-1.0)*x3418*x3420))+((r21*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3423.valid){
continue;
}
CheckValue<IkReal> x3424 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3423.value)))+(x3424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3425=IKcos(j4);
IkReal x3426=IKsin(j4);
IkReal x3427=(cj5*r00);
IkReal x3428=(cj5*r10);
IkReal x3429=((1.0)*cj2);
IkReal x3430=(cj5*r20);
IkReal x3431=((1.0)*x3425);
IkReal x3432=((1.0)*x3426);
IkReal x3433=(sj5*x3425);
IkReal x3434=(sj5*x3426);
evalcond[0]=((((-1.0)*x3430*x3431))+((r21*x3433))+((r22*x3426)));
evalcond[1]=((((-1.0)*x3427*x3431))+((r01*x3433))+((r02*x3426)));
evalcond[2]=((-1.0)+(((-1.0)*x3428*x3431))+((r12*x3426))+((r11*x3433)));
evalcond[3]=((((-1.0)*x3428*x3432))+(((-1.0)*r12*x3431))+((r11*x3434)));
evalcond[4]=((((-1.0)*x3427*x3432))+((r01*x3434))+((sj1*sj2))+(((-1.0)*cj1*x3429))+(((-1.0)*r02*x3431)));
evalcond[5]=((((-1.0)*x3430*x3432))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3431))+(((-1.0)*sj1*x3429))+((r21*x3434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3436 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3436)==0){
continue;
}
IkReal x3435=pow(x3436,-0.5);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3437.value));
IkReal gconst109=((-1.0)*r01*x3435);
IkReal gconst110=(r00*x3435);
CheckValue<IkReal> x3438 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
IkReal x3439=((-1.0)*(x3441.value));
IkReal x3440=x3435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x3439;
IkReal gconst108=x3439;
IkReal gconst109=((-1.0)*r01*x3440);
IkReal gconst110=(r00*x3440);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3442=((1.0)*sj0);
IkReal x3443=((1.0)*gconst110);
CheckValue<IkReal> x3444=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x3443)))),-1);
if(!x3444.valid){
continue;
}
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x3443))+((gconst109*r11*sj0))+(((-1.0)*gconst110*r10*x3442)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3444.value)))+(x3445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3446=IKcos(j4);
IkReal x3447=IKsin(j4);
IkReal x3448=((1.0)*sj2);
IkReal x3449=(cj1*cj2);
IkReal x3450=(gconst109*r21);
IkReal x3451=((1.0)*x3446);
IkReal x3452=(gconst109*x3447);
IkReal x3453=(gconst109*x3446);
IkReal x3454=((1.0)*gconst110*x3447);
evalcond[0]=((((-1.0)*gconst110*r20*x3451))+((r22*x3447))+((x3446*x3450)));
evalcond[1]=(((r12*x3447))+cj0+(((-1.0)*gconst110*r10*x3451))+((r11*x3453)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3447))+(((-1.0)*gconst110*r00*x3451))+((r01*x3453)));
evalcond[3]=(((x3447*x3450))+(((-1.0)*cj2*sj1))+(((-1.0)*r20*x3454))+(((-1.0)*cj1*x3448))+(((-1.0)*r22*x3451)));
evalcond[4]=((((-1.0)*cj0*sj1*x3448))+((cj0*x3449))+(((-1.0)*r02*x3451))+((r01*x3452))+(((-1.0)*r00*x3454)));
evalcond[5]=(((sj0*x3449))+(((-1.0)*sj0*sj1*x3448))+(((-1.0)*r10*x3454))+(((-1.0)*r12*x3451))+((r11*x3452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x3455.valid){
continue;
}
CheckValue<IkReal> x3456 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3455.value)))+(x3456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3457=IKcos(j4);
IkReal x3458=IKsin(j4);
IkReal x3459=((1.0)*sj2);
IkReal x3460=(cj1*cj2);
IkReal x3461=(gconst109*r21);
IkReal x3462=((1.0)*x3457);
IkReal x3463=(gconst109*x3458);
IkReal x3464=(gconst109*x3457);
IkReal x3465=((1.0)*gconst110*x3458);
evalcond[0]=((((-1.0)*gconst110*r20*x3462))+((r22*x3458))+((x3457*x3461)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x3462))+((r12*x3458))+((r11*x3464)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst110*r00*x3462))+((r01*x3464))+((r02*x3458)));
evalcond[3]=((((-1.0)*r20*x3465))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3462))+(((-1.0)*cj1*x3459))+((x3458*x3461)));
evalcond[4]=((((-1.0)*r00*x3465))+(((-1.0)*r02*x3462))+((cj0*x3460))+((r01*x3463))+(((-1.0)*cj0*sj1*x3459)));
evalcond[5]=((((-1.0)*r10*x3465))+(((-1.0)*r12*x3462))+((sj0*x3460))+(((-1.0)*sj0*sj1*x3459))+((r11*x3463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3467 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3467)==0){
continue;
}
IkReal x3466=pow(x3467,-0.5);
CheckValue<IkReal> x3468 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3468.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3468.value))));
IkReal gconst112=((1.0)*r01*x3466);
IkReal gconst113=((-1.0)*r00*x3466);
CheckValue<IkReal> x3469 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3469.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3469.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3472 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3472.valid){
continue;
}
IkReal x3470=((1.0)*(x3472.value));
IkReal x3471=x3466;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3470)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3470)));
IkReal gconst112=((1.0)*r01*x3471);
IkReal gconst113=((-1.0)*r00*x3471);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
IkReal x3473=((1.0)*(x3475.value));
IkReal x3474=x3466;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3473)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3473)));
IkReal gconst112=((1.0)*r01*x3474);
IkReal gconst113=((-1.0)*r00*x3474);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
IkReal x3476=((1.0)*(x3478.value));
IkReal x3477=x3466;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3476)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3476)));
IkReal gconst112=((1.0)*r01*x3477);
IkReal gconst113=((-1.0)*r00*x3477);
IkReal x3479=r02*r02;
IkReal x3480=(r12*sj0);
IkReal x3481=((1.0)*cj0);
IkReal x3482=x3466;
j4eval[0]=((IKabs(((((-1.0)*r02*x3481))+(((-1.0)*x3480)))))+(IKabs((((cj0*x3479*x3482))+(((-1.0)*x3481*x3482))+((r02*x3480*x3482))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3483=((1.0)*sj0);
IkReal x3484=((1.0)*cj0);
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r10*x3483))+((gconst112*r11*sj0))+(((-1.0)*gconst113*r00*x3484)))),IkReal(((((-1.0)*r02*x3484))+(((-1.0)*r12*x3483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
CheckValue<IkReal> x3486=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x3486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3485.value)+(((1.5707963267949)*(x3486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3487=IKcos(j4);
IkReal x3488=IKsin(j4);
IkReal x3489=(cj1*cj2);
IkReal x3490=(gconst113*r20);
IkReal x3491=(gconst112*r21);
IkReal x3492=(gconst113*r00);
IkReal x3493=((1.0)*sj1);
IkReal x3494=(gconst113*r10);
IkReal x3495=((1.0)*x3487);
IkReal x3496=((1.0)*x3488);
IkReal x3497=(gconst112*x3487);
IkReal x3498=(gconst112*x3488);
evalcond[0]=((((-1.0)*x3490*x3495))+((x3487*x3491))+((r22*x3488)));
evalcond[1]=(cj0+(((-1.0)*x3494*x3495))+((r12*x3488))+((r11*x3497)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3497))+(((-1.0)*x3492*x3495))+((r02*x3488)));
evalcond[3]=((((-1.0)*cj2*x3493))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3495))+(((-1.0)*x3490*x3496))+((x3488*x3491)));
evalcond[4]=((((-1.0)*r02*x3495))+((r01*x3498))+(((-1.0)*cj0*sj2*x3493))+((cj0*x3489))+(((-1.0)*x3492*x3496)));
evalcond[5]=((((-1.0)*sj0*sj2*x3493))+(((-1.0)*r12*x3495))+(((-1.0)*x3494*x3496))+((sj0*x3489))+((r11*x3498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x3500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3499.value)+(((1.5707963267949)*(x3500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3501=IKcos(j4);
IkReal x3502=IKsin(j4);
IkReal x3503=(cj1*cj2);
IkReal x3504=(gconst113*r20);
IkReal x3505=(gconst112*r21);
IkReal x3506=(gconst113*r00);
IkReal x3507=((1.0)*sj1);
IkReal x3508=(gconst113*r10);
IkReal x3509=((1.0)*x3501);
IkReal x3510=((1.0)*x3502);
IkReal x3511=(gconst112*x3501);
IkReal x3512=(gconst112*x3502);
evalcond[0]=(((x3501*x3505))+((r22*x3502))+(((-1.0)*x3504*x3509)));
evalcond[1]=(cj0+(((-1.0)*x3508*x3509))+((r12*x3502))+((r11*x3511)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3506*x3509))+((r01*x3511))+((r02*x3502)));
evalcond[3]=((((-1.0)*cj2*x3507))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3509))+(((-1.0)*x3504*x3510))+((x3502*x3505)));
evalcond[4]=(((cj0*x3503))+(((-1.0)*x3506*x3510))+((r01*x3512))+(((-1.0)*cj0*sj2*x3507))+(((-1.0)*r02*x3509)));
evalcond[5]=((((-1.0)*r12*x3509))+(((-1.0)*x3508*x3510))+((r11*x3512))+((sj0*x3503))+(((-1.0)*sj0*sj2*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3513 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3513.valid){
continue;
}
CheckValue<IkReal> x3514=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3513.value)+(((1.5707963267949)*(x3514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3515=IKcos(j4);
IkReal x3516=IKsin(j4);
IkReal x3517=(cj1*cj2);
IkReal x3518=(gconst113*r20);
IkReal x3519=(gconst112*r21);
IkReal x3520=(gconst113*r00);
IkReal x3521=((1.0)*sj1);
IkReal x3522=(gconst113*r10);
IkReal x3523=((1.0)*x3515);
IkReal x3524=((1.0)*x3516);
IkReal x3525=(gconst112*x3515);
IkReal x3526=(gconst112*x3516);
evalcond[0]=(((r22*x3516))+((x3515*x3519))+(((-1.0)*x3518*x3523)));
evalcond[1]=((((-1.0)*x3522*x3523))+cj0+((r11*x3525))+((r12*x3516)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3525))+((r02*x3516))+(((-1.0)*x3520*x3523)));
evalcond[3]=((((-1.0)*cj2*x3521))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3523))+((x3516*x3519))+(((-1.0)*x3518*x3524)));
evalcond[4]=((((-1.0)*r02*x3523))+((r01*x3526))+((cj0*x3517))+(((-1.0)*cj0*sj2*x3521))+(((-1.0)*x3520*x3524)));
evalcond[5]=((((-1.0)*x3522*x3524))+(((-1.0)*sj0*sj2*x3521))+((r11*x3526))+((sj0*x3517))+(((-1.0)*r12*x3523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3527=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3527;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3528=((1.0)*cj5);
IkReal x3529=((((-1.0)*r21*x3528))+(((-1.0)*r20*sj5)));
j4eval[0]=x3529;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3528))+((r11*sj5))))));
j4eval[2]=IKsign(x3529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3530=cj5*cj5;
IkReal x3531=r01*r01;
IkReal x3532=(cj5*r00);
IkReal x3533=(r01*sj5);
IkReal x3534=(((x3530*(r00*r00)))+(((-1.0)*x3530*x3531))+x3531+(((-2.0)*x3532*x3533))+(r02*r02));
j4eval[0]=x3534;
j4eval[1]=IKsign(x3534);
j4eval[2]=((IKabs(r02))+(IKabs((x3533+(((-1.0)*x3532))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3535=cj5*cj5;
IkReal x3536=r01*r01;
IkReal x3537=(r01*sj5);
IkReal x3538=(cj5*r00);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3537*x3538))+(((-1.0)*x3535*x3536))+x3536+(r02*r02)+((x3535*(r00*r00))))),-1);
if(!x3539.valid){
continue;
}
CheckValue<IkReal> x3540 = IKatan2WithCheck(IkReal(r02),IkReal((x3537+(((-1.0)*x3538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3539.value)))+(x3540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3541=IKcos(j4);
IkReal x3542=IKsin(j4);
IkReal x3543=(cj5*r00);
IkReal x3544=(cj5*r10);
IkReal x3545=((1.0)*sj1);
IkReal x3546=(cj5*r20);
IkReal x3547=((1.0)*x3541);
IkReal x3548=((1.0)*x3542);
IkReal x3549=(sj5*x3541);
IkReal x3550=(sj5*x3542);
evalcond[0]=(((r21*x3549))+(((-1.0)*x3546*x3547))+((r22*x3542)));
evalcond[1]=(((r12*x3542))+((r11*x3549))+(((-1.0)*x3544*x3547)));
evalcond[2]=((-1.0)+((r02*x3542))+((r01*x3549))+(((-1.0)*x3543*x3547)));
evalcond[3]=((((-1.0)*r02*x3547))+((r01*x3550))+(((-1.0)*x3543*x3548)));
evalcond[4]=((((-1.0)*sj2*x3545))+(((-1.0)*r12*x3547))+((r11*x3550))+((cj1*cj2))+(((-1.0)*x3544*x3548)));
evalcond[5]=(((r21*x3550))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3545))+(((-1.0)*x3546*x3548))+(((-1.0)*r22*x3547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3551=((1.0)*cj5);
CheckValue<IkReal> x3552 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3551))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3552.valid){
continue;
}
CheckValue<IkReal> x3553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3551))+(((-1.0)*r20*sj5)))),-1);
if(!x3553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3552.value)+(((1.5707963267949)*(x3553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3554=IKcos(j4);
IkReal x3555=IKsin(j4);
IkReal x3556=(cj5*r00);
IkReal x3557=(cj5*r10);
IkReal x3558=((1.0)*sj1);
IkReal x3559=(cj5*r20);
IkReal x3560=((1.0)*x3554);
IkReal x3561=((1.0)*x3555);
IkReal x3562=(sj5*x3554);
IkReal x3563=(sj5*x3555);
evalcond[0]=(((r21*x3562))+(((-1.0)*x3559*x3560))+((r22*x3555)));
evalcond[1]=(((r12*x3555))+((r11*x3562))+(((-1.0)*x3557*x3560)));
evalcond[2]=((-1.0)+((r01*x3562))+(((-1.0)*x3556*x3560))+((r02*x3555)));
evalcond[3]=((((-1.0)*r02*x3560))+((r01*x3563))+(((-1.0)*x3556*x3561)));
evalcond[4]=((((-1.0)*sj2*x3558))+(((-1.0)*r12*x3560))+((r11*x3563))+((cj1*cj2))+(((-1.0)*x3557*x3561)));
evalcond[5]=(((r21*x3563))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3558))+(((-1.0)*r22*x3560))+(((-1.0)*x3559*x3561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3564.value)+(((1.5707963267949)*(x3565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j4);
IkReal x3567=IKsin(j4);
IkReal x3568=(cj5*r00);
IkReal x3569=(cj5*r10);
IkReal x3570=((1.0)*sj1);
IkReal x3571=(cj5*r20);
IkReal x3572=((1.0)*x3566);
IkReal x3573=((1.0)*x3567);
IkReal x3574=(sj5*x3566);
IkReal x3575=(sj5*x3567);
evalcond[0]=(((r21*x3574))+(((-1.0)*x3571*x3572))+((r22*x3567)));
evalcond[1]=((((-1.0)*x3569*x3572))+((r11*x3574))+((r12*x3567)));
evalcond[2]=((-1.0)+(((-1.0)*x3568*x3572))+((r01*x3574))+((r02*x3567)));
evalcond[3]=((((-1.0)*x3568*x3573))+((r01*x3575))+(((-1.0)*r02*x3572)));
evalcond[4]=((((-1.0)*x3569*x3573))+(((-1.0)*sj2*x3570))+((r11*x3575))+((cj1*cj2))+(((-1.0)*r12*x3572)));
evalcond[5]=(((r21*x3575))+(((-1.0)*cj2*x3570))+(((-1.0)*cj1*sj2))+(((-1.0)*x3571*x3573))+(((-1.0)*r22*x3572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3576=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3576;
j4eval[1]=IKsign(x3576);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3577=((1.0)*cj5);
IkReal x3578=((((-1.0)*r11*x3577))+(((-1.0)*r10*sj5)));
j4eval[0]=x3578;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3577)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3579=cj5*cj5;
IkReal x3580=r01*r01;
IkReal x3581=(r01*sj5);
IkReal x3582=(cj5*r00);
IkReal x3583=((((-1.0)*(r02*r02)))+((x3579*x3580))+(((2.0)*x3581*x3582))+(((-1.0)*x3579*(r00*r00)))+(((-1.0)*x3580)));
j4eval[0]=x3583;
j4eval[1]=IKsign(x3583);
j4eval[2]=((IKabs(r02))+(IKabs((x3581+(((-1.0)*x3582))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3584=cj5*cj5;
IkReal x3585=r01*r01;
IkReal x3586=(r01*sj5);
IkReal x3587=(cj5*r00);
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(IKsign(((((2.0)*x3586*x3587))+((x3584*x3585))+(((-1.0)*(r02*r02)))+(((-1.0)*x3584*(r00*r00)))+(((-1.0)*x3585)))),-1);
if(!x3588.valid){
continue;
}
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(r02),IkReal((x3586+(((-1.0)*x3587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3588.value)))+(x3589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3590=IKcos(j4);
IkReal x3591=IKsin(j4);
IkReal x3592=(cj5*r00);
IkReal x3593=(cj5*r10);
IkReal x3594=((1.0)*cj2);
IkReal x3595=(cj5*r20);
IkReal x3596=((1.0)*x3590);
IkReal x3597=((1.0)*x3591);
IkReal x3598=(sj5*x3590);
IkReal x3599=(sj5*x3591);
evalcond[0]=(((r21*x3598))+(((-1.0)*x3595*x3596))+((r22*x3591)));
evalcond[1]=(((r11*x3598))+((r12*x3591))+(((-1.0)*x3593*x3596)));
evalcond[2]=((1.0)+((r02*x3591))+((r01*x3598))+(((-1.0)*x3592*x3596)));
evalcond[3]=((((-1.0)*r02*x3596))+((r01*x3599))+(((-1.0)*x3592*x3597)));
evalcond[4]=((((-1.0)*cj1*x3594))+((r11*x3599))+((sj1*sj2))+(((-1.0)*r12*x3596))+(((-1.0)*x3593*x3597)));
evalcond[5]=(((r21*x3599))+(((-1.0)*r22*x3596))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3594))+(((-1.0)*x3595*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3600=((1.0)*cj5);
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x3600)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
CheckValue<IkReal> x3602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3600)))),-1);
if(!x3602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3601.value)+(((1.5707963267949)*(x3602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3603=IKcos(j4);
IkReal x3604=IKsin(j4);
IkReal x3605=(cj5*r00);
IkReal x3606=(cj5*r10);
IkReal x3607=((1.0)*cj2);
IkReal x3608=(cj5*r20);
IkReal x3609=((1.0)*x3603);
IkReal x3610=((1.0)*x3604);
IkReal x3611=(sj5*x3603);
IkReal x3612=(sj5*x3604);
evalcond[0]=(((r22*x3604))+((r21*x3611))+(((-1.0)*x3608*x3609)));
evalcond[1]=(((r11*x3611))+(((-1.0)*x3606*x3609))+((r12*x3604)));
evalcond[2]=((1.0)+((r02*x3604))+((r01*x3611))+(((-1.0)*x3605*x3609)));
evalcond[3]=((((-1.0)*x3605*x3610))+(((-1.0)*r02*x3609))+((r01*x3612)));
evalcond[4]=(((r11*x3612))+(((-1.0)*r12*x3609))+((sj1*sj2))+(((-1.0)*cj1*x3607))+(((-1.0)*x3606*x3610)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3609))+((r21*x3612))+(((-1.0)*x3608*x3610))+(((-1.0)*sj1*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3613.valid){
continue;
}
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3613.value)))+(x3614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3615=IKcos(j4);
IkReal x3616=IKsin(j4);
IkReal x3617=(cj5*r00);
IkReal x3618=(cj5*r10);
IkReal x3619=((1.0)*cj2);
IkReal x3620=(cj5*r20);
IkReal x3621=((1.0)*x3615);
IkReal x3622=((1.0)*x3616);
IkReal x3623=(sj5*x3615);
IkReal x3624=(sj5*x3616);
evalcond[0]=(((r21*x3623))+((r22*x3616))+(((-1.0)*x3620*x3621)));
evalcond[1]=(((r11*x3623))+(((-1.0)*x3618*x3621))+((r12*x3616)));
evalcond[2]=((1.0)+((r02*x3616))+((r01*x3623))+(((-1.0)*x3617*x3621)));
evalcond[3]=(((r01*x3624))+(((-1.0)*x3617*x3622))+(((-1.0)*r02*x3621)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r12*x3621))+((r11*x3624))+(((-1.0)*x3618*x3622))+(((-1.0)*cj1*x3619)));
evalcond[5]=(((r21*x3624))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3621))+(((-1.0)*sj1*x3619))+(((-1.0)*x3620*x3622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3625=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3625);
rxp1_1=(px*r21);
rxp1_2=(r11*x3625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3626=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3626);
rxp1_1=(px*r21);
rxp1_2=(r11*x3626);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3627=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3627);
rxp1_1=(px*r21);
rxp1_2=(r11*x3627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3630=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3630.valid){
continue;
}
IkReal x3628=x3630.value;
IkReal x3629=(sj0*x3628);
sj4array[0]=((((-1.0)*cj1*cj2*x3629))+((sj1*sj2*x3629)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3631=IKcos(j4);
IkReal x3632=IKsin(j4);
IkReal x3633=(r21*sj5);
IkReal x3634=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x3631);
evalcond[1]=(((r02*x3632))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x3631*x3634))+((x3631*x3633)));
evalcond[3]=(((r11*sj5*x3631))+(((-1.0)*cj5*r10*x3631)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x3632*x3633))+(((-1.0)*x3632*x3634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3636=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3636.valid){
continue;
}
IkReal x3635=x3636.value;
sj4array[0]=(((cj2*sj1*x3635))+((cj1*sj2*x3635)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3637=IKcos(j4);
IkReal x3638=IKsin(j4);
IkReal x3639=((1.0)*sj0);
IkReal x3640=((1.0)*cj5);
IkReal x3641=(sj5*x3637);
evalcond[0]=((-1.0)*r02*x3637);
evalcond[1]=(((r02*x3638))+(((-1.0)*x3639)));
evalcond[2]=((((-1.0)*r20*x3637*x3640))+((r21*x3641)));
evalcond[3]=(((r11*x3641))+(((-1.0)*r10*x3637*x3640)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x3638))+(((-1.0)*sj1*sj2*x3639))+(((-1.0)*r10*x3638*x3640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(r02,-1);
if(!x3642.valid){
continue;
}
sj4array[0]=(sj0*(x3642.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3643=IKcos(j4);
IkReal x3644=IKsin(j4);
IkReal x3645=((1.0)*sj1);
IkReal x3646=(r21*sj5);
IkReal x3647=(r11*sj5);
IkReal x3648=((1.0)*cj5*x3644);
IkReal x3649=((1.0)*cj5*x3643);
evalcond[0]=((-1.0)*r02*x3643);
evalcond[1]=(((x3643*x3646))+(((-1.0)*r20*x3649)));
evalcond[2]=(((x3643*x3647))+(((-1.0)*r10*x3649)));
evalcond[3]=((((-1.0)*cj2*x3645))+(((-1.0)*r20*x3648))+(((-1.0)*cj1*sj2))+((x3644*x3646)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r10*x3648))+((x3644*x3647))+(((-1.0)*sj0*sj2*x3645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3650=((1.0)*sj0);
IkReal x3651=((1.0)*cj0);
CheckValue<IkReal> x3652 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3650))+(((-1.0)*cj5*r00*x3651)))),IkReal(((((-1.0)*r12*x3650))+(((-1.0)*r02*x3651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3652.value)+(((1.5707963267949)*(x3653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3654=IKcos(j4);
IkReal x3655=IKsin(j4);
IkReal x3656=(cj5*r00);
IkReal x3657=(cj1*cj2);
IkReal x3658=(cj5*r10);
IkReal x3659=((1.0)*sj1);
IkReal x3660=(cj5*r20);
IkReal x3661=((1.0)*x3654);
IkReal x3662=((1.0)*x3655);
IkReal x3663=(sj5*x3654);
IkReal x3664=(sj5*x3655);
evalcond[0]=((((-1.0)*x3660*x3661))+((r21*x3663))+((r22*x3655)));
evalcond[1]=(((r12*x3655))+cj0+((r11*x3663))+(((-1.0)*x3658*x3661)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3663))+(((-1.0)*x3656*x3661))+((r02*x3655)));
evalcond[3]=((((-1.0)*x3660*x3662))+(((-1.0)*cj2*x3659))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3661))+((r21*x3664)));
evalcond[4]=((((-1.0)*cj0*sj2*x3659))+(((-1.0)*r02*x3661))+((r01*x3664))+(((-1.0)*x3656*x3662))+((cj0*x3657)));
evalcond[5]=(((r11*x3664))+(((-1.0)*x3658*x3662))+((sj0*x3657))+(((-1.0)*r12*x3661))+(((-1.0)*sj0*sj2*x3659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3665 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3665.valid){
continue;
}
CheckValue<IkReal> x3666=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3665.value)+(((1.5707963267949)*(x3666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3667=IKcos(j4);
IkReal x3668=IKsin(j4);
IkReal x3669=(cj5*r00);
IkReal x3670=(cj1*cj2);
IkReal x3671=(cj5*r10);
IkReal x3672=((1.0)*sj1);
IkReal x3673=(cj5*r20);
IkReal x3674=((1.0)*x3667);
IkReal x3675=((1.0)*x3668);
IkReal x3676=(sj5*x3667);
IkReal x3677=(sj5*x3668);
evalcond[0]=(((r22*x3668))+(((-1.0)*x3673*x3674))+((r21*x3676)));
evalcond[1]=((((-1.0)*x3671*x3674))+cj0+((r11*x3676))+((r12*x3668)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3676))+((r02*x3668))+(((-1.0)*x3669*x3674)));
evalcond[3]=((((-1.0)*cj2*x3672))+(((-1.0)*x3673*x3675))+(((-1.0)*cj1*sj2))+((r21*x3677))+(((-1.0)*r22*x3674)));
evalcond[4]=(((r01*x3677))+(((-1.0)*cj0*sj2*x3672))+(((-1.0)*x3669*x3675))+(((-1.0)*r02*x3674))+((cj0*x3670)));
evalcond[5]=((((-1.0)*sj0*sj2*x3672))+(((-1.0)*x3671*x3675))+((r11*x3677))+(((-1.0)*r12*x3674))+((sj0*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
CheckValue<IkReal> x3679=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3678.value)+(((1.5707963267949)*(x3679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3680=IKcos(j4);
IkReal x3681=IKsin(j4);
IkReal x3682=(cj5*r00);
IkReal x3683=(cj1*cj2);
IkReal x3684=(cj5*r10);
IkReal x3685=((1.0)*sj1);
IkReal x3686=(cj5*r20);
IkReal x3687=((1.0)*x3680);
IkReal x3688=((1.0)*x3681);
IkReal x3689=(sj5*x3680);
IkReal x3690=(sj5*x3681);
evalcond[0]=(((r21*x3689))+(((-1.0)*x3686*x3687))+((r22*x3681)));
evalcond[1]=(cj0+((r12*x3681))+(((-1.0)*x3684*x3687))+((r11*x3689)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3689))+(((-1.0)*x3682*x3687))+((r02*x3681)));
evalcond[3]=((((-1.0)*r22*x3687))+(((-1.0)*cj1*sj2))+((r21*x3690))+(((-1.0)*x3686*x3688))+(((-1.0)*cj2*x3685)));
evalcond[4]=(((r01*x3690))+((cj0*x3683))+(((-1.0)*x3682*x3688))+(((-1.0)*cj0*sj2*x3685))+(((-1.0)*r02*x3687)));
evalcond[5]=(((sj0*x3683))+(((-1.0)*x3684*x3688))+(((-1.0)*r12*x3687))+((r11*x3690))+(((-1.0)*sj0*sj2*x3685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3691=r21*r21;
IkReal x3692=cj5*cj5;
IkReal x3693=(cj1*sj2);
IkReal x3694=(cj5*r20);
IkReal x3695=(r21*sj5);
IkReal x3696=(cj2*sj1);
CheckValue<IkReal> x3697 = IKatan2WithCheck(IkReal((((x3694*x3696))+((x3693*x3694))+(((-1.0)*x3693*x3695))+(((-1.0)*x3695*x3696)))),IkReal((((r22*x3693))+((r22*x3696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3692*(r20*r20)))+(((2.0)*x3694*x3695))+(((-1.0)*(r22*r22)))+((x3691*x3692))+(((-1.0)*x3691)))),-1);
if(!x3698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3697.value)+(((1.5707963267949)*(x3698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3699=IKcos(j4);
IkReal x3700=IKsin(j4);
IkReal x3701=(r21*sj5);
IkReal x3702=(cj5*r20);
IkReal x3703=((1.0)*x3699);
evalcond[0]=(((x3699*x3701))+(((-1.0)*x3702*x3703))+((r22*x3700)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x3700*x3702))+((x3700*x3701))+(((-1.0)*r22*x3703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3704=(cj4*cj5);
IkReal x3705=(cj4*sj5);
if( IKabs((((r01*x3705))+((r02*sj4))+(((-1.0)*r00*x3704)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3705))+((r10*x3704))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3705))+((r02*sj4))+(((-1.0)*r00*x3704))))+IKsqr(((((-1.0)*r11*x3705))+((r10*x3704))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x3705))+((r02*sj4))+(((-1.0)*r00*x3704))), ((((-1.0)*r11*x3705))+((r10*x3704))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x3706=IKcos(j0);
IkReal x3707=IKsin(j0);
IkReal x3708=(r00*sj5);
IkReal x3709=((1.0)*sj2);
IkReal x3710=(r11*sj5);
IkReal x3711=(cj1*cj2);
IkReal x3712=((0.24)*cj2);
IkReal x3713=(cj1*sj2);
IkReal x3714=((1.0)*cj5);
IkReal x3715=((0.095)*cj5);
IkReal x3716=(r10*sj5);
IkReal x3717=((1.0)*cj4);
IkReal x3718=(r01*sj5);
IkReal x3719=(sj1*x3707);
IkReal x3720=(sj1*x3706);
evalcond[0]=(((cj4*x3710))+x3706+(((-1.0)*cj4*r10*x3714))+((r12*sj4)));
evalcond[1]=((((-1.0)*cj4*r00*x3714))+((cj4*x3718))+((r02*sj4))+(((-1.0)*x3707)));
evalcond[2]=(((x3706*x3713))+((cj2*x3720))+(((-1.0)*r01*x3714))+(((-1.0)*x3708)));
evalcond[3]=((((-1.0)*r11*x3714))+((x3707*x3713))+((cj2*x3719))+(((-1.0)*x3716)));
evalcond[4]=(((x3706*x3711))+((sj4*x3718))+(((-1.0)*r02*x3717))+(((-1.0)*x3709*x3720))+(((-1.0)*r00*sj4*x3714)));
evalcond[5]=(((sj4*x3710))+(((-1.0)*r10*sj4*x3714))+(((-1.0)*r12*x3717))+((x3707*x3711))+(((-1.0)*x3709*x3719)));
evalcond[6]=(((x3712*x3720))+(((-1.0)*r01*x3715))+(((0.265)*x3720))+(((-1.0)*px))+(((0.24)*x3706*x3713))+(((-0.115)*x3707))+(((-0.095)*x3708)));
evalcond[7]=((((-0.095)*x3716))+(((0.24)*x3707*x3713))+(((0.265)*x3719))+((x3712*x3719))+(((0.115)*x3706))+(((-1.0)*py))+(((-1.0)*r11*x3715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign((((cj2*sj1))+((cj1*sj2)))),-1);
if(!x3721.valid){
continue;
}
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3721.value)))+(x3722.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3723=IKcos(j0);
IkReal x3724=IKsin(j0);
IkReal x3725=(r00*sj5);
IkReal x3726=((0.24)*cj2);
IkReal x3727=(cj5*r11);
IkReal x3728=(r10*sj5);
IkReal x3729=(cj5*r01);
IkReal x3730=(cj1*sj2);
IkReal x3731=(sj1*x3724);
IkReal x3732=(sj1*x3723);
evalcond[0]=(((x3723*x3730))+(((-1.0)*x3725))+(((-1.0)*x3729))+((cj2*x3732)));
evalcond[1]=(((x3724*x3730))+(((-1.0)*x3727))+(((-1.0)*x3728))+((cj2*x3731)));
evalcond[2]=(((x3726*x3732))+(((-0.115)*x3724))+(((-0.095)*x3729))+(((-0.095)*x3725))+(((-1.0)*px))+(((0.265)*x3732))+(((0.24)*x3723*x3730)));
evalcond[3]=(((x3726*x3731))+(((0.115)*x3723))+(((-0.095)*x3728))+(((-0.095)*x3727))+(((-1.0)*py))+(((0.265)*x3731))+(((0.24)*x3724*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3733=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3733;
j4eval[1]=IKsign(x3733);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3734=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3734;
j4eval[1]=IKsign(x3734);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3735=((1.0)*sj0);
IkReal x3736=((1.0)*cj0);
IkReal x3737=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3737;
j4eval[1]=((IKabs(((((-1.0)*r12*x3735))+(((-1.0)*r02*x3736)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3736))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3735))))));
j4eval[2]=IKsign(x3737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3738=((-1.0)*r20);
IkReal x3740 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3740)==0){
continue;
}
IkReal x3739=pow(x3740,-0.5);
CheckValue<IkReal> x3741 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3738),IKFAST_ATAN2_MAGTHRESH);
if(!x3741.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3741.value));
IkReal gconst97=(r21*x3739);
IkReal gconst98=(x3738*x3739);
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3742.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3743=((-1.0)*r20);
IkReal x3744=x3739;
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3743),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
IkReal x3745=((-1.0)*(x3746.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3745;
IkReal gconst96=x3745;
IkReal gconst97=(r21*x3744);
IkReal gconst98=(x3743*x3744);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3747=((-1.0)*r20);
IkReal x3748=x3739;
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3747),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
IkReal x3749=((-1.0)*(x3750.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3749;
IkReal gconst96=x3749;
IkReal gconst97=(r21*x3748);
IkReal gconst98=(x3747*x3748);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3751=((-1.0)*r20);
IkReal x3752=x3739;
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3751),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
IkReal x3753=((-1.0)*(x3754.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3753;
IkReal gconst96=x3753;
IkReal gconst97=(r21*x3752);
IkReal gconst98=(x3751*x3752);
IkReal x3755=((1.0)*(r22*r22));
CheckValue<IkReal> x3759=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3755))),-1);
if(!x3759.valid){
continue;
}
IkReal x3756=x3759.value;
IkReal x3757=((1.0)*x3756);
IkReal x3758=((((-1.0)*x3757*(r20*r20*r20*r20)))+(((-1.0)*x3755))+(((-1.0)*x3757*(r21*r21*r21*r21)))+(((-2.0)*x3756*(r20*r20)*(r21*r21))));
j4eval[0]=x3758;
j4eval[1]=IKsign(x3758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3760=(cj2*sj1);
IkReal x3761=(gconst98*r20);
IkReal x3762=(cj1*sj2);
IkReal x3763=((1.0)*gconst97*r21);
CheckValue<IkReal> x3764 = IKatan2WithCheck(IkReal(((((-1.0)*x3762*x3763))+(((-1.0)*x3760*x3763))+((x3761*x3762))+((x3760*x3761)))),IkReal((((r22*x3760))+((r22*x3762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3764.valid){
continue;
}
CheckValue<IkReal> x3765=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3761*x3761)))+(((2.0)*gconst97*r21*x3761))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst97*r21*x3763)))),-1);
if(!x3765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3764.value)+(((1.5707963267949)*(x3765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3766=IKcos(j4);
IkReal x3767=IKsin(j4);
IkReal x3768=(gconst98*r10);
IkReal x3769=(gconst97*r21);
IkReal x3770=(gconst98*r20);
IkReal x3771=(cj1*cj2);
IkReal x3772=((1.0)*sj1);
IkReal x3773=(gconst98*r00);
IkReal x3774=((1.0)*x3766);
IkReal x3775=((1.0)*x3767);
IkReal x3776=(gconst97*x3767);
IkReal x3777=(gconst97*x3766);
evalcond[0]=(((r22*x3767))+((x3766*x3769))+(((-1.0)*x3770*x3774)));
evalcond[1]=(cj0+((r11*x3777))+((r12*x3767))+(((-1.0)*x3768*x3774)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3767))+(((-1.0)*x3773*x3774))+((r01*x3777)));
evalcond[3]=((((-1.0)*r22*x3774))+((x3767*x3769))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3772))+(((-1.0)*x3770*x3775)));
evalcond[4]=(((cj0*x3771))+(((-1.0)*x3773*x3775))+(((-1.0)*r02*x3774))+(((-1.0)*cj0*sj2*x3772))+((r01*x3776)));
evalcond[5]=(((sj0*x3771))+((r11*x3776))+(((-1.0)*x3768*x3775))+(((-1.0)*r12*x3774))+(((-1.0)*sj0*sj2*x3772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3778 = IKatan2WithCheck(IkReal((((gconst97*r21*sj0))+(((-1.0)*gconst98*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3778.valid){
continue;
}
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3778.value)+(((1.5707963267949)*(x3779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3780=IKcos(j4);
IkReal x3781=IKsin(j4);
IkReal x3782=(gconst98*r10);
IkReal x3783=(gconst97*r21);
IkReal x3784=(gconst98*r20);
IkReal x3785=(cj1*cj2);
IkReal x3786=((1.0)*sj1);
IkReal x3787=(gconst98*r00);
IkReal x3788=((1.0)*x3780);
IkReal x3789=((1.0)*x3781);
IkReal x3790=(gconst97*x3781);
IkReal x3791=(gconst97*x3780);
evalcond[0]=((((-1.0)*x3784*x3788))+((r22*x3781))+((x3780*x3783)));
evalcond[1]=(((r12*x3781))+cj0+(((-1.0)*x3782*x3788))+((r11*x3791)));
evalcond[2]=(((r02*x3781))+(((-1.0)*sj0))+((r01*x3791))+(((-1.0)*x3787*x3788)));
evalcond[3]=((((-1.0)*x3784*x3789))+(((-1.0)*r22*x3788))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3786))+((x3781*x3783)));
evalcond[4]=((((-1.0)*r02*x3788))+((cj0*x3785))+(((-1.0)*cj0*sj2*x3786))+((r01*x3790))+(((-1.0)*x3787*x3789)));
evalcond[5]=((((-1.0)*x3782*x3789))+(((-1.0)*sj0*sj2*x3786))+(((-1.0)*r12*x3788))+((r11*x3790))+((sj0*x3785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*gconst98*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3792.value)+(((1.5707963267949)*(x3793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3794=IKcos(j4);
IkReal x3795=IKsin(j4);
IkReal x3796=(gconst98*r10);
IkReal x3797=(gconst97*r21);
IkReal x3798=(gconst98*r20);
IkReal x3799=(cj1*cj2);
IkReal x3800=((1.0)*sj1);
IkReal x3801=(gconst98*r00);
IkReal x3802=((1.0)*x3794);
IkReal x3803=((1.0)*x3795);
IkReal x3804=(gconst97*x3795);
IkReal x3805=(gconst97*x3794);
evalcond[0]=(((r22*x3795))+(((-1.0)*x3798*x3802))+((x3794*x3797)));
evalcond[1]=(((r11*x3805))+cj0+(((-1.0)*x3796*x3802))+((r12*x3795)));
evalcond[2]=(((r01*x3805))+(((-1.0)*sj0))+(((-1.0)*x3801*x3802))+((r02*x3795)));
evalcond[3]=((((-1.0)*cj2*x3800))+(((-1.0)*cj1*sj2))+((x3795*x3797))+(((-1.0)*x3798*x3803))+(((-1.0)*r22*x3802)));
evalcond[4]=(((r01*x3804))+(((-1.0)*cj0*sj2*x3800))+((cj0*x3799))+(((-1.0)*x3801*x3803))+(((-1.0)*r02*x3802)));
evalcond[5]=(((r11*x3804))+(((-1.0)*sj0*sj2*x3800))+(((-1.0)*x3796*x3803))+((sj0*x3799))+(((-1.0)*r12*x3802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3806=((-1.0)*r21);
IkReal x3808 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3808)==0){
continue;
}
IkReal x3807=pow(x3808,-0.5);
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(x3806),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3809.value))));
IkReal gconst100=(x3806*x3807);
IkReal gconst101=((1.0)*r20*x3807);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3810.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3811=((-1.0)*r21);
CheckValue<IkReal> x3814 = IKatan2WithCheck(IkReal(x3811),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3814.valid){
continue;
}
IkReal x3812=((1.0)*(x3814.value));
IkReal x3813=x3807;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3812)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3812)));
IkReal gconst100=(x3811*x3813);
IkReal gconst101=((1.0)*r20*x3813);
IkReal x3815=r22*r22;
IkReal x3816=((1.0)*x3815);
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(((-1.0)+x3815),-1);
if(!x3820.valid){
continue;
}
IkReal x3817=x3820.value;
if((((1.0)+(((-1.0)*x3816)))) < -0.00001)
continue;
IkReal x3818=IKsqrt(((1.0)+(((-1.0)*x3816))));
IkReal x3819=(cj0*x3817*x3818);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3819+(((-1.0)*x3816*x3819))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3821=((-1.0)*r21);
CheckValue<IkReal> x3824 = IKatan2WithCheck(IkReal(x3821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3824.valid){
continue;
}
IkReal x3822=((1.0)*(x3824.value));
IkReal x3823=x3807;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3822)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3822)));
IkReal gconst100=(x3821*x3823);
IkReal gconst101=((1.0)*r20*x3823);
IkReal x3825=r22*r22;
IkReal x3826=((1.0)*x3825);
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(((-1.0)+x3825),-1);
if(!x3830.valid){
continue;
}
IkReal x3827=x3830.value;
if((((1.0)+(((-1.0)*x3826)))) < -0.00001)
continue;
IkReal x3828=IKsqrt(((1.0)+(((-1.0)*x3826))));
IkReal x3829=(sj0*x3827*x3828);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3826*x3829))+x3829))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3831=((-1.0)*r21);
CheckValue<IkReal> x3834 = IKatan2WithCheck(IkReal(x3831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3834.valid){
continue;
}
IkReal x3832=((1.0)*(x3834.value));
IkReal x3833=x3807;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3832)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3832)));
IkReal gconst100=(x3831*x3833);
IkReal gconst101=((1.0)*r20*x3833);
IkReal x3835=r22*r22;
IkReal x3836=((1.0)*r12*sj0);
IkReal x3837=((1.0)*cj0*r02);
CheckValue<IkReal> x3841=IKPowWithIntegerCheck(((-1.0)+x3835),-1);
if(!x3841.valid){
continue;
}
IkReal x3838=x3841.value;
if((((1.0)+(((-1.0)*x3835)))) < -0.00001)
continue;
IkReal x3839=IKsqrt(((1.0)+(((-1.0)*x3835))));
IkReal x3840=(r22*x3838*x3839);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3837))+(((-1.0)*x3836)))))+(IKabs(((((-1.0)*x3837*x3840))+(((-1.0)*x3836*x3840))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3842=((1.0)*sj0);
IkReal x3843=((1.0)*cj0);
CheckValue<IkReal> x3844=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3844.valid){
continue;
}
CheckValue<IkReal> x3845 = IKatan2WithCheck(IkReal((((cj0*gconst100*r01))+(((-1.0)*gconst101*r10*x3842))+(((-1.0)*gconst101*r00*x3843))+((gconst100*r11*sj0)))),IkReal(((((-1.0)*r02*x3843))+(((-1.0)*r12*x3842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3844.value)))+(x3845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3846=IKcos(j4);
IkReal x3847=IKsin(j4);
IkReal x3848=(cj1*cj2);
IkReal x3849=(gconst101*r20);
IkReal x3850=(gconst101*r10);
IkReal x3851=((1.0)*sj2);
IkReal x3852=(gconst101*r00);
IkReal x3853=((1.0)*x3846);
IkReal x3854=((1.0)*x3847);
IkReal x3855=(gconst100*x3847);
IkReal x3856=(gconst100*x3846);
evalcond[0]=(((r21*x3856))+((r22*x3847))+(((-1.0)*x3849*x3853)));
evalcond[1]=(((r12*x3847))+((r11*x3856))+cj0+(((-1.0)*x3850*x3853)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3856))+(((-1.0)*x3852*x3853))+((r02*x3847)));
evalcond[3]=(((r21*x3855))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3851))+(((-1.0)*r22*x3853))+(((-1.0)*x3849*x3854)));
evalcond[4]=(((r01*x3855))+(((-1.0)*cj0*sj1*x3851))+(((-1.0)*x3852*x3854))+((cj0*x3848))+(((-1.0)*r02*x3853)));
evalcond[5]=(((r11*x3855))+(((-1.0)*x3850*x3854))+(((-1.0)*r12*x3853))+(((-1.0)*sj0*sj1*x3851))+((sj0*x3848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3857 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj0))+((gconst100*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3857.valid){
continue;
}
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3857.value)+(((1.5707963267949)*(x3858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3859=IKcos(j4);
IkReal x3860=IKsin(j4);
IkReal x3861=(cj1*cj2);
IkReal x3862=(gconst101*r20);
IkReal x3863=(gconst101*r10);
IkReal x3864=((1.0)*sj2);
IkReal x3865=(gconst101*r00);
IkReal x3866=((1.0)*x3859);
IkReal x3867=((1.0)*x3860);
IkReal x3868=(gconst100*x3860);
IkReal x3869=(gconst100*x3859);
evalcond[0]=(((r21*x3869))+(((-1.0)*x3862*x3866))+((r22*x3860)));
evalcond[1]=(((r11*x3869))+cj0+(((-1.0)*x3863*x3866))+((r12*x3860)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3860))+(((-1.0)*x3865*x3866))+((r01*x3869)));
evalcond[3]=(((r21*x3868))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3864))+(((-1.0)*x3862*x3867))+(((-1.0)*r22*x3866)));
evalcond[4]=((((-1.0)*r02*x3866))+(((-1.0)*x3865*x3867))+(((-1.0)*cj0*sj1*x3864))+((r01*x3868))+((cj0*x3861)));
evalcond[5]=(((r11*x3868))+(((-1.0)*x3863*x3867))+(((-1.0)*r12*x3866))+(((-1.0)*sj0*sj1*x3864))+((sj0*x3861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*gconst101*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3870.value)+(((1.5707963267949)*(x3871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3872=IKcos(j4);
IkReal x3873=IKsin(j4);
IkReal x3874=(cj1*cj2);
IkReal x3875=(gconst101*r20);
IkReal x3876=(gconst101*r10);
IkReal x3877=((1.0)*sj2);
IkReal x3878=(gconst101*r00);
IkReal x3879=((1.0)*x3872);
IkReal x3880=((1.0)*x3873);
IkReal x3881=(gconst100*x3873);
IkReal x3882=(gconst100*x3872);
evalcond[0]=(((r21*x3882))+(((-1.0)*x3875*x3879))+((r22*x3873)));
evalcond[1]=(cj0+(((-1.0)*x3876*x3879))+((r11*x3882))+((r12*x3873)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x3878*x3879))+((r01*x3882))+((r02*x3873)));
evalcond[3]=(((r21*x3881))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3877))+(((-1.0)*r22*x3879))+(((-1.0)*x3875*x3880)));
evalcond[4]=((((-1.0)*cj0*sj1*x3877))+(((-1.0)*x3878*x3880))+(((-1.0)*r02*x3879))+((r01*x3881))+((cj0*x3874)));
evalcond[5]=((((-1.0)*r12*x3879))+((r11*x3881))+((sj0*x3874))+(((-1.0)*sj0*sj1*x3877))+(((-1.0)*x3876*x3880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3884 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3884)==0){
continue;
}
IkReal x3883=pow(x3884,-0.5);
CheckValue<IkReal> x3885 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3885.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3885.value));
IkReal gconst103=((-1.0)*r11*x3883);
IkReal gconst104=(r10*x3883);
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3886.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
IkReal x3887=((-1.0)*(x3889.value));
IkReal x3888=x3883;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3887;
IkReal gconst102=x3887;
IkReal gconst103=((-1.0)*r11*x3888);
IkReal gconst104=(r10*x3888);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3890=((1.0)*sj0);
IkReal x3891=((1.0)*cj0);
CheckValue<IkReal> x3892 = IKatan2WithCheck(IkReal(((((-1.0)*gconst104*r00*x3891))+(((-1.0)*gconst104*r10*x3890))+((cj0*gconst103*r01))+((gconst103*r11*sj0)))),IkReal(((((-1.0)*r12*x3890))+(((-1.0)*r02*x3891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3892.valid){
continue;
}
CheckValue<IkReal> x3893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*gconst104*r21)))),-1);
if(!x3893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3892.value)+(((1.5707963267949)*(x3893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3894=IKcos(j4);
IkReal x3895=IKsin(j4);
IkReal x3896=(gconst103*r11);
IkReal x3897=(cj1*cj2);
IkReal x3898=((1.0)*sj1);
IkReal x3899=((1.0)*x3894);
IkReal x3900=(gconst103*x3894);
IkReal x3901=(gconst103*x3895);
IkReal x3902=((1.0)*gconst104*x3895);
evalcond[0]=((((-1.0)*gconst104*r20*x3899))+((r22*x3895))+((r21*x3900)));
evalcond[1]=(cj0+((x3894*x3896))+(((-1.0)*gconst104*r10*x3899))+((r12*x3895)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3899))+((r01*x3900))+((r02*x3895)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3899))+(((-1.0)*cj2*x3898))+((r21*x3901))+(((-1.0)*r20*x3902)));
evalcond[4]=(((cj0*x3897))+((r01*x3901))+(((-1.0)*cj0*sj2*x3898))+(((-1.0)*r00*x3902))+(((-1.0)*r02*x3899)));
evalcond[5]=(((x3895*x3896))+((sj0*x3897))+(((-1.0)*r12*x3899))+(((-1.0)*r10*x3902))+(((-1.0)*sj0*sj2*x3898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3903.valid){
continue;
}
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst104*r20))+((cj0*gconst103*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3903.value)))+(x3904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3905=IKcos(j4);
IkReal x3906=IKsin(j4);
IkReal x3907=(gconst103*r11);
IkReal x3908=(cj1*cj2);
IkReal x3909=((1.0)*sj1);
IkReal x3910=((1.0)*x3905);
IkReal x3911=(gconst103*x3905);
IkReal x3912=(gconst103*x3906);
IkReal x3913=((1.0)*gconst104*x3906);
evalcond[0]=(((r21*x3911))+((r22*x3906))+(((-1.0)*gconst104*r20*x3910)));
evalcond[1]=(cj0+((x3905*x3907))+((r12*x3906))+(((-1.0)*gconst104*r10*x3910)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst104*r00*x3910))+((r01*x3911))+((r02*x3906)));
evalcond[3]=((((-1.0)*r20*x3913))+((r21*x3912))+(((-1.0)*r22*x3910))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3909)));
evalcond[4]=((((-1.0)*r02*x3910))+((cj0*x3908))+((r01*x3912))+(((-1.0)*cj0*sj2*x3909))+(((-1.0)*r00*x3913)));
evalcond[5]=(((sj0*x3908))+((x3906*x3907))+(((-1.0)*r12*x3910))+(((-1.0)*r10*x3913))+(((-1.0)*sj0*sj2*x3909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3915 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3915)==0){
continue;
}
IkReal x3914=pow(x3915,-0.5);
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3916.value))));
IkReal gconst106=((1.0)*r11*x3914);
IkReal gconst107=((-1.0)*r10*x3914);
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3917.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
IkReal x3918=((1.0)*(x3920.value));
IkReal x3919=x3914;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3918)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3918)));
IkReal gconst106=((1.0)*r11*x3919);
IkReal gconst107=((-1.0)*r10*x3919);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
IkReal x3921=((1.0)*(x3923.value));
IkReal x3922=x3914;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3921)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3921)));
IkReal gconst106=((1.0)*r11*x3922);
IkReal gconst107=((-1.0)*r10*x3922);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3926 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3926.valid){
continue;
}
IkReal x3924=((1.0)*(x3926.value));
IkReal x3925=x3914;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3924)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3924)));
IkReal gconst106=((1.0)*r11*x3925);
IkReal gconst107=((-1.0)*r10*x3925);
IkReal x3927=r12*r12;
IkReal x3928=((1.0)*sj0);
IkReal x3929=(cj0*r02);
IkReal x3930=x3914;
j4eval[0]=((IKabs((((sj0*x3927*x3930))+((r12*x3929*x3930))+(((-1.0)*x3928*x3930)))))+(IKabs(((((-1.0)*x3929))+(((-1.0)*r12*x3928))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3931=((1.0)*sj0);
IkReal x3932=((1.0)*gconst107);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x3932))+((cj0*gconst106*r01))+(((-1.0)*gconst107*r10*x3931))+((gconst106*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3932))+(((-1.0)*gconst106*r20)))),-1);
if(!x3934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3933.value)+(((1.5707963267949)*(x3934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3935=IKcos(j4);
IkReal x3936=IKsin(j4);
IkReal x3937=(cj1*cj2);
IkReal x3938=(gconst107*r10);
IkReal x3939=(gconst107*r00);
IkReal x3940=(gconst107*r20);
IkReal x3941=((1.0)*sj1);
IkReal x3942=((1.0)*x3935);
IkReal x3943=(gconst106*x3935);
IkReal x3944=(gconst106*x3936);
IkReal x3945=((1.0)*x3936);
evalcond[0]=(((r22*x3936))+(((-1.0)*x3940*x3942))+((r21*x3943)));
evalcond[1]=(cj0+(((-1.0)*x3938*x3942))+((r12*x3936))+((r11*x3943)));
evalcond[2]=(((r01*x3943))+(((-1.0)*sj0))+(((-1.0)*x3939*x3942))+((r02*x3936)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x3942))+(((-1.0)*x3940*x3945))+(((-1.0)*cj2*x3941))+((r21*x3944)));
evalcond[4]=(((r01*x3944))+((cj0*x3937))+(((-1.0)*r02*x3942))+(((-1.0)*x3939*x3945))+(((-1.0)*cj0*sj2*x3941)));
evalcond[5]=(((sj0*x3937))+(((-1.0)*x3938*x3945))+(((-1.0)*sj0*sj2*x3941))+(((-1.0)*r12*x3942))+((r11*x3944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947 = IKatan2WithCheck(IkReal((((gconst106*r21*sj0))+(((-1.0)*gconst107*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3946.value)))+(x3947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3948=IKcos(j4);
IkReal x3949=IKsin(j4);
IkReal x3950=(cj1*cj2);
IkReal x3951=(gconst107*r10);
IkReal x3952=(gconst107*r00);
IkReal x3953=(gconst107*r20);
IkReal x3954=((1.0)*sj1);
IkReal x3955=((1.0)*x3948);
IkReal x3956=(gconst106*x3948);
IkReal x3957=(gconst106*x3949);
IkReal x3958=((1.0)*x3949);
evalcond[0]=((((-1.0)*x3953*x3955))+((r22*x3949))+((r21*x3956)));
evalcond[1]=(cj0+(((-1.0)*x3951*x3955))+((r11*x3956))+((r12*x3949)));
evalcond[2]=((((-1.0)*sj0))+((r01*x3956))+(((-1.0)*x3952*x3955))+((r02*x3949)));
evalcond[3]=((((-1.0)*x3953*x3958))+((r21*x3957))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x3955))+(((-1.0)*cj2*x3954)));
evalcond[4]=((((-1.0)*cj0*sj2*x3954))+((r01*x3957))+((cj0*x3950))+(((-1.0)*x3952*x3958))+(((-1.0)*r02*x3955)));
evalcond[5]=(((sj0*x3950))+(((-1.0)*r12*x3955))+(((-1.0)*sj0*sj2*x3954))+(((-1.0)*x3951*x3958))+((r11*x3957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3959.valid){
continue;
}
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*gconst107*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3959.value)))+(x3960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3961=IKcos(j4);
IkReal x3962=IKsin(j4);
IkReal x3963=(cj1*cj2);
IkReal x3964=(gconst107*r10);
IkReal x3965=(gconst107*r00);
IkReal x3966=(gconst107*r20);
IkReal x3967=((1.0)*sj1);
IkReal x3968=((1.0)*x3961);
IkReal x3969=(gconst106*x3961);
IkReal x3970=(gconst106*x3962);
IkReal x3971=((1.0)*x3962);
evalcond[0]=(((r22*x3962))+((r21*x3969))+(((-1.0)*x3966*x3968)));
evalcond[1]=(cj0+((r11*x3969))+((r12*x3962))+(((-1.0)*x3964*x3968)));
evalcond[2]=((((-1.0)*sj0))+((r02*x3962))+(((-1.0)*x3965*x3968))+((r01*x3969)));
evalcond[3]=((((-1.0)*cj2*x3967))+(((-1.0)*cj1*sj2))+((r21*x3970))+(((-1.0)*r22*x3968))+(((-1.0)*x3966*x3971)));
evalcond[4]=((((-1.0)*r02*x3968))+(((-1.0)*x3965*x3971))+(((-1.0)*cj0*sj2*x3967))+((r01*x3970))+((cj0*x3963)));
evalcond[5]=((((-1.0)*sj0*sj2*x3967))+((r11*x3970))+(((-1.0)*x3964*x3971))+(((-1.0)*r12*x3968))+((sj0*x3963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3972=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3972;
j4eval[1]=IKsign(x3972);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3973=((1.0)*cj5);
IkReal x3974=((((-1.0)*r21*x3973))+(((-1.0)*r20*sj5)));
j4eval[0]=x3974;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x3973)))))+(IKabs(r02)));
j4eval[2]=IKsign(x3974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3975=cj5*cj5;
IkReal x3976=r11*r11;
IkReal x3977=(cj5*r10);
IkReal x3978=(r11*sj5);
IkReal x3979=((((2.0)*x3977*x3978))+(((-1.0)*(r12*r12)))+((x3975*x3976))+(((-1.0)*x3975*(r10*r10)))+(((-1.0)*x3976)));
j4eval[0]=x3979;
j4eval[1]=((IKabs(r12))+(IKabs((x3978+(((-1.0)*x3977))))));
j4eval[2]=IKsign(x3979);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3980=cj5*cj5;
IkReal x3981=r11*r11;
IkReal x3982=(cj5*r10);
IkReal x3983=(r11*sj5);
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal(r12),IkReal((x3983+(((-1.0)*x3982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
CheckValue<IkReal> x3985=IKPowWithIntegerCheck(IKsign(((((2.0)*x3982*x3983))+(((-1.0)*x3980*(r10*r10)))+((x3980*x3981))+(((-1.0)*(r12*r12)))+(((-1.0)*x3981)))),-1);
if(!x3985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3984.value)+(((1.5707963267949)*(x3985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3986=IKcos(j4);
IkReal x3987=IKsin(j4);
IkReal x3988=(cj5*r00);
IkReal x3989=(cj5*r10);
IkReal x3990=((1.0)*sj1);
IkReal x3991=(cj5*r20);
IkReal x3992=((1.0)*x3986);
IkReal x3993=((1.0)*x3987);
IkReal x3994=(sj5*x3986);
IkReal x3995=(sj5*x3987);
evalcond[0]=(((r21*x3994))+(((-1.0)*x3991*x3992))+((r22*x3987)));
evalcond[1]=((((-1.0)*x3988*x3992))+((r01*x3994))+((r02*x3987)));
evalcond[2]=((1.0)+(((-1.0)*x3989*x3992))+((r11*x3994))+((r12*x3987)));
evalcond[3]=((((-1.0)*x3989*x3993))+(((-1.0)*r12*x3992))+((r11*x3995)));
evalcond[4]=((((-1.0)*x3988*x3993))+(((-1.0)*r02*x3992))+((r01*x3995))+((cj1*cj2))+(((-1.0)*sj2*x3990)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3990))+((r21*x3995))+(((-1.0)*x3991*x3993))+(((-1.0)*r22*x3992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3996=((1.0)*cj5);
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3996))+(((-1.0)*r20*sj5)))),-1);
if(!x3997.valid){
continue;
}
CheckValue<IkReal> x3998 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x3996)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3997.value)))+(x3998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3999=IKcos(j4);
IkReal x4000=IKsin(j4);
IkReal x4001=(cj5*r00);
IkReal x4002=(cj5*r10);
IkReal x4003=((1.0)*sj1);
IkReal x4004=(cj5*r20);
IkReal x4005=((1.0)*x3999);
IkReal x4006=((1.0)*x4000);
IkReal x4007=(sj5*x3999);
IkReal x4008=(sj5*x4000);
evalcond[0]=(((r22*x4000))+(((-1.0)*x4004*x4005))+((r21*x4007)));
evalcond[1]=(((r01*x4007))+(((-1.0)*x4001*x4005))+((r02*x4000)));
evalcond[2]=((1.0)+((r12*x4000))+(((-1.0)*x4002*x4005))+((r11*x4007)));
evalcond[3]=((((-1.0)*x4002*x4006))+(((-1.0)*r12*x4005))+((r11*x4008)));
evalcond[4]=((((-1.0)*r02*x4005))+((r01*x4008))+(((-1.0)*x4001*x4006))+(((-1.0)*sj2*x4003))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x4005))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4003))+(((-1.0)*x4004*x4006))+((r21*x4008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4009=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4009.valid){
continue;
}
CheckValue<IkReal> x4010 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4009.value)))+(x4010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4011=IKcos(j4);
IkReal x4012=IKsin(j4);
IkReal x4013=(cj5*r00);
IkReal x4014=(cj5*r10);
IkReal x4015=((1.0)*sj1);
IkReal x4016=(cj5*r20);
IkReal x4017=((1.0)*x4011);
IkReal x4018=((1.0)*x4012);
IkReal x4019=(sj5*x4011);
IkReal x4020=(sj5*x4012);
evalcond[0]=(((r21*x4019))+((r22*x4012))+(((-1.0)*x4016*x4017)));
evalcond[1]=(((r02*x4012))+(((-1.0)*x4013*x4017))+((r01*x4019)));
evalcond[2]=((1.0)+(((-1.0)*x4014*x4017))+((r12*x4012))+((r11*x4019)));
evalcond[3]=((((-1.0)*r12*x4017))+(((-1.0)*x4014*x4018))+((r11*x4020)));
evalcond[4]=((((-1.0)*x4013*x4018))+((r01*x4020))+(((-1.0)*r02*x4017))+(((-1.0)*sj2*x4015))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x4017))+(((-1.0)*cj1*sj2))+((r21*x4020))+(((-1.0)*cj2*x4015))+(((-1.0)*x4016*x4018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4021=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4021;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4022=((1.0)*cj5);
IkReal x4023=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4022)));
j4eval[0]=x4023;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4022))))));
j4eval[2]=IKsign(x4023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4024=cj5*cj5;
IkReal x4025=r11*r11;
IkReal x4026=(r11*sj5);
IkReal x4027=(cj5*r10);
IkReal x4028=((r12*r12)+x4025+(((-1.0)*x4024*x4025))+((x4024*(r10*r10)))+(((-2.0)*x4026*x4027)));
j4eval[0]=x4028;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x4027))+x4026))));
j4eval[2]=IKsign(x4028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4029=cj5*cj5;
IkReal x4030=r11*r11;
IkReal x4031=(cj5*r10);
IkReal x4032=(r11*sj5);
CheckValue<IkReal> x4033 = IKatan2WithCheck(IkReal(r12),IkReal((x4032+(((-1.0)*x4031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4033.valid){
continue;
}
CheckValue<IkReal> x4034=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4031*x4032))+(r12*r12)+(((-1.0)*x4029*x4030))+x4030+((x4029*(r10*r10))))),-1);
if(!x4034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4033.value)+(((1.5707963267949)*(x4034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4035=IKcos(j4);
IkReal x4036=IKsin(j4);
IkReal x4037=(cj5*r00);
IkReal x4038=(cj5*r10);
IkReal x4039=((1.0)*cj2);
IkReal x4040=(cj5*r20);
IkReal x4041=((1.0)*x4035);
IkReal x4042=((1.0)*x4036);
IkReal x4043=(sj5*x4035);
IkReal x4044=(sj5*x4036);
evalcond[0]=(((r21*x4043))+(((-1.0)*x4040*x4041))+((r22*x4036)));
evalcond[1]=(((r02*x4036))+((r01*x4043))+(((-1.0)*x4037*x4041)));
evalcond[2]=((-1.0)+((r11*x4043))+((r12*x4036))+(((-1.0)*x4038*x4041)));
evalcond[3]=((((-1.0)*r12*x4041))+((r11*x4044))+(((-1.0)*x4038*x4042)));
evalcond[4]=((((-1.0)*cj1*x4039))+((sj1*sj2))+(((-1.0)*r02*x4041))+((r01*x4044))+(((-1.0)*x4037*x4042)));
evalcond[5]=(((r21*x4044))+(((-1.0)*cj1*sj2))+(((-1.0)*x4040*x4042))+(((-1.0)*r22*x4041))+(((-1.0)*sj1*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4045=((1.0)*cj5);
CheckValue<IkReal> x4046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4045)))),-1);
if(!x4046.valid){
continue;
}
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4045))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4046.value)))+(x4047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4048=IKcos(j4);
IkReal x4049=IKsin(j4);
IkReal x4050=(cj5*r00);
IkReal x4051=(cj5*r10);
IkReal x4052=((1.0)*cj2);
IkReal x4053=(cj5*r20);
IkReal x4054=((1.0)*x4048);
IkReal x4055=((1.0)*x4049);
IkReal x4056=(sj5*x4048);
IkReal x4057=(sj5*x4049);
evalcond[0]=(((r22*x4049))+(((-1.0)*x4053*x4054))+((r21*x4056)));
evalcond[1]=((((-1.0)*x4050*x4054))+((r02*x4049))+((r01*x4056)));
evalcond[2]=((-1.0)+(((-1.0)*x4051*x4054))+((r11*x4056))+((r12*x4049)));
evalcond[3]=((((-1.0)*x4051*x4055))+(((-1.0)*r12*x4054))+((r11*x4057)));
evalcond[4]=((((-1.0)*x4050*x4055))+((sj1*sj2))+(((-1.0)*r02*x4054))+(((-1.0)*cj1*x4052))+((r01*x4057)));
evalcond[5]=((((-1.0)*x4053*x4055))+((r21*x4057))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4054))+(((-1.0)*sj1*x4052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4058.valid){
continue;
}
CheckValue<IkReal> x4059 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4058.value)))+(x4059.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4060=IKcos(j4);
IkReal x4061=IKsin(j4);
IkReal x4062=(cj5*r00);
IkReal x4063=(cj5*r10);
IkReal x4064=((1.0)*cj2);
IkReal x4065=(cj5*r20);
IkReal x4066=((1.0)*x4060);
IkReal x4067=((1.0)*x4061);
IkReal x4068=(sj5*x4060);
IkReal x4069=(sj5*x4061);
evalcond[0]=((((-1.0)*x4065*x4066))+((r21*x4068))+((r22*x4061)));
evalcond[1]=(((r02*x4061))+(((-1.0)*x4062*x4066))+((r01*x4068)));
evalcond[2]=((-1.0)+(((-1.0)*x4063*x4066))+((r11*x4068))+((r12*x4061)));
evalcond[3]=((((-1.0)*r12*x4066))+(((-1.0)*x4063*x4067))+((r11*x4069)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4062*x4067))+(((-1.0)*r02*x4066))+(((-1.0)*cj1*x4064))+((r01*x4069)));
evalcond[5]=((((-1.0)*x4065*x4067))+((r21*x4069))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4066))+(((-1.0)*sj1*x4064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4071 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4071)==0){
continue;
}
IkReal x4070=pow(x4071,-0.5);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4072.value));
IkReal gconst109=((-1.0)*r01*x4070);
IkReal gconst110=(r00*x4070);
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4073.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4076 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4076.valid){
continue;
}
IkReal x4074=((-1.0)*(x4076.value));
IkReal x4075=x4070;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4074;
IkReal gconst108=x4074;
IkReal gconst109=((-1.0)*r01*x4075);
IkReal gconst110=(r00*x4075);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4077=((1.0)*sj0);
IkReal x4078=((1.0)*gconst110);
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4078)))),-1);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal((((cj0*gconst109*r01))+(((-1.0)*cj0*r00*x4078))+((gconst109*r11*sj0))+(((-1.0)*gconst110*r10*x4077)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4079.value)))+(x4080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j4);
IkReal x4082=IKsin(j4);
IkReal x4083=((1.0)*sj2);
IkReal x4084=(cj1*cj2);
IkReal x4085=(gconst109*r21);
IkReal x4086=((1.0)*x4081);
IkReal x4087=(gconst109*x4082);
IkReal x4088=(gconst109*x4081);
IkReal x4089=((1.0)*gconst110*x4082);
evalcond[0]=(((x4081*x4085))+((r22*x4082))+(((-1.0)*gconst110*r20*x4086)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x4086))+((r12*x4082))+((r11*x4088)));
evalcond[2]=(((r01*x4088))+(((-1.0)*sj0))+(((-1.0)*gconst110*r00*x4086))+((r02*x4082)));
evalcond[3]=((((-1.0)*r20*x4089))+((x4082*x4085))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x4086))+(((-1.0)*cj1*x4083)));
evalcond[4]=(((r01*x4087))+((cj0*x4084))+(((-1.0)*r02*x4086))+(((-1.0)*r00*x4089))+(((-1.0)*cj0*sj1*x4083)));
evalcond[5]=((((-1.0)*r12*x4086))+(((-1.0)*sj0*sj1*x4083))+((r11*x4087))+((sj0*x4084))+(((-1.0)*r10*x4089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4090.valid){
continue;
}
CheckValue<IkReal> x4091 = IKatan2WithCheck(IkReal((((gconst109*r21*sj0))+(((-1.0)*gconst110*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4090.value)))+(x4091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4092=IKcos(j4);
IkReal x4093=IKsin(j4);
IkReal x4094=((1.0)*sj2);
IkReal x4095=(cj1*cj2);
IkReal x4096=(gconst109*r21);
IkReal x4097=((1.0)*x4092);
IkReal x4098=(gconst109*x4093);
IkReal x4099=(gconst109*x4092);
IkReal x4100=((1.0)*gconst110*x4093);
evalcond[0]=(((r22*x4093))+(((-1.0)*gconst110*r20*x4097))+((x4092*x4096)));
evalcond[1]=(cj0+(((-1.0)*gconst110*r10*x4097))+((r11*x4099))+((r12*x4093)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4099))+((r02*x4093))+(((-1.0)*gconst110*r00*x4097)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x4097))+(((-1.0)*cj1*x4094))+(((-1.0)*r20*x4100))+((x4093*x4096)));
evalcond[4]=(((r01*x4098))+((cj0*x4095))+(((-1.0)*cj0*sj1*x4094))+(((-1.0)*r02*x4097))+(((-1.0)*r00*x4100)));
evalcond[5]=((((-1.0)*r12*x4097))+(((-1.0)*r10*x4100))+((r11*x4098))+(((-1.0)*sj0*sj1*x4094))+((sj0*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4102 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4102)==0){
continue;
}
IkReal x4101=pow(x4102,-0.5);
CheckValue<IkReal> x4103 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4103.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4103.value))));
IkReal gconst112=((1.0)*r01*x4101);
IkReal gconst113=((-1.0)*r00*x4101);
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4104.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4107 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4107.valid){
continue;
}
IkReal x4105=((1.0)*(x4107.value));
IkReal x4106=x4101;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4105)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4105)));
IkReal gconst112=((1.0)*r01*x4106);
IkReal gconst113=((-1.0)*r00*x4106);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
IkReal x4108=((1.0)*(x4110.value));
IkReal x4109=x4101;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4108)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4108)));
IkReal gconst112=((1.0)*r01*x4109);
IkReal gconst113=((-1.0)*r00*x4109);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
IkReal x4111=((1.0)*(x4113.value));
IkReal x4112=x4101;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4111)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4111)));
IkReal gconst112=((1.0)*r01*x4112);
IkReal gconst113=((-1.0)*r00*x4112);
IkReal x4114=r02*r02;
IkReal x4115=(r12*sj0);
IkReal x4116=((1.0)*cj0);
IkReal x4117=x4101;
j4eval[0]=((IKabs(((((-1.0)*r02*x4116))+(((-1.0)*x4115)))))+(IKabs((((cj0*x4114*x4117))+(((-1.0)*x4116*x4117))+((r02*x4115*x4117))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4118=((1.0)*sj0);
IkReal x4119=((1.0)*cj0);
CheckValue<IkReal> x4120 = IKatan2WithCheck(IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r00*x4119))+((gconst112*r11*sj0))+(((-1.0)*gconst113*r10*x4118)))),IkReal(((((-1.0)*r12*x4118))+(((-1.0)*r02*x4119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4120.valid){
continue;
}
CheckValue<IkReal> x4121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*gconst112*r20)))),-1);
if(!x4121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4120.value)+(((1.5707963267949)*(x4121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4122=IKcos(j4);
IkReal x4123=IKsin(j4);
IkReal x4124=(cj1*cj2);
IkReal x4125=(gconst113*r20);
IkReal x4126=(gconst112*r21);
IkReal x4127=(gconst113*r00);
IkReal x4128=((1.0)*sj1);
IkReal x4129=(gconst113*r10);
IkReal x4130=((1.0)*x4122);
IkReal x4131=((1.0)*x4123);
IkReal x4132=(gconst112*x4122);
IkReal x4133=(gconst112*x4123);
evalcond[0]=((((-1.0)*x4125*x4130))+((r22*x4123))+((x4122*x4126)));
evalcond[1]=(((r12*x4123))+cj0+((r11*x4132))+(((-1.0)*x4129*x4130)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4127*x4130))+((r02*x4123))+((r01*x4132)));
evalcond[3]=((((-1.0)*x4125*x4131))+(((-1.0)*cj2*x4128))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4130))+((x4123*x4126)));
evalcond[4]=((((-1.0)*x4127*x4131))+((cj0*x4124))+((r01*x4133))+(((-1.0)*r02*x4130))+(((-1.0)*cj0*sj2*x4128)));
evalcond[5]=(((sj0*x4124))+((r11*x4133))+(((-1.0)*x4129*x4131))+(((-1.0)*r12*x4130))+(((-1.0)*sj0*sj2*x4128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal((((gconst112*r21*sj0))+(((-1.0)*gconst113*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4134.value)+(((1.5707963267949)*(x4135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKcos(j4);
IkReal x4137=IKsin(j4);
IkReal x4138=(cj1*cj2);
IkReal x4139=(gconst113*r20);
IkReal x4140=(gconst112*r21);
IkReal x4141=(gconst113*r00);
IkReal x4142=((1.0)*sj1);
IkReal x4143=(gconst113*r10);
IkReal x4144=((1.0)*x4136);
IkReal x4145=((1.0)*x4137);
IkReal x4146=(gconst112*x4136);
IkReal x4147=(gconst112*x4137);
evalcond[0]=(((r22*x4137))+(((-1.0)*x4139*x4144))+((x4136*x4140)));
evalcond[1]=(cj0+((r11*x4146))+((r12*x4137))+(((-1.0)*x4143*x4144)));
evalcond[2]=((((-1.0)*sj0))+((r01*x4146))+(((-1.0)*x4141*x4144))+((r02*x4137)));
evalcond[3]=(((x4137*x4140))+(((-1.0)*cj1*sj2))+(((-1.0)*x4139*x4145))+(((-1.0)*r22*x4144))+(((-1.0)*cj2*x4142)));
evalcond[4]=(((r01*x4147))+(((-1.0)*r02*x4144))+(((-1.0)*x4141*x4145))+(((-1.0)*cj0*sj2*x4142))+((cj0*x4138)));
evalcond[5]=((((-1.0)*sj0*sj2*x4142))+((r11*x4147))+((sj0*x4138))+(((-1.0)*x4143*x4145))+(((-1.0)*r12*x4144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4148 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst113*r20))+((cj0*gconst112*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4148.value)+(((1.5707963267949)*(x4149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4150=IKcos(j4);
IkReal x4151=IKsin(j4);
IkReal x4152=(cj1*cj2);
IkReal x4153=(gconst113*r20);
IkReal x4154=(gconst112*r21);
IkReal x4155=(gconst113*r00);
IkReal x4156=((1.0)*sj1);
IkReal x4157=(gconst113*r10);
IkReal x4158=((1.0)*x4150);
IkReal x4159=((1.0)*x4151);
IkReal x4160=(gconst112*x4150);
IkReal x4161=(gconst112*x4151);
evalcond[0]=(((x4150*x4154))+(((-1.0)*x4153*x4158))+((r22*x4151)));
evalcond[1]=(cj0+((r12*x4151))+(((-1.0)*x4157*x4158))+((r11*x4160)));
evalcond[2]=(((r01*x4160))+((r02*x4151))+(((-1.0)*sj0))+(((-1.0)*x4155*x4158)));
evalcond[3]=((((-1.0)*x4153*x4159))+(((-1.0)*cj1*sj2))+((x4151*x4154))+(((-1.0)*r22*x4158))+(((-1.0)*cj2*x4156)));
evalcond[4]=(((r01*x4161))+(((-1.0)*x4155*x4159))+(((-1.0)*r02*x4158))+(((-1.0)*cj0*sj2*x4156))+((cj0*x4152)));
evalcond[5]=((((-1.0)*sj0*sj2*x4156))+((sj0*x4152))+(((-1.0)*x4157*x4159))+((r11*x4161))+(((-1.0)*r12*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4162=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4162;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4162);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4163=((1.0)*cj5);
IkReal x4164=((((-1.0)*r21*x4163))+(((-1.0)*r20*sj5)));
j4eval[0]=x4164;
j4eval[1]=((IKabs(((((-1.0)*r10*x4163))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4164);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4165=cj5*cj5;
IkReal x4166=r01*r01;
IkReal x4167=(cj5*r00);
IkReal x4168=(r01*sj5);
IkReal x4169=((((-2.0)*x4167*x4168))+x4166+(((-1.0)*x4165*x4166))+(r02*r02)+((x4165*(r00*r00))));
j4eval[0]=x4169;
j4eval[1]=IKsign(x4169);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4167))+x4168))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4170=cj5*cj5;
IkReal x4171=r01*r01;
IkReal x4172=(r01*sj5);
IkReal x4173=(cj5*r00);
CheckValue<IkReal> x4174 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4173))+x4172)),IKFAST_ATAN2_MAGTHRESH);
if(!x4174.valid){
continue;
}
CheckValue<IkReal> x4175=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4170*x4171))+x4171+((x4170*(r00*r00)))+(r02*r02)+(((-2.0)*x4172*x4173)))),-1);
if(!x4175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4174.value)+(((1.5707963267949)*(x4175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4176=IKcos(j4);
IkReal x4177=IKsin(j4);
IkReal x4178=(cj5*r00);
IkReal x4179=(cj5*r10);
IkReal x4180=((1.0)*sj1);
IkReal x4181=(cj5*r20);
IkReal x4182=((1.0)*x4176);
IkReal x4183=((1.0)*x4177);
IkReal x4184=(sj5*x4176);
IkReal x4185=(sj5*x4177);
evalcond[0]=((((-1.0)*x4181*x4182))+((r21*x4184))+((r22*x4177)));
evalcond[1]=(((r12*x4177))+((r11*x4184))+(((-1.0)*x4179*x4182)));
evalcond[2]=((-1.0)+((r01*x4184))+(((-1.0)*x4178*x4182))+((r02*x4177)));
evalcond[3]=((((-1.0)*r02*x4182))+((r01*x4185))+(((-1.0)*x4178*x4183)));
evalcond[4]=((((-1.0)*sj2*x4180))+(((-1.0)*r12*x4182))+((r11*x4185))+((cj1*cj2))+(((-1.0)*x4179*x4183)));
evalcond[5]=((((-1.0)*x4181*x4183))+((r21*x4185))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4182))+(((-1.0)*cj2*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4186=((1.0)*cj5);
CheckValue<IkReal> x4187=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4186))+(((-1.0)*r20*sj5)))),-1);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x4186)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4187.value)))+(x4188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4189=IKcos(j4);
IkReal x4190=IKsin(j4);
IkReal x4191=(cj5*r00);
IkReal x4192=(cj5*r10);
IkReal x4193=((1.0)*sj1);
IkReal x4194=(cj5*r20);
IkReal x4195=((1.0)*x4189);
IkReal x4196=((1.0)*x4190);
IkReal x4197=(sj5*x4189);
IkReal x4198=(sj5*x4190);
evalcond[0]=((((-1.0)*x4194*x4195))+((r21*x4197))+((r22*x4190)));
evalcond[1]=(((r12*x4190))+((r11*x4197))+(((-1.0)*x4192*x4195)));
evalcond[2]=((-1.0)+((r02*x4190))+((r01*x4197))+(((-1.0)*x4191*x4195)));
evalcond[3]=((((-1.0)*r02*x4195))+((r01*x4198))+(((-1.0)*x4191*x4196)));
evalcond[4]=((((-1.0)*r12*x4195))+((r11*x4198))+((cj1*cj2))+(((-1.0)*x4192*x4196))+(((-1.0)*sj2*x4193)));
evalcond[5]=((((-1.0)*x4194*x4196))+((r21*x4198))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4195))+(((-1.0)*cj2*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4199 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4199.valid){
continue;
}
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4199.value)+(((1.5707963267949)*(x4200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4201=IKcos(j4);
IkReal x4202=IKsin(j4);
IkReal x4203=(cj5*r00);
IkReal x4204=(cj5*r10);
IkReal x4205=((1.0)*sj1);
IkReal x4206=(cj5*r20);
IkReal x4207=((1.0)*x4201);
IkReal x4208=((1.0)*x4202);
IkReal x4209=(sj5*x4201);
IkReal x4210=(sj5*x4202);
evalcond[0]=(((r22*x4202))+(((-1.0)*x4206*x4207))+((r21*x4209)));
evalcond[1]=(((r11*x4209))+(((-1.0)*x4204*x4207))+((r12*x4202)));
evalcond[2]=((-1.0)+((r02*x4202))+((r01*x4209))+(((-1.0)*x4203*x4207)));
evalcond[3]=((((-1.0)*r02*x4207))+(((-1.0)*x4203*x4208))+((r01*x4210)));
evalcond[4]=((((-1.0)*r12*x4207))+((r11*x4210))+(((-1.0)*sj2*x4205))+((cj1*cj2))+(((-1.0)*x4204*x4208)));
evalcond[5]=((((-1.0)*x4206*x4208))+(((-1.0)*cj2*x4205))+(((-1.0)*r22*x4207))+(((-1.0)*cj1*sj2))+((r21*x4210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4211=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4211;
j4eval[1]=IKsign(x4211);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4212=((1.0)*cj5);
IkReal x4213=((((-1.0)*r11*x4212))+(((-1.0)*r10*sj5)));
j4eval[0]=x4213;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4212))+((r21*sj5))))));
j4eval[2]=IKsign(x4213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4214=cj5*cj5;
IkReal x4215=r01*r01;
IkReal x4216=(r01*sj5);
IkReal x4217=(cj5*r00);
IkReal x4218=((((-1.0)*x4214*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4214*x4215))+(((2.0)*x4216*x4217))+(((-1.0)*x4215)));
j4eval[0]=x4218;
j4eval[1]=IKsign(x4218);
j4eval[2]=((IKabs(r02))+(IKabs((x4216+(((-1.0)*x4217))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4219=cj5*cj5;
IkReal x4220=r01*r01;
IkReal x4221=(r01*sj5);
IkReal x4222=(cj5*r00);
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4222))+x4221)),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4219*(r00*r00)))+(((-1.0)*x4220))+(((-1.0)*(r02*r02)))+(((2.0)*x4221*x4222))+((x4219*x4220)))),-1);
if(!x4224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4223.value)+(((1.5707963267949)*(x4224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4225=IKcos(j4);
IkReal x4226=IKsin(j4);
IkReal x4227=(cj5*r00);
IkReal x4228=(cj5*r10);
IkReal x4229=((1.0)*cj2);
IkReal x4230=(cj5*r20);
IkReal x4231=((1.0)*x4225);
IkReal x4232=((1.0)*x4226);
IkReal x4233=(sj5*x4225);
IkReal x4234=(sj5*x4226);
evalcond[0]=(((r22*x4226))+((r21*x4233))+(((-1.0)*x4230*x4231)));
evalcond[1]=((((-1.0)*x4228*x4231))+((r11*x4233))+((r12*x4226)));
evalcond[2]=((1.0)+(((-1.0)*x4227*x4231))+((r01*x4233))+((r02*x4226)));
evalcond[3]=((((-1.0)*x4227*x4232))+((r01*x4234))+(((-1.0)*r02*x4231)));
evalcond[4]=((((-1.0)*r12*x4231))+((sj1*sj2))+(((-1.0)*x4228*x4232))+((r11*x4234))+(((-1.0)*cj1*x4229)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x4231))+((r21*x4234))+(((-1.0)*x4230*x4232))+(((-1.0)*sj1*x4229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4235=((1.0)*cj5);
CheckValue<IkReal> x4236 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x4235)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4236.valid){
continue;
}
CheckValue<IkReal> x4237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4235)))),-1);
if(!x4237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4236.value)+(((1.5707963267949)*(x4237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4238=IKcos(j4);
IkReal x4239=IKsin(j4);
IkReal x4240=(cj5*r00);
IkReal x4241=(cj5*r10);
IkReal x4242=((1.0)*cj2);
IkReal x4243=(cj5*r20);
IkReal x4244=((1.0)*x4238);
IkReal x4245=((1.0)*x4239);
IkReal x4246=(sj5*x4238);
IkReal x4247=(sj5*x4239);
evalcond[0]=((((-1.0)*x4243*x4244))+((r22*x4239))+((r21*x4246)));
evalcond[1]=(((r12*x4239))+(((-1.0)*x4241*x4244))+((r11*x4246)));
evalcond[2]=((1.0)+(((-1.0)*x4240*x4244))+((r01*x4246))+((r02*x4239)));
evalcond[3]=((((-1.0)*x4240*x4245))+((r01*x4247))+(((-1.0)*r02*x4244)));
evalcond[4]=((((-1.0)*x4241*x4245))+(((-1.0)*cj1*x4242))+((sj1*sj2))+(((-1.0)*r12*x4244))+((r11*x4247)));
evalcond[5]=((((-1.0)*x4243*x4245))+(((-1.0)*r22*x4244))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4242))+((r21*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4248.valid){
continue;
}
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4248.value)))+(x4249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4250=IKcos(j4);
IkReal x4251=IKsin(j4);
IkReal x4252=(cj5*r00);
IkReal x4253=(cj5*r10);
IkReal x4254=((1.0)*cj2);
IkReal x4255=(cj5*r20);
IkReal x4256=((1.0)*x4250);
IkReal x4257=((1.0)*x4251);
IkReal x4258=(sj5*x4250);
IkReal x4259=(sj5*x4251);
evalcond[0]=(((r22*x4251))+(((-1.0)*x4255*x4256))+((r21*x4258)));
evalcond[1]=((((-1.0)*x4253*x4256))+((r12*x4251))+((r11*x4258)));
evalcond[2]=((1.0)+(((-1.0)*x4252*x4256))+((r02*x4251))+((r01*x4258)));
evalcond[3]=((((-1.0)*x4252*x4257))+((r01*x4259))+(((-1.0)*r02*x4256)));
evalcond[4]=((((-1.0)*x4253*x4257))+((sj1*sj2))+(((-1.0)*cj1*x4254))+((r11*x4259))+(((-1.0)*r12*x4256)));
evalcond[5]=((((-1.0)*sj1*x4254))+(((-1.0)*x4255*x4257))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4256))+((r21*x4259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4260=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4260);
rxp1_1=(px*r21);
rxp1_2=(r11*x4260);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4261=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4261);
rxp1_1=(px*r21);
rxp1_2=(r11*x4261);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4262=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4262);
rxp1_1=(px*r21);
rxp1_2=(r11*x4262);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4265.valid){
continue;
}
IkReal x4263=x4265.value;
IkReal x4264=(sj0*x4263);
sj4array[0]=((((-1.0)*cj1*cj2*x4264))+((sj1*sj2*x4264)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4266=IKcos(j4);
IkReal x4267=IKsin(j4);
IkReal x4268=(r21*sj5);
IkReal x4269=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x4266);
evalcond[1]=((((-1.0)*sj0))+((r02*x4267)));
evalcond[2]=(((x4266*x4268))+(((-1.0)*x4266*x4269)));
evalcond[3]=(((r11*sj5*x4266))+(((-1.0)*cj5*r10*x4266)));
evalcond[4]=(((x4267*x4268))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4267*x4269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4271=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4271.valid){
continue;
}
IkReal x4270=x4271.value;
sj4array[0]=(((cj1*sj2*x4270))+((cj2*sj1*x4270)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4272=IKcos(j4);
IkReal x4273=IKsin(j4);
IkReal x4274=((1.0)*sj0);
IkReal x4275=((1.0)*cj5);
IkReal x4276=(sj5*x4272);
evalcond[0]=((-1.0)*r02*x4272);
evalcond[1]=(((r02*x4273))+(((-1.0)*x4274)));
evalcond[2]=(((r21*x4276))+(((-1.0)*r20*x4272*x4275)));
evalcond[3]=(((r11*x4276))+(((-1.0)*r10*x4272*x4275)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x4273))+(((-1.0)*r10*x4273*x4275))+(((-1.0)*sj1*sj2*x4274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4277=IKPowWithIntegerCheck(r02,-1);
if(!x4277.valid){
continue;
}
sj4array[0]=(sj0*(x4277.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4278=IKcos(j4);
IkReal x4279=IKsin(j4);
IkReal x4280=((1.0)*sj1);
IkReal x4281=(r21*sj5);
IkReal x4282=(r11*sj5);
IkReal x4283=((1.0)*cj5*x4279);
IkReal x4284=((1.0)*cj5*x4278);
evalcond[0]=((-1.0)*r02*x4278);
evalcond[1]=(((x4278*x4281))+(((-1.0)*r20*x4284)));
evalcond[2]=((((-1.0)*r10*x4284))+((x4278*x4282)));
evalcond[3]=(((x4279*x4281))+(((-1.0)*r20*x4283))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4280)));
evalcond[4]=((((-1.0)*r10*x4283))+((cj1*cj2*sj0))+((x4279*x4282))+(((-1.0)*sj0*sj2*x4280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4285=((1.0)*sj0);
IkReal x4286=((1.0)*cj0);
CheckValue<IkReal> x4287 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4286))+(((-1.0)*cj5*r10*x4285))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r12*x4285))+(((-1.0)*r02*x4286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4287.value)+(((1.5707963267949)*(x4288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4289=IKcos(j4);
IkReal x4290=IKsin(j4);
IkReal x4291=(cj5*r00);
IkReal x4292=(cj1*cj2);
IkReal x4293=(cj5*r10);
IkReal x4294=((1.0)*sj1);
IkReal x4295=(cj5*r20);
IkReal x4296=((1.0)*x4289);
IkReal x4297=((1.0)*x4290);
IkReal x4298=(sj5*x4289);
IkReal x4299=(sj5*x4290);
evalcond[0]=(((r21*x4298))+(((-1.0)*x4295*x4296))+((r22*x4290)));
evalcond[1]=(cj0+(((-1.0)*x4293*x4296))+((r12*x4290))+((r11*x4298)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4291*x4296))+((r01*x4298))+((r02*x4290)));
evalcond[3]=((((-1.0)*r22*x4296))+(((-1.0)*cj2*x4294))+((r21*x4299))+(((-1.0)*cj1*sj2))+(((-1.0)*x4295*x4297)));
evalcond[4]=((((-1.0)*x4291*x4297))+((r01*x4299))+(((-1.0)*cj0*sj2*x4294))+(((-1.0)*r02*x4296))+((cj0*x4292)));
evalcond[5]=(((sj0*x4292))+(((-1.0)*r12*x4296))+(((-1.0)*x4293*x4297))+(((-1.0)*sj0*sj2*x4294))+((r11*x4299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4300 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4300.valid){
continue;
}
CheckValue<IkReal> x4301=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4300.value)+(((1.5707963267949)*(x4301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4302=IKcos(j4);
IkReal x4303=IKsin(j4);
IkReal x4304=(cj5*r00);
IkReal x4305=(cj1*cj2);
IkReal x4306=(cj5*r10);
IkReal x4307=((1.0)*sj1);
IkReal x4308=(cj5*r20);
IkReal x4309=((1.0)*x4302);
IkReal x4310=((1.0)*x4303);
IkReal x4311=(sj5*x4302);
IkReal x4312=(sj5*x4303);
evalcond[0]=(((r22*x4303))+((r21*x4311))+(((-1.0)*x4308*x4309)));
evalcond[1]=(((r12*x4303))+cj0+((r11*x4311))+(((-1.0)*x4306*x4309)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4303))+((r01*x4311))+(((-1.0)*x4304*x4309)));
evalcond[3]=(((r21*x4312))+(((-1.0)*r22*x4309))+(((-1.0)*cj2*x4307))+(((-1.0)*cj1*sj2))+(((-1.0)*x4308*x4310)));
evalcond[4]=(((r01*x4312))+(((-1.0)*cj0*sj2*x4307))+((cj0*x4305))+(((-1.0)*r02*x4309))+(((-1.0)*x4304*x4310)));
evalcond[5]=(((sj0*x4305))+(((-1.0)*r12*x4309))+(((-1.0)*x4306*x4310))+((r11*x4312))+(((-1.0)*sj0*sj2*x4307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4313.value)+(((1.5707963267949)*(x4314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4315=IKcos(j4);
IkReal x4316=IKsin(j4);
IkReal x4317=(cj5*r00);
IkReal x4318=(cj1*cj2);
IkReal x4319=(cj5*r10);
IkReal x4320=((1.0)*sj1);
IkReal x4321=(cj5*r20);
IkReal x4322=((1.0)*x4315);
IkReal x4323=((1.0)*x4316);
IkReal x4324=(sj5*x4315);
IkReal x4325=(sj5*x4316);
evalcond[0]=(((r21*x4324))+(((-1.0)*x4321*x4322))+((r22*x4316)));
evalcond[1]=(cj0+((r12*x4316))+((r11*x4324))+(((-1.0)*x4319*x4322)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4317*x4322))+((r02*x4316))+((r01*x4324)));
evalcond[3]=(((r21*x4325))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x4322))+(((-1.0)*x4321*x4323))+(((-1.0)*cj2*x4320)));
evalcond[4]=((((-1.0)*x4317*x4323))+(((-1.0)*r02*x4322))+((cj0*x4318))+(((-1.0)*cj0*sj2*x4320))+((r01*x4325)));
evalcond[5]=(((sj0*x4318))+(((-1.0)*sj0*sj2*x4320))+(((-1.0)*r12*x4322))+((r11*x4325))+(((-1.0)*x4319*x4323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4326=((1.0)*cj5);
IkReal x4327=((1.0)*sj5);
IkReal x4328=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4328;
j0eval[1]=IKsign(x4328);
j0eval[2]=((IKabs(((((-1.0)*r01*x4326))+(((-1.0)*r00*x4327)))))+(IKabs(((((-1.0)*r10*x4327))+(((-1.0)*r11*x4326))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4329=r21*r21;
IkReal x4330=cj5*cj5;
IkReal x4331=(sj1*sj2);
IkReal x4332=(r21*sj5);
IkReal x4333=(cj1*cj2);
IkReal x4334=(cj5*r20);
IkReal x4335=((((2.0)*x4332*x4334))+(((-1.0)*x4329))+(((-1.0)*x4330*(r20*r20)))+(((-1.0)*(r22*r22)))+((x4329*x4330)));
j4eval[0]=x4335;
j4eval[1]=((IKabs(((((-1.0)*r22*x4333))+((r22*x4331)))))+(IKabs(((((-1.0)*x4333*x4334))+((x4331*x4334))+((x4332*x4333))+(((-1.0)*x4331*x4332))))));
j4eval[2]=IKsign(x4335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.62372043769855)*py))+(((3.38863395693611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((3.38863395693611)*py))))+IKsqr(((((1.62372043769855)*py))+(((3.38863395693611)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((3.38863395693611)*py))), ((((1.62372043769855)*py))+(((3.38863395693611)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4336=IKcos(j0);
IkReal x4337=IKsin(j0);
evalcond[0]=((((0.24)*x4336))+(((-1.0)*px))+(((-0.115)*x4337)));
evalcond[1]=((((0.24)*x4337))+(((-1.0)*py))+(((0.115)*x4336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4338=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4338;
j4eval[1]=IKsign(x4338);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4339=cj5*cj5;
IkReal x4340=(r11*r21);
IkReal x4341=((1.0)*r20);
IkReal x4342=(cj5*sj5);
IkReal x4343=(((r10*r21*x4342))+((x4339*x4340))+(((-1.0)*r12*r22))+((r11*r20*x4342))+(((-1.0)*r10*x4339*x4341))+(((-1.0)*x4340)));
j4eval[0]=x4343;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4341)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4344=cj5*cj5;
IkReal x4345=((1.0)*r20);
IkReal x4346=(r01*r21);
IkReal x4347=(r21*sj5);
IkReal x4348=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4344*x4345))+((x4344*x4346))+((cj5*r00*x4347))+(((-1.0)*x4346)));
j4eval[0]=x4348;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4345))+((cj0*x4347))))));
j4eval[2]=IKsign(x4348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4349=cj5*cj5;
IkReal x4350=((1.0)*r20);
IkReal x4351=(r01*r21);
IkReal x4352=(r21*sj5);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4352))+((x4349*x4351))+(((-1.0)*x4351))+(((-1.0)*r00*x4349*x4350)))),-1);
if(!x4353.valid){
continue;
}
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal((((cj0*x4352))+(((-1.0)*cj0*cj5*x4350)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4353.value)))+(x4354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4355=IKcos(j4);
IkReal x4356=IKsin(j4);
IkReal x4357=(cj5*r00);
IkReal x4358=(cj5*r20);
IkReal x4359=(cj5*r10);
IkReal x4360=(r21*sj5);
IkReal x4361=((1.0)*x4355);
IkReal x4362=((1.0)*x4356);
IkReal x4363=(sj5*x4355);
IkReal x4364=(sj5*x4356);
evalcond[0]=(((r22*x4356))+((x4355*x4360))+(((-1.0)*x4358*x4361)));
evalcond[1]=(cj0+((r11*x4363))+(((-1.0)*x4359*x4361))+((r12*x4356)));
evalcond[2]=((((-1.0)*r22*x4361))+((x4356*x4360))+(((-1.0)*x4358*x4362)));
evalcond[3]=((((-1.0)*x4357*x4362))+cj0+((r01*x4364))+(((-1.0)*r02*x4361)));
evalcond[4]=(sj0+((r11*x4364))+(((-1.0)*x4359*x4362))+(((-1.0)*r12*x4361)));
evalcond[5]=((((-1.0)*x4357*x4361))+(((-1.0)*sj0))+((r01*x4363))+((r02*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4365=cj5*cj5;
IkReal x4366=(r11*r21);
IkReal x4367=((1.0)*r20);
IkReal x4368=(cj5*sj5);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(IKsign((((r11*r20*x4368))+(((-1.0)*r12*r22))+(((-1.0)*x4366))+((x4365*x4366))+((r10*r21*x4368))+(((-1.0)*r10*x4365*x4367)))),-1);
if(!x4370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4369.value)+(((1.5707963267949)*(x4370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4371=IKcos(j4);
IkReal x4372=IKsin(j4);
IkReal x4373=(cj5*r00);
IkReal x4374=(cj5*r20);
IkReal x4375=(cj5*r10);
IkReal x4376=(r21*sj5);
IkReal x4377=((1.0)*x4371);
IkReal x4378=((1.0)*x4372);
IkReal x4379=(sj5*x4371);
IkReal x4380=(sj5*x4372);
evalcond[0]=(((x4371*x4376))+((r22*x4372))+(((-1.0)*x4374*x4377)));
evalcond[1]=((((-1.0)*x4375*x4377))+cj0+((r12*x4372))+((r11*x4379)));
evalcond[2]=((((-1.0)*r22*x4377))+((x4372*x4376))+(((-1.0)*x4374*x4378)));
evalcond[3]=(cj0+(((-1.0)*r02*x4377))+(((-1.0)*x4373*x4378))+((r01*x4380)));
evalcond[4]=((((-1.0)*x4375*x4378))+sj0+((r11*x4380))+(((-1.0)*r12*x4377)));
evalcond[5]=(((r02*x4372))+(((-1.0)*sj0))+((r01*x4379))+(((-1.0)*x4373*x4377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
CheckValue<IkReal> x4382=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4381.value)+(((1.5707963267949)*(x4382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4383=IKcos(j4);
IkReal x4384=IKsin(j4);
IkReal x4385=(cj5*r00);
IkReal x4386=(cj5*r20);
IkReal x4387=(cj5*r10);
IkReal x4388=(r21*sj5);
IkReal x4389=((1.0)*x4383);
IkReal x4390=((1.0)*x4384);
IkReal x4391=(sj5*x4383);
IkReal x4392=(sj5*x4384);
evalcond[0]=(((x4383*x4388))+((r22*x4384))+(((-1.0)*x4386*x4389)));
evalcond[1]=((((-1.0)*x4387*x4389))+cj0+((r11*x4391))+((r12*x4384)));
evalcond[2]=((((-1.0)*r22*x4389))+(((-1.0)*x4386*x4390))+((x4384*x4388)));
evalcond[3]=(((r01*x4392))+(((-1.0)*r02*x4389))+cj0+(((-1.0)*x4385*x4390)));
evalcond[4]=(sj0+(((-1.0)*x4387*x4390))+(((-1.0)*r12*x4389))+((r11*x4392)));
evalcond[5]=(((r01*x4391))+(((-1.0)*sj0))+((r02*x4384))+(((-1.0)*x4385*x4389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((-3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38863395693611)*px))+(((1.62372043769855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))))+IKsqr(((((-3.38863395693611)*px))+(((1.62372043769855)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))), ((((-3.38863395693611)*px))+(((1.62372043769855)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4393=IKcos(j0);
IkReal x4394=IKsin(j0);
evalcond[0]=((((-0.115)*x4394))+(((-1.0)*px))+(((-0.24)*x4393)));
evalcond[1]=((((-1.0)*py))+(((-0.24)*x4394))+(((0.115)*x4393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4395=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4395;
j4eval[1]=IKsign(x4395);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4396=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4396;
j4eval[1]=IKsign(x4396);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4397=cj5*cj5;
IkReal x4398=(r11*r21);
IkReal x4399=((1.0)*r20);
IkReal x4400=(cj5*sj5);
IkReal x4401=((((-1.0)*x4398))+(((-1.0)*r12*r22))+((r11*r20*x4400))+((r10*r21*x4400))+((x4397*x4398))+(((-1.0)*r10*x4397*x4399)));
j4eval[0]=x4401;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4399))))));
j4eval[2]=IKsign(x4401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4402=cj5*cj5;
IkReal x4403=(r11*r21);
IkReal x4404=((1.0)*r20);
IkReal x4405=(cj5*sj5);
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x4403))+((x4402*x4403))+((r11*r20*x4405))+((r10*r21*x4405))+(((-1.0)*r10*x4402*x4404)))),-1);
if(!x4407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4406.value)+(((1.5707963267949)*(x4407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4408=IKcos(j4);
IkReal x4409=IKsin(j4);
IkReal x4410=((1.0)*sj0);
IkReal x4411=(cj5*r00);
IkReal x4412=(cj5*r20);
IkReal x4413=(cj5*r10);
IkReal x4414=((1.0)*x4408);
IkReal x4415=((1.0)*x4409);
IkReal x4416=(sj5*x4408);
IkReal x4417=(sj5*x4409);
evalcond[0]=(((r21*x4416))+((r22*x4409))+(((-1.0)*x4412*x4414)));
evalcond[1]=(((r11*x4416))+cj0+((r12*x4409))+(((-1.0)*x4413*x4414)));
evalcond[2]=(((r21*x4417))+(((-1.0)*x4412*x4415))+(((-1.0)*r22*x4414)));
evalcond[3]=(((r01*x4416))+(((-1.0)*x4411*x4414))+(((-1.0)*x4410))+((r02*x4409)));
evalcond[4]=(((r01*x4417))+(((-1.0)*x4411*x4415))+(((-1.0)*r02*x4414))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4417))+(((-1.0)*r12*x4414))+(((-1.0)*x4410))+(((-1.0)*x4413*x4415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4418 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4418.valid){
continue;
}
CheckValue<IkReal> x4419=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4418.value)+(((1.5707963267949)*(x4419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4420=IKcos(j4);
IkReal x4421=IKsin(j4);
IkReal x4422=((1.0)*sj0);
IkReal x4423=(cj5*r00);
IkReal x4424=(cj5*r20);
IkReal x4425=(cj5*r10);
IkReal x4426=((1.0)*x4420);
IkReal x4427=((1.0)*x4421);
IkReal x4428=(sj5*x4420);
IkReal x4429=(sj5*x4421);
evalcond[0]=(((r22*x4421))+(((-1.0)*x4424*x4426))+((r21*x4428)));
evalcond[1]=((((-1.0)*x4425*x4426))+cj0+((r12*x4421))+((r11*x4428)));
evalcond[2]=((((-1.0)*x4424*x4427))+(((-1.0)*r22*x4426))+((r21*x4429)));
evalcond[3]=((((-1.0)*x4422))+(((-1.0)*x4423*x4426))+((r02*x4421))+((r01*x4428)));
evalcond[4]=((((-1.0)*x4423*x4427))+((r01*x4429))+(((-1.0)*r02*x4426))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4422))+(((-1.0)*x4425*x4427))+(((-1.0)*r12*x4426))+((r11*x4429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
CheckValue<IkReal> x4431=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4430.value)+(((1.5707963267949)*(x4431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4432=IKcos(j4);
IkReal x4433=IKsin(j4);
IkReal x4434=((1.0)*sj0);
IkReal x4435=(cj5*r00);
IkReal x4436=(cj5*r20);
IkReal x4437=(cj5*r10);
IkReal x4438=((1.0)*x4432);
IkReal x4439=((1.0)*x4433);
IkReal x4440=(sj5*x4432);
IkReal x4441=(sj5*x4433);
evalcond[0]=(((r22*x4433))+((r21*x4440))+(((-1.0)*x4436*x4438)));
evalcond[1]=(cj0+((r12*x4433))+((r11*x4440))+(((-1.0)*x4437*x4438)));
evalcond[2]=(((r21*x4441))+(((-1.0)*r22*x4438))+(((-1.0)*x4436*x4439)));
evalcond[3]=(((r01*x4440))+(((-1.0)*x4434))+(((-1.0)*x4435*x4438))+((r02*x4433)));
evalcond[4]=((((-1.0)*r02*x4438))+((r01*x4441))+(((-1.0)*x4435*x4439))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4434))+(((-1.0)*r12*x4438))+((r11*x4441))+(((-1.0)*x4437*x4439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428704566635601)*px))+(((1.88257222739981)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.428704566635601)*py))+(((1.88257222739981)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428704566635601)*px))+(((1.88257222739981)*py))))+IKsqr(((((0.428704566635601)*py))+(((1.88257222739981)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428704566635601)*px))+(((1.88257222739981)*py))), ((((0.428704566635601)*py))+(((1.88257222739981)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4442=IKcos(j0);
IkReal x4443=IKsin(j0);
evalcond[0]=((((-0.115)*x4443))+(((0.505)*x4442))+(((-1.0)*px)));
evalcond[1]=((((0.115)*x4442))+(((0.505)*x4443))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4444=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4444;
j4eval[1]=IKsign(x4444);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4445=cj5*cj5;
IkReal x4446=(r11*r21);
IkReal x4447=((1.0)*r20);
IkReal x4448=(cj5*sj5);
IkReal x4449=((((-1.0)*r10*x4445*x4447))+(((-1.0)*r12*r22))+((r11*r20*x4448))+(((-1.0)*x4446))+((r10*r21*x4448))+((x4445*x4446)));
j4eval[0]=x4449;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x4447))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4450=cj5*cj5;
IkReal x4451=((1.0)*r20);
IkReal x4452=(r01*r21);
IkReal x4453=(r21*sj5);
IkReal x4454=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4450*x4452))+(((-1.0)*x4452))+(((-1.0)*r00*x4450*x4451))+((cj5*r00*x4453)));
j4eval[0]=x4454;
j4eval[1]=((IKabs((((cj0*x4453))+(((-1.0)*cj0*cj5*x4451)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4454);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4455=cj5*cj5;
IkReal x4456=((1.0)*r20);
IkReal x4457=(r01*r21);
IkReal x4458=(r21*sj5);
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal((((cj0*x4458))+(((-1.0)*cj0*cj5*x4456)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4455*x4457))+(((-1.0)*x4457))+(((-1.0)*r00*x4455*x4456))+((cj5*r00*x4458)))),-1);
if(!x4460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4459.value)+(((1.5707963267949)*(x4460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4461=IKcos(j4);
IkReal x4462=IKsin(j4);
IkReal x4463=(cj5*r00);
IkReal x4464=(cj5*r20);
IkReal x4465=(cj5*r10);
IkReal x4466=(r21*sj5);
IkReal x4467=((1.0)*x4461);
IkReal x4468=((1.0)*x4462);
IkReal x4469=(sj5*x4461);
IkReal x4470=(sj5*x4462);
evalcond[0]=((((-1.0)*x4464*x4467))+((r22*x4462))+((x4461*x4466)));
evalcond[1]=((((-1.0)*x4465*x4467))+cj0+((r12*x4462))+((r11*x4469)));
evalcond[2]=((((-1.0)*x4464*x4468))+(((-1.0)*r22*x4467))+((x4462*x4466)));
evalcond[3]=((((-1.0)*x4463*x4468))+cj0+(((-1.0)*r02*x4467))+((r01*x4470)));
evalcond[4]=(sj0+(((-1.0)*x4465*x4468))+(((-1.0)*r12*x4467))+((r11*x4470)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4463*x4467))+((r01*x4469))+((r02*x4462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4471=cj5*cj5;
IkReal x4472=(r11*r21);
IkReal x4473=((1.0)*r20);
IkReal x4474=(cj5*sj5);
CheckValue<IkReal> x4475 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4475.valid){
continue;
}
CheckValue<IkReal> x4476=IKPowWithIntegerCheck(IKsign((((x4471*x4472))+((r11*r20*x4474))+(((-1.0)*r12*r22))+((r10*r21*x4474))+(((-1.0)*r10*x4471*x4473))+(((-1.0)*x4472)))),-1);
if(!x4476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4475.value)+(((1.5707963267949)*(x4476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4477=IKcos(j4);
IkReal x4478=IKsin(j4);
IkReal x4479=(cj5*r00);
IkReal x4480=(cj5*r20);
IkReal x4481=(cj5*r10);
IkReal x4482=(r21*sj5);
IkReal x4483=((1.0)*x4477);
IkReal x4484=((1.0)*x4478);
IkReal x4485=(sj5*x4477);
IkReal x4486=(sj5*x4478);
evalcond[0]=(((x4477*x4482))+(((-1.0)*x4480*x4483))+((r22*x4478)));
evalcond[1]=((((-1.0)*x4481*x4483))+((r11*x4485))+cj0+((r12*x4478)));
evalcond[2]=((((-1.0)*x4480*x4484))+((x4478*x4482))+(((-1.0)*r22*x4483)));
evalcond[3]=(cj0+(((-1.0)*x4479*x4484))+((r01*x4486))+(((-1.0)*r02*x4483)));
evalcond[4]=((((-1.0)*x4481*x4484))+((r11*x4486))+sj0+(((-1.0)*r12*x4483)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4479*x4483))+((r02*x4478))+((r01*x4485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4487 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4487.valid){
continue;
}
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4487.value)+(((1.5707963267949)*(x4488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4489=IKcos(j4);
IkReal x4490=IKsin(j4);
IkReal x4491=(cj5*r00);
IkReal x4492=(cj5*r20);
IkReal x4493=(cj5*r10);
IkReal x4494=(r21*sj5);
IkReal x4495=((1.0)*x4489);
IkReal x4496=((1.0)*x4490);
IkReal x4497=(sj5*x4489);
IkReal x4498=(sj5*x4490);
evalcond[0]=((((-1.0)*x4492*x4495))+((r22*x4490))+((x4489*x4494)));
evalcond[1]=(((r12*x4490))+cj0+((r11*x4497))+(((-1.0)*x4493*x4495)));
evalcond[2]=((((-1.0)*x4492*x4496))+((x4490*x4494))+(((-1.0)*r22*x4495)));
evalcond[3]=((((-1.0)*r02*x4495))+cj0+(((-1.0)*x4491*x4496))+((r01*x4498)));
evalcond[4]=(sj0+((r11*x4498))+(((-1.0)*x4493*x4496))+(((-1.0)*r12*x4495)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4490))+(((-1.0)*x4491*x4495))+((r01*x4497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.30324909747292)*px))+(((1.80505415162455)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.30324909747292)*py))+(((1.80505415162455)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.30324909747292)*px))+(((1.80505415162455)*py))))+IKsqr(((((8.30324909747292)*py))+(((1.80505415162455)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.30324909747292)*px))+(((1.80505415162455)*py))), ((((8.30324909747292)*py))+(((1.80505415162455)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4499=IKcos(j0);
IkReal x4500=IKsin(j0);
evalcond[0]=((((0.025)*x4499))+(((-0.115)*x4500))+(((-1.0)*px)));
evalcond[1]=((((0.025)*x4500))+(((0.115)*x4499))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4501=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4501;
j4eval[1]=IKsign(x4501);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4502=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4502;
j4eval[1]=IKsign(x4502);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4503=cj5*cj5;
IkReal x4504=(r11*r21);
IkReal x4505=((1.0)*r20);
IkReal x4506=(cj5*sj5);
IkReal x4507=(((r10*r21*x4506))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4503*x4505))+((r11*r20*x4506))+((x4503*x4504))+(((-1.0)*x4504)));
j4eval[0]=x4507;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4505)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4508=cj5*cj5;
IkReal x4509=(r11*r21);
IkReal x4510=((1.0)*r20);
IkReal x4511=(cj5*sj5);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign((((x4508*x4509))+(((-1.0)*r12*r22))+((r10*r21*x4511))+(((-1.0)*x4509))+((r11*r20*x4511))+(((-1.0)*r10*x4508*x4510)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKcos(j4);
IkReal x4515=IKsin(j4);
IkReal x4516=((1.0)*sj0);
IkReal x4517=(cj5*r00);
IkReal x4518=(cj5*r20);
IkReal x4519=(cj5*r10);
IkReal x4520=((1.0)*x4514);
IkReal x4521=((1.0)*x4515);
IkReal x4522=(sj5*x4514);
IkReal x4523=(sj5*x4515);
evalcond[0]=(((r21*x4522))+(((-1.0)*x4518*x4520))+((r22*x4515)));
evalcond[1]=(((r11*x4522))+cj0+((r12*x4515))+(((-1.0)*x4519*x4520)));
evalcond[2]=(((r21*x4523))+(((-1.0)*r22*x4520))+(((-1.0)*x4518*x4521)));
evalcond[3]=(((r02*x4515))+((r01*x4522))+(((-1.0)*x4517*x4520))+(((-1.0)*x4516)));
evalcond[4]=(((r01*x4523))+(((-1.0)*x4517*x4521))+(((-1.0)*r02*x4520))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4520))+((r11*x4523))+(((-1.0)*x4516))+(((-1.0)*x4519*x4521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4524 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4524.valid){
continue;
}
CheckValue<IkReal> x4525=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4524.value)+(((1.5707963267949)*(x4525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4526=IKcos(j4);
IkReal x4527=IKsin(j4);
IkReal x4528=((1.0)*sj0);
IkReal x4529=(cj5*r00);
IkReal x4530=(cj5*r20);
IkReal x4531=(cj5*r10);
IkReal x4532=((1.0)*x4526);
IkReal x4533=((1.0)*x4527);
IkReal x4534=(sj5*x4526);
IkReal x4535=(sj5*x4527);
evalcond[0]=((((-1.0)*x4530*x4532))+((r21*x4534))+((r22*x4527)));
evalcond[1]=(((r12*x4527))+cj0+(((-1.0)*x4531*x4532))+((r11*x4534)));
evalcond[2]=((((-1.0)*x4530*x4533))+((r21*x4535))+(((-1.0)*r22*x4532)));
evalcond[3]=(((r01*x4534))+(((-1.0)*x4528))+((r02*x4527))+(((-1.0)*x4529*x4532)));
evalcond[4]=(((r01*x4535))+(((-1.0)*x4529*x4533))+(((-1.0)*r02*x4532))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4528))+(((-1.0)*x4531*x4533))+(((-1.0)*r12*x4532))+((r11*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4536 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4536.value)+(((1.5707963267949)*(x4537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4538=IKcos(j4);
IkReal x4539=IKsin(j4);
IkReal x4540=((1.0)*sj0);
IkReal x4541=(cj5*r00);
IkReal x4542=(cj5*r20);
IkReal x4543=(cj5*r10);
IkReal x4544=((1.0)*x4538);
IkReal x4545=((1.0)*x4539);
IkReal x4546=(sj5*x4538);
IkReal x4547=(sj5*x4539);
evalcond[0]=((((-1.0)*x4542*x4544))+((r22*x4539))+((r21*x4546)));
evalcond[1]=(cj0+((r12*x4539))+((r11*x4546))+(((-1.0)*x4543*x4544)));
evalcond[2]=((((-1.0)*r22*x4544))+(((-1.0)*x4542*x4545))+((r21*x4547)));
evalcond[3]=(((r01*x4546))+(((-1.0)*x4541*x4544))+((r02*x4539))+(((-1.0)*x4540)));
evalcond[4]=((((-1.0)*r02*x4544))+((r01*x4547))+(((-1.0)*x4541*x4545))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4544))+((r11*x4547))+(((-1.0)*x4543*x4545))+(((-1.0)*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((-3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38863395693611)*px))+(((1.62372043769855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))))+IKsqr(((((-3.38863395693611)*px))+(((1.62372043769855)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))), ((((-3.38863395693611)*px))+(((1.62372043769855)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4548=IKcos(j0);
IkReal x4549=IKsin(j0);
evalcond[0]=((((-0.115)*x4549))+(((-1.0)*px))+(((-0.24)*x4548)));
evalcond[1]=((((0.115)*x4548))+(((-1.0)*py))+(((-0.24)*x4549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4550=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4550;
j4eval[1]=IKsign(x4550);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4551=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4551;
j4eval[1]=IKsign(x4551);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4552=cj5*cj5;
IkReal x4553=(r11*r21);
IkReal x4554=((1.0)*r20);
IkReal x4555=(cj5*sj5);
IkReal x4556=(((r11*r20*x4555))+((x4552*x4553))+((r10*r21*x4555))+(((-1.0)*r12*r22))+(((-1.0)*x4553))+(((-1.0)*r10*x4552*x4554)));
j4eval[0]=x4556;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4554)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4557=cj5*cj5;
IkReal x4558=(r11*r21);
IkReal x4559=((1.0)*r20);
IkReal x4560=(cj5*sj5);
CheckValue<IkReal> x4561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4561.valid){
continue;
}
CheckValue<IkReal> x4562=IKPowWithIntegerCheck(IKsign((((r10*r21*x4560))+((r11*r20*x4560))+(((-1.0)*r10*x4557*x4559))+(((-1.0)*r12*r22))+(((-1.0)*x4558))+((x4557*x4558)))),-1);
if(!x4562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4561.value)+(((1.5707963267949)*(x4562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4563=IKcos(j4);
IkReal x4564=IKsin(j4);
IkReal x4565=((1.0)*sj0);
IkReal x4566=(cj5*r00);
IkReal x4567=(cj5*r20);
IkReal x4568=(cj5*r10);
IkReal x4569=((1.0)*x4563);
IkReal x4570=((1.0)*x4564);
IkReal x4571=(sj5*x4563);
IkReal x4572=(sj5*x4564);
evalcond[0]=((((-1.0)*x4567*x4569))+((r22*x4564))+((r21*x4571)));
evalcond[1]=(cj0+((r12*x4564))+((r11*x4571))+(((-1.0)*x4568*x4569)));
evalcond[2]=((((-1.0)*x4567*x4570))+((r21*x4572))+(((-1.0)*r22*x4569)));
evalcond[3]=((((-1.0)*x4566*x4569))+((r02*x4564))+((r01*x4571))+(((-1.0)*x4565)));
evalcond[4]=((((-1.0)*x4566*x4570))+(((-1.0)*r02*x4569))+((r01*x4572))+(((-1.0)*cj0)));
evalcond[5]=(((r11*x4572))+(((-1.0)*x4568*x4570))+(((-1.0)*r12*x4569))+(((-1.0)*x4565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4573 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4573.valid){
continue;
}
CheckValue<IkReal> x4574=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4573.value)+(((1.5707963267949)*(x4574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4575=IKcos(j4);
IkReal x4576=IKsin(j4);
IkReal x4577=((1.0)*sj0);
IkReal x4578=(cj5*r00);
IkReal x4579=(cj5*r20);
IkReal x4580=(cj5*r10);
IkReal x4581=((1.0)*x4575);
IkReal x4582=((1.0)*x4576);
IkReal x4583=(sj5*x4575);
IkReal x4584=(sj5*x4576);
evalcond[0]=(((r21*x4583))+(((-1.0)*x4579*x4581))+((r22*x4576)));
evalcond[1]=(cj0+(((-1.0)*x4580*x4581))+((r12*x4576))+((r11*x4583)));
evalcond[2]=(((r21*x4584))+(((-1.0)*r22*x4581))+(((-1.0)*x4579*x4582)));
evalcond[3]=((((-1.0)*x4577))+((r02*x4576))+((r01*x4583))+(((-1.0)*x4578*x4581)));
evalcond[4]=((((-1.0)*r02*x4581))+((r01*x4584))+(((-1.0)*cj0))+(((-1.0)*x4578*x4582)));
evalcond[5]=((((-1.0)*x4577))+(((-1.0)*x4580*x4582))+((r11*x4584))+(((-1.0)*r12*x4581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4585.value)+(((1.5707963267949)*(x4586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4587=IKcos(j4);
IkReal x4588=IKsin(j4);
IkReal x4589=((1.0)*sj0);
IkReal x4590=(cj5*r00);
IkReal x4591=(cj5*r20);
IkReal x4592=(cj5*r10);
IkReal x4593=((1.0)*x4587);
IkReal x4594=((1.0)*x4588);
IkReal x4595=(sj5*x4587);
IkReal x4596=(sj5*x4588);
evalcond[0]=(((r21*x4595))+((r22*x4588))+(((-1.0)*x4591*x4593)));
evalcond[1]=(cj0+(((-1.0)*x4592*x4593))+((r11*x4595))+((r12*x4588)));
evalcond[2]=(((r21*x4596))+(((-1.0)*r22*x4593))+(((-1.0)*x4591*x4594)));
evalcond[3]=((((-1.0)*x4589))+((r02*x4588))+(((-1.0)*x4590*x4593))+((r01*x4595)));
evalcond[4]=((((-1.0)*r02*x4593))+(((-1.0)*x4590*x4594))+(((-1.0)*cj0))+((r01*x4596)));
evalcond[5]=((((-1.0)*x4589))+(((-1.0)*x4592*x4594))+((r11*x4596))+(((-1.0)*r12*x4593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.62372043769855)*py))+(((3.38863395693611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((3.38863395693611)*py))))+IKsqr(((((1.62372043769855)*py))+(((3.38863395693611)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((3.38863395693611)*py))), ((((1.62372043769855)*py))+(((3.38863395693611)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4597=IKcos(j0);
IkReal x4598=IKsin(j0);
evalcond[0]=((((-0.115)*x4598))+(((-1.0)*px))+(((0.24)*x4597)));
evalcond[1]=((((0.115)*x4597))+(((-1.0)*py))+(((0.24)*x4598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4599=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4599;
j4eval[1]=IKsign(x4599);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4600=cj5*cj5;
IkReal x4601=(r11*r21);
IkReal x4602=((1.0)*r20);
IkReal x4603=(cj5*sj5);
IkReal x4604=((((-1.0)*x4601))+(((-1.0)*r12*r22))+((x4600*x4601))+((r11*r20*x4603))+(((-1.0)*r10*x4600*x4602))+((r10*r21*x4603)));
j4eval[0]=x4604;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4602)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x4605=cj5*cj5;
IkReal x4606=((1.0)*r20);
IkReal x4607=(r01*r21);
IkReal x4608=(r21*sj5);
IkReal x4609=(((cj5*r01*r20*sj5))+((cj5*r00*x4608))+(((-1.0)*r02*r22))+((x4605*x4607))+(((-1.0)*x4607))+(((-1.0)*r00*x4605*x4606)));
j4eval[0]=x4609;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4608))+(((-1.0)*cj0*cj5*x4606))))));
j4eval[2]=IKsign(x4609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4610=cj5*cj5;
IkReal x4611=((1.0)*r20);
IkReal x4612=(r01*r21);
IkReal x4613=(r21*sj5);
CheckValue<IkReal> x4614 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x4611))+((cj0*x4613)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4614.valid){
continue;
}
CheckValue<IkReal> x4615=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4612))+(((-1.0)*r00*x4610*x4611))+((cj5*r00*x4613))+((x4610*x4612)))),-1);
if(!x4615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4614.value)+(((1.5707963267949)*(x4615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4616=IKcos(j4);
IkReal x4617=IKsin(j4);
IkReal x4618=(cj5*r00);
IkReal x4619=(cj5*r20);
IkReal x4620=(cj5*r10);
IkReal x4621=(r21*sj5);
IkReal x4622=((1.0)*x4616);
IkReal x4623=((1.0)*x4617);
IkReal x4624=(sj5*x4616);
IkReal x4625=(sj5*x4617);
evalcond[0]=(((r22*x4617))+((x4616*x4621))+(((-1.0)*x4619*x4622)));
evalcond[1]=(cj0+((r11*x4624))+((r12*x4617))+(((-1.0)*x4620*x4622)));
evalcond[2]=((((-1.0)*r22*x4622))+(((-1.0)*x4619*x4623))+((x4617*x4621)));
evalcond[3]=(cj0+(((-1.0)*r02*x4622))+(((-1.0)*x4618*x4623))+((r01*x4625)));
evalcond[4]=(sj0+((r11*x4625))+(((-1.0)*x4620*x4623))+(((-1.0)*r12*x4622)));
evalcond[5]=((((-1.0)*sj0))+((r02*x4617))+(((-1.0)*x4618*x4622))+((r01*x4624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4626=cj5*cj5;
IkReal x4627=(r11*r21);
IkReal x4628=((1.0)*r20);
IkReal x4629=(cj5*sj5);
CheckValue<IkReal> x4630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4628))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x4627))+((r11*r20*x4629))+(((-1.0)*r10*x4626*x4628))+((x4626*x4627))+((r10*r21*x4629)))),-1);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4630.value)+(((1.5707963267949)*(x4631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKcos(j4);
IkReal x4633=IKsin(j4);
IkReal x4634=(cj5*r00);
IkReal x4635=(cj5*r20);
IkReal x4636=(cj5*r10);
IkReal x4637=(r21*sj5);
IkReal x4638=((1.0)*x4632);
IkReal x4639=((1.0)*x4633);
IkReal x4640=(sj5*x4632);
IkReal x4641=(sj5*x4633);
evalcond[0]=((((-1.0)*x4635*x4638))+((x4632*x4637))+((r22*x4633)));
evalcond[1]=(((r12*x4633))+cj0+((r11*x4640))+(((-1.0)*x4636*x4638)));
evalcond[2]=(((x4633*x4637))+(((-1.0)*x4635*x4639))+(((-1.0)*r22*x4638)));
evalcond[3]=(cj0+(((-1.0)*r02*x4638))+(((-1.0)*x4634*x4639))+((r01*x4641)));
evalcond[4]=(sj0+((r11*x4641))+(((-1.0)*x4636*x4639))+(((-1.0)*r12*x4638)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4634*x4638))+((r01*x4640))+((r02*x4633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
CheckValue<IkReal> x4643=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4642.value)+(((1.5707963267949)*(x4643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4644=IKcos(j4);
IkReal x4645=IKsin(j4);
IkReal x4646=(cj5*r00);
IkReal x4647=(cj5*r20);
IkReal x4648=(cj5*r10);
IkReal x4649=(r21*sj5);
IkReal x4650=((1.0)*x4644);
IkReal x4651=((1.0)*x4645);
IkReal x4652=(sj5*x4644);
IkReal x4653=(sj5*x4645);
evalcond[0]=((((-1.0)*x4647*x4650))+((r22*x4645))+((x4644*x4649)));
evalcond[1]=(((r11*x4652))+cj0+((r12*x4645))+(((-1.0)*x4648*x4650)));
evalcond[2]=((((-1.0)*x4647*x4651))+(((-1.0)*r22*x4650))+((x4645*x4649)));
evalcond[3]=(cj0+(((-1.0)*r02*x4650))+(((-1.0)*x4646*x4651))+((r01*x4653)));
evalcond[4]=(sj0+((r11*x4653))+(((-1.0)*x4648*x4651))+(((-1.0)*r12*x4650)));
evalcond[5]=(((r02*x4645))+(((-1.0)*sj0))+(((-1.0)*x4646*x4650))+((r01*x4652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428704566635601)*px))+(((-1.88257222739981)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.428704566635601)*py))+(((-1.88257222739981)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428704566635601)*px))+(((-1.88257222739981)*py))))+IKsqr(((((0.428704566635601)*py))+(((-1.88257222739981)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428704566635601)*px))+(((-1.88257222739981)*py))), ((((0.428704566635601)*py))+(((-1.88257222739981)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4654=IKcos(j0);
IkReal x4655=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.505)*x4654))+(((-0.115)*x4655)));
evalcond[1]=((((-1.0)*py))+(((-0.505)*x4655))+(((0.115)*x4654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4656=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4656;
j4eval[1]=IKsign(x4656);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4657=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4657;
j4eval[1]=IKsign(x4657);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4658=cj5*cj5;
IkReal x4659=(r11*r21);
IkReal x4660=((1.0)*r20);
IkReal x4661=(cj5*sj5);
IkReal x4662=((((-1.0)*r10*x4658*x4660))+((r10*r21*x4661))+(((-1.0)*r12*r22))+((r11*r20*x4661))+(((-1.0)*x4659))+((x4658*x4659)));
j4eval[0]=x4662;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4660)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=cj5*cj5;
IkReal x4664=(r11*r21);
IkReal x4665=((1.0)*r20);
IkReal x4666=(cj5*sj5);
CheckValue<IkReal> x4667=IKPowWithIntegerCheck(IKsign((((r10*r21*x4666))+(((-1.0)*x4664))+(((-1.0)*r12*r22))+((r11*r20*x4666))+((x4663*x4664))+(((-1.0)*r10*x4663*x4665)))),-1);
if(!x4667.valid){
continue;
}
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4667.value)))+(x4668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4669=IKcos(j4);
IkReal x4670=IKsin(j4);
IkReal x4671=((1.0)*sj0);
IkReal x4672=(cj5*r00);
IkReal x4673=(cj5*r20);
IkReal x4674=(cj5*r10);
IkReal x4675=((1.0)*x4669);
IkReal x4676=((1.0)*x4670);
IkReal x4677=(sj5*x4669);
IkReal x4678=(sj5*x4670);
evalcond[0]=(((r21*x4677))+((r22*x4670))+(((-1.0)*x4673*x4675)));
evalcond[1]=(cj0+(((-1.0)*x4674*x4675))+((r11*x4677))+((r12*x4670)));
evalcond[2]=(((r21*x4678))+(((-1.0)*r22*x4675))+(((-1.0)*x4673*x4676)));
evalcond[3]=(((r02*x4670))+(((-1.0)*x4671))+(((-1.0)*x4672*x4675))+((r01*x4677)));
evalcond[4]=((((-1.0)*r02*x4675))+(((-1.0)*x4672*x4676))+((r01*x4678))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4674*x4676))+((r11*x4678))+(((-1.0)*r12*x4675))+(((-1.0)*x4671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
CheckValue<IkReal> x4680=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4679.value)+(((1.5707963267949)*(x4680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4681=IKcos(j4);
IkReal x4682=IKsin(j4);
IkReal x4683=((1.0)*sj0);
IkReal x4684=(cj5*r00);
IkReal x4685=(cj5*r20);
IkReal x4686=(cj5*r10);
IkReal x4687=((1.0)*x4681);
IkReal x4688=((1.0)*x4682);
IkReal x4689=(sj5*x4681);
IkReal x4690=(sj5*x4682);
evalcond[0]=(((r22*x4682))+(((-1.0)*x4685*x4687))+((r21*x4689)));
evalcond[1]=((((-1.0)*x4686*x4687))+cj0+((r12*x4682))+((r11*x4689)));
evalcond[2]=((((-1.0)*x4685*x4688))+((r21*x4690))+(((-1.0)*r22*x4687)));
evalcond[3]=((((-1.0)*x4684*x4687))+((r02*x4682))+((r01*x4689))+(((-1.0)*x4683)));
evalcond[4]=((((-1.0)*x4684*x4688))+((r01*x4690))+(((-1.0)*r02*x4687))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x4686*x4688))+((r11*x4690))+(((-1.0)*x4683))+(((-1.0)*r12*x4687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4691 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4691.valid){
continue;
}
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4691.value)+(((1.5707963267949)*(x4692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4693=IKcos(j4);
IkReal x4694=IKsin(j4);
IkReal x4695=((1.0)*sj0);
IkReal x4696=(cj5*r00);
IkReal x4697=(cj5*r20);
IkReal x4698=(cj5*r10);
IkReal x4699=((1.0)*x4693);
IkReal x4700=((1.0)*x4694);
IkReal x4701=(sj5*x4693);
IkReal x4702=(sj5*x4694);
evalcond[0]=(((r21*x4701))+((r22*x4694))+(((-1.0)*x4697*x4699)));
evalcond[1]=((((-1.0)*x4698*x4699))+cj0+((r12*x4694))+((r11*x4701)));
evalcond[2]=((((-1.0)*x4697*x4700))+((r21*x4702))+(((-1.0)*r22*x4699)));
evalcond[3]=(((r02*x4694))+(((-1.0)*x4696*x4699))+((r01*x4701))+(((-1.0)*x4695)));
evalcond[4]=((((-1.0)*x4696*x4700))+(((-1.0)*r02*x4699))+((r01*x4702))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4699))+(((-1.0)*x4698*x4700))+(((-1.0)*x4695))+((r11*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.80505415162455)*py))+(((-8.30324909747292)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.80505415162455)*px))+(((8.30324909747292)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.80505415162455)*py))+(((-8.30324909747292)*px))))+IKsqr(((((-1.80505415162455)*px))+(((8.30324909747292)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.80505415162455)*py))+(((-8.30324909747292)*px))), ((((-1.80505415162455)*px))+(((8.30324909747292)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4703=IKcos(j0);
IkReal x4704=IKsin(j0);
evalcond[0]=((((-0.115)*x4704))+(((-1.0)*px))+(((-0.025)*x4703)));
evalcond[1]=((((0.115)*x4703))+(((-1.0)*py))+(((-0.025)*x4704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4705=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4705;
j4eval[1]=IKsign(x4705);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4706=cj5*cj5;
IkReal x4707=(r11*r21);
IkReal x4708=((1.0)*r20);
IkReal x4709=(cj5*sj5);
IkReal x4710=(((r10*r21*x4709))+(((-1.0)*x4707))+(((-1.0)*r12*r22))+(((-1.0)*r10*x4706*x4708))+((x4706*x4707))+((r11*r20*x4709)));
j4eval[0]=x4710;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4708))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4711=cj5*cj5;
IkReal x4712=((1.0)*r20);
IkReal x4713=(r01*r21);
IkReal x4714=(r21*sj5);
IkReal x4715=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4713))+((x4711*x4713))+((cj5*r00*x4714))+(((-1.0)*r00*x4711*x4712)));
j4eval[0]=x4715;
j4eval[1]=((IKabs((((cj0*x4714))+(((-1.0)*cj0*cj5*x4712)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4715);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4716=cj5*cj5;
IkReal x4717=((1.0)*r20);
IkReal x4718=(r01*r21);
IkReal x4719=(r21*sj5);
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal((((cj0*x4719))+(((-1.0)*cj0*cj5*x4717)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
CheckValue<IkReal> x4721=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x4718))+((x4716*x4718))+((cj5*r00*x4719))+(((-1.0)*r00*x4716*x4717)))),-1);
if(!x4721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4720.value)+(((1.5707963267949)*(x4721.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4722=IKcos(j4);
IkReal x4723=IKsin(j4);
IkReal x4724=(cj5*r00);
IkReal x4725=(cj5*r20);
IkReal x4726=(cj5*r10);
IkReal x4727=(r21*sj5);
IkReal x4728=((1.0)*x4722);
IkReal x4729=((1.0)*x4723);
IkReal x4730=(sj5*x4722);
IkReal x4731=(sj5*x4723);
evalcond[0]=((((-1.0)*x4725*x4728))+((x4722*x4727))+((r22*x4723)));
evalcond[1]=(((r11*x4730))+cj0+(((-1.0)*x4726*x4728))+((r12*x4723)));
evalcond[2]=(((x4723*x4727))+(((-1.0)*x4725*x4729))+(((-1.0)*r22*x4728)));
evalcond[3]=(cj0+(((-1.0)*x4724*x4729))+(((-1.0)*r02*x4728))+((r01*x4731)));
evalcond[4]=(((r11*x4731))+sj0+(((-1.0)*r12*x4728))+(((-1.0)*x4726*x4729)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4724*x4728))+((r02*x4723))+((r01*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4732=cj5*cj5;
IkReal x4733=(r11*r21);
IkReal x4734=((1.0)*r20);
IkReal x4735=(cj5*sj5);
CheckValue<IkReal> x4736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x4734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4736.valid){
continue;
}
CheckValue<IkReal> x4737=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4733))+(((-1.0)*r12*r22))+((r10*r21*x4735))+((x4732*x4733))+(((-1.0)*r10*x4732*x4734))+((r11*r20*x4735)))),-1);
if(!x4737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4736.value)+(((1.5707963267949)*(x4737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4738=IKcos(j4);
IkReal x4739=IKsin(j4);
IkReal x4740=(cj5*r00);
IkReal x4741=(cj5*r20);
IkReal x4742=(cj5*r10);
IkReal x4743=(r21*sj5);
IkReal x4744=((1.0)*x4738);
IkReal x4745=((1.0)*x4739);
IkReal x4746=(sj5*x4738);
IkReal x4747=(sj5*x4739);
evalcond[0]=(((x4738*x4743))+(((-1.0)*x4741*x4744))+((r22*x4739)));
evalcond[1]=(((r11*x4746))+cj0+(((-1.0)*x4742*x4744))+((r12*x4739)));
evalcond[2]=((((-1.0)*r22*x4744))+(((-1.0)*x4741*x4745))+((x4739*x4743)));
evalcond[3]=(cj0+((r01*x4747))+(((-1.0)*x4740*x4745))+(((-1.0)*r02*x4744)));
evalcond[4]=(((r11*x4747))+sj0+(((-1.0)*r12*x4744))+(((-1.0)*x4742*x4745)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4746))+((r02*x4739))+(((-1.0)*x4740*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
CheckValue<IkReal> x4749=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4748.value)+(((1.5707963267949)*(x4749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4750=IKcos(j4);
IkReal x4751=IKsin(j4);
IkReal x4752=(cj5*r00);
IkReal x4753=(cj5*r20);
IkReal x4754=(cj5*r10);
IkReal x4755=(r21*sj5);
IkReal x4756=((1.0)*x4750);
IkReal x4757=((1.0)*x4751);
IkReal x4758=(sj5*x4750);
IkReal x4759=(sj5*x4751);
evalcond[0]=((((-1.0)*x4753*x4756))+((x4750*x4755))+((r22*x4751)));
evalcond[1]=(((r12*x4751))+(((-1.0)*x4754*x4756))+cj0+((r11*x4758)));
evalcond[2]=((((-1.0)*x4753*x4757))+(((-1.0)*r22*x4756))+((x4751*x4755)));
evalcond[3]=(((r01*x4759))+cj0+(((-1.0)*x4752*x4757))+(((-1.0)*r02*x4756)));
evalcond[4]=((((-1.0)*x4754*x4757))+sj0+((r11*x4759))+(((-1.0)*r12*x4756)));
evalcond[5]=(((r01*x4758))+(((-1.0)*sj0))+(((-1.0)*x4752*x4756))+((r02*x4751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4760=(cj1*cj2);
IkReal x4761=(cj1*sj2);
IkReal x4762=(cj2*sj1);
IkReal x4763=(cj5*r01);
IkReal x4764=(r00*sj5);
IkReal x4765=(sj1*sj2);
IkReal x4766=((200.0)*px);
IkReal x4767=((53.0)*sj1);
IkReal x4768=((48.0)*x4763);
IkReal x4769=((19.0)*x4765);
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(((((-23.0)*x4765))+(((23.0)*x4760))),-1);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(((((-1.0)*x4765))+x4760),-1);
if(!x4771.valid){
continue;
}
if( IKabs(((x4770.value)*(((((-1.0)*x4760*x4766))+(((-1.0)*x4761*x4768))+(((-48.0)*x4762*x4764))+(((-1.0)*x4763*x4767))+(((-1.0)*x4762*x4768))+((x4764*x4769))+(((-19.0)*x4760*x4763))+(((-19.0)*x4760*x4764))+((x4763*x4769))+(((-1.0)*x4764*x4767))+(((-48.0)*x4761*x4764))+((x4765*x4766)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4771.value)*(((((-1.0)*x4764))+(((-1.0)*x4763)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4770.value)*(((((-1.0)*x4760*x4766))+(((-1.0)*x4761*x4768))+(((-48.0)*x4762*x4764))+(((-1.0)*x4763*x4767))+(((-1.0)*x4762*x4768))+((x4764*x4769))+(((-19.0)*x4760*x4763))+(((-19.0)*x4760*x4764))+((x4763*x4769))+(((-1.0)*x4764*x4767))+(((-48.0)*x4761*x4764))+((x4765*x4766))))))+IKsqr(((x4771.value)*(((((-1.0)*x4764))+(((-1.0)*x4763))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4770.value)*(((((-1.0)*x4760*x4766))+(((-1.0)*x4761*x4768))+(((-48.0)*x4762*x4764))+(((-1.0)*x4763*x4767))+(((-1.0)*x4762*x4768))+((x4764*x4769))+(((-19.0)*x4760*x4763))+(((-19.0)*x4760*x4764))+((x4763*x4769))+(((-1.0)*x4764*x4767))+(((-48.0)*x4761*x4764))+((x4765*x4766))))), ((x4771.value)*(((((-1.0)*x4764))+(((-1.0)*x4763))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4772=IKcos(j0);
IkReal x4773=IKsin(j0);
IkReal x4774=(cj5*r01);
IkReal x4775=((1.0)*sj2);
IkReal x4776=(cj1*cj2);
IkReal x4777=((0.24)*cj2);
IkReal x4778=(r00*sj5);
IkReal x4779=(cj5*r11);
IkReal x4780=(r10*sj5);
IkReal x4781=(sj1*x4773);
IkReal x4782=(sj1*x4772);
IkReal x4783=((0.24)*cj1*sj2);
evalcond[0]=(((x4772*x4776))+x4774+x4778+(((-1.0)*x4775*x4782)));
evalcond[1]=(x4779+x4780+((x4773*x4776))+(((-1.0)*x4775*x4781)));
evalcond[2]=(((x4777*x4782))+(((-0.095)*x4774))+(((-0.095)*x4778))+(((-1.0)*px))+(((0.265)*x4782))+((x4772*x4783))+(((-0.115)*x4773)));
evalcond[3]=(((x4773*x4783))+(((-0.095)*x4780))+((x4777*x4781))+(((-0.095)*x4779))+(((0.115)*x4772))+(((-1.0)*py))+(((0.265)*x4781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4784=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4784;
j4eval[1]=IKsign(x4784);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4785=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4785;
j4eval[1]=IKsign(x4785);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4786=((1.0)*sj0);
IkReal x4787=((1.0)*cj0);
IkReal x4788=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4788;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4787))+(((-1.0)*cj5*r10*x4786))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r02*x4787))+(((-1.0)*r12*x4786))))));
j4eval[2]=IKsign(x4788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4789=((-1.0)*r20);
IkReal x4791 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4791)==0){
continue;
}
IkReal x4790=pow(x4791,-0.5);
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4789),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4792.value));
IkReal gconst115=(r21*x4790);
IkReal gconst116=(x4789*x4790);
CheckValue<IkReal> x4793 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4793.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4793.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4794=((-1.0)*r20);
IkReal x4795=x4790;
CheckValue<IkReal> x4797 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4794),IKFAST_ATAN2_MAGTHRESH);
if(!x4797.valid){
continue;
}
IkReal x4796=((-1.0)*(x4797.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4796;
IkReal gconst114=x4796;
IkReal gconst115=(r21*x4795);
IkReal gconst116=(x4794*x4795);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4798=((-1.0)*r20);
IkReal x4799=x4790;
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4798),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
IkReal x4800=((-1.0)*(x4801.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4800;
IkReal gconst114=x4800;
IkReal gconst115=(r21*x4799);
IkReal gconst116=(x4798*x4799);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4802=((-1.0)*r20);
IkReal x4803=x4790;
CheckValue<IkReal> x4805 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4802),IKFAST_ATAN2_MAGTHRESH);
if(!x4805.valid){
continue;
}
IkReal x4804=((-1.0)*(x4805.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x4804;
IkReal gconst114=x4804;
IkReal gconst115=(r21*x4803);
IkReal gconst116=(x4802*x4803);
IkReal x4806=((1.0)*(r22*r22));
CheckValue<IkReal> x4810=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4806))),-1);
if(!x4810.valid){
continue;
}
IkReal x4807=x4810.value;
IkReal x4808=((1.0)*x4807);
IkReal x4809=((((-2.0)*x4807*(r20*r20)*(r21*r21)))+(((-1.0)*x4808*(r20*r20*r20*r20)))+(((-1.0)*x4808*(r21*r21*r21*r21)))+(((-1.0)*x4806)));
j4eval[0]=x4809;
j4eval[1]=IKsign(x4809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4811=(sj1*sj2);
IkReal x4812=(gconst115*r21);
IkReal x4813=(cj1*cj2);
IkReal x4814=(gconst116*r20);
CheckValue<IkReal> x4815 = IKatan2WithCheck(IkReal((((x4812*x4813))+((x4811*x4814))+(((-1.0)*x4811*x4812))+(((-1.0)*x4813*x4814)))),IkReal(((((-1.0)*r22*x4813))+((r22*x4811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4815.valid){
continue;
}
CheckValue<IkReal> x4816=IKPowWithIntegerCheck(IKsign(((((2.0)*x4812*x4814))+(((-1.0)*(x4812*x4812)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4814*x4814))))),-1);
if(!x4816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4815.value)+(((1.5707963267949)*(x4816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4817=IKcos(j4);
IkReal x4818=IKsin(j4);
IkReal x4819=(cj2*sj1);
IkReal x4820=(gconst115*r21);
IkReal x4821=(cj1*sj2);
IkReal x4822=((1.0)*x4817);
IkReal x4823=(gconst115*x4817);
IkReal x4824=(gconst115*x4818);
IkReal x4825=((1.0)*gconst116*x4818);
evalcond[0]=(((x4817*x4820))+(((-1.0)*gconst116*r20*x4822))+((r22*x4818)));
evalcond[1]=(cj0+(((-1.0)*gconst116*r10*x4822))+((r11*x4823))+((r12*x4818)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4818))+(((-1.0)*gconst116*r00*x4822))+((r01*x4823)));
evalcond[3]=(((x4818*x4820))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4822))+((cj1*cj2))+(((-1.0)*r20*x4825)));
evalcond[4]=(((cj0*x4819))+(((-1.0)*r00*x4825))+(((-1.0)*r02*x4822))+((r01*x4824))+((cj0*x4821)));
evalcond[5]=(((r11*x4824))+(((-1.0)*r10*x4825))+((sj0*x4821))+((sj0*x4819))+(((-1.0)*r12*x4822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4826.value)+(((1.5707963267949)*(x4827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j4);
IkReal x4829=IKsin(j4);
IkReal x4830=(cj2*sj1);
IkReal x4831=(gconst115*r21);
IkReal x4832=(cj1*sj2);
IkReal x4833=((1.0)*x4828);
IkReal x4834=(gconst115*x4828);
IkReal x4835=(gconst115*x4829);
IkReal x4836=((1.0)*gconst116*x4829);
evalcond[0]=(((r22*x4829))+(((-1.0)*gconst116*r20*x4833))+((x4828*x4831)));
evalcond[1]=(((r11*x4834))+cj0+((r12*x4829))+(((-1.0)*gconst116*r10*x4833)));
evalcond[2]=(((r01*x4834))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x4833))+((r02*x4829)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x4833))+((x4829*x4831))+((cj1*cj2))+(((-1.0)*r20*x4836)));
evalcond[4]=(((r01*x4835))+((cj0*x4830))+((cj0*x4832))+(((-1.0)*r02*x4833))+(((-1.0)*r00*x4836)));
evalcond[5]=((((-1.0)*r10*x4836))+((r11*x4835))+(((-1.0)*r12*x4833))+((sj0*x4830))+((sj0*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4837.value)))+(x4838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKcos(j4);
IkReal x4840=IKsin(j4);
IkReal x4841=(cj2*sj1);
IkReal x4842=(gconst115*r21);
IkReal x4843=(cj1*sj2);
IkReal x4844=((1.0)*x4839);
IkReal x4845=(gconst115*x4839);
IkReal x4846=(gconst115*x4840);
IkReal x4847=((1.0)*gconst116*x4840);
evalcond[0]=((((-1.0)*gconst116*r20*x4844))+((r22*x4840))+((x4839*x4842)));
evalcond[1]=(cj0+((r11*x4845))+((r12*x4840))+(((-1.0)*gconst116*r10*x4844)));
evalcond[2]=(((r02*x4840))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x4844))+((r01*x4845)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x4840*x4842))+(((-1.0)*r20*x4847))+((cj1*cj2))+(((-1.0)*r22*x4844)));
evalcond[4]=((((-1.0)*r00*x4847))+(((-1.0)*r02*x4844))+((r01*x4846))+((cj0*x4841))+((cj0*x4843)));
evalcond[5]=(((sj0*x4841))+((sj0*x4843))+((r11*x4846))+(((-1.0)*r12*x4844))+(((-1.0)*r10*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4848=((-1.0)*r21);
IkReal x4850 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4850)==0){
continue;
}
IkReal x4849=pow(x4850,-0.5);
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal(x4848),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4851.value))));
IkReal gconst118=(x4848*x4849);
IkReal gconst119=((1.0)*r20*x4849);
CheckValue<IkReal> x4852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4852.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4853=((-1.0)*r21);
CheckValue<IkReal> x4856 = IKatan2WithCheck(IkReal(x4853),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4856.valid){
continue;
}
IkReal x4854=((1.0)*(x4856.value));
IkReal x4855=x4849;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4854)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4854)));
IkReal gconst118=(x4853*x4855);
IkReal gconst119=((1.0)*r20*x4855);
IkReal x4857=r22*r22;
IkReal x4858=((1.0)*x4857);
CheckValue<IkReal> x4862=IKPowWithIntegerCheck(((-1.0)+x4857),-1);
if(!x4862.valid){
continue;
}
IkReal x4859=x4862.value;
if((((1.0)+(((-1.0)*x4858)))) < -0.00001)
continue;
IkReal x4860=IKsqrt(((1.0)+(((-1.0)*x4858))));
IkReal x4861=(cj0*x4859*x4860);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4858*x4861))+x4861))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4863=((-1.0)*r21);
CheckValue<IkReal> x4866 = IKatan2WithCheck(IkReal(x4863),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4866.valid){
continue;
}
IkReal x4864=((1.0)*(x4866.value));
IkReal x4865=x4849;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4864)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4864)));
IkReal gconst118=(x4863*x4865);
IkReal gconst119=((1.0)*r20*x4865);
IkReal x4867=r22*r22;
IkReal x4868=((1.0)*x4867);
CheckValue<IkReal> x4872=IKPowWithIntegerCheck(((-1.0)+x4867),-1);
if(!x4872.valid){
continue;
}
IkReal x4869=x4872.value;
if((((1.0)+(((-1.0)*x4868)))) < -0.00001)
continue;
IkReal x4870=IKsqrt(((1.0)+(((-1.0)*x4868))));
IkReal x4871=(sj0*x4869*x4870);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4868*x4871))+x4871))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4873=((-1.0)*r21);
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(x4873),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
IkReal x4874=((1.0)*(x4876.value));
IkReal x4875=x4849;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x4874)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4874)));
IkReal gconst118=(x4873*x4875);
IkReal gconst119=((1.0)*r20*x4875);
IkReal x4877=r22*r22;
IkReal x4878=((1.0)*r12*sj0);
IkReal x4879=((1.0)*cj0*r02);
CheckValue<IkReal> x4883=IKPowWithIntegerCheck(((-1.0)+x4877),-1);
if(!x4883.valid){
continue;
}
IkReal x4880=x4883.value;
if((((1.0)+(((-1.0)*x4877)))) < -0.00001)
continue;
IkReal x4881=IKsqrt(((1.0)+(((-1.0)*x4877))));
IkReal x4882=(r22*x4880*x4881);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4879*x4882))+(((-1.0)*x4878*x4882)))))+(IKabs(((((-1.0)*x4878))+(((-1.0)*x4879))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4884=((1.0)*sj0);
IkReal x4885=((1.0)*gconst119);
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x4885)))),-1);
if(!x4886.valid){
continue;
}
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal((((gconst118*r11*sj0))+(((-1.0)*cj0*r00*x4885))+((cj0*gconst118*r01))+(((-1.0)*gconst119*r10*x4884)))),IkReal(((((-1.0)*r12*x4884))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4886.value)))+(x4887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4888=IKcos(j4);
IkReal x4889=IKsin(j4);
IkReal x4890=(cj1*sj2);
IkReal x4891=(gconst118*r01);
IkReal x4892=(gconst119*r20);
IkReal x4893=(gconst119*r10);
IkReal x4894=(gconst119*r00);
IkReal x4895=(gconst118*r21);
IkReal x4896=(cj2*sj1);
IkReal x4897=(gconst118*r11);
IkReal x4898=((1.0)*x4888);
IkReal x4899=((1.0)*x4889);
evalcond[0]=(((x4888*x4895))+((r22*x4889))+(((-1.0)*x4892*x4898)));
evalcond[1]=(((r12*x4889))+cj0+(((-1.0)*x4893*x4898))+((x4888*x4897)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4889))+((x4888*x4891))+(((-1.0)*x4894*x4898)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x4889*x4895))+(((-1.0)*x4892*x4899))+((cj1*cj2))+(((-1.0)*r22*x4898)));
evalcond[4]=((((-1.0)*r02*x4898))+((cj0*x4890))+((cj0*x4896))+(((-1.0)*x4894*x4899))+((x4889*x4891)));
evalcond[5]=((((-1.0)*r12*x4898))+(((-1.0)*x4893*x4899))+((x4889*x4897))+((sj0*x4896))+((sj0*x4890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4900=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x4900.valid){
continue;
}
CheckValue<IkReal> x4901 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4900.value)))+(x4901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4902=IKcos(j4);
IkReal x4903=IKsin(j4);
IkReal x4904=(cj1*sj2);
IkReal x4905=(gconst118*r01);
IkReal x4906=(gconst119*r20);
IkReal x4907=(gconst119*r10);
IkReal x4908=(gconst119*r00);
IkReal x4909=(gconst118*r21);
IkReal x4910=(cj2*sj1);
IkReal x4911=(gconst118*r11);
IkReal x4912=((1.0)*x4902);
IkReal x4913=((1.0)*x4903);
evalcond[0]=(((x4902*x4909))+(((-1.0)*x4906*x4912))+((r22*x4903)));
evalcond[1]=(cj0+((x4902*x4911))+(((-1.0)*x4907*x4912))+((r12*x4903)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4903))+(((-1.0)*x4908*x4912))+((x4902*x4905)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x4903*x4909))+(((-1.0)*x4906*x4913))+(((-1.0)*r22*x4912))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x4912))+(((-1.0)*x4908*x4913))+((x4903*x4905))+((cj0*x4910))+((cj0*x4904)));
evalcond[5]=((((-1.0)*r12*x4912))+((x4903*x4911))+((sj0*x4910))+((sj0*x4904))+(((-1.0)*x4907*x4913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4914=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x4914.valid){
continue;
}
CheckValue<IkReal> x4915 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4914.value)))+(x4915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4916=IKcos(j4);
IkReal x4917=IKsin(j4);
IkReal x4918=(cj1*sj2);
IkReal x4919=(gconst118*r01);
IkReal x4920=(gconst119*r20);
IkReal x4921=(gconst119*r10);
IkReal x4922=(gconst119*r00);
IkReal x4923=(gconst118*r21);
IkReal x4924=(cj2*sj1);
IkReal x4925=(gconst118*r11);
IkReal x4926=((1.0)*x4916);
IkReal x4927=((1.0)*x4917);
evalcond[0]=((((-1.0)*x4920*x4926))+((r22*x4917))+((x4916*x4923)));
evalcond[1]=(cj0+((r12*x4917))+(((-1.0)*x4921*x4926))+((x4916*x4925)));
evalcond[2]=((((-1.0)*sj0))+((r02*x4917))+((x4916*x4919))+(((-1.0)*x4922*x4926)));
evalcond[3]=((((-1.0)*sj1*sj2))+((x4917*x4923))+(((-1.0)*r22*x4926))+((cj1*cj2))+(((-1.0)*x4920*x4927)));
evalcond[4]=((((-1.0)*r02*x4926))+((x4917*x4919))+((cj0*x4924))+(((-1.0)*x4922*x4927))+((cj0*x4918)));
evalcond[5]=(((sj0*x4918))+((x4917*x4925))+(((-1.0)*x4921*x4927))+(((-1.0)*r12*x4926))+((sj0*x4924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4929 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4929)==0){
continue;
}
IkReal x4928=pow(x4929,-0.5);
CheckValue<IkReal> x4930 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4930.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4930.value));
IkReal gconst121=((-1.0)*r11*x4928);
IkReal gconst122=(r10*x4928);
CheckValue<IkReal> x4931 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4931.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4931.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4934 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4934.valid){
continue;
}
IkReal x4932=((-1.0)*(x4934.value));
IkReal x4933=x4928;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x4932;
IkReal gconst120=x4932;
IkReal gconst121=((-1.0)*r11*x4933);
IkReal gconst122=(r10*x4933);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4935=((1.0)*sj0);
IkReal x4936=((1.0)*cj0);
CheckValue<IkReal> x4937 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r10*x4935))+(((-1.0)*gconst122*r00*x4936))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IkReal(((((-1.0)*r02*x4936))+(((-1.0)*r12*x4935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4937.valid){
continue;
}
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x4938.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4937.value)+(((1.5707963267949)*(x4938.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4939=IKcos(j4);
IkReal x4940=IKsin(j4);
IkReal x4941=(gconst121*r11);
IkReal x4942=(cj2*sj1);
IkReal x4943=(gconst122*r00);
IkReal x4944=(gconst122*r10);
IkReal x4945=(gconst122*r20);
IkReal x4946=(cj1*sj2);
IkReal x4947=((1.0)*x4939);
IkReal x4948=((1.0)*x4940);
IkReal x4949=(gconst121*x4940);
IkReal x4950=(gconst121*x4939);
evalcond[0]=((((-1.0)*x4945*x4947))+((r21*x4950))+((r22*x4940)));
evalcond[1]=(cj0+((x4939*x4941))+((r12*x4940))+(((-1.0)*x4944*x4947)));
evalcond[2]=((((-1.0)*x4943*x4947))+(((-1.0)*sj0))+((r02*x4940))+((r01*x4950)));
evalcond[3]=(((r21*x4949))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4947))+(((-1.0)*x4945*x4948))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x4943*x4948))+((r01*x4949))+((cj0*x4942))+((cj0*x4946))+(((-1.0)*r02*x4947)));
evalcond[5]=(((x4940*x4941))+(((-1.0)*r12*x4947))+(((-1.0)*x4944*x4948))+((sj0*x4946))+((sj0*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4951 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4951.valid){
continue;
}
CheckValue<IkReal> x4952=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x4952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4951.value)+(((1.5707963267949)*(x4952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4953=IKcos(j4);
IkReal x4954=IKsin(j4);
IkReal x4955=(gconst121*r11);
IkReal x4956=(cj2*sj1);
IkReal x4957=(gconst122*r00);
IkReal x4958=(gconst122*r10);
IkReal x4959=(gconst122*r20);
IkReal x4960=(cj1*sj2);
IkReal x4961=((1.0)*x4953);
IkReal x4962=((1.0)*x4954);
IkReal x4963=(gconst121*x4954);
IkReal x4964=(gconst121*x4953);
evalcond[0]=(((r22*x4954))+(((-1.0)*x4959*x4961))+((r21*x4964)));
evalcond[1]=(cj0+(((-1.0)*x4958*x4961))+((r12*x4954))+((x4953*x4955)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4957*x4961))+((r02*x4954))+((r01*x4964)));
evalcond[3]=((((-1.0)*x4959*x4962))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x4961))+((cj1*cj2))+((r21*x4963)));
evalcond[4]=((((-1.0)*x4957*x4962))+(((-1.0)*r02*x4961))+((r01*x4963))+((cj0*x4956))+((cj0*x4960)));
evalcond[5]=((((-1.0)*x4958*x4962))+((sj0*x4960))+((sj0*x4956))+((x4954*x4955))+(((-1.0)*r12*x4961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4966 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4966)==0){
continue;
}
IkReal x4965=pow(x4966,-0.5);
CheckValue<IkReal> x4967 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4967.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4967.value))));
IkReal gconst124=((1.0)*r11*x4965);
IkReal gconst125=((-1.0)*r10*x4965);
CheckValue<IkReal> x4968 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4968.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4968.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4971 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4971.valid){
continue;
}
IkReal x4969=((1.0)*(x4971.value));
IkReal x4970=x4965;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4969)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4969)));
IkReal gconst124=((1.0)*r11*x4970);
IkReal gconst125=((-1.0)*r10*x4970);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x4974 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4974.valid){
continue;
}
IkReal x4972=((1.0)*(x4974.value));
IkReal x4973=x4965;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4972)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4972)));
IkReal gconst124=((1.0)*r11*x4973);
IkReal gconst125=((-1.0)*r10*x4973);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
IkReal x4975=((1.0)*(x4977.value));
IkReal x4976=x4965;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x4975)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4975)));
IkReal gconst124=((1.0)*r11*x4976);
IkReal gconst125=((-1.0)*r10*x4976);
IkReal x4978=r12*r12;
IkReal x4979=((1.0)*sj0);
IkReal x4980=(cj0*r02);
IkReal x4981=x4965;
j4eval[0]=((IKabs(((((-1.0)*r12*x4979))+(((-1.0)*x4980)))))+(IKabs((((r12*x4980*x4981))+((sj0*x4978*x4981))+(((-1.0)*x4979*x4981))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4982=((1.0)*sj0);
IkReal x4983=((1.0)*gconst125);
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x4983)))),-1);
if(!x4984.valid){
continue;
}
CheckValue<IkReal> x4985 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x4983))+(((-1.0)*gconst125*r10*x4982))+((cj0*gconst124*r01))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4984.value)))+(x4985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4986=IKcos(j4);
IkReal x4987=IKsin(j4);
IkReal x4988=(cj2*sj1);
IkReal x4989=(gconst125*r20);
IkReal x4990=(gconst124*r01);
IkReal x4991=(gconst125*r00);
IkReal x4992=(gconst125*r10);
IkReal x4993=(cj1*sj2);
IkReal x4994=((1.0)*x4986);
IkReal x4995=((1.0)*x4987);
IkReal x4996=(gconst124*x4987);
IkReal x4997=(gconst124*x4986);
evalcond[0]=(((r22*x4987))+((r21*x4997))+(((-1.0)*x4989*x4994)));
evalcond[1]=(((r12*x4987))+cj0+((r11*x4997))+(((-1.0)*x4992*x4994)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4991*x4994))+((x4986*x4990))+((r02*x4987)));
evalcond[3]=((((-1.0)*r22*x4994))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x4996))+(((-1.0)*x4989*x4995)));
evalcond[4]=(((cj0*x4988))+(((-1.0)*x4991*x4995))+(((-1.0)*r02*x4994))+((cj0*x4993))+((x4987*x4990)));
evalcond[5]=((((-1.0)*r12*x4994))+((sj0*x4993))+((r11*x4996))+(((-1.0)*x4992*x4995))+((sj0*x4988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4998=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x4998.valid){
continue;
}
CheckValue<IkReal> x4999 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4998.value)))+(x4999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5000=IKcos(j4);
IkReal x5001=IKsin(j4);
IkReal x5002=(cj2*sj1);
IkReal x5003=(gconst125*r20);
IkReal x5004=(gconst124*r01);
IkReal x5005=(gconst125*r00);
IkReal x5006=(gconst125*r10);
IkReal x5007=(cj1*sj2);
IkReal x5008=((1.0)*x5000);
IkReal x5009=((1.0)*x5001);
IkReal x5010=(gconst124*x5001);
IkReal x5011=(gconst124*x5000);
evalcond[0]=((((-1.0)*x5003*x5008))+((r21*x5011))+((r22*x5001)));
evalcond[1]=(((r12*x5001))+cj0+(((-1.0)*x5006*x5008))+((r11*x5011)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5001))+((x5000*x5004))+(((-1.0)*x5005*x5008)));
evalcond[3]=((((-1.0)*x5003*x5009))+(((-1.0)*sj1*sj2))+((r21*x5010))+((cj1*cj2))+(((-1.0)*r22*x5008)));
evalcond[4]=(((x5001*x5004))+(((-1.0)*x5005*x5009))+(((-1.0)*r02*x5008))+((cj0*x5007))+((cj0*x5002)));
evalcond[5]=((((-1.0)*x5006*x5009))+(((-1.0)*r12*x5008))+((sj0*x5007))+((sj0*x5002))+((r11*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5012=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5012.valid){
continue;
}
CheckValue<IkReal> x5013 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5012.value)))+(x5013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5014=IKcos(j4);
IkReal x5015=IKsin(j4);
IkReal x5016=(cj2*sj1);
IkReal x5017=(gconst125*r20);
IkReal x5018=(gconst124*r01);
IkReal x5019=(gconst125*r00);
IkReal x5020=(gconst125*r10);
IkReal x5021=(cj1*sj2);
IkReal x5022=((1.0)*x5014);
IkReal x5023=((1.0)*x5015);
IkReal x5024=(gconst124*x5015);
IkReal x5025=(gconst124*x5014);
evalcond[0]=((((-1.0)*x5017*x5022))+((r22*x5015))+((r21*x5025)));
evalcond[1]=(((r11*x5025))+cj0+(((-1.0)*x5020*x5022))+((r12*x5015)));
evalcond[2]=(((x5014*x5018))+(((-1.0)*x5019*x5022))+(((-1.0)*sj0))+((r02*x5015)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5017*x5023))+(((-1.0)*r22*x5022))+((cj1*cj2))+((r21*x5024)));
evalcond[4]=((((-1.0)*x5019*x5023))+(((-1.0)*r02*x5022))+((cj0*x5021))+((cj0*x5016))+((x5015*x5018)));
evalcond[5]=(((r11*x5024))+(((-1.0)*r12*x5022))+((sj0*x5016))+(((-1.0)*x5020*x5023))+((sj0*x5021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5026=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5026;
j4eval[1]=IKsign(x5026);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5027=((1.0)*cj5);
IkReal x5028=((((-1.0)*r21*x5027))+(((-1.0)*r20*sj5)));
j4eval[0]=x5028;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5027))+((r01*sj5))))));
j4eval[2]=IKsign(x5028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5029=cj5*cj5;
IkReal x5030=r11*r11;
IkReal x5031=(cj5*r10);
IkReal x5032=(r11*sj5);
IkReal x5033=((((-1.0)*x5029*(r10*r10)))+(((-1.0)*x5030))+(((-1.0)*(r12*r12)))+((x5029*x5030))+(((2.0)*x5031*x5032)));
j4eval[0]=x5033;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5031))+x5032))));
j4eval[2]=IKsign(x5033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5034=cj5*cj5;
IkReal x5035=r11*r11;
IkReal x5036=(cj5*r10);
IkReal x5037=(r11*sj5);
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5034*(r10*r10)))+(((-1.0)*x5035))+((x5034*x5035))+(((-1.0)*(r12*r12)))+(((2.0)*x5036*x5037)))),-1);
if(!x5038.valid){
continue;
}
CheckValue<IkReal> x5039 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5036))+x5037)),IKFAST_ATAN2_MAGTHRESH);
if(!x5039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5038.value)))+(x5039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5040=IKcos(j4);
IkReal x5041=IKsin(j4);
IkReal x5042=(cj5*r00);
IkReal x5043=(cj5*r10);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*x5040);
IkReal x5046=((1.0)*x5041);
IkReal x5047=(sj5*x5040);
IkReal x5048=(sj5*x5041);
evalcond[0]=(((r21*x5047))+(((-1.0)*x5044*x5045))+((r22*x5041)));
evalcond[1]=((((-1.0)*x5042*x5045))+((r02*x5041))+((r01*x5047)));
evalcond[2]=((1.0)+(((-1.0)*x5043*x5045))+((r12*x5041))+((r11*x5047)));
evalcond[3]=((((-1.0)*x5043*x5046))+(((-1.0)*r12*x5045))+((r11*x5048)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x5045))+(((-1.0)*x5042*x5046))+((cj1*sj2))+((r01*x5048)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5048))+((cj1*cj2))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5049=((1.0)*cj5);
CheckValue<IkReal> x5050 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5049)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5050.valid){
continue;
}
CheckValue<IkReal> x5051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5049))+(((-1.0)*r20*sj5)))),-1);
if(!x5051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5050.value)+(((1.5707963267949)*(x5051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5052=IKcos(j4);
IkReal x5053=IKsin(j4);
IkReal x5054=(cj5*r00);
IkReal x5055=(cj5*r10);
IkReal x5056=(cj5*r20);
IkReal x5057=((1.0)*x5052);
IkReal x5058=((1.0)*x5053);
IkReal x5059=(sj5*x5052);
IkReal x5060=(sj5*x5053);
evalcond[0]=(((r21*x5059))+((r22*x5053))+(((-1.0)*x5056*x5057)));
evalcond[1]=((((-1.0)*x5054*x5057))+((r01*x5059))+((r02*x5053)));
evalcond[2]=((1.0)+((r12*x5053))+(((-1.0)*x5055*x5057))+((r11*x5059)));
evalcond[3]=((((-1.0)*x5055*x5058))+(((-1.0)*r12*x5057))+((r11*x5060)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5054*x5058))+((cj1*sj2))+(((-1.0)*r02*x5057))+((r01*x5060)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5057))+((r21*x5060))+(((-1.0)*x5056*x5058))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5061.value)))+(x5062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r00);
IkReal x5066=(cj5*r10);
IkReal x5067=(cj5*r20);
IkReal x5068=((1.0)*x5063);
IkReal x5069=((1.0)*x5064);
IkReal x5070=(sj5*x5063);
IkReal x5071=(sj5*x5064);
evalcond[0]=(((r21*x5070))+((r22*x5064))+(((-1.0)*x5067*x5068)));
evalcond[1]=(((r02*x5064))+((r01*x5070))+(((-1.0)*x5065*x5068)));
evalcond[2]=((1.0)+(((-1.0)*x5066*x5068))+((r12*x5064))+((r11*x5070)));
evalcond[3]=((((-1.0)*x5066*x5069))+(((-1.0)*r12*x5068))+((r11*x5071)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x5068))+((r01*x5071))+(((-1.0)*x5065*x5069)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5071))+(((-1.0)*r22*x5068))+((cj1*cj2))+(((-1.0)*x5067*x5069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5072=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5072;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5073=((1.0)*cj5);
IkReal x5074=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5073)));
j4eval[0]=x5074;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5073)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5075=cj5*cj5;
IkReal x5076=r11*r11;
IkReal x5077=(r11*sj5);
IkReal x5078=(cj5*r10);
IkReal x5079=((r12*r12)+x5076+(((-1.0)*x5075*x5076))+(((-2.0)*x5077*x5078))+((x5075*(r10*r10))));
j4eval[0]=x5079;
j4eval[1]=((IKabs(r12))+(IKabs((x5077+(((-1.0)*x5078))))));
j4eval[2]=IKsign(x5079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5080=cj5*cj5;
IkReal x5081=r11*r11;
IkReal x5082=(cj5*r10);
IkReal x5083=(r11*sj5);
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5082))+x5083)),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5080*x5081))+x5081+(((-2.0)*x5082*x5083))+((x5080*(r10*r10))))),-1);
if(!x5085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5084.value)+(((1.5707963267949)*(x5085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5086=IKcos(j4);
IkReal x5087=IKsin(j4);
IkReal x5088=(cj5*r00);
IkReal x5089=(cj5*r10);
IkReal x5090=((1.0)*sj1);
IkReal x5091=(cj5*r20);
IkReal x5092=((1.0)*x5086);
IkReal x5093=((1.0)*x5087);
IkReal x5094=(sj5*x5086);
IkReal x5095=(sj5*x5087);
evalcond[0]=(((r21*x5094))+(((-1.0)*x5091*x5092))+((r22*x5087)));
evalcond[1]=((((-1.0)*x5088*x5092))+((r01*x5094))+((r02*x5087)));
evalcond[2]=((-1.0)+((r11*x5094))+((r12*x5087))+(((-1.0)*x5089*x5092)));
evalcond[3]=(((r11*x5095))+(((-1.0)*x5089*x5093))+(((-1.0)*r12*x5092)));
evalcond[4]=((((-1.0)*r22*x5092))+((r21*x5095))+(((-1.0)*x5091*x5093))+(((-1.0)*sj2*x5090))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x5088*x5093))+(((-1.0)*cj1*sj2))+((r01*x5095))+(((-1.0)*r02*x5092))+(((-1.0)*cj2*x5090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5096=((1.0)*cj5);
CheckValue<IkReal> x5097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5096)))),-1);
if(!x5097.valid){
continue;
}
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5096)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5097.value)))+(x5098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5099=IKcos(j4);
IkReal x5100=IKsin(j4);
IkReal x5101=(cj5*r00);
IkReal x5102=(cj5*r10);
IkReal x5103=((1.0)*sj1);
IkReal x5104=(cj5*r20);
IkReal x5105=((1.0)*x5099);
IkReal x5106=((1.0)*x5100);
IkReal x5107=(sj5*x5099);
IkReal x5108=(sj5*x5100);
evalcond[0]=(((r22*x5100))+((r21*x5107))+(((-1.0)*x5104*x5105)));
evalcond[1]=(((r01*x5107))+(((-1.0)*x5101*x5105))+((r02*x5100)));
evalcond[2]=((-1.0)+((r12*x5100))+(((-1.0)*x5102*x5105))+((r11*x5107)));
evalcond[3]=((((-1.0)*x5102*x5106))+((r11*x5108))+(((-1.0)*r12*x5105)));
evalcond[4]=((((-1.0)*sj2*x5103))+(((-1.0)*r22*x5105))+((r21*x5108))+(((-1.0)*x5104*x5106))+((cj1*cj2)));
evalcond[5]=(((r01*x5108))+(((-1.0)*cj2*x5103))+(((-1.0)*x5101*x5106))+(((-1.0)*r02*x5105))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5109=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5109.valid){
continue;
}
CheckValue<IkReal> x5110 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5109.value)))+(x5110.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5111=IKcos(j4);
IkReal x5112=IKsin(j4);
IkReal x5113=(cj5*r00);
IkReal x5114=(cj5*r10);
IkReal x5115=((1.0)*sj1);
IkReal x5116=(cj5*r20);
IkReal x5117=((1.0)*x5111);
IkReal x5118=((1.0)*x5112);
IkReal x5119=(sj5*x5111);
IkReal x5120=(sj5*x5112);
evalcond[0]=((((-1.0)*x5116*x5117))+((r21*x5119))+((r22*x5112)));
evalcond[1]=(((r01*x5119))+((r02*x5112))+(((-1.0)*x5113*x5117)));
evalcond[2]=((-1.0)+(((-1.0)*x5114*x5117))+((r11*x5119))+((r12*x5112)));
evalcond[3]=((((-1.0)*x5114*x5118))+((r11*x5120))+(((-1.0)*r12*x5117)));
evalcond[4]=((((-1.0)*r22*x5117))+(((-1.0)*sj2*x5115))+(((-1.0)*x5116*x5118))+((cj1*cj2))+((r21*x5120)));
evalcond[5]=((((-1.0)*cj2*x5115))+(((-1.0)*r02*x5117))+(((-1.0)*cj1*sj2))+((r01*x5120))+(((-1.0)*x5113*x5118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5122 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5122)==0){
continue;
}
IkReal x5121=pow(x5122,-0.5);
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5123.value));
IkReal gconst127=((-1.0)*r01*x5121);
IkReal gconst128=(r00*x5121);
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5124.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
IkReal x5125=((-1.0)*(x5127.value));
IkReal x5126=x5121;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5125;
IkReal gconst126=x5125;
IkReal gconst127=((-1.0)*r01*x5126);
IkReal gconst128=(r00*x5126);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5128=((1.0)*sj0);
IkReal x5129=((1.0)*gconst128);
CheckValue<IkReal> x5130 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5129))+((cj0*gconst127*r01))+(((-1.0)*gconst128*r10*x5128))+((gconst127*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5130.valid){
continue;
}
CheckValue<IkReal> x5131=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x5129)))),-1);
if(!x5131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5130.value)+(((1.5707963267949)*(x5131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5132=IKcos(j4);
IkReal x5133=IKsin(j4);
IkReal x5134=(gconst127*r01);
IkReal x5135=(cj2*sj1);
IkReal x5136=(gconst128*r10);
IkReal x5137=(gconst128*r00);
IkReal x5138=(gconst128*r20);
IkReal x5139=(cj1*sj2);
IkReal x5140=((1.0)*x5132);
IkReal x5141=((1.0)*x5133);
IkReal x5142=(gconst127*x5132);
IkReal x5143=(gconst127*x5133);
evalcond[0]=(((r21*x5142))+((r22*x5133))+(((-1.0)*x5138*x5140)));
evalcond[1]=((((-1.0)*x5136*x5140))+cj0+((r12*x5133))+((r11*x5142)));
evalcond[2]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*x5137*x5140))+((r02*x5133)));
evalcond[3]=(((r21*x5143))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5140))+(((-1.0)*x5138*x5141)));
evalcond[4]=((((-1.0)*x5137*x5141))+(((-1.0)*r02*x5140))+((cj0*x5139))+((cj0*x5135))+((x5133*x5134)));
evalcond[5]=((((-1.0)*x5136*x5141))+(((-1.0)*r12*x5140))+((r11*x5143))+((sj0*x5139))+((sj0*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5144=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5144.valid){
continue;
}
CheckValue<IkReal> x5145 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5144.value)))+(x5145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5146=IKcos(j4);
IkReal x5147=IKsin(j4);
IkReal x5148=(gconst127*r01);
IkReal x5149=(cj2*sj1);
IkReal x5150=(gconst128*r10);
IkReal x5151=(gconst128*r00);
IkReal x5152=(gconst128*r20);
IkReal x5153=(cj1*sj2);
IkReal x5154=((1.0)*x5146);
IkReal x5155=((1.0)*x5147);
IkReal x5156=(gconst127*x5146);
IkReal x5157=(gconst127*x5147);
evalcond[0]=(((r21*x5156))+(((-1.0)*x5152*x5154))+((r22*x5147)));
evalcond[1]=(((r11*x5156))+cj0+((r12*x5147))+(((-1.0)*x5150*x5154)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5151*x5154))+((r02*x5147))+((x5146*x5148)));
evalcond[3]=(((r21*x5157))+(((-1.0)*r22*x5154))+(((-1.0)*sj1*sj2))+(((-1.0)*x5152*x5155))+((cj1*cj2)));
evalcond[4]=(((x5147*x5148))+(((-1.0)*x5151*x5155))+((cj0*x5153))+((cj0*x5149))+(((-1.0)*r02*x5154)));
evalcond[5]=(((r11*x5157))+(((-1.0)*r12*x5154))+(((-1.0)*x5150*x5155))+((sj0*x5153))+((sj0*x5149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5159 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5159)==0){
continue;
}
IkReal x5158=pow(x5159,-0.5);
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5160.value))));
IkReal gconst130=((1.0)*r01*x5158);
IkReal gconst131=((-1.0)*r00*x5158);
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5161.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
IkReal x5162=((1.0)*(x5164.value));
IkReal x5163=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5162)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5162)));
IkReal gconst130=((1.0)*r01*x5163);
IkReal gconst131=((-1.0)*r00*x5163);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
IkReal x5165=((1.0)*(x5167.value));
IkReal x5166=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5165)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5165)));
IkReal gconst130=((1.0)*r01*x5166);
IkReal gconst131=((-1.0)*r00*x5166);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5170 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5170.valid){
continue;
}
IkReal x5168=((1.0)*(x5170.value));
IkReal x5169=x5158;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5168)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5168)));
IkReal gconst130=((1.0)*r01*x5169);
IkReal gconst131=((-1.0)*r00*x5169);
IkReal x5171=r02*r02;
IkReal x5172=(r12*sj0);
IkReal x5173=((1.0)*cj0);
IkReal x5174=x5158;
j4eval[0]=((IKabs(((((-1.0)*r02*x5173))+(((-1.0)*x5172)))))+(IKabs((((cj0*x5171*x5174))+((r02*x5172*x5174))+(((-1.0)*x5173*x5174))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5175=((1.0)*sj0);
IkReal x5176=((1.0)*gconst131);
CheckValue<IkReal> x5177 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+(((-1.0)*cj0*r00*x5176))+((gconst130*r11*sj0))+(((-1.0)*gconst131*r10*x5175)))),IkReal(((((-1.0)*r12*x5175))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5177.valid){
continue;
}
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5176))+(((-1.0)*gconst130*r20)))),-1);
if(!x5178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5177.value)+(((1.5707963267949)*(x5178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5179=IKcos(j4);
IkReal x5180=IKsin(j4);
IkReal x5181=(gconst131*r10);
IkReal x5182=(gconst130*r11);
IkReal x5183=(gconst131*r20);
IkReal x5184=(cj2*sj1);
IkReal x5185=(gconst131*r00);
IkReal x5186=(cj1*sj2);
IkReal x5187=((1.0)*x5179);
IkReal x5188=((1.0)*x5180);
IkReal x5189=(gconst130*x5179);
IkReal x5190=(gconst130*x5180);
evalcond[0]=(((r22*x5180))+(((-1.0)*x5183*x5187))+((r21*x5189)));
evalcond[1]=(cj0+((x5179*x5182))+(((-1.0)*x5181*x5187))+((r12*x5180)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5189))+(((-1.0)*x5185*x5187))+((r02*x5180)));
evalcond[3]=((((-1.0)*x5183*x5188))+(((-1.0)*r22*x5187))+(((-1.0)*sj1*sj2))+((r21*x5190))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*x5187))+((cj0*x5186))+((cj0*x5184))+(((-1.0)*x5185*x5188))+((r01*x5190)));
evalcond[5]=(((sj0*x5184))+((sj0*x5186))+(((-1.0)*r12*x5187))+((x5180*x5182))+(((-1.0)*x5181*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5191 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5191.valid){
continue;
}
CheckValue<IkReal> x5192=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5191.value)+(((1.5707963267949)*(x5192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5193=IKcos(j4);
IkReal x5194=IKsin(j4);
IkReal x5195=(gconst131*r10);
IkReal x5196=(gconst130*r11);
IkReal x5197=(gconst131*r20);
IkReal x5198=(cj2*sj1);
IkReal x5199=(gconst131*r00);
IkReal x5200=(cj1*sj2);
IkReal x5201=((1.0)*x5193);
IkReal x5202=((1.0)*x5194);
IkReal x5203=(gconst130*x5193);
IkReal x5204=(gconst130*x5194);
evalcond[0]=(((r22*x5194))+(((-1.0)*x5197*x5201))+((r21*x5203)));
evalcond[1]=(cj0+((x5193*x5196))+((r12*x5194))+(((-1.0)*x5195*x5201)));
evalcond[2]=((((-1.0)*x5199*x5201))+(((-1.0)*sj0))+((r01*x5203))+((r02*x5194)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5201))+(((-1.0)*x5197*x5202))+((cj1*cj2))+((r21*x5204)));
evalcond[4]=((((-1.0)*x5199*x5202))+((cj0*x5198))+(((-1.0)*r02*x5201))+((r01*x5204))+((cj0*x5200)));
evalcond[5]=(((sj0*x5198))+((x5194*x5196))+((sj0*x5200))+(((-1.0)*x5195*x5202))+(((-1.0)*r12*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5205=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5205.valid){
continue;
}
CheckValue<IkReal> x5206 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5205.value)))+(x5206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5207=IKcos(j4);
IkReal x5208=IKsin(j4);
IkReal x5209=(gconst131*r10);
IkReal x5210=(gconst130*r11);
IkReal x5211=(gconst131*r20);
IkReal x5212=(cj2*sj1);
IkReal x5213=(gconst131*r00);
IkReal x5214=(cj1*sj2);
IkReal x5215=((1.0)*x5207);
IkReal x5216=((1.0)*x5208);
IkReal x5217=(gconst130*x5207);
IkReal x5218=(gconst130*x5208);
evalcond[0]=(((r22*x5208))+(((-1.0)*x5211*x5215))+((r21*x5217)));
evalcond[1]=(((x5207*x5210))+cj0+((r12*x5208))+(((-1.0)*x5209*x5215)));
evalcond[2]=(((r01*x5217))+(((-1.0)*sj0))+(((-1.0)*x5213*x5215))+((r02*x5208)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5211*x5216))+(((-1.0)*r22*x5215))+((cj1*cj2))+((r21*x5218)));
evalcond[4]=(((r01*x5218))+(((-1.0)*x5213*x5216))+((cj0*x5212))+((cj0*x5214))+(((-1.0)*r02*x5215)));
evalcond[5]=(((x5208*x5210))+((sj0*x5212))+((sj0*x5214))+(((-1.0)*x5209*x5216))+(((-1.0)*r12*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5219=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5219;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5220=((1.0)*cj5);
IkReal x5221=((((-1.0)*r21*x5220))+(((-1.0)*r20*sj5)));
j4eval[0]=x5221;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5220))))));
j4eval[2]=IKsign(x5221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5222=cj5*cj5;
IkReal x5223=r01*r01;
IkReal x5224=(cj5*r00);
IkReal x5225=(r01*sj5);
IkReal x5226=(x5223+(((-1.0)*x5222*x5223))+(((-2.0)*x5224*x5225))+((x5222*(r00*r00)))+(r02*r02));
j4eval[0]=x5226;
j4eval[1]=IKsign(x5226);
j4eval[2]=((IKabs(r02))+(IKabs((x5225+(((-1.0)*x5224))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5227=cj5*cj5;
IkReal x5228=r01*r01;
IkReal x5229=(r01*sj5);
IkReal x5230=(cj5*r00);
CheckValue<IkReal> x5231 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5230))+x5229)),IKFAST_ATAN2_MAGTHRESH);
if(!x5231.valid){
continue;
}
CheckValue<IkReal> x5232=IKPowWithIntegerCheck(IKsign((((x5227*(r00*r00)))+(((-1.0)*x5227*x5228))+x5228+(((-2.0)*x5229*x5230))+(r02*r02))),-1);
if(!x5232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5231.value)+(((1.5707963267949)*(x5232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5233=IKcos(j4);
IkReal x5234=IKsin(j4);
IkReal x5235=(cj5*r00);
IkReal x5236=(cj5*r10);
IkReal x5237=(cj5*r20);
IkReal x5238=((1.0)*x5233);
IkReal x5239=((1.0)*x5234);
IkReal x5240=(sj5*x5233);
IkReal x5241=(sj5*x5234);
evalcond[0]=(((r21*x5240))+(((-1.0)*x5237*x5238))+((r22*x5234)));
evalcond[1]=((((-1.0)*x5236*x5238))+((r11*x5240))+((r12*x5234)));
evalcond[2]=((-1.0)+(((-1.0)*x5235*x5238))+((r01*x5240))+((r02*x5234)));
evalcond[3]=((((-1.0)*x5235*x5239))+(((-1.0)*r02*x5238))+((r01*x5241)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5236*x5239))+((r11*x5241))+(((-1.0)*r12*x5238))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x5238))+(((-1.0)*sj1*sj2))+((r21*x5241))+((cj1*cj2))+(((-1.0)*x5237*x5239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5242=((1.0)*cj5);
CheckValue<IkReal> x5243 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5242))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5243.valid){
continue;
}
CheckValue<IkReal> x5244=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5242))+(((-1.0)*r20*sj5)))),-1);
if(!x5244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5243.value)+(((1.5707963267949)*(x5244.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5245=IKcos(j4);
IkReal x5246=IKsin(j4);
IkReal x5247=(cj5*r00);
IkReal x5248=(cj5*r10);
IkReal x5249=(cj5*r20);
IkReal x5250=((1.0)*x5245);
IkReal x5251=((1.0)*x5246);
IkReal x5252=(sj5*x5245);
IkReal x5253=(sj5*x5246);
evalcond[0]=((((-1.0)*x5249*x5250))+((r21*x5252))+((r22*x5246)));
evalcond[1]=((((-1.0)*x5248*x5250))+((r12*x5246))+((r11*x5252)));
evalcond[2]=((-1.0)+((r01*x5252))+(((-1.0)*x5247*x5250))+((r02*x5246)));
evalcond[3]=((((-1.0)*r02*x5250))+((r01*x5253))+(((-1.0)*x5247*x5251)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5248*x5251))+((cj1*sj2))+(((-1.0)*r12*x5250))+((r11*x5253)));
evalcond[5]=((((-1.0)*x5249*x5251))+(((-1.0)*sj1*sj2))+((r21*x5253))+(((-1.0)*r22*x5250))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5254 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5254.value)+(((1.5707963267949)*(x5255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=(cj5*r00);
IkReal x5259=(cj5*r10);
IkReal x5260=(cj5*r20);
IkReal x5261=((1.0)*x5256);
IkReal x5262=((1.0)*x5257);
IkReal x5263=(sj5*x5256);
IkReal x5264=(sj5*x5257);
evalcond[0]=(((r22*x5257))+((r21*x5263))+(((-1.0)*x5260*x5261)));
evalcond[1]=(((r12*x5257))+(((-1.0)*x5259*x5261))+((r11*x5263)));
evalcond[2]=((-1.0)+(((-1.0)*x5258*x5261))+((r01*x5263))+((r02*x5257)));
evalcond[3]=((((-1.0)*x5258*x5262))+((r01*x5264))+(((-1.0)*r02*x5261)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5259*x5262))+(((-1.0)*r12*x5261))+((r11*x5264))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x5264))+(((-1.0)*r22*x5261))+((cj1*cj2))+(((-1.0)*x5260*x5262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5265=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5266=((1.0)*cj5);
IkReal x5267=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5266)));
j4eval[0]=x5267;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5266)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5267);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5268=cj5*cj5;
IkReal x5269=r01*r01;
IkReal x5270=(r01*sj5);
IkReal x5271=(cj5*r00);
IkReal x5272=((((-1.0)*x5268*(r00*r00)))+(((-1.0)*x5269))+(((-1.0)*(r02*r02)))+(((2.0)*x5270*x5271))+((x5268*x5269)));
j4eval[0]=x5272;
j4eval[1]=IKsign(x5272);
j4eval[2]=((IKabs(r02))+(IKabs((x5270+(((-1.0)*x5271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5273=cj5*cj5;
IkReal x5274=r01*r01;
IkReal x5275=(r01*sj5);
IkReal x5276=(cj5*r00);
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal(r02),IkReal((x5275+(((-1.0)*x5276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign((((x5273*x5274))+(((-1.0)*(r02*r02)))+(((-1.0)*x5274))+(((2.0)*x5275*x5276))+(((-1.0)*x5273*(r00*r00))))),-1);
if(!x5278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5279=IKcos(j4);
IkReal x5280=IKsin(j4);
IkReal x5281=(cj5*r00);
IkReal x5282=(cj5*r10);
IkReal x5283=((1.0)*sj1);
IkReal x5284=(cj5*r20);
IkReal x5285=((1.0)*x5279);
IkReal x5286=((1.0)*x5280);
IkReal x5287=(sj5*x5279);
IkReal x5288=(sj5*x5280);
evalcond[0]=((((-1.0)*x5284*x5285))+((r22*x5280))+((r21*x5287)));
evalcond[1]=(((r12*x5280))+(((-1.0)*x5282*x5285))+((r11*x5287)));
evalcond[2]=((1.0)+(((-1.0)*x5281*x5285))+((r02*x5280))+((r01*x5287)));
evalcond[3]=((((-1.0)*x5281*x5286))+((r01*x5288))+(((-1.0)*r02*x5285)));
evalcond[4]=((((-1.0)*r22*x5285))+(((-1.0)*x5284*x5286))+((r21*x5288))+(((-1.0)*sj2*x5283))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x5283))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5285))+(((-1.0)*x5282*x5286))+((r11*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5289=((1.0)*cj5);
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5289)))),-1);
if(!x5290.valid){
continue;
}
CheckValue<IkReal> x5291 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5289)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5290.value)))+(x5291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5292=IKcos(j4);
IkReal x5293=IKsin(j4);
IkReal x5294=(cj5*r00);
IkReal x5295=(cj5*r10);
IkReal x5296=((1.0)*sj1);
IkReal x5297=(cj5*r20);
IkReal x5298=((1.0)*x5292);
IkReal x5299=((1.0)*x5293);
IkReal x5300=(sj5*x5292);
IkReal x5301=(sj5*x5293);
evalcond[0]=(((r21*x5300))+((r22*x5293))+(((-1.0)*x5297*x5298)));
evalcond[1]=(((r12*x5293))+(((-1.0)*x5295*x5298))+((r11*x5300)));
evalcond[2]=((1.0)+((r02*x5293))+(((-1.0)*x5294*x5298))+((r01*x5300)));
evalcond[3]=((((-1.0)*x5294*x5299))+(((-1.0)*r02*x5298))+((r01*x5301)));
evalcond[4]=(((r21*x5301))+(((-1.0)*r22*x5298))+(((-1.0)*sj2*x5296))+(((-1.0)*x5297*x5299))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x5295*x5299))+(((-1.0)*cj2*x5296))+(((-1.0)*r12*x5298))+((r11*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5302.valid){
continue;
}
CheckValue<IkReal> x5303 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5302.value)))+(x5303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5304=IKcos(j4);
IkReal x5305=IKsin(j4);
IkReal x5306=(cj5*r00);
IkReal x5307=(cj5*r10);
IkReal x5308=((1.0)*sj1);
IkReal x5309=(cj5*r20);
IkReal x5310=((1.0)*x5304);
IkReal x5311=((1.0)*x5305);
IkReal x5312=(sj5*x5304);
IkReal x5313=(sj5*x5305);
evalcond[0]=(((r21*x5312))+((r22*x5305))+(((-1.0)*x5309*x5310)));
evalcond[1]=(((r12*x5305))+((r11*x5312))+(((-1.0)*x5307*x5310)));
evalcond[2]=((1.0)+(((-1.0)*x5306*x5310))+((r01*x5312))+((r02*x5305)));
evalcond[3]=((((-1.0)*x5306*x5311))+((r01*x5313))+(((-1.0)*r02*x5310)));
evalcond[4]=(((r21*x5313))+((cj1*cj2))+(((-1.0)*sj2*x5308))+(((-1.0)*x5309*x5311))+(((-1.0)*r22*x5310)));
evalcond[5]=((((-1.0)*r12*x5310))+(((-1.0)*cj1*sj2))+((r11*x5313))+(((-1.0)*cj2*x5308))+(((-1.0)*x5307*x5311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5314=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5314);
rxp1_1=(px*r21);
rxp1_2=(r11*x5314);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5315=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5315);
rxp1_1=(px*r21);
rxp1_2=(r11*x5315);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5316=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5316);
rxp1_1=(px*r21);
rxp1_2=(r11*x5316);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5319=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5319.valid){
continue;
}
IkReal x5317=x5319.value;
IkReal x5318=((1.0)*sj0*x5317);
sj4array[0]=((((-1.0)*cj1*sj2*x5318))+(((-1.0)*cj2*sj1*x5318)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5320=IKcos(j4);
IkReal x5321=IKsin(j4);
IkReal x5322=(r21*sj5);
IkReal x5323=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5320);
evalcond[1]=((((-1.0)*sj0))+((r02*x5321)));
evalcond[2]=(((x5320*x5322))+(((-1.0)*x5320*x5323)));
evalcond[3]=((((-1.0)*cj5*r10*x5320))+((r11*sj5*x5320)));
evalcond[4]=((((-1.0)*x5321*x5323))+(((-1.0)*sj1*sj2))+((x5321*x5322))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5325=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5325.valid){
continue;
}
IkReal x5324=x5325.value;
sj4array[0]=((((-1.0)*cj1*cj2*x5324))+((sj1*sj2*x5324)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5326=IKcos(j4);
IkReal x5327=IKsin(j4);
IkReal x5328=((1.0)*cj5);
IkReal x5329=(sj5*x5326);
evalcond[0]=((-1.0)*r02*x5326);
evalcond[1]=((((-1.0)*sj0))+((r02*x5327)));
evalcond[2]=((((-1.0)*r20*x5326*x5328))+((r21*x5329)));
evalcond[3]=(((r11*x5329))+(((-1.0)*r10*x5326*x5328)));
evalcond[4]=((((-1.0)*r10*x5327*x5328))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((r11*sj5*x5327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(r02,-1);
if(!x5330.valid){
continue;
}
sj4array[0]=(sj0*(x5330.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5331=IKcos(j4);
IkReal x5332=IKsin(j4);
IkReal x5333=(r21*sj5);
IkReal x5334=(r11*sj5);
IkReal x5335=((1.0)*cj5*x5332);
IkReal x5336=((1.0)*cj5*x5331);
evalcond[0]=((-1.0)*r02*x5331);
evalcond[1]=((((-1.0)*r20*x5336))+((x5331*x5333)));
evalcond[2]=(((x5331*x5334))+(((-1.0)*r10*x5336)));
evalcond[3]=((((-1.0)*r20*x5335))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x5332*x5333)));
evalcond[4]=(((cj1*sj0*sj2))+(((-1.0)*r10*x5335))+((cj2*sj0*sj1))+((x5332*x5334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5337=((1.0)*sj0);
IkReal x5338=((1.0)*cj0);
CheckValue<IkReal> x5339 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x5337))+(((-1.0)*cj5*r00*x5338)))),IkReal(((((-1.0)*r02*x5338))+(((-1.0)*r12*x5337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5339.valid){
continue;
}
CheckValue<IkReal> x5340=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5339.value)+(((1.5707963267949)*(x5340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5341=IKcos(j4);
IkReal x5342=IKsin(j4);
IkReal x5343=(cj5*r00);
IkReal x5344=(cj5*r10);
IkReal x5345=(cj2*sj1);
IkReal x5346=(cj5*r20);
IkReal x5347=(cj1*sj2);
IkReal x5348=((1.0)*x5341);
IkReal x5349=((1.0)*x5342);
IkReal x5350=(sj5*x5341);
IkReal x5351=(sj5*x5342);
evalcond[0]=((((-1.0)*x5346*x5348))+((r22*x5342))+((r21*x5350)));
evalcond[1]=(cj0+(((-1.0)*x5344*x5348))+((r12*x5342))+((r11*x5350)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5350))+((r02*x5342))+(((-1.0)*x5343*x5348)));
evalcond[3]=((((-1.0)*x5346*x5349))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5348))+((cj1*cj2))+((r21*x5351)));
evalcond[4]=((((-1.0)*r02*x5348))+((cj0*x5345))+((cj0*x5347))+((r01*x5351))+(((-1.0)*x5343*x5349)));
evalcond[5]=(((sj0*x5345))+((sj0*x5347))+(((-1.0)*x5344*x5349))+((r11*x5351))+(((-1.0)*r12*x5348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5352 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5352.valid){
continue;
}
CheckValue<IkReal> x5353=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5352.value)+(((1.5707963267949)*(x5353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5354=IKcos(j4);
IkReal x5355=IKsin(j4);
IkReal x5356=(cj5*r00);
IkReal x5357=(cj5*r10);
IkReal x5358=(cj2*sj1);
IkReal x5359=(cj5*r20);
IkReal x5360=(cj1*sj2);
IkReal x5361=((1.0)*x5354);
IkReal x5362=((1.0)*x5355);
IkReal x5363=(sj5*x5354);
IkReal x5364=(sj5*x5355);
evalcond[0]=(((r22*x5355))+((r21*x5363))+(((-1.0)*x5359*x5361)));
evalcond[1]=(cj0+((r12*x5355))+(((-1.0)*x5357*x5361))+((r11*x5363)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5355))+(((-1.0)*x5356*x5361))+((r01*x5363)));
evalcond[3]=((((-1.0)*r22*x5361))+(((-1.0)*sj1*sj2))+((r21*x5364))+(((-1.0)*x5359*x5362))+((cj1*cj2)));
evalcond[4]=(((cj0*x5358))+(((-1.0)*r02*x5361))+(((-1.0)*x5356*x5362))+((r01*x5364))+((cj0*x5360)));
evalcond[5]=(((sj0*x5358))+((sj0*x5360))+(((-1.0)*r12*x5361))+(((-1.0)*x5357*x5362))+((r11*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5365 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5365.valid){
continue;
}
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5365.value)+(((1.5707963267949)*(x5366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5367=IKcos(j4);
IkReal x5368=IKsin(j4);
IkReal x5369=(cj5*r00);
IkReal x5370=(cj5*r10);
IkReal x5371=(cj2*sj1);
IkReal x5372=(cj5*r20);
IkReal x5373=(cj1*sj2);
IkReal x5374=((1.0)*x5367);
IkReal x5375=((1.0)*x5368);
IkReal x5376=(sj5*x5367);
IkReal x5377=(sj5*x5368);
evalcond[0]=(((r22*x5368))+((r21*x5376))+(((-1.0)*x5372*x5374)));
evalcond[1]=(((r12*x5368))+cj0+(((-1.0)*x5370*x5374))+((r11*x5376)));
evalcond[2]=(((r02*x5368))+(((-1.0)*sj0))+((r01*x5376))+(((-1.0)*x5369*x5374)));
evalcond[3]=((((-1.0)*r22*x5374))+((r21*x5377))+(((-1.0)*x5372*x5375))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((cj0*x5373))+((cj0*x5371))+(((-1.0)*r02*x5374))+((r01*x5377))+(((-1.0)*x5369*x5375)));
evalcond[5]=((((-1.0)*r12*x5374))+(((-1.0)*x5370*x5375))+((sj0*x5373))+((sj0*x5371))+((r11*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5378=r21*r21;
IkReal x5379=cj5*cj5;
IkReal x5380=(sj1*sj2);
IkReal x5381=(r21*sj5);
IkReal x5382=(cj1*cj2);
IkReal x5383=(cj5*r20);
CheckValue<IkReal> x5384 = IKatan2WithCheck(IkReal((((x5381*x5382))+(((-1.0)*x5380*x5381))+(((-1.0)*x5382*x5383))+((x5380*x5383)))),IkReal(((((-1.0)*r22*x5382))+((r22*x5380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5384.valid){
continue;
}
CheckValue<IkReal> x5385=IKPowWithIntegerCheck(IKsign(((((2.0)*x5381*x5383))+((x5378*x5379))+(((-1.0)*x5378))+(((-1.0)*x5379*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x5385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5384.value)+(((1.5707963267949)*(x5385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5386=IKcos(j4);
IkReal x5387=IKsin(j4);
IkReal x5388=(r21*sj5);
IkReal x5389=(cj5*r20);
IkReal x5390=((1.0)*x5386);
evalcond[0]=((((-1.0)*x5389*x5390))+((x5386*x5388))+((r22*x5387)));
evalcond[1]=(((x5387*x5388))+(((-1.0)*sj1*sj2))+(((-1.0)*x5387*x5389))+((cj1*cj2))+(((-1.0)*r22*x5390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5391=(cj4*cj5);
IkReal x5392=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x5391))+((r02*sj4))+((r01*x5392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5391))+(((-1.0)*r11*x5392))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x5391))+((r02*sj4))+((r01*x5392))))+IKsqr((((r10*x5391))+(((-1.0)*r11*x5392))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x5391))+((r02*sj4))+((r01*x5392))), (((r10*x5391))+(((-1.0)*r11*x5392))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5393=IKcos(j0);
IkReal x5394=IKsin(j0);
IkReal x5395=(r00*sj5);
IkReal x5396=(cj5*r01);
IkReal x5397=((1.0)*sj2);
IkReal x5398=(r11*sj5);
IkReal x5399=(cj1*cj2);
IkReal x5400=((0.24)*cj2);
IkReal x5401=(cj1*sj2);
IkReal x5402=(cj5*r11);
IkReal x5403=((1.0)*cj4);
IkReal x5404=(r01*sj5);
IkReal x5405=(r10*sj5);
IkReal x5406=(sj1*x5394);
IkReal x5407=(cj5*x5403);
IkReal x5408=(sj1*x5393);
IkReal x5409=((1.0)*cj5*sj4);
evalcond[0]=(((cj4*x5398))+x5393+((r12*sj4))+(((-1.0)*r10*x5407)));
evalcond[1]=((((-1.0)*r00*x5407))+((r02*sj4))+((cj4*x5404))+(((-1.0)*x5394)));
evalcond[2]=(x5396+x5395+((x5393*x5399))+(((-1.0)*x5397*x5408)));
evalcond[3]=(x5405+x5402+(((-1.0)*x5397*x5406))+((x5394*x5399)));
evalcond[4]=((((-1.0)*r00*x5409))+(((-1.0)*r02*x5403))+((sj4*x5404))+((x5393*x5401))+((cj2*x5408)));
evalcond[5]=(((sj4*x5398))+(((-1.0)*r12*x5403))+(((-1.0)*r10*x5409))+((x5394*x5401))+((cj2*x5406)));
evalcond[6]=((((-0.095)*x5395))+(((-0.095)*x5396))+(((0.265)*x5408))+((x5400*x5408))+(((-0.115)*x5394))+(((-1.0)*px))+(((0.24)*x5393*x5401)));
evalcond[7]=((((0.24)*x5394*x5401))+(((0.265)*x5406))+((x5400*x5406))+(((-1.0)*py))+(((-0.095)*x5405))+(((-0.095)*x5402))+(((0.115)*x5393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5410=((1.0)*cj5);
IkReal x5411=((1.0)*sj5);
CheckValue<IkReal> x5412 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5411))+(((-1.0)*r11*x5410)))),IkReal(((((-1.0)*r00*x5411))+(((-1.0)*r01*x5410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5412.valid){
continue;
}
CheckValue<IkReal> x5413=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x5413.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5412.value)+(((1.5707963267949)*(x5413.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5414=IKcos(j0);
IkReal x5415=IKsin(j0);
IkReal x5416=(cj5*r01);
IkReal x5417=((1.0)*sj2);
IkReal x5418=(cj1*cj2);
IkReal x5419=((0.24)*cj2);
IkReal x5420=(r00*sj5);
IkReal x5421=(cj5*r11);
IkReal x5422=(r10*sj5);
IkReal x5423=(sj1*x5415);
IkReal x5424=(sj1*x5414);
IkReal x5425=((0.24)*cj1*sj2);
evalcond[0]=((((-1.0)*x5417*x5424))+x5420+x5416+((x5414*x5418)));
evalcond[1]=((((-1.0)*x5417*x5423))+x5421+x5422+((x5415*x5418)));
evalcond[2]=((((-0.095)*x5420))+(((-0.115)*x5415))+(((-0.095)*x5416))+((x5419*x5424))+(((0.265)*x5424))+(((-1.0)*px))+((x5414*x5425)));
evalcond[3]=((((0.115)*x5414))+(((-0.095)*x5422))+(((-0.095)*x5421))+((x5415*x5425))+((x5419*x5423))+(((0.265)*x5423))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5426=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5426;
j4eval[1]=IKsign(x5426);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5427=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5427;
j4eval[1]=IKsign(x5427);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5428=((1.0)*sj0);
IkReal x5429=((1.0)*cj0);
IkReal x5430=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5430;
j4eval[1]=((IKabs(((((-1.0)*r02*x5429))+(((-1.0)*r12*x5428)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x5428))+(((-1.0)*cj5*r00*x5429))))));
j4eval[2]=IKsign(x5430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5431=((-1.0)*r20);
IkReal x5433 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5433)==0){
continue;
}
IkReal x5432=pow(x5433,-0.5);
CheckValue<IkReal> x5434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5431),IKFAST_ATAN2_MAGTHRESH);
if(!x5434.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5434.value));
IkReal gconst115=(r21*x5432);
IkReal gconst116=(x5431*x5432);
CheckValue<IkReal> x5435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5435.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5436=((-1.0)*r20);
IkReal x5437=x5432;
CheckValue<IkReal> x5439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5436),IKFAST_ATAN2_MAGTHRESH);
if(!x5439.valid){
continue;
}
IkReal x5438=((-1.0)*(x5439.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5438;
IkReal gconst114=x5438;
IkReal gconst115=(r21*x5437);
IkReal gconst116=(x5436*x5437);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5440=((-1.0)*r20);
IkReal x5441=x5432;
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5440),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
IkReal x5442=((-1.0)*(x5443.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5442;
IkReal gconst114=x5442;
IkReal gconst115=(r21*x5441);
IkReal gconst116=(x5440*x5441);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5444=((-1.0)*r20);
IkReal x5445=x5432;
CheckValue<IkReal> x5447 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5444),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
IkReal x5446=((-1.0)*(x5447.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5446;
IkReal gconst114=x5446;
IkReal gconst115=(r21*x5445);
IkReal gconst116=(x5444*x5445);
IkReal x5448=((1.0)*(r22*r22));
CheckValue<IkReal> x5452=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5448))),-1);
if(!x5452.valid){
continue;
}
IkReal x5449=x5452.value;
IkReal x5450=((1.0)*x5449);
IkReal x5451=((((-2.0)*x5449*(r20*r20)*(r21*r21)))+(((-1.0)*x5448))+(((-1.0)*x5450*(r21*r21*r21*r21)))+(((-1.0)*x5450*(r20*r20*r20*r20))));
j4eval[0]=x5451;
j4eval[1]=IKsign(x5451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5453=(sj1*sj2);
IkReal x5454=(gconst115*r21);
IkReal x5455=(cj1*cj2);
IkReal x5456=(gconst116*r20);
CheckValue<IkReal> x5457=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5454*x5454)))+(((-1.0)*(r22*r22)))+(((2.0)*x5454*x5456))+(((-1.0)*(x5456*x5456))))),-1);
if(!x5457.valid){
continue;
}
CheckValue<IkReal> x5458 = IKatan2WithCheck(IkReal((((x5454*x5455))+(((-1.0)*x5455*x5456))+((x5453*x5456))+(((-1.0)*x5453*x5454)))),IkReal(((((-1.0)*r22*x5455))+((r22*x5453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5457.value)))+(x5458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5459=IKcos(j4);
IkReal x5460=IKsin(j4);
IkReal x5461=(cj2*sj1);
IkReal x5462=(gconst115*r21);
IkReal x5463=(cj1*sj2);
IkReal x5464=((1.0)*x5459);
IkReal x5465=(gconst115*x5459);
IkReal x5466=(gconst115*x5460);
IkReal x5467=((1.0)*gconst116*x5460);
evalcond[0]=(((r22*x5460))+(((-1.0)*gconst116*r20*x5464))+((x5459*x5462)));
evalcond[1]=(cj0+((r11*x5465))+((r12*x5460))+(((-1.0)*gconst116*r10*x5464)));
evalcond[2]=(((r01*x5465))+(((-1.0)*sj0))+(((-1.0)*gconst116*r00*x5464))+((r02*x5460)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r20*x5467))+((cj1*cj2))+((x5460*x5462))+(((-1.0)*r22*x5464)));
evalcond[4]=(((r01*x5466))+(((-1.0)*r02*x5464))+((cj0*x5461))+((cj0*x5463))+(((-1.0)*r00*x5467)));
evalcond[5]=((((-1.0)*r10*x5467))+((r11*x5466))+(((-1.0)*r12*x5464))+((sj0*x5461))+((sj0*x5463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal((((gconst115*r21*sj0))+(((-1.0)*gconst116*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
CheckValue<IkReal> x5469=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5468.value)+(((1.5707963267949)*(x5469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5470=IKcos(j4);
IkReal x5471=IKsin(j4);
IkReal x5472=(cj2*sj1);
IkReal x5473=(gconst115*r21);
IkReal x5474=(cj1*sj2);
IkReal x5475=((1.0)*x5470);
IkReal x5476=(gconst115*x5470);
IkReal x5477=(gconst115*x5471);
IkReal x5478=((1.0)*gconst116*x5471);
evalcond[0]=((((-1.0)*gconst116*r20*x5475))+((x5470*x5473))+((r22*x5471)));
evalcond[1]=((((-1.0)*gconst116*r10*x5475))+cj0+((r12*x5471))+((r11*x5476)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5476))+(((-1.0)*gconst116*r00*x5475))+((r02*x5471)));
evalcond[3]=(((x5471*x5473))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5475))+((cj1*cj2))+(((-1.0)*r20*x5478)));
evalcond[4]=(((r01*x5477))+(((-1.0)*r00*x5478))+((cj0*x5472))+((cj0*x5474))+(((-1.0)*r02*x5475)));
evalcond[5]=(((sj0*x5472))+((sj0*x5474))+(((-1.0)*r10*x5478))+(((-1.0)*r12*x5475))+((r11*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5479.valid){
continue;
}
CheckValue<IkReal> x5480 = IKatan2WithCheck(IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*gconst116*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5479.value)))+(x5480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5481=IKcos(j4);
IkReal x5482=IKsin(j4);
IkReal x5483=(cj2*sj1);
IkReal x5484=(gconst115*r21);
IkReal x5485=(cj1*sj2);
IkReal x5486=((1.0)*x5481);
IkReal x5487=(gconst115*x5481);
IkReal x5488=(gconst115*x5482);
IkReal x5489=((1.0)*gconst116*x5482);
evalcond[0]=(((x5481*x5484))+(((-1.0)*gconst116*r20*x5486))+((r22*x5482)));
evalcond[1]=(cj0+((r11*x5487))+((r12*x5482))+(((-1.0)*gconst116*r10*x5486)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst116*r00*x5486))+((r01*x5487))+((r02*x5482)));
evalcond[3]=((((-1.0)*r20*x5489))+((x5482*x5484))+(((-1.0)*r22*x5486))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=(((cj0*x5485))+((cj0*x5483))+((r01*x5488))+(((-1.0)*r00*x5489))+(((-1.0)*r02*x5486)));
evalcond[5]=((((-1.0)*r10*x5489))+(((-1.0)*r12*x5486))+((r11*x5488))+((sj0*x5485))+((sj0*x5483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5490=((-1.0)*r21);
IkReal x5492 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5492)==0){
continue;
}
IkReal x5491=pow(x5492,-0.5);
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal(x5490),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5493.value))));
IkReal gconst118=(x5490*x5491);
IkReal gconst119=((1.0)*r20*x5491);
CheckValue<IkReal> x5494 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5494.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5494.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5495=((-1.0)*r21);
CheckValue<IkReal> x5498 = IKatan2WithCheck(IkReal(x5495),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5498.valid){
continue;
}
IkReal x5496=((1.0)*(x5498.value));
IkReal x5497=x5491;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5496)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5496)));
IkReal gconst118=(x5495*x5497);
IkReal gconst119=((1.0)*r20*x5497);
IkReal x5499=r22*r22;
IkReal x5500=((1.0)*x5499);
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(((-1.0)+x5499),-1);
if(!x5504.valid){
continue;
}
IkReal x5501=x5504.value;
if((((1.0)+(((-1.0)*x5500)))) < -0.00001)
continue;
IkReal x5502=IKsqrt(((1.0)+(((-1.0)*x5500))));
IkReal x5503=(cj0*x5501*x5502);
j4eval[0]=((IKabs((x5503+(((-1.0)*x5500*x5503)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5505=((-1.0)*r21);
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal(x5505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
IkReal x5506=((1.0)*(x5508.value));
IkReal x5507=x5491;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5506)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5506)));
IkReal gconst118=(x5505*x5507);
IkReal gconst119=((1.0)*r20*x5507);
IkReal x5509=r22*r22;
IkReal x5510=((1.0)*x5509);
CheckValue<IkReal> x5514=IKPowWithIntegerCheck(((-1.0)+x5509),-1);
if(!x5514.valid){
continue;
}
IkReal x5511=x5514.value;
if((((1.0)+(((-1.0)*x5510)))) < -0.00001)
continue;
IkReal x5512=IKsqrt(((1.0)+(((-1.0)*x5510))));
IkReal x5513=(sj0*x5511*x5512);
j4eval[0]=((IKabs(((((-1.0)*x5510*x5513))+x5513)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5515=((-1.0)*r21);
CheckValue<IkReal> x5518 = IKatan2WithCheck(IkReal(x5515),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5518.valid){
continue;
}
IkReal x5516=((1.0)*(x5518.value));
IkReal x5517=x5491;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5516)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5516)));
IkReal gconst118=(x5515*x5517);
IkReal gconst119=((1.0)*r20*x5517);
IkReal x5519=r22*r22;
IkReal x5520=((1.0)*r12*sj0);
IkReal x5521=((1.0)*cj0*r02);
CheckValue<IkReal> x5525=IKPowWithIntegerCheck(((-1.0)+x5519),-1);
if(!x5525.valid){
continue;
}
IkReal x5522=x5525.value;
if((((1.0)+(((-1.0)*x5519)))) < -0.00001)
continue;
IkReal x5523=IKsqrt(((1.0)+(((-1.0)*x5519))));
IkReal x5524=(r22*x5522*x5523);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x5521*x5524))+(((-1.0)*x5520*x5524)))))+(IKabs(((((-1.0)*x5521))+(((-1.0)*x5520))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5526=((1.0)*sj0);
IkReal x5527=((1.0)*gconst119);
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x5527))+((gconst118*r11*sj0))+((cj0*gconst118*r01))+(((-1.0)*gconst119*r10*x5526)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
CheckValue<IkReal> x5529=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5527)))),-1);
if(!x5529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5528.value)+(((1.5707963267949)*(x5529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5530=IKcos(j4);
IkReal x5531=IKsin(j4);
IkReal x5532=(cj1*sj2);
IkReal x5533=(gconst118*r01);
IkReal x5534=(gconst119*r20);
IkReal x5535=(gconst119*r10);
IkReal x5536=(gconst119*r00);
IkReal x5537=(gconst118*r21);
IkReal x5538=(cj2*sj1);
IkReal x5539=(gconst118*r11);
IkReal x5540=((1.0)*x5530);
IkReal x5541=((1.0)*x5531);
evalcond[0]=(((x5530*x5537))+((r22*x5531))+(((-1.0)*x5534*x5540)));
evalcond[1]=(cj0+((x5530*x5539))+(((-1.0)*x5535*x5540))+((r12*x5531)));
evalcond[2]=((((-1.0)*sj0))+((x5530*x5533))+(((-1.0)*x5536*x5540))+((r02*x5531)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x5531*x5537))+(((-1.0)*r22*x5540))+(((-1.0)*x5534*x5541)));
evalcond[4]=((((-1.0)*r02*x5540))+(((-1.0)*x5536*x5541))+((cj0*x5532))+((cj0*x5538))+((x5531*x5533)));
evalcond[5]=((((-1.0)*x5535*x5541))+(((-1.0)*r12*x5540))+((sj0*x5532))+((sj0*x5538))+((x5531*x5539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5542=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5542.valid){
continue;
}
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj0))+((gconst118*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5542.value)))+(x5543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5544=IKcos(j4);
IkReal x5545=IKsin(j4);
IkReal x5546=(cj1*sj2);
IkReal x5547=(gconst118*r01);
IkReal x5548=(gconst119*r20);
IkReal x5549=(gconst119*r10);
IkReal x5550=(gconst119*r00);
IkReal x5551=(gconst118*r21);
IkReal x5552=(cj2*sj1);
IkReal x5553=(gconst118*r11);
IkReal x5554=((1.0)*x5544);
IkReal x5555=((1.0)*x5545);
evalcond[0]=((((-1.0)*x5548*x5554))+((r22*x5545))+((x5544*x5551)));
evalcond[1]=(((r12*x5545))+cj0+(((-1.0)*x5549*x5554))+((x5544*x5553)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5550*x5554))+((r02*x5545))+((x5544*x5547)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x5548*x5555))+((x5545*x5551))+(((-1.0)*r22*x5554))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5550*x5555))+((cj0*x5546))+((cj0*x5552))+(((-1.0)*r02*x5554))+((x5545*x5547)));
evalcond[5]=(((sj0*x5546))+((sj0*x5552))+(((-1.0)*x5549*x5555))+(((-1.0)*r12*x5554))+((x5545*x5553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5556=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5556.valid){
continue;
}
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*gconst119*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5556.value)))+(x5557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5558=IKcos(j4);
IkReal x5559=IKsin(j4);
IkReal x5560=(cj1*sj2);
IkReal x5561=(gconst118*r01);
IkReal x5562=(gconst119*r20);
IkReal x5563=(gconst119*r10);
IkReal x5564=(gconst119*r00);
IkReal x5565=(gconst118*r21);
IkReal x5566=(cj2*sj1);
IkReal x5567=(gconst118*r11);
IkReal x5568=((1.0)*x5558);
IkReal x5569=((1.0)*x5559);
evalcond[0]=((((-1.0)*x5562*x5568))+((r22*x5559))+((x5558*x5565)));
evalcond[1]=(cj0+(((-1.0)*x5563*x5568))+((r12*x5559))+((x5558*x5567)));
evalcond[2]=((((-1.0)*x5564*x5568))+(((-1.0)*sj0))+((r02*x5559))+((x5558*x5561)));
evalcond[3]=((((-1.0)*r22*x5568))+(((-1.0)*sj1*sj2))+(((-1.0)*x5562*x5569))+((cj1*cj2))+((x5559*x5565)));
evalcond[4]=((((-1.0)*x5564*x5569))+((cj0*x5566))+((cj0*x5560))+(((-1.0)*r02*x5568))+((x5559*x5561)));
evalcond[5]=((((-1.0)*r12*x5568))+(((-1.0)*x5563*x5569))+((sj0*x5566))+((sj0*x5560))+((x5559*x5567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5571 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5571)==0){
continue;
}
IkReal x5570=pow(x5571,-0.5);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5572.value));
IkReal gconst121=((-1.0)*r11*x5570);
IkReal gconst122=(r10*x5570);
CheckValue<IkReal> x5573 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5573.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5573.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5574=((-1.0)*(x5576.value));
IkReal x5575=x5570;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5574;
IkReal gconst120=x5574;
IkReal gconst121=((-1.0)*r11*x5575);
IkReal gconst122=(r10*x5575);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5577=((1.0)*sj0);
IkReal x5578=((1.0)*cj0);
CheckValue<IkReal> x5579=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*gconst122*r21)))),-1);
if(!x5579.valid){
continue;
}
CheckValue<IkReal> x5580 = IKatan2WithCheck(IkReal(((((-1.0)*gconst122*r00*x5578))+(((-1.0)*gconst122*r10*x5577))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IkReal(((((-1.0)*r12*x5577))+(((-1.0)*r02*x5578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5579.value)))+(x5580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5581=IKcos(j4);
IkReal x5582=IKsin(j4);
IkReal x5583=(gconst121*r11);
IkReal x5584=(cj2*sj1);
IkReal x5585=(gconst122*r00);
IkReal x5586=(gconst122*r10);
IkReal x5587=(gconst122*r20);
IkReal x5588=(cj1*sj2);
IkReal x5589=((1.0)*x5581);
IkReal x5590=((1.0)*x5582);
IkReal x5591=(gconst121*x5582);
IkReal x5592=(gconst121*x5581);
evalcond[0]=(((r21*x5592))+(((-1.0)*x5587*x5589))+((r22*x5582)));
evalcond[1]=((((-1.0)*x5586*x5589))+cj0+((r12*x5582))+((x5581*x5583)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5585*x5589))+((r02*x5582))+((r01*x5592)));
evalcond[3]=(((r21*x5591))+(((-1.0)*sj1*sj2))+(((-1.0)*x5587*x5590))+((cj1*cj2))+(((-1.0)*r22*x5589)));
evalcond[4]=(((cj0*x5584))+((cj0*x5588))+(((-1.0)*r02*x5589))+(((-1.0)*x5585*x5590))+((r01*x5591)));
evalcond[5]=((((-1.0)*r12*x5589))+(((-1.0)*x5586*x5590))+((sj0*x5584))+((sj0*x5588))+((x5582*x5583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5593 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst122*r20))+((cj0*gconst121*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5593.valid){
continue;
}
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5593.value)+(((1.5707963267949)*(x5594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5595=IKcos(j4);
IkReal x5596=IKsin(j4);
IkReal x5597=(gconst121*r11);
IkReal x5598=(cj2*sj1);
IkReal x5599=(gconst122*r00);
IkReal x5600=(gconst122*r10);
IkReal x5601=(gconst122*r20);
IkReal x5602=(cj1*sj2);
IkReal x5603=((1.0)*x5595);
IkReal x5604=((1.0)*x5596);
IkReal x5605=(gconst121*x5596);
IkReal x5606=(gconst121*x5595);
evalcond[0]=(((r21*x5606))+(((-1.0)*x5601*x5603))+((r22*x5596)));
evalcond[1]=(((x5595*x5597))+cj0+((r12*x5596))+(((-1.0)*x5600*x5603)));
evalcond[2]=((((-1.0)*sj0))+((r02*x5596))+(((-1.0)*x5599*x5603))+((r01*x5606)));
evalcond[3]=((((-1.0)*r22*x5603))+(((-1.0)*sj1*sj2))+((r21*x5605))+(((-1.0)*x5601*x5604))+((cj1*cj2)));
evalcond[4]=(((cj0*x5598))+(((-1.0)*x5599*x5604))+((r01*x5605))+(((-1.0)*r02*x5603))+((cj0*x5602)));
evalcond[5]=(((sj0*x5602))+((sj0*x5598))+(((-1.0)*r12*x5603))+(((-1.0)*x5600*x5604))+((x5596*x5597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5608 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5608)==0){
continue;
}
IkReal x5607=pow(x5608,-0.5);
CheckValue<IkReal> x5609 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5609.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5609.value))));
IkReal gconst124=((1.0)*r11*x5607);
IkReal gconst125=((-1.0)*r10*x5607);
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5610.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
IkReal x5611=((1.0)*(x5613.value));
IkReal x5612=x5607;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5611)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5611)));
IkReal gconst124=((1.0)*r11*x5612);
IkReal gconst125=((-1.0)*r10*x5612);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x5616 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5616.valid){
continue;
}
IkReal x5614=((1.0)*(x5616.value));
IkReal x5615=x5607;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5614)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5614)));
IkReal gconst124=((1.0)*r11*x5615);
IkReal gconst125=((-1.0)*r10*x5615);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5619 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5619.valid){
continue;
}
IkReal x5617=((1.0)*(x5619.value));
IkReal x5618=x5607;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5617)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5617)));
IkReal gconst124=((1.0)*r11*x5618);
IkReal gconst125=((-1.0)*r10*x5618);
IkReal x5620=r12*r12;
IkReal x5621=((1.0)*sj0);
IkReal x5622=(cj0*r02);
IkReal x5623=x5607;
j4eval[0]=((IKabs((((r12*x5622*x5623))+(((-1.0)*x5621*x5623))+((sj0*x5620*x5623)))))+(IKabs(((((-1.0)*r12*x5621))+(((-1.0)*x5622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5624=((1.0)*sj0);
IkReal x5625=((1.0)*gconst125);
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5625)))),-1);
if(!x5626.valid){
continue;
}
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal(((((-1.0)*gconst125*r10*x5624))+((cj0*gconst124*r01))+(((-1.0)*cj0*r00*x5625))+((gconst124*r11*sj0)))),IkReal(((((-1.0)*r12*x5624))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5626.value)))+(x5627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5628=IKcos(j4);
IkReal x5629=IKsin(j4);
IkReal x5630=(cj2*sj1);
IkReal x5631=(gconst125*r20);
IkReal x5632=(gconst124*r01);
IkReal x5633=(gconst125*r00);
IkReal x5634=(gconst125*r10);
IkReal x5635=(cj1*sj2);
IkReal x5636=((1.0)*x5628);
IkReal x5637=((1.0)*x5629);
IkReal x5638=(gconst124*x5629);
IkReal x5639=(gconst124*x5628);
evalcond[0]=(((r22*x5629))+((r21*x5639))+(((-1.0)*x5631*x5636)));
evalcond[1]=(((r11*x5639))+cj0+((r12*x5629))+(((-1.0)*x5634*x5636)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5633*x5636))+((r02*x5629))+((x5628*x5632)));
evalcond[3]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x5636))+((r21*x5638))+(((-1.0)*x5631*x5637)));
evalcond[4]=((((-1.0)*x5633*x5637))+((x5629*x5632))+(((-1.0)*r02*x5636))+((cj0*x5630))+((cj0*x5635)));
evalcond[5]=((((-1.0)*r12*x5636))+((r11*x5638))+((sj0*x5635))+((sj0*x5630))+(((-1.0)*x5634*x5637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5640=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal((((gconst124*r21*sj0))+(((-1.0)*gconst125*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5640.value)))+(x5641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKcos(j4);
IkReal x5643=IKsin(j4);
IkReal x5644=(cj2*sj1);
IkReal x5645=(gconst125*r20);
IkReal x5646=(gconst124*r01);
IkReal x5647=(gconst125*r00);
IkReal x5648=(gconst125*r10);
IkReal x5649=(cj1*sj2);
IkReal x5650=((1.0)*x5642);
IkReal x5651=((1.0)*x5643);
IkReal x5652=(gconst124*x5643);
IkReal x5653=(gconst124*x5642);
evalcond[0]=((((-1.0)*x5645*x5650))+((r22*x5643))+((r21*x5653)));
evalcond[1]=(cj0+((r12*x5643))+(((-1.0)*x5648*x5650))+((r11*x5653)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5647*x5650))+((x5642*x5646))+((r02*x5643)));
evalcond[3]=((((-1.0)*r22*x5650))+(((-1.0)*x5645*x5651))+(((-1.0)*sj1*sj2))+((r21*x5652))+((cj1*cj2)));
evalcond[4]=(((cj0*x5649))+((cj0*x5644))+(((-1.0)*x5647*x5651))+(((-1.0)*r02*x5650))+((x5643*x5646)));
evalcond[5]=((((-1.0)*r12*x5650))+((sj0*x5649))+((sj0*x5644))+(((-1.0)*x5648*x5651))+((r11*x5652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5654=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5654.valid){
continue;
}
CheckValue<IkReal> x5655 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst125*r20))+((cj0*gconst124*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5654.value)))+(x5655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5656=IKcos(j4);
IkReal x5657=IKsin(j4);
IkReal x5658=(cj2*sj1);
IkReal x5659=(gconst125*r20);
IkReal x5660=(gconst124*r01);
IkReal x5661=(gconst125*r00);
IkReal x5662=(gconst125*r10);
IkReal x5663=(cj1*sj2);
IkReal x5664=((1.0)*x5656);
IkReal x5665=((1.0)*x5657);
IkReal x5666=(gconst124*x5657);
IkReal x5667=(gconst124*x5656);
evalcond[0]=((((-1.0)*x5659*x5664))+((r22*x5657))+((r21*x5667)));
evalcond[1]=(cj0+((r12*x5657))+(((-1.0)*x5662*x5664))+((r11*x5667)));
evalcond[2]=(((x5656*x5660))+(((-1.0)*sj0))+(((-1.0)*x5661*x5664))+((r02*x5657)));
evalcond[3]=((((-1.0)*r22*x5664))+(((-1.0)*sj1*sj2))+(((-1.0)*x5659*x5665))+((cj1*cj2))+((r21*x5666)));
evalcond[4]=(((cj0*x5658))+(((-1.0)*r02*x5664))+(((-1.0)*x5661*x5665))+((x5657*x5660))+((cj0*x5663)));
evalcond[5]=(((sj0*x5658))+(((-1.0)*x5662*x5665))+((r11*x5666))+((sj0*x5663))+(((-1.0)*r12*x5664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5668=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5668;
j4eval[1]=IKsign(x5668);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5669=((1.0)*cj5);
IkReal x5670=((((-1.0)*r21*x5669))+(((-1.0)*r20*sj5)));
j4eval[0]=x5670;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5669))+((r01*sj5))))));
j4eval[2]=IKsign(x5670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5671=cj5*cj5;
IkReal x5672=r11*r11;
IkReal x5673=(cj5*r10);
IkReal x5674=(r11*sj5);
IkReal x5675=((((-1.0)*x5671*(r10*r10)))+(((-1.0)*x5672))+(((2.0)*x5673*x5674))+(((-1.0)*(r12*r12)))+((x5671*x5672)));
j4eval[0]=x5675;
j4eval[1]=((IKabs(r12))+(IKabs((x5674+(((-1.0)*x5673))))));
j4eval[2]=IKsign(x5675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5676=cj5*cj5;
IkReal x5677=r11*r11;
IkReal x5678=(cj5*r10);
IkReal x5679=(r11*sj5);
CheckValue<IkReal> x5680 = IKatan2WithCheck(IkReal(r12),IkReal((x5679+(((-1.0)*x5678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5680.valid){
continue;
}
CheckValue<IkReal> x5681=IKPowWithIntegerCheck(IKsign(((((2.0)*x5678*x5679))+(((-1.0)*x5676*(r10*r10)))+(((-1.0)*x5677))+((x5676*x5677))+(((-1.0)*(r12*r12))))),-1);
if(!x5681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5680.value)+(((1.5707963267949)*(x5681.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5682=IKcos(j4);
IkReal x5683=IKsin(j4);
IkReal x5684=(cj5*r00);
IkReal x5685=(cj5*r10);
IkReal x5686=(cj5*r20);
IkReal x5687=((1.0)*x5682);
IkReal x5688=((1.0)*x5683);
IkReal x5689=(sj5*x5682);
IkReal x5690=(sj5*x5683);
evalcond[0]=((((-1.0)*x5686*x5687))+((r22*x5683))+((r21*x5689)));
evalcond[1]=((((-1.0)*x5684*x5687))+((r02*x5683))+((r01*x5689)));
evalcond[2]=((1.0)+(((-1.0)*x5685*x5687))+((r12*x5683))+((r11*x5689)));
evalcond[3]=((((-1.0)*x5685*x5688))+((r11*x5690))+(((-1.0)*r12*x5687)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x5687))+((cj1*sj2))+(((-1.0)*x5684*x5688))+((r01*x5690)));
evalcond[5]=((((-1.0)*x5686*x5688))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5687))+((cj1*cj2))+((r21*x5690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5691=((1.0)*cj5);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5691)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5691))+(((-1.0)*r20*sj5)))),-1);
if(!x5693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5692.value)+(((1.5707963267949)*(x5693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5694=IKcos(j4);
IkReal x5695=IKsin(j4);
IkReal x5696=(cj5*r00);
IkReal x5697=(cj5*r10);
IkReal x5698=(cj5*r20);
IkReal x5699=((1.0)*x5694);
IkReal x5700=((1.0)*x5695);
IkReal x5701=(sj5*x5694);
IkReal x5702=(sj5*x5695);
evalcond[0]=(((r22*x5695))+(((-1.0)*x5698*x5699))+((r21*x5701)));
evalcond[1]=((((-1.0)*x5696*x5699))+((r02*x5695))+((r01*x5701)));
evalcond[2]=((1.0)+((r11*x5701))+((r12*x5695))+(((-1.0)*x5697*x5699)));
evalcond[3]=((((-1.0)*x5697*x5700))+((r11*x5702))+(((-1.0)*r12*x5699)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x5699))+((cj1*sj2))+((r01*x5702))+(((-1.0)*x5696*x5700)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x5699))+(((-1.0)*x5698*x5700))+((r21*x5702))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5705=IKcos(j4);
IkReal x5706=IKsin(j4);
IkReal x5707=(cj5*r00);
IkReal x5708=(cj5*r10);
IkReal x5709=(cj5*r20);
IkReal x5710=((1.0)*x5705);
IkReal x5711=((1.0)*x5706);
IkReal x5712=(sj5*x5705);
IkReal x5713=(sj5*x5706);
evalcond[0]=((((-1.0)*x5709*x5710))+((r22*x5706))+((r21*x5712)));
evalcond[1]=(((r02*x5706))+(((-1.0)*x5707*x5710))+((r01*x5712)));
evalcond[2]=((1.0)+(((-1.0)*x5708*x5710))+((r12*x5706))+((r11*x5712)));
evalcond[3]=((((-1.0)*x5708*x5711))+((r11*x5713))+(((-1.0)*r12*x5710)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5707*x5711))+((r01*x5713))+(((-1.0)*r02*x5710)));
evalcond[5]=((((-1.0)*r22*x5710))+(((-1.0)*sj1*sj2))+(((-1.0)*x5709*x5711))+((cj1*cj2))+((r21*x5713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5714=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5714;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5715=((1.0)*cj5);
IkReal x5716=((((-1.0)*r01*x5715))+(((-1.0)*r00*sj5)));
j4eval[0]=x5716;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5715)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5717=cj5*cj5;
IkReal x5718=r11*r11;
IkReal x5719=(r11*sj5);
IkReal x5720=(cj5*r10);
IkReal x5721=((((-1.0)*x5717*x5718))+(r12*r12)+(((-2.0)*x5719*x5720))+((x5717*(r10*r10)))+x5718);
j4eval[0]=x5721;
j4eval[1]=((IKabs(((((-1.0)*x5720))+x5719)))+(IKabs(r12)));
j4eval[2]=IKsign(x5721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5722=cj5*cj5;
IkReal x5723=r11*r11;
IkReal x5724=(cj5*r10);
IkReal x5725=(r11*sj5);
CheckValue<IkReal> x5726 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5724))+x5725)),IKFAST_ATAN2_MAGTHRESH);
if(!x5726.valid){
continue;
}
CheckValue<IkReal> x5727=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5724*x5725))+((x5722*(r10*r10)))+(((-1.0)*x5722*x5723))+x5723)),-1);
if(!x5727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5726.value)+(((1.5707963267949)*(x5727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5728=IKcos(j4);
IkReal x5729=IKsin(j4);
IkReal x5730=(cj5*r00);
IkReal x5731=(cj5*r10);
IkReal x5732=((1.0)*sj1);
IkReal x5733=(cj5*r20);
IkReal x5734=((1.0)*x5728);
IkReal x5735=((1.0)*x5729);
IkReal x5736=(sj5*x5728);
IkReal x5737=(sj5*x5729);
evalcond[0]=(((r21*x5736))+(((-1.0)*x5733*x5734))+((r22*x5729)));
evalcond[1]=(((r01*x5736))+(((-1.0)*x5730*x5734))+((r02*x5729)));
evalcond[2]=((-1.0)+((r11*x5736))+((r12*x5729))+(((-1.0)*x5731*x5734)));
evalcond[3]=(((r11*x5737))+(((-1.0)*r12*x5734))+(((-1.0)*x5731*x5735)));
evalcond[4]=(((r21*x5737))+(((-1.0)*x5733*x5735))+(((-1.0)*r22*x5734))+(((-1.0)*sj2*x5732))+((cj1*cj2)));
evalcond[5]=(((r01*x5737))+(((-1.0)*r02*x5734))+(((-1.0)*cj1*sj2))+(((-1.0)*x5730*x5735))+(((-1.0)*cj2*x5732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5738=((1.0)*cj5);
CheckValue<IkReal> x5739 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x5738))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5739.valid){
continue;
}
CheckValue<IkReal> x5740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5738)))),-1);
if(!x5740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5739.value)+(((1.5707963267949)*(x5740.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5741=IKcos(j4);
IkReal x5742=IKsin(j4);
IkReal x5743=(cj5*r00);
IkReal x5744=(cj5*r10);
IkReal x5745=((1.0)*sj1);
IkReal x5746=(cj5*r20);
IkReal x5747=((1.0)*x5741);
IkReal x5748=((1.0)*x5742);
IkReal x5749=(sj5*x5741);
IkReal x5750=(sj5*x5742);
evalcond[0]=(((r22*x5742))+(((-1.0)*x5746*x5747))+((r21*x5749)));
evalcond[1]=(((r01*x5749))+((r02*x5742))+(((-1.0)*x5743*x5747)));
evalcond[2]=((-1.0)+((r11*x5749))+((r12*x5742))+(((-1.0)*x5744*x5747)));
evalcond[3]=((((-1.0)*r12*x5747))+((r11*x5750))+(((-1.0)*x5744*x5748)));
evalcond[4]=(((r21*x5750))+(((-1.0)*x5746*x5748))+(((-1.0)*r22*x5747))+((cj1*cj2))+(((-1.0)*sj2*x5745)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x5747))+((r01*x5750))+(((-1.0)*x5743*x5748))+(((-1.0)*cj2*x5745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5751.valid){
continue;
}
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5751.value)))+(x5752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5753=IKcos(j4);
IkReal x5754=IKsin(j4);
IkReal x5755=(cj5*r00);
IkReal x5756=(cj5*r10);
IkReal x5757=((1.0)*sj1);
IkReal x5758=(cj5*r20);
IkReal x5759=((1.0)*x5753);
IkReal x5760=((1.0)*x5754);
IkReal x5761=(sj5*x5753);
IkReal x5762=(sj5*x5754);
evalcond[0]=((((-1.0)*x5758*x5759))+((r21*x5761))+((r22*x5754)));
evalcond[1]=(((r01*x5761))+((r02*x5754))+(((-1.0)*x5755*x5759)));
evalcond[2]=((-1.0)+((r11*x5761))+(((-1.0)*x5756*x5759))+((r12*x5754)));
evalcond[3]=((((-1.0)*x5756*x5760))+(((-1.0)*r12*x5759))+((r11*x5762)));
evalcond[4]=((((-1.0)*x5758*x5760))+(((-1.0)*r22*x5759))+((r21*x5762))+(((-1.0)*sj2*x5757))+((cj1*cj2)));
evalcond[5]=(((r01*x5762))+(((-1.0)*cj1*sj2))+(((-1.0)*x5755*x5760))+(((-1.0)*r02*x5759))+(((-1.0)*cj2*x5757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5764 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5764)==0){
continue;
}
IkReal x5763=pow(x5764,-0.5);
CheckValue<IkReal> x5765 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5765.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5765.value));
IkReal gconst127=((-1.0)*r01*x5763);
IkReal gconst128=(r00*x5763);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5766.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5769 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5769.valid){
continue;
}
IkReal x5767=((-1.0)*(x5769.value));
IkReal x5768=x5763;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5767;
IkReal gconst126=x5767;
IkReal gconst127=((-1.0)*r01*x5768);
IkReal gconst128=(r00*x5768);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5770=((1.0)*sj0);
IkReal x5771=((1.0)*gconst128);
CheckValue<IkReal> x5772=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5771))+(((-1.0)*gconst127*r20)))),-1);
if(!x5772.valid){
continue;
}
CheckValue<IkReal> x5773 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r10*x5770))+(((-1.0)*cj0*r00*x5771))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IkReal(((((-1.0)*r12*x5770))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5772.value)))+(x5773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5774=IKcos(j4);
IkReal x5775=IKsin(j4);
IkReal x5776=(gconst127*r01);
IkReal x5777=(cj2*sj1);
IkReal x5778=(gconst128*r10);
IkReal x5779=(gconst128*r00);
IkReal x5780=(gconst128*r20);
IkReal x5781=(cj1*sj2);
IkReal x5782=((1.0)*x5774);
IkReal x5783=((1.0)*x5775);
IkReal x5784=(gconst127*x5774);
IkReal x5785=(gconst127*x5775);
evalcond[0]=(((r21*x5784))+((r22*x5775))+(((-1.0)*x5780*x5782)));
evalcond[1]=(cj0+((r11*x5784))+(((-1.0)*x5778*x5782))+((r12*x5775)));
evalcond[2]=((((-1.0)*sj0))+((x5774*x5776))+(((-1.0)*x5779*x5782))+((r02*x5775)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x5785))+(((-1.0)*x5780*x5783))+((cj1*cj2))+(((-1.0)*r22*x5782)));
evalcond[4]=((((-1.0)*x5779*x5783))+((cj0*x5777))+((x5775*x5776))+(((-1.0)*r02*x5782))+((cj0*x5781)));
evalcond[5]=(((r11*x5785))+(((-1.0)*r12*x5782))+(((-1.0)*x5778*x5783))+((sj0*x5781))+((sj0*x5777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5786=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5786.valid){
continue;
}
CheckValue<IkReal> x5787 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj0))+((gconst127*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5786.value)))+(x5787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5788=IKcos(j4);
IkReal x5789=IKsin(j4);
IkReal x5790=(gconst127*r01);
IkReal x5791=(cj2*sj1);
IkReal x5792=(gconst128*r10);
IkReal x5793=(gconst128*r00);
IkReal x5794=(gconst128*r20);
IkReal x5795=(cj1*sj2);
IkReal x5796=((1.0)*x5788);
IkReal x5797=((1.0)*x5789);
IkReal x5798=(gconst127*x5788);
IkReal x5799=(gconst127*x5789);
evalcond[0]=(((r21*x5798))+((r22*x5789))+(((-1.0)*x5794*x5796)));
evalcond[1]=(cj0+(((-1.0)*x5792*x5796))+((r12*x5789))+((r11*x5798)));
evalcond[2]=((((-1.0)*x5793*x5796))+((x5788*x5790))+(((-1.0)*sj0))+((r02*x5789)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x5799))+(((-1.0)*x5794*x5797))+(((-1.0)*r22*x5796))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5793*x5797))+((x5789*x5790))+((cj0*x5795))+((cj0*x5791))+(((-1.0)*r02*x5796)));
evalcond[5]=((((-1.0)*x5792*x5797))+((r11*x5799))+((sj0*x5795))+((sj0*x5791))+(((-1.0)*r12*x5796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5801 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5801)==0){
continue;
}
IkReal x5800=pow(x5801,-0.5);
CheckValue<IkReal> x5802 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5802.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5802.value))));
IkReal gconst130=((1.0)*r01*x5800);
IkReal gconst131=((-1.0)*r00*x5800);
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5803.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5806 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5806.valid){
continue;
}
IkReal x5804=((1.0)*(x5806.value));
IkReal x5805=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5804)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5804)));
IkReal gconst130=((1.0)*r01*x5805);
IkReal gconst131=((-1.0)*r00*x5805);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
IkReal x5807=((1.0)*(x5809.value));
IkReal x5808=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5807)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5807)));
IkReal gconst130=((1.0)*r01*x5808);
IkReal gconst131=((-1.0)*r00*x5808);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
IkReal x5810=((1.0)*(x5812.value));
IkReal x5811=x5800;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5810)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5810)));
IkReal gconst130=((1.0)*r01*x5811);
IkReal gconst131=((-1.0)*r00*x5811);
IkReal x5813=r02*r02;
IkReal x5814=(r12*sj0);
IkReal x5815=((1.0)*cj0);
IkReal x5816=x5800;
j4eval[0]=((IKabs(((((-1.0)*x5815*x5816))+((r02*x5814*x5816))+((cj0*x5813*x5816)))))+(IKabs(((((-1.0)*x5814))+(((-1.0)*r02*x5815))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5817=((1.0)*sj0);
IkReal x5818=((1.0)*gconst131);
CheckValue<IkReal> x5819=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r20))+(((-1.0)*r21*x5818)))),-1);
if(!x5819.valid){
continue;
}
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal((((cj0*gconst130*r01))+((gconst130*r11*sj0))+(((-1.0)*cj0*r00*x5818))+(((-1.0)*gconst131*r10*x5817)))),IkReal(((((-1.0)*r12*x5817))+(((-1.0)*cj0*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5819.value)))+(x5820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5821=IKcos(j4);
IkReal x5822=IKsin(j4);
IkReal x5823=(gconst131*r10);
IkReal x5824=(gconst130*r11);
IkReal x5825=(gconst131*r20);
IkReal x5826=(cj2*sj1);
IkReal x5827=(gconst131*r00);
IkReal x5828=(cj1*sj2);
IkReal x5829=((1.0)*x5821);
IkReal x5830=((1.0)*x5822);
IkReal x5831=(gconst130*x5821);
IkReal x5832=(gconst130*x5822);
evalcond[0]=(((r21*x5831))+((r22*x5822))+(((-1.0)*x5825*x5829)));
evalcond[1]=(((x5821*x5824))+(((-1.0)*x5823*x5829))+cj0+((r12*x5822)));
evalcond[2]=(((r02*x5822))+(((-1.0)*sj0))+((r01*x5831))+(((-1.0)*x5827*x5829)));
evalcond[3]=((((-1.0)*r22*x5829))+((r21*x5832))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x5825*x5830)));
evalcond[4]=((((-1.0)*r02*x5829))+((r01*x5832))+((cj0*x5826))+((cj0*x5828))+(((-1.0)*x5827*x5830)));
evalcond[5]=((((-1.0)*x5823*x5830))+((x5822*x5824))+((sj0*x5826))+((sj0*x5828))+(((-1.0)*r12*x5829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5833 = IKatan2WithCheck(IkReal((((gconst130*r21*sj0))+(((-1.0)*gconst131*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5833.valid){
continue;
}
CheckValue<IkReal> x5834=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5833.value)+(((1.5707963267949)*(x5834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5835=IKcos(j4);
IkReal x5836=IKsin(j4);
IkReal x5837=(gconst131*r10);
IkReal x5838=(gconst130*r11);
IkReal x5839=(gconst131*r20);
IkReal x5840=(cj2*sj1);
IkReal x5841=(gconst131*r00);
IkReal x5842=(cj1*sj2);
IkReal x5843=((1.0)*x5835);
IkReal x5844=((1.0)*x5836);
IkReal x5845=(gconst130*x5835);
IkReal x5846=(gconst130*x5836);
evalcond[0]=(((r21*x5845))+(((-1.0)*x5839*x5843))+((r22*x5836)));
evalcond[1]=((((-1.0)*x5837*x5843))+((x5835*x5838))+cj0+((r12*x5836)));
evalcond[2]=(((r02*x5836))+(((-1.0)*sj0))+((r01*x5845))+(((-1.0)*x5841*x5843)));
evalcond[3]=(((r21*x5846))+(((-1.0)*sj1*sj2))+(((-1.0)*x5839*x5844))+((cj1*cj2))+(((-1.0)*r22*x5843)));
evalcond[4]=((((-1.0)*r02*x5843))+((r01*x5846))+(((-1.0)*x5841*x5844))+((cj0*x5840))+((cj0*x5842)));
evalcond[5]=((((-1.0)*x5837*x5844))+((x5836*x5838))+((sj0*x5840))+((sj0*x5842))+(((-1.0)*r12*x5843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5847=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5847.valid){
continue;
}
CheckValue<IkReal> x5848 = IKatan2WithCheck(IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*gconst131*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5847.value)))+(x5848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5849=IKcos(j4);
IkReal x5850=IKsin(j4);
IkReal x5851=(gconst131*r10);
IkReal x5852=(gconst130*r11);
IkReal x5853=(gconst131*r20);
IkReal x5854=(cj2*sj1);
IkReal x5855=(gconst131*r00);
IkReal x5856=(cj1*sj2);
IkReal x5857=((1.0)*x5849);
IkReal x5858=((1.0)*x5850);
IkReal x5859=(gconst130*x5849);
IkReal x5860=(gconst130*x5850);
evalcond[0]=((((-1.0)*x5853*x5857))+((r22*x5850))+((r21*x5859)));
evalcond[1]=(cj0+((r12*x5850))+(((-1.0)*x5851*x5857))+((x5849*x5852)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5859))+(((-1.0)*x5855*x5857))+((r02*x5850)));
evalcond[3]=((((-1.0)*x5853*x5858))+((r21*x5860))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5857))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x5855*x5858))+(((-1.0)*r02*x5857))+((cj0*x5856))+((cj0*x5854))+((r01*x5860)));
evalcond[5]=((((-1.0)*r12*x5857))+((x5850*x5852))+(((-1.0)*x5851*x5858))+((sj0*x5856))+((sj0*x5854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5861=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5861;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5862=((1.0)*cj5);
IkReal x5863=((((-1.0)*r21*x5862))+(((-1.0)*r20*sj5)));
j4eval[0]=x5863;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5862))+((r11*sj5))))));
j4eval[2]=IKsign(x5863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5864=cj5*cj5;
IkReal x5865=r01*r01;
IkReal x5866=(cj5*r00);
IkReal x5867=(r01*sj5);
IkReal x5868=((((-1.0)*x5864*x5865))+(((-2.0)*x5866*x5867))+((x5864*(r00*r00)))+(r02*r02)+x5865);
j4eval[0]=x5868;
j4eval[1]=IKsign(x5868);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5866))+x5867))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5869=cj5*cj5;
IkReal x5870=r01*r01;
IkReal x5871=(r01*sj5);
IkReal x5872=(cj5*r00);
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(r02),IkReal((x5871+(((-1.0)*x5872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5871*x5872))+(((-1.0)*x5869*x5870))+(r02*r02)+((x5869*(r00*r00)))+x5870)),-1);
if(!x5874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5873.value)+(((1.5707963267949)*(x5874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5875=IKcos(j4);
IkReal x5876=IKsin(j4);
IkReal x5877=(cj5*r00);
IkReal x5878=(cj5*r10);
IkReal x5879=(cj5*r20);
IkReal x5880=((1.0)*x5875);
IkReal x5881=((1.0)*x5876);
IkReal x5882=(sj5*x5875);
IkReal x5883=(sj5*x5876);
evalcond[0]=(((r22*x5876))+(((-1.0)*x5879*x5880))+((r21*x5882)));
evalcond[1]=(((r11*x5882))+((r12*x5876))+(((-1.0)*x5878*x5880)));
evalcond[2]=((-1.0)+((r01*x5882))+((r02*x5876))+(((-1.0)*x5877*x5880)));
evalcond[3]=(((r01*x5883))+(((-1.0)*r02*x5880))+(((-1.0)*x5877*x5881)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5883))+(((-1.0)*r12*x5880))+(((-1.0)*x5878*x5881)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5879*x5881))+((r21*x5883))+((cj1*cj2))+(((-1.0)*r22*x5880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5884=((1.0)*cj5);
CheckValue<IkReal> x5885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5884))+(((-1.0)*r20*sj5)))),-1);
if(!x5885.valid){
continue;
}
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5884)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5885.value)))+(x5886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5887=IKcos(j4);
IkReal x5888=IKsin(j4);
IkReal x5889=(cj5*r00);
IkReal x5890=(cj5*r10);
IkReal x5891=(cj5*r20);
IkReal x5892=((1.0)*x5887);
IkReal x5893=((1.0)*x5888);
IkReal x5894=(sj5*x5887);
IkReal x5895=(sj5*x5888);
evalcond[0]=(((r21*x5894))+(((-1.0)*x5891*x5892))+((r22*x5888)));
evalcond[1]=(((r12*x5888))+(((-1.0)*x5890*x5892))+((r11*x5894)));
evalcond[2]=((-1.0)+(((-1.0)*x5889*x5892))+((r01*x5894))+((r02*x5888)));
evalcond[3]=((((-1.0)*x5889*x5893))+(((-1.0)*r02*x5892))+((r01*x5895)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5892))+((cj1*sj2))+(((-1.0)*x5890*x5893))+((r11*x5895)));
evalcond[5]=(((r21*x5895))+(((-1.0)*r22*x5892))+(((-1.0)*sj1*sj2))+(((-1.0)*x5891*x5893))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5896 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5896.valid){
continue;
}
CheckValue<IkReal> x5897=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5896.value)+(((1.5707963267949)*(x5897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5898=IKcos(j4);
IkReal x5899=IKsin(j4);
IkReal x5900=(cj5*r00);
IkReal x5901=(cj5*r10);
IkReal x5902=(cj5*r20);
IkReal x5903=((1.0)*x5898);
IkReal x5904=((1.0)*x5899);
IkReal x5905=(sj5*x5898);
IkReal x5906=(sj5*x5899);
evalcond[0]=(((r22*x5899))+(((-1.0)*x5902*x5903))+((r21*x5905)));
evalcond[1]=((((-1.0)*x5901*x5903))+((r12*x5899))+((r11*x5905)));
evalcond[2]=((-1.0)+((r02*x5899))+(((-1.0)*x5900*x5903))+((r01*x5905)));
evalcond[3]=((((-1.0)*r02*x5903))+(((-1.0)*x5900*x5904))+((r01*x5906)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x5903))+((cj1*sj2))+(((-1.0)*x5901*x5904))+((r11*x5906)));
evalcond[5]=((((-1.0)*x5902*x5904))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x5903))+((cj1*cj2))+((r21*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5907=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5907;
j4eval[1]=IKsign(x5907);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5908=((1.0)*cj5);
IkReal x5909=((((-1.0)*r11*x5908))+(((-1.0)*r10*sj5)));
j4eval[0]=x5909;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5908))))));
j4eval[2]=IKsign(x5909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5910=cj5*cj5;
IkReal x5911=r01*r01;
IkReal x5912=(r01*sj5);
IkReal x5913=(cj5*r00);
IkReal x5914=((((-1.0)*(r02*r02)))+((x5910*x5911))+(((2.0)*x5912*x5913))+(((-1.0)*x5910*(r00*r00)))+(((-1.0)*x5911)));
j4eval[0]=x5914;
j4eval[1]=IKsign(x5914);
j4eval[2]=((IKabs(r02))+(IKabs((x5912+(((-1.0)*x5913))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5915=cj5*cj5;
IkReal x5916=r01*r01;
IkReal x5917=(r01*sj5);
IkReal x5918=(cj5*r00);
CheckValue<IkReal> x5919=IKPowWithIntegerCheck(IKsign((((x5915*x5916))+(((-1.0)*(r02*r02)))+(((2.0)*x5917*x5918))+(((-1.0)*x5915*(r00*r00)))+(((-1.0)*x5916)))),-1);
if(!x5919.valid){
continue;
}
CheckValue<IkReal> x5920 = IKatan2WithCheck(IkReal(r02),IkReal((x5917+(((-1.0)*x5918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5919.value)))+(x5920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5921=IKcos(j4);
IkReal x5922=IKsin(j4);
IkReal x5923=(cj5*r00);
IkReal x5924=(cj5*r10);
IkReal x5925=((1.0)*sj1);
IkReal x5926=(cj5*r20);
IkReal x5927=((1.0)*x5921);
IkReal x5928=((1.0)*x5922);
IkReal x5929=(sj5*x5921);
IkReal x5930=(sj5*x5922);
evalcond[0]=(((r22*x5922))+((r21*x5929))+(((-1.0)*x5926*x5927)));
evalcond[1]=(((r11*x5929))+((r12*x5922))+(((-1.0)*x5924*x5927)));
evalcond[2]=((1.0)+(((-1.0)*x5923*x5927))+((r01*x5929))+((r02*x5922)));
evalcond[3]=((((-1.0)*r02*x5927))+(((-1.0)*x5923*x5928))+((r01*x5930)));
evalcond[4]=((((-1.0)*r22*x5927))+((r21*x5930))+(((-1.0)*sj2*x5925))+((cj1*cj2))+(((-1.0)*x5926*x5928)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x5930))+(((-1.0)*r12*x5927))+(((-1.0)*x5924*x5928))+(((-1.0)*cj2*x5925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5931=((1.0)*cj5);
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x5931)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
CheckValue<IkReal> x5933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5931)))),-1);
if(!x5933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5932.value)+(((1.5707963267949)*(x5933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5934=IKcos(j4);
IkReal x5935=IKsin(j4);
IkReal x5936=(cj5*r00);
IkReal x5937=(cj5*r10);
IkReal x5938=((1.0)*sj1);
IkReal x5939=(cj5*r20);
IkReal x5940=((1.0)*x5934);
IkReal x5941=((1.0)*x5935);
IkReal x5942=(sj5*x5934);
IkReal x5943=(sj5*x5935);
evalcond[0]=(((r22*x5935))+((r21*x5942))+(((-1.0)*x5939*x5940)));
evalcond[1]=((((-1.0)*x5937*x5940))+((r12*x5935))+((r11*x5942)));
evalcond[2]=((1.0)+(((-1.0)*x5936*x5940))+((r01*x5942))+((r02*x5935)));
evalcond[3]=((((-1.0)*x5936*x5941))+((r01*x5943))+(((-1.0)*r02*x5940)));
evalcond[4]=((((-1.0)*r22*x5940))+((r21*x5943))+(((-1.0)*x5939*x5941))+(((-1.0)*sj2*x5938))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x5937*x5941))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x5940))+((r11*x5943))+(((-1.0)*cj2*x5938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5944=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5944.valid){
continue;
}
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5944.value)))+(x5945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5946=IKcos(j4);
IkReal x5947=IKsin(j4);
IkReal x5948=(cj5*r00);
IkReal x5949=(cj5*r10);
IkReal x5950=((1.0)*sj1);
IkReal x5951=(cj5*r20);
IkReal x5952=((1.0)*x5946);
IkReal x5953=((1.0)*x5947);
IkReal x5954=(sj5*x5946);
IkReal x5955=(sj5*x5947);
evalcond[0]=(((r21*x5954))+((r22*x5947))+(((-1.0)*x5951*x5952)));
evalcond[1]=(((r11*x5954))+(((-1.0)*x5949*x5952))+((r12*x5947)));
evalcond[2]=((1.0)+(((-1.0)*x5948*x5952))+((r02*x5947))+((r01*x5954)));
evalcond[3]=((((-1.0)*r02*x5952))+(((-1.0)*x5948*x5953))+((r01*x5955)));
evalcond[4]=(((r21*x5955))+(((-1.0)*sj2*x5950))+(((-1.0)*r22*x5952))+(((-1.0)*x5951*x5953))+((cj1*cj2)));
evalcond[5]=(((r11*x5955))+(((-1.0)*cj2*x5950))+(((-1.0)*cj1*sj2))+(((-1.0)*x5949*x5953))+(((-1.0)*r12*x5952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5956=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5956);
rxp1_1=(px*r21);
rxp1_2=(r11*x5956);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5957=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5957);
rxp1_1=(px*r21);
rxp1_2=(r11*x5957);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5958=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5958);
rxp1_1=(px*r21);
rxp1_2=(r11*x5958);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5961=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5961.valid){
continue;
}
IkReal x5959=x5961.value;
IkReal x5960=((1.0)*sj0*x5959);
sj4array[0]=((((-1.0)*cj2*sj1*x5960))+(((-1.0)*cj1*sj2*x5960)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5962=IKcos(j4);
IkReal x5963=IKsin(j4);
IkReal x5964=(r21*sj5);
IkReal x5965=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x5962);
evalcond[1]=(((r02*x5963))+(((-1.0)*sj0)));
evalcond[2]=(((x5962*x5964))+(((-1.0)*x5962*x5965)));
evalcond[3]=((((-1.0)*cj5*r10*x5962))+((r11*sj5*x5962)));
evalcond[4]=((((-1.0)*sj1*sj2))+((x5963*x5964))+((cj1*cj2))+(((-1.0)*x5963*x5965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5967=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5967.valid){
continue;
}
IkReal x5966=x5967.value;
sj4array[0]=((((-1.0)*cj1*cj2*x5966))+((sj1*sj2*x5966)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5968=IKcos(j4);
IkReal x5969=IKsin(j4);
IkReal x5970=((1.0)*cj5);
IkReal x5971=(sj5*x5968);
evalcond[0]=((-1.0)*r02*x5968);
evalcond[1]=(((r02*x5969))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x5968*x5970))+((r21*x5971)));
evalcond[3]=((((-1.0)*r10*x5968*x5970))+((r11*x5971)));
evalcond[4]=((((-1.0)*r10*x5969*x5970))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((r11*sj5*x5969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5972=IKPowWithIntegerCheck(r02,-1);
if(!x5972.valid){
continue;
}
sj4array[0]=(sj0*(x5972.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5973=IKcos(j4);
IkReal x5974=IKsin(j4);
IkReal x5975=(r21*sj5);
IkReal x5976=(r11*sj5);
IkReal x5977=((1.0)*cj5*x5974);
IkReal x5978=((1.0)*cj5*x5973);
evalcond[0]=((-1.0)*r02*x5973);
evalcond[1]=((((-1.0)*r20*x5978))+((x5973*x5975)));
evalcond[2]=((((-1.0)*r10*x5978))+((x5973*x5976)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r20*x5977))+((cj1*cj2))+((x5974*x5975)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*r10*x5977))+((x5974*x5976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5979=((1.0)*sj0);
IkReal x5980=((1.0)*cj0);
CheckValue<IkReal> x5981=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x5981.valid){
continue;
}
CheckValue<IkReal> x5982 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x5980))+(((-1.0)*cj5*r10*x5979))+((cj0*r01*sj5)))),IkReal(((((-1.0)*r12*x5979))+(((-1.0)*r02*x5980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5981.value)))+(x5982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5983=IKcos(j4);
IkReal x5984=IKsin(j4);
IkReal x5985=(cj5*r00);
IkReal x5986=(cj5*r10);
IkReal x5987=(cj2*sj1);
IkReal x5988=(cj5*r20);
IkReal x5989=(cj1*sj2);
IkReal x5990=((1.0)*x5983);
IkReal x5991=((1.0)*x5984);
IkReal x5992=(sj5*x5983);
IkReal x5993=(sj5*x5984);
evalcond[0]=(((r21*x5992))+(((-1.0)*x5988*x5990))+((r22*x5984)));
evalcond[1]=(((r12*x5984))+cj0+(((-1.0)*x5986*x5990))+((r11*x5992)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5985*x5990))+((r02*x5984))+((r01*x5992)));
evalcond[3]=(((r21*x5993))+(((-1.0)*sj1*sj2))+(((-1.0)*x5988*x5991))+((cj1*cj2))+(((-1.0)*r22*x5990)));
evalcond[4]=((((-1.0)*x5985*x5991))+(((-1.0)*r02*x5990))+((cj0*x5989))+((cj0*x5987))+((r01*x5993)));
evalcond[5]=((((-1.0)*r12*x5990))+(((-1.0)*x5986*x5991))+((r11*x5993))+((sj0*x5987))+((sj0*x5989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5994 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5994.valid){
continue;
}
CheckValue<IkReal> x5995=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5994.value)+(((1.5707963267949)*(x5995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5996=IKcos(j4);
IkReal x5997=IKsin(j4);
IkReal x5998=(cj5*r00);
IkReal x5999=(cj5*r10);
IkReal x6000=(cj2*sj1);
IkReal x6001=(cj5*r20);
IkReal x6002=(cj1*sj2);
IkReal x6003=((1.0)*x5996);
IkReal x6004=((1.0)*x5997);
IkReal x6005=(sj5*x5996);
IkReal x6006=(sj5*x5997);
evalcond[0]=(((r21*x6005))+((r22*x5997))+(((-1.0)*x6001*x6003)));
evalcond[1]=(((r12*x5997))+cj0+((r11*x6005))+(((-1.0)*x5999*x6003)));
evalcond[2]=((((-1.0)*x5998*x6003))+(((-1.0)*sj0))+((r02*x5997))+((r01*x6005)));
evalcond[3]=(((r21*x6006))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x6003))+((cj1*cj2))+(((-1.0)*x6001*x6004)));
evalcond[4]=(((cj0*x6000))+((cj0*x6002))+(((-1.0)*x5998*x6004))+((r01*x6006))+(((-1.0)*r02*x6003)));
evalcond[5]=(((r11*x6006))+(((-1.0)*r12*x6003))+((sj0*x6000))+((sj0*x6002))+(((-1.0)*x5999*x6004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6007 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6007.valid){
continue;
}
CheckValue<IkReal> x6008=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6007.value)+(((1.5707963267949)*(x6008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6009=IKcos(j4);
IkReal x6010=IKsin(j4);
IkReal x6011=(cj5*r00);
IkReal x6012=(cj5*r10);
IkReal x6013=(cj2*sj1);
IkReal x6014=(cj5*r20);
IkReal x6015=(cj1*sj2);
IkReal x6016=((1.0)*x6009);
IkReal x6017=((1.0)*x6010);
IkReal x6018=(sj5*x6009);
IkReal x6019=(sj5*x6010);
evalcond[0]=(((r21*x6018))+((r22*x6010))+(((-1.0)*x6014*x6016)));
evalcond[1]=(((r11*x6018))+cj0+((r12*x6010))+(((-1.0)*x6012*x6016)));
evalcond[2]=(((r01*x6018))+(((-1.0)*sj0))+((r02*x6010))+(((-1.0)*x6011*x6016)));
evalcond[3]=(((r21*x6019))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x6016))+((cj1*cj2))+(((-1.0)*x6014*x6017)));
evalcond[4]=(((r01*x6019))+(((-1.0)*r02*x6016))+((cj0*x6015))+((cj0*x6013))+(((-1.0)*x6011*x6017)));
evalcond[5]=(((r11*x6019))+(((-1.0)*r12*x6016))+((sj0*x6015))+((sj0*x6013))+(((-1.0)*x6012*x6017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6020=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6020;
j0eval[1]=IKsign(x6020);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6021=cj5*cj5;
IkReal x6022=r21*r21;
IkReal x6023=(sj1*sj2);
IkReal x6024=(r21*sj5);
IkReal x6025=(cj1*cj2);
IkReal x6026=(cj5*r20);
IkReal x6027=(((x6021*(r20*r20)))+(r22*r22)+x6022+(((-2.0)*x6024*x6026))+(((-1.0)*x6021*x6022)));
j4eval[0]=x6027;
j4eval[1]=IKsign(x6027);
j4eval[2]=((IKabs(((((-1.0)*x6025*x6026))+((x6023*x6026))+((x6024*x6025))+(((-1.0)*x6023*x6024)))))+(IKabs(((((-1.0)*r22*x6025))+((r22*x6023))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.62372043769855)*py))+(((3.38863395693611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((3.38863395693611)*py))))+IKsqr(((((1.62372043769855)*py))+(((3.38863395693611)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((3.38863395693611)*py))), ((((1.62372043769855)*py))+(((3.38863395693611)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6028=IKcos(j0);
IkReal x6029=IKsin(j0);
evalcond[0]=((((-0.115)*x6029))+(((-1.0)*px))+(((0.24)*x6028)));
evalcond[1]=((((-1.0)*py))+(((0.115)*x6028))+(((0.24)*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6030=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6030;
j4eval[1]=IKsign(x6030);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6031=cj5*cj5;
IkReal x6032=(r11*r21);
IkReal x6033=((1.0)*r20);
IkReal x6034=(cj5*sj5);
IkReal x6035=((((-1.0)*r12*r22))+((r11*r20*x6034))+((x6031*x6032))+(((-1.0)*x6032))+(((-1.0)*r10*x6031*x6033))+((r10*r21*x6034)));
j4eval[0]=x6035;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6033))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6036=cj5*cj5;
IkReal x6037=((1.0)*r21);
IkReal x6038=(cj5*sj5);
IkReal x6039=((1.0)*r20);
IkReal x6040=((((-1.0)*r00*x6037*x6038))+((r01*r21))+(((-1.0)*r01*x6038*x6039))+(((-1.0)*r01*x6036*x6037))+((r00*r20*x6036))+((r02*r22)));
j4eval[0]=x6040;
j4eval[1]=IKsign(x6040);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x6039))+((cj0*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6041=cj5*cj5;
IkReal x6042=((1.0)*r21);
IkReal x6043=(cj5*sj5);
IkReal x6044=((1.0)*r20);
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6041*x6042))+((r01*r21))+(((-1.0)*r00*x6042*x6043))+(((-1.0)*r01*x6043*x6044))+((r02*r22))+((r00*r20*x6041)))),-1);
if(!x6045.valid){
continue;
}
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6044)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6045.value)))+(x6046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6047=IKcos(j4);
IkReal x6048=IKsin(j4);
IkReal x6049=(cj5*r00);
IkReal x6050=(r01*sj5);
IkReal x6051=(r11*sj5);
IkReal x6052=(r21*sj5);
IkReal x6053=(cj5*r10);
IkReal x6054=(cj5*r20);
IkReal x6055=((1.0)*x6047);
IkReal x6056=((1.0)*x6048);
evalcond[0]=(((r22*x6048))+(((-1.0)*x6054*x6055))+((x6047*x6052)));
evalcond[1]=((((-1.0)*x6052*x6056))+((r22*x6047))+((x6048*x6054)));
evalcond[2]=((((-1.0)*x6053*x6055))+cj0+((x6047*x6051))+((r12*x6048)));
evalcond[3]=(cj0+(((-1.0)*x6050*x6056))+((x6048*x6049))+((r02*x6047)));
evalcond[4]=(sj0+(((-1.0)*x6051*x6056))+((x6048*x6053))+((r12*x6047)));
evalcond[5]=((((-1.0)*sj0))+((x6047*x6050))+(((-1.0)*x6049*x6055))+((r02*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6057=cj5*cj5;
IkReal x6058=(r11*r21);
IkReal x6059=((1.0)*r20);
IkReal x6060=(cj5*sj5);
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6059))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r10*r21*x6060))+(((-1.0)*x6058))+(((-1.0)*r10*x6057*x6059))+((r11*r20*x6060))+((x6057*x6058)))),-1);
if(!x6062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6061.value)+(((1.5707963267949)*(x6062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6063=IKcos(j4);
IkReal x6064=IKsin(j4);
IkReal x6065=(cj5*r00);
IkReal x6066=(r01*sj5);
IkReal x6067=(r11*sj5);
IkReal x6068=(r21*sj5);
IkReal x6069=(cj5*r10);
IkReal x6070=(cj5*r20);
IkReal x6071=((1.0)*x6063);
IkReal x6072=((1.0)*x6064);
evalcond[0]=(((x6063*x6068))+((r22*x6064))+(((-1.0)*x6070*x6071)));
evalcond[1]=(((r22*x6063))+(((-1.0)*x6068*x6072))+((x6064*x6070)));
evalcond[2]=(cj0+((x6063*x6067))+((r12*x6064))+(((-1.0)*x6069*x6071)));
evalcond[3]=(cj0+(((-1.0)*x6066*x6072))+((x6064*x6065))+((r02*x6063)));
evalcond[4]=((((-1.0)*x6067*x6072))+sj0+((r12*x6063))+((x6064*x6069)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6065*x6071))+((x6063*x6066))+((r02*x6064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
CheckValue<IkReal> x6074=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6073.value)+(((1.5707963267949)*(x6074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6075=IKcos(j4);
IkReal x6076=IKsin(j4);
IkReal x6077=(cj5*r00);
IkReal x6078=(r01*sj5);
IkReal x6079=(r11*sj5);
IkReal x6080=(r21*sj5);
IkReal x6081=(cj5*r10);
IkReal x6082=(cj5*r20);
IkReal x6083=((1.0)*x6075);
IkReal x6084=((1.0)*x6076);
evalcond[0]=(((r22*x6076))+(((-1.0)*x6082*x6083))+((x6075*x6080)));
evalcond[1]=((((-1.0)*x6080*x6084))+((r22*x6075))+((x6076*x6082)));
evalcond[2]=(((x6075*x6079))+cj0+((r12*x6076))+(((-1.0)*x6081*x6083)));
evalcond[3]=(((x6076*x6077))+cj0+(((-1.0)*x6078*x6084))+((r02*x6075)));
evalcond[4]=(sj0+((x6076*x6081))+(((-1.0)*x6079*x6084))+((r12*x6075)));
evalcond[5]=(((x6075*x6078))+(((-1.0)*sj0))+(((-1.0)*x6077*x6083))+((r02*x6076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((-3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38863395693611)*px))+(((1.62372043769855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))))+IKsqr(((((-3.38863395693611)*px))+(((1.62372043769855)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))), ((((-3.38863395693611)*px))+(((1.62372043769855)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6085=IKcos(j0);
IkReal x6086=IKsin(j0);
evalcond[0]=((((-0.115)*x6086))+(((-0.24)*x6085))+(((-1.0)*px)));
evalcond[1]=((((-0.24)*x6086))+(((-1.0)*py))+(((0.115)*x6085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6087=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6087;
j4eval[1]=IKsign(x6087);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6088=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6088;
j4eval[1]=IKsign(x6088);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6089=cj5*cj5;
IkReal x6090=(r11*r21);
IkReal x6091=((1.0)*r20);
IkReal x6092=(cj5*sj5);
IkReal x6093=((((-1.0)*r12*r22))+((r10*r21*x6092))+((x6089*x6090))+(((-1.0)*x6090))+((r11*r20*x6092))+(((-1.0)*r10*x6089*x6091)));
j4eval[0]=x6093;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6091)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6094=cj5*cj5;
IkReal x6095=(r11*r21);
IkReal x6096=((1.0)*r20);
IkReal x6097=(cj5*sj5);
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6094*x6096))+(((-1.0)*r12*r22))+((r10*r21*x6097))+((x6094*x6095))+(((-1.0)*x6095))+((r11*r20*x6097)))),-1);
if(!x6098.valid){
continue;
}
CheckValue<IkReal> x6099 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6098.value)))+(x6099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6100=IKcos(j4);
IkReal x6101=IKsin(j4);
IkReal x6102=((1.0)*sj0);
IkReal x6103=(cj5*r00);
IkReal x6104=(cj5*r10);
IkReal x6105=(cj5*r20);
IkReal x6106=((1.0)*x6100);
IkReal x6107=(sj5*x6100);
IkReal x6108=((1.0)*sj5*x6101);
evalcond[0]=((((-1.0)*x6105*x6106))+((r22*x6101))+((r21*x6107)));
evalcond[1]=(((r22*x6100))+((x6101*x6105))+(((-1.0)*r21*x6108)));
evalcond[2]=(((r11*x6107))+(((-1.0)*x6104*x6106))+cj0+((r12*x6101)));
evalcond[3]=((((-1.0)*x6103*x6106))+((r02*x6101))+(((-1.0)*x6102))+((r01*x6107)));
evalcond[4]=(((x6101*x6103))+(((-1.0)*r01*x6108))+((r02*x6100))+(((-1.0)*cj0)));
evalcond[5]=(((x6101*x6104))+(((-1.0)*r11*x6108))+(((-1.0)*x6102))+((r12*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6109 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6109.valid){
continue;
}
CheckValue<IkReal> x6110=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6109.value)+(((1.5707963267949)*(x6110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6111=IKcos(j4);
IkReal x6112=IKsin(j4);
IkReal x6113=((1.0)*sj0);
IkReal x6114=(cj5*r00);
IkReal x6115=(cj5*r10);
IkReal x6116=(cj5*r20);
IkReal x6117=((1.0)*x6111);
IkReal x6118=(sj5*x6111);
IkReal x6119=((1.0)*sj5*x6112);
evalcond[0]=((((-1.0)*x6116*x6117))+((r22*x6112))+((r21*x6118)));
evalcond[1]=((((-1.0)*r21*x6119))+((r22*x6111))+((x6112*x6116)));
evalcond[2]=(cj0+(((-1.0)*x6115*x6117))+((r12*x6112))+((r11*x6118)));
evalcond[3]=(((r02*x6112))+(((-1.0)*x6113))+(((-1.0)*x6114*x6117))+((r01*x6118)));
evalcond[4]=(((r02*x6111))+((x6112*x6114))+(((-1.0)*r01*x6119))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6119))+(((-1.0)*x6113))+((r12*x6111))+((x6112*x6115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6120.value)+(((1.5707963267949)*(x6121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6122=IKcos(j4);
IkReal x6123=IKsin(j4);
IkReal x6124=((1.0)*sj0);
IkReal x6125=(cj5*r00);
IkReal x6126=(cj5*r10);
IkReal x6127=(cj5*r20);
IkReal x6128=((1.0)*x6122);
IkReal x6129=(sj5*x6122);
IkReal x6130=((1.0)*sj5*x6123);
evalcond[0]=(((r21*x6129))+(((-1.0)*x6127*x6128))+((r22*x6123)));
evalcond[1]=(((x6123*x6127))+(((-1.0)*r21*x6130))+((r22*x6122)));
evalcond[2]=(((r12*x6123))+cj0+(((-1.0)*x6126*x6128))+((r11*x6129)));
evalcond[3]=(((r01*x6129))+(((-1.0)*x6125*x6128))+((r02*x6123))+(((-1.0)*x6124)));
evalcond[4]=((((-1.0)*r01*x6130))+((x6123*x6125))+((r02*x6122))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6122))+((x6123*x6126))+(((-1.0)*x6124))+(((-1.0)*r11*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428704566635601)*px))+(((1.88257222739981)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.428704566635601)*py))+(((1.88257222739981)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428704566635601)*px))+(((1.88257222739981)*py))))+IKsqr(((((0.428704566635601)*py))+(((1.88257222739981)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428704566635601)*px))+(((1.88257222739981)*py))), ((((0.428704566635601)*py))+(((1.88257222739981)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6131=IKcos(j0);
IkReal x6132=IKsin(j0);
evalcond[0]=((((0.505)*x6131))+(((-1.0)*px))+(((-0.115)*x6132)));
evalcond[1]=((((0.505)*x6132))+(((0.115)*x6131))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6133=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6133;
j4eval[1]=IKsign(x6133);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6134=cj5*cj5;
IkReal x6135=(r11*r21);
IkReal x6136=((1.0)*r20);
IkReal x6137=(cj5*sj5);
IkReal x6138=((((-1.0)*r12*r22))+(((-1.0)*r10*x6134*x6136))+((r10*r21*x6137))+((r11*r20*x6137))+((x6134*x6135))+(((-1.0)*x6135)));
j4eval[0]=x6138;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6136)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6139=cj5*cj5;
IkReal x6140=((1.0)*r21);
IkReal x6141=(cj5*sj5);
IkReal x6142=((1.0)*r20);
IkReal x6143=(((r00*r20*x6139))+(((-1.0)*r01*x6141*x6142))+((r01*r21))+(((-1.0)*r00*x6140*x6141))+(((-1.0)*r01*x6139*x6140))+((r02*r22)));
j4eval[0]=x6143;
j4eval[1]=IKsign(x6143);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x6142))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6144=cj5*cj5;
IkReal x6145=((1.0)*r21);
IkReal x6146=(cj5*sj5);
IkReal x6147=((1.0)*r20);
CheckValue<IkReal> x6148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6144*x6145))+((r01*r21))+((r00*r20*x6144))+(((-1.0)*r00*x6145*x6146))+((r02*r22))+(((-1.0)*r01*x6146*x6147)))),-1);
if(!x6148.valid){
continue;
}
CheckValue<IkReal> x6149 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*x6147))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6148.value)))+(x6149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6150=IKcos(j4);
IkReal x6151=IKsin(j4);
IkReal x6152=(cj5*r00);
IkReal x6153=(r01*sj5);
IkReal x6154=(r11*sj5);
IkReal x6155=(r21*sj5);
IkReal x6156=(cj5*r10);
IkReal x6157=(cj5*r20);
IkReal x6158=((1.0)*x6150);
IkReal x6159=((1.0)*x6151);
evalcond[0]=(((r22*x6151))+(((-1.0)*x6157*x6158))+((x6150*x6155)));
evalcond[1]=(((r22*x6150))+(((-1.0)*x6155*x6159))+((x6151*x6157)));
evalcond[2]=(((r12*x6151))+cj0+(((-1.0)*x6156*x6158))+((x6150*x6154)));
evalcond[3]=(cj0+((r02*x6150))+(((-1.0)*x6153*x6159))+((x6151*x6152)));
evalcond[4]=(((r12*x6150))+sj0+(((-1.0)*x6154*x6159))+((x6151*x6156)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6152*x6158))+((r02*x6151))+((x6150*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6160=cj5*cj5;
IkReal x6161=(r11*r21);
IkReal x6162=((1.0)*r20);
IkReal x6163=(cj5*sj5);
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6160*x6162))+((r11*r20*x6163))+(((-1.0)*r12*r22))+(((-1.0)*x6161))+((x6160*x6161))+((r10*r21*x6163)))),-1);
if(!x6164.valid){
continue;
}
CheckValue<IkReal> x6165 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6164.value)))+(x6165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6166=IKcos(j4);
IkReal x6167=IKsin(j4);
IkReal x6168=(cj5*r00);
IkReal x6169=(r01*sj5);
IkReal x6170=(r11*sj5);
IkReal x6171=(r21*sj5);
IkReal x6172=(cj5*r10);
IkReal x6173=(cj5*r20);
IkReal x6174=((1.0)*x6166);
IkReal x6175=((1.0)*x6167);
evalcond[0]=(((x6166*x6171))+(((-1.0)*x6173*x6174))+((r22*x6167)));
evalcond[1]=(((x6167*x6173))+(((-1.0)*x6171*x6175))+((r22*x6166)));
evalcond[2]=(((x6166*x6170))+cj0+((r12*x6167))+(((-1.0)*x6172*x6174)));
evalcond[3]=(((x6167*x6168))+cj0+((r02*x6166))+(((-1.0)*x6169*x6175)));
evalcond[4]=(((x6167*x6172))+sj0+((r12*x6166))+(((-1.0)*x6170*x6175)));
evalcond[5]=((((-1.0)*x6168*x6174))+((x6166*x6169))+(((-1.0)*sj0))+((r02*x6167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
CheckValue<IkReal> x6177=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6176.value)+(((1.5707963267949)*(x6177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6178=IKcos(j4);
IkReal x6179=IKsin(j4);
IkReal x6180=(cj5*r00);
IkReal x6181=(r01*sj5);
IkReal x6182=(r11*sj5);
IkReal x6183=(r21*sj5);
IkReal x6184=(cj5*r10);
IkReal x6185=(cj5*r20);
IkReal x6186=((1.0)*x6178);
IkReal x6187=((1.0)*x6179);
evalcond[0]=((((-1.0)*x6185*x6186))+((r22*x6179))+((x6178*x6183)));
evalcond[1]=((((-1.0)*x6183*x6187))+((x6179*x6185))+((r22*x6178)));
evalcond[2]=(cj0+((r12*x6179))+(((-1.0)*x6184*x6186))+((x6178*x6182)));
evalcond[3]=(cj0+((r02*x6178))+((x6179*x6180))+(((-1.0)*x6181*x6187)));
evalcond[4]=(sj0+(((-1.0)*x6182*x6187))+((r12*x6178))+((x6179*x6184)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6179))+((x6178*x6181))+(((-1.0)*x6180*x6186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-8.30324909747292)*px))+(((1.80505415162455)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.30324909747292)*py))+(((1.80505415162455)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.30324909747292)*px))+(((1.80505415162455)*py))))+IKsqr(((((8.30324909747292)*py))+(((1.80505415162455)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-8.30324909747292)*px))+(((1.80505415162455)*py))), ((((8.30324909747292)*py))+(((1.80505415162455)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6188=IKcos(j0);
IkReal x6189=IKsin(j0);
evalcond[0]=((((0.025)*x6188))+(((-1.0)*px))+(((-0.115)*x6189)));
evalcond[1]=((((0.025)*x6189))+(((-1.0)*py))+(((0.115)*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6190=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6190;
j4eval[1]=IKsign(x6190);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6191=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6191;
j4eval[1]=IKsign(x6191);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6192=cj5*cj5;
IkReal x6193=(r11*r21);
IkReal x6194=((1.0)*r20);
IkReal x6195=(cj5*sj5);
IkReal x6196=(((r11*r20*x6195))+(((-1.0)*r12*r22))+((r10*r21*x6195))+(((-1.0)*x6193))+((x6192*x6193))+(((-1.0)*r10*x6192*x6194)));
j4eval[0]=x6196;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6194))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6197=cj5*cj5;
IkReal x6198=(r11*r21);
IkReal x6199=((1.0)*r20);
IkReal x6200=(cj5*sj5);
CheckValue<IkReal> x6201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6197*x6199))+(((-1.0)*r12*r22))+((r10*r21*x6200))+(((-1.0)*x6198))+((r11*r20*x6200))+((x6197*x6198)))),-1);
if(!x6201.valid){
continue;
}
CheckValue<IkReal> x6202 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6199))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6201.value)))+(x6202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6203=IKcos(j4);
IkReal x6204=IKsin(j4);
IkReal x6205=((1.0)*sj0);
IkReal x6206=(cj5*r00);
IkReal x6207=(cj5*r10);
IkReal x6208=(cj5*r20);
IkReal x6209=((1.0)*x6203);
IkReal x6210=(sj5*x6203);
IkReal x6211=((1.0)*sj5*x6204);
evalcond[0]=(((r22*x6204))+(((-1.0)*x6208*x6209))+((r21*x6210)));
evalcond[1]=(((r22*x6203))+(((-1.0)*r21*x6211))+((x6204*x6208)));
evalcond[2]=((((-1.0)*x6207*x6209))+((r11*x6210))+cj0+((r12*x6204)));
evalcond[3]=(((r02*x6204))+((r01*x6210))+(((-1.0)*x6206*x6209))+(((-1.0)*x6205)));
evalcond[4]=((((-1.0)*r01*x6211))+((r02*x6203))+((x6204*x6206))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6211))+(((-1.0)*x6205))+((x6204*x6207))+((r12*x6203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
CheckValue<IkReal> x6213=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6212.value)+(((1.5707963267949)*(x6213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6214=IKcos(j4);
IkReal x6215=IKsin(j4);
IkReal x6216=((1.0)*sj0);
IkReal x6217=(cj5*r00);
IkReal x6218=(cj5*r10);
IkReal x6219=(cj5*r20);
IkReal x6220=((1.0)*x6214);
IkReal x6221=(sj5*x6214);
IkReal x6222=((1.0)*sj5*x6215);
evalcond[0]=(((r21*x6221))+(((-1.0)*x6219*x6220))+((r22*x6215)));
evalcond[1]=((((-1.0)*r21*x6222))+((x6215*x6219))+((r22*x6214)));
evalcond[2]=(((r12*x6215))+cj0+((r11*x6221))+(((-1.0)*x6218*x6220)));
evalcond[3]=(((r02*x6215))+(((-1.0)*x6216))+((r01*x6221))+(((-1.0)*x6217*x6220)));
evalcond[4]=(((r02*x6214))+(((-1.0)*r01*x6222))+((x6215*x6217))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6214))+(((-1.0)*r11*x6222))+(((-1.0)*x6216))+((x6215*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
CheckValue<IkReal> x6224=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6223.value)+(((1.5707963267949)*(x6224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6225=IKcos(j4);
IkReal x6226=IKsin(j4);
IkReal x6227=((1.0)*sj0);
IkReal x6228=(cj5*r00);
IkReal x6229=(cj5*r10);
IkReal x6230=(cj5*r20);
IkReal x6231=((1.0)*x6225);
IkReal x6232=(sj5*x6225);
IkReal x6233=((1.0)*sj5*x6226);
evalcond[0]=(((r21*x6232))+((r22*x6226))+(((-1.0)*x6230*x6231)));
evalcond[1]=(((x6226*x6230))+(((-1.0)*r21*x6233))+((r22*x6225)));
evalcond[2]=(cj0+(((-1.0)*x6229*x6231))+((r12*x6226))+((r11*x6232)));
evalcond[3]=(((r02*x6226))+(((-1.0)*x6227))+(((-1.0)*x6228*x6231))+((r01*x6232)));
evalcond[4]=(((r02*x6225))+(((-1.0)*r01*x6233))+(((-1.0)*cj0))+((x6226*x6228)));
evalcond[5]=((((-1.0)*r11*x6233))+(((-1.0)*x6227))+((x6226*x6229))+((r12*x6225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((-3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38863395693611)*px))+(((1.62372043769855)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))))+IKsqr(((((-3.38863395693611)*px))+(((1.62372043769855)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((-3.38863395693611)*py))), ((((-3.38863395693611)*px))+(((1.62372043769855)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6234=IKcos(j0);
IkReal x6235=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.115)*x6235))+(((-0.24)*x6234)));
evalcond[1]=((((0.115)*x6234))+(((-1.0)*py))+(((-0.24)*x6235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6236=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6236;
j4eval[1]=IKsign(x6236);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6237=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6237;
j4eval[1]=IKsign(x6237);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6238=cj5*cj5;
IkReal x6239=(r11*r21);
IkReal x6240=((1.0)*r20);
IkReal x6241=(cj5*sj5);
IkReal x6242=((((-1.0)*r12*r22))+((r11*r20*x6241))+(((-1.0)*x6239))+((x6238*x6239))+(((-1.0)*r10*x6238*x6240))+((r10*r21*x6241)));
j4eval[0]=x6242;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6240)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6243=cj5*cj5;
IkReal x6244=(r11*r21);
IkReal x6245=((1.0)*r20);
IkReal x6246=(cj5*sj5);
CheckValue<IkReal> x6247 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6247.valid){
continue;
}
CheckValue<IkReal> x6248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6243*x6245))+(((-1.0)*r12*r22))+(((-1.0)*x6244))+((r11*r20*x6246))+((x6243*x6244))+((r10*r21*x6246)))),-1);
if(!x6248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6247.value)+(((1.5707963267949)*(x6248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6249=IKcos(j4);
IkReal x6250=IKsin(j4);
IkReal x6251=((1.0)*sj0);
IkReal x6252=(cj5*r00);
IkReal x6253=(cj5*r10);
IkReal x6254=(cj5*r20);
IkReal x6255=((1.0)*x6249);
IkReal x6256=(sj5*x6249);
IkReal x6257=((1.0)*sj5*x6250);
evalcond[0]=((((-1.0)*x6254*x6255))+((r22*x6250))+((r21*x6256)));
evalcond[1]=(((x6250*x6254))+((r22*x6249))+(((-1.0)*r21*x6257)));
evalcond[2]=(cj0+(((-1.0)*x6253*x6255))+((r12*x6250))+((r11*x6256)));
evalcond[3]=((((-1.0)*x6252*x6255))+((r01*x6256))+((r02*x6250))+(((-1.0)*x6251)));
evalcond[4]=(((r02*x6249))+((x6250*x6252))+(((-1.0)*r01*x6257))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6249))+((x6250*x6253))+(((-1.0)*x6251))+(((-1.0)*r11*x6257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
CheckValue<IkReal> x6259=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6258.value)+(((1.5707963267949)*(x6259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6260=IKcos(j4);
IkReal x6261=IKsin(j4);
IkReal x6262=((1.0)*sj0);
IkReal x6263=(cj5*r00);
IkReal x6264=(cj5*r10);
IkReal x6265=(cj5*r20);
IkReal x6266=((1.0)*x6260);
IkReal x6267=(sj5*x6260);
IkReal x6268=((1.0)*sj5*x6261);
evalcond[0]=(((r22*x6261))+((r21*x6267))+(((-1.0)*x6265*x6266)));
evalcond[1]=(((r22*x6260))+((x6261*x6265))+(((-1.0)*r21*x6268)));
evalcond[2]=(cj0+((r12*x6261))+(((-1.0)*x6264*x6266))+((r11*x6267)));
evalcond[3]=(((r01*x6267))+(((-1.0)*x6263*x6266))+((r02*x6261))+(((-1.0)*x6262)));
evalcond[4]=(((x6261*x6263))+((r02*x6260))+(((-1.0)*r01*x6268))+(((-1.0)*cj0)));
evalcond[5]=(((x6261*x6264))+(((-1.0)*x6262))+((r12*x6260))+(((-1.0)*r11*x6268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6269.value)+(((1.5707963267949)*(x6270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6271=IKcos(j4);
IkReal x6272=IKsin(j4);
IkReal x6273=((1.0)*sj0);
IkReal x6274=(cj5*r00);
IkReal x6275=(cj5*r10);
IkReal x6276=(cj5*r20);
IkReal x6277=((1.0)*x6271);
IkReal x6278=(sj5*x6271);
IkReal x6279=((1.0)*sj5*x6272);
evalcond[0]=(((r22*x6272))+(((-1.0)*x6276*x6277))+((r21*x6278)));
evalcond[1]=(((r22*x6271))+(((-1.0)*r21*x6279))+((x6272*x6276)));
evalcond[2]=(((r12*x6272))+(((-1.0)*x6275*x6277))+cj0+((r11*x6278)));
evalcond[3]=((((-1.0)*x6274*x6277))+((r01*x6278))+((r02*x6272))+(((-1.0)*x6273)));
evalcond[4]=((((-1.0)*r01*x6279))+((r02*x6271))+((x6272*x6274))+(((-1.0)*cj0)));
evalcond[5]=(((r12*x6271))+(((-1.0)*x6273))+(((-1.0)*r11*x6279))+((x6272*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.62372043769855)*px))+(((3.38863395693611)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.62372043769855)*py))+(((3.38863395693611)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.62372043769855)*px))+(((3.38863395693611)*py))))+IKsqr(((((1.62372043769855)*py))+(((3.38863395693611)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.62372043769855)*px))+(((3.38863395693611)*py))), ((((1.62372043769855)*py))+(((3.38863395693611)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6280=IKcos(j0);
IkReal x6281=IKsin(j0);
evalcond[0]=((((-0.115)*x6281))+(((0.24)*x6280))+(((-1.0)*px)));
evalcond[1]=((((0.24)*x6281))+(((-1.0)*py))+(((0.115)*x6280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6282=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6282;
j4eval[1]=IKsign(x6282);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6283=cj5*cj5;
IkReal x6284=(r11*r21);
IkReal x6285=((1.0)*r20);
IkReal x6286=(cj5*sj5);
IkReal x6287=(((r10*r21*x6286))+((r11*r20*x6286))+(((-1.0)*r12*r22))+(((-1.0)*r10*x6283*x6285))+((x6283*x6284))+(((-1.0)*x6284)));
j4eval[0]=x6287;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6285))))));
j4eval[2]=IKsign(x6287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6288=cj5*cj5;
IkReal x6289=((1.0)*r21);
IkReal x6290=(cj5*sj5);
IkReal x6291=((1.0)*r20);
IkReal x6292=((((-1.0)*r01*x6290*x6291))+(((-1.0)*r00*x6289*x6290))+((r00*r20*x6288))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x6288*x6289)));
j4eval[0]=x6292;
j4eval[1]=IKsign(x6292);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6293=cj5*cj5;
IkReal x6294=((1.0)*r21);
IkReal x6295=(cj5*sj5);
IkReal x6296=((1.0)*r20);
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6293*x6294))+((r00*r20*x6293))+(((-1.0)*r00*x6294*x6295))+((r01*r21))+(((-1.0)*r01*x6295*x6296))+((r02*r22)))),-1);
if(!x6297.valid){
continue;
}
CheckValue<IkReal> x6298 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6296)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6297.value)))+(x6298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6299=IKcos(j4);
IkReal x6300=IKsin(j4);
IkReal x6301=(cj5*r00);
IkReal x6302=(r01*sj5);
IkReal x6303=(r11*sj5);
IkReal x6304=(r21*sj5);
IkReal x6305=(cj5*r10);
IkReal x6306=(cj5*r20);
IkReal x6307=((1.0)*x6299);
IkReal x6308=((1.0)*x6300);
evalcond[0]=(((r22*x6300))+((x6299*x6304))+(((-1.0)*x6306*x6307)));
evalcond[1]=(((r22*x6299))+((x6300*x6306))+(((-1.0)*x6304*x6308)));
evalcond[2]=((((-1.0)*x6305*x6307))+cj0+((r12*x6300))+((x6299*x6303)));
evalcond[3]=((((-1.0)*x6302*x6308))+cj0+((x6300*x6301))+((r02*x6299)));
evalcond[4]=(sj0+((x6300*x6305))+((r12*x6299))+(((-1.0)*x6303*x6308)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6300))+((x6299*x6302))+(((-1.0)*x6301*x6307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6309=cj5*cj5;
IkReal x6310=(r11*r21);
IkReal x6311=((1.0)*r20);
IkReal x6312=(cj5*sj5);
CheckValue<IkReal> x6313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6309*x6311))+((x6309*x6310))+(((-1.0)*r12*r22))+(((-1.0)*x6310))+((r11*r20*x6312))+((r10*r21*x6312)))),-1);
if(!x6313.valid){
continue;
}
CheckValue<IkReal> x6314 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x6311))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6313.value)))+(x6314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6315=IKcos(j4);
IkReal x6316=IKsin(j4);
IkReal x6317=(cj5*r00);
IkReal x6318=(r01*sj5);
IkReal x6319=(r11*sj5);
IkReal x6320=(r21*sj5);
IkReal x6321=(cj5*r10);
IkReal x6322=(cj5*r20);
IkReal x6323=((1.0)*x6315);
IkReal x6324=((1.0)*x6316);
evalcond[0]=(((r22*x6316))+(((-1.0)*x6322*x6323))+((x6315*x6320)));
evalcond[1]=(((r22*x6315))+(((-1.0)*x6320*x6324))+((x6316*x6322)));
evalcond[2]=(cj0+((x6315*x6319))+(((-1.0)*x6321*x6323))+((r12*x6316)));
evalcond[3]=((((-1.0)*x6318*x6324))+cj0+((r02*x6315))+((x6316*x6317)));
evalcond[4]=(sj0+((r12*x6315))+(((-1.0)*x6319*x6324))+((x6316*x6321)));
evalcond[5]=((((-1.0)*sj0))+((x6315*x6318))+((r02*x6316))+(((-1.0)*x6317*x6323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
CheckValue<IkReal> x6326=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6325.value)+(((1.5707963267949)*(x6326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6327=IKcos(j4);
IkReal x6328=IKsin(j4);
IkReal x6329=(cj5*r00);
IkReal x6330=(r01*sj5);
IkReal x6331=(r11*sj5);
IkReal x6332=(r21*sj5);
IkReal x6333=(cj5*r10);
IkReal x6334=(cj5*r20);
IkReal x6335=((1.0)*x6327);
IkReal x6336=((1.0)*x6328);
evalcond[0]=(((x6327*x6332))+(((-1.0)*x6334*x6335))+((r22*x6328)));
evalcond[1]=(((x6328*x6334))+((r22*x6327))+(((-1.0)*x6332*x6336)));
evalcond[2]=((((-1.0)*x6333*x6335))+cj0+((r12*x6328))+((x6327*x6331)));
evalcond[3]=(((r02*x6327))+cj0+(((-1.0)*x6330*x6336))+((x6328*x6329)));
evalcond[4]=(sj0+((r12*x6327))+(((-1.0)*x6331*x6336))+((x6328*x6333)));
evalcond[5]=(((r02*x6328))+(((-1.0)*sj0))+((x6327*x6330))+(((-1.0)*x6329*x6335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.428704566635601)*px))+(((-1.88257222739981)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.428704566635601)*py))+(((-1.88257222739981)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.428704566635601)*px))+(((-1.88257222739981)*py))))+IKsqr(((((0.428704566635601)*py))+(((-1.88257222739981)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.428704566635601)*px))+(((-1.88257222739981)*py))), ((((0.428704566635601)*py))+(((-1.88257222739981)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6337=IKcos(j0);
IkReal x6338=IKsin(j0);
evalcond[0]=((((-0.505)*x6337))+(((-0.115)*x6338))+(((-1.0)*px)));
evalcond[1]=((((-0.505)*x6338))+(((0.115)*x6337))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6339=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6339;
j4eval[1]=IKsign(x6339);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6340=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6340;
j4eval[1]=IKsign(x6340);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6341=cj5*cj5;
IkReal x6342=(r11*r21);
IkReal x6343=((1.0)*r20);
IkReal x6344=(cj5*sj5);
IkReal x6345=(((x6341*x6342))+(((-1.0)*r12*r22))+(((-1.0)*r10*x6341*x6343))+(((-1.0)*x6342))+((r10*r21*x6344))+((r11*r20*x6344)));
j4eval[0]=x6345;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6343)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6346=cj5*cj5;
IkReal x6347=(r11*r21);
IkReal x6348=((1.0)*r20);
IkReal x6349=(cj5*sj5);
CheckValue<IkReal> x6350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6348)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6350.valid){
continue;
}
CheckValue<IkReal> x6351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x6347))+(((-1.0)*r10*x6346*x6348))+((x6346*x6347))+((r10*r21*x6349))+((r11*r20*x6349)))),-1);
if(!x6351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6350.value)+(((1.5707963267949)*(x6351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6352=IKcos(j4);
IkReal x6353=IKsin(j4);
IkReal x6354=((1.0)*sj0);
IkReal x6355=(cj5*r00);
IkReal x6356=(cj5*r10);
IkReal x6357=(cj5*r20);
IkReal x6358=((1.0)*x6352);
IkReal x6359=(sj5*x6352);
IkReal x6360=((1.0)*sj5*x6353);
evalcond[0]=(((r21*x6359))+(((-1.0)*x6357*x6358))+((r22*x6353)));
evalcond[1]=(((x6353*x6357))+((r22*x6352))+(((-1.0)*r21*x6360)));
evalcond[2]=(cj0+((r11*x6359))+((r12*x6353))+(((-1.0)*x6356*x6358)));
evalcond[3]=((((-1.0)*x6355*x6358))+((r01*x6359))+(((-1.0)*x6354))+((r02*x6353)));
evalcond[4]=(((x6353*x6355))+((r02*x6352))+(((-1.0)*cj0))+(((-1.0)*r01*x6360)));
evalcond[5]=(((x6353*x6356))+((r12*x6352))+(((-1.0)*x6354))+(((-1.0)*r11*x6360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6361.value)+(((1.5707963267949)*(x6362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKcos(j4);
IkReal x6364=IKsin(j4);
IkReal x6365=((1.0)*sj0);
IkReal x6366=(cj5*r00);
IkReal x6367=(cj5*r10);
IkReal x6368=(cj5*r20);
IkReal x6369=((1.0)*x6363);
IkReal x6370=(sj5*x6363);
IkReal x6371=((1.0)*sj5*x6364);
evalcond[0]=(((r21*x6370))+(((-1.0)*x6368*x6369))+((r22*x6364)));
evalcond[1]=(((r22*x6363))+(((-1.0)*r21*x6371))+((x6364*x6368)));
evalcond[2]=(cj0+((r12*x6364))+((r11*x6370))+(((-1.0)*x6367*x6369)));
evalcond[3]=((((-1.0)*x6366*x6369))+((r01*x6370))+(((-1.0)*x6365))+((r02*x6364)));
evalcond[4]=((((-1.0)*r01*x6371))+((r02*x6363))+(((-1.0)*cj0))+((x6364*x6366)));
evalcond[5]=(((r12*x6363))+(((-1.0)*x6365))+(((-1.0)*r11*x6371))+((x6364*x6367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6372 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6372.valid){
continue;
}
CheckValue<IkReal> x6373=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6372.value)+(((1.5707963267949)*(x6373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6374=IKcos(j4);
IkReal x6375=IKsin(j4);
IkReal x6376=((1.0)*sj0);
IkReal x6377=(cj5*r00);
IkReal x6378=(cj5*r10);
IkReal x6379=(cj5*r20);
IkReal x6380=((1.0)*x6374);
IkReal x6381=(sj5*x6374);
IkReal x6382=((1.0)*sj5*x6375);
evalcond[0]=((((-1.0)*x6379*x6380))+((r21*x6381))+((r22*x6375)));
evalcond[1]=(((x6375*x6379))+(((-1.0)*r21*x6382))+((r22*x6374)));
evalcond[2]=(cj0+(((-1.0)*x6378*x6380))+((r12*x6375))+((r11*x6381)));
evalcond[3]=((((-1.0)*x6377*x6380))+(((-1.0)*x6376))+((r01*x6381))+((r02*x6375)));
evalcond[4]=(((x6375*x6377))+(((-1.0)*r01*x6382))+((r02*x6374))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x6382))+((r12*x6374))+((x6375*x6378))+(((-1.0)*x6376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.80505415162455)*py))+(((-8.30324909747292)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.80505415162455)*px))+(((8.30324909747292)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.80505415162455)*py))+(((-8.30324909747292)*px))))+IKsqr(((((-1.80505415162455)*px))+(((8.30324909747292)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.80505415162455)*py))+(((-8.30324909747292)*px))), ((((-1.80505415162455)*px))+(((8.30324909747292)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6383=IKcos(j0);
IkReal x6384=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.025)*x6383))+(((-0.115)*x6384)));
evalcond[1]=((((0.115)*x6383))+(((-1.0)*py))+(((-0.025)*x6384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6385=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6385;
j4eval[1]=IKsign(x6385);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6386=cj5*cj5;
IkReal x6387=(r11*r21);
IkReal x6388=((1.0)*r20);
IkReal x6389=(cj5*sj5);
IkReal x6390=(((r10*r21*x6389))+(((-1.0)*r10*x6386*x6388))+(((-1.0)*x6387))+((x6386*x6387))+(((-1.0)*r12*r22))+((r11*r20*x6389)));
j4eval[0]=x6390;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6388)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6391=cj5*cj5;
IkReal x6392=((1.0)*r21);
IkReal x6393=(cj5*sj5);
IkReal x6394=((1.0)*r20);
IkReal x6395=(((r01*r21))+(((-1.0)*r01*x6393*x6394))+(((-1.0)*r00*x6392*x6393))+(((-1.0)*r01*x6391*x6392))+((r02*r22))+((r00*r20*x6391)));
j4eval[0]=x6395;
j4eval[1]=IKsign(x6395);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6396=cj5*cj5;
IkReal x6397=((1.0)*r21);
IkReal x6398=(cj5*sj5);
IkReal x6399=((1.0)*r20);
CheckValue<IkReal> x6400 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6399)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6400.valid){
continue;
}
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x6396*x6397))+(((-1.0)*r01*x6398*x6399))+((r02*r22))+((r00*r20*x6396))+(((-1.0)*r00*x6397*x6398)))),-1);
if(!x6401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6400.value)+(((1.5707963267949)*(x6401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6402=IKcos(j4);
IkReal x6403=IKsin(j4);
IkReal x6404=(cj5*r00);
IkReal x6405=(r01*sj5);
IkReal x6406=(r11*sj5);
IkReal x6407=(r21*sj5);
IkReal x6408=(cj5*r10);
IkReal x6409=(cj5*r20);
IkReal x6410=((1.0)*x6402);
IkReal x6411=((1.0)*x6403);
evalcond[0]=(((r22*x6403))+(((-1.0)*x6409*x6410))+((x6402*x6407)));
evalcond[1]=((((-1.0)*x6407*x6411))+((r22*x6402))+((x6403*x6409)));
evalcond[2]=(cj0+(((-1.0)*x6408*x6410))+((r12*x6403))+((x6402*x6406)));
evalcond[3]=((((-1.0)*x6405*x6411))+((r02*x6402))+cj0+((x6403*x6404)));
evalcond[4]=(sj0+(((-1.0)*x6406*x6411))+((r12*x6402))+((x6403*x6408)));
evalcond[5]=((((-1.0)*sj0))+((r02*x6403))+(((-1.0)*x6404*x6410))+((x6402*x6405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6412=cj5*cj5;
IkReal x6413=(r11*r21);
IkReal x6414=((1.0)*r20);
IkReal x6415=(cj5*sj5);
CheckValue<IkReal> x6416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*r20*x6415))+(((-1.0)*x6413))+(((-1.0)*r10*x6412*x6414))+((r10*r21*x6415))+((x6412*x6413)))),-1);
if(!x6416.valid){
continue;
}
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6416.value)))+(x6417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6418=IKcos(j4);
IkReal x6419=IKsin(j4);
IkReal x6420=(cj5*r00);
IkReal x6421=(r01*sj5);
IkReal x6422=(r11*sj5);
IkReal x6423=(r21*sj5);
IkReal x6424=(cj5*r10);
IkReal x6425=(cj5*r20);
IkReal x6426=((1.0)*x6418);
IkReal x6427=((1.0)*x6419);
evalcond[0]=(((x6418*x6423))+((r22*x6419))+(((-1.0)*x6425*x6426)));
evalcond[1]=(((r22*x6418))+((x6419*x6425))+(((-1.0)*x6423*x6427)));
evalcond[2]=(cj0+(((-1.0)*x6424*x6426))+((r12*x6419))+((x6418*x6422)));
evalcond[3]=(((r02*x6418))+(((-1.0)*x6421*x6427))+cj0+((x6419*x6420)));
evalcond[4]=((((-1.0)*x6422*x6427))+sj0+((r12*x6418))+((x6419*x6424)));
evalcond[5]=(((r02*x6419))+(((-1.0)*sj0))+((x6418*x6421))+(((-1.0)*x6420*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
CheckValue<IkReal> x6429=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6428.value)+(((1.5707963267949)*(x6429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6430=IKcos(j4);
IkReal x6431=IKsin(j4);
IkReal x6432=(cj5*r00);
IkReal x6433=(r01*sj5);
IkReal x6434=(r11*sj5);
IkReal x6435=(r21*sj5);
IkReal x6436=(cj5*r10);
IkReal x6437=(cj5*r20);
IkReal x6438=((1.0)*x6430);
IkReal x6439=((1.0)*x6431);
evalcond[0]=(((r22*x6431))+(((-1.0)*x6437*x6438))+((x6430*x6435)));
evalcond[1]=(((r22*x6430))+(((-1.0)*x6435*x6439))+((x6431*x6437)));
evalcond[2]=(cj0+((r12*x6431))+(((-1.0)*x6436*x6438))+((x6430*x6434)));
evalcond[3]=(cj0+(((-1.0)*x6433*x6439))+((r02*x6430))+((x6431*x6432)));
evalcond[4]=(sj0+((r12*x6430))+(((-1.0)*x6434*x6439))+((x6431*x6436)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6432*x6438))+((r02*x6431))+((x6430*x6433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6440=(cj5*r01);
IkReal x6441=(r00*sj5);
IkReal x6442=(sj1*sj2);
IkReal x6443=(cj1*cj2);
IkReal x6444=((200.0)*px);
IkReal x6445=((53.0)*sj1);
IkReal x6446=((48.0)*cj1*sj2);
IkReal x6447=((48.0)*cj2*sj1);
CheckValue<IkReal> x6448=IKPowWithIntegerCheck(((((23.0)*x6443))+(((-23.0)*x6442))),-1);
if(!x6448.valid){
continue;
}
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(((((-1.0)*x6442))+x6443),-1);
if(!x6449.valid){
continue;
}
if( IKabs(((x6448.value)*((((x6442*x6444))+((x6440*x6445))+((x6440*x6447))+((x6440*x6446))+(((-19.0)*x6440*x6443))+(((-1.0)*x6443*x6444))+(((19.0)*x6441*x6442))+(((19.0)*x6440*x6442))+((x6441*x6445))+((x6441*x6447))+((x6441*x6446))+(((-19.0)*x6441*x6443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6449.value)*((x6440+x6441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6448.value)*((((x6442*x6444))+((x6440*x6445))+((x6440*x6447))+((x6440*x6446))+(((-19.0)*x6440*x6443))+(((-1.0)*x6443*x6444))+(((19.0)*x6441*x6442))+(((19.0)*x6440*x6442))+((x6441*x6445))+((x6441*x6447))+((x6441*x6446))+(((-19.0)*x6441*x6443))))))+IKsqr(((x6449.value)*((x6440+x6441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6448.value)*((((x6442*x6444))+((x6440*x6445))+((x6440*x6447))+((x6440*x6446))+(((-19.0)*x6440*x6443))+(((-1.0)*x6443*x6444))+(((19.0)*x6441*x6442))+(((19.0)*x6440*x6442))+((x6441*x6445))+((x6441*x6447))+((x6441*x6446))+(((-19.0)*x6441*x6443))))), ((x6449.value)*((x6440+x6441))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6450=IKcos(j0);
IkReal x6451=IKsin(j0);
IkReal x6452=((1.0)*sj2);
IkReal x6453=(cj1*cj2);
IkReal x6454=((0.24)*cj2);
IkReal x6455=(cj5*r11);
IkReal x6456=(r00*sj5);
IkReal x6457=(r10*sj5);
IkReal x6458=(cj5*r01);
IkReal x6459=(sj1*x6451);
IkReal x6460=(sj1*x6450);
IkReal x6461=((0.24)*cj1*sj2);
evalcond[0]=(((x6450*x6453))+(((-1.0)*x6458))+(((-1.0)*x6456))+(((-1.0)*x6452*x6460)));
evalcond[1]=(((x6451*x6453))+(((-1.0)*x6452*x6459))+(((-1.0)*x6455))+(((-1.0)*x6457)));
evalcond[2]=(((x6454*x6460))+(((-0.095)*x6456))+(((-0.095)*x6458))+(((-1.0)*px))+((x6450*x6461))+(((-0.115)*x6451))+(((0.265)*x6460)));
evalcond[3]=((((-0.095)*x6457))+(((-0.095)*x6455))+(((0.115)*x6450))+((x6454*x6459))+(((-1.0)*py))+((x6451*x6461))+(((0.265)*x6459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6462=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6462;
j4eval[1]=IKsign(x6462);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6463=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6463;
j4eval[1]=IKsign(x6463);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6464=((1.0)*sj0);
IkReal x6465=((1.0)*cj0);
IkReal x6466=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6466;
j4eval[1]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6465))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6464)))))+(IKabs(((((-1.0)*r02*x6465))+(((-1.0)*r12*x6464))))));
j4eval[2]=IKsign(x6466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6467=((-1.0)*r20);
IkReal x6469 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6469)==0){
continue;
}
IkReal x6468=pow(x6469,-0.5);
CheckValue<IkReal> x6470 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6467),IKFAST_ATAN2_MAGTHRESH);
if(!x6470.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6470.value));
IkReal gconst133=(r21*x6468);
IkReal gconst134=(x6467*x6468);
CheckValue<IkReal> x6471 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6471.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6471.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6472=((-1.0)*r20);
IkReal x6473=x6468;
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6472),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
IkReal x6474=((-1.0)*(x6475.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6474;
IkReal gconst132=x6474;
IkReal gconst133=(r21*x6473);
IkReal gconst134=(x6472*x6473);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6476=((-1.0)*r20);
IkReal x6477=x6468;
CheckValue<IkReal> x6479 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6476),IKFAST_ATAN2_MAGTHRESH);
if(!x6479.valid){
continue;
}
IkReal x6478=((-1.0)*(x6479.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6478;
IkReal gconst132=x6478;
IkReal gconst133=(r21*x6477);
IkReal gconst134=(x6476*x6477);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6480=((-1.0)*r20);
IkReal x6481=x6468;
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6480),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
IkReal x6482=((-1.0)*(x6483.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x6482;
IkReal gconst132=x6482;
IkReal gconst133=(r21*x6481);
IkReal gconst134=(x6480*x6481);
IkReal x6484=r22*r22;
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6484))),-1);
if(!x6487.valid){
continue;
}
IkReal x6485=x6487.value;
IkReal x6486=((((2.0)*x6485*(r20*r20)*(r21*r21)))+((x6485*(r21*r21*r21*r21)))+x6484+((x6485*(r20*r20*r20*r20))));
j4eval[0]=x6486;
j4eval[1]=IKsign(x6486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6488=(gconst134*r20);
IkReal x6489=(cj1*cj2);
IkReal x6490=(gconst133*r21);
IkReal x6491=(sj1*sj2);
CheckValue<IkReal> x6492=IKPowWithIntegerCheck(IKsign(((x6488*x6488)+(r22*r22)+(x6490*x6490)+(((-2.0)*x6488*x6490)))),-1);
if(!x6492.valid){
continue;
}
CheckValue<IkReal> x6493 = IKatan2WithCheck(IkReal(((((-1.0)*x6488*x6489))+((x6489*x6490))+((x6488*x6491))+(((-1.0)*x6490*x6491)))),IkReal(((((-1.0)*r22*x6489))+((r22*x6491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6492.value)))+(x6493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6494=IKcos(j4);
IkReal x6495=IKsin(j4);
IkReal x6496=(gconst134*r10);
IkReal x6497=(cj2*sj1);
IkReal x6498=(gconst134*r00);
IkReal x6499=(gconst134*r20);
IkReal x6500=(cj1*sj2);
IkReal x6501=(gconst133*x6494);
IkReal x6502=((1.0)*x6494);
IkReal x6503=((1.0)*gconst133*x6495);
evalcond[0]=(((r21*x6501))+(((-1.0)*x6499*x6502))+((r22*x6495)));
evalcond[1]=(cj0+((r12*x6495))+(((-1.0)*x6496*x6502))+((r11*x6501)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6495))+(((-1.0)*x6498*x6502))+((r01*x6501)));
evalcond[3]=(((x6495*x6499))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6503))+((cj1*cj2))+((r22*x6494)));
evalcond[4]=(((cj0*x6497))+(((-1.0)*r01*x6503))+((r02*x6494))+((x6495*x6498))+((cj0*x6500)));
evalcond[5]=((((-1.0)*r11*x6503))+((sj0*x6500))+((r12*x6494))+((x6495*x6496))+((sj0*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6504.value)+(((1.5707963267949)*(x6505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6506=IKcos(j4);
IkReal x6507=IKsin(j4);
IkReal x6508=(gconst134*r10);
IkReal x6509=(cj2*sj1);
IkReal x6510=(gconst134*r00);
IkReal x6511=(gconst134*r20);
IkReal x6512=(cj1*sj2);
IkReal x6513=(gconst133*x6506);
IkReal x6514=((1.0)*x6506);
IkReal x6515=((1.0)*gconst133*x6507);
evalcond[0]=(((r22*x6507))+((r21*x6513))+(((-1.0)*x6511*x6514)));
evalcond[1]=(((r12*x6507))+cj0+((r11*x6513))+(((-1.0)*x6508*x6514)));
evalcond[2]=(((r02*x6507))+(((-1.0)*sj0))+((r01*x6513))+(((-1.0)*x6510*x6514)));
evalcond[3]=((((-1.0)*r21*x6515))+((r22*x6506))+(((-1.0)*sj1*sj2))+((x6507*x6511))+((cj1*cj2)));
evalcond[4]=(((r02*x6506))+((cj0*x6512))+((x6507*x6510))+((cj0*x6509))+(((-1.0)*r01*x6515)));
evalcond[5]=(((r12*x6506))+((x6507*x6508))+((sj0*x6509))+((sj0*x6512))+(((-1.0)*r11*x6515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6516.value)))+(x6517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6518=IKcos(j4);
IkReal x6519=IKsin(j4);
IkReal x6520=(gconst134*r10);
IkReal x6521=(cj2*sj1);
IkReal x6522=(gconst134*r00);
IkReal x6523=(gconst134*r20);
IkReal x6524=(cj1*sj2);
IkReal x6525=(gconst133*x6518);
IkReal x6526=((1.0)*x6518);
IkReal x6527=((1.0)*gconst133*x6519);
evalcond[0]=(((r21*x6525))+(((-1.0)*x6523*x6526))+((r22*x6519)));
evalcond[1]=(cj0+((r12*x6519))+(((-1.0)*x6520*x6526))+((r11*x6525)));
evalcond[2]=((((-1.0)*x6522*x6526))+(((-1.0)*sj0))+((r02*x6519))+((r01*x6525)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x6527))+((cj1*cj2))+((r22*x6518))+((x6519*x6523)));
evalcond[4]=(((r02*x6518))+((cj0*x6521))+((cj0*x6524))+(((-1.0)*r01*x6527))+((x6519*x6522)));
evalcond[5]=(((r12*x6518))+(((-1.0)*r11*x6527))+((sj0*x6521))+((sj0*x6524))+((x6519*x6520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6528=((-1.0)*r21);
IkReal x6530 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6530)==0){
continue;
}
IkReal x6529=pow(x6530,-0.5);
CheckValue<IkReal> x6531 = IKatan2WithCheck(IkReal(x6528),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6531.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6531.value))));
IkReal gconst136=(x6528*x6529);
IkReal gconst137=((1.0)*r20*x6529);
CheckValue<IkReal> x6532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6532.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6532.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6533=((-1.0)*r21);
CheckValue<IkReal> x6536 = IKatan2WithCheck(IkReal(x6533),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6536.valid){
continue;
}
IkReal x6534=((1.0)*(x6536.value));
IkReal x6535=x6529;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6534)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6534)));
IkReal gconst136=(x6533*x6535);
IkReal gconst137=((1.0)*r20*x6535);
IkReal x6537=r22*r22;
IkReal x6538=((1.0)*x6537);
CheckValue<IkReal> x6542=IKPowWithIntegerCheck(((-1.0)+x6537),-1);
if(!x6542.valid){
continue;
}
IkReal x6539=x6542.value;
if((((1.0)+(((-1.0)*x6538)))) < -0.00001)
continue;
IkReal x6540=IKsqrt(((1.0)+(((-1.0)*x6538))));
IkReal x6541=(cj0*x6539*x6540);
j4eval[0]=((IKabs((x6541+(((-1.0)*x6538*x6541)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6543=((-1.0)*r21);
CheckValue<IkReal> x6546 = IKatan2WithCheck(IkReal(x6543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6546.valid){
continue;
}
IkReal x6544=((1.0)*(x6546.value));
IkReal x6545=x6529;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6544)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6544)));
IkReal gconst136=(x6543*x6545);
IkReal gconst137=((1.0)*r20*x6545);
IkReal x6547=r22*r22;
IkReal x6548=((1.0)*x6547);
CheckValue<IkReal> x6552=IKPowWithIntegerCheck(((-1.0)+x6547),-1);
if(!x6552.valid){
continue;
}
IkReal x6549=x6552.value;
if((((1.0)+(((-1.0)*x6548)))) < -0.00001)
continue;
IkReal x6550=IKsqrt(((1.0)+(((-1.0)*x6548))));
IkReal x6551=(sj0*x6549*x6550);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6551+(((-1.0)*x6548*x6551))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6553=((-1.0)*r21);
CheckValue<IkReal> x6556 = IKatan2WithCheck(IkReal(x6553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6556.valid){
continue;
}
IkReal x6554=((1.0)*(x6556.value));
IkReal x6555=x6529;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x6554)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6554)));
IkReal gconst136=(x6553*x6555);
IkReal gconst137=((1.0)*r20*x6555);
IkReal x6557=r22*r22;
IkReal x6558=((1.0)*r12*sj0);
IkReal x6559=((1.0)*cj0*r02);
CheckValue<IkReal> x6563=IKPowWithIntegerCheck(((-1.0)+x6557),-1);
if(!x6563.valid){
continue;
}
IkReal x6560=x6563.value;
if((((1.0)+(((-1.0)*x6557)))) < -0.00001)
continue;
IkReal x6561=IKsqrt(((1.0)+(((-1.0)*x6557))));
IkReal x6562=(r22*x6560*x6561);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6559*x6562))+(((-1.0)*x6558*x6562)))))+(IKabs(((((-1.0)*x6559))+(((-1.0)*x6558))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6564=((1.0)*sj0);
IkReal x6565=((1.0)*cj0);
CheckValue<IkReal> x6566 = IKatan2WithCheck(IkReal((((gconst136*r11*sj0))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r00*x6565))+(((-1.0)*gconst137*r10*x6564)))),IkReal(((((-1.0)*r02*x6565))+(((-1.0)*r12*x6564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6566.valid){
continue;
}
CheckValue<IkReal> x6567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x6567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6566.value)+(((1.5707963267949)*(x6567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6568=IKcos(j4);
IkReal x6569=IKsin(j4);
IkReal x6570=(cj2*sj1);
IkReal x6571=(gconst136*r01);
IkReal x6572=(gconst136*r21);
IkReal x6573=(gconst136*r11);
IkReal x6574=(cj1*sj2);
IkReal x6575=((1.0)*x6569);
IkReal x6576=(gconst137*x6569);
IkReal x6577=((1.0)*gconst137*x6568);
evalcond[0]=(((r22*x6569))+((x6568*x6572))+(((-1.0)*r20*x6577)));
evalcond[1]=(cj0+((x6568*x6573))+((r12*x6569))+(((-1.0)*r10*x6577)));
evalcond[2]=((((-1.0)*sj0))+((x6568*x6571))+(((-1.0)*r00*x6577))+((r02*x6569)));
evalcond[3]=((((-1.0)*x6572*x6575))+((r22*x6568))+(((-1.0)*sj1*sj2))+((r20*x6576))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x6571*x6575))+((cj0*x6570))+((cj0*x6574))+((r02*x6568))+((r00*x6576)));
evalcond[5]=((((-1.0)*x6573*x6575))+((r12*x6568))+((sj0*x6570))+((sj0*x6574))+((r10*x6576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6578 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6578.valid){
continue;
}
CheckValue<IkReal> x6579=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6578.value)+(((1.5707963267949)*(x6579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6580=IKcos(j4);
IkReal x6581=IKsin(j4);
IkReal x6582=(cj2*sj1);
IkReal x6583=(gconst136*r01);
IkReal x6584=(gconst136*r21);
IkReal x6585=(gconst136*r11);
IkReal x6586=(cj1*sj2);
IkReal x6587=((1.0)*x6581);
IkReal x6588=(gconst137*x6581);
IkReal x6589=((1.0)*gconst137*x6580);
evalcond[0]=(((r22*x6581))+((x6580*x6584))+(((-1.0)*r20*x6589)));
evalcond[1]=(cj0+(((-1.0)*r10*x6589))+((x6580*x6585))+((r12*x6581)));
evalcond[2]=(((r02*x6581))+(((-1.0)*r00*x6589))+(((-1.0)*sj0))+((x6580*x6583)));
evalcond[3]=((((-1.0)*x6584*x6587))+((r22*x6580))+(((-1.0)*sj1*sj2))+((r20*x6588))+((cj1*cj2)));
evalcond[4]=(((r02*x6580))+((cj0*x6582))+((cj0*x6586))+((r00*x6588))+(((-1.0)*x6583*x6587)));
evalcond[5]=(((sj0*x6582))+((sj0*x6586))+(((-1.0)*x6585*x6587))+((r12*x6580))+((r10*x6588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6590 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6590.valid){
continue;
}
CheckValue<IkReal> x6591=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6590.value)+(((1.5707963267949)*(x6591.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6592=IKcos(j4);
IkReal x6593=IKsin(j4);
IkReal x6594=(cj2*sj1);
IkReal x6595=(gconst136*r01);
IkReal x6596=(gconst136*r21);
IkReal x6597=(gconst136*r11);
IkReal x6598=(cj1*sj2);
IkReal x6599=((1.0)*x6593);
IkReal x6600=(gconst137*x6593);
IkReal x6601=((1.0)*gconst137*x6592);
evalcond[0]=(((r22*x6593))+((x6592*x6596))+(((-1.0)*r20*x6601)));
evalcond[1]=(((r12*x6593))+(((-1.0)*r10*x6601))+cj0+((x6592*x6597)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6593))+((x6592*x6595))+(((-1.0)*r00*x6601)));
evalcond[3]=(((r22*x6592))+(((-1.0)*sj1*sj2))+(((-1.0)*x6596*x6599))+((r20*x6600))+((cj1*cj2)));
evalcond[4]=(((r02*x6592))+((r00*x6600))+((cj0*x6594))+((cj0*x6598))+(((-1.0)*x6595*x6599)));
evalcond[5]=(((r12*x6592))+((sj0*x6594))+((sj0*x6598))+((r10*x6600))+(((-1.0)*x6597*x6599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6603 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6603)==0){
continue;
}
IkReal x6602=pow(x6603,-0.5);
CheckValue<IkReal> x6604 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6604.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6604.value));
IkReal gconst139=((-1.0)*r11*x6602);
IkReal gconst140=(r10*x6602);
CheckValue<IkReal> x6605 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
IkReal x6606=((-1.0)*(x6608.value));
IkReal x6607=x6602;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x6606;
IkReal gconst138=x6606;
IkReal gconst139=((-1.0)*r11*x6607);
IkReal gconst140=(r10*x6607);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6609=((1.0)*gconst140);
CheckValue<IkReal> x6610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6609))+(((-1.0)*gconst139*r20)))),-1);
if(!x6610.valid){
continue;
}
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x6609))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*cj0*r00*x6609)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6610.value)))+(x6611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6612=IKcos(j4);
IkReal x6613=IKsin(j4);
IkReal x6614=(cj2*sj1);
IkReal x6615=(gconst140*r10);
IkReal x6616=(cj1*sj2);
IkReal x6617=(gconst139*x6612);
IkReal x6618=(gconst140*x6613);
IkReal x6619=((1.0)*gconst139*x6613);
IkReal x6620=((1.0)*gconst140*x6612);
evalcond[0]=(((r21*x6617))+((r22*x6613))+(((-1.0)*r20*x6620)));
evalcond[1]=((((-1.0)*x6612*x6615))+cj0+((r12*x6613))+((r11*x6617)));
evalcond[2]=(((r02*x6613))+(((-1.0)*sj0))+((r01*x6617))+(((-1.0)*r00*x6620)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x6612))+((cj1*cj2))+(((-1.0)*r21*x6619))+((r20*x6618)));
evalcond[4]=(((r02*x6612))+((r00*x6618))+((cj0*x6616))+((cj0*x6614))+(((-1.0)*r01*x6619)));
evalcond[5]=(((x6613*x6615))+(((-1.0)*r11*x6619))+((r12*x6612))+((sj0*x6614))+((sj0*x6616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6621=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6621.valid){
continue;
}
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6621.value)))+(x6622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6623=IKcos(j4);
IkReal x6624=IKsin(j4);
IkReal x6625=(cj2*sj1);
IkReal x6626=(gconst140*r10);
IkReal x6627=(cj1*sj2);
IkReal x6628=(gconst139*x6623);
IkReal x6629=(gconst140*x6624);
IkReal x6630=((1.0)*gconst139*x6624);
IkReal x6631=((1.0)*gconst140*x6623);
evalcond[0]=(((r22*x6624))+(((-1.0)*r20*x6631))+((r21*x6628)));
evalcond[1]=(cj0+((r12*x6624))+(((-1.0)*x6623*x6626))+((r11*x6628)));
evalcond[2]=(((r02*x6624))+(((-1.0)*sj0))+((r01*x6628))+(((-1.0)*r00*x6631)));
evalcond[3]=((((-1.0)*r21*x6630))+(((-1.0)*sj1*sj2))+((r22*x6623))+((cj1*cj2))+((r20*x6629)));
evalcond[4]=(((r02*x6623))+((r00*x6629))+((cj0*x6627))+((cj0*x6625))+(((-1.0)*r01*x6630)));
evalcond[5]=((((-1.0)*r11*x6630))+((x6624*x6626))+((r12*x6623))+((sj0*x6625))+((sj0*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6633 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6633)==0){
continue;
}
IkReal x6632=pow(x6633,-0.5);
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6634.value))));
IkReal gconst142=((1.0)*r11*x6632);
IkReal gconst143=((-1.0)*r10*x6632);
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
IkReal x6636=((1.0)*(x6638.value));
IkReal x6637=x6632;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6636)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6636)));
IkReal gconst142=((1.0)*r11*x6637);
IkReal gconst143=((-1.0)*r10*x6637);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x6641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6641.valid){
continue;
}
IkReal x6639=((1.0)*(x6641.value));
IkReal x6640=x6632;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6639)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6639)));
IkReal gconst142=((1.0)*r11*x6640);
IkReal gconst143=((-1.0)*r10*x6640);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6644 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6644.valid){
continue;
}
IkReal x6642=((1.0)*(x6644.value));
IkReal x6643=x6632;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x6642)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6642)));
IkReal gconst142=((1.0)*r11*x6643);
IkReal gconst143=((-1.0)*r10*x6643);
IkReal x6645=r12*r12;
IkReal x6646=((1.0)*sj0);
IkReal x6647=(cj0*r02);
IkReal x6648=x6632;
j4eval[0]=((IKabs(((((-1.0)*x6647))+(((-1.0)*r12*x6646)))))+(IKabs(((((-1.0)*x6646*x6648))+((sj0*x6645*x6648))+((r12*x6647*x6648))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6649=((1.0)*sj0);
IkReal x6650=((1.0)*gconst143);
CheckValue<IkReal> x6651 = IKatan2WithCheck(IkReal((((cj0*gconst142*r01))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x6650))+(((-1.0)*gconst143*r10*x6649)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6649)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6651.valid){
continue;
}
CheckValue<IkReal> x6652=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6650))+(((-1.0)*gconst142*r20)))),-1);
if(!x6652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6651.value)+(((1.5707963267949)*(x6652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6653=IKcos(j4);
IkReal x6654=IKsin(j4);
IkReal x6655=(cj2*sj1);
IkReal x6656=(cj1*sj2);
IkReal x6657=(gconst143*x6654);
IkReal x6658=(gconst142*x6653);
IkReal x6659=((1.0)*gconst142*x6654);
IkReal x6660=((1.0)*gconst143*x6653);
evalcond[0]=((((-1.0)*r20*x6660))+((r21*x6658))+((r22*x6654)));
evalcond[1]=(cj0+((r12*x6654))+((r11*x6658))+(((-1.0)*r10*x6660)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6654))+(((-1.0)*r00*x6660))+((r01*x6658)));
evalcond[3]=((((-1.0)*r21*x6659))+((r20*x6657))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6653)));
evalcond[4]=(((r02*x6653))+(((-1.0)*r01*x6659))+((r00*x6657))+((cj0*x6656))+((cj0*x6655)));
evalcond[5]=(((r12*x6653))+(((-1.0)*r11*x6659))+((sj0*x6656))+((sj0*x6655))+((r10*x6657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6661=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6661.valid){
continue;
}
CheckValue<IkReal> x6662 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6661.value)))+(x6662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6663=IKcos(j4);
IkReal x6664=IKsin(j4);
IkReal x6665=(cj2*sj1);
IkReal x6666=(cj1*sj2);
IkReal x6667=(gconst143*x6664);
IkReal x6668=(gconst142*x6663);
IkReal x6669=((1.0)*gconst142*x6664);
IkReal x6670=((1.0)*gconst143*x6663);
evalcond[0]=((((-1.0)*r20*x6670))+((r21*x6668))+((r22*x6664)));
evalcond[1]=(cj0+((r12*x6664))+((r11*x6668))+(((-1.0)*r10*x6670)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6664))+(((-1.0)*r00*x6670))+((r01*x6668)));
evalcond[3]=((((-1.0)*r21*x6669))+((r20*x6667))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6663)));
evalcond[4]=(((r02*x6663))+(((-1.0)*r01*x6669))+((r00*x6667))+((cj0*x6666))+((cj0*x6665)));
evalcond[5]=(((r12*x6663))+(((-1.0)*r11*x6669))+((sj0*x6666))+((sj0*x6665))+((r10*x6667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6671=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6671.valid){
continue;
}
CheckValue<IkReal> x6672 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6671.value)))+(x6672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6673=IKcos(j4);
IkReal x6674=IKsin(j4);
IkReal x6675=(cj2*sj1);
IkReal x6676=(cj1*sj2);
IkReal x6677=(gconst143*x6674);
IkReal x6678=(gconst142*x6673);
IkReal x6679=((1.0)*gconst142*x6674);
IkReal x6680=((1.0)*gconst143*x6673);
evalcond[0]=((((-1.0)*r20*x6680))+((r22*x6674))+((r21*x6678)));
evalcond[1]=(((r11*x6678))+cj0+((r12*x6674))+(((-1.0)*r10*x6680)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6680))+((r02*x6674))+((r01*x6678)));
evalcond[3]=(((r20*x6677))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6679))+((r22*x6673))+((cj1*cj2)));
evalcond[4]=(((cj0*x6676))+((cj0*x6675))+((r02*x6673))+(((-1.0)*r01*x6679))+((r00*x6677)));
evalcond[5]=((((-1.0)*r11*x6679))+((r12*x6673))+((sj0*x6676))+((sj0*x6675))+((r10*x6677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6681=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6681;
j4eval[1]=IKsign(x6681);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6682=((1.0)*cj5);
IkReal x6683=((((-1.0)*r21*x6682))+(((-1.0)*r20*sj5)));
j4eval[0]=x6683;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6682))+((r01*sj5))))));
j4eval[2]=IKsign(x6683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6684=cj5*cj5;
IkReal x6685=r11*r11;
IkReal x6686=(cj5*r10);
IkReal x6687=(r11*sj5);
IkReal x6688=(((x6684*x6685))+(((2.0)*x6686*x6687))+(((-1.0)*(r12*r12)))+(((-1.0)*x6684*(r10*r10)))+(((-1.0)*x6685)));
j4eval[0]=x6688;
j4eval[1]=((IKabs(r12))+(IKabs((x6687+(((-1.0)*x6686))))));
j4eval[2]=IKsign(x6688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6689=cj5*cj5;
IkReal x6690=r11*r11;
IkReal x6691=(cj5*r10);
IkReal x6692=(r11*sj5);
CheckValue<IkReal> x6693=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6690))+(((-1.0)*x6689*(r10*r10)))+((x6689*x6690))+(((-1.0)*(r12*r12)))+(((2.0)*x6691*x6692)))),-1);
if(!x6693.valid){
continue;
}
CheckValue<IkReal> x6694 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6691))+x6692)),IKFAST_ATAN2_MAGTHRESH);
if(!x6694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6693.value)))+(x6694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6695=IKcos(j4);
IkReal x6696=IKsin(j4);
IkReal x6697=(cj5*r00);
IkReal x6698=((1.0)*x6695);
IkReal x6699=(sj5*x6695);
IkReal x6700=(cj5*x6696);
IkReal x6701=((1.0)*sj5*x6696);
evalcond[0]=(((r22*x6696))+((r21*x6699))+(((-1.0)*cj5*r20*x6698)));
evalcond[1]=((((-1.0)*x6697*x6698))+((r01*x6699))+((r02*x6696)));
evalcond[2]=(((r10*x6700))+((r12*x6695))+(((-1.0)*r11*x6701)));
evalcond[3]=((1.0)+((r11*x6699))+((r12*x6696))+(((-1.0)*cj5*r10*x6698)));
evalcond[4]=(((x6696*x6697))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x6701))+((r02*x6695)));
evalcond[5]=(((r22*x6695))+(((-1.0)*sj1*sj2))+((r20*x6700))+(((-1.0)*r21*x6701))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6702=((1.0)*cj5);
CheckValue<IkReal> x6703 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x6702)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6703.valid){
continue;
}
CheckValue<IkReal> x6704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6702))+(((-1.0)*r20*sj5)))),-1);
if(!x6704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6703.value)+(((1.5707963267949)*(x6704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6705=IKcos(j4);
IkReal x6706=IKsin(j4);
IkReal x6707=(cj5*r00);
IkReal x6708=((1.0)*x6705);
IkReal x6709=(sj5*x6705);
IkReal x6710=(cj5*x6706);
IkReal x6711=((1.0)*sj5*x6706);
evalcond[0]=((((-1.0)*cj5*r20*x6708))+((r21*x6709))+((r22*x6706)));
evalcond[1]=(((r01*x6709))+(((-1.0)*x6707*x6708))+((r02*x6706)));
evalcond[2]=((((-1.0)*r11*x6711))+((r10*x6710))+((r12*x6705)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x6708))+((r11*x6709))+((r12*x6706)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6706*x6707))+(((-1.0)*r01*x6711))+((r02*x6705)));
evalcond[5]=(((r20*x6710))+(((-1.0)*r21*x6711))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x6705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKcos(j4);
IkReal x6715=IKsin(j4);
IkReal x6716=(cj5*r00);
IkReal x6717=((1.0)*x6714);
IkReal x6718=(sj5*x6714);
IkReal x6719=(cj5*x6715);
IkReal x6720=((1.0)*sj5*x6715);
evalcond[0]=((((-1.0)*cj5*r20*x6717))+((r22*x6715))+((r21*x6718)));
evalcond[1]=(((r02*x6715))+(((-1.0)*x6716*x6717))+((r01*x6718)));
evalcond[2]=((((-1.0)*r11*x6720))+((r10*x6719))+((r12*x6714)));
evalcond[3]=((1.0)+((r11*x6718))+(((-1.0)*cj5*r10*x6717))+((r12*x6715)));
evalcond[4]=(((cj2*sj1))+((x6715*x6716))+((cj1*sj2))+((r02*x6714))+(((-1.0)*r01*x6720)));
evalcond[5]=(((r20*x6719))+(((-1.0)*r21*x6720))+(((-1.0)*sj1*sj2))+((r22*x6714))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6721=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6721;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x6721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6722=((1.0)*cj5);
IkReal x6723=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6722)));
j4eval[0]=x6723;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6722))+((r21*sj5))))));
j4eval[2]=IKsign(x6723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6724=cj5*cj5;
IkReal x6725=r11*r11;
IkReal x6726=(r11*sj5);
IkReal x6727=(cj5*r10);
IkReal x6728=((r12*r12)+(((-2.0)*x6726*x6727))+((x6724*(r10*r10)))+x6725+(((-1.0)*x6724*x6725)));
j4eval[0]=x6728;
j4eval[1]=((IKabs(((((-1.0)*x6727))+x6726)))+(IKabs(r12)));
j4eval[2]=IKsign(x6728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6729=cj5*cj5;
IkReal x6730=r11*r11;
IkReal x6731=(cj5*r10);
IkReal x6732=(r11*sj5);
CheckValue<IkReal> x6733=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6730+(((-2.0)*x6731*x6732))+(((-1.0)*x6729*x6730))+((x6729*(r10*r10))))),-1);
if(!x6733.valid){
continue;
}
CheckValue<IkReal> x6734 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6731))+x6732)),IKFAST_ATAN2_MAGTHRESH);
if(!x6734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6733.value)))+(x6734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6735=IKcos(j4);
IkReal x6736=IKsin(j4);
IkReal x6737=(cj5*r00);
IkReal x6738=((1.0)*sj2);
IkReal x6739=((1.0)*x6735);
IkReal x6740=(sj5*x6735);
IkReal x6741=(cj5*x6736);
IkReal x6742=((1.0)*sj5*x6736);
evalcond[0]=(((r22*x6736))+((r21*x6740))+(((-1.0)*cj5*r20*x6739)));
evalcond[1]=((((-1.0)*x6737*x6739))+((r01*x6740))+((r02*x6736)));
evalcond[2]=((((-1.0)*r11*x6742))+((r12*x6735))+((r10*x6741)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x6739))+((r11*x6740))+((r12*x6736)));
evalcond[4]=(((r22*x6735))+(((-1.0)*sj1*x6738))+(((-1.0)*r21*x6742))+((r20*x6741))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r01*x6742))+(((-1.0)*cj2*sj1))+((x6736*x6737))+((r02*x6735))+(((-1.0)*cj1*x6738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6743=((1.0)*cj5);
CheckValue<IkReal> x6744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6743))+(((-1.0)*r00*sj5)))),-1);
if(!x6744.valid){
continue;
}
CheckValue<IkReal> x6745 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6743)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6744.value)))+(x6745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6746=IKcos(j4);
IkReal x6747=IKsin(j4);
IkReal x6748=(cj5*r00);
IkReal x6749=((1.0)*sj2);
IkReal x6750=((1.0)*x6746);
IkReal x6751=(sj5*x6746);
IkReal x6752=(cj5*x6747);
IkReal x6753=((1.0)*sj5*x6747);
evalcond[0]=(((r21*x6751))+(((-1.0)*cj5*r20*x6750))+((r22*x6747)));
evalcond[1]=(((r02*x6747))+((r01*x6751))+(((-1.0)*x6748*x6750)));
evalcond[2]=(((r12*x6746))+((r10*x6752))+(((-1.0)*r11*x6753)));
evalcond[3]=((-1.0)+((r11*x6751))+((r12*x6747))+(((-1.0)*cj5*r10*x6750)));
evalcond[4]=((((-1.0)*sj1*x6749))+((r20*x6752))+((cj1*cj2))+((r22*x6746))+(((-1.0)*r21*x6753)));
evalcond[5]=(((r02*x6746))+((x6747*x6748))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x6753))+(((-1.0)*cj1*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6754=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6754.valid){
continue;
}
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6754.value)))+(x6755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6756=IKcos(j4);
IkReal x6757=IKsin(j4);
IkReal x6758=(cj5*r00);
IkReal x6759=((1.0)*sj2);
IkReal x6760=((1.0)*x6756);
IkReal x6761=(sj5*x6756);
IkReal x6762=(cj5*x6757);
IkReal x6763=((1.0)*sj5*x6757);
evalcond[0]=(((r22*x6757))+((r21*x6761))+(((-1.0)*cj5*r20*x6760)));
evalcond[1]=(((r01*x6761))+(((-1.0)*x6758*x6760))+((r02*x6757)));
evalcond[2]=(((r12*x6756))+((r10*x6762))+(((-1.0)*r11*x6763)));
evalcond[3]=((-1.0)+((r12*x6757))+((r11*x6761))+(((-1.0)*cj5*r10*x6760)));
evalcond[4]=(((r22*x6756))+((r20*x6762))+((cj1*cj2))+(((-1.0)*r21*x6763))+(((-1.0)*sj1*x6759)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x6757*x6758))+(((-1.0)*cj1*x6759))+(((-1.0)*r01*x6763))+((r02*x6756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6765 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6765)==0){
continue;
}
IkReal x6764=pow(x6765,-0.5);
CheckValue<IkReal> x6766 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6766.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6766.value));
IkReal gconst145=((-1.0)*r01*x6764);
IkReal gconst146=(r00*x6764);
CheckValue<IkReal> x6767 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6767.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6767.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
IkReal x6768=((-1.0)*(x6770.value));
IkReal x6769=x6764;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x6768;
IkReal gconst144=x6768;
IkReal gconst145=((-1.0)*r01*x6769);
IkReal gconst146=(r00*x6769);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6771=((1.0)*sj0);
IkReal x6772=((1.0)*cj0);
CheckValue<IkReal> x6773 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r10*x6771))+((cj0*gconst145*r01))+(((-1.0)*gconst146*r00*x6772))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r12*x6771))+(((-1.0)*r02*x6772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6773.valid){
continue;
}
CheckValue<IkReal> x6774=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x6774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6773.value)+(((1.5707963267949)*(x6774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6775=IKcos(j4);
IkReal x6776=IKsin(j4);
IkReal x6777=(cj2*sj1);
IkReal x6778=(gconst145*r21);
IkReal x6779=(gconst146*r00);
IkReal x6780=(gconst145*r11);
IkReal x6781=(cj1*sj2);
IkReal x6782=(gconst145*r01);
IkReal x6783=((1.0)*x6776);
IkReal x6784=(gconst146*x6776);
IkReal x6785=((1.0)*gconst146*x6775);
evalcond[0]=(((x6775*x6778))+((r22*x6776))+(((-1.0)*r20*x6785)));
evalcond[1]=(((r12*x6776))+cj0+((x6775*x6780))+(((-1.0)*r10*x6785)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6776))+(((-1.0)*x6775*x6779))+((x6775*x6782)));
evalcond[3]=(((r20*x6784))+(((-1.0)*x6778*x6783))+(((-1.0)*sj1*sj2))+((r22*x6775))+((cj1*cj2)));
evalcond[4]=(((cj0*x6781))+(((-1.0)*x6782*x6783))+((x6776*x6779))+((r02*x6775))+((cj0*x6777)));
evalcond[5]=(((r12*x6775))+((sj0*x6777))+((r10*x6784))+((sj0*x6781))+(((-1.0)*x6780*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x6786.valid){
continue;
}
CheckValue<IkReal> x6787 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6786.value)))+(x6787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6788=IKcos(j4);
IkReal x6789=IKsin(j4);
IkReal x6790=(cj2*sj1);
IkReal x6791=(gconst145*r21);
IkReal x6792=(gconst146*r00);
IkReal x6793=(gconst145*r11);
IkReal x6794=(cj1*sj2);
IkReal x6795=(gconst145*r01);
IkReal x6796=((1.0)*x6789);
IkReal x6797=(gconst146*x6789);
IkReal x6798=((1.0)*gconst146*x6788);
evalcond[0]=(((r22*x6789))+(((-1.0)*r20*x6798))+((x6788*x6791)));
evalcond[1]=((((-1.0)*r10*x6798))+((r12*x6789))+cj0+((x6788*x6793)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6789))+((x6788*x6795))+(((-1.0)*x6788*x6792)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x6797))+((r22*x6788))+((cj1*cj2))+(((-1.0)*x6791*x6796)));
evalcond[4]=((((-1.0)*x6795*x6796))+((r02*x6788))+((cj0*x6794))+((cj0*x6790))+((x6789*x6792)));
evalcond[5]=(((r12*x6788))+(((-1.0)*x6793*x6796))+((sj0*x6790))+((sj0*x6794))+((r10*x6797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6800 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6800)==0){
continue;
}
IkReal x6799=pow(x6800,-0.5);
CheckValue<IkReal> x6801 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6801.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6801.value))));
IkReal gconst148=((1.0)*r01*x6799);
IkReal gconst149=((-1.0)*r00*x6799);
CheckValue<IkReal> x6802 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6802.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6802.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6805 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6805.valid){
continue;
}
IkReal x6803=((1.0)*(x6805.value));
IkReal x6804=x6799;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6803)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6803)));
IkReal gconst148=((1.0)*r01*x6804);
IkReal gconst149=((-1.0)*r00*x6804);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6808 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6808.valid){
continue;
}
IkReal x6806=((1.0)*(x6808.value));
IkReal x6807=x6799;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6806)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6806)));
IkReal gconst148=((1.0)*r01*x6807);
IkReal gconst149=((-1.0)*r00*x6807);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6811 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6811.valid){
continue;
}
IkReal x6809=((1.0)*(x6811.value));
IkReal x6810=x6799;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x6809)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6809)));
IkReal gconst148=((1.0)*r01*x6810);
IkReal gconst149=((-1.0)*r00*x6810);
IkReal x6812=r02*r02;
IkReal x6813=(r12*sj0);
IkReal x6814=((1.0)*cj0);
IkReal x6815=x6799;
j4eval[0]=((IKabs(((((-1.0)*x6813))+(((-1.0)*r02*x6814)))))+(IKabs(((((-1.0)*x6814*x6815))+((cj0*x6812*x6815))+((r02*x6813*x6815))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6816=((1.0)*sj0);
IkReal x6817=((1.0)*gconst149);
CheckValue<IkReal> x6818=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x6817)))),-1);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x6817))+((cj0*gconst148*r01))+(((-1.0)*gconst149*r10*x6816))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6818.value)))+(x6819.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKcos(j4);
IkReal x6821=IKsin(j4);
IkReal x6822=(cj2*sj1);
IkReal x6823=(cj1*sj2);
IkReal x6824=(gconst148*x6820);
IkReal x6825=(gconst149*x6821);
IkReal x6826=((1.0)*gconst148*x6821);
IkReal x6827=((1.0)*gconst149*x6820);
evalcond[0]=(((r22*x6821))+((r21*x6824))+(((-1.0)*r20*x6827)));
evalcond[1]=(cj0+(((-1.0)*r10*x6827))+((r12*x6821))+((r11*x6824)));
evalcond[2]=(((r02*x6821))+(((-1.0)*sj0))+((r01*x6824))+(((-1.0)*r00*x6827)));
evalcond[3]=(((r22*x6820))+(((-1.0)*sj1*sj2))+((r20*x6825))+((cj1*cj2))+(((-1.0)*r21*x6826)));
evalcond[4]=(((r02*x6820))+((r00*x6825))+(((-1.0)*r01*x6826))+((cj0*x6822))+((cj0*x6823)));
evalcond[5]=(((sj0*x6823))+((sj0*x6822))+((r10*x6825))+(((-1.0)*r11*x6826))+((r12*x6820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6828 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6828.valid){
continue;
}
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x6829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6828.value)+(((1.5707963267949)*(x6829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6830=IKcos(j4);
IkReal x6831=IKsin(j4);
IkReal x6832=(cj2*sj1);
IkReal x6833=(cj1*sj2);
IkReal x6834=(gconst148*x6830);
IkReal x6835=(gconst149*x6831);
IkReal x6836=((1.0)*gconst148*x6831);
IkReal x6837=((1.0)*gconst149*x6830);
evalcond[0]=(((r22*x6831))+((r21*x6834))+(((-1.0)*r20*x6837)));
evalcond[1]=(cj0+((r11*x6834))+(((-1.0)*r10*x6837))+((r12*x6831)));
evalcond[2]=(((r02*x6831))+(((-1.0)*sj0))+((r01*x6834))+(((-1.0)*r00*x6837)));
evalcond[3]=(((r22*x6830))+(((-1.0)*sj1*sj2))+((r20*x6835))+((cj1*cj2))+(((-1.0)*r21*x6836)));
evalcond[4]=(((r02*x6830))+((r00*x6835))+(((-1.0)*r01*x6836))+((cj0*x6833))+((cj0*x6832)));
evalcond[5]=(((sj0*x6833))+((sj0*x6832))+(((-1.0)*r11*x6836))+((r10*x6835))+((r12*x6830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6838=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6838.valid){
continue;
}
CheckValue<IkReal> x6839 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6838.value)))+(x6839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6840=IKcos(j4);
IkReal x6841=IKsin(j4);
IkReal x6842=(cj2*sj1);
IkReal x6843=(cj1*sj2);
IkReal x6844=(gconst148*x6840);
IkReal x6845=(gconst149*x6841);
IkReal x6846=((1.0)*gconst148*x6841);
IkReal x6847=((1.0)*gconst149*x6840);
evalcond[0]=(((r22*x6841))+((r21*x6844))+(((-1.0)*r20*x6847)));
evalcond[1]=(cj0+((r11*x6844))+((r12*x6841))+(((-1.0)*r10*x6847)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6847))+((r01*x6844))+((r02*x6841)));
evalcond[3]=(((r22*x6840))+(((-1.0)*r21*x6846))+(((-1.0)*sj1*sj2))+((r20*x6845))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x6846))+((cj0*x6842))+((cj0*x6843))+((r00*x6845))+((r02*x6840)));
evalcond[5]=(((r12*x6840))+(((-1.0)*r11*x6846))+((r10*x6845))+((sj0*x6842))+((sj0*x6843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6848=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6848;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6849=((1.0)*cj5);
IkReal x6850=((((-1.0)*r21*x6849))+(((-1.0)*r20*sj5)));
j4eval[0]=x6850;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6849))))));
j4eval[2]=IKsign(x6850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6851=cj5*cj5;
IkReal x6852=r01*r01;
IkReal x6853=(cj5*r00);
IkReal x6854=(r01*sj5);
IkReal x6855=(((x6851*(r00*r00)))+(((-2.0)*x6853*x6854))+x6852+(((-1.0)*x6851*x6852))+(r02*r02));
j4eval[0]=x6855;
j4eval[1]=IKsign(x6855);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6853))+x6854))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6856=cj5*cj5;
IkReal x6857=r01*r01;
IkReal x6858=(r01*sj5);
IkReal x6859=(cj5*r00);
CheckValue<IkReal> x6860 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6859))+x6858)),IKFAST_ATAN2_MAGTHRESH);
if(!x6860.valid){
continue;
}
CheckValue<IkReal> x6861=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6858*x6859))+(((-1.0)*x6856*x6857))+x6857+(r02*r02)+((x6856*(r00*r00))))),-1);
if(!x6861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6860.value)+(((1.5707963267949)*(x6861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6862=IKcos(j4);
IkReal x6863=IKsin(j4);
IkReal x6864=(cj5*r00);
IkReal x6865=((1.0)*x6862);
IkReal x6866=(sj5*x6862);
IkReal x6867=(cj5*x6863);
IkReal x6868=((1.0)*sj5*x6863);
evalcond[0]=(((r22*x6863))+((r21*x6866))+(((-1.0)*cj5*r20*x6865)));
evalcond[1]=(((r11*x6866))+((r12*x6863))+(((-1.0)*cj5*r10*x6865)));
evalcond[2]=(((r02*x6862))+(((-1.0)*r01*x6868))+((x6863*x6864)));
evalcond[3]=((-1.0)+((r02*x6863))+(((-1.0)*x6864*x6865))+((r01*x6866)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x6862))+(((-1.0)*r11*x6868))+((r10*x6867)));
evalcond[5]=(((r22*x6862))+(((-1.0)*r21*x6868))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6869=((1.0)*cj5);
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6869))+(((-1.0)*r20*sj5)))),-1);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x6869)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6870.value)))+(x6871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6872=IKcos(j4);
IkReal x6873=IKsin(j4);
IkReal x6874=(cj5*r00);
IkReal x6875=((1.0)*x6872);
IkReal x6876=(sj5*x6872);
IkReal x6877=(cj5*x6873);
IkReal x6878=((1.0)*sj5*x6873);
evalcond[0]=(((r22*x6873))+((r21*x6876))+(((-1.0)*cj5*r20*x6875)));
evalcond[1]=(((r11*x6876))+((r12*x6873))+(((-1.0)*cj5*r10*x6875)));
evalcond[2]=(((r02*x6872))+(((-1.0)*r01*x6878))+((x6873*x6874)));
evalcond[3]=((-1.0)+((r02*x6873))+(((-1.0)*x6874*x6875))+((r01*x6876)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x6872))+(((-1.0)*r11*x6878))+((r10*x6877)));
evalcond[5]=(((r22*x6872))+(((-1.0)*r21*x6878))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x6877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6879.value)+(((1.5707963267949)*(x6880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6881=IKcos(j4);
IkReal x6882=IKsin(j4);
IkReal x6883=(cj5*r00);
IkReal x6884=((1.0)*x6881);
IkReal x6885=(sj5*x6881);
IkReal x6886=(cj5*x6882);
IkReal x6887=((1.0)*sj5*x6882);
evalcond[0]=((((-1.0)*cj5*r20*x6884))+((r22*x6882))+((r21*x6885)));
evalcond[1]=(((r11*x6885))+(((-1.0)*cj5*r10*x6884))+((r12*x6882)));
evalcond[2]=(((r02*x6881))+((x6882*x6883))+(((-1.0)*r01*x6887)));
evalcond[3]=((-1.0)+((r02*x6882))+(((-1.0)*x6883*x6884))+((r01*x6885)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*x6887))+((r12*x6881))+((r10*x6886)));
evalcond[5]=(((r20*x6886))+(((-1.0)*r21*x6887))+(((-1.0)*sj1*sj2))+((r22*x6881))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6888=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6888;
j4eval[1]=IKsign(x6888);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6889=((1.0)*cj5);
IkReal x6890=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6889)));
j4eval[0]=x6890;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6889))+((r21*sj5))))));
j4eval[2]=IKsign(x6890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6891=cj5*cj5;
IkReal x6892=r01*r01;
IkReal x6893=(r01*sj5);
IkReal x6894=(cj5*r00);
IkReal x6895=((((-1.0)*x6892))+((x6891*x6892))+(((-1.0)*x6891*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x6893*x6894)));
j4eval[0]=x6895;
j4eval[1]=IKsign(x6895);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6894))+x6893))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6896=cj5*cj5;
IkReal x6897=r01*r01;
IkReal x6898=(r01*sj5);
IkReal x6899=(cj5*r00);
CheckValue<IkReal> x6900 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6899))+x6898)),IKFAST_ATAN2_MAGTHRESH);
if(!x6900.valid){
continue;
}
CheckValue<IkReal> x6901=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6897))+(((2.0)*x6898*x6899))+(((-1.0)*(r02*r02)))+(((-1.0)*x6896*(r00*r00)))+((x6896*x6897)))),-1);
if(!x6901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6900.value)+(((1.5707963267949)*(x6901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6902=IKcos(j4);
IkReal x6903=IKsin(j4);
IkReal x6904=(cj5*r00);
IkReal x6905=((1.0)*sj2);
IkReal x6906=((1.0)*x6902);
IkReal x6907=(sj5*x6902);
IkReal x6908=(cj5*x6903);
IkReal x6909=((1.0)*sj5*x6903);
evalcond[0]=(((r22*x6903))+((r21*x6907))+(((-1.0)*cj5*r20*x6906)));
evalcond[1]=(((r11*x6907))+((r12*x6903))+(((-1.0)*cj5*r10*x6906)));
evalcond[2]=(((r02*x6902))+((x6903*x6904))+(((-1.0)*r01*x6909)));
evalcond[3]=((1.0)+(((-1.0)*x6904*x6906))+((r01*x6907))+((r02*x6903)));
evalcond[4]=(((r22*x6902))+(((-1.0)*r21*x6909))+((cj1*cj2))+((r20*x6908))+(((-1.0)*sj1*x6905)));
evalcond[5]=((((-1.0)*cj1*x6905))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x6909))+((r10*x6908))+((r12*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6910=((1.0)*cj5);
CheckValue<IkReal> x6911 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x6910)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6911.valid){
continue;
}
CheckValue<IkReal> x6912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6910)))),-1);
if(!x6912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6911.value)+(((1.5707963267949)*(x6912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6913=IKcos(j4);
IkReal x6914=IKsin(j4);
IkReal x6915=(cj5*r00);
IkReal x6916=((1.0)*sj2);
IkReal x6917=((1.0)*x6913);
IkReal x6918=(sj5*x6913);
IkReal x6919=(cj5*x6914);
IkReal x6920=((1.0)*sj5*x6914);
evalcond[0]=(((r21*x6918))+(((-1.0)*cj5*r20*x6917))+((r22*x6914)));
evalcond[1]=(((r12*x6914))+((r11*x6918))+(((-1.0)*cj5*r10*x6917)));
evalcond[2]=(((x6914*x6915))+(((-1.0)*r01*x6920))+((r02*x6913)));
evalcond[3]=((1.0)+((r02*x6914))+(((-1.0)*x6915*x6917))+((r01*x6918)));
evalcond[4]=((((-1.0)*sj1*x6916))+((r22*x6913))+((cj1*cj2))+(((-1.0)*r21*x6920))+((r20*x6919)));
evalcond[5]=((((-1.0)*cj1*x6916))+(((-1.0)*cj2*sj1))+((r10*x6919))+((r12*x6913))+(((-1.0)*r11*x6920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6921=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6921.valid){
continue;
}
CheckValue<IkReal> x6922 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6921.value)))+(x6922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6923=IKcos(j4);
IkReal x6924=IKsin(j4);
IkReal x6925=(cj5*r00);
IkReal x6926=((1.0)*sj2);
IkReal x6927=((1.0)*x6923);
IkReal x6928=(sj5*x6923);
IkReal x6929=(cj5*x6924);
IkReal x6930=((1.0)*sj5*x6924);
evalcond[0]=((((-1.0)*cj5*r20*x6927))+((r22*x6924))+((r21*x6928)));
evalcond[1]=((((-1.0)*cj5*r10*x6927))+((r11*x6928))+((r12*x6924)));
evalcond[2]=((((-1.0)*r01*x6930))+((r02*x6923))+((x6924*x6925)));
evalcond[3]=((1.0)+((r01*x6928))+(((-1.0)*x6925*x6927))+((r02*x6924)));
evalcond[4]=(((r20*x6929))+((r22*x6923))+(((-1.0)*sj1*x6926))+((cj1*cj2))+(((-1.0)*r21*x6930)));
evalcond[5]=((((-1.0)*cj1*x6926))+(((-1.0)*cj2*sj1))+((r10*x6929))+((r12*x6923))+(((-1.0)*r11*x6930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6931=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6931);
rxp1_1=(px*r21);
rxp1_2=(r11*x6931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6932=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6932);
rxp1_1=(px*r21);
rxp1_2=(r11*x6932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6933=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6933);
rxp1_1=(px*r21);
rxp1_2=(r11*x6933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6936=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x6936.valid){
continue;
}
IkReal x6934=x6936.value;
IkReal x6935=((1.0)*sj0*x6934);
sj4array[0]=((((-1.0)*cj2*sj1*x6935))+(((-1.0)*cj1*sj2*x6935)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6937=IKcos(j4);
IkReal x6938=IKsin(j4);
IkReal x6939=(r21*sj5);
IkReal x6940=((1.0)*cj5*x6937);
evalcond[0]=(r02*x6937);
evalcond[1]=((((-1.0)*sj0))+((r02*x6938)));
evalcond[2]=((((-1.0)*r20*x6940))+((x6937*x6939)));
evalcond[3]=(((r11*sj5*x6937))+(((-1.0)*r10*x6940)));
evalcond[4]=((((-1.0)*sj1*sj2))+(((-1.0)*x6938*x6939))+((cj5*r20*x6938))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6942=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x6942.valid){
continue;
}
IkReal x6941=x6942.value;
sj4array[0]=(((sj1*sj2*x6941))+(((-1.0)*cj1*cj2*x6941)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6943=IKcos(j4);
IkReal x6944=IKsin(j4);
IkReal x6945=(r11*sj5);
IkReal x6946=((1.0)*cj5*x6943);
evalcond[0]=(r02*x6943);
evalcond[1]=((((-1.0)*sj0))+((r02*x6944)));
evalcond[2]=((((-1.0)*r20*x6946))+((r21*sj5*x6943)));
evalcond[3]=(((x6943*x6945))+(((-1.0)*r10*x6946)));
evalcond[4]=(((cj5*r10*x6944))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x6944*x6945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(r02,-1);
if(!x6947.valid){
continue;
}
sj4array[0]=(sj0*(x6947.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6948=IKcos(j4);
IkReal x6949=IKsin(j4);
IkReal x6950=(sj5*x6948);
IkReal x6951=(cj5*x6949);
IkReal x6952=((1.0)*sj5*x6949);
IkReal x6953=((1.0)*cj5*x6948);
evalcond[0]=(r02*x6948);
evalcond[1]=((((-1.0)*r20*x6953))+((r21*x6950)));
evalcond[2]=((((-1.0)*r10*x6953))+((r11*x6950)));
evalcond[3]=((((-1.0)*r21*x6952))+(((-1.0)*sj1*sj2))+((r20*x6951))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r11*x6952))+((r10*x6951))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6954=((1.0)*sj0);
IkReal x6955=((1.0)*cj0);
CheckValue<IkReal> x6956 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x6954))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x6955)))),IkReal(((((-1.0)*r12*x6954))+(((-1.0)*r02*x6955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6956.valid){
continue;
}
CheckValue<IkReal> x6957=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6956.value)+(((1.5707963267949)*(x6957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6958=IKcos(j4);
IkReal x6959=IKsin(j4);
IkReal x6960=(cj5*r00);
IkReal x6961=(cj2*sj1);
IkReal x6962=(cj1*sj2);
IkReal x6963=((1.0)*x6958);
IkReal x6964=(sj5*x6958);
IkReal x6965=(cj5*x6959);
IkReal x6966=((1.0)*sj5*x6959);
evalcond[0]=(((r21*x6964))+((r22*x6959))+(((-1.0)*cj5*r20*x6963)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x6963))+((r12*x6959))+((r11*x6964)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6964))+((r02*x6959))+(((-1.0)*x6960*x6963)));
evalcond[3]=(((r22*x6958))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6966))+((cj1*cj2))+((r20*x6965)));
evalcond[4]=(((r02*x6958))+((cj0*x6961))+((cj0*x6962))+((x6959*x6960))+(((-1.0)*r01*x6966)));
evalcond[5]=(((r10*x6965))+(((-1.0)*r11*x6966))+((sj0*x6961))+((sj0*x6962))+((r12*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6967 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6967.valid){
continue;
}
CheckValue<IkReal> x6968=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6967.value)+(((1.5707963267949)*(x6968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6969=IKcos(j4);
IkReal x6970=IKsin(j4);
IkReal x6971=(cj5*r00);
IkReal x6972=(cj2*sj1);
IkReal x6973=(cj1*sj2);
IkReal x6974=((1.0)*x6969);
IkReal x6975=(sj5*x6969);
IkReal x6976=(cj5*x6970);
IkReal x6977=((1.0)*sj5*x6970);
evalcond[0]=(((r21*x6975))+((r22*x6970))+(((-1.0)*cj5*r20*x6974)));
evalcond[1]=(((r12*x6970))+cj0+(((-1.0)*cj5*r10*x6974))+((r11*x6975)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6975))+(((-1.0)*x6971*x6974))+((r02*x6970)));
evalcond[3]=(((r22*x6969))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x6977))+((cj1*cj2))+((r20*x6976)));
evalcond[4]=(((cj0*x6973))+((cj0*x6972))+((r02*x6969))+((x6970*x6971))+(((-1.0)*r01*x6977)));
evalcond[5]=((((-1.0)*r11*x6977))+((sj0*x6973))+((sj0*x6972))+((r10*x6976))+((r12*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6978 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6978.valid){
continue;
}
CheckValue<IkReal> x6979=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6978.value)+(((1.5707963267949)*(x6979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6980=IKcos(j4);
IkReal x6981=IKsin(j4);
IkReal x6982=(cj5*r00);
IkReal x6983=(cj2*sj1);
IkReal x6984=(cj1*sj2);
IkReal x6985=((1.0)*x6980);
IkReal x6986=(sj5*x6980);
IkReal x6987=(cj5*x6981);
IkReal x6988=((1.0)*sj5*x6981);
evalcond[0]=(((r22*x6981))+(((-1.0)*cj5*r20*x6985))+((r21*x6986)));
evalcond[1]=(cj0+(((-1.0)*cj5*r10*x6985))+((r12*x6981))+((r11*x6986)));
evalcond[2]=((((-1.0)*sj0))+((r02*x6981))+((r01*x6986))+(((-1.0)*x6982*x6985)));
evalcond[3]=((((-1.0)*r21*x6988))+((r22*x6980))+(((-1.0)*sj1*sj2))+((r20*x6987))+((cj1*cj2)));
evalcond[4]=(((x6981*x6982))+((r02*x6980))+((cj0*x6984))+((cj0*x6983))+(((-1.0)*r01*x6988)));
evalcond[5]=(((r10*x6987))+(((-1.0)*r11*x6988))+((r12*x6980))+((sj0*x6984))+((sj0*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6989=cj5*cj5;
IkReal x6990=r21*r21;
IkReal x6991=(sj1*sj2);
IkReal x6992=(r21*sj5);
IkReal x6993=(cj1*cj2);
IkReal x6994=(cj5*r20);
CheckValue<IkReal> x6995=IKPowWithIntegerCheck(IKsign((((x6989*(r20*r20)))+(r22*r22)+(((-1.0)*x6989*x6990))+(((-2.0)*x6992*x6994))+x6990)),-1);
if(!x6995.valid){
continue;
}
CheckValue<IkReal> x6996 = IKatan2WithCheck(IkReal((((x6992*x6993))+((x6991*x6994))+(((-1.0)*x6991*x6992))+(((-1.0)*x6993*x6994)))),IkReal(((((-1.0)*r22*x6993))+((r22*x6991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6995.value)))+(x6996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6997=IKcos(j4);
IkReal x6998=IKsin(j4);
IkReal x6999=(r21*sj5);
IkReal x7000=(cj5*r20);
evalcond[0]=((((-1.0)*x6997*x7000))+((x6997*x6999))+((r22*x6998)));
evalcond[1]=((((-1.0)*x6998*x6999))+(((-1.0)*sj1*sj2))+((x6998*x7000))+((r22*x6997))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7001=(cj4*cj5);
IkReal x7002=(cj4*sj5);
if( IKabs((((r02*sj4))+(((-1.0)*r00*x7001))+((r01*x7002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x7002))+((r10*x7001))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+(((-1.0)*r00*x7001))+((r01*x7002))))+IKsqr(((((-1.0)*r11*x7002))+((r10*x7001))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+(((-1.0)*r00*x7001))+((r01*x7002))), ((((-1.0)*r11*x7002))+((r10*x7001))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7003=IKcos(j0);
IkReal x7004=IKsin(j0);
IkReal x7005=(r00*sj5);
IkReal x7006=(cj5*r00);
IkReal x7007=((1.0)*sj2);
IkReal x7008=((1.0)*sj5);
IkReal x7009=(cj1*cj2);
IkReal x7010=((0.24)*cj2);
IkReal x7011=((1.0)*cj4);
IkReal x7012=(cj5*r11);
IkReal x7013=(cj5*r10);
IkReal x7014=(cj5*r01);
IkReal x7015=(cj1*sj2);
IkReal x7016=(cj4*sj5);
IkReal x7017=(sj1*x7004);
IkReal x7018=(sj1*x7003);
evalcond[0]=((((-1.0)*x7011*x7013))+x7003+((r12*sj4))+((r11*x7016)));
evalcond[1]=((((-1.0)*x7004))+((r02*sj4))+((r01*x7016))+(((-1.0)*x7006*x7011)));
evalcond[2]=((((-1.0)*x7005))+((x7003*x7009))+(((-1.0)*x7007*x7018))+(((-1.0)*x7014)));
evalcond[3]=((((-1.0)*r10*x7008))+((x7004*x7009))+(((-1.0)*x7007*x7017))+(((-1.0)*x7012)));
evalcond[4]=(((sj4*x7006))+(((-1.0)*r01*sj4*x7008))+((cj2*x7018))+((x7003*x7015))+((cj4*r02)));
evalcond[5]=(((cj2*x7017))+((x7004*x7015))+(((-1.0)*r11*sj4*x7008))+((sj4*x7013))+((cj4*r12)));
evalcond[6]=(((x7010*x7018))+(((-0.095)*x7014))+(((0.265)*x7018))+(((-1.0)*px))+(((0.24)*x7003*x7015))+(((-0.095)*x7005))+(((-0.115)*x7004)));
evalcond[7]=(((x7010*x7017))+(((-0.095)*x7012))+(((-0.095)*r10*sj5))+(((0.265)*x7017))+(((0.115)*x7003))+(((-1.0)*py))+(((0.24)*x7004*x7015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7019=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7020.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7019.value)))+(x7020.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7021=IKcos(j0);
IkReal x7022=IKsin(j0);
IkReal x7023=((1.0)*sj2);
IkReal x7024=(cj1*cj2);
IkReal x7025=((0.24)*cj2);
IkReal x7026=(cj5*r11);
IkReal x7027=(r00*sj5);
IkReal x7028=(r10*sj5);
IkReal x7029=(cj5*r01);
IkReal x7030=(sj1*x7022);
IkReal x7031=(sj1*x7021);
IkReal x7032=((0.24)*cj1*sj2);
evalcond[0]=((((-1.0)*x7029))+(((-1.0)*x7027))+(((-1.0)*x7023*x7031))+((x7021*x7024)));
evalcond[1]=((((-1.0)*x7028))+(((-1.0)*x7026))+((x7022*x7024))+(((-1.0)*x7023*x7030)));
evalcond[2]=((((-1.0)*px))+(((-0.095)*x7027))+(((-0.095)*x7029))+(((0.265)*x7031))+((x7025*x7031))+(((-0.115)*x7022))+((x7021*x7032)));
evalcond[3]=(((x7022*x7032))+(((-1.0)*py))+(((-0.095)*x7026))+(((-0.095)*x7028))+(((0.265)*x7030))+((x7025*x7030))+(((0.115)*x7021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7033=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7033;
j4eval[1]=IKsign(x7033);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7034=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7034;
j4eval[1]=IKsign(x7034);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7035=((1.0)*sj0);
IkReal x7036=((1.0)*cj0);
IkReal x7037=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7037;
j4eval[1]=((IKabs(((((-1.0)*r02*x7036))+(((-1.0)*r12*x7035)))))+(IKabs(((((-1.0)*cj5*r00*x7036))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7035))))));
j4eval[2]=IKsign(x7037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7038=((-1.0)*r20);
IkReal x7040 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7040)==0){
continue;
}
IkReal x7039=pow(x7040,-0.5);
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7038),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7041.value));
IkReal gconst133=(r21*x7039);
IkReal gconst134=(x7038*x7039);
CheckValue<IkReal> x7042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7043=((-1.0)*r20);
IkReal x7044=x7039;
CheckValue<IkReal> x7046 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7043),IKFAST_ATAN2_MAGTHRESH);
if(!x7046.valid){
continue;
}
IkReal x7045=((-1.0)*(x7046.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7045;
IkReal gconst132=x7045;
IkReal gconst133=(r21*x7044);
IkReal gconst134=(x7043*x7044);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7047=((-1.0)*r20);
IkReal x7048=x7039;
CheckValue<IkReal> x7050 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7047),IKFAST_ATAN2_MAGTHRESH);
if(!x7050.valid){
continue;
}
IkReal x7049=((-1.0)*(x7050.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7049;
IkReal gconst132=x7049;
IkReal gconst133=(r21*x7048);
IkReal gconst134=(x7047*x7048);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7051=((-1.0)*r20);
IkReal x7052=x7039;
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7051),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
IkReal x7053=((-1.0)*(x7054.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7053;
IkReal gconst132=x7053;
IkReal gconst133=(r21*x7052);
IkReal gconst134=(x7051*x7052);
IkReal x7055=r22*r22;
CheckValue<IkReal> x7058=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7055))),-1);
if(!x7058.valid){
continue;
}
IkReal x7056=x7058.value;
IkReal x7057=(x7055+((x7056*(r21*r21*r21*r21)))+(((2.0)*x7056*(r20*r20)*(r21*r21)))+((x7056*(r20*r20*r20*r20))));
j4eval[0]=x7057;
j4eval[1]=IKsign(x7057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7059=(gconst134*r20);
IkReal x7060=(cj1*cj2);
IkReal x7061=(gconst133*r21);
IkReal x7062=(sj1*sj2);
CheckValue<IkReal> x7063=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7059*x7059)+(((-2.0)*x7059*x7061))+(x7061*x7061))),-1);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal((((x7059*x7062))+((x7060*x7061))+(((-1.0)*x7061*x7062))+(((-1.0)*x7059*x7060)))),IkReal((((r22*x7062))+(((-1.0)*r22*x7060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7063.value)))+(x7064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7065=IKcos(j4);
IkReal x7066=IKsin(j4);
IkReal x7067=(gconst134*r10);
IkReal x7068=(cj2*sj1);
IkReal x7069=(gconst134*r00);
IkReal x7070=(gconst134*r20);
IkReal x7071=(cj1*sj2);
IkReal x7072=(gconst133*x7065);
IkReal x7073=((1.0)*x7065);
IkReal x7074=((1.0)*gconst133*x7066);
evalcond[0]=(((r22*x7066))+(((-1.0)*x7070*x7073))+((r21*x7072)));
evalcond[1]=(((r12*x7066))+((r11*x7072))+cj0+(((-1.0)*x7067*x7073)));
evalcond[2]=((((-1.0)*x7069*x7073))+(((-1.0)*sj0))+((r01*x7072))+((r02*x7066)));
evalcond[3]=((((-1.0)*r21*x7074))+((r22*x7065))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x7066*x7070)));
evalcond[4]=(((cj0*x7071))+(((-1.0)*r01*x7074))+((cj0*x7068))+((r02*x7065))+((x7066*x7069)));
evalcond[5]=(((r12*x7065))+(((-1.0)*r11*x7074))+((sj0*x7071))+((x7066*x7067))+((sj0*x7068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7075 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj0))+((gconst133*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7075.valid){
continue;
}
CheckValue<IkReal> x7076=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7075.value)+(((1.5707963267949)*(x7076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7077=IKcos(j4);
IkReal x7078=IKsin(j4);
IkReal x7079=(gconst134*r10);
IkReal x7080=(cj2*sj1);
IkReal x7081=(gconst134*r00);
IkReal x7082=(gconst134*r20);
IkReal x7083=(cj1*sj2);
IkReal x7084=(gconst133*x7077);
IkReal x7085=((1.0)*x7077);
IkReal x7086=((1.0)*gconst133*x7078);
evalcond[0]=(((r22*x7078))+((r21*x7084))+(((-1.0)*x7082*x7085)));
evalcond[1]=(((r11*x7084))+cj0+(((-1.0)*x7079*x7085))+((r12*x7078)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7084))+((r02*x7078))+(((-1.0)*x7081*x7085)));
evalcond[3]=(((r22*x7077))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7086))+((cj1*cj2))+((x7078*x7082)));
evalcond[4]=((((-1.0)*r01*x7086))+((x7078*x7081))+((cj0*x7083))+((cj0*x7080))+((r02*x7077)));
evalcond[5]=(((x7078*x7079))+(((-1.0)*r11*x7086))+((sj0*x7083))+((sj0*x7080))+((r12*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7087=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7087.valid){
continue;
}
CheckValue<IkReal> x7088 = IKatan2WithCheck(IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*gconst134*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7087.value)))+(x7088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7089=IKcos(j4);
IkReal x7090=IKsin(j4);
IkReal x7091=(gconst134*r10);
IkReal x7092=(cj2*sj1);
IkReal x7093=(gconst134*r00);
IkReal x7094=(gconst134*r20);
IkReal x7095=(cj1*sj2);
IkReal x7096=(gconst133*x7089);
IkReal x7097=((1.0)*x7089);
IkReal x7098=((1.0)*gconst133*x7090);
evalcond[0]=((((-1.0)*x7094*x7097))+((r22*x7090))+((r21*x7096)));
evalcond[1]=(((r11*x7096))+cj0+((r12*x7090))+(((-1.0)*x7091*x7097)));
evalcond[2]=((((-1.0)*x7093*x7097))+(((-1.0)*sj0))+((r01*x7096))+((r02*x7090)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7089))+(((-1.0)*r21*x7098))+((x7090*x7094))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x7098))+((r02*x7089))+((x7090*x7093))+((cj0*x7092))+((cj0*x7095)));
evalcond[5]=(((r12*x7089))+(((-1.0)*r11*x7098))+((x7090*x7091))+((sj0*x7092))+((sj0*x7095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7099=((-1.0)*r21);
IkReal x7101 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7101)==0){
continue;
}
IkReal x7100=pow(x7101,-0.5);
CheckValue<IkReal> x7102 = IKatan2WithCheck(IkReal(x7099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7102.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7102.value))));
IkReal gconst136=(x7099*x7100);
IkReal gconst137=((1.0)*r20*x7100);
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7103.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7104=((-1.0)*r21);
CheckValue<IkReal> x7107 = IKatan2WithCheck(IkReal(x7104),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7107.valid){
continue;
}
IkReal x7105=((1.0)*(x7107.value));
IkReal x7106=x7100;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7105)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7105)));
IkReal gconst136=(x7104*x7106);
IkReal gconst137=((1.0)*r20*x7106);
IkReal x7108=r22*r22;
IkReal x7109=((1.0)*x7108);
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(((-1.0)+x7108),-1);
if(!x7113.valid){
continue;
}
IkReal x7110=x7113.value;
if((((1.0)+(((-1.0)*x7109)))) < -0.00001)
continue;
IkReal x7111=IKsqrt(((1.0)+(((-1.0)*x7109))));
IkReal x7112=(cj0*x7110*x7111);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7112+(((-1.0)*x7109*x7112))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7114=((-1.0)*r21);
CheckValue<IkReal> x7117 = IKatan2WithCheck(IkReal(x7114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7117.valid){
continue;
}
IkReal x7115=((1.0)*(x7117.value));
IkReal x7116=x7100;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7115)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7115)));
IkReal gconst136=(x7114*x7116);
IkReal gconst137=((1.0)*r20*x7116);
IkReal x7118=r22*r22;
IkReal x7119=((1.0)*x7118);
CheckValue<IkReal> x7123=IKPowWithIntegerCheck(((-1.0)+x7118),-1);
if(!x7123.valid){
continue;
}
IkReal x7120=x7123.value;
if((((1.0)+(((-1.0)*x7119)))) < -0.00001)
continue;
IkReal x7121=IKsqrt(((1.0)+(((-1.0)*x7119))));
IkReal x7122=(sj0*x7120*x7121);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7122+(((-1.0)*x7119*x7122))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7124=((-1.0)*r21);
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal(x7124),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
IkReal x7125=((1.0)*(x7127.value));
IkReal x7126=x7100;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7125)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7125)));
IkReal gconst136=(x7124*x7126);
IkReal gconst137=((1.0)*r20*x7126);
IkReal x7128=r22*r22;
IkReal x7129=((1.0)*r12*sj0);
IkReal x7130=((1.0)*cj0*r02);
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(((-1.0)+x7128),-1);
if(!x7134.valid){
continue;
}
IkReal x7131=x7134.value;
if((((1.0)+(((-1.0)*x7128)))) < -0.00001)
continue;
IkReal x7132=IKsqrt(((1.0)+(((-1.0)*x7128))));
IkReal x7133=(r22*x7131*x7132);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7130*x7133))+(((-1.0)*x7129*x7133)))))+(IKabs(((((-1.0)*x7129))+(((-1.0)*x7130))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7135=((1.0)*sj0);
IkReal x7136=((1.0)*cj0);
CheckValue<IkReal> x7137=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7137.valid){
continue;
}
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r10*x7135))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r00*x7136)))),IkReal(((((-1.0)*r12*x7135))+(((-1.0)*r02*x7136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7137.value)))+(x7138.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7139=IKcos(j4);
IkReal x7140=IKsin(j4);
IkReal x7141=(cj2*sj1);
IkReal x7142=(gconst136*r01);
IkReal x7143=(gconst136*r21);
IkReal x7144=(gconst136*r11);
IkReal x7145=(cj1*sj2);
IkReal x7146=((1.0)*x7140);
IkReal x7147=(gconst137*x7140);
IkReal x7148=((1.0)*gconst137*x7139);
evalcond[0]=(((x7139*x7143))+((r22*x7140))+(((-1.0)*r20*x7148)));
evalcond[1]=(cj0+((x7139*x7144))+((r12*x7140))+(((-1.0)*r10*x7148)));
evalcond[2]=((((-1.0)*sj0))+((x7139*x7142))+((r02*x7140))+(((-1.0)*r00*x7148)));
evalcond[3]=(((r20*x7147))+((r22*x7139))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7143*x7146)));
evalcond[4]=((((-1.0)*x7142*x7146))+((r00*x7147))+((cj0*x7145))+((cj0*x7141))+((r02*x7139)));
evalcond[5]=((((-1.0)*x7144*x7146))+((r12*x7139))+((r10*x7147))+((sj0*x7145))+((sj0*x7141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7149 = IKatan2WithCheck(IkReal((((gconst136*r21*sj0))+(((-1.0)*gconst137*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7149.valid){
continue;
}
CheckValue<IkReal> x7150=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7149.value)+(((1.5707963267949)*(x7150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7151=IKcos(j4);
IkReal x7152=IKsin(j4);
IkReal x7153=(cj2*sj1);
IkReal x7154=(gconst136*r01);
IkReal x7155=(gconst136*r21);
IkReal x7156=(gconst136*r11);
IkReal x7157=(cj1*sj2);
IkReal x7158=((1.0)*x7152);
IkReal x7159=(gconst137*x7152);
IkReal x7160=((1.0)*gconst137*x7151);
evalcond[0]=(((r22*x7152))+((x7151*x7155))+(((-1.0)*r20*x7160)));
evalcond[1]=(cj0+((r12*x7152))+(((-1.0)*r10*x7160))+((x7151*x7156)));
evalcond[2]=(((r02*x7152))+(((-1.0)*sj0))+(((-1.0)*r00*x7160))+((x7151*x7154)));
evalcond[3]=(((r22*x7151))+(((-1.0)*x7155*x7158))+(((-1.0)*sj1*sj2))+((r20*x7159))+((cj1*cj2)));
evalcond[4]=(((r02*x7151))+((r00*x7159))+((cj0*x7157))+((cj0*x7153))+(((-1.0)*x7154*x7158)));
evalcond[5]=((((-1.0)*x7156*x7158))+((r12*x7151))+((sj0*x7157))+((sj0*x7153))+((r10*x7159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7161 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst137*r20))+((cj0*gconst136*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7161.valid){
continue;
}
CheckValue<IkReal> x7162=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7161.value)+(((1.5707963267949)*(x7162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7163=IKcos(j4);
IkReal x7164=IKsin(j4);
IkReal x7165=(cj2*sj1);
IkReal x7166=(gconst136*r01);
IkReal x7167=(gconst136*r21);
IkReal x7168=(gconst136*r11);
IkReal x7169=(cj1*sj2);
IkReal x7170=((1.0)*x7164);
IkReal x7171=(gconst137*x7164);
IkReal x7172=((1.0)*gconst137*x7163);
evalcond[0]=((((-1.0)*r20*x7172))+((x7163*x7167))+((r22*x7164)));
evalcond[1]=((((-1.0)*r10*x7172))+cj0+((r12*x7164))+((x7163*x7168)));
evalcond[2]=((((-1.0)*sj0))+((x7163*x7166))+(((-1.0)*r00*x7172))+((r02*x7164)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*x7167*x7170))+((cj1*cj2))+((r20*x7171))+((r22*x7163)));
evalcond[4]=(((cj0*x7165))+((cj0*x7169))+((r00*x7171))+((r02*x7163))+(((-1.0)*x7166*x7170)));
evalcond[5]=((((-1.0)*x7168*x7170))+((r10*x7171))+((r12*x7163))+((sj0*x7169))+((sj0*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7174 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7174)==0){
continue;
}
IkReal x7173=pow(x7174,-0.5);
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7175.value));
IkReal gconst139=((-1.0)*r11*x7173);
IkReal gconst140=(r10*x7173);
CheckValue<IkReal> x7176 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7176.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7179 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7179.valid){
continue;
}
IkReal x7177=((-1.0)*(x7179.value));
IkReal x7178=x7173;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7177;
IkReal gconst138=x7177;
IkReal gconst139=((-1.0)*r11*x7178);
IkReal gconst140=(r10*x7178);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7180=((1.0)*gconst140);
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7180))+(((-1.0)*gconst139*r20)))),-1);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj0*x7180))+((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*cj0*r00*x7180)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7181.value)))+(x7182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKcos(j4);
IkReal x7184=IKsin(j4);
IkReal x7185=(cj2*sj1);
IkReal x7186=(gconst140*r10);
IkReal x7187=(cj1*sj2);
IkReal x7188=(gconst139*x7183);
IkReal x7189=(gconst140*x7184);
IkReal x7190=((1.0)*gconst139*x7184);
IkReal x7191=((1.0)*gconst140*x7183);
evalcond[0]=(((r21*x7188))+(((-1.0)*r20*x7191))+((r22*x7184)));
evalcond[1]=(((r12*x7184))+cj0+((r11*x7188))+(((-1.0)*x7183*x7186)));
evalcond[2]=(((r01*x7188))+(((-1.0)*sj0))+((r02*x7184))+(((-1.0)*r00*x7191)));
evalcond[3]=(((r20*x7189))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7190))+((cj1*cj2))+((r22*x7183)));
evalcond[4]=(((r00*x7189))+((r02*x7183))+(((-1.0)*r01*x7190))+((cj0*x7187))+((cj0*x7185)));
evalcond[5]=(((r12*x7183))+((sj0*x7187))+((sj0*x7185))+(((-1.0)*r11*x7190))+((x7184*x7186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7192=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7192.valid){
continue;
}
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*gconst140*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7192.value)))+(x7193.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7194=IKcos(j4);
IkReal x7195=IKsin(j4);
IkReal x7196=(cj2*sj1);
IkReal x7197=(gconst140*r10);
IkReal x7198=(cj1*sj2);
IkReal x7199=(gconst139*x7194);
IkReal x7200=(gconst140*x7195);
IkReal x7201=((1.0)*gconst139*x7195);
IkReal x7202=((1.0)*gconst140*x7194);
evalcond[0]=((((-1.0)*r20*x7202))+((r21*x7199))+((r22*x7195)));
evalcond[1]=(((r11*x7199))+cj0+((r12*x7195))+(((-1.0)*x7194*x7197)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7199))+((r02*x7195))+(((-1.0)*r00*x7202)));
evalcond[3]=((((-1.0)*r21*x7201))+(((-1.0)*sj1*sj2))+((r20*x7200))+((r22*x7194))+((cj1*cj2)));
evalcond[4]=(((r00*x7200))+((r02*x7194))+((cj0*x7198))+((cj0*x7196))+(((-1.0)*r01*x7201)));
evalcond[5]=(((r12*x7194))+((x7195*x7197))+((sj0*x7198))+((sj0*x7196))+(((-1.0)*r11*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7204 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7204)==0){
continue;
}
IkReal x7203=pow(x7204,-0.5);
CheckValue<IkReal> x7205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7205.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7205.value))));
IkReal gconst142=((1.0)*r11*x7203);
IkReal gconst143=((-1.0)*r10*x7203);
CheckValue<IkReal> x7206 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7206.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7206.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
IkReal x7207=((1.0)*(x7209.value));
IkReal x7208=x7203;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7207)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7207)));
IkReal gconst142=((1.0)*r11*x7208);
IkReal gconst143=((-1.0)*r10*x7208);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
IkReal x7210=((1.0)*(x7212.value));
IkReal x7211=x7203;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7210)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7210)));
IkReal gconst142=((1.0)*r11*x7211);
IkReal gconst143=((-1.0)*r10*x7211);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7215 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7215.valid){
continue;
}
IkReal x7213=((1.0)*(x7215.value));
IkReal x7214=x7203;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7213)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7213)));
IkReal gconst142=((1.0)*r11*x7214);
IkReal gconst143=((-1.0)*r10*x7214);
IkReal x7216=r12*r12;
IkReal x7217=((1.0)*sj0);
IkReal x7218=(cj0*r02);
IkReal x7219=x7203;
j4eval[0]=((IKabs(((((-1.0)*x7217*x7219))+((sj0*x7216*x7219))+((r12*x7218*x7219)))))+(IKabs(((((-1.0)*r12*x7217))+(((-1.0)*x7218))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=((1.0)*sj0);
IkReal x7221=((1.0)*gconst143);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal((((cj0*gconst142*r01))+(((-1.0)*gconst143*r10*x7220))+((gconst142*r11*sj0))+(((-1.0)*cj0*r00*x7221)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7221))+(((-1.0)*gconst142*r20)))),-1);
if(!x7223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7222.value)+(((1.5707963267949)*(x7223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7224=IKcos(j4);
IkReal x7225=IKsin(j4);
IkReal x7226=(cj2*sj1);
IkReal x7227=(cj1*sj2);
IkReal x7228=(gconst143*x7225);
IkReal x7229=(gconst142*x7224);
IkReal x7230=((1.0)*gconst142*x7225);
IkReal x7231=((1.0)*gconst143*x7224);
evalcond[0]=((((-1.0)*r20*x7231))+((r21*x7229))+((r22*x7225)));
evalcond[1]=((((-1.0)*r10*x7231))+cj0+((r11*x7229))+((r12*x7225)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7229))+((r02*x7225))+(((-1.0)*r00*x7231)));
evalcond[3]=(((r20*x7228))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r22*x7224))+(((-1.0)*r21*x7230)));
evalcond[4]=(((r00*x7228))+((r02*x7224))+((cj0*x7226))+((cj0*x7227))+(((-1.0)*r01*x7230)));
evalcond[5]=(((sj0*x7226))+((sj0*x7227))+((r10*x7228))+(((-1.0)*r11*x7230))+((r12*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7232=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7232.valid){
continue;
}
CheckValue<IkReal> x7233 = IKatan2WithCheck(IkReal((((gconst142*r21*sj0))+(((-1.0)*gconst143*r20*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7232.value)))+(x7233.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7234=IKcos(j4);
IkReal x7235=IKsin(j4);
IkReal x7236=(cj2*sj1);
IkReal x7237=(cj1*sj2);
IkReal x7238=(gconst143*x7235);
IkReal x7239=(gconst142*x7234);
IkReal x7240=((1.0)*gconst142*x7235);
IkReal x7241=((1.0)*gconst143*x7234);
evalcond[0]=((((-1.0)*r20*x7241))+((r21*x7239))+((r22*x7235)));
evalcond[1]=(cj0+(((-1.0)*r10*x7241))+((r12*x7235))+((r11*x7239)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7239))+(((-1.0)*r00*x7241))+((r02*x7235)));
evalcond[3]=((((-1.0)*r21*x7240))+(((-1.0)*sj1*sj2))+((r20*x7238))+((cj1*cj2))+((r22*x7234)));
evalcond[4]=(((r00*x7238))+((cj0*x7237))+((cj0*x7236))+(((-1.0)*r01*x7240))+((r02*x7234)));
evalcond[5]=(((r10*x7238))+(((-1.0)*r11*x7240))+((r12*x7234))+((sj0*x7237))+((sj0*x7236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7242.valid){
continue;
}
CheckValue<IkReal> x7243 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst143*r20))+((cj0*gconst142*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7242.value)))+(x7243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7244=IKcos(j4);
IkReal x7245=IKsin(j4);
IkReal x7246=(cj2*sj1);
IkReal x7247=(cj1*sj2);
IkReal x7248=(gconst143*x7245);
IkReal x7249=(gconst142*x7244);
IkReal x7250=((1.0)*gconst142*x7245);
IkReal x7251=((1.0)*gconst143*x7244);
evalcond[0]=(((r21*x7249))+((r22*x7245))+(((-1.0)*r20*x7251)));
evalcond[1]=((((-1.0)*r10*x7251))+cj0+((r11*x7249))+((r12*x7245)));
evalcond[2]=(((r02*x7245))+(((-1.0)*sj0))+(((-1.0)*r00*x7251))+((r01*x7249)));
evalcond[3]=((((-1.0)*r21*x7250))+(((-1.0)*sj1*sj2))+((r20*x7248))+((cj1*cj2))+((r22*x7244)));
evalcond[4]=(((cj0*x7246))+((cj0*x7247))+((r02*x7244))+(((-1.0)*r01*x7250))+((r00*x7248)));
evalcond[5]=(((r10*x7248))+(((-1.0)*r11*x7250))+((r12*x7244))+((sj0*x7246))+((sj0*x7247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7252=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7252;
j4eval[1]=IKsign(x7252);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7253=((1.0)*cj5);
IkReal x7254=((((-1.0)*r21*x7253))+(((-1.0)*r20*sj5)));
j4eval[0]=x7254;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7253))))));
j4eval[2]=IKsign(x7254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7255=cj5*cj5;
IkReal x7256=r11*r11;
IkReal x7257=(cj5*r10);
IkReal x7258=(r11*sj5);
IkReal x7259=((((-1.0)*x7255*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7257*x7258))+((x7255*x7256))+(((-1.0)*x7256)));
j4eval[0]=x7259;
j4eval[1]=((IKabs(r12))+(IKabs((x7258+(((-1.0)*x7257))))));
j4eval[2]=IKsign(x7259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7260=cj5*cj5;
IkReal x7261=r11*r11;
IkReal x7262=(cj5*r10);
IkReal x7263=(r11*sj5);
CheckValue<IkReal> x7264=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7261))+(((-1.0)*x7260*(r10*r10)))+(((2.0)*x7262*x7263))+(((-1.0)*(r12*r12)))+((x7260*x7261)))),-1);
if(!x7264.valid){
continue;
}
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(r12),IkReal((x7263+(((-1.0)*x7262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7264.value)))+(x7265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7266=IKcos(j4);
IkReal x7267=IKsin(j4);
IkReal x7268=(cj5*r00);
IkReal x7269=((1.0)*x7266);
IkReal x7270=(sj5*x7266);
IkReal x7271=(cj5*x7267);
IkReal x7272=((1.0)*sj5*x7267);
evalcond[0]=((((-1.0)*cj5*r20*x7269))+((r22*x7267))+((r21*x7270)));
evalcond[1]=(((r02*x7267))+((r01*x7270))+(((-1.0)*x7268*x7269)));
evalcond[2]=((((-1.0)*r11*x7272))+((r12*x7266))+((r10*x7271)));
evalcond[3]=((1.0)+((r12*x7267))+(((-1.0)*cj5*r10*x7269))+((r11*x7270)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x7266))+((x7267*x7268))+(((-1.0)*r01*x7272)));
evalcond[5]=((((-1.0)*r21*x7272))+(((-1.0)*sj1*sj2))+((r22*x7266))+((r20*x7271))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7273=((1.0)*cj5);
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x7273)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
CheckValue<IkReal> x7275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7273))+(((-1.0)*r20*sj5)))),-1);
if(!x7275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7274.value)+(((1.5707963267949)*(x7275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7276=IKcos(j4);
IkReal x7277=IKsin(j4);
IkReal x7278=(cj5*r00);
IkReal x7279=((1.0)*x7276);
IkReal x7280=(sj5*x7276);
IkReal x7281=(cj5*x7277);
IkReal x7282=((1.0)*sj5*x7277);
evalcond[0]=((((-1.0)*cj5*r20*x7279))+((r21*x7280))+((r22*x7277)));
evalcond[1]=((((-1.0)*x7278*x7279))+((r01*x7280))+((r02*x7277)));
evalcond[2]=(((r12*x7276))+(((-1.0)*r11*x7282))+((r10*x7281)));
evalcond[3]=((1.0)+((r11*x7280))+((r12*x7277))+(((-1.0)*cj5*r10*x7279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x7282))+((x7277*x7278))+((r02*x7276)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x7282))+((r20*x7281))+((cj1*cj2))+((r22*x7276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7283=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7283.value)))+(x7284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKcos(j4);
IkReal x7286=IKsin(j4);
IkReal x7287=(cj5*r00);
IkReal x7288=((1.0)*x7285);
IkReal x7289=(sj5*x7285);
IkReal x7290=(cj5*x7286);
IkReal x7291=((1.0)*sj5*x7286);
evalcond[0]=(((r22*x7286))+(((-1.0)*cj5*r20*x7288))+((r21*x7289)));
evalcond[1]=(((r02*x7286))+(((-1.0)*x7287*x7288))+((r01*x7289)));
evalcond[2]=(((r12*x7285))+((r10*x7290))+(((-1.0)*r11*x7291)));
evalcond[3]=((1.0)+((r11*x7289))+(((-1.0)*cj5*r10*x7288))+((r12*x7286)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r01*x7291))+((r02*x7285))+((cj1*sj2))+((x7286*x7287)));
evalcond[5]=(((r22*x7285))+(((-1.0)*r21*x7291))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x7290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7292=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7292;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x7292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7293=((1.0)*cj5);
IkReal x7294=((((-1.0)*r01*x7293))+(((-1.0)*r00*sj5)));
j4eval[0]=x7294;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7293))))));
j4eval[2]=IKsign(x7294);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7295=cj5*cj5;
IkReal x7296=r11*r11;
IkReal x7297=(r11*sj5);
IkReal x7298=(cj5*r10);
IkReal x7299=((r12*r12)+x7296+(((-1.0)*x7295*x7296))+((x7295*(r10*r10)))+(((-2.0)*x7297*x7298)));
j4eval[0]=x7299;
j4eval[1]=((IKabs(r12))+(IKabs((x7297+(((-1.0)*x7298))))));
j4eval[2]=IKsign(x7299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7300=cj5*cj5;
IkReal x7301=r11*r11;
IkReal x7302=(cj5*r10);
IkReal x7303=(r11*sj5);
CheckValue<IkReal> x7304=IKPowWithIntegerCheck(IKsign((x7301+(r12*r12)+((x7300*(r10*r10)))+(((-1.0)*x7300*x7301))+(((-2.0)*x7302*x7303)))),-1);
if(!x7304.valid){
continue;
}
CheckValue<IkReal> x7305 = IKatan2WithCheck(IkReal(r12),IkReal((x7303+(((-1.0)*x7302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7304.value)))+(x7305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7306=IKcos(j4);
IkReal x7307=IKsin(j4);
IkReal x7308=(cj5*r00);
IkReal x7309=((1.0)*sj2);
IkReal x7310=((1.0)*x7306);
IkReal x7311=(sj5*x7306);
IkReal x7312=(cj5*x7307);
IkReal x7313=((1.0)*sj5*x7307);
evalcond[0]=(((r22*x7307))+(((-1.0)*cj5*r20*x7310))+((r21*x7311)));
evalcond[1]=(((r02*x7307))+(((-1.0)*x7308*x7310))+((r01*x7311)));
evalcond[2]=(((r12*x7306))+((r10*x7312))+(((-1.0)*r11*x7313)));
evalcond[3]=((-1.0)+((r12*x7307))+(((-1.0)*cj5*r10*x7310))+((r11*x7311)));
evalcond[4]=(((r22*x7306))+(((-1.0)*r21*x7313))+(((-1.0)*sj1*x7309))+((r20*x7312))+((cj1*cj2)));
evalcond[5]=(((r02*x7306))+(((-1.0)*cj2*sj1))+((x7307*x7308))+(((-1.0)*r01*x7313))+(((-1.0)*cj1*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7314=((1.0)*cj5);
CheckValue<IkReal> x7315 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7314)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7315.valid){
continue;
}
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7314)))),-1);
if(!x7316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7315.value)+(((1.5707963267949)*(x7316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7317=IKcos(j4);
IkReal x7318=IKsin(j4);
IkReal x7319=(cj5*r00);
IkReal x7320=((1.0)*sj2);
IkReal x7321=((1.0)*x7317);
IkReal x7322=(sj5*x7317);
IkReal x7323=(cj5*x7318);
IkReal x7324=((1.0)*sj5*x7318);
evalcond[0]=(((r22*x7318))+((r21*x7322))+(((-1.0)*cj5*r20*x7321)));
evalcond[1]=(((r02*x7318))+((r01*x7322))+(((-1.0)*x7319*x7321)));
evalcond[2]=(((r12*x7317))+((r10*x7323))+(((-1.0)*r11*x7324)));
evalcond[3]=((-1.0)+((r12*x7318))+(((-1.0)*cj5*r10*x7321))+((r11*x7322)));
evalcond[4]=(((r22*x7317))+(((-1.0)*r21*x7324))+((r20*x7323))+((cj1*cj2))+(((-1.0)*sj1*x7320)));
evalcond[5]=(((r02*x7317))+((x7318*x7319))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x7324))+(((-1.0)*cj1*x7320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7325=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7325.valid){
continue;
}
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7325.value)))+(x7326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7327=IKcos(j4);
IkReal x7328=IKsin(j4);
IkReal x7329=(cj5*r00);
IkReal x7330=((1.0)*sj2);
IkReal x7331=((1.0)*x7327);
IkReal x7332=(sj5*x7327);
IkReal x7333=(cj5*x7328);
IkReal x7334=((1.0)*sj5*x7328);
evalcond[0]=((((-1.0)*cj5*r20*x7331))+((r22*x7328))+((r21*x7332)));
evalcond[1]=((((-1.0)*x7329*x7331))+((r01*x7332))+((r02*x7328)));
evalcond[2]=(((r10*x7333))+(((-1.0)*r11*x7334))+((r12*x7327)));
evalcond[3]=((-1.0)+((r12*x7328))+(((-1.0)*cj5*r10*x7331))+((r11*x7332)));
evalcond[4]=(((r22*x7327))+(((-1.0)*r21*x7334))+(((-1.0)*sj1*x7330))+((r20*x7333))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x7328*x7329))+(((-1.0)*cj1*x7330))+(((-1.0)*r01*x7334))+((r02*x7327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7336 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7336)==0){
continue;
}
IkReal x7335=pow(x7336,-0.5);
CheckValue<IkReal> x7337 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7337.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7337.value));
IkReal gconst145=((-1.0)*r01*x7335);
IkReal gconst146=(r00*x7335);
CheckValue<IkReal> x7338 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7338.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7338.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
IkReal x7339=((-1.0)*(x7341.value));
IkReal x7340=x7335;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7339;
IkReal gconst144=x7339;
IkReal gconst145=((-1.0)*r01*x7340);
IkReal gconst146=(r00*x7340);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7342=((1.0)*sj0);
IkReal x7343=((1.0)*cj0);
CheckValue<IkReal> x7344 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r10*x7342))+((cj0*gconst145*r01))+(((-1.0)*gconst146*r00*x7343))+((gconst145*r11*sj0)))),IkReal(((((-1.0)*r12*x7342))+(((-1.0)*r02*x7343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7344.valid){
continue;
}
CheckValue<IkReal> x7345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*gconst145*r20)))),-1);
if(!x7345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7344.value)+(((1.5707963267949)*(x7345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7346=IKcos(j4);
IkReal x7347=IKsin(j4);
IkReal x7348=(cj2*sj1);
IkReal x7349=(gconst145*r21);
IkReal x7350=(gconst146*r00);
IkReal x7351=(gconst145*r11);
IkReal x7352=(cj1*sj2);
IkReal x7353=(gconst145*r01);
IkReal x7354=((1.0)*x7347);
IkReal x7355=(gconst146*x7347);
IkReal x7356=((1.0)*gconst146*x7346);
evalcond[0]=(((x7346*x7349))+((r22*x7347))+(((-1.0)*r20*x7356)));
evalcond[1]=((((-1.0)*r10*x7356))+cj0+((r12*x7347))+((x7346*x7351)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7346*x7350))+((x7346*x7353))+((r02*x7347)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7355))+(((-1.0)*x7349*x7354))+((cj1*cj2))+((r22*x7346)));
evalcond[4]=(((x7347*x7350))+((cj0*x7352))+((cj0*x7348))+(((-1.0)*x7353*x7354))+((r02*x7346)));
evalcond[5]=(((r10*x7355))+(((-1.0)*x7351*x7354))+((r12*x7346))+((sj0*x7352))+((sj0*x7348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7357=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7357.valid){
continue;
}
CheckValue<IkReal> x7358 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj0))+((gconst145*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7357.value)))+(x7358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7359=IKcos(j4);
IkReal x7360=IKsin(j4);
IkReal x7361=(cj2*sj1);
IkReal x7362=(gconst145*r21);
IkReal x7363=(gconst146*r00);
IkReal x7364=(gconst145*r11);
IkReal x7365=(cj1*sj2);
IkReal x7366=(gconst145*r01);
IkReal x7367=((1.0)*x7360);
IkReal x7368=(gconst146*x7360);
IkReal x7369=((1.0)*gconst146*x7359);
evalcond[0]=((((-1.0)*r20*x7369))+((x7359*x7362))+((r22*x7360)));
evalcond[1]=(((r12*x7360))+cj0+(((-1.0)*r10*x7369))+((x7359*x7364)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7359*x7363))+((x7359*x7366))+((r02*x7360)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r20*x7368))+((cj1*cj2))+((r22*x7359))+(((-1.0)*x7362*x7367)));
evalcond[4]=((((-1.0)*x7366*x7367))+((cj0*x7361))+((cj0*x7365))+((x7360*x7363))+((r02*x7359)));
evalcond[5]=(((sj0*x7361))+((sj0*x7365))+((r12*x7359))+(((-1.0)*x7364*x7367))+((r10*x7368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7371 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7371)==0){
continue;
}
IkReal x7370=pow(x7371,-0.5);
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7372.value))));
IkReal gconst148=((1.0)*r01*x7370);
IkReal gconst149=((-1.0)*r00*x7370);
CheckValue<IkReal> x7373 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7373.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7373.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7376 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7376.valid){
continue;
}
IkReal x7374=((1.0)*(x7376.value));
IkReal x7375=x7370;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7374)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7374)));
IkReal gconst148=((1.0)*r01*x7375);
IkReal gconst149=((-1.0)*r00*x7375);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7379 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7379.valid){
continue;
}
IkReal x7377=((1.0)*(x7379.value));
IkReal x7378=x7370;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7377)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7377)));
IkReal gconst148=((1.0)*r01*x7378);
IkReal gconst149=((-1.0)*r00*x7378);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7382 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7382.valid){
continue;
}
IkReal x7380=((1.0)*(x7382.value));
IkReal x7381=x7370;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7380)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7380)));
IkReal gconst148=((1.0)*r01*x7381);
IkReal gconst149=((-1.0)*r00*x7381);
IkReal x7383=r02*r02;
IkReal x7384=(r12*sj0);
IkReal x7385=((1.0)*cj0);
IkReal x7386=x7370;
j4eval[0]=((IKabs(((((-1.0)*x7385*x7386))+((r02*x7384*x7386))+((cj0*x7383*x7386)))))+(IKabs(((((-1.0)*r02*x7385))+(((-1.0)*x7384))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7387=((1.0)*sj0);
IkReal x7388=((1.0)*gconst149);
CheckValue<IkReal> x7389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7388)))),-1);
if(!x7389.valid){
continue;
}
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x7388))+((cj0*gconst148*r01))+(((-1.0)*gconst149*r10*x7387))+((gconst148*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7389.value)))+(x7390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7391=IKcos(j4);
IkReal x7392=IKsin(j4);
IkReal x7393=(cj2*sj1);
IkReal x7394=(cj1*sj2);
IkReal x7395=(gconst148*x7391);
IkReal x7396=(gconst149*x7392);
IkReal x7397=((1.0)*gconst148*x7392);
IkReal x7398=((1.0)*gconst149*x7391);
evalcond[0]=(((r22*x7392))+(((-1.0)*r20*x7398))+((r21*x7395)));
evalcond[1]=(cj0+((r12*x7392))+((r11*x7395))+(((-1.0)*r10*x7398)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7398))+((r02*x7392))+((r01*x7395)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7391))+((r20*x7396))+((cj1*cj2))+(((-1.0)*r21*x7397)));
evalcond[4]=(((r02*x7391))+(((-1.0)*r01*x7397))+((r00*x7396))+((cj0*x7394))+((cj0*x7393)));
evalcond[5]=((((-1.0)*r11*x7397))+((r10*x7396))+((r12*x7391))+((sj0*x7394))+((sj0*x7393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7399 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj0))+((gconst148*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7399.value)+(((1.5707963267949)*(x7400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKcos(j4);
IkReal x7402=IKsin(j4);
IkReal x7403=(cj2*sj1);
IkReal x7404=(cj1*sj2);
IkReal x7405=(gconst148*x7401);
IkReal x7406=(gconst149*x7402);
IkReal x7407=((1.0)*gconst148*x7402);
IkReal x7408=((1.0)*gconst149*x7401);
evalcond[0]=((((-1.0)*r20*x7408))+((r21*x7405))+((r22*x7402)));
evalcond[1]=(((r11*x7405))+cj0+(((-1.0)*r10*x7408))+((r12*x7402)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7402))+(((-1.0)*r00*x7408))+((r01*x7405)));
evalcond[3]=((((-1.0)*r21*x7407))+((r20*x7406))+(((-1.0)*sj1*sj2))+((r22*x7401))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r01*x7407))+((r02*x7401))+((r00*x7406))+((cj0*x7404))+((cj0*x7403)));
evalcond[5]=((((-1.0)*r11*x7407))+((r12*x7401))+((r10*x7406))+((sj0*x7404))+((sj0*x7403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7409.valid){
continue;
}
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst149*r20))+((cj0*gconst148*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7409.value)))+(x7410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7411=IKcos(j4);
IkReal x7412=IKsin(j4);
IkReal x7413=(cj2*sj1);
IkReal x7414=(cj1*sj2);
IkReal x7415=(gconst148*x7411);
IkReal x7416=(gconst149*x7412);
IkReal x7417=((1.0)*gconst148*x7412);
IkReal x7418=((1.0)*gconst149*x7411);
evalcond[0]=((((-1.0)*r20*x7418))+((r21*x7415))+((r22*x7412)));
evalcond[1]=(cj0+(((-1.0)*r10*x7418))+((r12*x7412))+((r11*x7415)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x7418))+((r02*x7412))+((r01*x7415)));
evalcond[3]=((((-1.0)*r21*x7417))+((r20*x7416))+(((-1.0)*sj1*sj2))+((r22*x7411))+((cj1*cj2)));
evalcond[4]=(((cj0*x7413))+((cj0*x7414))+(((-1.0)*r01*x7417))+((r02*x7411))+((r00*x7416)));
evalcond[5]=(((sj0*x7413))+((sj0*x7414))+(((-1.0)*r11*x7417))+((r10*x7416))+((r12*x7411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7419=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7419;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7420=((1.0)*cj5);
IkReal x7421=((((-1.0)*r21*x7420))+(((-1.0)*r20*sj5)));
j4eval[0]=x7421;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x7420))))));
j4eval[2]=IKsign(x7421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7422=cj5*cj5;
IkReal x7423=r01*r01;
IkReal x7424=(cj5*r00);
IkReal x7425=(r01*sj5);
IkReal x7426=((((-1.0)*x7422*x7423))+(((-2.0)*x7424*x7425))+((x7422*(r00*r00)))+(r02*r02)+x7423);
j4eval[0]=x7426;
j4eval[1]=IKsign(x7426);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7424))+x7425))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7427=cj5*cj5;
IkReal x7428=r01*r01;
IkReal x7429=(r01*sj5);
IkReal x7430=(cj5*r00);
CheckValue<IkReal> x7431 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7430))+x7429)),IKFAST_ATAN2_MAGTHRESH);
if(!x7431.valid){
continue;
}
CheckValue<IkReal> x7432=IKPowWithIntegerCheck(IKsign((((x7427*(r00*r00)))+(((-1.0)*x7427*x7428))+(r02*r02)+x7428+(((-2.0)*x7429*x7430)))),-1);
if(!x7432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7431.value)+(((1.5707963267949)*(x7432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7433=IKcos(j4);
IkReal x7434=IKsin(j4);
IkReal x7435=(cj5*r00);
IkReal x7436=((1.0)*x7433);
IkReal x7437=(sj5*x7433);
IkReal x7438=(cj5*x7434);
IkReal x7439=((1.0)*sj5*x7434);
evalcond[0]=(((r21*x7437))+(((-1.0)*cj5*r20*x7436))+((r22*x7434)));
evalcond[1]=(((r11*x7437))+((r12*x7434))+(((-1.0)*cj5*r10*x7436)));
evalcond[2]=((((-1.0)*r01*x7439))+((r02*x7433))+((x7434*x7435)));
evalcond[3]=((-1.0)+((r01*x7437))+((r02*x7434))+(((-1.0)*x7435*x7436)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x7439))+((cj1*sj2))+((r10*x7438))+((r12*x7433)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7438))+(((-1.0)*r21*x7439))+((cj1*cj2))+((r22*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7440=((1.0)*cj5);
CheckValue<IkReal> x7441 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x7440))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7440))+(((-1.0)*r20*sj5)))),-1);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7441.value)+(((1.5707963267949)*(x7442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKcos(j4);
IkReal x7444=IKsin(j4);
IkReal x7445=(cj5*r00);
IkReal x7446=((1.0)*x7443);
IkReal x7447=(sj5*x7443);
IkReal x7448=(cj5*x7444);
IkReal x7449=((1.0)*sj5*x7444);
evalcond[0]=((((-1.0)*cj5*r20*x7446))+((r22*x7444))+((r21*x7447)));
evalcond[1]=(((r12*x7444))+((r11*x7447))+(((-1.0)*cj5*r10*x7446)));
evalcond[2]=(((x7444*x7445))+(((-1.0)*r01*x7449))+((r02*x7443)));
evalcond[3]=((-1.0)+((r01*x7447))+(((-1.0)*x7445*x7446))+((r02*x7444)));
evalcond[4]=(((cj2*sj1))+((r12*x7443))+((cj1*sj2))+((r10*x7448))+(((-1.0)*r11*x7449)));
evalcond[5]=(((r20*x7448))+(((-1.0)*sj1*sj2))+((r22*x7443))+((cj1*cj2))+(((-1.0)*r21*x7449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
CheckValue<IkReal> x7451=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7450.value)+(((1.5707963267949)*(x7451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7452=IKcos(j4);
IkReal x7453=IKsin(j4);
IkReal x7454=(cj5*r00);
IkReal x7455=((1.0)*x7452);
IkReal x7456=(sj5*x7452);
IkReal x7457=(cj5*x7453);
IkReal x7458=((1.0)*sj5*x7453);
evalcond[0]=((((-1.0)*cj5*r20*x7455))+((r22*x7453))+((r21*x7456)));
evalcond[1]=(((r12*x7453))+((r11*x7456))+(((-1.0)*cj5*r10*x7455)));
evalcond[2]=(((r02*x7452))+(((-1.0)*r01*x7458))+((x7453*x7454)));
evalcond[3]=((-1.0)+((r02*x7453))+(((-1.0)*x7454*x7455))+((r01*x7456)));
evalcond[4]=(((cj2*sj1))+((r12*x7452))+((cj1*sj2))+((r10*x7457))+(((-1.0)*r11*x7458)));
evalcond[5]=(((r20*x7457))+(((-1.0)*sj1*sj2))+((r22*x7452))+((cj1*cj2))+(((-1.0)*r21*x7458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7459=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7459;
j4eval[1]=IKsign(x7459);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7460=((1.0)*cj5);
IkReal x7461=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7460)));
j4eval[0]=x7461;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x7460)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7462=cj5*cj5;
IkReal x7463=r01*r01;
IkReal x7464=(r01*sj5);
IkReal x7465=(cj5*r00);
IkReal x7466=((((2.0)*x7464*x7465))+(((-1.0)*(r02*r02)))+(((-1.0)*x7462*(r00*r00)))+((x7462*x7463))+(((-1.0)*x7463)));
j4eval[0]=x7466;
j4eval[1]=IKsign(x7466);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7465))+x7464))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7467=cj5*cj5;
IkReal x7468=r01*r01;
IkReal x7469=(r01*sj5);
IkReal x7470=(cj5*r00);
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x7468))+((x7467*x7468))+(((2.0)*x7469*x7470))+(((-1.0)*x7467*(r00*r00))))),-1);
if(!x7471.valid){
continue;
}
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7470))+x7469)),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7471.value)))+(x7472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7473=IKcos(j4);
IkReal x7474=IKsin(j4);
IkReal x7475=(cj5*r00);
IkReal x7476=((1.0)*sj2);
IkReal x7477=((1.0)*x7473);
IkReal x7478=(sj5*x7473);
IkReal x7479=(cj5*x7474);
IkReal x7480=((1.0)*sj5*x7474);
evalcond[0]=((((-1.0)*cj5*r20*x7477))+((r22*x7474))+((r21*x7478)));
evalcond[1]=(((r11*x7478))+(((-1.0)*cj5*r10*x7477))+((r12*x7474)));
evalcond[2]=(((r02*x7473))+((x7474*x7475))+(((-1.0)*r01*x7480)));
evalcond[3]=((1.0)+((r02*x7474))+(((-1.0)*x7475*x7477))+((r01*x7478)));
evalcond[4]=(((r20*x7479))+(((-1.0)*sj1*x7476))+((r22*x7473))+(((-1.0)*r21*x7480))+((cj1*cj2)));
evalcond[5]=(((r10*x7479))+(((-1.0)*cj1*x7476))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*x7480))+((r12*x7473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7481=((1.0)*cj5);
CheckValue<IkReal> x7482 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x7481)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7481)))),-1);
if(!x7483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7482.value)+(((1.5707963267949)*(x7483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7484=IKcos(j4);
IkReal x7485=IKsin(j4);
IkReal x7486=(cj5*r00);
IkReal x7487=((1.0)*sj2);
IkReal x7488=((1.0)*x7484);
IkReal x7489=(sj5*x7484);
IkReal x7490=(cj5*x7485);
IkReal x7491=((1.0)*sj5*x7485);
evalcond[0]=(((r22*x7485))+(((-1.0)*cj5*r20*x7488))+((r21*x7489)));
evalcond[1]=((((-1.0)*cj5*r10*x7488))+((r11*x7489))+((r12*x7485)));
evalcond[2]=((((-1.0)*r01*x7491))+((r02*x7484))+((x7485*x7486)));
evalcond[3]=((1.0)+(((-1.0)*x7486*x7488))+((r01*x7489))+((r02*x7485)));
evalcond[4]=(((r22*x7484))+(((-1.0)*sj1*x7487))+((r20*x7490))+(((-1.0)*r21*x7491))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7487))+(((-1.0)*cj2*sj1))+((r12*x7484))+((r10*x7490))+(((-1.0)*r11*x7491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7492.valid){
continue;
}
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7492.value)))+(x7493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7494=IKcos(j4);
IkReal x7495=IKsin(j4);
IkReal x7496=(cj5*r00);
IkReal x7497=((1.0)*sj2);
IkReal x7498=((1.0)*x7494);
IkReal x7499=(sj5*x7494);
IkReal x7500=(cj5*x7495);
IkReal x7501=((1.0)*sj5*x7495);
evalcond[0]=(((r22*x7495))+(((-1.0)*cj5*r20*x7498))+((r21*x7499)));
evalcond[1]=((((-1.0)*cj5*r10*x7498))+((r11*x7499))+((r12*x7495)));
evalcond[2]=((((-1.0)*r01*x7501))+((r02*x7494))+((x7495*x7496)));
evalcond[3]=((1.0)+((r01*x7499))+((r02*x7495))+(((-1.0)*x7496*x7498)));
evalcond[4]=(((r22*x7494))+(((-1.0)*sj1*x7497))+(((-1.0)*r21*x7501))+((r20*x7500))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x7497))+(((-1.0)*cj2*sj1))+((r12*x7494))+((r10*x7500))+(((-1.0)*r11*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7502=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7502);
rxp1_1=(px*r21);
rxp1_2=(r11*x7502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7503=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7503);
rxp1_1=(px*r21);
rxp1_2=(r11*x7503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7504=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7504);
rxp1_1=(px*r21);
rxp1_2=(r11*x7504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7507=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7507.valid){
continue;
}
IkReal x7505=x7507.value;
IkReal x7506=((1.0)*sj0*x7505);
sj4array[0]=((((-1.0)*cj1*sj2*x7506))+(((-1.0)*cj2*sj1*x7506)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7508=IKcos(j4);
IkReal x7509=IKsin(j4);
IkReal x7510=(r21*sj5);
IkReal x7511=((1.0)*cj5*x7508);
evalcond[0]=(r02*x7508);
evalcond[1]=((((-1.0)*sj0))+((r02*x7509)));
evalcond[2]=((((-1.0)*r20*x7511))+((x7508*x7510)));
evalcond[3]=((((-1.0)*r10*x7511))+((r11*sj5*x7508)));
evalcond[4]=(((cj5*r20*x7509))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7509*x7510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7513=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7513.valid){
continue;
}
IkReal x7512=x7513.value;
sj4array[0]=((((-1.0)*cj1*cj2*x7512))+((sj1*sj2*x7512)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7514=IKcos(j4);
IkReal x7515=IKsin(j4);
IkReal x7516=(r11*sj5);
IkReal x7517=((1.0)*cj5*x7514);
evalcond[0]=(r02*x7514);
evalcond[1]=((((-1.0)*sj0))+((r02*x7515)));
evalcond[2]=((((-1.0)*r20*x7517))+((r21*sj5*x7514)));
evalcond[3]=((((-1.0)*r10*x7517))+((x7514*x7516)));
evalcond[4]=(((cj1*sj0*sj2))+((cj2*sj0*sj1))+((cj5*r10*x7515))+(((-1.0)*x7515*x7516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7518=IKPowWithIntegerCheck(r02,-1);
if(!x7518.valid){
continue;
}
sj4array[0]=(sj0*(x7518.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7519=IKcos(j4);
IkReal x7520=IKsin(j4);
IkReal x7521=(sj5*x7519);
IkReal x7522=(cj5*x7520);
IkReal x7523=((1.0)*sj5*x7520);
IkReal x7524=((1.0)*cj5*x7519);
evalcond[0]=(r02*x7519);
evalcond[1]=(((r21*x7521))+(((-1.0)*r20*x7524)));
evalcond[2]=((((-1.0)*r10*x7524))+((r11*x7521)));
evalcond[3]=(((r20*x7522))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x7523))+((cj1*cj2)));
evalcond[4]=(((cj1*sj0*sj2))+((r10*x7522))+((cj2*sj0*sj1))+(((-1.0)*r11*x7523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*sj0);
IkReal x7526=((1.0)*cj0);
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7525))+(((-1.0)*cj5*r00*x7526)))),IkReal(((((-1.0)*r02*x7526))+(((-1.0)*r12*x7525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x7528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7527.value)+(((1.5707963267949)*(x7528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7529=IKcos(j4);
IkReal x7530=IKsin(j4);
IkReal x7531=(cj5*r00);
IkReal x7532=(cj2*sj1);
IkReal x7533=(cj1*sj2);
IkReal x7534=((1.0)*x7529);
IkReal x7535=(sj5*x7529);
IkReal x7536=(cj5*x7530);
IkReal x7537=((1.0)*sj5*x7530);
evalcond[0]=(((r22*x7530))+((r21*x7535))+(((-1.0)*cj5*r20*x7534)));
evalcond[1]=(cj0+((r11*x7535))+((r12*x7530))+(((-1.0)*cj5*r10*x7534)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7531*x7534))+((r01*x7535))+((r02*x7530)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7529))+((r20*x7536))+((cj1*cj2))+(((-1.0)*r21*x7537)));
evalcond[4]=(((cj0*x7533))+((cj0*x7532))+((x7530*x7531))+((r02*x7529))+(((-1.0)*r01*x7537)));
evalcond[5]=(((r10*x7536))+(((-1.0)*r11*x7537))+((r12*x7529))+((sj0*x7533))+((sj0*x7532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7540=IKcos(j4);
IkReal x7541=IKsin(j4);
IkReal x7542=(cj5*r00);
IkReal x7543=(cj2*sj1);
IkReal x7544=(cj1*sj2);
IkReal x7545=((1.0)*x7540);
IkReal x7546=(sj5*x7540);
IkReal x7547=(cj5*x7541);
IkReal x7548=((1.0)*sj5*x7541);
evalcond[0]=(((r21*x7546))+((r22*x7541))+(((-1.0)*cj5*r20*x7545)));
evalcond[1]=((((-1.0)*cj5*r10*x7545))+cj0+((r12*x7541))+((r11*x7546)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7542*x7545))+((r02*x7541))+((r01*x7546)));
evalcond[3]=(((r20*x7547))+(((-1.0)*sj1*sj2))+((r22*x7540))+((cj1*cj2))+(((-1.0)*r21*x7548)));
evalcond[4]=(((cj0*x7544))+((cj0*x7543))+((r02*x7540))+(((-1.0)*r01*x7548))+((x7541*x7542)));
evalcond[5]=(((r10*x7547))+((sj0*x7544))+((sj0*x7543))+((r12*x7540))+(((-1.0)*r11*x7548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7549 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7549.valid){
continue;
}
CheckValue<IkReal> x7550=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7549.value)+(((1.5707963267949)*(x7550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7551=IKcos(j4);
IkReal x7552=IKsin(j4);
IkReal x7553=(cj5*r00);
IkReal x7554=(cj2*sj1);
IkReal x7555=(cj1*sj2);
IkReal x7556=((1.0)*x7551);
IkReal x7557=(sj5*x7551);
IkReal x7558=(cj5*x7552);
IkReal x7559=((1.0)*sj5*x7552);
evalcond[0]=(((r21*x7557))+((r22*x7552))+(((-1.0)*cj5*r20*x7556)));
evalcond[1]=((((-1.0)*cj5*r10*x7556))+cj0+((r12*x7552))+((r11*x7557)));
evalcond[2]=((((-1.0)*sj0))+((r02*x7552))+(((-1.0)*x7553*x7556))+((r01*x7557)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r22*x7551))+((cj1*cj2))+(((-1.0)*r21*x7559))+((r20*x7558)));
evalcond[4]=(((cj0*x7554))+((cj0*x7555))+((r02*x7551))+(((-1.0)*r01*x7559))+((x7552*x7553)));
evalcond[5]=(((r10*x7558))+((sj0*x7554))+((sj0*x7555))+((r12*x7551))+(((-1.0)*r11*x7559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7560=cj1*cj1;
IkReal x7561=cj2*cj2;
IkReal x7562=(r00*sj5);
IkReal x7563=((1007.0)*sj1);
IkReal x7564=(cj5*r01);
IkReal x7565=((5088.0)*cj2);
IkReal x7566=(cj5*r11);
IkReal x7567=(cj1*sj2);
IkReal x7568=(r10*sj5);
IkReal x7569=((10600.0)*sj1);
IkReal x7570=((912.0)*x7567);
IkReal x7571=((9600.0)*cj2*sj1);
IkReal x7572=((912.0)*cj2*sj1);
CheckValue<IkReal> x7573 = IKatan2WithCheck(IkReal((((py*x7569))+(((-437.0)*x7564))+(((-437.0)*x7562))+((py*x7571))+((x7566*x7570))+((x7566*x7572))+((x7568*x7572))+((x7568*x7570))+(((9600.0)*py*x7567))+((x7563*x7568))+((x7563*x7566))+(((-4600.0)*px)))),IkReal((((x7562*x7572))+((x7562*x7570))+(((437.0)*x7568))+(((437.0)*x7566))+(((9600.0)*px*x7567))+((x7564*x7570))+((x7564*x7572))+(((4600.0)*py))+((px*x7571))+((x7562*x7563))+((x7563*x7564))+((px*x7569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(IKsign(((3338.0)+(((2304.0)*x7561))+(((-505.0)*x7560))+(((-4608.0)*x7560*x7561))+(((-1.0)*x7560*x7565))+x7565+(((4608.0)*cj2*sj1*x7567))+(((5088.0)*sj1*x7567)))),-1);
if(!x7574.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x7573.value)+(((1.5707963267949)*(x7574.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7575=IKcos(j0);
IkReal x7576=IKsin(j0);
IkReal x7577=((0.095)*sj5);
IkReal x7578=((0.24)*cj2);
IkReal x7579=((0.095)*cj5);
IkReal x7580=(sj1*x7576);
IkReal x7581=(sj1*x7575);
IkReal x7582=((0.24)*cj1*sj2);
evalcond[0]=((((-1.0)*r01*x7579))+((x7578*x7581))+(((0.265)*x7581))+(((-0.115)*x7576))+(((-1.0)*px))+((x7575*x7582))+(((-1.0)*r00*x7577)));
evalcond[1]=(((x7576*x7582))+((x7578*x7580))+(((0.115)*x7575))+(((0.265)*x7580))+(((-1.0)*py))+(((-1.0)*r11*x7579))+(((-1.0)*r10*x7577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x7583=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7583;
j4eval[1]=IKsign(x7583);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7584=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7584;
j4eval[1]=IKsign(x7584);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7585=((1.0)*sj0);
IkReal x7586=((1.0)*cj0);
IkReal x7587=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7587;
j4eval[1]=((IKabs(((((-1.0)*r02*x7586))+(((-1.0)*r12*x7585)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7586))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7585))))));
j4eval[2]=IKsign(x7587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7588=((-1.0)*r20);
IkReal x7590 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7590)==0){
continue;
}
IkReal x7589=pow(x7590,-0.5);
CheckValue<IkReal> x7591 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7588),IKFAST_ATAN2_MAGTHRESH);
if(!x7591.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7591.value));
IkReal gconst1=(r21*x7589);
IkReal gconst2=(x7588*x7589);
CheckValue<IkReal> x7592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7592.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7592.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7593=((-1.0)*r20);
IkReal x7594=x7589;
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7593),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
IkReal x7595=((-1.0)*(x7596.value));
sj5=gconst1;
cj5=gconst2;
j5=x7595;
IkReal gconst0=x7595;
IkReal gconst1=(r21*x7594);
IkReal gconst2=(x7593*x7594);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7597=((-1.0)*r20);
IkReal x7598=x7589;
CheckValue<IkReal> x7600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7597),IKFAST_ATAN2_MAGTHRESH);
if(!x7600.valid){
continue;
}
IkReal x7599=((-1.0)*(x7600.value));
sj5=gconst1;
cj5=gconst2;
j5=x7599;
IkReal gconst0=x7599;
IkReal gconst1=(r21*x7598);
IkReal gconst2=(x7597*x7598);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7601=((-1.0)*r20);
IkReal x7602=x7589;
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7601),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
IkReal x7603=((-1.0)*(x7604.value));
sj5=gconst1;
cj5=gconst2;
j5=x7603;
IkReal gconst0=x7603;
IkReal gconst1=(r21*x7602);
IkReal gconst2=(x7601*x7602);
IkReal x7605=r22*r22;
CheckValue<IkReal> x7609=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7605))),-1);
if(!x7609.valid){
continue;
}
IkReal x7606=x7609.value;
IkReal x7607=(cj3*x7606);
IkReal x7608=(((x7607*(r20*r20*r20*r20)))+((x7607*(r21*r21*r21*r21)))+(((2.0)*x7607*(r20*r20)*(r21*r21)))+((cj3*x7605)));
j4eval[0]=x7608;
j4eval[1]=IKsign(x7608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7610=((-1.0)*r20);
IkReal x7611=x7589;
CheckValue<IkReal> x7613 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7610),IKFAST_ATAN2_MAGTHRESH);
if(!x7613.valid){
continue;
}
IkReal x7612=((-1.0)*(x7613.value));
sj5=gconst1;
cj5=gconst2;
j5=x7612;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7612;
IkReal gconst1=(r21*x7611);
IkReal gconst2=(x7610*x7611);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7614=((-1.0)*r20);
IkReal x7615=x7589;
CheckValue<IkReal> x7617 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7614),IKFAST_ATAN2_MAGTHRESH);
if(!x7617.valid){
continue;
}
IkReal x7616=((-1.0)*(x7617.value));
sj5=gconst1;
cj5=gconst2;
j5=x7616;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7616;
IkReal gconst1=(r21*x7615);
IkReal gconst2=(x7614*x7615);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7618=((-1.0)*r20);
IkReal x7619=x7589;
CheckValue<IkReal> x7621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7618),IKFAST_ATAN2_MAGTHRESH);
if(!x7621.valid){
continue;
}
IkReal x7620=((-1.0)*(x7621.value));
sj5=gconst1;
cj5=gconst2;
j5=x7620;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x7620;
IkReal gconst1=(r21*x7619);
IkReal gconst2=(x7618*x7619);
IkReal x7622=((1.0)*(r22*r22));
CheckValue<IkReal> x7626=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7622))),-1);
if(!x7626.valid){
continue;
}
IkReal x7623=x7626.value;
IkReal x7624=((1.0)*x7623);
IkReal x7625=((((-1.0)*x7624*(r20*r20*r20*r20)))+(((-2.0)*x7623*(r20*r20)*(r21*r21)))+(((-1.0)*x7622))+(((-1.0)*x7624*(r21*r21*r21*r21))));
j4eval[0]=x7625;
j4eval[1]=IKsign(x7625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7627=((-1.0)*r20);
IkReal x7628=x7589;
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7627),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
IkReal x7629=((-1.0)*(x7630.value));
sj5=gconst1;
cj5=gconst2;
j5=x7629;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7629;
IkReal gconst1=(r21*x7628);
IkReal gconst2=(x7627*x7628);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7631=((-1.0)*r20);
IkReal x7632=x7589;
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7631),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal x7633=((-1.0)*(x7634.value));
sj5=gconst1;
cj5=gconst2;
j5=x7633;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7633;
IkReal gconst1=(r21*x7632);
IkReal gconst2=(x7631*x7632);
IkReal x7635=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7639=IKPowWithIntegerCheck(x7635,-1);
if(!x7639.valid){
continue;
}
IkReal x7636=x7639.value;
IkReal x7637=((1.0)*x7636);
IkReal x7638=((((-1.0)*x7637*(r10*r10)*(r20*r20)))+(((-1.0)*x7637*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x7636)));
j4eval[0]=x7638;
j4eval[1]=IKsign(x7638);
j4eval[2]=r12;
j4eval[3]=x7635;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7640=((-1.0)*r20);
IkReal x7641=x7589;
CheckValue<IkReal> x7643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7640),IKFAST_ATAN2_MAGTHRESH);
if(!x7643.valid){
continue;
}
IkReal x7642=((-1.0)*(x7643.value));
sj5=gconst1;
cj5=gconst2;
j5=x7642;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7642;
IkReal gconst1=(r21*x7641);
IkReal gconst2=(x7640*x7641);
IkReal x7644=((1.0)*(r22*r22));
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7644))),-1);
if(!x7648.valid){
continue;
}
IkReal x7645=x7648.value;
IkReal x7646=((1.0)*x7645);
IkReal x7647=((((-2.0)*x7645*(r20*r20)*(r21*r21)))+(((-1.0)*x7646*(r21*r21*r21*r21)))+(((-1.0)*x7644))+(((-1.0)*x7646*(r20*r20*r20*r20))));
j4eval[0]=x7647;
j4eval[1]=IKsign(x7647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7649=(sj1*sj2);
IkReal x7650=(gconst2*r20);
IkReal x7651=(gconst1*r21);
IkReal x7652=((1.0)*cj1*cj2);
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal(((((-1.0)*x7650*x7652))+((cj1*cj2*x7651))+(((-1.0)*x7649*x7651))+((x7649*x7650)))),IkReal((((r22*x7649))+(((-1.0)*r22*x7652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
CheckValue<IkReal> x7654=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7651*x7651)))+(((2.0)*x7650*x7651))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7650*x7650))))),-1);
if(!x7654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7653.value)+(((1.5707963267949)*(x7654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7655=IKcos(j4);
IkReal x7656=IKsin(j4);
IkReal x7657=((1.0)*x7655);
IkReal x7658=(gconst1*x7655);
IkReal x7659=(gconst1*x7656);
IkReal x7660=((1.0)*gconst2*x7656);
evalcond[0]=(((r22*x7656))+((r21*x7658))+(((-1.0)*gconst2*r20*x7657)));
evalcond[1]=(((r02*x7656))+(((-1.0)*gconst2*r00*x7657))+((r01*x7658)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x7657))+((r11*x7658))+((r12*x7656)));
evalcond[3]=(((r11*x7659))+(((-1.0)*r12*x7657))+(((-1.0)*r10*x7660)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x7657))+((cj1*sj2))+(((-1.0)*r00*x7660))+((r01*x7659)));
evalcond[5]=((((-1.0)*r22*x7657))+((r21*x7659))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7660))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7661=(gconst1*r11);
IkReal x7662=(gconst2*r10);
CheckValue<IkReal> x7663=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7662*x7662)))+(((2.0)*x7661*x7662))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7661*x7661))))),-1);
if(!x7663.valid){
continue;
}
CheckValue<IkReal> x7664 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7662))+x7661)),IKFAST_ATAN2_MAGTHRESH);
if(!x7664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7663.value)))+(x7664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7665=IKcos(j4);
IkReal x7666=IKsin(j4);
IkReal x7667=((1.0)*x7665);
IkReal x7668=(gconst1*x7665);
IkReal x7669=(gconst1*x7666);
IkReal x7670=((1.0)*gconst2*x7666);
evalcond[0]=(((r21*x7668))+((r22*x7666))+(((-1.0)*gconst2*r20*x7667)));
evalcond[1]=(((r01*x7668))+(((-1.0)*gconst2*r00*x7667))+((r02*x7666)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x7667))+((r12*x7666))+((r11*x7668)));
evalcond[3]=((((-1.0)*r12*x7667))+((r11*x7669))+(((-1.0)*r10*x7670)));
evalcond[4]=(((cj2*sj1))+((r01*x7669))+(((-1.0)*r00*x7670))+((cj1*sj2))+(((-1.0)*r02*x7667)));
evalcond[5]=(((r21*x7669))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x7667))+(((-1.0)*r20*x7670))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7671.valid){
continue;
}
CheckValue<IkReal> x7672 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7671.value)))+(x7672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7673=IKcos(j4);
IkReal x7674=IKsin(j4);
IkReal x7675=((1.0)*x7673);
IkReal x7676=(gconst1*x7673);
IkReal x7677=(gconst1*x7674);
IkReal x7678=((1.0)*gconst2*x7674);
evalcond[0]=(((r22*x7674))+((r21*x7676))+(((-1.0)*gconst2*r20*x7675)));
evalcond[1]=(((r02*x7674))+(((-1.0)*gconst2*r00*x7675))+((r01*x7676)));
evalcond[2]=((1.0)+((r11*x7676))+((r12*x7674))+(((-1.0)*gconst2*r10*x7675)));
evalcond[3]=(((r11*x7677))+(((-1.0)*r12*x7675))+(((-1.0)*r10*x7678)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r00*x7678))+((cj1*sj2))+(((-1.0)*r02*x7675))+((r01*x7677)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x7677))+(((-1.0)*r20*x7678))+((cj1*cj2))+(((-1.0)*r22*x7675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7679=((-1.0)*r20);
IkReal x7680=x7589;
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7679),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
IkReal x7681=((-1.0)*(x7682.value));
sj5=gconst1;
cj5=gconst2;
j5=x7681;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7681;
IkReal gconst1=(r21*x7680);
IkReal gconst2=(x7679*x7680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7683=((-1.0)*r20);
IkReal x7684=x7589;
CheckValue<IkReal> x7686 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7683),IKFAST_ATAN2_MAGTHRESH);
if(!x7686.valid){
continue;
}
IkReal x7685=((-1.0)*(x7686.value));
sj5=gconst1;
cj5=gconst2;
j5=x7685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7685;
IkReal gconst1=(r21*x7684);
IkReal gconst2=(x7683*x7684);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7687=((-1.0)*r20);
IkReal x7688=x7589;
CheckValue<IkReal> x7690 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7687),IKFAST_ATAN2_MAGTHRESH);
if(!x7690.valid){
continue;
}
IkReal x7689=((-1.0)*(x7690.value));
sj5=gconst1;
cj5=gconst2;
j5=x7689;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7689;
IkReal gconst1=(r21*x7688);
IkReal gconst2=(x7687*x7688);
IkReal x7691=r22*r22;
IkReal x7692=(cj1*sj2);
IkReal x7693=(cj2*sj1);
IkReal x7694=((1.0)+(((-1.0)*x7691)));
CheckValue<IkReal> x7701=IKPowWithIntegerCheck(x7694,-1);
if(!x7701.valid){
continue;
}
IkReal x7695=x7701.value;
CheckValue<IkReal> x7702=IKPowWithIntegerCheck(((-1.0)+x7691),-1);
if(!x7702.valid){
continue;
}
IkReal x7696=x7702.value;
IkReal x7697=((1.0)*x7695);
if((x7694) < -0.00001)
continue;
IkReal x7698=IKsqrt(x7694);
IkReal x7699=((1.0)*r02*r22*x7696*x7698);
IkReal x7700=((((-1.0)*(r02*r02)))+(((-1.0)*x7697*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7695))+(((-1.0)*x7697*(r01*r01)*(r21*r21))));
j4eval[0]=x7700;
j4eval[1]=((IKabs((((r02*x7692))+((r02*x7693)))))+(IKabs(((((-1.0)*x7693*x7699))+(((-1.0)*x7692*x7699))))));
j4eval[2]=IKsign(x7700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7703=(cj2*sj1);
IkReal x7704=(cj1*sj2);
IkReal x7705=(gconst2*r00);
IkReal x7706=((1.0)*gconst1*r01);
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst1*r01*x7705))+(((-1.0)*(r02*r02)))+(((-1.0)*(x7705*x7705)))+(((-1.0)*gconst1*r01*x7706)))),-1);
if(!x7707.valid){
continue;
}
CheckValue<IkReal> x7708 = IKatan2WithCheck(IkReal((((x7703*x7705))+(((-1.0)*x7703*x7706))+(((-1.0)*x7704*x7706))+((x7704*x7705)))),IkReal((((r02*x7703))+((r02*x7704)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7707.value)))+(x7708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7709=IKcos(j4);
IkReal x7710=IKsin(j4);
IkReal x7711=((1.0)*sj1);
IkReal x7712=((1.0)*x7709);
IkReal x7713=(gconst1*x7709);
IkReal x7714=(gconst1*x7710);
IkReal x7715=((1.0)*gconst2*x7710);
evalcond[0]=((((-1.0)*gconst2*r20*x7712))+((r21*x7713))+((r22*x7710)));
evalcond[1]=(((r02*x7710))+(((-1.0)*gconst2*r00*x7712))+((r01*x7713)));
evalcond[2]=((-1.0)+((r11*x7713))+(((-1.0)*gconst2*r10*x7712))+((r12*x7710)));
evalcond[3]=(((r11*x7714))+(((-1.0)*r12*x7712))+(((-1.0)*r10*x7715)));
evalcond[4]=((((-1.0)*r22*x7712))+((r21*x7714))+(((-1.0)*sj2*x7711))+(((-1.0)*r20*x7715))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x7715))+(((-1.0)*cj2*x7711))+(((-1.0)*r02*x7712))+((r01*x7714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7716=(gconst2*r10);
IkReal x7717=(gconst1*r11);
CheckValue<IkReal> x7718 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7716))+x7717)),IKFAST_ATAN2_MAGTHRESH);
if(!x7718.valid){
continue;
}
CheckValue<IkReal> x7719=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7717*x7717)+(((-2.0)*x7716*x7717))+(x7716*x7716))),-1);
if(!x7719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7718.value)+(((1.5707963267949)*(x7719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7720=IKcos(j4);
IkReal x7721=IKsin(j4);
IkReal x7722=((1.0)*sj1);
IkReal x7723=((1.0)*x7720);
IkReal x7724=(gconst1*x7720);
IkReal x7725=(gconst1*x7721);
IkReal x7726=((1.0)*gconst2*x7721);
evalcond[0]=(((r22*x7721))+((r21*x7724))+(((-1.0)*gconst2*r20*x7723)));
evalcond[1]=(((r01*x7724))+(((-1.0)*gconst2*r00*x7723))+((r02*x7721)));
evalcond[2]=((-1.0)+((r12*x7721))+((r11*x7724))+(((-1.0)*gconst2*r10*x7723)));
evalcond[3]=(((r11*x7725))+(((-1.0)*r10*x7726))+(((-1.0)*r12*x7723)));
evalcond[4]=(((r21*x7725))+(((-1.0)*sj2*x7722))+((cj1*cj2))+(((-1.0)*r22*x7723))+(((-1.0)*r20*x7726)));
evalcond[5]=(((r01*x7725))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7723))+(((-1.0)*cj2*x7722))+(((-1.0)*r00*x7726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7727=((1.0)*gconst2);
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7727)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7727))+(((-1.0)*gconst1*r00)))),-1);
if(!x7729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7728.value)+(((1.5707963267949)*(x7729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7730=IKcos(j4);
IkReal x7731=IKsin(j4);
IkReal x7732=((1.0)*sj1);
IkReal x7733=((1.0)*x7730);
IkReal x7734=(gconst1*x7730);
IkReal x7735=(gconst1*x7731);
IkReal x7736=((1.0)*gconst2*x7731);
evalcond[0]=(((r21*x7734))+(((-1.0)*gconst2*r20*x7733))+((r22*x7731)));
evalcond[1]=(((r02*x7731))+(((-1.0)*gconst2*r00*x7733))+((r01*x7734)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x7733))+((r12*x7731))+((r11*x7734)));
evalcond[3]=(((r11*x7735))+(((-1.0)*r12*x7733))+(((-1.0)*r10*x7736)));
evalcond[4]=(((r21*x7735))+(((-1.0)*sj2*x7732))+(((-1.0)*r22*x7733))+(((-1.0)*r20*x7736))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r00*x7736))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x7733))+((r01*x7735))+(((-1.0)*cj2*x7732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7737=((-1.0)*r20);
IkReal x7738=x7589;
CheckValue<IkReal> x7740 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7737),IKFAST_ATAN2_MAGTHRESH);
if(!x7740.valid){
continue;
}
IkReal x7739=((-1.0)*(x7740.value));
sj5=gconst1;
cj5=gconst2;
j5=x7739;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7739;
IkReal gconst1=(r21*x7738);
IkReal gconst2=(x7737*x7738);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7741=((-1.0)*r20);
IkReal x7742=x7589;
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7741),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
IkReal x7743=((-1.0)*(x7744.value));
sj5=gconst1;
cj5=gconst2;
j5=x7743;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7743;
IkReal gconst1=(r21*x7742);
IkReal gconst2=(x7741*x7742);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7745=((-1.0)*r20);
IkReal x7746=x7589;
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7745),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
IkReal x7747=((-1.0)*(x7748.value));
sj5=gconst1;
cj5=gconst2;
j5=x7747;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x7747;
IkReal gconst1=(r21*x7746);
IkReal gconst2=(x7745*x7746);
IkReal x7749=((1.0)*(r22*r22));
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7749))),-1);
if(!x7753.valid){
continue;
}
IkReal x7750=x7753.value;
IkReal x7751=((1.0)*x7750);
IkReal x7752=((((-1.0)*x7751*(r21*r21*r21*r21)))+(((-1.0)*x7749))+(((-1.0)*x7751*(r20*r20*r20*r20)))+(((-2.0)*x7750*(r20*r20)*(r21*r21))));
j4eval[0]=x7752;
j4eval[1]=IKsign(x7752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7754=(sj1*sj2);
IkReal x7755=(gconst2*r20);
IkReal x7756=(gconst1*r21);
IkReal x7757=((1.0)*cj1*cj2);
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(((((-1.0)*x7755*x7757))+((cj1*cj2*x7756))+(((-1.0)*x7754*x7756))+((x7754*x7755)))),IkReal(((((-1.0)*r22*x7757))+((r22*x7754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
CheckValue<IkReal> x7759=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7756*x7756)))+(((2.0)*x7755*x7756))+(((-1.0)*(x7755*x7755)))+(((-1.0)*(r22*r22))))),-1);
if(!x7759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7758.value)+(((1.5707963267949)*(x7759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7760=IKcos(j4);
IkReal x7761=IKsin(j4);
IkReal x7762=((1.0)*x7760);
IkReal x7763=(gconst1*x7760);
IkReal x7764=(gconst1*x7761);
IkReal x7765=((1.0)*gconst2*x7761);
evalcond[0]=(((r22*x7761))+((r21*x7763))+(((-1.0)*gconst2*r20*x7762)));
evalcond[1]=((((-1.0)*gconst2*r10*x7762))+((r12*x7761))+((r11*x7763)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x7762))+((r02*x7761))+((r01*x7763)));
evalcond[3]=((((-1.0)*r02*x7762))+(((-1.0)*r00*x7765))+((r01*x7764)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r10*x7765))+((cj1*sj2))+(((-1.0)*r12*x7762))+((r11*x7764)));
evalcond[5]=((((-1.0)*r22*x7762))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7765))+((cj1*cj2))+((r21*x7764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7766=(gconst1*r01);
IkReal x7767=(gconst2*r00);
CheckValue<IkReal> x7768=IKPowWithIntegerCheck(IKsign(((x7767*x7767)+(x7766*x7766)+(((-2.0)*x7766*x7767))+(r02*r02))),-1);
if(!x7768.valid){
continue;
}
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7767))+x7766)),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7768.value)))+(x7769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7770=IKcos(j4);
IkReal x7771=IKsin(j4);
IkReal x7772=((1.0)*x7770);
IkReal x7773=(gconst1*x7770);
IkReal x7774=(gconst1*x7771);
IkReal x7775=((1.0)*gconst2*x7771);
evalcond[0]=(((r22*x7771))+((r21*x7773))+(((-1.0)*gconst2*r20*x7772)));
evalcond[1]=(((r11*x7773))+((r12*x7771))+(((-1.0)*gconst2*r10*x7772)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x7772))+((r02*x7771))+((r01*x7773)));
evalcond[3]=((((-1.0)*r02*x7772))+(((-1.0)*r00*x7775))+((r01*x7774)));
evalcond[4]=(((r11*x7774))+((cj2*sj1))+(((-1.0)*r10*x7775))+((cj1*sj2))+(((-1.0)*r12*x7772)));
evalcond[5]=((((-1.0)*r22*x7772))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x7774))+(((-1.0)*r20*x7775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7776 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7776.valid){
continue;
}
CheckValue<IkReal> x7777=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7776.value)+(((1.5707963267949)*(x7777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7778=IKcos(j4);
IkReal x7779=IKsin(j4);
IkReal x7780=((1.0)*x7778);
IkReal x7781=(gconst1*x7778);
IkReal x7782=(gconst1*x7779);
IkReal x7783=((1.0)*gconst2*x7779);
evalcond[0]=(((r22*x7779))+(((-1.0)*gconst2*r20*x7780))+((r21*x7781)));
evalcond[1]=(((r11*x7781))+(((-1.0)*gconst2*r10*x7780))+((r12*x7779)));
evalcond[2]=((-1.0)+((r01*x7781))+((r02*x7779))+(((-1.0)*gconst2*r00*x7780)));
evalcond[3]=((((-1.0)*r00*x7783))+((r01*x7782))+(((-1.0)*r02*x7780)));
evalcond[4]=((((-1.0)*r10*x7783))+((cj2*sj1))+((cj1*sj2))+((r11*x7782))+(((-1.0)*r12*x7780)));
evalcond[5]=((((-1.0)*r20*x7783))+(((-1.0)*sj1*sj2))+((r21*x7782))+(((-1.0)*r22*x7780))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7784=((-1.0)*r20);
IkReal x7785=x7589;
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7784),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
IkReal x7786=((-1.0)*(x7787.value));
sj5=gconst1;
cj5=gconst2;
j5=x7786;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7786;
IkReal gconst1=(r21*x7785);
IkReal gconst2=(x7784*x7785);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7788=((-1.0)*r20);
IkReal x7789=x7589;
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7788),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal x7790=((-1.0)*(x7791.value));
sj5=gconst1;
cj5=gconst2;
j5=x7790;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7790;
IkReal gconst1=(r21*x7789);
IkReal gconst2=(x7788*x7789);
IkReal x7792=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7796=IKPowWithIntegerCheck(x7792,-1);
if(!x7796.valid){
continue;
}
IkReal x7793=x7796.value;
IkReal x7794=((1.0)*x7793);
IkReal x7795=((((-1.0)*x7794*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7794*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7793)));
j4eval[0]=x7795;
j4eval[1]=IKsign(x7795);
j4eval[2]=r02;
j4eval[3]=x7792;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7797=((-1.0)*r20);
IkReal x7798=x7589;
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7797),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
IkReal x7799=((-1.0)*(x7800.value));
sj5=gconst1;
cj5=gconst2;
j5=x7799;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x7799;
IkReal gconst1=(r21*x7798);
IkReal gconst2=(x7797*x7798);
IkReal x7801=r22*r22;
IkReal x7802=((1.0)+(((-1.0)*x7801)));
IkReal x7803=(cj2*r12*sj1);
IkReal x7804=(cj1*r12*sj2);
CheckValue<IkReal> x7811=IKPowWithIntegerCheck(x7802,-1);
if(!x7811.valid){
continue;
}
IkReal x7805=x7811.value;
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(((-1.0)+x7801),-1);
if(!x7812.valid){
continue;
}
IkReal x7806=x7812.value;
IkReal x7807=((1.0)*x7805);
if((x7802) < -0.00001)
continue;
IkReal x7808=IKsqrt(x7802);
IkReal x7809=((1.0)*r22*x7806*x7808);
IkReal x7810=((((-2.0)*r10*r11*r20*r21*x7805))+(((-1.0)*x7807*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7807*(r10*r10)*(r20*r20))));
j4eval[0]=x7810;
j4eval[1]=IKsign(x7810);
j4eval[2]=((IKabs((x7803+x7804)))+(IKabs(((((-1.0)*x7803*x7809))+(((-1.0)*x7804*x7809))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7813=(cj2*sj1);
IkReal x7814=(gconst2*r10);
IkReal x7815=(cj1*sj2);
IkReal x7816=((1.0)*gconst1*r11);
CheckValue<IkReal> x7817=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst1*r11*x7814))+(((-1.0)*(r12*r12)))+(((-1.0)*gconst1*r11*x7816))+(((-1.0)*(x7814*x7814))))),-1);
if(!x7817.valid){
continue;
}
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal((((x7813*x7814))+((x7814*x7815))+(((-1.0)*x7813*x7816))+(((-1.0)*x7815*x7816)))),IkReal((((r12*x7813))+((r12*x7815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7817.value)))+(x7818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7819=IKcos(j4);
IkReal x7820=IKsin(j4);
IkReal x7821=((1.0)*sj1);
IkReal x7822=((1.0)*x7819);
IkReal x7823=(gconst1*x7819);
IkReal x7824=(gconst1*x7820);
IkReal x7825=((1.0)*gconst2*x7820);
evalcond[0]=(((r21*x7823))+(((-1.0)*gconst2*r20*x7822))+((r22*x7820)));
evalcond[1]=(((r12*x7820))+((r11*x7823))+(((-1.0)*gconst2*r10*x7822)));
evalcond[2]=((1.0)+((r02*x7820))+((r01*x7823))+(((-1.0)*gconst2*r00*x7822)));
evalcond[3]=((((-1.0)*r00*x7825))+(((-1.0)*r02*x7822))+((r01*x7824)));
evalcond[4]=((((-1.0)*r20*x7825))+(((-1.0)*sj2*x7821))+((r21*x7824))+(((-1.0)*r22*x7822))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x7821))+((r11*x7824))+(((-1.0)*cj1*sj2))+(((-1.0)*r10*x7825))+(((-1.0)*r12*x7822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7826=(gconst1*r01);
IkReal x7827=(gconst2*r00);
CheckValue<IkReal> x7828 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7827))+x7826)),IKFAST_ATAN2_MAGTHRESH);
if(!x7828.valid){
continue;
}
CheckValue<IkReal> x7829=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7827*x7827)))+(((-1.0)*(r02*r02)))+(((2.0)*x7826*x7827))+(((-1.0)*(x7826*x7826))))),-1);
if(!x7829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7828.value)+(((1.5707963267949)*(x7829.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7830=IKcos(j4);
IkReal x7831=IKsin(j4);
IkReal x7832=((1.0)*sj1);
IkReal x7833=((1.0)*x7830);
IkReal x7834=(gconst1*x7830);
IkReal x7835=(gconst1*x7831);
IkReal x7836=((1.0)*gconst2*x7831);
evalcond[0]=(((r21*x7834))+(((-1.0)*gconst2*r20*x7833))+((r22*x7831)));
evalcond[1]=(((r12*x7831))+(((-1.0)*gconst2*r10*x7833))+((r11*x7834)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x7833))+((r01*x7834))+((r02*x7831)));
evalcond[3]=((((-1.0)*r02*x7833))+(((-1.0)*r00*x7836))+((r01*x7835)));
evalcond[4]=(((r21*x7835))+(((-1.0)*r22*x7833))+(((-1.0)*r20*x7836))+((cj1*cj2))+(((-1.0)*sj2*x7832)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x7833))+(((-1.0)*cj2*x7832))+(((-1.0)*r10*x7836))+((r11*x7835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7837=((1.0)*gconst2);
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7837)))),-1);
if(!x7838.valid){
continue;
}
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x7837))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7838.value)))+(x7839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7840=IKcos(j4);
IkReal x7841=IKsin(j4);
IkReal x7842=((1.0)*sj1);
IkReal x7843=((1.0)*x7840);
IkReal x7844=(gconst1*x7840);
IkReal x7845=(gconst1*x7841);
IkReal x7846=((1.0)*gconst2*x7841);
evalcond[0]=(((r21*x7844))+(((-1.0)*gconst2*r20*x7843))+((r22*x7841)));
evalcond[1]=(((r12*x7841))+((r11*x7844))+(((-1.0)*gconst2*r10*x7843)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x7843))+((r01*x7844))+((r02*x7841)));
evalcond[3]=((((-1.0)*r00*x7846))+(((-1.0)*r02*x7843))+((r01*x7845)));
evalcond[4]=(((r21*x7845))+(((-1.0)*r22*x7843))+(((-1.0)*r20*x7846))+((cj1*cj2))+(((-1.0)*sj2*x7842)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x7843))+(((-1.0)*cj2*x7842))+(((-1.0)*r10*x7846))+((r11*x7845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7847=((-1.0)*r20);
IkReal x7848=((-1.0)*px);
CheckValue<IkReal> x7850 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7847),IKFAST_ATAN2_MAGTHRESH);
if(!x7850.valid){
continue;
}
IkReal x7849=((-1.0)*(x7850.value));
sj5=gconst1;
cj5=gconst2;
j5=x7849;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7848);
rxp1_1=(px*r21);
rxp1_2=(r11*x7848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7849;
IkReal gconst1=r21;
IkReal gconst2=x7847;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7851=((-1.0)*r20);
IkReal x7852=((-1.0)*px);
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7851),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
IkReal x7853=((-1.0)*(x7854.value));
sj5=gconst1;
cj5=gconst2;
j5=x7853;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7852);
rxp1_1=(px*r21);
rxp1_2=(r11*x7852);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7853;
IkReal gconst1=r21;
IkReal gconst2=x7851;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7855=((-1.0)*r20);
IkReal x7856=((-1.0)*px);
CheckValue<IkReal> x7858 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7855),IKFAST_ATAN2_MAGTHRESH);
if(!x7858.valid){
continue;
}
IkReal x7857=((-1.0)*(x7858.value));
sj5=gconst1;
cj5=gconst2;
j5=x7857;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7856);
rxp1_1=(px*r21);
rxp1_2=(r11*x7856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7857;
IkReal gconst1=r21;
IkReal gconst2=x7855;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7861=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x7861.valid){
continue;
}
IkReal x7859=x7861.value;
IkReal x7860=((1.0)*sj0*x7859);
sj4array[0]=((((-1.0)*cj1*sj2*x7860))+(((-1.0)*cj2*sj1*x7860)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7862=IKcos(j4);
IkReal x7863=IKsin(j4);
IkReal x7864=(gconst1*r21);
IkReal x7865=((1.0)*gconst2*x7862);
evalcond[0]=((-1.0)*r02*x7862);
evalcond[1]=((((-1.0)*sj0))+((r02*x7863)));
evalcond[2]=(((x7862*x7864))+(((-1.0)*r20*x7865)));
evalcond[3]=(((gconst1*r11*x7862))+(((-1.0)*r10*x7865)));
evalcond[4]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x7863*x7864))+(((-1.0)*gconst2*r20*x7863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7867.valid){
continue;
}
IkReal x7866=x7867.value;
sj4array[0]=(((sj1*sj2*x7866))+(((-1.0)*cj1*cj2*x7866)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7868=IKcos(j4);
IkReal x7869=IKsin(j4);
IkReal x7870=((1.0)*gconst2*r10);
IkReal x7871=(gconst1*x7868);
evalcond[0]=((-1.0)*r02*x7868);
evalcond[1]=((((-1.0)*sj0))+((r02*x7869)));
evalcond[2]=(((r21*x7871))+(((-1.0)*gconst2*r20*x7868)));
evalcond[3]=(((r11*x7871))+(((-1.0)*x7868*x7870)));
evalcond[4]=(((gconst1*r11*x7869))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*x7869*x7870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7872=IKPowWithIntegerCheck(r02,-1);
if(!x7872.valid){
continue;
}
sj4array[0]=(sj0*(x7872.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7873=IKcos(j4);
IkReal x7874=IKsin(j4);
IkReal x7875=(gconst1*r21);
IkReal x7876=(gconst1*r11);
IkReal x7877=((1.0)*gconst2*r10);
IkReal x7878=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x7873);
evalcond[1]=((((-1.0)*x7873*x7878))+((x7873*x7875)));
evalcond[2]=((((-1.0)*x7873*x7877))+((x7873*x7876)));
evalcond[3]=((((-1.0)*x7874*x7878))+((x7874*x7875))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x7874*x7877))+((x7874*x7876))+((cj1*sj0*sj2))+((cj2*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7879=(sj1*sj2);
IkReal x7880=(gconst2*r20);
IkReal x7881=(gconst1*r21);
IkReal x7882=((1.0)*cj1*cj2);
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(((((-1.0)*x7880*x7882))+(((-1.0)*x7879*x7881))+((cj1*cj2*x7881))+((x7879*x7880)))),IkReal(((((-1.0)*r22*x7882))+((r22*x7879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884=IKPowWithIntegerCheck(IKsign(((((2.0)*x7880*x7881))+(((-1.0)*(x7881*x7881)))+(((-1.0)*(x7880*x7880)))+(((-1.0)*(r22*r22))))),-1);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7883.value)+(((1.5707963267949)*(x7884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKcos(j4);
IkReal x7886=IKsin(j4);
IkReal x7887=(cj2*sj1);
IkReal x7888=(cj1*sj2);
IkReal x7889=((1.0)*x7885);
IkReal x7890=(gconst1*x7885);
IkReal x7891=(gconst1*x7886);
IkReal x7892=((1.0)*gconst2*x7886);
evalcond[0]=(((r21*x7890))+(((-1.0)*gconst2*r20*x7889))+((r22*x7886)));
evalcond[1]=(cj0+((r12*x7886))+(((-1.0)*gconst2*r10*x7889))+((r11*x7890)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x7889))+((r01*x7890))+((r02*x7886)));
evalcond[3]=(((r21*x7891))+(((-1.0)*r22*x7889))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7892))+((cj1*cj2)));
evalcond[4]=(((cj0*x7888))+((cj0*x7887))+(((-1.0)*r02*x7889))+((r01*x7891))+(((-1.0)*r00*x7892)));
evalcond[5]=(((sj0*x7887))+((sj0*x7888))+(((-1.0)*r12*x7889))+(((-1.0)*r10*x7892))+((r11*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7893 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x7893.valid){
continue;
}
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7893.value)+(((1.5707963267949)*(x7894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7895=IKcos(j4);
IkReal x7896=IKsin(j4);
IkReal x7897=(cj2*sj1);
IkReal x7898=(cj1*sj2);
IkReal x7899=((1.0)*x7895);
IkReal x7900=(gconst1*x7895);
IkReal x7901=(gconst1*x7896);
IkReal x7902=((1.0)*gconst2*x7896);
evalcond[0]=(((r21*x7900))+((r22*x7896))+(((-1.0)*gconst2*r20*x7899)));
evalcond[1]=((((-1.0)*gconst2*r10*x7899))+cj0+((r12*x7896))+((r11*x7900)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst2*r00*x7899))+((r02*x7896))+((r01*x7900)));
evalcond[3]=((((-1.0)*sj1*sj2))+((r21*x7901))+(((-1.0)*r20*x7902))+(((-1.0)*r22*x7899))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r00*x7902))+((cj0*x7898))+((cj0*x7897))+((r01*x7901))+(((-1.0)*r02*x7899)));
evalcond[5]=((((-1.0)*r12*x7899))+((r11*x7901))+(((-1.0)*r10*x7902))+((sj0*x7897))+((sj0*x7898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7903=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7903.valid){
continue;
}
CheckValue<IkReal> x7904 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7903.value)))+(x7904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7905=IKcos(j4);
IkReal x7906=IKsin(j4);
IkReal x7907=(cj2*sj1);
IkReal x7908=(cj1*sj2);
IkReal x7909=((1.0)*x7905);
IkReal x7910=(gconst1*x7905);
IkReal x7911=(gconst1*x7906);
IkReal x7912=((1.0)*gconst2*x7906);
evalcond[0]=(((r21*x7910))+(((-1.0)*gconst2*r20*x7909))+((r22*x7906)));
evalcond[1]=(cj0+((r11*x7910))+(((-1.0)*gconst2*r10*x7909))+((r12*x7906)));
evalcond[2]=(((r02*x7906))+(((-1.0)*sj0))+((r01*x7910))+(((-1.0)*gconst2*r00*x7909)));
evalcond[3]=(((r21*x7911))+(((-1.0)*sj1*sj2))+(((-1.0)*r20*x7912))+(((-1.0)*r22*x7909))+((cj1*cj2)));
evalcond[4]=(((r01*x7911))+((cj0*x7908))+((cj0*x7907))+(((-1.0)*r00*x7912))+(((-1.0)*r02*x7909)));
evalcond[5]=((((-1.0)*r12*x7909))+((sj0*x7908))+((sj0*x7907))+((r11*x7911))+(((-1.0)*r10*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7913=((-1.0)*r20);
IkReal x7914=x7589;
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7913),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
IkReal x7915=((-1.0)*(x7916.value));
sj5=gconst1;
cj5=gconst2;
j5=x7915;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7915;
IkReal gconst1=(r21*x7914);
IkReal gconst2=(x7913*x7914);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7917=((-1.0)*r20);
IkReal x7918=x7589;
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7917),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
IkReal x7919=((-1.0)*(x7920.value));
sj5=gconst1;
cj5=gconst2;
j5=x7919;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7919;
IkReal gconst1=(r21*x7918);
IkReal gconst2=(x7917*x7918);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7921=((-1.0)*r20);
IkReal x7922=x7589;
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7921),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
IkReal x7923=((-1.0)*(x7924.value));
sj5=gconst1;
cj5=gconst2;
j5=x7923;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x7923;
IkReal gconst1=(r21*x7922);
IkReal gconst2=(x7921*x7922);
IkReal x7925=r22*r22;
CheckValue<IkReal> x7928=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7925))),-1);
if(!x7928.valid){
continue;
}
IkReal x7926=x7928.value;
IkReal x7927=(((x7926*(r21*r21*r21*r21)))+x7925+((x7926*(r20*r20*r20*r20)))+(((2.0)*x7926*(r20*r20)*(r21*r21))));
j4eval[0]=x7927;
j4eval[1]=IKsign(x7927);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7929=((-1.0)*r20);
IkReal x7930=x7589;
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7929),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
IkReal x7931=((-1.0)*(x7932.value));
sj5=gconst1;
cj5=gconst2;
j5=x7931;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7931;
IkReal gconst1=(r21*x7930);
IkReal gconst2=(x7929*x7930);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x7933=((-1.0)*r20);
IkReal x7934=x7589;
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7933),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
IkReal x7935=((-1.0)*(x7936.value));
sj5=gconst1;
cj5=gconst2;
j5=x7935;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7935;
IkReal gconst1=(r21*x7934);
IkReal gconst2=(x7933*x7934);
IkReal x7937=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(x7937,-1);
if(!x7941.valid){
continue;
}
IkReal x7938=x7941.value;
IkReal x7939=((1.0)*x7938);
IkReal x7940=((((-1.0)*x7939*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7939*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7938)));
j4eval[0]=x7940;
j4eval[1]=IKsign(x7940);
j4eval[2]=r12;
j4eval[3]=x7937;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7942=((-1.0)*r20);
IkReal x7943=x7589;
CheckValue<IkReal> x7945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7942),IKFAST_ATAN2_MAGTHRESH);
if(!x7945.valid){
continue;
}
IkReal x7944=((-1.0)*(x7945.value));
sj5=gconst1;
cj5=gconst2;
j5=x7944;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x7944;
IkReal gconst1=(r21*x7943);
IkReal gconst2=(x7942*x7943);
IkReal x7946=r22*r22;
CheckValue<IkReal> x7949=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7946))),-1);
if(!x7949.valid){
continue;
}
IkReal x7947=x7949.value;
IkReal x7948=(((x7947*(r21*r21*r21*r21)))+x7946+(((2.0)*x7947*(r20*r20)*(r21*r21)))+((x7947*(r20*r20*r20*r20))));
j4eval[0]=x7948;
j4eval[1]=IKsign(x7948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=(sj1*sj2);
IkReal x7951=(gconst2*r20);
IkReal x7952=(cj1*cj2);
IkReal x7953=(gconst1*r21);
CheckValue<IkReal> x7954=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7953*x7953)+(x7951*x7951)+(((-2.0)*x7951*x7953)))),-1);
if(!x7954.valid){
continue;
}
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(((((-1.0)*x7951*x7952))+((x7950*x7951))+(((-1.0)*x7950*x7953))+((x7952*x7953)))),IkReal((((r22*x7950))+(((-1.0)*r22*x7952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7954.value)))+(x7955.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7956=IKcos(j4);
IkReal x7957=IKsin(j4);
IkReal x7958=(gconst1*x7956);
IkReal x7959=(gconst2*x7957);
IkReal x7960=((1.0)*gconst1*x7957);
IkReal x7961=((1.0)*gconst2*x7956);
evalcond[0]=(((r22*x7957))+((r21*x7958))+(((-1.0)*r20*x7961)));
evalcond[1]=(((r01*x7958))+((r02*x7957))+(((-1.0)*r00*x7961)));
evalcond[2]=(((r12*x7956))+(((-1.0)*r11*x7960))+((r10*x7959)));
evalcond[3]=((1.0)+((r12*x7957))+((r11*x7958))+(((-1.0)*r10*x7961)));
evalcond[4]=(((cj2*sj1))+((r00*x7959))+((cj1*sj2))+((r02*x7956))+(((-1.0)*r01*x7960)));
evalcond[5]=(((r22*x7956))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x7959))+(((-1.0)*r21*x7960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7962=(gconst1*r11);
IkReal x7963=(gconst2*r10);
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7962*x7962)))+(((2.0)*x7962*x7963))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7963*x7963))))),-1);
if(!x7964.valid){
continue;
}
CheckValue<IkReal> x7965 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7963))+x7962)),IKFAST_ATAN2_MAGTHRESH);
if(!x7965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7964.value)))+(x7965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7966=IKcos(j4);
IkReal x7967=IKsin(j4);
IkReal x7968=(gconst1*x7966);
IkReal x7969=(gconst2*x7967);
IkReal x7970=((1.0)*gconst1*x7967);
IkReal x7971=((1.0)*gconst2*x7966);
evalcond[0]=(((r21*x7968))+((r22*x7967))+(((-1.0)*r20*x7971)));
evalcond[1]=(((r01*x7968))+((r02*x7967))+(((-1.0)*r00*x7971)));
evalcond[2]=(((r12*x7966))+(((-1.0)*r11*x7970))+((r10*x7969)));
evalcond[3]=((1.0)+((r11*x7968))+((r12*x7967))+(((-1.0)*r10*x7971)));
evalcond[4]=(((cj2*sj1))+((r00*x7969))+((cj1*sj2))+((r02*x7966))+(((-1.0)*r01*x7970)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7969))+((cj1*cj2))+(((-1.0)*r21*x7970))+((r22*x7966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7972=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7972.valid){
continue;
}
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7972.value)))+(x7973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7974=IKcos(j4);
IkReal x7975=IKsin(j4);
IkReal x7976=(gconst1*x7974);
IkReal x7977=(gconst2*x7975);
IkReal x7978=((1.0)*gconst1*x7975);
IkReal x7979=((1.0)*gconst2*x7974);
evalcond[0]=((((-1.0)*r20*x7979))+((r22*x7975))+((r21*x7976)));
evalcond[1]=(((r01*x7976))+((r02*x7975))+(((-1.0)*r00*x7979)));
evalcond[2]=(((r12*x7974))+(((-1.0)*r11*x7978))+((r10*x7977)));
evalcond[3]=((1.0)+((r11*x7976))+((r12*x7975))+(((-1.0)*r10*x7979)));
evalcond[4]=(((cj2*sj1))+((r00*x7977))+((cj1*sj2))+((r02*x7974))+(((-1.0)*r01*x7978)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x7977))+((cj1*cj2))+(((-1.0)*r21*x7978))+((r22*x7974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7980=((-1.0)*r20);
IkReal x7981=x7589;
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7980),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
IkReal x7982=((-1.0)*(x7983.value));
sj5=gconst1;
cj5=gconst2;
j5=x7982;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7982;
IkReal gconst1=(r21*x7981);
IkReal gconst2=(x7980*x7981);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7984=((-1.0)*r20);
IkReal x7985=x7589;
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7984),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
IkReal x7986=((-1.0)*(x7987.value));
sj5=gconst1;
cj5=gconst2;
j5=x7986;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7986;
IkReal gconst1=(r21*x7985);
IkReal gconst2=(x7984*x7985);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7988=((-1.0)*r20);
IkReal x7989=x7589;
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7988),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
IkReal x7990=((-1.0)*(x7991.value));
sj5=gconst1;
cj5=gconst2;
j5=x7990;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x7990;
IkReal gconst1=(r21*x7989);
IkReal gconst2=(x7988*x7989);
IkReal x7992=r22*r22;
IkReal x7993=(cj1*cj2*r12);
CheckValue<IkReal> x7998=IKPowWithIntegerCheck(((-1.0)+x7992),-1);
if(!x7998.valid){
continue;
}
IkReal x7994=x7998.value;
IkReal x7995=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x7992)))) < -0.00001)
continue;
IkReal x7996=IKsqrt(((1.0)+(((-1.0)*x7992))));
IkReal x7997=(r22*x7994*x7996);
j4eval[0]=((IKabs((x7993+(((-1.0)*x7995)))))+(IKabs(((((-1.0)*x7995*x7997))+((x7993*x7997))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7999=(cj1*cj2);
IkReal x8000=(gconst2*r10);
IkReal x8001=(gconst1*r11);
IkReal x8002=((1.0)*sj1*sj2);
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8002))+((r12*x7999)))),IkReal(((((-1.0)*x7999*x8000))+((sj1*sj2*x8000))+((x7999*x8001))+(((-1.0)*x8001*x8002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
CheckValue<IkReal> x8004=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8003.value)+(((1.5707963267949)*(x8004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8005=IKcos(j4);
IkReal x8006=IKsin(j4);
IkReal x8007=((1.0)*sj1);
IkReal x8008=(gconst1*x8005);
IkReal x8009=(gconst2*x8006);
IkReal x8010=((1.0)*gconst1*x8006);
IkReal x8011=((1.0)*gconst2*x8005);
evalcond[0]=(((r21*x8008))+(((-1.0)*r20*x8011))+((r22*x8006)));
evalcond[1]=(((r01*x8008))+(((-1.0)*r00*x8011))+((r02*x8006)));
evalcond[2]=(((r12*x8005))+(((-1.0)*r11*x8010))+((r10*x8009)));
evalcond[3]=((-1.0)+((r11*x8008))+((r12*x8006))+(((-1.0)*r10*x8011)));
evalcond[4]=(((r20*x8009))+(((-1.0)*r21*x8010))+(((-1.0)*sj2*x8007))+((cj1*cj2))+((r22*x8005)));
evalcond[5]=((((-1.0)*r01*x8010))+((r00*x8009))+((r02*x8005))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8012=(gconst2*r10);
IkReal x8013=(gconst1*r11);
CheckValue<IkReal> x8014=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8012*x8013))+(r12*r12)+(x8012*x8012)+(x8013*x8013))),-1);
if(!x8014.valid){
continue;
}
CheckValue<IkReal> x8015 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8012))+x8013)),IKFAST_ATAN2_MAGTHRESH);
if(!x8015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8014.value)))+(x8015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8016=IKcos(j4);
IkReal x8017=IKsin(j4);
IkReal x8018=((1.0)*sj1);
IkReal x8019=(gconst1*x8016);
IkReal x8020=(gconst2*x8017);
IkReal x8021=((1.0)*gconst1*x8017);
IkReal x8022=((1.0)*gconst2*x8016);
evalcond[0]=((((-1.0)*r20*x8022))+((r22*x8017))+((r21*x8019)));
evalcond[1]=(((r02*x8017))+((r01*x8019))+(((-1.0)*r00*x8022)));
evalcond[2]=(((r10*x8020))+(((-1.0)*r11*x8021))+((r12*x8016)));
evalcond[3]=((-1.0)+((r12*x8017))+((r11*x8019))+(((-1.0)*r10*x8022)));
evalcond[4]=((((-1.0)*r21*x8021))+((r20*x8020))+((r22*x8016))+((cj1*cj2))+(((-1.0)*sj2*x8018)));
evalcond[5]=(((r02*x8016))+(((-1.0)*cj1*sj2))+((r00*x8020))+(((-1.0)*r01*x8021))+(((-1.0)*cj2*x8018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8023=((1.0)*gconst2);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8023))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
CheckValue<IkReal> x8025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8023)))),-1);
if(!x8025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8024.value)+(((1.5707963267949)*(x8025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8026=IKcos(j4);
IkReal x8027=IKsin(j4);
IkReal x8028=((1.0)*sj1);
IkReal x8029=(gconst1*x8026);
IkReal x8030=(gconst2*x8027);
IkReal x8031=((1.0)*gconst1*x8027);
IkReal x8032=((1.0)*gconst2*x8026);
evalcond[0]=((((-1.0)*r20*x8032))+((r21*x8029))+((r22*x8027)));
evalcond[1]=(((r02*x8027))+(((-1.0)*r00*x8032))+((r01*x8029)));
evalcond[2]=((((-1.0)*r11*x8031))+((r10*x8030))+((r12*x8026)));
evalcond[3]=((-1.0)+((r12*x8027))+(((-1.0)*r10*x8032))+((r11*x8029)));
evalcond[4]=((((-1.0)*r21*x8031))+((r20*x8030))+((cj1*cj2))+((r22*x8026))+(((-1.0)*sj2*x8028)));
evalcond[5]=((((-1.0)*cj2*x8028))+(((-1.0)*cj1*sj2))+((r02*x8026))+(((-1.0)*r01*x8031))+((r00*x8030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8033=((-1.0)*r20);
IkReal x8034=x7589;
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8033),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
IkReal x8035=((-1.0)*(x8036.value));
sj5=gconst1;
cj5=gconst2;
j5=x8035;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8035;
IkReal gconst1=(r21*x8034);
IkReal gconst2=(x8033*x8034);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8037=((-1.0)*r20);
IkReal x8038=x7589;
CheckValue<IkReal> x8040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8037),IKFAST_ATAN2_MAGTHRESH);
if(!x8040.valid){
continue;
}
IkReal x8039=((-1.0)*(x8040.value));
sj5=gconst1;
cj5=gconst2;
j5=x8039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8039;
IkReal gconst1=(r21*x8038);
IkReal gconst2=(x8037*x8038);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8041=((-1.0)*r20);
IkReal x8042=x7589;
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8041),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
IkReal x8043=((-1.0)*(x8044.value));
sj5=gconst1;
cj5=gconst2;
j5=x8043;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8043;
IkReal gconst1=(r21*x8042);
IkReal gconst2=(x8041*x8042);
IkReal x8045=r22*r22;
CheckValue<IkReal> x8048=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8045))),-1);
if(!x8048.valid){
continue;
}
IkReal x8046=x8048.value;
IkReal x8047=((((2.0)*x8046*(r20*r20)*(r21*r21)))+((x8046*(r20*r20*r20*r20)))+((x8046*(r21*r21*r21*r21)))+x8045);
j4eval[0]=x8047;
j4eval[1]=IKsign(x8047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8049=(sj1*sj2);
IkReal x8050=(gconst2*r20);
IkReal x8051=(cj1*cj2);
IkReal x8052=(gconst1*r21);
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(((((-1.0)*x8049*x8052))+((x8051*x8052))+((x8049*x8050))+(((-1.0)*x8050*x8051)))),IkReal((((r22*x8049))+(((-1.0)*r22*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8052*x8052)+(((-2.0)*x8050*x8052))+(x8050*x8050))),-1);
if(!x8054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8053.value)+(((1.5707963267949)*(x8054.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8055=IKcos(j4);
IkReal x8056=IKsin(j4);
IkReal x8057=(gconst1*x8055);
IkReal x8058=(gconst2*x8056);
IkReal x8059=((1.0)*gconst1*x8056);
IkReal x8060=((1.0)*gconst2*x8055);
evalcond[0]=(((r21*x8057))+(((-1.0)*r20*x8060))+((r22*x8056)));
evalcond[1]=((((-1.0)*r10*x8060))+((r11*x8057))+((r12*x8056)));
evalcond[2]=(((r00*x8058))+((r02*x8055))+(((-1.0)*r01*x8059)));
evalcond[3]=((-1.0)+((r02*x8056))+(((-1.0)*r00*x8060))+((r01*x8057)));
evalcond[4]=(((cj2*sj1))+((r10*x8058))+((cj1*sj2))+((r12*x8055))+(((-1.0)*r11*x8059)));
evalcond[5]=(((r20*x8058))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8059))+((cj1*cj2))+((r22*x8055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8061=(gconst1*r01);
IkReal x8062=(gconst2*r00);
CheckValue<IkReal> x8063=IKPowWithIntegerCheck(IKsign(((x8061*x8061)+(((-2.0)*x8061*x8062))+(r02*r02)+(x8062*x8062))),-1);
if(!x8063.valid){
continue;
}
CheckValue<IkReal> x8064 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8062))+x8061)),IKFAST_ATAN2_MAGTHRESH);
if(!x8064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8063.value)))+(x8064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8065=IKcos(j4);
IkReal x8066=IKsin(j4);
IkReal x8067=(gconst1*x8065);
IkReal x8068=(gconst2*x8066);
IkReal x8069=((1.0)*gconst1*x8066);
IkReal x8070=((1.0)*gconst2*x8065);
evalcond[0]=(((r21*x8067))+((r22*x8066))+(((-1.0)*r20*x8070)));
evalcond[1]=(((r11*x8067))+(((-1.0)*r10*x8070))+((r12*x8066)));
evalcond[2]=(((r00*x8068))+((r02*x8065))+(((-1.0)*r01*x8069)));
evalcond[3]=((-1.0)+((r01*x8067))+(((-1.0)*r00*x8070))+((r02*x8066)));
evalcond[4]=(((cj2*sj1))+((r10*x8068))+((cj1*sj2))+(((-1.0)*r11*x8069))+((r12*x8065)));
evalcond[5]=(((r22*x8065))+(((-1.0)*sj1*sj2))+((r20*x8068))+(((-1.0)*r21*x8069))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8071 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8071.valid){
continue;
}
CheckValue<IkReal> x8072=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8071.value)+(((1.5707963267949)*(x8072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8073=IKcos(j4);
IkReal x8074=IKsin(j4);
IkReal x8075=(gconst1*x8073);
IkReal x8076=(gconst2*x8074);
IkReal x8077=((1.0)*gconst1*x8074);
IkReal x8078=((1.0)*gconst2*x8073);
evalcond[0]=(((r22*x8074))+((r21*x8075))+(((-1.0)*r20*x8078)));
evalcond[1]=(((r12*x8074))+((r11*x8075))+(((-1.0)*r10*x8078)));
evalcond[2]=(((r02*x8073))+(((-1.0)*r01*x8077))+((r00*x8076)));
evalcond[3]=((-1.0)+((r02*x8074))+(((-1.0)*r00*x8078))+((r01*x8075)));
evalcond[4]=(((cj2*sj1))+((r10*x8076))+((cj1*sj2))+((r12*x8073))+(((-1.0)*r11*x8077)));
evalcond[5]=(((r20*x8076))+(((-1.0)*sj1*sj2))+((r22*x8073))+((cj1*cj2))+(((-1.0)*r21*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8079=((-1.0)*r20);
IkReal x8080=x7589;
CheckValue<IkReal> x8082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8079),IKFAST_ATAN2_MAGTHRESH);
if(!x8082.valid){
continue;
}
IkReal x8081=((-1.0)*(x8082.value));
sj5=gconst1;
cj5=gconst2;
j5=x8081;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8081;
IkReal gconst1=(r21*x8080);
IkReal gconst2=(x8079*x8080);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8083=((-1.0)*r20);
IkReal x8084=x7589;
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8083),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
IkReal x8085=((-1.0)*(x8086.value));
sj5=gconst1;
cj5=gconst2;
j5=x8085;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8085;
IkReal gconst1=(r21*x8084);
IkReal gconst2=(x8083*x8084);
IkReal x8087=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8091=IKPowWithIntegerCheck(x8087,-1);
if(!x8091.valid){
continue;
}
IkReal x8088=x8091.value;
IkReal x8089=((1.0)*x8088);
IkReal x8090=((((-1.0)*(r02*r02)))+(((-1.0)*x8089*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8088))+(((-1.0)*x8089*(r01*r01)*(r21*r21))));
j4eval[0]=x8090;
j4eval[1]=IKsign(x8090);
j4eval[2]=r02;
j4eval[3]=x8087;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8092=((-1.0)*r20);
IkReal x8093=x7589;
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8092),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
IkReal x8094=((-1.0)*(x8095.value));
sj5=gconst1;
cj5=gconst2;
j5=x8094;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8094;
IkReal gconst1=(r21*x8093);
IkReal gconst2=(x8092*x8093);
IkReal x8096=r22*r22;
IkReal x8097=(cj1*cj2*r02);
CheckValue<IkReal> x8102=IKPowWithIntegerCheck(((-1.0)+x8096),-1);
if(!x8102.valid){
continue;
}
IkReal x8098=x8102.value;
IkReal x8099=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8096)))) < -0.00001)
continue;
IkReal x8100=IKsqrt(((1.0)+(((-1.0)*x8096))));
IkReal x8101=(r22*x8098*x8100);
j4eval[0]=((IKabs(((((-1.0)*x8099*x8101))+((x8097*x8101)))))+(IKabs(((((-1.0)*x8099))+x8097))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8103=(gconst1*r01);
IkReal x8104=(gconst2*r00);
IkReal x8105=(cj1*cj2);
IkReal x8106=((1.0)*sj1*sj2);
CheckValue<IkReal> x8107 = IKatan2WithCheck(IkReal((((r02*x8105))+(((-1.0)*r02*x8106)))),IkReal((((sj1*sj2*x8104))+(((-1.0)*x8103*x8106))+((x8103*x8105))+(((-1.0)*x8104*x8105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8107.valid){
continue;
}
CheckValue<IkReal> x8108=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8107.value)+(((1.5707963267949)*(x8108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8109=IKcos(j4);
IkReal x8110=IKsin(j4);
IkReal x8111=((1.0)*sj1);
IkReal x8112=(gconst1*x8109);
IkReal x8113=(gconst2*x8110);
IkReal x8114=((1.0)*gconst1*x8110);
IkReal x8115=((1.0)*gconst2*x8109);
evalcond[0]=((((-1.0)*r20*x8115))+((r21*x8112))+((r22*x8110)));
evalcond[1]=(((r12*x8110))+((r11*x8112))+(((-1.0)*r10*x8115)));
evalcond[2]=(((r02*x8109))+((r00*x8113))+(((-1.0)*r01*x8114)));
evalcond[3]=((1.0)+((r02*x8110))+((r01*x8112))+(((-1.0)*r00*x8115)));
evalcond[4]=((((-1.0)*r21*x8114))+((r20*x8113))+((r22*x8109))+((cj1*cj2))+(((-1.0)*sj2*x8111)));
evalcond[5]=((((-1.0)*r11*x8114))+(((-1.0)*cj1*sj2))+((r10*x8113))+((r12*x8109))+(((-1.0)*cj2*x8111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8116=(gconst1*r01);
IkReal x8117=(gconst2*r00);
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8117*x8117)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8116*x8116)))+(((2.0)*x8116*x8117)))),-1);
if(!x8118.valid){
continue;
}
CheckValue<IkReal> x8119 = IKatan2WithCheck(IkReal(r02),IkReal((x8116+(((-1.0)*x8117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8118.value)))+(x8119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8120=IKcos(j4);
IkReal x8121=IKsin(j4);
IkReal x8122=((1.0)*sj1);
IkReal x8123=(gconst1*x8120);
IkReal x8124=(gconst2*x8121);
IkReal x8125=((1.0)*gconst1*x8121);
IkReal x8126=((1.0)*gconst2*x8120);
evalcond[0]=((((-1.0)*r20*x8126))+((r21*x8123))+((r22*x8121)));
evalcond[1]=(((r12*x8121))+((r11*x8123))+(((-1.0)*r10*x8126)));
evalcond[2]=(((r02*x8120))+((r00*x8124))+(((-1.0)*r01*x8125)));
evalcond[3]=((1.0)+((r02*x8121))+((r01*x8123))+(((-1.0)*r00*x8126)));
evalcond[4]=((((-1.0)*r21*x8125))+((r20*x8124))+((cj1*cj2))+((r22*x8120))+(((-1.0)*sj2*x8122)));
evalcond[5]=((((-1.0)*r11*x8125))+(((-1.0)*cj1*sj2))+((r10*x8124))+((r12*x8120))+(((-1.0)*cj2*x8122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8127=((1.0)*gconst2);
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8127))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
CheckValue<IkReal> x8129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8127))+(((-1.0)*gconst1*r10)))),-1);
if(!x8129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8128.value)+(((1.5707963267949)*(x8129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8130=IKcos(j4);
IkReal x8131=IKsin(j4);
IkReal x8132=((1.0)*sj1);
IkReal x8133=(gconst1*x8130);
IkReal x8134=(gconst2*x8131);
IkReal x8135=((1.0)*gconst1*x8131);
IkReal x8136=((1.0)*gconst2*x8130);
evalcond[0]=(((r22*x8131))+((r21*x8133))+(((-1.0)*r20*x8136)));
evalcond[1]=(((r11*x8133))+((r12*x8131))+(((-1.0)*r10*x8136)));
evalcond[2]=(((r00*x8134))+((r02*x8130))+(((-1.0)*r01*x8135)));
evalcond[3]=((1.0)+((r02*x8131))+(((-1.0)*r00*x8136))+((r01*x8133)));
evalcond[4]=(((r22*x8130))+(((-1.0)*sj2*x8132))+((r20*x8134))+(((-1.0)*r21*x8135))+((cj1*cj2)));
evalcond[5]=(((r12*x8130))+(((-1.0)*r11*x8135))+(((-1.0)*cj2*x8132))+(((-1.0)*cj1*sj2))+((r10*x8134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8137=((-1.0)*r20);
IkReal x8138=((-1.0)*px);
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8137),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
IkReal x8139=((-1.0)*(x8140.value));
sj5=gconst1;
cj5=gconst2;
j5=x8139;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8138);
rxp1_1=(px*r21);
rxp1_2=(r11*x8138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8139;
IkReal gconst1=r21;
IkReal gconst2=x8137;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8141=((-1.0)*r20);
IkReal x8142=((-1.0)*px);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8141),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
IkReal x8143=((-1.0)*(x8144.value));
sj5=gconst1;
cj5=gconst2;
j5=x8143;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8142);
rxp1_1=(px*r21);
rxp1_2=(r11*x8142);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8143;
IkReal gconst1=r21;
IkReal gconst2=x8141;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8145=((-1.0)*r20);
IkReal x8146=((-1.0)*px);
CheckValue<IkReal> x8148 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8145),IKFAST_ATAN2_MAGTHRESH);
if(!x8148.valid){
continue;
}
IkReal x8147=((-1.0)*(x8148.value));
sj5=gconst1;
cj5=gconst2;
j5=x8147;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8146);
rxp1_1=(px*r21);
rxp1_2=(r11*x8146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8147;
IkReal gconst1=r21;
IkReal gconst2=x8145;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8151=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8151.valid){
continue;
}
IkReal x8149=x8151.value;
IkReal x8150=((1.0)*sj0*x8149);
sj4array[0]=((((-1.0)*cj2*sj1*x8150))+(((-1.0)*cj1*sj2*x8150)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8152=IKcos(j4);
IkReal x8153=IKsin(j4);
IkReal x8154=(gconst1*x8152);
IkReal x8155=((1.0)*gconst2*x8152);
evalcond[0]=(r02*x8152);
evalcond[1]=((((-1.0)*sj0))+((r02*x8153)));
evalcond[2]=(((r21*x8154))+(((-1.0)*r20*x8155)));
evalcond[3]=((((-1.0)*r10*x8155))+((r11*x8154)));
evalcond[4]=((((-1.0)*gconst1*r21*x8153))+(((-1.0)*sj1*sj2))+((gconst2*r20*x8153))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8157=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8157.valid){
continue;
}
IkReal x8156=x8157.value;
sj4array[0]=((((-1.0)*cj1*cj2*x8156))+((sj1*sj2*x8156)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8158=IKcos(j4);
IkReal x8159=IKsin(j4);
IkReal x8160=(gconst2*r10);
IkReal x8161=(gconst1*x8158);
IkReal x8162=((1.0)*x8158);
evalcond[0]=(r02*x8158);
evalcond[1]=((((-1.0)*sj0))+((r02*x8159)));
evalcond[2]=(((r21*x8161))+(((-1.0)*gconst2*r20*x8162)));
evalcond[3]=(((r11*x8161))+(((-1.0)*x8160*x8162)));
evalcond[4]=(((x8159*x8160))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+(((-1.0)*gconst1*r11*x8159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8163=IKPowWithIntegerCheck(r02,-1);
if(!x8163.valid){
continue;
}
sj4array[0]=(sj0*(x8163.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8164=IKcos(j4);
IkReal x8165=IKsin(j4);
IkReal x8166=(gconst2*r10);
IkReal x8167=(gconst2*r20);
IkReal x8168=((1.0)*x8164);
IkReal x8169=(gconst1*x8164);
IkReal x8170=((1.0)*gconst1*x8165);
evalcond[0]=(r02*x8164);
evalcond[1]=(((r21*x8169))+(((-1.0)*x8167*x8168)));
evalcond[2]=(((r11*x8169))+(((-1.0)*x8166*x8168)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8170))+((cj1*cj2))+((x8165*x8167)));
evalcond[4]=((((-1.0)*r11*x8170))+((cj1*sj0*sj2))+((cj2*sj0*sj1))+((x8165*x8166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8171=(sj1*sj2);
IkReal x8172=(gconst2*r20);
IkReal x8173=(cj1*cj2);
IkReal x8174=(gconst1*r21);
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal((((x8173*x8174))+(((-1.0)*x8172*x8173))+(((-1.0)*x8171*x8174))+((x8171*x8172)))),IkReal(((((-1.0)*r22*x8173))+((r22*x8171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
CheckValue<IkReal> x8176=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8172*x8174))+(x8172*x8172)+(x8174*x8174))),-1);
if(!x8176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8175.value)+(((1.5707963267949)*(x8176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8177=IKcos(j4);
IkReal x8178=IKsin(j4);
IkReal x8179=(cj2*sj1);
IkReal x8180=(cj1*sj2);
IkReal x8181=(gconst1*x8177);
IkReal x8182=(gconst2*x8178);
IkReal x8183=((1.0)*gconst1*x8178);
IkReal x8184=((1.0)*gconst2*x8177);
evalcond[0]=(((r21*x8181))+(((-1.0)*r20*x8184))+((r22*x8178)));
evalcond[1]=(((r11*x8181))+cj0+(((-1.0)*r10*x8184))+((r12*x8178)));
evalcond[2]=(((r02*x8178))+(((-1.0)*sj0))+((r01*x8181))+(((-1.0)*r00*x8184)));
evalcond[3]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x8183))+((cj1*cj2))+((r22*x8177))+((r20*x8182)));
evalcond[4]=(((r02*x8177))+((r00*x8182))+(((-1.0)*r01*x8183))+((cj0*x8179))+((cj0*x8180)));
evalcond[5]=(((r10*x8182))+((sj0*x8179))+((sj0*x8180))+((r12*x8177))+(((-1.0)*r11*x8183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8185 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8185.valid){
continue;
}
CheckValue<IkReal> x8186=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8185.value)+(((1.5707963267949)*(x8186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8187=IKcos(j4);
IkReal x8188=IKsin(j4);
IkReal x8189=(cj2*sj1);
IkReal x8190=(cj1*sj2);
IkReal x8191=(gconst1*x8187);
IkReal x8192=(gconst2*x8188);
IkReal x8193=((1.0)*gconst1*x8188);
IkReal x8194=((1.0)*gconst2*x8187);
evalcond[0]=(((r21*x8191))+((r22*x8188))+(((-1.0)*r20*x8194)));
evalcond[1]=(((r12*x8188))+((r11*x8191))+cj0+(((-1.0)*r10*x8194)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8191))+(((-1.0)*r00*x8194))+((r02*x8188)));
evalcond[3]=(((r20*x8192))+((r22*x8187))+(((-1.0)*sj1*sj2))+(((-1.0)*r21*x8193))+((cj1*cj2)));
evalcond[4]=(((r00*x8192))+(((-1.0)*r01*x8193))+((r02*x8187))+((cj0*x8189))+((cj0*x8190)));
evalcond[5]=(((r12*x8187))+((r10*x8192))+((sj0*x8190))+((sj0*x8189))+(((-1.0)*r11*x8193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8195=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8195.valid){
continue;
}
CheckValue<IkReal> x8196 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8195.value)))+(x8196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8197=IKcos(j4);
IkReal x8198=IKsin(j4);
IkReal x8199=(cj2*sj1);
IkReal x8200=(cj1*sj2);
IkReal x8201=(gconst1*x8197);
IkReal x8202=(gconst2*x8198);
IkReal x8203=((1.0)*gconst1*x8198);
IkReal x8204=((1.0)*gconst2*x8197);
evalcond[0]=(((r22*x8198))+((r21*x8201))+(((-1.0)*r20*x8204)));
evalcond[1]=((((-1.0)*r10*x8204))+((r12*x8198))+((r11*x8201))+cj0);
evalcond[2]=((((-1.0)*r00*x8204))+(((-1.0)*sj0))+((r02*x8198))+((r01*x8201)));
evalcond[3]=((((-1.0)*r21*x8203))+((r22*x8197))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x8202)));
evalcond[4]=((((-1.0)*r01*x8203))+((cj0*x8200))+((r02*x8197))+((r00*x8202))+((cj0*x8199)));
evalcond[5]=(((r12*x8197))+((sj0*x8200))+((sj0*x8199))+(((-1.0)*r11*x8203))+((r10*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8205=((-1.0)*r20);
IkReal x8206=x7589;
CheckValue<IkReal> x8208 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8205),IKFAST_ATAN2_MAGTHRESH);
if(!x8208.valid){
continue;
}
IkReal x8207=((-1.0)*(x8208.value));
sj5=gconst1;
cj5=gconst2;
j5=x8207;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8207;
IkReal gconst1=(r21*x8206);
IkReal gconst2=(x8205*x8206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8209=((-1.0)*r20);
IkReal x8210=x7589;
CheckValue<IkReal> x8212 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8209),IKFAST_ATAN2_MAGTHRESH);
if(!x8212.valid){
continue;
}
IkReal x8211=((-1.0)*(x8212.value));
sj5=gconst1;
cj5=gconst2;
j5=x8211;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8211;
IkReal gconst1=(r21*x8210);
IkReal gconst2=(x8209*x8210);
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8220.valid){
continue;
}
IkReal x8213=x8220.value;
IkReal x8214=(cj3*x8213);
IkReal x8215=(r11*x8214);
IkReal x8216=(r01*x8214);
IkReal x8217=(r00*x8214);
IkReal x8218=(r10*x8214);
IkReal x8219=(r20*r21*x8214);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x8215*(r21*r21)))+((r10*r20*r21*x8216))+((r00*r20*r21*x8215))+((r10*x8217*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8221=gconst2*gconst2;
IkReal x8222=gconst1*gconst1;
IkReal x8223=((1.0)*r02);
IkReal x8224=(cj3*r01);
IkReal x8225=(gconst1*gconst2);
IkReal x8226=(cj3*r10);
IkReal x8227=((1.0)*r00);
IkReal x8228=(r10*sj3);
IkReal x8229=(r11*sj3);
IkReal x8230=(cj3*r11);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal((((r10*x8222*x8224))+(((-1.0)*x8225*x8226*x8227))+((r11*x8224*x8225))+(((-1.0)*x8221*x8227*x8230)))),IkReal(((((-1.0)*gconst2*x8223*x8230))+(((-1.0)*gconst1*x8223*x8226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign((((r01*x8225*x8228))+(((-1.0)*r01*x8222*x8229))+(((-1.0)*r12*sj3*x8223))+(((-1.0)*x8221*x8227*x8228))+((r00*x8225*x8229)))),-1);
if(!x8232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8233=IKcos(j4);
IkReal x8234=IKsin(j4);
IkReal x8235=(cj1*cj2);
IkReal x8236=(cj3*gconst1);
IkReal x8237=(gconst2*sj3);
IkReal x8238=(gconst1*sj3);
IkReal x8239=((1.0)*sj2);
IkReal x8240=(cj2*sj1);
IkReal x8241=(cj3*gconst2);
IkReal x8242=(sj1*x8239);
IkReal x8243=((1.0)*x8234);
IkReal x8244=(gconst1*x8233);
IkReal x8245=((1.0)*x8233);
IkReal x8246=(cj3*x8233);
IkReal x8247=(x8234*x8241);
evalcond[0]=((((-1.0)*gconst2*r20*x8245))+((r22*x8234))+((r21*x8244)));
evalcond[1]=(((r02*x8234))+(((-1.0)*gconst2*r00*x8245))+((r01*x8244)));
evalcond[2]=((1.0)+((r12*x8234))+(((-1.0)*gconst2*r10*x8245))+((r11*x8244)));
evalcond[3]=(((r10*x8247))+((r11*x8237))+(((-1.0)*r11*x8236*x8243))+((r10*x8238))+((r12*x8246)));
evalcond[4]=((((-1.0)*r10*x8237*x8243))+((r11*x8234*x8238))+(((-1.0)*r12*sj3*x8245))+((r10*x8236))+((r11*x8241)));
evalcond[5]=(((r01*x8234*x8238))+((cj1*sj2))+(((-1.0)*r00*x8237*x8243))+((r00*x8236))+((r01*x8241))+(((-1.0)*r02*sj3*x8245))+x8240);
evalcond[6]=((((-1.0)*r01*x8236*x8243))+((r02*x8246))+((r01*x8237))+(((-1.0)*x8242))+((r00*x8238))+((r00*x8247))+x8235);
evalcond[7]=(((r20*x8236))+(((-1.0)*r20*x8237*x8243))+(((-1.0)*r22*sj3*x8245))+((r21*x8234*x8238))+((r21*x8241))+(((-1.0)*x8242))+x8235);
evalcond[8]=(((r20*x8238))+((r20*x8247))+(((-1.0)*cj1*x8239))+((r22*x8246))+((r21*x8237))+(((-1.0)*r21*x8236*x8243))+(((-1.0)*x8240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8248=gconst1*gconst1;
IkReal x8249=gconst2*gconst2;
IkReal x8250=((1.0)*r10);
IkReal x8251=(r01*r11);
IkReal x8252=(r02*sj3);
IkReal x8253=((1.0)*r11);
IkReal x8254=(gconst1*gconst2*sj3);
IkReal x8255=(r00*x8249);
IkReal x8256=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8257=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r00*x8253*x8256))+((cj3*r10*x8255))+((cj3*x8248*x8251))+(((-1.0)*r01*x8250*x8256)))),-1);
if(!x8257.valid){
continue;
}
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal((((x8251*x8254))+(((-1.0)*r00*x8250*x8254))+((r01*r10*sj3*x8248))+(((-1.0)*sj3*x8253*x8255)))),IkReal(((((-1.0)*gconst2*x8252*x8253))+(((-1.0)*gconst1*x8250*x8252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8257.value)))+(x8258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8259=IKcos(j4);
IkReal x8260=IKsin(j4);
IkReal x8261=(cj1*cj2);
IkReal x8262=(cj3*gconst1);
IkReal x8263=(gconst2*sj3);
IkReal x8264=(gconst1*sj3);
IkReal x8265=((1.0)*sj2);
IkReal x8266=(cj2*sj1);
IkReal x8267=(cj3*gconst2);
IkReal x8268=(sj1*x8265);
IkReal x8269=((1.0)*x8260);
IkReal x8270=(gconst1*x8259);
IkReal x8271=((1.0)*x8259);
IkReal x8272=(cj3*x8259);
IkReal x8273=(x8260*x8267);
evalcond[0]=((((-1.0)*gconst2*r20*x8271))+((r21*x8270))+((r22*x8260)));
evalcond[1]=((((-1.0)*gconst2*r00*x8271))+((r02*x8260))+((r01*x8270)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8271))+((r12*x8260))+((r11*x8270)));
evalcond[3]=((((-1.0)*r11*x8262*x8269))+((r10*x8264))+((r11*x8263))+((r12*x8272))+((r10*x8273)));
evalcond[4]=((((-1.0)*r10*x8263*x8269))+(((-1.0)*r12*sj3*x8271))+((r11*x8260*x8264))+((r10*x8262))+((r11*x8267)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r00*x8263*x8269))+((r01*x8267))+(((-1.0)*r02*sj3*x8271))+((r00*x8262))+((r01*x8260*x8264))+x8266);
evalcond[6]=(((r02*x8272))+(((-1.0)*r01*x8262*x8269))+(((-1.0)*x8268))+((r01*x8263))+((r00*x8264))+((r00*x8273))+x8261);
evalcond[7]=(((r20*x8262))+((r21*x8260*x8264))+(((-1.0)*r22*sj3*x8271))+((r21*x8267))+(((-1.0)*x8268))+(((-1.0)*r20*x8263*x8269))+x8261);
evalcond[8]=(((r20*x8273))+((r20*x8264))+((r21*x8263))+((r22*x8272))+(((-1.0)*cj1*x8265))+(((-1.0)*r21*x8262*x8269))+(((-1.0)*x8266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8274=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8274.valid){
continue;
}
CheckValue<IkReal> x8275 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8274.value)))+(x8275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8276=IKcos(j4);
IkReal x8277=IKsin(j4);
IkReal x8278=(cj1*cj2);
IkReal x8279=(cj3*gconst1);
IkReal x8280=(gconst2*sj3);
IkReal x8281=(gconst1*sj3);
IkReal x8282=((1.0)*sj2);
IkReal x8283=(cj2*sj1);
IkReal x8284=(cj3*gconst2);
IkReal x8285=(sj1*x8282);
IkReal x8286=((1.0)*x8277);
IkReal x8287=(gconst1*x8276);
IkReal x8288=((1.0)*x8276);
IkReal x8289=(cj3*x8276);
IkReal x8290=(x8277*x8284);
evalcond[0]=(((r21*x8287))+(((-1.0)*gconst2*r20*x8288))+((r22*x8277)));
evalcond[1]=((((-1.0)*gconst2*r00*x8288))+((r01*x8287))+((r02*x8277)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x8288))+((r11*x8287))+((r12*x8277)));
evalcond[3]=(((r10*x8281))+((r10*x8290))+((r11*x8280))+((r12*x8289))+(((-1.0)*r11*x8279*x8286)));
evalcond[4]=((((-1.0)*r12*sj3*x8288))+(((-1.0)*r10*x8280*x8286))+((r11*x8284))+((r11*x8277*x8281))+((r10*x8279)));
evalcond[5]=(((r01*x8277*x8281))+((r01*x8284))+((cj1*sj2))+(((-1.0)*r02*sj3*x8288))+((r00*x8279))+(((-1.0)*r00*x8280*x8286))+x8283);
evalcond[6]=(((r00*x8281))+((r00*x8290))+((r01*x8280))+((r02*x8289))+(((-1.0)*x8285))+(((-1.0)*r01*x8279*x8286))+x8278);
evalcond[7]=(((r20*x8279))+((r21*x8284))+(((-1.0)*r22*sj3*x8288))+(((-1.0)*r20*x8280*x8286))+((r21*x8277*x8281))+(((-1.0)*x8285))+x8278);
evalcond[8]=(((r21*x8280))+(((-1.0)*x8283))+(((-1.0)*cj1*x8282))+((r20*x8290))+((r20*x8281))+(((-1.0)*r21*x8279*x8286))+((r22*x8289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8291=((-1.0)*r20);
IkReal x8292=x7589;
CheckValue<IkReal> x8294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8291),IKFAST_ATAN2_MAGTHRESH);
if(!x8294.valid){
continue;
}
IkReal x8293=((-1.0)*(x8294.value));
sj5=gconst1;
cj5=gconst2;
j5=x8293;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8293;
IkReal gconst1=(r21*x8292);
IkReal gconst2=(x8291*x8292);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*r20);
IkReal x8296=x7589;
CheckValue<IkReal> x8298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8295),IKFAST_ATAN2_MAGTHRESH);
if(!x8298.valid){
continue;
}
IkReal x8297=((-1.0)*(x8298.value));
sj5=gconst1;
cj5=gconst2;
j5=x8297;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8297;
IkReal gconst1=(r21*x8296);
IkReal gconst2=(x8295*x8296);
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8306.valid){
continue;
}
IkReal x8299=x8306.value;
IkReal x8300=(cj3*x8299);
IkReal x8301=(r11*x8300);
IkReal x8302=(r01*x8300);
IkReal x8303=(r00*x8300);
IkReal x8304=(r10*x8300);
IkReal x8305=(r20*r21*x8300);
j4eval[0]=IKsign((((r01*x8301*(r21*r21)))+((r10*r20*r21*x8302))+((cj3*r02*r12))+((r00*r20*r21*x8301))+((r10*x8303*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8307=gconst2*gconst2;
IkReal x8308=gconst1*gconst1;
IkReal x8309=((1.0)*r02);
IkReal x8310=(cj3*r01);
IkReal x8311=(gconst1*gconst2);
IkReal x8312=(cj3*r10);
IkReal x8313=((1.0)*r00);
IkReal x8314=(r10*sj3);
IkReal x8315=(r11*sj3);
IkReal x8316=(cj3*r11);
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal((((r10*x8308*x8310))+(((-1.0)*x8307*x8313*x8316))+((r11*x8310*x8311))+(((-1.0)*x8311*x8312*x8313)))),IkReal(((((-1.0)*gconst1*x8309*x8312))+(((-1.0)*gconst2*x8309*x8316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
CheckValue<IkReal> x8318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8308*x8315))+(((-1.0)*x8307*x8313*x8314))+((r01*x8311*x8314))+((r00*x8311*x8315))+(((-1.0)*r12*sj3*x8309)))),-1);
if(!x8318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8317.value)+(((1.5707963267949)*(x8318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8319=IKcos(j4);
IkReal x8320=IKsin(j4);
IkReal x8321=(cj3*gconst1);
IkReal x8322=(gconst2*sj3);
IkReal x8323=(sj1*sj2);
IkReal x8324=(gconst1*sj3);
IkReal x8325=((1.0)*cj1);
IkReal x8326=(cj3*gconst2);
IkReal x8327=(sj2*x8325);
IkReal x8328=((1.0)*cj2*sj1);
IkReal x8329=((1.0)*x8320);
IkReal x8330=(gconst1*x8319);
IkReal x8331=((1.0)*x8319);
IkReal x8332=(cj3*x8319);
IkReal x8333=(x8320*x8326);
IkReal x8334=(x8328+x8327);
evalcond[0]=(((r21*x8330))+((r22*x8320))+(((-1.0)*gconst2*r20*x8331)));
evalcond[1]=(((r02*x8320))+((r01*x8330))+(((-1.0)*gconst2*r00*x8331)));
evalcond[2]=((-1.0)+((r12*x8320))+((r11*x8330))+(((-1.0)*gconst2*r10*x8331)));
evalcond[3]=((((-1.0)*r11*x8321*x8329))+((r10*x8324))+((r10*x8333))+((r12*x8332))+((r11*x8322)));
evalcond[4]=((((-1.0)*r12*sj3*x8331))+(((-1.0)*r10*x8322*x8329))+((r10*x8321))+((r11*x8326))+((r11*x8320*x8324)));
evalcond[5]=(x8323+((r00*x8333))+((r01*x8322))+((r00*x8324))+(((-1.0)*r01*x8321*x8329))+(((-1.0)*cj2*x8325))+((r02*x8332)));
evalcond[6]=((((-1.0)*r22*sj3*x8331))+((r21*x8326))+(((-1.0)*x8323))+(((-1.0)*r20*x8322*x8329))+((cj1*cj2))+((r20*x8321))+((r21*x8320*x8324)));
evalcond[7]=((((-1.0)*r21*x8321*x8329))+((r22*x8332))+((r21*x8322))+((r20*x8333))+(((-1.0)*x8334))+((r20*x8324)));
evalcond[8]=((((-1.0)*r00*x8322*x8329))+((r01*x8326))+((r00*x8321))+(((-1.0)*r02*sj3*x8331))+(((-1.0)*x8334))+((r01*x8320*x8324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=gconst1*gconst1;
IkReal x8336=gconst2*gconst2;
IkReal x8337=((1.0)*r10);
IkReal x8338=(r01*r11);
IkReal x8339=(r02*sj3);
IkReal x8340=((1.0)*r11);
IkReal x8341=(gconst1*gconst2*sj3);
IkReal x8342=(r00*x8336);
IkReal x8343=(cj3*gconst1*gconst2);
CheckValue<IkReal> x8344=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r01*x8337*x8343))+(((-1.0)*r00*x8340*x8343))+((cj3*x8335*x8338))+((cj3*r10*x8342)))),-1);
if(!x8344.valid){
continue;
}
CheckValue<IkReal> x8345 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x8340*x8342))+((r01*r10*sj3*x8335))+((x8338*x8341))+(((-1.0)*r00*x8337*x8341)))),IkReal(((((-1.0)*gconst2*x8339*x8340))+(((-1.0)*gconst1*x8337*x8339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8344.value)))+(x8345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8346=IKcos(j4);
IkReal x8347=IKsin(j4);
IkReal x8348=(cj3*gconst1);
IkReal x8349=(gconst2*sj3);
IkReal x8350=(sj1*sj2);
IkReal x8351=(gconst1*sj3);
IkReal x8352=((1.0)*cj1);
IkReal x8353=(cj3*gconst2);
IkReal x8354=(sj2*x8352);
IkReal x8355=((1.0)*cj2*sj1);
IkReal x8356=((1.0)*x8347);
IkReal x8357=(gconst1*x8346);
IkReal x8358=((1.0)*x8346);
IkReal x8359=(cj3*x8346);
IkReal x8360=(x8347*x8353);
IkReal x8361=(x8354+x8355);
evalcond[0]=((((-1.0)*gconst2*r20*x8358))+((r21*x8357))+((r22*x8347)));
evalcond[1]=((((-1.0)*gconst2*r00*x8358))+((r02*x8347))+((r01*x8357)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8358))+((r11*x8357))+((r12*x8347)));
evalcond[3]=(((r10*x8351))+(((-1.0)*r11*x8348*x8356))+((r12*x8359))+((r11*x8349))+((r10*x8360)));
evalcond[4]=((((-1.0)*r10*x8349*x8356))+(((-1.0)*r12*sj3*x8358))+((r11*x8353))+((r11*x8347*x8351))+((r10*x8348)));
evalcond[5]=(x8350+((r01*x8349))+((r02*x8359))+(((-1.0)*r01*x8348*x8356))+((r00*x8360))+(((-1.0)*cj2*x8352))+((r00*x8351)));
evalcond[6]=((((-1.0)*r22*sj3*x8358))+((r20*x8348))+((r21*x8347*x8351))+(((-1.0)*x8350))+((r21*x8353))+((cj1*cj2))+(((-1.0)*r20*x8349*x8356)));
evalcond[7]=(((r22*x8359))+((r21*x8349))+((r20*x8360))+(((-1.0)*r21*x8348*x8356))+((r20*x8351))+(((-1.0)*x8361)));
evalcond[8]=((((-1.0)*r02*sj3*x8358))+(((-1.0)*r00*x8349*x8356))+((r01*x8353))+((r01*x8347*x8351))+(((-1.0)*x8361))+((r00*x8348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8362=((1.0)*gconst2);
CheckValue<IkReal> x8363 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8362))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8363.valid){
continue;
}
CheckValue<IkReal> x8364=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8362)))),-1);
if(!x8364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8363.value)+(((1.5707963267949)*(x8364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8365=IKcos(j4);
IkReal x8366=IKsin(j4);
IkReal x8367=(cj3*gconst1);
IkReal x8368=(gconst2*sj3);
IkReal x8369=(sj1*sj2);
IkReal x8370=(gconst1*sj3);
IkReal x8371=((1.0)*cj1);
IkReal x8372=(cj3*gconst2);
IkReal x8373=(sj2*x8371);
IkReal x8374=((1.0)*cj2*sj1);
IkReal x8375=((1.0)*x8366);
IkReal x8376=(gconst1*x8365);
IkReal x8377=((1.0)*x8365);
IkReal x8378=(cj3*x8365);
IkReal x8379=(x8366*x8372);
IkReal x8380=(x8374+x8373);
evalcond[0]=(((r22*x8366))+((r21*x8376))+(((-1.0)*gconst2*r20*x8377)));
evalcond[1]=((((-1.0)*gconst2*r00*x8377))+((r02*x8366))+((r01*x8376)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x8377))+((r12*x8366))+((r11*x8376)));
evalcond[3]=(((r10*x8379))+((r10*x8370))+(((-1.0)*r11*x8367*x8375))+((r12*x8378))+((r11*x8368)));
evalcond[4]=((((-1.0)*r12*sj3*x8377))+((r11*x8372))+((r11*x8366*x8370))+((r10*x8367))+(((-1.0)*r10*x8368*x8375)));
evalcond[5]=(x8369+((r00*x8379))+((r00*x8370))+((r01*x8368))+(((-1.0)*r01*x8367*x8375))+((r02*x8378))+(((-1.0)*cj2*x8371)));
evalcond[6]=((((-1.0)*x8369))+((r21*x8372))+((r21*x8366*x8370))+((r20*x8367))+(((-1.0)*r20*x8368*x8375))+((cj1*cj2))+(((-1.0)*r22*sj3*x8377)));
evalcond[7]=(((r20*x8379))+((r20*x8370))+(((-1.0)*x8380))+((r21*x8368))+(((-1.0)*r21*x8367*x8375))+((r22*x8378)));
evalcond[8]=((((-1.0)*r02*sj3*x8377))+((r01*x8366*x8370))+(((-1.0)*r00*x8368*x8375))+(((-1.0)*x8380))+((r00*x8367))+((r01*x8372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8381=((-1.0)*r20);
IkReal x8382=x7589;
CheckValue<IkReal> x8384 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8381),IKFAST_ATAN2_MAGTHRESH);
if(!x8384.valid){
continue;
}
IkReal x8383=((-1.0)*(x8384.value));
sj5=gconst1;
cj5=gconst2;
j5=x8383;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8383;
IkReal gconst1=(r21*x8382);
IkReal gconst2=(x8381*x8382);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8385=((-1.0)*r20);
IkReal x8386=x7589;
CheckValue<IkReal> x8388 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8385),IKFAST_ATAN2_MAGTHRESH);
if(!x8388.valid){
continue;
}
IkReal x8387=((-1.0)*(x8388.value));
sj5=gconst1;
cj5=gconst2;
j5=x8387;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8387;
IkReal gconst1=(r21*x8386);
IkReal gconst2=(x8385*x8386);
CheckValue<IkReal> x8396=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8396.valid){
continue;
}
IkReal x8389=x8396.value;
IkReal x8390=(cj3*x8389);
IkReal x8391=(r11*x8390);
IkReal x8392=(r01*x8390);
IkReal x8393=(r00*x8390);
IkReal x8394=(r10*x8390);
IkReal x8395=(r20*r21*x8390);
j4eval[0]=IKsign((((r00*r20*r21*x8391))+((r10*x8393*(r20*r20)))+((cj3*r02*r12))+((r10*r20*r21*x8392))+((r01*x8391*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8397=gconst1*gconst1;
IkReal x8398=gconst2*gconst2;
IkReal x8399=(cj3*r11);
IkReal x8400=((1.0)*r12);
IkReal x8401=(gconst1*gconst2);
IkReal x8402=(r10*sj3);
IkReal x8403=(r11*sj3);
IkReal x8404=((1.0)*cj3*r10);
CheckValue<IkReal> x8405 = IKatan2WithCheck(IkReal((((r01*x8399*x8401))+(((-1.0)*r00*x8401*x8404))+((r00*x8397*x8399))+(((-1.0)*r01*x8398*x8404)))),IkReal(((((-1.0)*cj3*gconst1*r00*x8400))+(((-1.0)*cj3*gconst2*r01*x8400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8405.valid){
continue;
}
CheckValue<IkReal> x8406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8397*x8403))+((r00*x8401*x8403))+(((-1.0)*r02*sj3*x8400))+(((-1.0)*r00*x8398*x8402))+((r01*x8401*x8402)))),-1);
if(!x8406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8405.value)+(((1.5707963267949)*(x8406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8407=IKcos(j4);
IkReal x8408=IKsin(j4);
IkReal x8409=(cj1*cj2);
IkReal x8410=(cj3*gconst1);
IkReal x8411=(gconst2*sj3);
IkReal x8412=(gconst1*sj3);
IkReal x8413=((1.0)*sj2);
IkReal x8414=(cj2*sj1);
IkReal x8415=(cj3*gconst2);
IkReal x8416=(sj1*x8413);
IkReal x8417=((1.0)*x8408);
IkReal x8418=(gconst1*x8407);
IkReal x8419=((1.0)*x8407);
IkReal x8420=(cj3*x8407);
IkReal x8421=(x8408*x8415);
evalcond[0]=(((r22*x8408))+((r21*x8418))+(((-1.0)*gconst2*r20*x8419)));
evalcond[1]=(((r12*x8408))+((r11*x8418))+(((-1.0)*gconst2*r10*x8419)));
evalcond[2]=((-1.0)+((r01*x8418))+((r02*x8408))+(((-1.0)*gconst2*r00*x8419)));
evalcond[3]=(((r02*x8420))+(((-1.0)*r01*x8410*x8417))+((r00*x8412))+((r01*x8411))+((r00*x8421)));
evalcond[4]=((((-1.0)*r00*x8411*x8417))+((r00*x8410))+((r01*x8415))+((r01*x8408*x8412))+(((-1.0)*r02*sj3*x8419)));
evalcond[5]=(((r11*x8408*x8412))+(((-1.0)*r10*x8411*x8417))+x8414+((cj1*sj2))+((r11*x8415))+((r10*x8410))+(((-1.0)*r12*sj3*x8419)));
evalcond[6]=(x8409+((r10*x8421))+((r11*x8411))+(((-1.0)*r11*x8410*x8417))+((r12*x8420))+((r10*x8412))+(((-1.0)*x8416)));
evalcond[7]=(x8409+((r20*x8410))+(((-1.0)*r20*x8411*x8417))+((r21*x8415))+(((-1.0)*r22*sj3*x8419))+(((-1.0)*x8416))+((r21*x8408*x8412)));
evalcond[8]=((((-1.0)*cj1*x8413))+(((-1.0)*x8414))+((r20*x8421))+((r20*x8412))+((r21*x8411))+(((-1.0)*r21*x8410*x8417))+((r22*x8420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8422=gconst1*gconst1;
IkReal x8423=gconst2*gconst2;
IkReal x8424=(r00*sj3);
IkReal x8425=(gconst1*gconst2);
IkReal x8426=((1.0)*r10);
IkReal x8427=(r01*sj3);
IkReal x8428=((1.0)*r12);
IkReal x8429=(cj3*r01);
IkReal x8430=(cj3*r00);
IkReal x8431=(r11*x8422);
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal((((r11*x8425*x8427))+((x8424*x8431))+(((-1.0)*x8424*x8425*x8426))+(((-1.0)*x8423*x8426*x8427)))),IkReal(((((-1.0)*gconst2*x8427*x8428))+(((-1.0)*gconst1*x8424*x8428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
CheckValue<IkReal> x8433=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((x8429*x8431))+(((-1.0)*r11*x8425*x8430))+((r10*x8423*x8430))+(((-1.0)*x8425*x8426*x8429)))),-1);
if(!x8433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8432.value)+(((1.5707963267949)*(x8433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8434=IKcos(j4);
IkReal x8435=IKsin(j4);
IkReal x8436=(cj1*cj2);
IkReal x8437=(cj3*gconst1);
IkReal x8438=(gconst2*sj3);
IkReal x8439=(gconst1*sj3);
IkReal x8440=((1.0)*sj2);
IkReal x8441=(cj2*sj1);
IkReal x8442=(cj3*gconst2);
IkReal x8443=(sj1*x8440);
IkReal x8444=((1.0)*x8435);
IkReal x8445=(gconst1*x8434);
IkReal x8446=((1.0)*x8434);
IkReal x8447=(cj3*x8434);
IkReal x8448=(x8435*x8442);
evalcond[0]=(((r21*x8445))+((r22*x8435))+(((-1.0)*gconst2*r20*x8446)));
evalcond[1]=(((r11*x8445))+(((-1.0)*gconst2*r10*x8446))+((r12*x8435)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x8446))+((r02*x8435))+((r01*x8445)));
evalcond[3]=(((r01*x8438))+(((-1.0)*r01*x8437*x8444))+((r02*x8447))+((r00*x8448))+((r00*x8439)));
evalcond[4]=((((-1.0)*r00*x8438*x8444))+((r01*x8435*x8439))+(((-1.0)*r02*sj3*x8446))+((r01*x8442))+((r00*x8437)));
evalcond[5]=(x8441+((r11*x8442))+((r11*x8435*x8439))+((cj1*sj2))+(((-1.0)*r12*sj3*x8446))+((r10*x8437))+(((-1.0)*r10*x8438*x8444)));
evalcond[6]=(((r12*x8447))+x8436+(((-1.0)*r11*x8437*x8444))+((r11*x8438))+((r10*x8448))+(((-1.0)*x8443))+((r10*x8439)));
evalcond[7]=(((r21*x8435*x8439))+x8436+((r21*x8442))+(((-1.0)*r20*x8438*x8444))+(((-1.0)*r22*sj3*x8446))+(((-1.0)*x8443))+((r20*x8437)));
evalcond[8]=(((r21*x8438))+((r22*x8447))+(((-1.0)*x8441))+(((-1.0)*cj1*x8440))+((r20*x8448))+(((-1.0)*r21*x8437*x8444))+((r20*x8439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8449 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8449.value)+(((1.5707963267949)*(x8450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8451=IKcos(j4);
IkReal x8452=IKsin(j4);
IkReal x8453=(cj1*cj2);
IkReal x8454=(cj3*gconst1);
IkReal x8455=(gconst2*sj3);
IkReal x8456=(gconst1*sj3);
IkReal x8457=((1.0)*sj2);
IkReal x8458=(cj2*sj1);
IkReal x8459=(cj3*gconst2);
IkReal x8460=(sj1*x8457);
IkReal x8461=((1.0)*x8452);
IkReal x8462=(gconst1*x8451);
IkReal x8463=((1.0)*x8451);
IkReal x8464=(cj3*x8451);
IkReal x8465=(x8452*x8459);
evalcond[0]=(((r22*x8452))+((r21*x8462))+(((-1.0)*gconst2*r20*x8463)));
evalcond[1]=(((r11*x8462))+(((-1.0)*gconst2*r10*x8463))+((r12*x8452)));
evalcond[2]=((-1.0)+((r01*x8462))+((r02*x8452))+(((-1.0)*gconst2*r00*x8463)));
evalcond[3]=(((r00*x8465))+((r02*x8464))+((r01*x8455))+(((-1.0)*r01*x8454*x8461))+((r00*x8456)));
evalcond[4]=(((r01*x8452*x8456))+(((-1.0)*r02*sj3*x8463))+(((-1.0)*r00*x8455*x8461))+((r01*x8459))+((r00*x8454)));
evalcond[5]=(x8458+((r11*x8459))+((cj1*sj2))+((r11*x8452*x8456))+(((-1.0)*r12*sj3*x8463))+((r10*x8454))+(((-1.0)*r10*x8455*x8461)));
evalcond[6]=(((r12*x8464))+x8453+(((-1.0)*r11*x8454*x8461))+((r11*x8455))+(((-1.0)*x8460))+((r10*x8465))+((r10*x8456)));
evalcond[7]=(x8453+((r21*x8459))+(((-1.0)*x8460))+(((-1.0)*r20*x8455*x8461))+((r20*x8454))+((r21*x8452*x8456))+(((-1.0)*r22*sj3*x8463)));
evalcond[8]=((((-1.0)*r21*x8454*x8461))+((r21*x8455))+((r22*x8464))+(((-1.0)*cj1*x8457))+(((-1.0)*x8458))+((r20*x8456))+((r20*x8465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8466=((-1.0)*r20);
IkReal x8467=x7589;
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8466),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
IkReal x8468=((-1.0)*(x8469.value));
sj5=gconst1;
cj5=gconst2;
j5=x8468;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8468;
IkReal gconst1=(r21*x8467);
IkReal gconst2=(x8466*x8467);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8470=((-1.0)*r20);
IkReal x8471=x7589;
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8470),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
IkReal x8472=((-1.0)*(x8473.value));
sj5=gconst1;
cj5=gconst2;
j5=x8472;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8472;
IkReal gconst1=(r21*x8471);
IkReal gconst2=(x8470*x8471);
CheckValue<IkReal> x8481=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8481.valid){
continue;
}
IkReal x8474=x8481.value;
IkReal x8475=(cj3*x8474);
IkReal x8476=(r11*x8475);
IkReal x8477=(r01*x8475);
IkReal x8478=(r00*x8475);
IkReal x8479=(r10*x8475);
IkReal x8480=(r20*r21*x8475);
j4eval[0]=IKsign((((r10*r20*r21*x8477))+((r00*r20*r21*x8476))+((cj3*r02*r12))+((r01*x8476*(r21*r21)))+((r10*x8478*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8482=gconst1*gconst1;
IkReal x8483=gconst2*gconst2;
IkReal x8484=(cj3*r11);
IkReal x8485=((1.0)*r12);
IkReal x8486=(gconst1*gconst2);
IkReal x8487=(r10*sj3);
IkReal x8488=(r11*sj3);
IkReal x8489=((1.0)*cj3*r10);
CheckValue<IkReal> x8490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*sj3*x8485))+((r01*x8486*x8487))+(((-1.0)*r01*x8482*x8488))+((r00*x8486*x8488))+(((-1.0)*r00*x8483*x8487)))),-1);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal((((r00*x8482*x8484))+((r01*x8484*x8486))+(((-1.0)*r01*x8483*x8489))+(((-1.0)*r00*x8486*x8489)))),IkReal(((((-1.0)*cj3*gconst2*r01*x8485))+(((-1.0)*cj3*gconst1*r00*x8485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8490.value)))+(x8491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8492=IKcos(j4);
IkReal x8493=IKsin(j4);
IkReal x8494=(cj3*gconst1);
IkReal x8495=(r20*sj3);
IkReal x8496=(gconst1*sj3);
IkReal x8497=(sj1*sj2);
IkReal x8498=((1.0)*cj1);
IkReal x8499=(gconst2*r11);
IkReal x8500=(gconst2*r10);
IkReal x8501=(gconst2*r00);
IkReal x8502=(gconst2*sj3);
IkReal x8503=(cj3*gconst2);
IkReal x8504=(sj2*x8498);
IkReal x8505=((1.0)*cj2*sj1);
IkReal x8506=((1.0)*x8493);
IkReal x8507=(gconst1*x8492);
IkReal x8508=(r22*x8492);
IkReal x8509=((1.0)*x8492);
IkReal x8510=(cj3*x8492);
IkReal x8511=(x8493*x8503);
IkReal x8512=(x8505+x8504);
evalcond[0]=(((r21*x8507))+((r22*x8493))+(((-1.0)*gconst2*r20*x8509)));
evalcond[1]=(((r11*x8507))+((r12*x8493))+(((-1.0)*x8500*x8509)));
evalcond[2]=((1.0)+(((-1.0)*x8501*x8509))+((r02*x8493))+((r01*x8507)));
evalcond[3]=(((r00*x8496))+((r02*x8510))+(((-1.0)*r01*x8494*x8506))+((r01*x8502))+((cj3*x8493*x8501)));
evalcond[4]=(((r00*x8494))+(((-1.0)*sj3*x8501*x8506))+(((-1.0)*r02*sj3*x8509))+((r01*x8493*x8496))+((r01*x8503)));
evalcond[5]=(((r10*x8496))+x8497+((sj3*x8499))+(((-1.0)*cj2*x8498))+((r12*x8510))+(((-1.0)*r11*x8494*x8506))+((cj3*x8493*x8500)));
evalcond[6]=((((-1.0)*gconst2*x8495*x8506))+((r21*x8503))+(((-1.0)*sj3*x8508))+((r21*x8493*x8496))+(((-1.0)*x8497))+((r20*x8494))+((cj1*cj2)));
evalcond[7]=(((cj3*x8508))+((gconst1*x8495))+((r21*x8502))+(((-1.0)*x8512))+(((-1.0)*r21*x8494*x8506))+((r20*x8511)));
evalcond[8]=((((-1.0)*sj3*x8500*x8506))+((r10*x8494))+(((-1.0)*r12*sj3*x8509))+((cj3*x8499))+(((-1.0)*x8512))+((r11*x8493*x8496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8513=gconst1*gconst1;
IkReal x8514=gconst2*gconst2;
IkReal x8515=(r00*sj3);
IkReal x8516=(gconst1*gconst2);
IkReal x8517=((1.0)*r10);
IkReal x8518=(r01*sj3);
IkReal x8519=((1.0)*r12);
IkReal x8520=(cj3*r01);
IkReal x8521=(cj3*r00);
IkReal x8522=(r11*x8513);
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal(((((-1.0)*x8514*x8517*x8518))+((r11*x8516*x8518))+(((-1.0)*x8515*x8516*x8517))+((x8515*x8522)))),IkReal(((((-1.0)*gconst1*x8515*x8519))+(((-1.0)*gconst2*x8518*x8519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
CheckValue<IkReal> x8524=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*x8516*x8517*x8520))+(((-1.0)*r11*x8516*x8521))+((x8520*x8522))+((r10*x8514*x8521)))),-1);
if(!x8524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8523.value)+(((1.5707963267949)*(x8524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8525=IKcos(j4);
IkReal x8526=IKsin(j4);
IkReal x8527=(cj3*gconst1);
IkReal x8528=(r20*sj3);
IkReal x8529=(gconst1*sj3);
IkReal x8530=(sj1*sj2);
IkReal x8531=((1.0)*cj1);
IkReal x8532=(gconst2*r11);
IkReal x8533=(gconst2*r10);
IkReal x8534=(gconst2*r00);
IkReal x8535=(gconst2*sj3);
IkReal x8536=(cj3*gconst2);
IkReal x8537=(sj2*x8531);
IkReal x8538=((1.0)*cj2*sj1);
IkReal x8539=((1.0)*x8526);
IkReal x8540=(gconst1*x8525);
IkReal x8541=(r22*x8525);
IkReal x8542=((1.0)*x8525);
IkReal x8543=(cj3*x8525);
IkReal x8544=(x8526*x8536);
IkReal x8545=(x8538+x8537);
evalcond[0]=((((-1.0)*gconst2*r20*x8542))+((r22*x8526))+((r21*x8540)));
evalcond[1]=(((r12*x8526))+(((-1.0)*x8533*x8542))+((r11*x8540)));
evalcond[2]=((1.0)+((r02*x8526))+((r01*x8540))+(((-1.0)*x8534*x8542)));
evalcond[3]=(((r01*x8535))+(((-1.0)*r01*x8527*x8539))+((cj3*x8526*x8534))+((r00*x8529))+((r02*x8543)));
evalcond[4]=((((-1.0)*r02*sj3*x8542))+((r01*x8536))+(((-1.0)*sj3*x8534*x8539))+((r01*x8526*x8529))+((r00*x8527)));
evalcond[5]=(x8530+((cj3*x8526*x8533))+(((-1.0)*r11*x8527*x8539))+(((-1.0)*cj2*x8531))+((r12*x8543))+((sj3*x8532))+((r10*x8529)));
evalcond[6]=(((r20*x8527))+(((-1.0)*x8530))+(((-1.0)*sj3*x8541))+((r21*x8536))+(((-1.0)*gconst2*x8528*x8539))+((cj1*cj2))+((r21*x8526*x8529)));
evalcond[7]=((((-1.0)*r21*x8527*x8539))+(((-1.0)*x8545))+((r20*x8544))+((r21*x8535))+((cj3*x8541))+((gconst1*x8528)));
evalcond[8]=((((-1.0)*x8545))+(((-1.0)*r12*sj3*x8542))+(((-1.0)*sj3*x8533*x8539))+((cj3*x8532))+((r10*x8527))+((r11*x8526*x8529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8546=((1.0)*gconst2);
CheckValue<IkReal> x8547 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x8546)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8547.valid){
continue;
}
CheckValue<IkReal> x8548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8546)))),-1);
if(!x8548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8547.value)+(((1.5707963267949)*(x8548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8549=IKcos(j4);
IkReal x8550=IKsin(j4);
IkReal x8551=(cj3*gconst1);
IkReal x8552=(r20*sj3);
IkReal x8553=(gconst1*sj3);
IkReal x8554=(sj1*sj2);
IkReal x8555=((1.0)*cj1);
IkReal x8556=(gconst2*r11);
IkReal x8557=(gconst2*r10);
IkReal x8558=(gconst2*r00);
IkReal x8559=(gconst2*sj3);
IkReal x8560=(cj3*gconst2);
IkReal x8561=(sj2*x8555);
IkReal x8562=((1.0)*cj2*sj1);
IkReal x8563=((1.0)*x8550);
IkReal x8564=(gconst1*x8549);
IkReal x8565=(r22*x8549);
IkReal x8566=((1.0)*x8549);
IkReal x8567=(cj3*x8549);
IkReal x8568=(x8550*x8560);
IkReal x8569=(x8562+x8561);
evalcond[0]=((((-1.0)*gconst2*r20*x8566))+((r22*x8550))+((r21*x8564)));
evalcond[1]=(((r12*x8550))+((r11*x8564))+(((-1.0)*x8557*x8566)));
evalcond[2]=((1.0)+(((-1.0)*x8558*x8566))+((r02*x8550))+((r01*x8564)));
evalcond[3]=(((r01*x8559))+((r00*x8553))+(((-1.0)*r01*x8551*x8563))+((r02*x8567))+((cj3*x8550*x8558)));
evalcond[4]=(((r00*x8551))+(((-1.0)*sj3*x8558*x8563))+(((-1.0)*r02*sj3*x8566))+((r01*x8550*x8553))+((r01*x8560)));
evalcond[5]=(x8554+((r10*x8553))+((sj3*x8556))+(((-1.0)*cj2*x8555))+((cj3*x8550*x8557))+(((-1.0)*r11*x8551*x8563))+((r12*x8567)));
evalcond[6]=((((-1.0)*sj3*x8565))+((r21*x8550*x8553))+(((-1.0)*gconst2*x8552*x8563))+((r20*x8551))+((cj1*cj2))+((r21*x8560))+(((-1.0)*x8554)));
evalcond[7]=(((r21*x8559))+((cj3*x8565))+(((-1.0)*r21*x8551*x8563))+((r20*x8568))+((gconst1*x8552))+(((-1.0)*x8569)));
evalcond[8]=(((r10*x8551))+((r11*x8550*x8553))+(((-1.0)*r12*sj3*x8566))+(((-1.0)*sj3*x8557*x8563))+((cj3*x8556))+(((-1.0)*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x8570=((-1.0)*r20);
IkReal x8571=((-1.0)*px);
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8570),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
IkReal x8572=((-1.0)*(x8573.value));
sj5=gconst1;
cj5=gconst2;
j5=x8572;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8571);
rxp1_1=(px*r21);
rxp1_2=(r11*x8571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8572;
IkReal gconst1=r21;
IkReal gconst2=x8570;
j4eval[0]=r02;
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8574=((-1.0)*r20);
IkReal x8575=((-1.0)*px);
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8574),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
IkReal x8576=((-1.0)*(x8577.value));
sj5=gconst1;
cj5=gconst2;
j5=x8576;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8575);
rxp1_1=(px*r21);
rxp1_2=(r11*x8575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8576;
IkReal gconst1=r21;
IkReal gconst2=x8574;
j4eval[0]=(((sj3*(r21*r21)))+sj3+(((-1.0)*sj3*(r10*r10))));
j4eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8578=((-1.0)*r20);
IkReal x8579=((-1.0)*px);
CheckValue<IkReal> x8581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8578),IKFAST_ATAN2_MAGTHRESH);
if(!x8581.valid){
continue;
}
IkReal x8580=((-1.0)*(x8581.value));
sj5=gconst1;
cj5=gconst2;
j5=x8580;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8579);
rxp1_1=(px*r21);
rxp1_2=(r11*x8579);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8580;
IkReal gconst1=r21;
IkReal gconst2=x8578;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8582=((-1.0)*r20);
IkReal x8583=((-1.0)*px);
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8582),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
IkReal x8584=((-1.0)*(x8585.value));
sj5=gconst1;
cj5=gconst2;
j5=x8584;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8583);
rxp1_1=(px*r21);
rxp1_2=(r11*x8583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8584;
IkReal gconst1=r21;
IkReal gconst2=x8582;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8586=((-1.0)*r20);
IkReal x8587=((-1.0)*px);
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8586),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
IkReal x8588=((-1.0)*(x8589.value));
sj5=gconst1;
cj5=gconst2;
j5=x8588;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8587);
rxp1_1=(px*r21);
rxp1_2=(r11*x8587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8588;
IkReal gconst1=r21;
IkReal gconst2=x8586;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8590=((-1.0)*r20);
IkReal x8591=((-1.0)*px);
CheckValue<IkReal> x8593 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8590),IKFAST_ATAN2_MAGTHRESH);
if(!x8593.valid){
continue;
}
IkReal x8592=((-1.0)*(x8593.value));
sj5=gconst1;
cj5=gconst2;
j5=x8592;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8591);
rxp1_1=(px*r21);
rxp1_2=(r11*x8591);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8592;
IkReal gconst1=r21;
IkReal gconst2=x8590;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8596.valid){
continue;
}
IkReal x8594=x8596.value;
IkReal x8595=(sj0*x8594);
sj4array[0]=((((-1.0)*cj1*cj2*x8595))+((sj1*sj2*x8595)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8597=IKcos(j4);
IkReal x8598=IKsin(j4);
IkReal x8599=(gconst1*x8597);
IkReal x8600=((1.0)*gconst2*x8597);
evalcond[0]=(r02*x8597);
evalcond[1]=((((-1.0)*sj0))+((r02*x8598)));
evalcond[2]=((((-1.0)*r20*x8600))+((r21*x8599)));
evalcond[3]=((((-1.0)*r10*x8600))+((r11*x8599)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r21*x8598))+((gconst2*r20*x8598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8602=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8602.valid){
continue;
}
IkReal x8601=x8602.value;
sj4array[0]=(((cj1*sj2*x8601))+((cj2*sj1*x8601)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8603=IKcos(j4);
IkReal x8604=IKsin(j4);
IkReal x8605=((1.0)*sj0);
IkReal x8606=(gconst2*r10);
IkReal x8607=(gconst1*x8603);
IkReal x8608=((1.0)*x8603);
evalcond[0]=(r02*x8603);
evalcond[1]=((((-1.0)*x8605))+((r02*x8604)));
evalcond[2]=(((r21*x8607))+(((-1.0)*gconst2*r20*x8608)));
evalcond[3]=(((r11*x8607))+(((-1.0)*x8606*x8608)));
evalcond[4]=(((cj1*cj2*sj0))+((x8604*x8606))+(((-1.0)*gconst1*r11*x8604))+(((-1.0)*sj1*sj2*x8605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8609=IKPowWithIntegerCheck(r02,-1);
if(!x8609.valid){
continue;
}
sj4array[0]=(sj0*(x8609.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8610=IKcos(j4);
IkReal x8611=IKsin(j4);
IkReal x8612=(gconst2*r10);
IkReal x8613=((1.0)*sj1);
IkReal x8614=(gconst2*r20);
IkReal x8615=((1.0)*x8610);
IkReal x8616=(gconst1*x8610);
IkReal x8617=((1.0)*gconst1*x8611);
evalcond[0]=(r02*x8610);
evalcond[1]=((((-1.0)*x8614*x8615))+((r21*x8616)));
evalcond[2]=((((-1.0)*x8612*x8615))+((r11*x8616)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r21*x8617))+((x8611*x8614))+(((-1.0)*cj2*x8613)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x8613))+(((-1.0)*r11*x8617))+((x8611*x8612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8618=((-1.0)*r20);
IkReal x8619=((-1.0)*px);
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal x8620=((-1.0)*(x8621.value));
sj5=gconst1;
cj5=gconst2;
j5=x8620;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8619);
rxp1_1=(px*r21);
rxp1_2=(r11*x8619);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8620;
IkReal gconst1=r21;
IkReal gconst2=x8618;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8622=((-1.0)*r20);
IkReal x8623=((-1.0)*px);
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8622),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
IkReal x8624=((-1.0)*(x8625.value));
sj5=gconst1;
cj5=gconst2;
j5=x8624;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8623);
rxp1_1=(px*r21);
rxp1_2=(r11*x8623);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8624;
IkReal gconst1=r21;
IkReal gconst2=x8622;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8626=((-1.0)*r20);
IkReal x8627=((-1.0)*px);
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8626),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
IkReal x8628=((-1.0)*(x8629.value));
sj5=gconst1;
cj5=gconst2;
j5=x8628;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8627);
rxp1_1=(px*r21);
rxp1_2=(r11*x8627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x8628;
IkReal gconst1=r21;
IkReal gconst2=x8626;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8632=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8632.valid){
continue;
}
IkReal x8630=x8632.value;
IkReal x8631=(sj0*x8630);
sj4array[0]=((((-1.0)*cj1*cj2*x8631))+((sj1*sj2*x8631)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8633=IKcos(j4);
IkReal x8634=IKsin(j4);
IkReal x8635=(gconst1*r21);
IkReal x8636=((1.0)*gconst2*x8633);
evalcond[0]=((-1.0)*r02*x8633);
evalcond[1]=((((-1.0)*sj0))+((r02*x8634)));
evalcond[2]=(((x8633*x8635))+(((-1.0)*r20*x8636)));
evalcond[3]=((((-1.0)*r10*x8636))+((gconst1*r11*x8633)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x8634*x8635))+(((-1.0)*gconst2*r20*x8634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8638=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8638.valid){
continue;
}
IkReal x8637=x8638.value;
sj4array[0]=(((cj2*sj1*x8637))+((cj1*sj2*x8637)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8639=IKcos(j4);
IkReal x8640=IKsin(j4);
IkReal x8641=((1.0)*sj0);
IkReal x8642=((1.0)*gconst2*r10);
IkReal x8643=(gconst1*x8639);
evalcond[0]=((-1.0)*r02*x8639);
evalcond[1]=(((r02*x8640))+(((-1.0)*x8641)));
evalcond[2]=(((r21*x8643))+(((-1.0)*gconst2*r20*x8639)));
evalcond[3]=((((-1.0)*x8639*x8642))+((r11*x8643)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x8641))+(((-1.0)*x8640*x8642))+((gconst1*r11*x8640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(r02,-1);
if(!x8644.valid){
continue;
}
sj4array[0]=(sj0*(x8644.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8645=IKcos(j4);
IkReal x8646=IKsin(j4);
IkReal x8647=(gconst1*r21);
IkReal x8648=((1.0)*sj1);
IkReal x8649=(gconst1*r11);
IkReal x8650=((1.0)*gconst2*r10);
IkReal x8651=((1.0)*gconst2*r20);
evalcond[0]=((-1.0)*r02*x8645);
evalcond[1]=((((-1.0)*x8645*x8651))+((x8645*x8647)));
evalcond[2]=((((-1.0)*x8645*x8650))+((x8645*x8649)));
evalcond[3]=((((-1.0)*x8646*x8651))+((x8646*x8647))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8648)));
evalcond[4]=((((-1.0)*x8646*x8650))+((x8646*x8649))+((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x8648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(r02,-1);
if(!x8653.valid){
continue;
}
IkReal x8652=x8653.value;
CheckValue<IkReal> x8654=IKPowWithIntegerCheck(sj3,-1);
if(!x8654.valid){
continue;
}
if( IKabs((sj0*x8652)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x8652*(x8654.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x8652))+IKsqr((x8652*(x8654.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x8652), (x8652*(x8654.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8655=IKcos(j4);
IkReal x8656=IKsin(j4);
IkReal x8657=(cj3*gconst1);
IkReal x8658=(r20*sj3);
IkReal x8659=(gconst1*r21);
IkReal x8660=(cj2*sj0);
IkReal x8661=(r11*sj3);
IkReal x8662=((1.0)*sj0);
IkReal x8663=((1.0)*sj2);
IkReal x8664=(r10*sj3);
IkReal x8665=(cj0*cj2);
IkReal x8666=(cj3*gconst2);
IkReal x8667=(cj1*sj2);
IkReal x8668=((1.0)*x8656);
IkReal x8669=(r02*x8655);
IkReal x8670=((1.0)*gconst2*x8655);
evalcond[0]=(((r02*x8656))+(((-1.0)*x8662)));
evalcond[1]=(((x8655*x8659))+(((-1.0)*r20*x8670)));
evalcond[2]=(cj0+((gconst1*r11*x8655))+(((-1.0)*r10*x8670)));
evalcond[3]=(((sj1*x8665))+((cj0*x8667))+(((-1.0)*sj3*x8669)));
evalcond[4]=(((cj1*x8665))+(((-1.0)*cj0*sj1*x8663))+((cj3*x8669)));
evalcond[5]=((((-1.0)*sj1*x8663))+((sj3*x8656*x8659))+((cj1*cj2))+(((-1.0)*gconst2*x8658*x8668))+((r20*x8657))+((r21*x8666)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x8657*x8668))+(((-1.0)*cj1*x8663))+((r20*x8656*x8666))+((gconst1*x8658)));
evalcond[7]=(((sj1*x8660))+((sj0*x8667))+((r10*x8657))+((r11*x8666))+((gconst1*x8656*x8661))+(((-1.0)*gconst2*x8664*x8668)));
evalcond[8]=(((gconst2*x8661))+(((-1.0)*r11*x8657*x8668))+((gconst1*x8664))+((cj1*x8660))+((r10*x8656*x8666))+(((-1.0)*sj1*sj2*x8662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8671=((1.0)*gconst2);
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x8671))+((gconst1*r21*sj3))),-1);
if(!x8672.valid){
continue;
}
CheckValue<IkReal> x8673=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x8671))),-1);
if(!x8673.valid){
continue;
}
if( IKabs(((x8672.value)*(((((-1.0)*cj3*r21*x8671))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8673.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8672.value)*(((((-1.0)*cj3*r21*x8671))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20))))))+IKsqr(((-1.0)*cj0*(x8673.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x8672.value)*(((((-1.0)*cj3*r21*x8671))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst1*r20))))), ((-1.0)*cj0*(x8673.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8674=IKcos(j4);
IkReal x8675=IKsin(j4);
IkReal x8676=(cj3*gconst1);
IkReal x8677=(r20*sj3);
IkReal x8678=(gconst1*r21);
IkReal x8679=(cj2*sj0);
IkReal x8680=(r11*sj3);
IkReal x8681=((1.0)*sj0);
IkReal x8682=((1.0)*sj2);
IkReal x8683=(r10*sj3);
IkReal x8684=(cj0*cj2);
IkReal x8685=(cj3*gconst2);
IkReal x8686=(cj1*sj2);
IkReal x8687=((1.0)*x8675);
IkReal x8688=(r02*x8674);
IkReal x8689=((1.0)*gconst2*x8674);
evalcond[0]=(((r02*x8675))+(((-1.0)*x8681)));
evalcond[1]=((((-1.0)*r20*x8689))+((x8674*x8678)));
evalcond[2]=(cj0+((gconst1*r11*x8674))+(((-1.0)*r10*x8689)));
evalcond[3]=((((-1.0)*sj3*x8688))+((sj1*x8684))+((cj0*x8686)));
evalcond[4]=(((cj1*x8684))+((cj3*x8688))+(((-1.0)*cj0*sj1*x8682)));
evalcond[5]=(((r20*x8676))+(((-1.0)*sj1*x8682))+((sj3*x8675*x8678))+(((-1.0)*gconst2*x8677*x8687))+((cj1*cj2))+((r21*x8685)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+((gconst1*x8677))+(((-1.0)*r21*x8676*x8687))+(((-1.0)*cj1*x8682))+((r20*x8675*x8685)));
evalcond[7]=(((sj1*x8679))+((r11*x8685))+(((-1.0)*gconst2*x8683*x8687))+((r10*x8676))+((gconst1*x8675*x8680))+((sj0*x8686)));
evalcond[8]=(((gconst2*x8680))+((r10*x8675*x8685))+(((-1.0)*r11*x8676*x8687))+((cj1*x8679))+((gconst1*x8683))+(((-1.0)*sj1*sj2*x8681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8690=IKPowWithIntegerCheck(r02,-1);
if(!x8690.valid){
continue;
}
CheckValue<IkReal> x8691=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8691.valid){
continue;
}
if( IKabs((sj0*(x8690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x8691.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x8690.value)))+IKsqr(((-1.0)*cj0*(x8691.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x8690.value)), ((-1.0)*cj0*(x8691.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8692=IKcos(j4);
IkReal x8693=IKsin(j4);
IkReal x8694=(cj3*gconst1);
IkReal x8695=(r20*sj3);
IkReal x8696=(gconst1*r21);
IkReal x8697=(cj2*sj0);
IkReal x8698=(r11*sj3);
IkReal x8699=((1.0)*sj0);
IkReal x8700=((1.0)*sj2);
IkReal x8701=(r10*sj3);
IkReal x8702=(cj0*cj2);
IkReal x8703=(cj3*gconst2);
IkReal x8704=(cj1*sj2);
IkReal x8705=((1.0)*x8693);
IkReal x8706=(r02*x8692);
IkReal x8707=((1.0)*gconst2*x8692);
evalcond[0]=((((-1.0)*x8699))+((r02*x8693)));
evalcond[1]=((((-1.0)*r20*x8707))+((x8692*x8696)));
evalcond[2]=(((gconst1*r11*x8692))+cj0+(((-1.0)*r10*x8707)));
evalcond[3]=(((cj0*x8704))+(((-1.0)*sj3*x8706))+((sj1*x8702)));
evalcond[4]=(((cj1*x8702))+(((-1.0)*cj0*sj1*x8700))+((cj3*x8706)));
evalcond[5]=((((-1.0)*gconst2*x8695*x8705))+((r21*x8703))+(((-1.0)*sj1*x8700))+((sj3*x8693*x8696))+((r20*x8694))+((cj1*cj2)));
evalcond[6]=(((gconst2*r21*sj3))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x8700))+(((-1.0)*r21*x8694*x8705))+((r20*x8693*x8703))+((gconst1*x8695)));
evalcond[7]=(((r11*x8703))+(((-1.0)*gconst2*x8701*x8705))+((gconst1*x8693*x8698))+((sj1*x8697))+((r10*x8694))+((sj0*x8704)));
evalcond[8]=(((gconst1*x8701))+((r10*x8693*x8703))+((gconst2*x8698))+(((-1.0)*sj1*sj2*x8699))+(((-1.0)*r11*x8694*x8705))+((cj1*x8697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8708=gconst1*gconst1;
IkReal x8709=r21*r21;
IkReal x8710=gconst2*gconst2;
IkReal x8711=r20*r20;
IkReal x8712=(gconst1*gconst2);
IkReal x8713=(cj2*sj1);
IkReal x8714=((1.0)*r21);
IkReal x8715=(gconst2*r20);
IkReal x8716=(r20*r21);
IkReal x8717=(r20*sj3);
IkReal x8718=(cj1*sj2);
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal((((x8713*x8715))+(((-1.0)*sj3*x8711*x8712))+((sj3*x8708*x8716))+(((-1.0)*x8710*x8714*x8717))+((x8715*x8718))+((sj3*x8709*x8712))+(((-1.0)*gconst1*x8713*x8714))+(((-1.0)*gconst1*x8714*x8718)))),IkReal(((((-1.0)*gconst2*r22*sj3*x8714))+(((-1.0)*gconst1*r22*x8717))+((r22*x8718))+((r22*x8713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
CheckValue<IkReal> x8720=IKPowWithIntegerCheck(IKsign((((cj3*x8708*x8709))+(((-2.0)*cj3*x8712*x8716))+((cj3*(r22*r22)))+((cj3*x8710*x8711)))),-1);
if(!x8720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8719.value)+(((1.5707963267949)*(x8720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8721=IKcos(j4);
IkReal x8722=IKsin(j4);
IkReal x8723=(cj3*gconst1);
IkReal x8724=(r20*sj3);
IkReal x8725=(cj2*sj0);
IkReal x8726=(gconst1*sj3);
IkReal x8727=((1.0)*sj0);
IkReal x8728=((1.0)*sj2);
IkReal x8729=(gconst2*r11);
IkReal x8730=(cj0*cj2);
IkReal x8731=(gconst2*r10);
IkReal x8732=(gconst2*r00);
IkReal x8733=(gconst2*r20);
IkReal x8734=(cj1*sj2);
IkReal x8735=(gconst2*r01);
IkReal x8736=(gconst2*r21);
IkReal x8737=((1.0)*x8722);
IkReal x8738=(gconst1*x8721);
IkReal x8739=(r22*x8721);
IkReal x8740=((1.0)*x8721);
IkReal x8741=(cj3*x8722);
IkReal x8742=(cj3*x8721);
evalcond[0]=(((r21*x8738))+((r22*x8722))+(((-1.0)*x8733*x8740)));
evalcond[1]=(((r11*x8738))+cj0+((r12*x8722))+(((-1.0)*x8731*x8740)));
evalcond[2]=(((r02*x8722))+(((-1.0)*x8727))+(((-1.0)*x8732*x8740))+((r01*x8738)));
evalcond[3]=(((r21*x8722*x8726))+(((-1.0)*sj1*x8728))+((cj3*x8736))+(((-1.0)*sj3*x8739))+((r20*x8723))+(((-1.0)*gconst2*x8724*x8737))+((cj1*cj2)));
evalcond[4]=(((gconst1*x8724))+(((-1.0)*cj2*sj1))+((sj3*x8736))+(((-1.0)*cj1*x8728))+((cj3*x8739))+((x8733*x8741))+(((-1.0)*r21*x8723*x8737)));
evalcond[5]=(((r01*x8722*x8726))+((cj0*x8734))+(((-1.0)*r02*sj3*x8740))+((cj3*x8735))+((r00*x8723))+(((-1.0)*sj3*x8732*x8737))+((sj1*x8730)));
evalcond[6]=(((cj1*x8730))+(((-1.0)*cj0*sj1*x8728))+((sj3*x8735))+(((-1.0)*r01*x8723*x8737))+((r02*x8742))+((x8732*x8741))+((r00*x8726)));
evalcond[7]=(((sj1*x8725))+(((-1.0)*sj3*x8731*x8737))+((r10*x8723))+((cj3*x8729))+(((-1.0)*r12*sj3*x8740))+((r11*x8722*x8726))+((sj0*x8734)));
evalcond[8]=(((x8731*x8741))+((r12*x8742))+((cj1*x8725))+(((-1.0)*sj1*sj2*x8727))+((r10*x8726))+(((-1.0)*r11*x8723*x8737))+((sj3*x8729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
CheckValue<IkReal> x8744=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8743.value)+(((1.5707963267949)*(x8744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8745=IKcos(j4);
IkReal x8746=IKsin(j4);
IkReal x8747=(cj3*gconst1);
IkReal x8748=(r20*sj3);
IkReal x8749=(cj2*sj0);
IkReal x8750=(gconst1*sj3);
IkReal x8751=((1.0)*sj0);
IkReal x8752=((1.0)*sj2);
IkReal x8753=(gconst2*r11);
IkReal x8754=(cj0*cj2);
IkReal x8755=(gconst2*r10);
IkReal x8756=(gconst2*r00);
IkReal x8757=(gconst2*r20);
IkReal x8758=(cj1*sj2);
IkReal x8759=(gconst2*r01);
IkReal x8760=(gconst2*r21);
IkReal x8761=((1.0)*x8746);
IkReal x8762=(gconst1*x8745);
IkReal x8763=(r22*x8745);
IkReal x8764=((1.0)*x8745);
IkReal x8765=(cj3*x8746);
IkReal x8766=(cj3*x8745);
evalcond[0]=((((-1.0)*x8757*x8764))+((r21*x8762))+((r22*x8746)));
evalcond[1]=(((r12*x8746))+cj0+(((-1.0)*x8755*x8764))+((r11*x8762)));
evalcond[2]=((((-1.0)*x8756*x8764))+((r01*x8762))+(((-1.0)*x8751))+((r02*x8746)));
evalcond[3]=((((-1.0)*sj1*x8752))+((r20*x8747))+(((-1.0)*gconst2*x8748*x8761))+((cj3*x8760))+(((-1.0)*sj3*x8763))+((r21*x8746*x8750))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r21*x8747*x8761))+((sj3*x8760))+(((-1.0)*cj2*sj1))+((cj3*x8763))+(((-1.0)*cj1*x8752))+((gconst1*x8748))+((x8757*x8765)));
evalcond[5]=((((-1.0)*r02*sj3*x8764))+((r00*x8747))+(((-1.0)*sj3*x8756*x8761))+((sj1*x8754))+((cj0*x8758))+((cj3*x8759))+((r01*x8746*x8750)));
evalcond[6]=(((x8756*x8765))+((sj3*x8759))+((cj1*x8754))+((r00*x8750))+((r02*x8766))+(((-1.0)*r01*x8747*x8761))+(((-1.0)*cj0*sj1*x8752)));
evalcond[7]=(((sj0*x8758))+(((-1.0)*r12*sj3*x8764))+(((-1.0)*sj3*x8755*x8761))+((r10*x8747))+((sj1*x8749))+((cj3*x8753))+((r11*x8746*x8750)));
evalcond[8]=(((r10*x8750))+(((-1.0)*r11*x8747*x8761))+((sj3*x8753))+((cj1*x8749))+(((-1.0)*sj1*sj2*x8751))+((r12*x8766))+((x8755*x8765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8767=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8767.valid){
continue;
}
CheckValue<IkReal> x8768 = IKatan2WithCheck(IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*gconst2*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8767.value)))+(x8768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x8769=IKcos(j4);
IkReal x8770=IKsin(j4);
IkReal x8771=(cj3*gconst1);
IkReal x8772=(r20*sj3);
IkReal x8773=(cj2*sj0);
IkReal x8774=(gconst1*sj3);
IkReal x8775=((1.0)*sj0);
IkReal x8776=((1.0)*sj2);
IkReal x8777=(gconst2*r11);
IkReal x8778=(cj0*cj2);
IkReal x8779=(gconst2*r10);
IkReal x8780=(gconst2*r00);
IkReal x8781=(gconst2*r20);
IkReal x8782=(cj1*sj2);
IkReal x8783=(gconst2*r01);
IkReal x8784=(gconst2*r21);
IkReal x8785=((1.0)*x8770);
IkReal x8786=(gconst1*x8769);
IkReal x8787=(r22*x8769);
IkReal x8788=((1.0)*x8769);
IkReal x8789=(cj3*x8770);
IkReal x8790=(cj3*x8769);
evalcond[0]=(((r21*x8786))+(((-1.0)*x8781*x8788))+((r22*x8770)));
evalcond[1]=(((r11*x8786))+cj0+(((-1.0)*x8779*x8788))+((r12*x8770)));
evalcond[2]=((((-1.0)*x8780*x8788))+(((-1.0)*x8775))+((r01*x8786))+((r02*x8770)));
evalcond[3]=((((-1.0)*gconst2*x8772*x8785))+((r21*x8770*x8774))+((cj3*x8784))+(((-1.0)*sj3*x8787))+((r20*x8771))+((cj1*cj2))+(((-1.0)*sj1*x8776)));
evalcond[4]=((((-1.0)*cj1*x8776))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x8771*x8785))+((cj3*x8787))+((sj3*x8784))+((x8781*x8789))+((gconst1*x8772)));
evalcond[5]=(((r00*x8771))+((sj1*x8778))+(((-1.0)*sj3*x8780*x8785))+((cj0*x8782))+((cj3*x8783))+(((-1.0)*r02*sj3*x8788))+((r01*x8770*x8774)));
evalcond[6]=(((cj1*x8778))+((r00*x8774))+((r02*x8790))+((sj3*x8783))+(((-1.0)*r01*x8771*x8785))+((x8780*x8789))+(((-1.0)*cj0*sj1*x8776)));
evalcond[7]=(((cj3*x8777))+((sj1*x8773))+((r11*x8770*x8774))+(((-1.0)*r12*sj3*x8788))+((r10*x8771))+(((-1.0)*sj3*x8779*x8785))+((sj0*x8782)));
evalcond[8]=(((sj3*x8777))+((r12*x8790))+((cj1*x8773))+(((-1.0)*r11*x8771*x8785))+((r10*x8774))+(((-1.0)*sj1*sj2*x8775))+((x8779*x8789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8791=((-1.0)*r21);
IkReal x8793 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8793)==0){
continue;
}
IkReal x8792=pow(x8793,-0.5);
CheckValue<IkReal> x8794 = IKatan2WithCheck(IkReal(x8791),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8794.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x8794.value))));
IkReal gconst4=(x8791*x8792);
IkReal gconst5=((1.0)*r20*x8792);
CheckValue<IkReal> x8795 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8795.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8795.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8796=((-1.0)*r21);
CheckValue<IkReal> x8799 = IKatan2WithCheck(IkReal(x8796),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8799.valid){
continue;
}
IkReal x8797=((1.0)*(x8799.value));
IkReal x8798=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8797)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8797)));
IkReal gconst4=(x8796*x8798);
IkReal gconst5=((1.0)*r20*x8798);
IkReal x8800=r22*r22;
IkReal x8801=((1.0)*x8800);
CheckValue<IkReal> x8805=IKPowWithIntegerCheck(((-1.0)+x8800),-1);
if(!x8805.valid){
continue;
}
IkReal x8802=x8805.value;
if((((1.0)+(((-1.0)*x8801)))) < -0.00001)
continue;
IkReal x8803=IKsqrt(((1.0)+(((-1.0)*x8801))));
IkReal x8804=(cj0*x8802*x8803);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x8804+(((-1.0)*x8801*x8804))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8806=((-1.0)*r21);
CheckValue<IkReal> x8809 = IKatan2WithCheck(IkReal(x8806),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8809.valid){
continue;
}
IkReal x8807=((1.0)*(x8809.value));
IkReal x8808=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8807)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8807)));
IkReal gconst4=(x8806*x8808);
IkReal gconst5=((1.0)*r20*x8808);
IkReal x8810=r22*r22;
IkReal x8811=((1.0)*x8810);
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(((-1.0)+x8810),-1);
if(!x8815.valid){
continue;
}
IkReal x8812=x8815.value;
if((((1.0)+(((-1.0)*x8811)))) < -0.00001)
continue;
IkReal x8813=IKsqrt(((1.0)+(((-1.0)*x8811))));
IkReal x8814=(sj0*x8812*x8813);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8814+(((-1.0)*x8811*x8814))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8816=((-1.0)*r21);
CheckValue<IkReal> x8819 = IKatan2WithCheck(IkReal(x8816),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8819.valid){
continue;
}
IkReal x8817=((1.0)*(x8819.value));
IkReal x8818=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8817)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8817)));
IkReal gconst4=(x8816*x8818);
IkReal gconst5=((1.0)*r20*x8818);
IkReal x8820=r22*r22;
IkReal x8821=((1.0)*r12*sj0);
IkReal x8822=((1.0)*cj0*r02);
CheckValue<IkReal> x8826=IKPowWithIntegerCheck(((-1.0)+x8820),-1);
if(!x8826.valid){
continue;
}
IkReal x8823=x8826.value;
if((((1.0)+(((-1.0)*x8820)))) < -0.00001)
continue;
IkReal x8824=IKsqrt(((1.0)+(((-1.0)*x8820))));
IkReal x8825=(r22*x8823*x8824);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x8821*x8825))+(((-1.0)*x8822*x8825)))))+(IKabs(((((-1.0)*x8822))+(((-1.0)*x8821))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8827=((-1.0)*r21);
CheckValue<IkReal> x8830 = IKatan2WithCheck(IkReal(x8827),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8830.valid){
continue;
}
IkReal x8828=((1.0)*(x8830.value));
IkReal x8829=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8828)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8828)));
IkReal gconst4=(x8827*x8829);
IkReal gconst5=((1.0)*r20*x8829);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8831=((-1.0)*r21);
CheckValue<IkReal> x8834 = IKatan2WithCheck(IkReal(x8831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8834.valid){
continue;
}
IkReal x8832=((1.0)*(x8834.value));
IkReal x8833=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8832)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8832)));
IkReal gconst4=(x8831*x8833);
IkReal gconst5=((1.0)*r20*x8833);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8835=((-1.0)*r21);
CheckValue<IkReal> x8838 = IKatan2WithCheck(IkReal(x8835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8838.valid){
continue;
}
IkReal x8836=((1.0)*(x8838.value));
IkReal x8837=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8836)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8836)));
IkReal gconst4=(x8835*x8837);
IkReal gconst5=((1.0)*r20*x8837);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8839=((-1.0)*r21);
CheckValue<IkReal> x8842 = IKatan2WithCheck(IkReal(x8839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8842.valid){
continue;
}
IkReal x8840=((1.0)*(x8842.value));
IkReal x8841=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8840)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8840)));
IkReal gconst4=(x8839*x8841);
IkReal gconst5=((1.0)*r20*x8841);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8843=((-1.0)*r21);
CheckValue<IkReal> x8846 = IKatan2WithCheck(IkReal(x8843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8846.valid){
continue;
}
IkReal x8844=((1.0)*(x8846.value));
IkReal x8845=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8844)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8844)));
IkReal gconst4=(x8843*x8845);
IkReal gconst5=((1.0)*r20*x8845);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8847=((-1.0)*r21);
CheckValue<IkReal> x8850 = IKatan2WithCheck(IkReal(x8847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8850.valid){
continue;
}
IkReal x8848=((1.0)*(x8850.value));
IkReal x8849=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8848)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8848)));
IkReal gconst4=(x8847*x8849);
IkReal gconst5=((1.0)*r20*x8849);
IkReal x8851=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8855=IKPowWithIntegerCheck(x8851,-1);
if(!x8855.valid){
continue;
}
IkReal x8852=x8855.value;
IkReal x8853=((1.0)*x8852);
IkReal x8854=((((-2.0)*r10*r11*r20*r21*x8852))+(((-1.0)*(r12*r12)))+(((-1.0)*x8853*(r11*r11)*(r21*r21)))+(((-1.0)*x8853*(r10*r10)*(r20*r20))));
j4eval[0]=x8854;
j4eval[1]=r12;
j4eval[2]=x8851;
j4eval[3]=IKsign(x8854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8856=(gconst5*r10);
IkReal x8857=(gconst4*r11);
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal(r12),IkReal((x8857+(((-1.0)*x8856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8856*x8856)))+(((-1.0)*(x8857*x8857)))+(((-1.0)*(r12*r12)))+(((2.0)*x8856*x8857)))),-1);
if(!x8859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8858.value)+(((1.5707963267949)*(x8859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8860=IKcos(j4);
IkReal x8861=IKsin(j4);
IkReal x8862=(gconst5*r10);
IkReal x8863=(gconst5*r00);
IkReal x8864=(gconst5*r20);
IkReal x8865=((1.0)*x8860);
IkReal x8866=(gconst4*x8861);
IkReal x8867=(gconst4*x8860);
IkReal x8868=((1.0)*x8861);
evalcond[0]=(((r21*x8867))+(((-1.0)*x8864*x8865))+((r22*x8861)));
evalcond[1]=((((-1.0)*x8863*x8865))+((r02*x8861))+((r01*x8867)));
evalcond[2]=((1.0)+((r12*x8861))+((r11*x8867))+(((-1.0)*x8862*x8865)));
evalcond[3]=(((r11*x8866))+(((-1.0)*r12*x8865))+(((-1.0)*x8862*x8868)));
evalcond[4]=((((-1.0)*x8863*x8868))+((cj2*sj1))+((r01*x8866))+((cj1*sj2))+(((-1.0)*r02*x8865)));
evalcond[5]=(((r21*x8866))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x8865))+(((-1.0)*x8864*x8868))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8869=((1.0)*gconst5);
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8869)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
CheckValue<IkReal> x8871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8869))+(((-1.0)*gconst4*r20)))),-1);
if(!x8871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8870.value)+(((1.5707963267949)*(x8871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8872=IKcos(j4);
IkReal x8873=IKsin(j4);
IkReal x8874=(gconst5*r10);
IkReal x8875=(gconst5*r00);
IkReal x8876=(gconst5*r20);
IkReal x8877=((1.0)*x8872);
IkReal x8878=(gconst4*x8873);
IkReal x8879=(gconst4*x8872);
IkReal x8880=((1.0)*x8873);
evalcond[0]=((((-1.0)*x8876*x8877))+((r21*x8879))+((r22*x8873)));
evalcond[1]=((((-1.0)*x8875*x8877))+((r02*x8873))+((r01*x8879)));
evalcond[2]=((1.0)+((r11*x8879))+((r12*x8873))+(((-1.0)*x8874*x8877)));
evalcond[3]=(((r11*x8878))+(((-1.0)*r12*x8877))+(((-1.0)*x8874*x8880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8877))+((cj1*sj2))+((r01*x8878))+(((-1.0)*x8875*x8880)));
evalcond[5]=((((-1.0)*r22*x8877))+(((-1.0)*x8876*x8880))+(((-1.0)*sj1*sj2))+((r21*x8878))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
CheckValue<IkReal> x8882=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8881.value)+(((1.5707963267949)*(x8882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8883=IKcos(j4);
IkReal x8884=IKsin(j4);
IkReal x8885=(gconst5*r10);
IkReal x8886=(gconst5*r00);
IkReal x8887=(gconst5*r20);
IkReal x8888=((1.0)*x8883);
IkReal x8889=(gconst4*x8884);
IkReal x8890=(gconst4*x8883);
IkReal x8891=((1.0)*x8884);
evalcond[0]=(((r22*x8884))+((r21*x8890))+(((-1.0)*x8887*x8888)));
evalcond[1]=(((r01*x8890))+((r02*x8884))+(((-1.0)*x8886*x8888)));
evalcond[2]=((1.0)+((r11*x8890))+(((-1.0)*x8885*x8888))+((r12*x8884)));
evalcond[3]=((((-1.0)*r12*x8888))+(((-1.0)*x8885*x8891))+((r11*x8889)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x8888))+(((-1.0)*x8886*x8891))+((r01*x8889)));
evalcond[5]=((((-1.0)*r22*x8888))+((r21*x8889))+(((-1.0)*sj1*sj2))+(((-1.0)*x8887*x8891))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8892=((-1.0)*r21);
CheckValue<IkReal> x8895 = IKatan2WithCheck(IkReal(x8892),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8895.valid){
continue;
}
IkReal x8893=((1.0)*(x8895.value));
IkReal x8894=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8893)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8893)));
IkReal gconst4=(x8892*x8894);
IkReal gconst5=((1.0)*r20*x8894);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8896=((-1.0)*r21);
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(x8896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
IkReal x8897=((1.0)*(x8899.value));
IkReal x8898=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8897)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8897)));
IkReal gconst4=(x8896*x8898);
IkReal gconst5=((1.0)*r20*x8898);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8900=((-1.0)*r21);
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(x8900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
IkReal x8901=((1.0)*(x8903.value));
IkReal x8902=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8901)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8901)));
IkReal gconst4=(x8900*x8902);
IkReal gconst5=((1.0)*r20*x8902);
IkReal x8904=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(x8904,-1);
if(!x8908.valid){
continue;
}
IkReal x8905=x8908.value;
IkReal x8906=((1.0)*x8905);
IkReal x8907=((((-1.0)*x8906*(r11*r11)*(r21*r21)))+(((-1.0)*x8906*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8905))+(((-1.0)*(r12*r12))));
j4eval[0]=x8907;
j4eval[1]=r12;
j4eval[2]=x8904;
j4eval[3]=IKsign(x8907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8909=(gconst5*r10);
IkReal x8910=(gconst4*r11);
CheckValue<IkReal> x8911=IKPowWithIntegerCheck(IKsign(((((2.0)*x8909*x8910))+(((-1.0)*(x8910*x8910)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8909*x8909))))),-1);
if(!x8911.valid){
continue;
}
CheckValue<IkReal> x8912 = IKatan2WithCheck(IkReal(r12),IkReal((x8910+(((-1.0)*x8909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8911.value)))+(x8912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8913=IKcos(j4);
IkReal x8914=IKsin(j4);
IkReal x8915=(gconst4*r21);
IkReal x8916=(gconst4*r11);
IkReal x8917=(gconst4*r01);
IkReal x8918=((1.0)*x8914);
IkReal x8919=(gconst5*x8914);
IkReal x8920=((1.0)*gconst5*x8913);
evalcond[0]=(((x8913*x8915))+(((-1.0)*r20*x8920))+((r22*x8914)));
evalcond[1]=(((x8913*x8917))+((r02*x8914))+(((-1.0)*r00*x8920)));
evalcond[2]=((((-1.0)*x8916*x8918))+((r12*x8913))+((r10*x8919)));
evalcond[3]=((1.0)+((x8913*x8916))+(((-1.0)*r10*x8920))+((r12*x8914)));
evalcond[4]=(((r00*x8919))+((cj2*sj1))+((cj1*sj2))+((r02*x8913))+(((-1.0)*x8917*x8918)));
evalcond[5]=(((r22*x8913))+(((-1.0)*sj1*sj2))+(((-1.0)*x8915*x8918))+((cj1*cj2))+((r20*x8919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8921=((1.0)*gconst5);
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8921)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
CheckValue<IkReal> x8923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8921))+(((-1.0)*gconst4*r20)))),-1);
if(!x8923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8922.value)+(((1.5707963267949)*(x8923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8924=IKcos(j4);
IkReal x8925=IKsin(j4);
IkReal x8926=(gconst4*r21);
IkReal x8927=(gconst4*r11);
IkReal x8928=(gconst4*r01);
IkReal x8929=((1.0)*x8925);
IkReal x8930=(gconst5*x8925);
IkReal x8931=((1.0)*gconst5*x8924);
evalcond[0]=(((x8924*x8926))+(((-1.0)*r20*x8931))+((r22*x8925)));
evalcond[1]=(((x8924*x8928))+(((-1.0)*r00*x8931))+((r02*x8925)));
evalcond[2]=((((-1.0)*x8927*x8929))+((r12*x8924))+((r10*x8930)));
evalcond[3]=((1.0)+((x8924*x8927))+(((-1.0)*r10*x8931))+((r12*x8925)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x8924))+((r00*x8930))+(((-1.0)*x8928*x8929)));
evalcond[5]=((((-1.0)*x8926*x8929))+(((-1.0)*sj1*sj2))+((r22*x8924))+((r20*x8930))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8932 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8932.valid){
continue;
}
CheckValue<IkReal> x8933=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8932.value)+(((1.5707963267949)*(x8933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8934=IKcos(j4);
IkReal x8935=IKsin(j4);
IkReal x8936=(gconst4*r21);
IkReal x8937=(gconst4*r11);
IkReal x8938=(gconst4*r01);
IkReal x8939=((1.0)*x8935);
IkReal x8940=(gconst5*x8935);
IkReal x8941=((1.0)*gconst5*x8934);
evalcond[0]=(((x8934*x8936))+(((-1.0)*r20*x8941))+((r22*x8935)));
evalcond[1]=((((-1.0)*r00*x8941))+((x8934*x8938))+((r02*x8935)));
evalcond[2]=(((r12*x8934))+((r10*x8940))+(((-1.0)*x8937*x8939)));
evalcond[3]=((1.0)+((r12*x8935))+((x8934*x8937))+(((-1.0)*r10*x8941)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8938*x8939))+((r00*x8940))+((r02*x8934)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8936*x8939))+((r20*x8940))+((cj1*cj2))+((r22*x8934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8942=((-1.0)*r21);
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(x8942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
IkReal x8943=((1.0)*(x8945.value));
IkReal x8944=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8943)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8943)));
IkReal gconst4=(x8942*x8944);
IkReal gconst5=((1.0)*r20*x8944);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8946=((-1.0)*r21);
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(x8946),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8947=((1.0)*(x8949.value));
IkReal x8948=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8947)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8947)));
IkReal gconst4=(x8946*x8948);
IkReal gconst5=((1.0)*r20*x8948);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8950=((-1.0)*r21);
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(x8950),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8951=((1.0)*(x8953.value));
IkReal x8952=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8951)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8951)));
IkReal gconst4=(x8950*x8952);
IkReal gconst5=((1.0)*r20*x8952);
IkReal x8954=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8958=IKPowWithIntegerCheck(x8954,-1);
if(!x8958.valid){
continue;
}
IkReal x8955=x8958.value;
IkReal x8956=((1.0)*x8955);
IkReal x8957=((((-1.0)*x8956*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8955))+(((-1.0)*x8956*(r11*r11)*(r21*r21))));
j4eval[0]=x8957;
j4eval[1]=r12;
j4eval[2]=x8954;
j4eval[3]=IKsign(x8957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8959=(gconst5*r10);
IkReal x8960=(gconst4*r11);
CheckValue<IkReal> x8961=IKPowWithIntegerCheck(IKsign(((((2.0)*x8959*x8960))+(((-1.0)*(x8960*x8960)))+(((-1.0)*(x8959*x8959)))+(((-1.0)*(r12*r12))))),-1);
if(!x8961.valid){
continue;
}
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(r12),IkReal((x8960+(((-1.0)*x8959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8961.value)))+(x8962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8963=IKcos(j4);
IkReal x8964=IKsin(j4);
IkReal x8965=(gconst4*r21);
IkReal x8966=((1.0)*sj1);
IkReal x8967=(gconst4*r11);
IkReal x8968=(gconst4*r01);
IkReal x8969=((1.0)*x8964);
IkReal x8970=(gconst5*x8964);
IkReal x8971=((1.0)*gconst5*x8963);
evalcond[0]=(((r22*x8964))+(((-1.0)*r20*x8971))+((x8963*x8965)));
evalcond[1]=(((r02*x8964))+(((-1.0)*r00*x8971))+((x8963*x8968)));
evalcond[2]=(((r10*x8970))+((r12*x8963))+(((-1.0)*x8967*x8969)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8971))+((x8963*x8967))+((r12*x8964)));
evalcond[4]=((((-1.0)*sj2*x8966))+(((-1.0)*x8968*x8969))+((r02*x8963))+((r00*x8970))+((cj1*cj2)));
evalcond[5]=(((r22*x8963))+((r20*x8970))+(((-1.0)*x8965*x8969))+(((-1.0)*cj2*x8966))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8972=((1.0)*gconst5);
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8972))+(((-1.0)*gconst4*r20)))),-1);
if(!x8973.valid){
continue;
}
CheckValue<IkReal> x8974 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x8972)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8973.value)))+(x8974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8975=IKcos(j4);
IkReal x8976=IKsin(j4);
IkReal x8977=(gconst4*r21);
IkReal x8978=((1.0)*sj1);
IkReal x8979=(gconst4*r11);
IkReal x8980=(gconst4*r01);
IkReal x8981=((1.0)*x8976);
IkReal x8982=(gconst5*x8976);
IkReal x8983=((1.0)*gconst5*x8975);
evalcond[0]=((((-1.0)*r20*x8983))+((x8975*x8977))+((r22*x8976)));
evalcond[1]=(((x8975*x8980))+((r02*x8976))+(((-1.0)*r00*x8983)));
evalcond[2]=(((r12*x8975))+(((-1.0)*x8979*x8981))+((r10*x8982)));
evalcond[3]=((1.0)+((r12*x8976))+(((-1.0)*r10*x8983))+((x8975*x8979)));
evalcond[4]=(((r00*x8982))+(((-1.0)*x8980*x8981))+((cj1*cj2))+((r02*x8975))+(((-1.0)*sj2*x8978)));
evalcond[5]=((((-1.0)*cj2*x8978))+(((-1.0)*cj1*sj2))+(((-1.0)*x8977*x8981))+((r20*x8982))+((r22*x8975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x8985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8984.value)+(((1.5707963267949)*(x8985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8986=IKcos(j4);
IkReal x8987=IKsin(j4);
IkReal x8988=(gconst4*r21);
IkReal x8989=((1.0)*sj1);
IkReal x8990=(gconst4*r11);
IkReal x8991=(gconst4*r01);
IkReal x8992=((1.0)*x8987);
IkReal x8993=(gconst5*x8987);
IkReal x8994=((1.0)*gconst5*x8986);
evalcond[0]=(((r22*x8987))+((x8986*x8988))+(((-1.0)*r20*x8994)));
evalcond[1]=(((r02*x8987))+((x8986*x8991))+(((-1.0)*r00*x8994)));
evalcond[2]=((((-1.0)*x8990*x8992))+((r10*x8993))+((r12*x8986)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8994))+((x8986*x8990))+((r12*x8987)));
evalcond[4]=((((-1.0)*x8991*x8992))+(((-1.0)*sj2*x8989))+((r02*x8986))+((r00*x8993))+((cj1*cj2)));
evalcond[5]=(((r22*x8986))+((r20*x8993))+(((-1.0)*cj1*sj2))+(((-1.0)*x8988*x8992))+(((-1.0)*cj2*x8989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8995=((-1.0)*r21);
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal(x8995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
IkReal x8996=((1.0)*(x8998.value));
IkReal x8997=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x8996)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x8996)));
IkReal gconst4=(x8995*x8997);
IkReal gconst5=((1.0)*r20*x8997);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8999=((-1.0)*r21);
CheckValue<IkReal> x9002 = IKatan2WithCheck(IkReal(x8999),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9002.valid){
continue;
}
IkReal x9000=((1.0)*(x9002.value));
IkReal x9001=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9000)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9000)));
IkReal gconst4=(x8999*x9001);
IkReal gconst5=((1.0)*r20*x9001);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9003=((-1.0)*r21);
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(x9003),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
IkReal x9004=((1.0)*(x9006.value));
IkReal x9005=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9004)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9004)));
IkReal gconst4=(x9003*x9005);
IkReal gconst5=((1.0)*r20*x9005);
IkReal x9007=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9011=IKPowWithIntegerCheck(x9007,-1);
if(!x9011.valid){
continue;
}
IkReal x9008=x9011.value;
IkReal x9009=((1.0)*x9008);
IkReal x9010=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9008))+(((-1.0)*x9009*(r10*r10)*(r20*r20)))+(((-1.0)*x9009*(r11*r11)*(r21*r21))));
j4eval[0]=x9010;
j4eval[1]=r12;
j4eval[2]=x9007;
j4eval[3]=IKsign(x9010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9012=(gconst5*r10);
IkReal x9013=(gconst4*r11);
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9012))+x9013)),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9013*x9013)))+(((2.0)*x9012*x9013))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9012*x9012))))),-1);
if(!x9015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9014.value)+(((1.5707963267949)*(x9015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9016=IKcos(j4);
IkReal x9017=IKsin(j4);
IkReal x9018=(gconst4*r11);
IkReal x9019=(gconst5*r10);
IkReal x9020=((1.0)*sj2);
IkReal x9021=(gconst5*r00);
IkReal x9022=(gconst5*r20);
IkReal x9023=((1.0)*x9016);
IkReal x9024=(gconst4*x9016);
IkReal x9025=((1.0)*x9017);
IkReal x9026=(gconst4*x9017);
evalcond[0]=((((-1.0)*x9022*x9023))+((r21*x9024))+((r22*x9017)));
evalcond[1]=(((r01*x9024))+(((-1.0)*x9021*x9023))+((r02*x9017)));
evalcond[2]=((1.0)+((x9016*x9018))+((r12*x9017))+(((-1.0)*x9019*x9023)));
evalcond[3]=((((-1.0)*r12*x9023))+((x9017*x9018))+(((-1.0)*x9019*x9025)));
evalcond[4]=((((-1.0)*sj1*x9020))+((r01*x9026))+(((-1.0)*x9021*x9025))+((cj1*cj2))+(((-1.0)*r02*x9023)));
evalcond[5]=((((-1.0)*x9022*x9025))+(((-1.0)*cj2*sj1))+((r21*x9026))+(((-1.0)*cj1*x9020))+(((-1.0)*r22*x9023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9027=((1.0)*gconst5);
CheckValue<IkReal> x9028 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9027)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9028.valid){
continue;
}
CheckValue<IkReal> x9029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9027))+(((-1.0)*gconst4*r20)))),-1);
if(!x9029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9028.value)+(((1.5707963267949)*(x9029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9030=IKcos(j4);
IkReal x9031=IKsin(j4);
IkReal x9032=(gconst4*r11);
IkReal x9033=(gconst5*r10);
IkReal x9034=((1.0)*sj2);
IkReal x9035=(gconst5*r00);
IkReal x9036=(gconst5*r20);
IkReal x9037=((1.0)*x9030);
IkReal x9038=(gconst4*x9030);
IkReal x9039=((1.0)*x9031);
IkReal x9040=(gconst4*x9031);
evalcond[0]=((((-1.0)*x9036*x9037))+((r22*x9031))+((r21*x9038)));
evalcond[1]=((((-1.0)*x9035*x9037))+((r01*x9038))+((r02*x9031)));
evalcond[2]=((1.0)+(((-1.0)*x9033*x9037))+((x9030*x9032))+((r12*x9031)));
evalcond[3]=((((-1.0)*r12*x9037))+((x9031*x9032))+(((-1.0)*x9033*x9039)));
evalcond[4]=((((-1.0)*x9035*x9039))+(((-1.0)*sj1*x9034))+((r01*x9040))+((cj1*cj2))+(((-1.0)*r02*x9037)));
evalcond[5]=((((-1.0)*x9036*x9039))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9034))+(((-1.0)*r22*x9037))+((r21*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9041 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9041.valid){
continue;
}
CheckValue<IkReal> x9042=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9041.value)+(((1.5707963267949)*(x9042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9043=IKcos(j4);
IkReal x9044=IKsin(j4);
IkReal x9045=(gconst4*r11);
IkReal x9046=(gconst5*r10);
IkReal x9047=((1.0)*sj2);
IkReal x9048=(gconst5*r00);
IkReal x9049=(gconst5*r20);
IkReal x9050=((1.0)*x9043);
IkReal x9051=(gconst4*x9043);
IkReal x9052=((1.0)*x9044);
IkReal x9053=(gconst4*x9044);
evalcond[0]=((((-1.0)*x9049*x9050))+((r22*x9044))+((r21*x9051)));
evalcond[1]=(((r01*x9051))+(((-1.0)*x9048*x9050))+((r02*x9044)));
evalcond[2]=((1.0)+(((-1.0)*x9046*x9050))+((r12*x9044))+((x9043*x9045)));
evalcond[3]=(((x9044*x9045))+(((-1.0)*x9046*x9052))+(((-1.0)*r12*x9050)));
evalcond[4]=((((-1.0)*r02*x9050))+((r01*x9053))+(((-1.0)*sj1*x9047))+(((-1.0)*x9048*x9052))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9049*x9052))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x9050))+(((-1.0)*cj1*x9047))+((r21*x9053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9054=((-1.0)*r21);
IkReal x9055=((-1.0)*px);
CheckValue<IkReal> x9057 = IKatan2WithCheck(IkReal(x9054),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9057.valid){
continue;
}
IkReal x9056=((1.0)*(x9057.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9056)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9055);
rxp1_1=(px*r21);
rxp1_2=(r11*x9055);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9056)));
IkReal gconst4=x9054;
IkReal gconst5=((1.0)*r20);
IkReal x9058=((1.0)*sj3);
IkReal x9059=(r11*r21);
IkReal x9060=(r10*r20);
j4eval[0]=((((-1.0)*x9058*x9060))+(((-1.0)*x9058*x9059)));
j4eval[1]=((((-1.0)*x9060))+(((-1.0)*x9059)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9061=((-1.0)*r21);
IkReal x9062=((-1.0)*px);
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(x9061),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
IkReal x9063=((1.0)*(x9064.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9063)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9062);
rxp1_1=(px*r21);
rxp1_2=(r11*x9062);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9063)));
IkReal gconst4=x9061;
IkReal gconst5=((1.0)*r20);
IkReal x9065=((1.0)*cj3);
IkReal x9066=(r10*r20);
IkReal x9067=(r11*r21);
j4eval[0]=(((x9065*x9067))+((x9065*x9066)));
j4eval[1]=((((-1.0)*x9067))+(((-1.0)*x9066)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9068=((-1.0)*r21);
IkReal x9069=((-1.0)*px);
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(x9068),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
IkReal x9070=((1.0)*(x9071.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9070)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9069);
rxp1_1=(px*r21);
rxp1_2=(r11*x9069);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9070)));
IkReal gconst4=x9068;
IkReal gconst5=((1.0)*r20);
IkReal x9072=((1.0)*sj3);
j4eval[0]=((((-1.0)*r10*r20*x9072))+(((-1.0)*r11*r21*x9072)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9073=((1.0)*gconst5);
CheckValue<IkReal> x9074=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x9073))+((gconst4*r11*sj3))),-1);
if(!x9074.valid){
continue;
}
CheckValue<IkReal> x9075=IKPowWithIntegerCheck(r02,-1);
if(!x9075.valid){
continue;
}
CheckValue<IkReal> x9076=IKPowWithIntegerCheck(sj3,-1);
if(!x9076.valid){
continue;
}
if( IKabs(((x9074.value)*(((((-1.0)*cj3*r11*x9073))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9075.value)*(x9076.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9074.value)*(((((-1.0)*cj3*r11*x9073))+(((-1.0)*cj3*gconst4*r10))))))+IKsqr(((x9075.value)*(x9076.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9074.value)*(((((-1.0)*cj3*r11*x9073))+(((-1.0)*cj3*gconst4*r10))))), ((x9075.value)*(x9076.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9077=IKcos(j4);
IkReal x9078=IKsin(j4);
IkReal x9079=(cj1*cj2);
IkReal x9080=(gconst5*sj3);
IkReal x9081=(cj3*gconst5);
IkReal x9082=((1.0)*r10);
IkReal x9083=((1.0)*sj1);
IkReal x9084=(cj1*sj2);
IkReal x9085=(gconst4*r20);
IkReal x9086=(gconst4*r10);
IkReal x9087=(sj2*x9083);
IkReal x9088=(r20*x9078);
IkReal x9089=(gconst4*x9077);
IkReal x9090=(gconst5*x9077);
IkReal x9091=(r02*x9077);
IkReal x9092=(gconst4*sj3*x9078);
IkReal x9093=((1.0)*cj3*gconst4*x9078);
evalcond[0]=(r02*x9078);
evalcond[1]=(((r21*x9089))+(((-1.0)*r20*x9090)));
evalcond[2]=(((cj2*sj1))+x9084+(((-1.0)*sj3*x9091)));
evalcond[3]=(((cj3*x9091))+(((-1.0)*x9087))+x9079);
evalcond[4]=((1.0)+((r11*x9089))+(((-1.0)*x9082*x9090)));
evalcond[5]=(((r11*x9092))+((r11*x9081))+((cj3*x9086))+(((-1.0)*x9078*x9080*x9082)));
evalcond[6]=(((r11*x9080))+((sj3*x9086))+(((-1.0)*r11*x9093))+((r10*x9078*x9081)));
evalcond[7]=((((-1.0)*x9080*x9088))+((cj3*x9085))+(((-1.0)*x9087))+x9079+((r21*x9081))+((r21*x9092)));
evalcond[8]=(((x9081*x9088))+((r21*x9080))+(((-1.0)*r21*x9093))+((sj3*x9085))+(((-1.0)*cj2*x9083))+(((-1.0)*x9084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9094=((1.0)*r10);
IkReal x9095=((1.0)*r11);
CheckValue<IkReal> x9096=IKPowWithIntegerCheck((((cj3*gconst5*r10))+(((-1.0)*cj3*gconst4*x9095))),-1);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(((((-1.0)*gconst5*x9094))+((gconst4*r11))),-1);
if(!x9097.valid){
continue;
}
if( IKabs(((x9096.value)*(((((-1.0)*gconst4*sj3*x9094))+(((-1.0)*gconst5*sj3*x9095)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9097.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9096.value)*(((((-1.0)*gconst4*sj3*x9094))+(((-1.0)*gconst5*sj3*x9095))))))+IKsqr(((-1.0)*(x9097.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9096.value)*(((((-1.0)*gconst4*sj3*x9094))+(((-1.0)*gconst5*sj3*x9095))))), ((-1.0)*(x9097.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9098=IKcos(j4);
IkReal x9099=IKsin(j4);
IkReal x9100=(cj1*cj2);
IkReal x9101=(gconst5*sj3);
IkReal x9102=(cj3*gconst5);
IkReal x9103=((1.0)*r10);
IkReal x9104=((1.0)*sj1);
IkReal x9105=(cj1*sj2);
IkReal x9106=(gconst4*r20);
IkReal x9107=(gconst4*r10);
IkReal x9108=(sj2*x9104);
IkReal x9109=(r20*x9099);
IkReal x9110=(gconst4*x9098);
IkReal x9111=(gconst5*x9098);
IkReal x9112=(r02*x9098);
IkReal x9113=(gconst4*sj3*x9099);
IkReal x9114=((1.0)*cj3*gconst4*x9099);
evalcond[0]=(r02*x9099);
evalcond[1]=(((r21*x9110))+(((-1.0)*r20*x9111)));
evalcond[2]=(((cj2*sj1))+x9105+(((-1.0)*sj3*x9112)));
evalcond[3]=(x9100+(((-1.0)*x9108))+((cj3*x9112)));
evalcond[4]=((1.0)+(((-1.0)*x9103*x9111))+((r11*x9110)));
evalcond[5]=((((-1.0)*x9099*x9101*x9103))+((r11*x9113))+((cj3*x9107))+((r11*x9102)));
evalcond[6]=(((r10*x9099*x9102))+((r11*x9101))+((sj3*x9107))+(((-1.0)*r11*x9114)));
evalcond[7]=(((r21*x9113))+x9100+((cj3*x9106))+((r21*x9102))+(((-1.0)*x9108))+(((-1.0)*x9101*x9109)));
evalcond[8]=((((-1.0)*x9105))+(((-1.0)*cj2*x9104))+((r21*x9101))+((sj3*x9106))+(((-1.0)*r21*x9114))+((x9102*x9109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9115=((1.0)*gconst5);
IkReal x9116=(gconst4*r11);
CheckValue<IkReal> x9117=IKPowWithIntegerCheck((((sj3*x9116))+(((-1.0)*r10*sj3*x9115))),-1);
if(!x9117.valid){
continue;
}
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(((((-1.0)*r10*x9115))+x9116),-1);
if(!x9118.valid){
continue;
}
if( IKabs(((x9117.value)*(((((-1.0)*cj3*r11*x9115))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9118.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9117.value)*(((((-1.0)*cj3*r11*x9115))+(((-1.0)*cj3*gconst4*r10))))))+IKsqr(((-1.0)*(x9118.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9117.value)*(((((-1.0)*cj3*r11*x9115))+(((-1.0)*cj3*gconst4*r10))))), ((-1.0)*(x9118.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9119=IKcos(j4);
IkReal x9120=IKsin(j4);
IkReal x9121=(cj1*cj2);
IkReal x9122=(gconst5*sj3);
IkReal x9123=(cj3*gconst5);
IkReal x9124=((1.0)*r10);
IkReal x9125=((1.0)*sj1);
IkReal x9126=(cj1*sj2);
IkReal x9127=(gconst4*r20);
IkReal x9128=(gconst4*r10);
IkReal x9129=(sj2*x9125);
IkReal x9130=(r20*x9120);
IkReal x9131=(gconst4*x9119);
IkReal x9132=(gconst5*x9119);
IkReal x9133=(r02*x9119);
IkReal x9134=(gconst4*sj3*x9120);
IkReal x9135=((1.0)*cj3*gconst4*x9120);
evalcond[0]=(r02*x9120);
evalcond[1]=(((r21*x9131))+(((-1.0)*r20*x9132)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9133))+x9126);
evalcond[3]=(((cj3*x9133))+x9121+(((-1.0)*x9129)));
evalcond[4]=((1.0)+(((-1.0)*x9124*x9132))+((r11*x9131)));
evalcond[5]=((((-1.0)*x9120*x9122*x9124))+((cj3*x9128))+((r11*x9134))+((r11*x9123)));
evalcond[6]=(((sj3*x9128))+(((-1.0)*r11*x9135))+((r10*x9120*x9123))+((r11*x9122)));
evalcond[7]=(x9121+(((-1.0)*x9129))+((cj3*x9127))+((r21*x9134))+(((-1.0)*x9122*x9130))+((r21*x9123)));
evalcond[8]=(((sj3*x9127))+(((-1.0)*cj2*x9125))+(((-1.0)*r21*x9135))+((x9123*x9130))+((r21*x9122))+(((-1.0)*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9136=gconst4*gconst4;
IkReal x9137=gconst5*gconst5;
IkReal x9138=(r10*r21);
IkReal x9139=(gconst4*gconst5);
IkReal x9140=((1.0)*cj3);
IkReal x9141=(r11*r21);
IkReal x9142=((1.0)*r20*sj3);
IkReal x9143=((1.0)*r22*sj3);
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal((((sj3*x9136*x9138))+(((-1.0)*r10*x9139*x9142))+(((-1.0)*r11*x9137*x9142))+((sj3*x9139*x9141)))),IkReal(((((-1.0)*gconst4*r10*x9143))+(((-1.0)*gconst5*r11*x9143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
CheckValue<IkReal> x9145=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x9138*x9139*x9140))+(((-1.0)*r11*r20*x9139*x9140))+((cj3*x9136*x9141))+((cj3*r10*r20*x9137)))),-1);
if(!x9145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9144.value)+(((1.5707963267949)*(x9145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9146=IKcos(j4);
IkReal x9147=IKsin(j4);
IkReal x9148=(cj1*cj2);
IkReal x9149=(gconst5*sj3);
IkReal x9150=((1.0)*r10);
IkReal x9151=((1.0)*sj1);
IkReal x9152=(cj1*sj2);
IkReal x9153=(cj3*gconst4);
IkReal x9154=(gconst4*sj3);
IkReal x9155=(cj3*gconst5);
IkReal x9156=(sj2*x9151);
IkReal x9157=(gconst4*x9146);
IkReal x9158=(gconst5*x9146);
IkReal x9159=((1.0)*x9147);
IkReal x9160=(cj3*x9146);
IkReal x9161=(x9147*x9154);
IkReal x9162=(x9147*x9155);
IkReal x9163=((1.0)*sj3*x9146);
evalcond[0]=((((-1.0)*r20*x9158))+((r21*x9157))+((r22*x9147)));
evalcond[1]=(((r01*x9157))+(((-1.0)*r00*x9158))+((r02*x9147)));
evalcond[2]=((1.0)+((r11*x9157))+(((-1.0)*x9150*x9158))+((r12*x9147)));
evalcond[3]=(((r10*x9162))+((r12*x9160))+(((-1.0)*r11*x9153*x9159))+((r11*x9149))+((r10*x9154)));
evalcond[4]=(((r11*x9155))+(((-1.0)*r12*x9163))+((r11*x9161))+(((-1.0)*x9147*x9149*x9150))+((r10*x9153)));
evalcond[5]=(((cj2*sj1))+((r01*x9161))+x9152+(((-1.0)*r02*x9163))+(((-1.0)*r00*x9149*x9159))+((r01*x9155))+((r00*x9153)));
evalcond[6]=(((r00*x9162))+(((-1.0)*r01*x9153*x9159))+x9148+((r01*x9149))+((r02*x9160))+(((-1.0)*x9156))+((r00*x9154)));
evalcond[7]=((((-1.0)*r22*x9163))+x9148+(((-1.0)*r20*x9149*x9159))+((r20*x9153))+((r21*x9161))+(((-1.0)*x9156))+((r21*x9155)));
evalcond[8]=(((r22*x9160))+((r21*x9149))+((r20*x9154))+(((-1.0)*cj2*x9151))+(((-1.0)*r21*x9153*x9159))+((r20*x9162))+(((-1.0)*x9152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9164=((1.0)*gconst5);
CheckValue<IkReal> x9165 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9164)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9165.valid){
continue;
}
CheckValue<IkReal> x9166=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9164))+(((-1.0)*gconst4*r20)))),-1);
if(!x9166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9165.value)+(((1.5707963267949)*(x9166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9167=IKcos(j4);
IkReal x9168=IKsin(j4);
IkReal x9169=(cj1*cj2);
IkReal x9170=(gconst5*sj3);
IkReal x9171=((1.0)*r10);
IkReal x9172=((1.0)*sj1);
IkReal x9173=(cj1*sj2);
IkReal x9174=(cj3*gconst4);
IkReal x9175=(gconst4*sj3);
IkReal x9176=(cj3*gconst5);
IkReal x9177=(sj2*x9172);
IkReal x9178=(gconst4*x9167);
IkReal x9179=(gconst5*x9167);
IkReal x9180=((1.0)*x9168);
IkReal x9181=(cj3*x9167);
IkReal x9182=(x9168*x9175);
IkReal x9183=(x9168*x9176);
IkReal x9184=((1.0)*sj3*x9167);
evalcond[0]=(((r22*x9168))+((r21*x9178))+(((-1.0)*r20*x9179)));
evalcond[1]=(((r02*x9168))+((r01*x9178))+(((-1.0)*r00*x9179)));
evalcond[2]=((1.0)+(((-1.0)*x9171*x9179))+((r12*x9168))+((r11*x9178)));
evalcond[3]=(((r10*x9175))+((r12*x9181))+((r10*x9183))+(((-1.0)*r11*x9174*x9180))+((r11*x9170)));
evalcond[4]=(((r10*x9174))+(((-1.0)*r12*x9184))+((r11*x9182))+(((-1.0)*x9168*x9170*x9171))+((r11*x9176)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r00*x9170*x9180))+(((-1.0)*r02*x9184))+((r00*x9174))+x9173+((r01*x9176))+((r01*x9182)));
evalcond[6]=(((r00*x9183))+((r02*x9181))+((r00*x9175))+(((-1.0)*r01*x9174*x9180))+x9169+(((-1.0)*x9177))+((r01*x9170)));
evalcond[7]=((((-1.0)*r22*x9184))+x9169+(((-1.0)*x9177))+((r20*x9174))+((r21*x9176))+((r21*x9182))+(((-1.0)*r20*x9170*x9180)));
evalcond[8]=((((-1.0)*x9173))+(((-1.0)*r21*x9174*x9180))+((r20*x9183))+((r20*x9175))+((r21*x9170))+(((-1.0)*cj2*x9172))+((r22*x9181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9185 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9185.valid){
continue;
}
CheckValue<IkReal> x9186=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9185.value)+(((1.5707963267949)*(x9186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9187=IKcos(j4);
IkReal x9188=IKsin(j4);
IkReal x9189=(cj1*cj2);
IkReal x9190=(gconst5*sj3);
IkReal x9191=((1.0)*r10);
IkReal x9192=((1.0)*sj1);
IkReal x9193=(cj1*sj2);
IkReal x9194=(cj3*gconst4);
IkReal x9195=(gconst4*sj3);
IkReal x9196=(cj3*gconst5);
IkReal x9197=(sj2*x9192);
IkReal x9198=(gconst4*x9187);
IkReal x9199=(gconst5*x9187);
IkReal x9200=((1.0)*x9188);
IkReal x9201=(cj3*x9187);
IkReal x9202=(x9188*x9195);
IkReal x9203=(x9188*x9196);
IkReal x9204=((1.0)*sj3*x9187);
evalcond[0]=((((-1.0)*r20*x9199))+((r21*x9198))+((r22*x9188)));
evalcond[1]=(((r01*x9198))+((r02*x9188))+(((-1.0)*r00*x9199)));
evalcond[2]=((1.0)+(((-1.0)*x9191*x9199))+((r12*x9188))+((r11*x9198)));
evalcond[3]=(((r10*x9203))+((r10*x9195))+((r12*x9201))+(((-1.0)*r11*x9194*x9200))+((r11*x9190)));
evalcond[4]=(((r11*x9202))+((r10*x9194))+(((-1.0)*x9188*x9190*x9191))+(((-1.0)*r12*x9204))+((r11*x9196)));
evalcond[5]=(((cj2*sj1))+((r01*x9196))+((r01*x9202))+((r00*x9194))+(((-1.0)*r02*x9204))+x9193+(((-1.0)*r00*x9190*x9200)));
evalcond[6]=(((r01*x9190))+((r00*x9203))+((r00*x9195))+x9189+((r02*x9201))+(((-1.0)*r01*x9194*x9200))+(((-1.0)*x9197)));
evalcond[7]=(x9189+((r21*x9196))+(((-1.0)*r20*x9190*x9200))+((r21*x9202))+((r20*x9194))+(((-1.0)*r22*x9204))+(((-1.0)*x9197)));
evalcond[8]=(((r20*x9203))+((r22*x9201))+(((-1.0)*cj2*x9192))+((r21*x9190))+(((-1.0)*r21*x9194*x9200))+((r20*x9195))+(((-1.0)*x9193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9205=((-1.0)*r21);
CheckValue<IkReal> x9208 = IKatan2WithCheck(IkReal(x9205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9208.valid){
continue;
}
IkReal x9206=((1.0)*(x9208.value));
IkReal x9207=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9206)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9206)));
IkReal gconst4=(x9205*x9207);
IkReal gconst5=((1.0)*r20*x9207);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9209=((-1.0)*r21);
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal(x9209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
IkReal x9210=((1.0)*(x9212.value));
IkReal x9211=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9210)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9210)));
IkReal gconst4=(x9209*x9211);
IkReal gconst5=((1.0)*r20*x9211);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9213=((-1.0)*r21);
CheckValue<IkReal> x9216 = IKatan2WithCheck(IkReal(x9213),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9216.valid){
continue;
}
IkReal x9214=((1.0)*(x9216.value));
IkReal x9215=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9214)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9214)));
IkReal gconst4=(x9213*x9215);
IkReal gconst5=((1.0)*r20*x9215);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9217=((-1.0)*r21);
CheckValue<IkReal> x9220 = IKatan2WithCheck(IkReal(x9217),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9220.valid){
continue;
}
IkReal x9218=((1.0)*(x9220.value));
IkReal x9219=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9218)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9218)));
IkReal gconst4=(x9217*x9219);
IkReal gconst5=((1.0)*r20*x9219);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9221=((-1.0)*r21);
CheckValue<IkReal> x9224 = IKatan2WithCheck(IkReal(x9221),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9224.valid){
continue;
}
IkReal x9222=((1.0)*(x9224.value));
IkReal x9223=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9222)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9222)));
IkReal gconst4=(x9221*x9223);
IkReal gconst5=((1.0)*r20*x9223);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9225=((-1.0)*r21);
CheckValue<IkReal> x9228 = IKatan2WithCheck(IkReal(x9225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9228.valid){
continue;
}
IkReal x9226=((1.0)*(x9228.value));
IkReal x9227=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9226)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9226)));
IkReal gconst4=(x9225*x9227);
IkReal gconst5=((1.0)*r20*x9227);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9229=(gconst5*r10);
IkReal x9230=(gconst4*r11);
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal(r12),IkReal((x9230+(((-1.0)*x9229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9230*x9230)+(x9229*x9229)+(((-2.0)*x9229*x9230)))),-1);
if(!x9232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9231.value)+(((1.5707963267949)*(x9232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9233=IKcos(j4);
IkReal x9234=IKsin(j4);
IkReal x9235=(gconst4*r11);
IkReal x9236=(gconst5*r10);
IkReal x9237=((1.0)*sj2);
IkReal x9238=(gconst5*r00);
IkReal x9239=(gconst5*r20);
IkReal x9240=((1.0)*x9233);
IkReal x9241=(gconst4*x9233);
IkReal x9242=((1.0)*x9234);
IkReal x9243=(gconst4*x9234);
evalcond[0]=(((r21*x9241))+((r22*x9234))+(((-1.0)*x9239*x9240)));
evalcond[1]=(((r02*x9234))+((r01*x9241))+(((-1.0)*x9238*x9240)));
evalcond[2]=((-1.0)+(((-1.0)*x9236*x9240))+((x9233*x9235))+((r12*x9234)));
evalcond[3]=((((-1.0)*x9236*x9242))+((x9234*x9235))+(((-1.0)*r12*x9240)));
evalcond[4]=((((-1.0)*r22*x9240))+(((-1.0)*sj1*x9237))+((r21*x9243))+((cj1*cj2))+(((-1.0)*x9239*x9242)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x9243))+(((-1.0)*cj1*x9237))+(((-1.0)*r02*x9240))+(((-1.0)*x9238*x9242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9244=((1.0)*gconst5);
CheckValue<IkReal> x9245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9244)))),-1);
if(!x9245.valid){
continue;
}
CheckValue<IkReal> x9246 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9244))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9245.value)))+(x9246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9247=IKcos(j4);
IkReal x9248=IKsin(j4);
IkReal x9249=(gconst4*r11);
IkReal x9250=(gconst5*r10);
IkReal x9251=((1.0)*sj2);
IkReal x9252=(gconst5*r00);
IkReal x9253=(gconst5*r20);
IkReal x9254=((1.0)*x9247);
IkReal x9255=(gconst4*x9247);
IkReal x9256=((1.0)*x9248);
IkReal x9257=(gconst4*x9248);
evalcond[0]=((((-1.0)*x9253*x9254))+((r21*x9255))+((r22*x9248)));
evalcond[1]=(((r02*x9248))+((r01*x9255))+(((-1.0)*x9252*x9254)));
evalcond[2]=((-1.0)+(((-1.0)*x9250*x9254))+((x9247*x9249))+((r12*x9248)));
evalcond[3]=((((-1.0)*x9250*x9256))+(((-1.0)*r12*x9254))+((x9248*x9249)));
evalcond[4]=((((-1.0)*x9253*x9256))+(((-1.0)*r22*x9254))+((r21*x9257))+(((-1.0)*sj1*x9251))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9251))+((r01*x9257))+(((-1.0)*r02*x9254))+(((-1.0)*x9252*x9256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9258.value)+(((1.5707963267949)*(x9259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9260=IKcos(j4);
IkReal x9261=IKsin(j4);
IkReal x9262=(gconst4*r11);
IkReal x9263=(gconst5*r10);
IkReal x9264=((1.0)*sj2);
IkReal x9265=(gconst5*r00);
IkReal x9266=(gconst5*r20);
IkReal x9267=((1.0)*x9260);
IkReal x9268=(gconst4*x9260);
IkReal x9269=((1.0)*x9261);
IkReal x9270=(gconst4*x9261);
evalcond[0]=(((r22*x9261))+((r21*x9268))+(((-1.0)*x9266*x9267)));
evalcond[1]=(((r01*x9268))+(((-1.0)*x9265*x9267))+((r02*x9261)));
evalcond[2]=((-1.0)+((r12*x9261))+(((-1.0)*x9263*x9267))+((x9260*x9262)));
evalcond[3]=((((-1.0)*x9263*x9269))+((x9261*x9262))+(((-1.0)*r12*x9267)));
evalcond[4]=((((-1.0)*r22*x9267))+((cj1*cj2))+((r21*x9270))+(((-1.0)*sj1*x9264))+(((-1.0)*x9266*x9269)));
evalcond[5]=((((-1.0)*cj1*x9264))+(((-1.0)*cj2*sj1))+((r01*x9270))+(((-1.0)*r02*x9267))+(((-1.0)*x9265*x9269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9271=((-1.0)*r21);
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(x9271),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal x9272=((1.0)*(x9274.value));
IkReal x9273=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9272)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9272)));
IkReal gconst4=(x9271*x9273);
IkReal gconst5=((1.0)*r20*x9273);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9275=((-1.0)*r21);
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(x9275),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9276=((1.0)*(x9278.value));
IkReal x9277=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9276)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9276)));
IkReal gconst4=(x9275*x9277);
IkReal gconst5=((1.0)*r20*x9277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9279=((-1.0)*r21);
CheckValue<IkReal> x9282 = IKatan2WithCheck(IkReal(x9279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9282.valid){
continue;
}
IkReal x9280=((1.0)*(x9282.value));
IkReal x9281=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9280)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9280)));
IkReal gconst4=(x9279*x9281);
IkReal gconst5=((1.0)*r20*x9281);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9283=(gconst5*r10);
IkReal x9284=(gconst4*r11);
CheckValue<IkReal> x9285 = IKatan2WithCheck(IkReal(r12),IkReal((x9284+(((-1.0)*x9283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9285.valid){
continue;
}
CheckValue<IkReal> x9286=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9283*x9283)+(x9284*x9284)+(((-2.0)*x9283*x9284)))),-1);
if(!x9286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9285.value)+(((1.5707963267949)*(x9286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9287=IKcos(j4);
IkReal x9288=IKsin(j4);
IkReal x9289=(gconst4*r21);
IkReal x9290=((1.0)*sj1);
IkReal x9291=(gconst4*r11);
IkReal x9292=(gconst4*r01);
IkReal x9293=((1.0)*x9288);
IkReal x9294=(gconst5*x9288);
IkReal x9295=((1.0)*gconst5*x9287);
evalcond[0]=(((r22*x9288))+((x9287*x9289))+(((-1.0)*r20*x9295)));
evalcond[1]=(((r02*x9288))+((x9287*x9292))+(((-1.0)*r00*x9295)));
evalcond[2]=((((-1.0)*x9291*x9293))+((r10*x9294))+((r12*x9287)));
evalcond[3]=((-1.0)+((x9287*x9291))+(((-1.0)*r10*x9295))+((r12*x9288)));
evalcond[4]=((((-1.0)*sj2*x9290))+((r22*x9287))+((r20*x9294))+(((-1.0)*x9289*x9293))+((cj1*cj2)));
evalcond[5]=(((r02*x9287))+(((-1.0)*cj2*x9290))+((r00*x9294))+(((-1.0)*x9292*x9293))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9296=((1.0)*gconst5);
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9296)))),-1);
if(!x9297.valid){
continue;
}
CheckValue<IkReal> x9298 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9296)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9297.value)))+(x9298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9299=IKcos(j4);
IkReal x9300=IKsin(j4);
IkReal x9301=(gconst4*r21);
IkReal x9302=((1.0)*sj1);
IkReal x9303=(gconst4*r11);
IkReal x9304=(gconst4*r01);
IkReal x9305=((1.0)*x9300);
IkReal x9306=(gconst5*x9300);
IkReal x9307=((1.0)*gconst5*x9299);
evalcond[0]=((((-1.0)*r20*x9307))+((r22*x9300))+((x9299*x9301)));
evalcond[1]=(((r02*x9300))+(((-1.0)*r00*x9307))+((x9299*x9304)));
evalcond[2]=((((-1.0)*x9303*x9305))+((r10*x9306))+((r12*x9299)));
evalcond[3]=((-1.0)+((r12*x9300))+(((-1.0)*r10*x9307))+((x9299*x9303)));
evalcond[4]=(((r22*x9299))+(((-1.0)*x9301*x9305))+(((-1.0)*sj2*x9302))+((r20*x9306))+((cj1*cj2)));
evalcond[5]=(((r02*x9299))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9302))+((r00*x9306))+(((-1.0)*x9304*x9305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9308 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9308.valid){
continue;
}
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9308.value)+(((1.5707963267949)*(x9309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9310=IKcos(j4);
IkReal x9311=IKsin(j4);
IkReal x9312=(gconst4*r21);
IkReal x9313=((1.0)*sj1);
IkReal x9314=(gconst4*r11);
IkReal x9315=(gconst4*r01);
IkReal x9316=((1.0)*x9311);
IkReal x9317=(gconst5*x9311);
IkReal x9318=((1.0)*gconst5*x9310);
evalcond[0]=((((-1.0)*r20*x9318))+((r22*x9311))+((x9310*x9312)));
evalcond[1]=(((r02*x9311))+((x9310*x9315))+(((-1.0)*r00*x9318)));
evalcond[2]=((((-1.0)*x9314*x9316))+((r12*x9310))+((r10*x9317)));
evalcond[3]=((-1.0)+((x9310*x9314))+((r12*x9311))+(((-1.0)*r10*x9318)));
evalcond[4]=(((r22*x9310))+(((-1.0)*x9312*x9316))+(((-1.0)*sj2*x9313))+((r20*x9317))+((cj1*cj2)));
evalcond[5]=(((r02*x9310))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9313))+((r00*x9317))+(((-1.0)*x9315*x9316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9319=((-1.0)*r21);
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(x9319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
IkReal x9320=((1.0)*(x9322.value));
IkReal x9321=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9320)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9320)));
IkReal gconst4=(x9319*x9321);
IkReal gconst5=((1.0)*r20*x9321);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9323=((-1.0)*r21);
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(x9323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9324=((1.0)*(x9326.value));
IkReal x9325=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9324)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9324)));
IkReal gconst4=(x9323*x9325);
IkReal gconst5=((1.0)*r20*x9325);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9327=((-1.0)*r21);
CheckValue<IkReal> x9330 = IKatan2WithCheck(IkReal(x9327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9330.valid){
continue;
}
IkReal x9328=((1.0)*(x9330.value));
IkReal x9329=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9328)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9328)));
IkReal gconst4=(x9327*x9329);
IkReal gconst5=((1.0)*r20*x9329);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9331=(gconst5*r10);
IkReal x9332=(gconst4*r11);
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9332*x9332)+(((-2.0)*x9331*x9332))+(x9331*x9331))),-1);
if(!x9333.valid){
continue;
}
CheckValue<IkReal> x9334 = IKatan2WithCheck(IkReal(r12),IkReal((x9332+(((-1.0)*x9331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9333.value)))+(x9334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9335=IKcos(j4);
IkReal x9336=IKsin(j4);
IkReal x9337=(gconst4*r21);
IkReal x9338=((1.0)*cj2);
IkReal x9339=(gconst4*r11);
IkReal x9340=(gconst4*r01);
IkReal x9341=((1.0)*x9336);
IkReal x9342=(gconst5*x9336);
IkReal x9343=((1.0)*gconst5*x9335);
evalcond[0]=(((r22*x9336))+(((-1.0)*r20*x9343))+((x9335*x9337)));
evalcond[1]=(((r02*x9336))+(((-1.0)*r00*x9343))+((x9335*x9340)));
evalcond[2]=(((r12*x9335))+((r10*x9342))+(((-1.0)*x9339*x9341)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9343))+((r12*x9336))+((x9335*x9339)));
evalcond[4]=((((-1.0)*x9340*x9341))+((r00*x9342))+((sj1*sj2))+((r02*x9335))+(((-1.0)*cj1*x9338)));
evalcond[5]=((((-1.0)*sj1*x9338))+(((-1.0)*x9337*x9341))+(((-1.0)*cj1*sj2))+((r20*x9342))+((r22*x9335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9344=((1.0)*gconst5);
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9344)))),-1);
if(!x9345.valid){
continue;
}
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9344)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9345.value)))+(x9346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9347=IKcos(j4);
IkReal x9348=IKsin(j4);
IkReal x9349=(gconst4*r21);
IkReal x9350=((1.0)*cj2);
IkReal x9351=(gconst4*r11);
IkReal x9352=(gconst4*r01);
IkReal x9353=((1.0)*x9348);
IkReal x9354=(gconst5*x9348);
IkReal x9355=((1.0)*gconst5*x9347);
evalcond[0]=(((x9347*x9349))+(((-1.0)*r20*x9355))+((r22*x9348)));
evalcond[1]=(((x9347*x9352))+(((-1.0)*r00*x9355))+((r02*x9348)));
evalcond[2]=(((r12*x9347))+((r10*x9354))+(((-1.0)*x9351*x9353)));
evalcond[3]=((-1.0)+((r12*x9348))+(((-1.0)*r10*x9355))+((x9347*x9351)));
evalcond[4]=(((r00*x9354))+((sj1*sj2))+(((-1.0)*cj1*x9350))+((r02*x9347))+(((-1.0)*x9352*x9353)));
evalcond[5]=((((-1.0)*sj1*x9350))+((r20*x9354))+(((-1.0)*cj1*sj2))+(((-1.0)*x9349*x9353))+((r22*x9347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9356 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9356.valid){
continue;
}
CheckValue<IkReal> x9357=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9356.value)+(((1.5707963267949)*(x9357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9358=IKcos(j4);
IkReal x9359=IKsin(j4);
IkReal x9360=(gconst4*r21);
IkReal x9361=((1.0)*cj2);
IkReal x9362=(gconst4*r11);
IkReal x9363=(gconst4*r01);
IkReal x9364=((1.0)*x9359);
IkReal x9365=(gconst5*x9359);
IkReal x9366=((1.0)*gconst5*x9358);
evalcond[0]=((((-1.0)*r20*x9366))+((x9358*x9360))+((r22*x9359)));
evalcond[1]=((((-1.0)*r00*x9366))+((x9358*x9363))+((r02*x9359)));
evalcond[2]=((((-1.0)*x9362*x9364))+((r10*x9365))+((r12*x9358)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9366))+((x9358*x9362))+((r12*x9359)));
evalcond[4]=((((-1.0)*cj1*x9361))+((sj1*sj2))+((r00*x9365))+((r02*x9358))+(((-1.0)*x9363*x9364)));
evalcond[5]=((((-1.0)*x9360*x9364))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9361))+((r22*x9358))+((r20*x9365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9367=((-1.0)*r21);
CheckValue<IkReal> x9370 = IKatan2WithCheck(IkReal(x9367),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9370.valid){
continue;
}
IkReal x9368=((1.0)*(x9370.value));
IkReal x9369=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9368)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9368)));
IkReal gconst4=(x9367*x9369);
IkReal gconst5=((1.0)*r20*x9369);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9371=((-1.0)*r21);
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(x9371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9372=((1.0)*(x9374.value));
IkReal x9373=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9372)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9372)));
IkReal gconst4=(x9371*x9373);
IkReal gconst5=((1.0)*r20*x9373);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9375=((-1.0)*r21);
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(x9375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9376=((1.0)*(x9378.value));
IkReal x9377=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9376)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9376)));
IkReal gconst4=(x9375*x9377);
IkReal gconst5=((1.0)*r20*x9377);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9379=(gconst5*r10);
IkReal x9380=(gconst4*r11);
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal(r12),IkReal((x9380+(((-1.0)*x9379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9379*x9379)+(x9380*x9380)+(((-2.0)*x9379*x9380)))),-1);
if(!x9382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9381.value)+(((1.5707963267949)*(x9382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9383=IKcos(j4);
IkReal x9384=IKsin(j4);
IkReal x9385=(gconst4*r11);
IkReal x9386=(gconst5*r10);
IkReal x9387=((1.0)*cj1);
IkReal x9388=(gconst5*r00);
IkReal x9389=(gconst5*r20);
IkReal x9390=((1.0)*x9383);
IkReal x9391=(gconst4*x9383);
IkReal x9392=((1.0)*x9384);
IkReal x9393=(gconst4*x9384);
evalcond[0]=(((r22*x9384))+(((-1.0)*x9389*x9390))+((r21*x9391)));
evalcond[1]=((((-1.0)*x9388*x9390))+((r01*x9391))+((r02*x9384)));
evalcond[2]=((-1.0)+((x9383*x9385))+((r12*x9384))+(((-1.0)*x9386*x9390)));
evalcond[3]=((((-1.0)*r12*x9390))+((x9384*x9385))+(((-1.0)*x9386*x9392)));
evalcond[4]=((((-1.0)*x9388*x9392))+((r01*x9393))+((sj1*sj2))+(((-1.0)*cj2*x9387))+(((-1.0)*r02*x9390)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x9387))+(((-1.0)*x9389*x9392))+(((-1.0)*r22*x9390))+((r21*x9393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9394=((1.0)*gconst5);
CheckValue<IkReal> x9395=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9394)))),-1);
if(!x9395.valid){
continue;
}
CheckValue<IkReal> x9396 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9394))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9395.value)))+(x9396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9397=IKcos(j4);
IkReal x9398=IKsin(j4);
IkReal x9399=(gconst4*r11);
IkReal x9400=(gconst5*r10);
IkReal x9401=((1.0)*cj1);
IkReal x9402=(gconst5*r00);
IkReal x9403=(gconst5*r20);
IkReal x9404=((1.0)*x9397);
IkReal x9405=(gconst4*x9397);
IkReal x9406=((1.0)*x9398);
IkReal x9407=(gconst4*x9398);
evalcond[0]=(((r22*x9398))+((r21*x9405))+(((-1.0)*x9403*x9404)));
evalcond[1]=(((r01*x9405))+((r02*x9398))+(((-1.0)*x9402*x9404)));
evalcond[2]=((-1.0)+((r12*x9398))+(((-1.0)*x9400*x9404))+((x9397*x9399)));
evalcond[3]=(((x9398*x9399))+(((-1.0)*r12*x9404))+(((-1.0)*x9400*x9406)));
evalcond[4]=(((r01*x9407))+((sj1*sj2))+(((-1.0)*r02*x9404))+(((-1.0)*cj2*x9401))+(((-1.0)*x9402*x9406)));
evalcond[5]=((((-1.0)*r22*x9404))+(((-1.0)*sj2*x9401))+(((-1.0)*cj2*sj1))+((r21*x9407))+(((-1.0)*x9403*x9406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
CheckValue<IkReal> x9409=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9408.value)+(((1.5707963267949)*(x9409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9410=IKcos(j4);
IkReal x9411=IKsin(j4);
IkReal x9412=(gconst4*r11);
IkReal x9413=(gconst5*r10);
IkReal x9414=((1.0)*cj1);
IkReal x9415=(gconst5*r00);
IkReal x9416=(gconst5*r20);
IkReal x9417=((1.0)*x9410);
IkReal x9418=(gconst4*x9410);
IkReal x9419=((1.0)*x9411);
IkReal x9420=(gconst4*x9411);
evalcond[0]=(((r21*x9418))+((r22*x9411))+(((-1.0)*x9416*x9417)));
evalcond[1]=(((r02*x9411))+(((-1.0)*x9415*x9417))+((r01*x9418)));
evalcond[2]=((-1.0)+((x9410*x9412))+((r12*x9411))+(((-1.0)*x9413*x9417)));
evalcond[3]=((((-1.0)*r12*x9417))+(((-1.0)*x9413*x9419))+((x9411*x9412)));
evalcond[4]=(((r01*x9420))+(((-1.0)*r02*x9417))+(((-1.0)*cj2*x9414))+(((-1.0)*x9415*x9419))+((sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r22*x9417))+(((-1.0)*x9416*x9419))+(((-1.0)*sj2*x9414))+((r21*x9420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9421=gconst4*gconst4;
IkReal x9422=gconst5*gconst5;
IkReal x9423=(r10*r21);
IkReal x9424=(gconst4*gconst5);
IkReal x9425=((1.0)*cj3);
IkReal x9426=(r11*r21);
IkReal x9427=((1.0)*r20*sj3);
IkReal x9428=((1.0)*r22*sj3);
CheckValue<IkReal> x9429=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r11*r20*x9424*x9425))+(((-1.0)*x9423*x9424*x9425))+((cj3*r10*r20*x9422))+((cj3*x9421*x9426)))),-1);
if(!x9429.valid){
continue;
}
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal((((sj3*x9424*x9426))+(((-1.0)*r10*x9424*x9427))+((sj3*x9421*x9423))+(((-1.0)*r11*x9422*x9427)))),IkReal(((((-1.0)*gconst4*r10*x9428))+(((-1.0)*gconst5*r11*x9428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9429.value)))+(x9430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9431=IKcos(j4);
IkReal x9432=IKsin(j4);
IkReal x9433=(gconst5*sj3);
IkReal x9434=(sj1*sj2);
IkReal x9435=((1.0)*r10);
IkReal x9436=((1.0)*cj2);
IkReal x9437=(cj3*gconst4);
IkReal x9438=(cj3*gconst5);
IkReal x9439=(gconst4*sj3);
IkReal x9440=((1.0)*cj1*sj2);
IkReal x9441=(sj1*x9436);
IkReal x9442=(gconst4*x9431);
IkReal x9443=(gconst5*x9431);
IkReal x9444=((1.0)*x9432);
IkReal x9445=(cj3*x9431);
IkReal x9446=(x9432*x9439);
IkReal x9447=(x9432*x9438);
IkReal x9448=((1.0)*sj3*x9431);
IkReal x9449=(x9441+x9440);
evalcond[0]=(((r22*x9432))+(((-1.0)*r20*x9443))+((r21*x9442)));
evalcond[1]=(((r01*x9442))+((r02*x9432))+(((-1.0)*r00*x9443)));
evalcond[2]=((-1.0)+(((-1.0)*x9435*x9443))+((r11*x9442))+((r12*x9432)));
evalcond[3]=(((r10*x9447))+((r11*x9433))+(((-1.0)*r11*x9437*x9444))+((r12*x9445))+((r10*x9439)));
evalcond[4]=((((-1.0)*x9432*x9433*x9435))+((r11*x9438))+((r11*x9446))+(((-1.0)*r12*x9448))+((r10*x9437)));
evalcond[5]=((((-1.0)*r01*x9437*x9444))+((r00*x9447))+x9434+(((-1.0)*cj1*x9436))+((r01*x9433))+((r02*x9445))+((r00*x9439)));
evalcond[6]=((((-1.0)*x9434))+(((-1.0)*r20*x9433*x9444))+((r21*x9446))+((r20*x9437))+((r21*x9438))+(((-1.0)*r22*x9448))+((cj1*cj2)));
evalcond[7]=(((r22*x9445))+(((-1.0)*x9449))+((r20*x9439))+(((-1.0)*r21*x9437*x9444))+((r21*x9433))+((r20*x9447)));
evalcond[8]=(((r01*x9446))+(((-1.0)*x9449))+(((-1.0)*r00*x9433*x9444))+((r01*x9438))+(((-1.0)*r02*x9448))+((r00*x9437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9450=((1.0)*gconst5);
CheckValue<IkReal> x9451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9450)))),-1);
if(!x9451.valid){
continue;
}
CheckValue<IkReal> x9452 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9450)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9451.value)))+(x9452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9453=IKcos(j4);
IkReal x9454=IKsin(j4);
IkReal x9455=(gconst5*sj3);
IkReal x9456=(sj1*sj2);
IkReal x9457=((1.0)*r10);
IkReal x9458=((1.0)*cj2);
IkReal x9459=(cj3*gconst4);
IkReal x9460=(cj3*gconst5);
IkReal x9461=(gconst4*sj3);
IkReal x9462=((1.0)*cj1*sj2);
IkReal x9463=(sj1*x9458);
IkReal x9464=(gconst4*x9453);
IkReal x9465=(gconst5*x9453);
IkReal x9466=((1.0)*x9454);
IkReal x9467=(cj3*x9453);
IkReal x9468=(x9454*x9461);
IkReal x9469=(x9454*x9460);
IkReal x9470=((1.0)*sj3*x9453);
IkReal x9471=(x9463+x9462);
evalcond[0]=((((-1.0)*r20*x9465))+((r22*x9454))+((r21*x9464)));
evalcond[1]=(((r01*x9464))+(((-1.0)*r00*x9465))+((r02*x9454)));
evalcond[2]=((-1.0)+(((-1.0)*x9457*x9465))+((r12*x9454))+((r11*x9464)));
evalcond[3]=(((r10*x9469))+((r10*x9461))+(((-1.0)*r11*x9459*x9466))+((r11*x9455))+((r12*x9467)));
evalcond[4]=(((r10*x9459))+(((-1.0)*x9454*x9455*x9457))+(((-1.0)*r12*x9470))+((r11*x9460))+((r11*x9468)));
evalcond[5]=(((r01*x9455))+((r00*x9469))+((r00*x9461))+x9456+(((-1.0)*r01*x9459*x9466))+((r02*x9467))+(((-1.0)*cj1*x9458)));
evalcond[6]=(((r21*x9468))+((r21*x9460))+(((-1.0)*x9456))+(((-1.0)*r22*x9470))+((cj1*cj2))+((r20*x9459))+(((-1.0)*r20*x9455*x9466)));
evalcond[7]=((((-1.0)*x9471))+((r22*x9467))+(((-1.0)*r21*x9459*x9466))+((r21*x9455))+((r20*x9469))+((r20*x9461)));
evalcond[8]=((((-1.0)*r02*x9470))+((r00*x9459))+(((-1.0)*x9471))+((r01*x9468))+((r01*x9460))+(((-1.0)*r00*x9455*x9466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9472 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9472.valid){
continue;
}
CheckValue<IkReal> x9473=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9472.value)+(((1.5707963267949)*(x9473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9474=IKcos(j4);
IkReal x9475=IKsin(j4);
IkReal x9476=(gconst5*sj3);
IkReal x9477=(sj1*sj2);
IkReal x9478=((1.0)*r10);
IkReal x9479=((1.0)*cj2);
IkReal x9480=(cj3*gconst4);
IkReal x9481=(cj3*gconst5);
IkReal x9482=(gconst4*sj3);
IkReal x9483=((1.0)*cj1*sj2);
IkReal x9484=(sj1*x9479);
IkReal x9485=(gconst4*x9474);
IkReal x9486=(gconst5*x9474);
IkReal x9487=((1.0)*x9475);
IkReal x9488=(cj3*x9474);
IkReal x9489=(x9475*x9482);
IkReal x9490=(x9475*x9481);
IkReal x9491=((1.0)*sj3*x9474);
IkReal x9492=(x9483+x9484);
evalcond[0]=(((r22*x9475))+((r21*x9485))+(((-1.0)*r20*x9486)));
evalcond[1]=(((r01*x9485))+(((-1.0)*r00*x9486))+((r02*x9475)));
evalcond[2]=((-1.0)+(((-1.0)*x9478*x9486))+((r11*x9485))+((r12*x9475)));
evalcond[3]=(((r10*x9490))+(((-1.0)*r11*x9480*x9487))+((r12*x9488))+((r11*x9476))+((r10*x9482)));
evalcond[4]=(((r11*x9489))+((r11*x9481))+(((-1.0)*r12*x9491))+(((-1.0)*x9475*x9476*x9478))+((r10*x9480)));
evalcond[5]=((((-1.0)*cj1*x9479))+((r00*x9482))+((r01*x9476))+((r02*x9488))+(((-1.0)*r01*x9480*x9487))+((r00*x9490))+x9477);
evalcond[6]=((((-1.0)*r20*x9476*x9487))+((r21*x9481))+((r21*x9489))+(((-1.0)*r22*x9491))+((r20*x9480))+(((-1.0)*x9477))+((cj1*cj2)));
evalcond[7]=(((r20*x9482))+((r21*x9476))+(((-1.0)*r21*x9480*x9487))+((r22*x9488))+((r20*x9490))+(((-1.0)*x9492)));
evalcond[8]=((((-1.0)*r02*x9491))+((r01*x9481))+((r01*x9489))+((r00*x9480))+(((-1.0)*r00*x9476*x9487))+(((-1.0)*x9492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9493=((-1.0)*r21);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(x9493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9494=((1.0)*(x9496.value));
IkReal x9495=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9494)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9494)));
IkReal gconst4=(x9493*x9495);
IkReal gconst5=((1.0)*r20*x9495);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9497=((-1.0)*r21);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal(x9497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
IkReal x9498=((1.0)*(x9500.value));
IkReal x9499=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9498)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9498)));
IkReal gconst4=(x9497*x9499);
IkReal gconst5=((1.0)*r20*x9499);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9501=((-1.0)*r21);
CheckValue<IkReal> x9504 = IKatan2WithCheck(IkReal(x9501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9504.valid){
continue;
}
IkReal x9502=((1.0)*(x9504.value));
IkReal x9503=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9502)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9502)));
IkReal gconst4=(x9501*x9503);
IkReal gconst5=((1.0)*r20*x9503);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9505=((-1.0)*r21);
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal(x9505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
IkReal x9506=((1.0)*(x9508.value));
IkReal x9507=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9506)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9506)));
IkReal gconst4=(x9505*x9507);
IkReal gconst5=((1.0)*r20*x9507);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9509=((-1.0)*r21);
CheckValue<IkReal> x9512 = IKatan2WithCheck(IkReal(x9509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9512.valid){
continue;
}
IkReal x9510=((1.0)*(x9512.value));
IkReal x9511=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9510)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9510)));
IkReal gconst4=(x9509*x9511);
IkReal gconst5=((1.0)*r20*x9511);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9513=((-1.0)*r21);
CheckValue<IkReal> x9516 = IKatan2WithCheck(IkReal(x9513),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9516.valid){
continue;
}
IkReal x9514=((1.0)*(x9516.value));
IkReal x9515=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9514)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9514)));
IkReal gconst4=(x9513*x9515);
IkReal gconst5=((1.0)*r20*x9515);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9517=(gconst4*r01);
IkReal x9518=(gconst5*r00);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9518))+x9517)),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(IKsign(((x9517*x9517)+(((-2.0)*x9517*x9518))+(x9518*x9518)+(r02*r02))),-1);
if(!x9520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9519.value)+(((1.5707963267949)*(x9520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9521=IKcos(j4);
IkReal x9522=IKsin(j4);
IkReal x9523=(gconst5*r10);
IkReal x9524=(gconst5*r00);
IkReal x9525=(gconst5*r20);
IkReal x9526=((1.0)*x9521);
IkReal x9527=(gconst4*x9522);
IkReal x9528=(gconst4*x9521);
IkReal x9529=((1.0)*x9522);
evalcond[0]=((((-1.0)*x9525*x9526))+((r21*x9528))+((r22*x9522)));
evalcond[1]=(((r12*x9522))+((r11*x9528))+(((-1.0)*x9523*x9526)));
evalcond[2]=((-1.0)+((r02*x9522))+(((-1.0)*x9524*x9526))+((r01*x9528)));
evalcond[3]=((((-1.0)*r02*x9526))+(((-1.0)*x9524*x9529))+((r01*x9527)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x9526))+((cj1*sj2))+((r11*x9527))+(((-1.0)*x9523*x9529)));
evalcond[5]=((((-1.0)*x9525*x9529))+(((-1.0)*r22*x9526))+(((-1.0)*sj1*sj2))+((r21*x9527))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9530=((1.0)*gconst5);
CheckValue<IkReal> x9531 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9530))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9531.valid){
continue;
}
CheckValue<IkReal> x9532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9530))+(((-1.0)*gconst4*r20)))),-1);
if(!x9532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9531.value)+(((1.5707963267949)*(x9532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9533=IKcos(j4);
IkReal x9534=IKsin(j4);
IkReal x9535=(gconst5*r10);
IkReal x9536=(gconst5*r00);
IkReal x9537=(gconst5*r20);
IkReal x9538=((1.0)*x9533);
IkReal x9539=(gconst4*x9534);
IkReal x9540=(gconst4*x9533);
IkReal x9541=((1.0)*x9534);
evalcond[0]=(((r22*x9534))+((r21*x9540))+(((-1.0)*x9537*x9538)));
evalcond[1]=(((r11*x9540))+((r12*x9534))+(((-1.0)*x9535*x9538)));
evalcond[2]=((-1.0)+(((-1.0)*x9536*x9538))+((r02*x9534))+((r01*x9540)));
evalcond[3]=((((-1.0)*x9536*x9541))+(((-1.0)*r02*x9538))+((r01*x9539)));
evalcond[4]=(((cj2*sj1))+((r11*x9539))+(((-1.0)*x9535*x9541))+((cj1*sj2))+(((-1.0)*r12*x9538)));
evalcond[5]=((((-1.0)*x9537*x9541))+(((-1.0)*r22*x9538))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r21*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9542=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9542.valid){
continue;
}
CheckValue<IkReal> x9543 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9542.value)))+(x9543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9544=IKcos(j4);
IkReal x9545=IKsin(j4);
IkReal x9546=(gconst5*r10);
IkReal x9547=(gconst5*r00);
IkReal x9548=(gconst5*r20);
IkReal x9549=((1.0)*x9544);
IkReal x9550=(gconst4*x9545);
IkReal x9551=(gconst4*x9544);
IkReal x9552=((1.0)*x9545);
evalcond[0]=(((r22*x9545))+(((-1.0)*x9548*x9549))+((r21*x9551)));
evalcond[1]=(((r11*x9551))+((r12*x9545))+(((-1.0)*x9546*x9549)));
evalcond[2]=((-1.0)+((r02*x9545))+(((-1.0)*x9547*x9549))+((r01*x9551)));
evalcond[3]=((((-1.0)*r02*x9549))+(((-1.0)*x9547*x9552))+((r01*x9550)));
evalcond[4]=(((r11*x9550))+((cj2*sj1))+(((-1.0)*r12*x9549))+((cj1*sj2))+(((-1.0)*x9546*x9552)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r22*x9549))+(((-1.0)*x9548*x9552))+((cj1*cj2))+((r21*x9550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9553=((-1.0)*r21);
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal(x9553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
IkReal x9554=((1.0)*(x9556.value));
IkReal x9555=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9554)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9554)));
IkReal gconst4=(x9553*x9555);
IkReal gconst5=((1.0)*r20*x9555);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9557=((-1.0)*r21);
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(x9557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9558=((1.0)*(x9560.value));
IkReal x9559=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9558)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9558)));
IkReal gconst4=(x9557*x9559);
IkReal gconst5=((1.0)*r20*x9559);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9561=((-1.0)*r21);
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(x9561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
IkReal x9562=((1.0)*(x9564.value));
IkReal x9563=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9562)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9562)));
IkReal gconst4=(x9561*x9563);
IkReal gconst5=((1.0)*r20*x9563);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9565=(gconst4*r01);
IkReal x9566=(gconst5*r00);
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9566))+x9565)),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
CheckValue<IkReal> x9568=IKPowWithIntegerCheck(IKsign(((x9566*x9566)+(((-2.0)*x9565*x9566))+(x9565*x9565)+(r02*r02))),-1);
if(!x9568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9567.value)+(((1.5707963267949)*(x9568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9569=IKcos(j4);
IkReal x9570=IKsin(j4);
IkReal x9571=(gconst4*r21);
IkReal x9572=(gconst4*r11);
IkReal x9573=(gconst4*r01);
IkReal x9574=((1.0)*x9570);
IkReal x9575=(gconst5*x9570);
IkReal x9576=((1.0)*gconst5*x9569);
evalcond[0]=(((x9569*x9571))+(((-1.0)*r20*x9576))+((r22*x9570)));
evalcond[1]=(((x9569*x9572))+((r12*x9570))+(((-1.0)*r10*x9576)));
evalcond[2]=(((r00*x9575))+(((-1.0)*x9573*x9574))+((r02*x9569)));
evalcond[3]=((-1.0)+((x9569*x9573))+(((-1.0)*r00*x9576))+((r02*x9570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9572*x9574))+((r12*x9569))+((r10*x9575)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r22*x9569))+((cj1*cj2))+((r20*x9575))+(((-1.0)*x9571*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9577=((1.0)*gconst5);
CheckValue<IkReal> x9578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9577))+(((-1.0)*gconst4*r20)))),-1);
if(!x9578.valid){
continue;
}
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9577)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9578.value)))+(x9579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9580=IKcos(j4);
IkReal x9581=IKsin(j4);
IkReal x9582=(gconst4*r21);
IkReal x9583=(gconst4*r11);
IkReal x9584=(gconst4*r01);
IkReal x9585=((1.0)*x9581);
IkReal x9586=(gconst5*x9581);
IkReal x9587=((1.0)*gconst5*x9580);
evalcond[0]=(((x9580*x9582))+(((-1.0)*r20*x9587))+((r22*x9581)));
evalcond[1]=(((x9580*x9583))+(((-1.0)*r10*x9587))+((r12*x9581)));
evalcond[2]=(((r00*x9586))+(((-1.0)*x9584*x9585))+((r02*x9580)));
evalcond[3]=((-1.0)+((x9580*x9584))+(((-1.0)*r00*x9587))+((r02*x9581)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r10*x9586))+((r12*x9580))+(((-1.0)*x9583*x9585)));
evalcond[5]=(((r20*x9586))+(((-1.0)*sj1*sj2))+((r22*x9580))+((cj1*cj2))+(((-1.0)*x9582*x9585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9588=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9588.valid){
continue;
}
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9588.value)))+(x9589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9590=IKcos(j4);
IkReal x9591=IKsin(j4);
IkReal x9592=(gconst4*r21);
IkReal x9593=(gconst4*r11);
IkReal x9594=(gconst4*r01);
IkReal x9595=((1.0)*x9591);
IkReal x9596=(gconst5*x9591);
IkReal x9597=((1.0)*gconst5*x9590);
evalcond[0]=((((-1.0)*r20*x9597))+((r22*x9591))+((x9590*x9592)));
evalcond[1]=((((-1.0)*r10*x9597))+((r12*x9591))+((x9590*x9593)));
evalcond[2]=((((-1.0)*x9594*x9595))+((r00*x9596))+((r02*x9590)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9597))+((r02*x9591))+((x9590*x9594)));
evalcond[4]=((((-1.0)*x9593*x9595))+((cj2*sj1))+((cj1*sj2))+((r10*x9596))+((r12*x9590)));
evalcond[5]=(((r20*x9596))+(((-1.0)*x9592*x9595))+(((-1.0)*sj1*sj2))+((r22*x9590))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9598=((-1.0)*r21);
CheckValue<IkReal> x9601 = IKatan2WithCheck(IkReal(x9598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9601.valid){
continue;
}
IkReal x9599=((1.0)*(x9601.value));
IkReal x9600=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9599)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9599)));
IkReal gconst4=(x9598*x9600);
IkReal gconst5=((1.0)*r20*x9600);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9602=((-1.0)*r21);
CheckValue<IkReal> x9605 = IKatan2WithCheck(IkReal(x9602),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9605.valid){
continue;
}
IkReal x9603=((1.0)*(x9605.value));
IkReal x9604=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9603)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9603)));
IkReal gconst4=(x9602*x9604);
IkReal gconst5=((1.0)*r20*x9604);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9606=((-1.0)*r21);
CheckValue<IkReal> x9609 = IKatan2WithCheck(IkReal(x9606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9609.valid){
continue;
}
IkReal x9607=((1.0)*(x9609.value));
IkReal x9608=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9607)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9607)));
IkReal gconst4=(x9606*x9608);
IkReal gconst5=((1.0)*r20*x9608);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9610=(gconst4*r01);
IkReal x9611=(gconst5*r00);
CheckValue<IkReal> x9612 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9611))+x9610)),IKFAST_ATAN2_MAGTHRESH);
if(!x9612.valid){
continue;
}
CheckValue<IkReal> x9613=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9610*x9611))+(x9611*x9611)+(x9610*x9610)+(r02*r02))),-1);
if(!x9613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9612.value)+(((1.5707963267949)*(x9613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9614=IKcos(j4);
IkReal x9615=IKsin(j4);
IkReal x9616=(gconst4*r21);
IkReal x9617=((1.0)*sj1);
IkReal x9618=(gconst4*r11);
IkReal x9619=(gconst4*r01);
IkReal x9620=((1.0)*x9615);
IkReal x9621=(gconst5*x9615);
IkReal x9622=((1.0)*gconst5*x9614);
evalcond[0]=(((r22*x9615))+(((-1.0)*r20*x9622))+((x9614*x9616)));
evalcond[1]=((((-1.0)*r10*x9622))+((r12*x9615))+((x9614*x9618)));
evalcond[2]=(((r00*x9621))+((r02*x9614))+(((-1.0)*x9619*x9620)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9622))+((r02*x9615))+((x9614*x9619)));
evalcond[4]=((((-1.0)*x9618*x9620))+((r10*x9621))+(((-1.0)*sj2*x9617))+((r12*x9614))+((cj1*cj2)));
evalcond[5]=(((r20*x9621))+((r22*x9614))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9617))+(((-1.0)*x9616*x9620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9623=((1.0)*gconst5);
CheckValue<IkReal> x9624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9623))+(((-1.0)*gconst4*r20)))),-1);
if(!x9624.valid){
continue;
}
CheckValue<IkReal> x9625 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x9623))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9624.value)))+(x9625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9626=IKcos(j4);
IkReal x9627=IKsin(j4);
IkReal x9628=(gconst4*r21);
IkReal x9629=((1.0)*sj1);
IkReal x9630=(gconst4*r11);
IkReal x9631=(gconst4*r01);
IkReal x9632=((1.0)*x9627);
IkReal x9633=(gconst5*x9627);
IkReal x9634=((1.0)*gconst5*x9626);
evalcond[0]=(((r22*x9627))+(((-1.0)*r20*x9634))+((x9626*x9628)));
evalcond[1]=((((-1.0)*r10*x9634))+((r12*x9627))+((x9626*x9630)));
evalcond[2]=(((r00*x9633))+((r02*x9626))+(((-1.0)*x9631*x9632)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9634))+((r02*x9627))+((x9626*x9631)));
evalcond[4]=(((r10*x9633))+(((-1.0)*x9630*x9632))+((r12*x9626))+((cj1*cj2))+(((-1.0)*sj2*x9629)));
evalcond[5]=((((-1.0)*x9628*x9632))+((r20*x9633))+(((-1.0)*cj1*sj2))+((r22*x9626))+(((-1.0)*cj2*x9629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9635=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9635.valid){
continue;
}
CheckValue<IkReal> x9636 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9635.value)))+(x9636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9637=IKcos(j4);
IkReal x9638=IKsin(j4);
IkReal x9639=(gconst4*r21);
IkReal x9640=((1.0)*sj1);
IkReal x9641=(gconst4*r11);
IkReal x9642=(gconst4*r01);
IkReal x9643=((1.0)*x9638);
IkReal x9644=(gconst5*x9638);
IkReal x9645=((1.0)*gconst5*x9637);
evalcond[0]=((((-1.0)*r20*x9645))+((r22*x9638))+((x9637*x9639)));
evalcond[1]=(((x9637*x9641))+((r12*x9638))+(((-1.0)*r10*x9645)));
evalcond[2]=(((r00*x9644))+(((-1.0)*x9642*x9643))+((r02*x9637)));
evalcond[3]=((-1.0)+((x9637*x9642))+((r02*x9638))+(((-1.0)*r00*x9645)));
evalcond[4]=((((-1.0)*sj2*x9640))+(((-1.0)*x9641*x9643))+((r12*x9637))+((r10*x9644))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9639*x9643))+(((-1.0)*cj2*x9640))+(((-1.0)*cj1*sj2))+((r22*x9637))+((r20*x9644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9646=((-1.0)*r21);
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal(x9646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
IkReal x9647=((1.0)*(x9649.value));
IkReal x9648=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9647)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9647)));
IkReal gconst4=(x9646*x9648);
IkReal gconst5=((1.0)*r20*x9648);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9650=((-1.0)*r21);
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal(x9650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
IkReal x9651=((1.0)*(x9653.value));
IkReal x9652=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9651)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9651)));
IkReal gconst4=(x9650*x9652);
IkReal gconst5=((1.0)*r20*x9652);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9654=((-1.0)*r21);
CheckValue<IkReal> x9657 = IKatan2WithCheck(IkReal(x9654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9657.valid){
continue;
}
IkReal x9655=((1.0)*(x9657.value));
IkReal x9656=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9655)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9655)));
IkReal gconst4=(x9654*x9656);
IkReal gconst5=((1.0)*r20*x9656);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9658=(gconst4*r01);
IkReal x9659=(gconst5*r00);
CheckValue<IkReal> x9660=IKPowWithIntegerCheck(IKsign(((x9658*x9658)+(x9659*x9659)+(((-2.0)*x9658*x9659))+(r02*r02))),-1);
if(!x9660.valid){
continue;
}
CheckValue<IkReal> x9661 = IKatan2WithCheck(IkReal(r02),IkReal((x9658+(((-1.0)*x9659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9660.value)))+(x9661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9662=IKcos(j4);
IkReal x9663=IKsin(j4);
IkReal x9664=(gconst4*r11);
IkReal x9665=(gconst5*r10);
IkReal x9666=((1.0)*sj2);
IkReal x9667=(gconst5*r00);
IkReal x9668=(gconst5*r20);
IkReal x9669=((1.0)*x9662);
IkReal x9670=(gconst4*x9662);
IkReal x9671=((1.0)*x9663);
IkReal x9672=(gconst4*x9663);
evalcond[0]=(((r21*x9670))+((r22*x9663))+(((-1.0)*x9668*x9669)));
evalcond[1]=(((x9662*x9664))+((r12*x9663))+(((-1.0)*x9665*x9669)));
evalcond[2]=((-1.0)+(((-1.0)*x9667*x9669))+((r01*x9670))+((r02*x9663)));
evalcond[3]=(((r01*x9672))+(((-1.0)*r02*x9669))+(((-1.0)*x9667*x9671)));
evalcond[4]=((((-1.0)*sj1*x9666))+(((-1.0)*x9665*x9671))+((x9663*x9664))+(((-1.0)*r12*x9669))+((cj1*cj2)));
evalcond[5]=(((r21*x9672))+(((-1.0)*cj1*x9666))+(((-1.0)*cj2*sj1))+(((-1.0)*x9668*x9671))+(((-1.0)*r22*x9669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9673=((1.0)*gconst5);
CheckValue<IkReal> x9674 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9673)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9674.valid){
continue;
}
CheckValue<IkReal> x9675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9673))+(((-1.0)*gconst4*r20)))),-1);
if(!x9675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9674.value)+(((1.5707963267949)*(x9675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9676=IKcos(j4);
IkReal x9677=IKsin(j4);
IkReal x9678=(gconst4*r11);
IkReal x9679=(gconst5*r10);
IkReal x9680=((1.0)*sj2);
IkReal x9681=(gconst5*r00);
IkReal x9682=(gconst5*r20);
IkReal x9683=((1.0)*x9676);
IkReal x9684=(gconst4*x9676);
IkReal x9685=((1.0)*x9677);
IkReal x9686=(gconst4*x9677);
evalcond[0]=(((r21*x9684))+(((-1.0)*x9682*x9683))+((r22*x9677)));
evalcond[1]=(((r12*x9677))+(((-1.0)*x9679*x9683))+((x9676*x9678)));
evalcond[2]=((-1.0)+((r01*x9684))+((r02*x9677))+(((-1.0)*x9681*x9683)));
evalcond[3]=((((-1.0)*r02*x9683))+((r01*x9686))+(((-1.0)*x9681*x9685)));
evalcond[4]=((((-1.0)*r12*x9683))+(((-1.0)*sj1*x9680))+((x9677*x9678))+(((-1.0)*x9679*x9685))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x9686))+(((-1.0)*cj1*x9680))+(((-1.0)*r22*x9683))+(((-1.0)*x9682*x9685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9687.valid){
continue;
}
CheckValue<IkReal> x9688 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9687.value)))+(x9688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9689=IKcos(j4);
IkReal x9690=IKsin(j4);
IkReal x9691=(gconst4*r11);
IkReal x9692=(gconst5*r10);
IkReal x9693=((1.0)*sj2);
IkReal x9694=(gconst5*r00);
IkReal x9695=(gconst5*r20);
IkReal x9696=((1.0)*x9689);
IkReal x9697=(gconst4*x9689);
IkReal x9698=((1.0)*x9690);
IkReal x9699=(gconst4*x9690);
evalcond[0]=(((r22*x9690))+((r21*x9697))+(((-1.0)*x9695*x9696)));
evalcond[1]=(((x9689*x9691))+(((-1.0)*x9692*x9696))+((r12*x9690)));
evalcond[2]=((-1.0)+((r02*x9690))+(((-1.0)*x9694*x9696))+((r01*x9697)));
evalcond[3]=((((-1.0)*r02*x9696))+(((-1.0)*x9694*x9698))+((r01*x9699)));
evalcond[4]=((((-1.0)*x9692*x9698))+(((-1.0)*r12*x9696))+(((-1.0)*sj1*x9693))+((x9690*x9691))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x9693))+((r21*x9699))+(((-1.0)*r22*x9696))+(((-1.0)*x9695*x9698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9700=((-1.0)*r21);
IkReal x9701=((-1.0)*r20);
CheckValue<IkReal> x9703 = IKatan2WithCheck(IkReal(x9700),IkReal(x9701),IKFAST_ATAN2_MAGTHRESH);
if(!x9703.valid){
continue;
}
IkReal x9702=((1.0)*(x9703.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9702)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9701);
rxp0_2=(py*r00);
rxp1_0=(py*x9700);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9702)));
IkReal gconst4=x9700;
IkReal gconst5=((1.0)*r20);
IkReal x9704=((1.0)*r01*r21);
IkReal x9705=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*sj3*x9705))+(((-1.0)*sj3*x9704)));
j4eval[1]=((((-1.0)*x9705))+(((-1.0)*x9704)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9706=((-1.0)*r21);
IkReal x9707=((-1.0)*r20);
CheckValue<IkReal> x9709 = IKatan2WithCheck(IkReal(x9706),IkReal(x9707),IKFAST_ATAN2_MAGTHRESH);
if(!x9709.valid){
continue;
}
IkReal x9708=((1.0)*(x9709.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9708)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9707);
rxp0_2=(py*r00);
rxp1_0=(py*x9706);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9708)));
IkReal gconst4=x9706;
IkReal gconst5=((1.0)*r20);
IkReal x9710=((1.0)*r01*r21);
IkReal x9711=((1.0)*r00*r20);
j4eval[0]=(((cj3*x9710))+((cj3*x9711)));
j4eval[1]=((((-1.0)*x9710))+(((-1.0)*x9711)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9712=((-1.0)*r21);
IkReal x9713=((-1.0)*r20);
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal(x9712),IkReal(x9713),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
IkReal x9714=((1.0)*(x9715.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9714)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x9713);
rxp0_2=(py*r00);
rxp1_0=(py*x9712);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9714)));
IkReal gconst4=x9712;
IkReal gconst5=((1.0)*r20);
IkReal x9716=((1.0)*sj3);
j4eval[0]=((((-1.0)*r00*r20*x9716))+(((-1.0)*r01*r21*x9716)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9717=((1.0)*r00);
CheckValue<IkReal> x9718=IKPowWithIntegerCheck((((gconst4*r01*sj3))+(((-1.0)*gconst5*sj3*x9717))),-1);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719=IKPowWithIntegerCheck(r12,-1);
if(!x9719.valid){
continue;
}
CheckValue<IkReal> x9720=IKPowWithIntegerCheck(sj3,-1);
if(!x9720.valid){
continue;
}
if( IKabs(((x9718.value)*(((((-1.0)*cj3*gconst4*x9717))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9719.value)*(x9720.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9718.value)*(((((-1.0)*cj3*gconst4*x9717))+(((-1.0)*cj3*gconst5*r01))))))+IKsqr(((x9719.value)*(x9720.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9718.value)*(((((-1.0)*cj3*gconst4*x9717))+(((-1.0)*cj3*gconst5*r01))))), ((x9719.value)*(x9720.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9721=IKcos(j4);
IkReal x9722=IKsin(j4);
IkReal x9723=(cj1*cj2);
IkReal x9724=(gconst4*r21);
IkReal x9725=(gconst4*r01);
IkReal x9726=((1.0)*gconst5);
IkReal x9727=((1.0)*sj1);
IkReal x9728=(cj1*sj2);
IkReal x9729=(gconst5*sj3);
IkReal x9730=(cj3*gconst5);
IkReal x9731=(gconst4*r00);
IkReal x9732=(gconst4*r20);
IkReal x9733=(sj2*x9727);
IkReal x9734=(sj3*x9722);
IkReal x9735=(r12*x9721);
IkReal x9736=(x9722*x9730);
IkReal x9737=((1.0)*cj3*x9722);
evalcond[0]=(r12*x9722);
evalcond[1]=((((-1.0)*r20*x9721*x9726))+((x9721*x9724)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*sj3*x9735))+x9728);
evalcond[3]=(x9723+(((-1.0)*x9733))+((cj3*x9735)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x9721*x9726))+((x9721*x9725)));
evalcond[5]=((((-1.0)*r00*x9726*x9734))+((cj3*x9731))+((x9725*x9734))+((r01*x9730)));
evalcond[6]=(((r01*x9729))+(((-1.0)*x9725*x9737))+((sj3*x9731))+((r00*x9736)));
evalcond[7]=((((-1.0)*r20*x9726*x9734))+x9723+(((-1.0)*x9733))+((cj3*x9732))+((r21*x9730))+((x9724*x9734)));
evalcond[8]=((((-1.0)*cj2*x9727))+(((-1.0)*x9724*x9737))+((r20*x9736))+((sj3*x9732))+((r21*x9729))+(((-1.0)*x9728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9738=((1.0)*r01);
IkReal x9739=(gconst5*r00);
CheckValue<IkReal> x9740=IKPowWithIntegerCheck((((cj3*x9739))+(((-1.0)*cj3*gconst4*x9738))),-1);
if(!x9740.valid){
continue;
}
CheckValue<IkReal> x9741=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x9739))),-1);
if(!x9741.valid){
continue;
}
if( IKabs(((x9740.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*gconst5*sj3*x9738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9741.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9740.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*gconst5*sj3*x9738))))))+IKsqr(x9741.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9740.value)*(((((-1.0)*gconst4*r00*sj3))+(((-1.0)*gconst5*sj3*x9738))))), x9741.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9742=IKcos(j4);
IkReal x9743=IKsin(j4);
IkReal x9744=(cj1*cj2);
IkReal x9745=(gconst4*r21);
IkReal x9746=(gconst4*r01);
IkReal x9747=((1.0)*gconst5);
IkReal x9748=((1.0)*sj1);
IkReal x9749=(cj1*sj2);
IkReal x9750=(gconst5*sj3);
IkReal x9751=(cj3*gconst5);
IkReal x9752=(gconst4*r00);
IkReal x9753=(gconst4*r20);
IkReal x9754=(sj2*x9748);
IkReal x9755=(sj3*x9743);
IkReal x9756=(r12*x9742);
IkReal x9757=(x9743*x9751);
IkReal x9758=((1.0)*cj3*x9743);
evalcond[0]=(r12*x9743);
evalcond[1]=((((-1.0)*r20*x9742*x9747))+((x9742*x9745)));
evalcond[2]=(((cj2*sj1))+x9749+(((-1.0)*sj3*x9756)));
evalcond[3]=(x9744+((cj3*x9756))+(((-1.0)*x9754)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x9742*x9747))+((x9742*x9746)));
evalcond[5]=(((r01*x9751))+((cj3*x9752))+((x9746*x9755))+(((-1.0)*r00*x9747*x9755)));
evalcond[6]=((((-1.0)*x9746*x9758))+((r01*x9750))+((r00*x9757))+((sj3*x9752)));
evalcond[7]=((((-1.0)*r20*x9747*x9755))+((r21*x9751))+x9744+((cj3*x9753))+((x9745*x9755))+(((-1.0)*x9754)));
evalcond[8]=(((r21*x9750))+(((-1.0)*x9749))+(((-1.0)*x9745*x9758))+(((-1.0)*cj2*x9748))+((r20*x9757))+((sj3*x9753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9759=((1.0)*gconst5);
IkReal x9760=(gconst4*r01);
CheckValue<IkReal> x9761=IKPowWithIntegerCheck(((((-1.0)*r00*sj3*x9759))+((sj3*x9760))),-1);
if(!x9761.valid){
continue;
}
CheckValue<IkReal> x9762=IKPowWithIntegerCheck((x9760+(((-1.0)*r00*x9759))),-1);
if(!x9762.valid){
continue;
}
if( IKabs(((x9761.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x9762.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9761.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9759))))))+IKsqr(x9762.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9761.value)*(((((-1.0)*cj3*gconst4*r00))+(((-1.0)*cj3*r01*x9759))))), x9762.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9763=IKcos(j4);
IkReal x9764=IKsin(j4);
IkReal x9765=(cj1*cj2);
IkReal x9766=(gconst4*r21);
IkReal x9767=(gconst4*r01);
IkReal x9768=((1.0)*gconst5);
IkReal x9769=((1.0)*sj1);
IkReal x9770=(cj1*sj2);
IkReal x9771=(gconst5*sj3);
IkReal x9772=(cj3*gconst5);
IkReal x9773=(gconst4*r00);
IkReal x9774=(gconst4*r20);
IkReal x9775=(sj2*x9769);
IkReal x9776=(sj3*x9764);
IkReal x9777=(r12*x9763);
IkReal x9778=(x9764*x9772);
IkReal x9779=((1.0)*cj3*x9764);
evalcond[0]=(r12*x9764);
evalcond[1]=(((x9763*x9766))+(((-1.0)*r20*x9763*x9768)));
evalcond[2]=(((cj2*sj1))+x9770+(((-1.0)*sj3*x9777)));
evalcond[3]=(x9765+((cj3*x9777))+(((-1.0)*x9775)));
evalcond[4]=((-1.0)+((x9763*x9767))+(((-1.0)*r00*x9763*x9768)));
evalcond[5]=(((r01*x9772))+((x9767*x9776))+((cj3*x9773))+(((-1.0)*r00*x9768*x9776)));
evalcond[6]=(((r01*x9771))+((r00*x9778))+(((-1.0)*x9767*x9779))+((sj3*x9773)));
evalcond[7]=((((-1.0)*r20*x9768*x9776))+x9765+((cj3*x9774))+((r21*x9772))+((x9766*x9776))+(((-1.0)*x9775)));
evalcond[8]=((((-1.0)*x9770))+((r21*x9771))+((r20*x9778))+((sj3*x9774))+(((-1.0)*cj2*x9769))+(((-1.0)*x9766*x9779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9780=gconst4*gconst4;
IkReal x9781=gconst5*gconst5;
IkReal x9782=(gconst4*r00);
IkReal x9783=(gconst5*r01);
IkReal x9784=((1.0)*r20);
IkReal x9785=((1.0)*r22*sj3);
IkReal x9786=(r21*x9780);
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj3*x9781*x9784))+((r00*sj3*x9786))+(((-1.0)*gconst5*sj3*x9782*x9784))+((gconst4*r21*sj3*x9783)))),IkReal(((((-1.0)*x9782*x9785))+(((-1.0)*x9783*x9785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(IKsign((((cj3*r00*r20*x9781))+(((-1.0)*cj3*gconst5*r21*x9782))+(((-1.0)*cj3*gconst4*x9783*x9784))+((cj3*r01*x9786))+((cj3*r02*r22)))),-1);
if(!x9788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9787.value)+(((1.5707963267949)*(x9788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9789=IKcos(j4);
IkReal x9790=IKsin(j4);
IkReal x9791=(cj1*cj2);
IkReal x9792=(gconst5*sj3);
IkReal x9793=((1.0)*r10);
IkReal x9794=((1.0)*sj1);
IkReal x9795=(cj1*sj2);
IkReal x9796=(cj3*gconst4);
IkReal x9797=(gconst4*sj3);
IkReal x9798=(cj3*gconst5);
IkReal x9799=(sj2*x9794);
IkReal x9800=(gconst4*x9789);
IkReal x9801=(gconst5*x9789);
IkReal x9802=((1.0)*x9790);
IkReal x9803=(cj3*x9789);
IkReal x9804=(x9790*x9797);
IkReal x9805=(x9790*x9798);
IkReal x9806=((1.0)*sj3*x9789);
evalcond[0]=(((r21*x9800))+(((-1.0)*r20*x9801))+((r22*x9790)));
evalcond[1]=(((r12*x9790))+((r11*x9800))+(((-1.0)*x9793*x9801)));
evalcond[2]=((-1.0)+((r02*x9790))+(((-1.0)*r00*x9801))+((r01*x9800)));
evalcond[3]=(((r00*x9805))+(((-1.0)*r01*x9796*x9802))+((r00*x9797))+((r02*x9803))+((r01*x9792)));
evalcond[4]=((((-1.0)*r00*x9792*x9802))+(((-1.0)*r02*x9806))+((r00*x9796))+((r01*x9798))+((r01*x9804)));
evalcond[5]=(((cj2*sj1))+((r11*x9798))+((r10*x9796))+((r11*x9804))+x9795+(((-1.0)*r12*x9806))+(((-1.0)*x9790*x9792*x9793)));
evalcond[6]=(((r10*x9805))+((r12*x9803))+((r11*x9792))+((r10*x9797))+(((-1.0)*x9799))+x9791+(((-1.0)*r11*x9796*x9802)));
evalcond[7]=((((-1.0)*r20*x9792*x9802))+((r21*x9804))+((r20*x9796))+(((-1.0)*r22*x9806))+(((-1.0)*x9799))+x9791+((r21*x9798)));
evalcond[8]=(((r20*x9797))+(((-1.0)*x9795))+((r22*x9803))+((r21*x9792))+((r20*x9805))+(((-1.0)*r21*x9796*x9802))+(((-1.0)*cj2*x9794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9807=((1.0)*gconst5);
CheckValue<IkReal> x9808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9807))+(((-1.0)*gconst4*r20)))),-1);
if(!x9808.valid){
continue;
}
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x9807)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9808.value)))+(x9809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9810=IKcos(j4);
IkReal x9811=IKsin(j4);
IkReal x9812=(cj1*cj2);
IkReal x9813=(gconst5*sj3);
IkReal x9814=((1.0)*r10);
IkReal x9815=((1.0)*sj1);
IkReal x9816=(cj1*sj2);
IkReal x9817=(cj3*gconst4);
IkReal x9818=(gconst4*sj3);
IkReal x9819=(cj3*gconst5);
IkReal x9820=(sj2*x9815);
IkReal x9821=(gconst4*x9810);
IkReal x9822=(gconst5*x9810);
IkReal x9823=((1.0)*x9811);
IkReal x9824=(cj3*x9810);
IkReal x9825=(x9811*x9818);
IkReal x9826=(x9811*x9819);
IkReal x9827=((1.0)*sj3*x9810);
evalcond[0]=(((r22*x9811))+((r21*x9821))+(((-1.0)*r20*x9822)));
evalcond[1]=(((r11*x9821))+((r12*x9811))+(((-1.0)*x9814*x9822)));
evalcond[2]=((-1.0)+((r01*x9821))+((r02*x9811))+(((-1.0)*r00*x9822)));
evalcond[3]=((((-1.0)*r01*x9817*x9823))+((r00*x9826))+((r02*x9824))+((r00*x9818))+((r01*x9813)));
evalcond[4]=((((-1.0)*r00*x9813*x9823))+(((-1.0)*r02*x9827))+((r01*x9825))+((r00*x9817))+((r01*x9819)));
evalcond[5]=(((cj2*sj1))+((r11*x9825))+((r11*x9819))+(((-1.0)*x9811*x9813*x9814))+(((-1.0)*r12*x9827))+x9816+((r10*x9817)));
evalcond[6]=((((-1.0)*x9820))+((r11*x9813))+((r12*x9824))+(((-1.0)*r11*x9817*x9823))+x9812+((r10*x9826))+((r10*x9818)));
evalcond[7]=(((r21*x9819))+(((-1.0)*x9820))+((r21*x9825))+(((-1.0)*r20*x9813*x9823))+x9812+(((-1.0)*r22*x9827))+((r20*x9817)));
evalcond[8]=(((r20*x9826))+((r21*x9813))+(((-1.0)*x9816))+(((-1.0)*r21*x9817*x9823))+((r22*x9824))+((r20*x9818))+(((-1.0)*cj2*x9815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9828=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x9828.valid){
continue;
}
CheckValue<IkReal> x9829 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9828.value)))+(x9829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9830=IKcos(j4);
IkReal x9831=IKsin(j4);
IkReal x9832=(cj1*cj2);
IkReal x9833=(gconst5*sj3);
IkReal x9834=((1.0)*r10);
IkReal x9835=((1.0)*sj1);
IkReal x9836=(cj1*sj2);
IkReal x9837=(cj3*gconst4);
IkReal x9838=(gconst4*sj3);
IkReal x9839=(cj3*gconst5);
IkReal x9840=(sj2*x9835);
IkReal x9841=(gconst4*x9830);
IkReal x9842=(gconst5*x9830);
IkReal x9843=((1.0)*x9831);
IkReal x9844=(cj3*x9830);
IkReal x9845=(x9831*x9838);
IkReal x9846=(x9831*x9839);
IkReal x9847=((1.0)*sj3*x9830);
evalcond[0]=(((r22*x9831))+(((-1.0)*r20*x9842))+((r21*x9841)));
evalcond[1]=(((r11*x9841))+((r12*x9831))+(((-1.0)*x9834*x9842)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9842))+((r01*x9841))+((r02*x9831)));
evalcond[3]=(((r00*x9838))+((r02*x9844))+((r01*x9833))+(((-1.0)*r01*x9837*x9843))+((r00*x9846)));
evalcond[4]=(((r00*x9837))+((r01*x9839))+(((-1.0)*r02*x9847))+((r01*x9845))+(((-1.0)*r00*x9833*x9843)));
evalcond[5]=(((r11*x9845))+((cj2*sj1))+((r11*x9839))+(((-1.0)*r12*x9847))+((r10*x9837))+(((-1.0)*x9831*x9833*x9834))+x9836);
evalcond[6]=(((r11*x9833))+((r10*x9846))+((r10*x9838))+(((-1.0)*r11*x9837*x9843))+(((-1.0)*x9840))+((r12*x9844))+x9832);
evalcond[7]=(((r21*x9839))+(((-1.0)*x9840))+(((-1.0)*r20*x9833*x9843))+(((-1.0)*r22*x9847))+((r20*x9837))+x9832+((r21*x9845)));
evalcond[8]=((((-1.0)*r21*x9837*x9843))+(((-1.0)*x9836))+((r21*x9833))+((r20*x9846))+((r20*x9838))+(((-1.0)*cj2*x9835))+((r22*x9844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9848=((-1.0)*r21);
CheckValue<IkReal> x9851 = IKatan2WithCheck(IkReal(x9848),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9851.valid){
continue;
}
IkReal x9849=((1.0)*(x9851.value));
IkReal x9850=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9849)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9849)));
IkReal gconst4=(x9848*x9850);
IkReal gconst5=((1.0)*r20*x9850);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9852=((-1.0)*r21);
CheckValue<IkReal> x9855 = IKatan2WithCheck(IkReal(x9852),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9855.valid){
continue;
}
IkReal x9853=((1.0)*(x9855.value));
IkReal x9854=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9853)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9853)));
IkReal gconst4=(x9852*x9854);
IkReal gconst5=((1.0)*r20*x9854);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9856=((-1.0)*r21);
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal(x9856),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
IkReal x9857=((1.0)*(x9859.value));
IkReal x9858=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9857)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9857)));
IkReal gconst4=(x9856*x9858);
IkReal gconst5=((1.0)*r20*x9858);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9860=((-1.0)*r21);
CheckValue<IkReal> x9863 = IKatan2WithCheck(IkReal(x9860),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9863.valid){
continue;
}
IkReal x9861=((1.0)*(x9863.value));
IkReal x9862=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9861)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9861)));
IkReal gconst4=(x9860*x9862);
IkReal gconst5=((1.0)*r20*x9862);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9864=((-1.0)*r21);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(x9864),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
IkReal x9865=((1.0)*(x9867.value));
IkReal x9866=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9865)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9865)));
IkReal gconst4=(x9864*x9866);
IkReal gconst5=((1.0)*r20*x9866);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9868=((-1.0)*r21);
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(x9868),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
IkReal x9869=((1.0)*(x9871.value));
IkReal x9870=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9869)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9869)));
IkReal gconst4=(x9868*x9870);
IkReal gconst5=((1.0)*r20*x9870);
IkReal x9872=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9876=IKPowWithIntegerCheck(x9872,-1);
if(!x9876.valid){
continue;
}
IkReal x9873=x9876.value;
IkReal x9874=((1.0)*x9873);
IkReal x9875=((((-1.0)*x9874*(r01*r01)*(r21*r21)))+(((-1.0)*x9874*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9873)));
j4eval[0]=x9875;
j4eval[1]=r02;
j4eval[2]=x9872;
j4eval[3]=IKsign(x9875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9877=(gconst4*r01);
IkReal x9878=(gconst5*r00);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9878))+x9877)),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
CheckValue<IkReal> x9880=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9877*x9878))+(((-1.0)*(x9878*x9878)))+(((-1.0)*(x9877*x9877))))),-1);
if(!x9880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9879.value)+(((1.5707963267949)*(x9880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9881=IKcos(j4);
IkReal x9882=IKsin(j4);
IkReal x9883=(gconst5*r10);
IkReal x9884=((1.0)*sj2);
IkReal x9885=(gconst5*r00);
IkReal x9886=(gconst5*r20);
IkReal x9887=((1.0)*x9881);
IkReal x9888=(gconst4*x9882);
IkReal x9889=(gconst4*x9881);
IkReal x9890=((1.0)*x9882);
evalcond[0]=(((r21*x9889))+(((-1.0)*x9886*x9887))+((r22*x9882)));
evalcond[1]=(((r12*x9882))+(((-1.0)*x9883*x9887))+((r11*x9889)));
evalcond[2]=((1.0)+(((-1.0)*x9885*x9887))+((r01*x9889))+((r02*x9882)));
evalcond[3]=(((r01*x9888))+(((-1.0)*x9885*x9890))+(((-1.0)*r02*x9887)));
evalcond[4]=((((-1.0)*r22*x9887))+(((-1.0)*sj1*x9884))+((r21*x9888))+((cj1*cj2))+(((-1.0)*x9886*x9890)));
evalcond[5]=((((-1.0)*cj1*x9884))+(((-1.0)*x9883*x9890))+(((-1.0)*cj2*sj1))+((r11*x9888))+(((-1.0)*r12*x9887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9891=((1.0)*gconst5);
CheckValue<IkReal> x9892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9891))+(((-1.0)*gconst4*r10)))),-1);
if(!x9892.valid){
continue;
}
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9891))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9892.value)))+(x9893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9894=IKcos(j4);
IkReal x9895=IKsin(j4);
IkReal x9896=(gconst5*r10);
IkReal x9897=((1.0)*sj2);
IkReal x9898=(gconst5*r00);
IkReal x9899=(gconst5*r20);
IkReal x9900=((1.0)*x9894);
IkReal x9901=(gconst4*x9895);
IkReal x9902=(gconst4*x9894);
IkReal x9903=((1.0)*x9895);
evalcond[0]=(((r22*x9895))+((r21*x9902))+(((-1.0)*x9899*x9900)));
evalcond[1]=(((r11*x9902))+((r12*x9895))+(((-1.0)*x9896*x9900)));
evalcond[2]=((1.0)+((r01*x9902))+((r02*x9895))+(((-1.0)*x9898*x9900)));
evalcond[3]=(((r01*x9901))+(((-1.0)*x9898*x9903))+(((-1.0)*r02*x9900)));
evalcond[4]=((((-1.0)*r22*x9900))+((cj1*cj2))+((r21*x9901))+(((-1.0)*sj1*x9897))+(((-1.0)*x9899*x9903)));
evalcond[5]=((((-1.0)*cj1*x9897))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x9900))+((r11*x9901))+(((-1.0)*x9896*x9903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9904 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9904.valid){
continue;
}
CheckValue<IkReal> x9905=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9904.value)+(((1.5707963267949)*(x9905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9906=IKcos(j4);
IkReal x9907=IKsin(j4);
IkReal x9908=(gconst5*r10);
IkReal x9909=((1.0)*sj2);
IkReal x9910=(gconst5*r00);
IkReal x9911=(gconst5*r20);
IkReal x9912=((1.0)*x9906);
IkReal x9913=(gconst4*x9907);
IkReal x9914=(gconst4*x9906);
IkReal x9915=((1.0)*x9907);
evalcond[0]=(((r22*x9907))+((r21*x9914))+(((-1.0)*x9911*x9912)));
evalcond[1]=(((r12*x9907))+(((-1.0)*x9908*x9912))+((r11*x9914)));
evalcond[2]=((1.0)+((r02*x9907))+((r01*x9914))+(((-1.0)*x9910*x9912)));
evalcond[3]=(((r01*x9913))+(((-1.0)*r02*x9912))+(((-1.0)*x9910*x9915)));
evalcond[4]=((((-1.0)*r22*x9912))+((r21*x9913))+((cj1*cj2))+(((-1.0)*sj1*x9909))+(((-1.0)*x9911*x9915)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x9912))+(((-1.0)*x9908*x9915))+((r11*x9913))+(((-1.0)*cj1*x9909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9916=((-1.0)*r21);
CheckValue<IkReal> x9919 = IKatan2WithCheck(IkReal(x9916),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9919.valid){
continue;
}
IkReal x9917=((1.0)*(x9919.value));
IkReal x9918=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9917)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9917)));
IkReal gconst4=(x9916*x9918);
IkReal gconst5=((1.0)*r20*x9918);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9920=((-1.0)*r21);
CheckValue<IkReal> x9923 = IKatan2WithCheck(IkReal(x9920),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9923.valid){
continue;
}
IkReal x9921=((1.0)*(x9923.value));
IkReal x9922=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9921)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9921)));
IkReal gconst4=(x9920*x9922);
IkReal gconst5=((1.0)*r20*x9922);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9924=((-1.0)*r21);
CheckValue<IkReal> x9927 = IKatan2WithCheck(IkReal(x9924),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9927.valid){
continue;
}
IkReal x9925=((1.0)*(x9927.value));
IkReal x9926=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9925)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9925)));
IkReal gconst4=(x9924*x9926);
IkReal gconst5=((1.0)*r20*x9926);
IkReal x9928=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9932=IKPowWithIntegerCheck(x9928,-1);
if(!x9932.valid){
continue;
}
IkReal x9929=x9932.value;
IkReal x9930=((1.0)*x9929);
IkReal x9931=((((-1.0)*x9930*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9930*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9929)));
j4eval[0]=x9931;
j4eval[1]=r02;
j4eval[2]=x9928;
j4eval[3]=IKsign(x9931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9933=(gconst4*r01);
IkReal x9934=(gconst5*r00);
CheckValue<IkReal> x9935=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9934*x9934)))+(((2.0)*x9933*x9934))+(((-1.0)*(x9933*x9933))))),-1);
if(!x9935.valid){
continue;
}
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9934))+x9933)),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9935.value)))+(x9936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9937=IKcos(j4);
IkReal x9938=IKsin(j4);
IkReal x9939=(gconst4*r21);
IkReal x9940=((1.0)*sj1);
IkReal x9941=(gconst4*r11);
IkReal x9942=(gconst4*r01);
IkReal x9943=((1.0)*x9938);
IkReal x9944=(gconst5*x9938);
IkReal x9945=((1.0)*gconst5*x9937);
evalcond[0]=((((-1.0)*r20*x9945))+((r22*x9938))+((x9937*x9939)));
evalcond[1]=(((r12*x9938))+(((-1.0)*r10*x9945))+((x9937*x9941)));
evalcond[2]=(((r02*x9937))+((r00*x9944))+(((-1.0)*x9942*x9943)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9945))+((x9937*x9942))+((r02*x9938)));
evalcond[4]=(((r22*x9937))+((r20*x9944))+(((-1.0)*x9939*x9943))+(((-1.0)*sj2*x9940))+((cj1*cj2)));
evalcond[5]=((((-1.0)*x9941*x9943))+((r12*x9937))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9940))+((r10*x9944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9946=((1.0)*gconst5);
CheckValue<IkReal> x9947 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9946))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9947.valid){
continue;
}
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9946))+(((-1.0)*gconst4*r10)))),-1);
if(!x9948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9947.value)+(((1.5707963267949)*(x9948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9949=IKcos(j4);
IkReal x9950=IKsin(j4);
IkReal x9951=(gconst4*r21);
IkReal x9952=((1.0)*sj1);
IkReal x9953=(gconst4*r11);
IkReal x9954=(gconst4*r01);
IkReal x9955=((1.0)*x9950);
IkReal x9956=(gconst5*x9950);
IkReal x9957=((1.0)*gconst5*x9949);
evalcond[0]=((((-1.0)*r20*x9957))+((x9949*x9951))+((r22*x9950)));
evalcond[1]=((((-1.0)*r10*x9957))+((x9949*x9953))+((r12*x9950)));
evalcond[2]=(((r02*x9949))+(((-1.0)*x9954*x9955))+((r00*x9956)));
evalcond[3]=((1.0)+((r02*x9950))+(((-1.0)*r00*x9957))+((x9949*x9954)));
evalcond[4]=(((r22*x9949))+((r20*x9956))+(((-1.0)*sj2*x9952))+((cj1*cj2))+(((-1.0)*x9951*x9955)));
evalcond[5]=((((-1.0)*x9953*x9955))+(((-1.0)*cj1*sj2))+((r12*x9949))+(((-1.0)*cj2*x9952))+((r10*x9956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9958 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9958.valid){
continue;
}
CheckValue<IkReal> x9959=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9958.value)+(((1.5707963267949)*(x9959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9960=IKcos(j4);
IkReal x9961=IKsin(j4);
IkReal x9962=(gconst4*r21);
IkReal x9963=((1.0)*sj1);
IkReal x9964=(gconst4*r11);
IkReal x9965=(gconst4*r01);
IkReal x9966=((1.0)*x9961);
IkReal x9967=(gconst5*x9961);
IkReal x9968=((1.0)*gconst5*x9960);
evalcond[0]=(((r22*x9961))+(((-1.0)*r20*x9968))+((x9960*x9962)));
evalcond[1]=((((-1.0)*r10*x9968))+((r12*x9961))+((x9960*x9964)));
evalcond[2]=(((r02*x9960))+((r00*x9967))+(((-1.0)*x9965*x9966)));
evalcond[3]=((1.0)+((r02*x9961))+(((-1.0)*r00*x9968))+((x9960*x9965)));
evalcond[4]=((((-1.0)*sj2*x9963))+(((-1.0)*x9962*x9966))+((r22*x9960))+((cj1*cj2))+((r20*x9967)));
evalcond[5]=(((r10*x9967))+(((-1.0)*cj2*x9963))+(((-1.0)*cj1*sj2))+(((-1.0)*x9964*x9966))+((r12*x9960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x9969=((-1.0)*r21);
CheckValue<IkReal> x9972 = IKatan2WithCheck(IkReal(x9969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9972.valid){
continue;
}
IkReal x9970=((1.0)*(x9972.value));
IkReal x9971=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9970)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9970)));
IkReal gconst4=(x9969*x9971);
IkReal gconst5=((1.0)*r20*x9971);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9973=((-1.0)*r21);
CheckValue<IkReal> x9976 = IKatan2WithCheck(IkReal(x9973),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9976.valid){
continue;
}
IkReal x9974=((1.0)*(x9976.value));
IkReal x9975=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9974)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9974)));
IkReal gconst4=(x9973*x9975);
IkReal gconst5=((1.0)*r20*x9975);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9977=((-1.0)*r21);
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(x9977),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
IkReal x9978=((1.0)*(x9980.value));
IkReal x9979=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x9978)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9978)));
IkReal gconst4=(x9977*x9979);
IkReal gconst5=((1.0)*r20*x9979);
IkReal x9981=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9985=IKPowWithIntegerCheck(x9981,-1);
if(!x9985.valid){
continue;
}
IkReal x9982=x9985.value;
IkReal x9983=((1.0)*x9982);
IkReal x9984=((((-1.0)*x9983*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9982))+(((-1.0)*x9983*(r00*r00)*(r20*r20))));
j4eval[0]=x9984;
j4eval[1]=r02;
j4eval[2]=x9981;
j4eval[3]=IKsign(x9984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9986=(gconst4*r01);
IkReal x9987=(gconst5*r00);
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x9987))+x9986)),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9986*x9987))+(((-1.0)*(x9987*x9987)))+(((-1.0)*(x9986*x9986))))),-1);
if(!x9989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9988.value)+(((1.5707963267949)*(x9989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9990=IKcos(j4);
IkReal x9991=IKsin(j4);
IkReal x9992=(gconst4*r21);
IkReal x9993=((1.0)*cj2);
IkReal x9994=(gconst4*r11);
IkReal x9995=(gconst4*r01);
IkReal x9996=((1.0)*x9991);
IkReal x9997=(gconst5*x9991);
IkReal x9998=((1.0)*gconst5*x9990);
evalcond[0]=(((r22*x9991))+((x9990*x9992))+(((-1.0)*r20*x9998)));
evalcond[1]=((((-1.0)*r10*x9998))+((r12*x9991))+((x9990*x9994)));
evalcond[2]=(((r00*x9997))+(((-1.0)*x9995*x9996))+((r02*x9990)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9998))+((x9990*x9995))+((r02*x9991)));
evalcond[4]=((((-1.0)*x9994*x9996))+(((-1.0)*cj1*x9993))+((r10*x9997))+((r12*x9990))+((sj1*sj2)));
evalcond[5]=(((r22*x9990))+(((-1.0)*cj1*sj2))+(((-1.0)*x9992*x9996))+((r20*x9997))+(((-1.0)*sj1*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9999=((1.0)*gconst5);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9999))+(((-1.0)*gconst4*r10)))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9999)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10000.value)))+(x10001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10002=IKcos(j4);
IkReal x10003=IKsin(j4);
IkReal x10004=(gconst4*r21);
IkReal x10005=((1.0)*cj2);
IkReal x10006=(gconst4*r11);
IkReal x10007=(gconst4*r01);
IkReal x10008=((1.0)*x10003);
IkReal x10009=(gconst5*x10003);
IkReal x10010=((1.0)*gconst5*x10002);
evalcond[0]=((((-1.0)*r20*x10010))+((r22*x10003))+((x10002*x10004)));
evalcond[1]=(((r12*x10003))+((x10002*x10006))+(((-1.0)*r10*x10010)));
evalcond[2]=(((r02*x10002))+(((-1.0)*x10007*x10008))+((r00*x10009)));
evalcond[3]=((1.0)+((r02*x10003))+((x10002*x10007))+(((-1.0)*r00*x10010)));
evalcond[4]=(((r12*x10002))+((sj1*sj2))+((r10*x10009))+(((-1.0)*x10006*x10008))+(((-1.0)*cj1*x10005)));
evalcond[5]=((((-1.0)*sj1*x10005))+((r22*x10002))+(((-1.0)*cj1*sj2))+(((-1.0)*x10004*x10008))+((r20*x10009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10011 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10011.valid){
continue;
}
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10011.value)+(((1.5707963267949)*(x10012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10013=IKcos(j4);
IkReal x10014=IKsin(j4);
IkReal x10015=(gconst4*r21);
IkReal x10016=((1.0)*cj2);
IkReal x10017=(gconst4*r11);
IkReal x10018=(gconst4*r01);
IkReal x10019=((1.0)*x10014);
IkReal x10020=(gconst5*x10014);
IkReal x10021=((1.0)*gconst5*x10013);
evalcond[0]=(((x10013*x10015))+((r22*x10014))+(((-1.0)*r20*x10021)));
evalcond[1]=(((x10013*x10017))+(((-1.0)*r10*x10021))+((r12*x10014)));
evalcond[2]=((((-1.0)*x10018*x10019))+((r02*x10013))+((r00*x10020)));
evalcond[3]=((1.0)+((x10013*x10018))+((r02*x10014))+(((-1.0)*r00*x10021)));
evalcond[4]=(((r12*x10013))+((sj1*sj2))+((r10*x10020))+(((-1.0)*x10017*x10019))+(((-1.0)*cj1*x10016)));
evalcond[5]=((((-1.0)*x10015*x10019))+(((-1.0)*sj1*x10016))+((r22*x10013))+(((-1.0)*cj1*sj2))+((r20*x10020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10022=((-1.0)*r21);
CheckValue<IkReal> x10025 = IKatan2WithCheck(IkReal(x10022),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10025.valid){
continue;
}
IkReal x10023=((1.0)*(x10025.value));
IkReal x10024=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10023)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10023)));
IkReal gconst4=(x10022*x10024);
IkReal gconst5=((1.0)*r20*x10024);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10026=((-1.0)*r21);
CheckValue<IkReal> x10029 = IKatan2WithCheck(IkReal(x10026),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10029.valid){
continue;
}
IkReal x10027=((1.0)*(x10029.value));
IkReal x10028=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10027)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10027)));
IkReal gconst4=(x10026*x10028);
IkReal gconst5=((1.0)*r20*x10028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10030=((-1.0)*r21);
CheckValue<IkReal> x10033 = IKatan2WithCheck(IkReal(x10030),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10033.valid){
continue;
}
IkReal x10031=((1.0)*(x10033.value));
IkReal x10032=x8792;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10031)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10031)));
IkReal gconst4=(x10030*x10032);
IkReal gconst5=((1.0)*r20*x10032);
IkReal x10034=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10038=IKPowWithIntegerCheck(x10034,-1);
if(!x10038.valid){
continue;
}
IkReal x10035=x10038.value;
IkReal x10036=((1.0)*x10035);
IkReal x10037=((((-1.0)*x10036*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10035))+(((-1.0)*x10036*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j4eval[0]=x10037;
j4eval[1]=r02;
j4eval[2]=x10034;
j4eval[3]=IKsign(x10037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10039=(gconst4*r01);
IkReal x10040=(gconst5*r00);
CheckValue<IkReal> x10041=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10039*x10039)))+(((-1.0)*(x10040*x10040)))+(((-1.0)*(r02*r02)))+(((2.0)*x10039*x10040)))),-1);
if(!x10041.valid){
continue;
}
CheckValue<IkReal> x10042 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10040))+x10039)),IKFAST_ATAN2_MAGTHRESH);
if(!x10042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10041.value)))+(x10042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10043=IKcos(j4);
IkReal x10044=IKsin(j4);
IkReal x10045=(gconst4*r11);
IkReal x10046=(gconst5*r10);
IkReal x10047=((1.0)*cj1);
IkReal x10048=(gconst5*r00);
IkReal x10049=(gconst5*r20);
IkReal x10050=((1.0)*x10043);
IkReal x10051=(gconst4*x10043);
IkReal x10052=((1.0)*x10044);
IkReal x10053=(gconst4*x10044);
evalcond[0]=((((-1.0)*x10049*x10050))+((r21*x10051))+((r22*x10044)));
evalcond[1]=(((x10043*x10045))+((r12*x10044))+(((-1.0)*x10046*x10050)));
evalcond[2]=((1.0)+((r01*x10051))+(((-1.0)*x10048*x10050))+((r02*x10044)));
evalcond[3]=(((r01*x10053))+(((-1.0)*x10048*x10052))+(((-1.0)*r02*x10050)));
evalcond[4]=((((-1.0)*cj2*x10047))+((sj1*sj2))+((x10044*x10045))+(((-1.0)*x10046*x10052))+(((-1.0)*r12*x10050)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10049*x10052))+((r21*x10053))+(((-1.0)*r22*x10050))+(((-1.0)*sj2*x10047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10054=((1.0)*gconst5);
CheckValue<IkReal> x10055 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10054)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10055.valid){
continue;
}
CheckValue<IkReal> x10056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10054))+(((-1.0)*gconst4*r10)))),-1);
if(!x10056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10055.value)+(((1.5707963267949)*(x10056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10057=IKcos(j4);
IkReal x10058=IKsin(j4);
IkReal x10059=(gconst4*r11);
IkReal x10060=(gconst5*r10);
IkReal x10061=((1.0)*cj1);
IkReal x10062=(gconst5*r00);
IkReal x10063=(gconst5*r20);
IkReal x10064=((1.0)*x10057);
IkReal x10065=(gconst4*x10057);
IkReal x10066=((1.0)*x10058);
IkReal x10067=(gconst4*x10058);
evalcond[0]=(((r22*x10058))+((r21*x10065))+(((-1.0)*x10063*x10064)));
evalcond[1]=((((-1.0)*x10060*x10064))+((x10057*x10059))+((r12*x10058)));
evalcond[2]=((1.0)+((r01*x10065))+((r02*x10058))+(((-1.0)*x10062*x10064)));
evalcond[3]=(((r01*x10067))+(((-1.0)*x10062*x10066))+(((-1.0)*r02*x10064)));
evalcond[4]=((((-1.0)*cj2*x10061))+(((-1.0)*x10060*x10066))+((sj1*sj2))+(((-1.0)*r12*x10064))+((x10058*x10059)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10061))+((r21*x10067))+(((-1.0)*r22*x10064))+(((-1.0)*x10063*x10066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10068 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10068.valid){
continue;
}
CheckValue<IkReal> x10069=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10068.value)+(((1.5707963267949)*(x10069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10070=IKcos(j4);
IkReal x10071=IKsin(j4);
IkReal x10072=(gconst4*r11);
IkReal x10073=(gconst5*r10);
IkReal x10074=((1.0)*cj1);
IkReal x10075=(gconst5*r00);
IkReal x10076=(gconst5*r20);
IkReal x10077=((1.0)*x10070);
IkReal x10078=(gconst4*x10070);
IkReal x10079=((1.0)*x10071);
IkReal x10080=(gconst4*x10071);
evalcond[0]=(((r22*x10071))+((r21*x10078))+(((-1.0)*x10076*x10077)));
evalcond[1]=(((r12*x10071))+((x10070*x10072))+(((-1.0)*x10073*x10077)));
evalcond[2]=((1.0)+((r01*x10078))+((r02*x10071))+(((-1.0)*x10075*x10077)));
evalcond[3]=(((r01*x10080))+(((-1.0)*x10075*x10079))+(((-1.0)*r02*x10077)));
evalcond[4]=(((x10071*x10072))+(((-1.0)*cj2*x10074))+((sj1*sj2))+(((-1.0)*r12*x10077))+(((-1.0)*x10073*x10079)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x10080))+(((-1.0)*sj2*x10074))+(((-1.0)*x10076*x10079))+(((-1.0)*r22*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10081=gconst4*gconst4;
IkReal x10082=gconst5*gconst5;
IkReal x10083=(gconst4*r00);
IkReal x10084=(gconst5*r01);
IkReal x10085=((1.0)*r20);
IkReal x10086=((1.0)*r22*sj3);
IkReal x10087=(r21*x10081);
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal((((r00*sj3*x10087))+(((-1.0)*gconst5*sj3*x10083*x10085))+(((-1.0)*r01*sj3*x10082*x10085))+((gconst4*r21*sj3*x10084)))),IkReal(((((-1.0)*x10084*x10086))+(((-1.0)*x10083*x10086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089=IKPowWithIntegerCheck(IKsign((((cj3*r01*x10087))+(((-1.0)*cj3*gconst4*x10084*x10085))+(((-1.0)*cj3*gconst5*r21*x10083))+((cj3*r02*r22))+((cj3*r00*r20*x10082)))),-1);
if(!x10089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10088.value)+(((1.5707963267949)*(x10089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10090=IKcos(j4);
IkReal x10091=IKsin(j4);
IkReal x10092=(gconst5*sj3);
IkReal x10093=(sj1*sj2);
IkReal x10094=((1.0)*r10);
IkReal x10095=((1.0)*cj2);
IkReal x10096=(cj3*gconst4);
IkReal x10097=(gconst4*sj3);
IkReal x10098=(cj3*gconst5);
IkReal x10099=((1.0)*cj1*sj2);
IkReal x10100=(sj1*x10095);
IkReal x10101=(gconst4*x10090);
IkReal x10102=(gconst5*x10090);
IkReal x10103=((1.0)*x10091);
IkReal x10104=(cj3*x10090);
IkReal x10105=(x10091*x10097);
IkReal x10106=(x10091*x10098);
IkReal x10107=((1.0)*sj3*x10090);
IkReal x10108=(x10100+x10099);
evalcond[0]=(((r21*x10101))+((r22*x10091))+(((-1.0)*r20*x10102)));
evalcond[1]=(((r12*x10091))+(((-1.0)*x10094*x10102))+((r11*x10101)));
evalcond[2]=((1.0)+((r01*x10101))+((r02*x10091))+(((-1.0)*r00*x10102)));
evalcond[3]=(((r00*x10106))+((r02*x10104))+(((-1.0)*r01*x10096*x10103))+((r01*x10092))+((r00*x10097)));
evalcond[4]=(((r01*x10105))+(((-1.0)*r00*x10092*x10103))+(((-1.0)*r02*x10107))+((r01*x10098))+((r00*x10096)));
evalcond[5]=((((-1.0)*r11*x10096*x10103))+((r11*x10092))+(((-1.0)*cj1*x10095))+x10093+((r10*x10106))+((r10*x10097))+((r12*x10104)));
evalcond[6]=(((r21*x10105))+(((-1.0)*r20*x10092*x10103))+(((-1.0)*r22*x10107))+((r21*x10098))+((cj1*cj2))+((r20*x10096))+(((-1.0)*x10093)));
evalcond[7]=(((r20*x10106))+((r21*x10092))+((r20*x10097))+(((-1.0)*x10108))+((r22*x10104))+(((-1.0)*r21*x10096*x10103)));
evalcond[8]=((((-1.0)*x10091*x10092*x10094))+(((-1.0)*r12*x10107))+((r11*x10098))+((r11*x10105))+((r10*x10096))+(((-1.0)*x10108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10109=((1.0)*gconst5);
CheckValue<IkReal> x10110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10109))+(((-1.0)*gconst4*r10)))),-1);
if(!x10110.valid){
continue;
}
CheckValue<IkReal> x10111 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10109)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10110.value)))+(x10111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10112=IKcos(j4);
IkReal x10113=IKsin(j4);
IkReal x10114=(gconst5*sj3);
IkReal x10115=(sj1*sj2);
IkReal x10116=((1.0)*r10);
IkReal x10117=((1.0)*cj2);
IkReal x10118=(cj3*gconst4);
IkReal x10119=(gconst4*sj3);
IkReal x10120=(cj3*gconst5);
IkReal x10121=((1.0)*cj1*sj2);
IkReal x10122=(sj1*x10117);
IkReal x10123=(gconst4*x10112);
IkReal x10124=(gconst5*x10112);
IkReal x10125=((1.0)*x10113);
IkReal x10126=(cj3*x10112);
IkReal x10127=(x10113*x10119);
IkReal x10128=(x10113*x10120);
IkReal x10129=((1.0)*sj3*x10112);
IkReal x10130=(x10121+x10122);
evalcond[0]=(((r21*x10123))+(((-1.0)*r20*x10124))+((r22*x10113)));
evalcond[1]=((((-1.0)*x10116*x10124))+((r12*x10113))+((r11*x10123)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10124))+((r02*x10113))+((r01*x10123)));
evalcond[3]=(((r01*x10114))+((r00*x10119))+(((-1.0)*r01*x10118*x10125))+((r02*x10126))+((r00*x10128)));
evalcond[4]=(((r00*x10118))+(((-1.0)*r00*x10114*x10125))+(((-1.0)*r02*x10129))+((r01*x10127))+((r01*x10120)));
evalcond[5]=(((r10*x10128))+x10115+((r11*x10114))+(((-1.0)*r11*x10118*x10125))+(((-1.0)*cj1*x10117))+((r10*x10119))+((r12*x10126)));
evalcond[6]=((((-1.0)*x10115))+((r20*x10118))+((r21*x10127))+((r21*x10120))+(((-1.0)*r20*x10114*x10125))+((cj1*cj2))+(((-1.0)*r22*x10129)));
evalcond[7]=(((r21*x10114))+((r20*x10128))+((r20*x10119))+((r22*x10126))+(((-1.0)*x10130))+(((-1.0)*r21*x10118*x10125)));
evalcond[8]=((((-1.0)*x10113*x10114*x10116))+(((-1.0)*x10130))+((r10*x10118))+(((-1.0)*r12*x10129))+((r11*x10120))+((r11*x10127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
CheckValue<IkReal> x10132=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10131.value)+(((1.5707963267949)*(x10132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10133=IKcos(j4);
IkReal x10134=IKsin(j4);
IkReal x10135=(gconst5*sj3);
IkReal x10136=(sj1*sj2);
IkReal x10137=((1.0)*r10);
IkReal x10138=((1.0)*cj2);
IkReal x10139=(cj3*gconst4);
IkReal x10140=(gconst4*sj3);
IkReal x10141=(cj3*gconst5);
IkReal x10142=((1.0)*cj1*sj2);
IkReal x10143=(sj1*x10138);
IkReal x10144=(gconst4*x10133);
IkReal x10145=(gconst5*x10133);
IkReal x10146=((1.0)*x10134);
IkReal x10147=(cj3*x10133);
IkReal x10148=(x10134*x10140);
IkReal x10149=(x10134*x10141);
IkReal x10150=((1.0)*sj3*x10133);
IkReal x10151=(x10143+x10142);
evalcond[0]=((((-1.0)*r20*x10145))+((r21*x10144))+((r22*x10134)));
evalcond[1]=((((-1.0)*x10137*x10145))+((r11*x10144))+((r12*x10134)));
evalcond[2]=((1.0)+(((-1.0)*r00*x10145))+((r02*x10134))+((r01*x10144)));
evalcond[3]=(((r02*x10147))+(((-1.0)*r01*x10139*x10146))+((r01*x10135))+((r00*x10149))+((r00*x10140)));
evalcond[4]=((((-1.0)*r02*x10150))+((r00*x10139))+((r01*x10148))+((r01*x10141))+(((-1.0)*r00*x10135*x10146)));
evalcond[5]=(((r11*x10135))+((r12*x10147))+(((-1.0)*cj1*x10138))+((r10*x10149))+((r10*x10140))+x10136+(((-1.0)*r11*x10139*x10146)));
evalcond[6]=(((r20*x10139))+(((-1.0)*r20*x10135*x10146))+((r21*x10148))+((r21*x10141))+(((-1.0)*x10136))+((cj1*cj2))+(((-1.0)*r22*x10150)));
evalcond[7]=(((r21*x10135))+(((-1.0)*r21*x10139*x10146))+((r22*x10147))+(((-1.0)*x10151))+((r20*x10149))+((r20*x10140)));
evalcond[8]=(((r10*x10139))+(((-1.0)*x10134*x10135*x10137))+(((-1.0)*x10151))+(((-1.0)*r12*x10150))+((r11*x10141))+((r11*x10148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10152=((-1.0)*r21);
IkReal x10153=((-1.0)*px);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(x10152),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
IkReal x10154=((1.0)*(x10155.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10154)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10153);
rxp1_1=(px*r21);
rxp1_2=(r11*x10153);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10154)));
IkReal gconst4=x10152;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10156=((-1.0)*r21);
IkReal x10157=((-1.0)*px);
CheckValue<IkReal> x10159 = IKatan2WithCheck(IkReal(x10156),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10159.valid){
continue;
}
IkReal x10158=((1.0)*(x10159.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10158)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10157);
rxp1_1=(px*r21);
rxp1_2=(r11*x10157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10158)));
IkReal gconst4=x10156;
IkReal gconst5=((1.0)*r20);
IkReal x10160=((1.0)*sj3);
j4eval[0]=((((-1.0)*x10160))+((x10160*(r10*r10)))+(((-1.0)*x10160*(r21*r21))));
j4eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10161=((-1.0)*r21);
IkReal x10162=((-1.0)*px);
CheckValue<IkReal> x10164 = IKatan2WithCheck(IkReal(x10161),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10164.valid){
continue;
}
IkReal x10163=((1.0)*(x10164.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10163)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10162);
rxp1_1=(px*r21);
rxp1_2=(r11*x10162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10163)));
IkReal gconst4=x10161;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10165=((-1.0)*r21);
IkReal x10166=((-1.0)*px);
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(x10165),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
IkReal x10167=((1.0)*(x10168.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10166);
rxp1_1=(px*r21);
rxp1_2=(r11*x10166);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=x10165;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10169=((-1.0)*r21);
IkReal x10170=((-1.0)*px);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(x10169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
IkReal x10171=((1.0)*(x10172.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10170);
rxp1_1=(px*r21);
rxp1_2=(r11*x10170);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=x10169;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10173=((-1.0)*r21);
IkReal x10174=((-1.0)*px);
CheckValue<IkReal> x10176 = IKatan2WithCheck(IkReal(x10173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10176.valid){
continue;
}
IkReal x10175=((1.0)*(x10176.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10175)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10174);
rxp1_1=(px*r21);
rxp1_2=(r11*x10174);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10175)));
IkReal gconst4=x10173;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10179=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x10179.valid){
continue;
}
IkReal x10177=x10179.value;
IkReal x10178=(sj0*x10177);
sj4array[0]=((((-1.0)*cj1*cj2*x10178))+((sj1*sj2*x10178)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10180=IKcos(j4);
IkReal x10181=IKsin(j4);
IkReal x10182=(gconst5*r20);
IkReal x10183=(gconst4*x10180);
IkReal x10184=((1.0)*x10180);
evalcond[0]=(r02*x10180);
evalcond[1]=((((-1.0)*sj0))+((r02*x10181)));
evalcond[2]=((((-1.0)*x10182*x10184))+((r21*x10183)));
evalcond[3]=(((r11*x10183))+(((-1.0)*gconst5*r10*x10184)));
evalcond[4]=(((x10181*x10182))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10186=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10186.valid){
continue;
}
IkReal x10185=x10186.value;
sj4array[0]=(((cj2*sj1*x10185))+((cj1*sj2*x10185)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10187=IKcos(j4);
IkReal x10188=IKsin(j4);
IkReal x10189=(gconst4*r11);
IkReal x10190=((1.0)*sj0);
IkReal x10191=(gconst5*r10);
IkReal x10192=((1.0)*x10187);
evalcond[0]=(r02*x10187);
evalcond[1]=(((r02*x10188))+(((-1.0)*x10190)));
evalcond[2]=(((gconst4*r21*x10187))+(((-1.0)*gconst5*r20*x10192)));
evalcond[3]=((((-1.0)*x10191*x10192))+((x10187*x10189)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x10190))+((x10188*x10191))+(((-1.0)*x10188*x10189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10193=IKPowWithIntegerCheck(r02,-1);
if(!x10193.valid){
continue;
}
sj4array[0]=(sj0*(x10193.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10194=IKcos(j4);
IkReal x10195=IKsin(j4);
IkReal x10196=(gconst4*r11);
IkReal x10197=(gconst4*r21);
IkReal x10198=((1.0)*sj2);
IkReal x10199=(gconst5*x10195);
IkReal x10200=((1.0)*x10195);
IkReal x10201=((1.0)*gconst5*x10194);
evalcond[0]=(r02*x10194);
evalcond[1]=((((-1.0)*r20*x10201))+((x10194*x10197)));
evalcond[2]=((((-1.0)*r10*x10201))+((x10194*x10196)));
evalcond[3]=((((-1.0)*x10197*x10200))+(((-1.0)*cj1*x10198))+(((-1.0)*cj2*sj1))+((r20*x10199)));
evalcond[4]=((((-1.0)*x10196*x10200))+((cj1*cj2*sj0))+((r10*x10199))+(((-1.0)*sj0*sj1*x10198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10202=((-1.0)*r21);
IkReal x10203=((-1.0)*px);
CheckValue<IkReal> x10205 = IKatan2WithCheck(IkReal(x10202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10205.valid){
continue;
}
IkReal x10204=((1.0)*(x10205.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10204)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10203);
rxp1_1=(px*r21);
rxp1_2=(r11*x10203);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10204)));
IkReal gconst4=x10202;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10206=((-1.0)*r21);
IkReal x10207=((-1.0)*px);
CheckValue<IkReal> x10209 = IKatan2WithCheck(IkReal(x10206),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10209.valid){
continue;
}
IkReal x10208=((1.0)*(x10209.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10208)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10207);
rxp1_1=(px*r21);
rxp1_2=(r11*x10207);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10208)));
IkReal gconst4=x10206;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10210=((-1.0)*r21);
IkReal x10211=((-1.0)*px);
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(x10210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
IkReal x10212=((1.0)*(x10213.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10212)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10211);
rxp1_1=(px*r21);
rxp1_2=(r11*x10211);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10212)));
IkReal gconst4=x10210;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10216=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10216.valid){
continue;
}
IkReal x10214=x10216.value;
IkReal x10215=(sj0*x10214);
sj4array[0]=((((-1.0)*cj1*cj2*x10215))+((sj1*sj2*x10215)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10217=IKcos(j4);
IkReal x10218=IKsin(j4);
IkReal x10219=((1.0)*gconst5);
IkReal x10220=(gconst4*x10217);
evalcond[0]=((-1.0)*r02*x10217);
evalcond[1]=((((-1.0)*sj0))+((r02*x10218)));
evalcond[2]=((((-1.0)*r20*x10217*x10219))+((r21*x10220)));
evalcond[3]=(((r11*x10220))+(((-1.0)*r10*x10217*x10219)));
evalcond[4]=(((gconst4*r21*x10218))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*x10218*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10222=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10222.valid){
continue;
}
IkReal x10221=x10222.value;
sj4array[0]=(((cj2*sj1*x10221))+((cj1*sj2*x10221)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10223=IKcos(j4);
IkReal x10224=IKsin(j4);
IkReal x10225=(gconst4*r11);
IkReal x10226=((1.0)*sj0);
IkReal x10227=((1.0)*gconst5*r10);
evalcond[0]=((-1.0)*r02*x10223);
evalcond[1]=(((r02*x10224))+(((-1.0)*x10226)));
evalcond[2]=(((gconst4*r21*x10223))+(((-1.0)*gconst5*r20*x10223)));
evalcond[3]=(((x10223*x10225))+(((-1.0)*x10223*x10227)));
evalcond[4]=((((-1.0)*x10224*x10227))+((cj1*cj2*sj0))+(((-1.0)*sj1*sj2*x10226))+((x10224*x10225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(r02,-1);
if(!x10228.valid){
continue;
}
sj4array[0]=(sj0*(x10228.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10229=IKcos(j4);
IkReal x10230=IKsin(j4);
IkReal x10231=(gconst4*r11);
IkReal x10232=((1.0)*sj1);
IkReal x10233=(gconst4*r21);
IkReal x10234=((1.0)*gconst5*r10);
IkReal x10235=((1.0)*gconst5*r20);
evalcond[0]=((-1.0)*r02*x10229);
evalcond[1]=(((x10229*x10233))+(((-1.0)*x10229*x10235)));
evalcond[2]=(((x10229*x10231))+(((-1.0)*x10229*x10234)));
evalcond[3]=((((-1.0)*x10230*x10235))+((x10230*x10233))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10232)));
evalcond[4]=((((-1.0)*x10230*x10234))+((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10232))+((x10230*x10231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10237=IKPowWithIntegerCheck(r02,-1);
if(!x10237.valid){
continue;
}
IkReal x10236=x10237.value;
CheckValue<IkReal> x10238=IKPowWithIntegerCheck(sj3,-1);
if(!x10238.valid){
continue;
}
if( IKabs((sj0*x10236)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10236*(x10238.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10236))+IKsqr((x10236*(x10238.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10236), (x10236*(x10238.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10239=IKcos(j4);
IkReal x10240=IKsin(j4);
IkReal x10241=(gconst5*sj3);
IkReal x10242=(cj2*sj0);
IkReal x10243=(cj3*gconst5);
IkReal x10244=((1.0)*r10);
IkReal x10245=((1.0)*sj1);
IkReal x10246=(cj1*sj2);
IkReal x10247=(cj0*cj2);
IkReal x10248=(cj3*gconst4);
IkReal x10249=(gconst4*sj3);
IkReal x10250=(r20*x10240);
IkReal x10251=(gconst4*x10239);
IkReal x10252=(gconst5*x10239);
IkReal x10253=(r02*x10239);
IkReal x10254=(x10240*x10249);
IkReal x10255=((1.0)*x10240*x10248);
evalcond[0]=((((-1.0)*sj0))+((r02*x10240)));
evalcond[1]=((((-1.0)*r20*x10252))+((r21*x10251)));
evalcond[2]=(cj0+((r11*x10251))+(((-1.0)*x10244*x10252)));
evalcond[3]=(((cj0*x10246))+((sj1*x10247))+(((-1.0)*sj3*x10253)));
evalcond[4]=((((-1.0)*cj0*sj2*x10245))+((cj1*x10247))+((cj3*x10253)));
evalcond[5]=(((r21*x10243))+((r21*x10254))+((r20*x10248))+((cj1*cj2))+(((-1.0)*x10241*x10250))+(((-1.0)*sj2*x10245)));
evalcond[6]=(((x10243*x10250))+(((-1.0)*r21*x10255))+(((-1.0)*cj2*x10245))+((r21*x10241))+((r20*x10249))+(((-1.0)*x10246)));
evalcond[7]=((((-1.0)*x10240*x10241*x10244))+((sj0*x10246))+((r10*x10248))+((sj1*x10242))+((r11*x10254))+((r11*x10243)));
evalcond[8]=(((r10*x10249))+((r10*x10240*x10243))+(((-1.0)*sj0*sj2*x10245))+((cj1*x10242))+(((-1.0)*r11*x10255))+((r11*x10241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10256=((1.0)*gconst5);
CheckValue<IkReal> x10257=IKPowWithIntegerCheck((((gconst4*r21*sj3))+(((-1.0)*r20*sj3*x10256))),-1);
if(!x10257.valid){
continue;
}
CheckValue<IkReal> x10258=IKPowWithIntegerCheck(((((-1.0)*r10*x10256))+((gconst4*r11))),-1);
if(!x10258.valid){
continue;
}
if( IKabs(((x10257.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10258.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10257.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10256))))))+IKsqr(((-1.0)*cj0*(x10258.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10257.value)*(((((-1.0)*cj3*gconst4*r20))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10256))))), ((-1.0)*cj0*(x10258.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10259=IKcos(j4);
IkReal x10260=IKsin(j4);
IkReal x10261=(gconst5*sj3);
IkReal x10262=(cj2*sj0);
IkReal x10263=(cj3*gconst5);
IkReal x10264=((1.0)*r10);
IkReal x10265=((1.0)*sj1);
IkReal x10266=(cj1*sj2);
IkReal x10267=(cj0*cj2);
IkReal x10268=(cj3*gconst4);
IkReal x10269=(gconst4*sj3);
IkReal x10270=(r20*x10260);
IkReal x10271=(gconst4*x10259);
IkReal x10272=(gconst5*x10259);
IkReal x10273=(r02*x10259);
IkReal x10274=(x10260*x10269);
IkReal x10275=((1.0)*x10260*x10268);
evalcond[0]=((((-1.0)*sj0))+((r02*x10260)));
evalcond[1]=(((r21*x10271))+(((-1.0)*r20*x10272)));
evalcond[2]=(cj0+((r11*x10271))+(((-1.0)*x10264*x10272)));
evalcond[3]=((((-1.0)*sj3*x10273))+((sj1*x10267))+((cj0*x10266)));
evalcond[4]=(((cj1*x10267))+(((-1.0)*cj0*sj2*x10265))+((cj3*x10273)));
evalcond[5]=(((r21*x10274))+((r20*x10268))+(((-1.0)*sj2*x10265))+((cj1*cj2))+((r21*x10263))+(((-1.0)*x10261*x10270)));
evalcond[6]=((((-1.0)*r21*x10275))+(((-1.0)*x10266))+((r20*x10269))+((x10263*x10270))+((r21*x10261))+(((-1.0)*cj2*x10265)));
evalcond[7]=(((r11*x10263))+((r11*x10274))+((sj1*x10262))+((sj0*x10266))+((r10*x10268))+(((-1.0)*x10260*x10261*x10264)));
evalcond[8]=(((cj1*x10262))+((r11*x10261))+((r10*x10260*x10263))+(((-1.0)*r11*x10275))+((r10*x10269))+(((-1.0)*sj0*sj2*x10265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10276=IKPowWithIntegerCheck(r02,-1);
if(!x10276.valid){
continue;
}
CheckValue<IkReal> x10277=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10277.valid){
continue;
}
if( IKabs((sj0*(x10276.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10277.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10276.value)))+IKsqr(((-1.0)*cj0*(x10277.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10276.value)), ((-1.0)*cj0*(x10277.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10278=IKcos(j4);
IkReal x10279=IKsin(j4);
IkReal x10280=(gconst5*sj3);
IkReal x10281=(cj2*sj0);
IkReal x10282=(cj3*gconst5);
IkReal x10283=((1.0)*r10);
IkReal x10284=((1.0)*sj1);
IkReal x10285=(cj1*sj2);
IkReal x10286=(cj0*cj2);
IkReal x10287=(cj3*gconst4);
IkReal x10288=(gconst4*sj3);
IkReal x10289=(r20*x10279);
IkReal x10290=(gconst4*x10278);
IkReal x10291=(gconst5*x10278);
IkReal x10292=(r02*x10278);
IkReal x10293=(x10279*x10288);
IkReal x10294=((1.0)*x10279*x10287);
evalcond[0]=((((-1.0)*sj0))+((r02*x10279)));
evalcond[1]=((((-1.0)*r20*x10291))+((r21*x10290)));
evalcond[2]=(cj0+(((-1.0)*x10283*x10291))+((r11*x10290)));
evalcond[3]=((((-1.0)*sj3*x10292))+((sj1*x10286))+((cj0*x10285)));
evalcond[4]=(((cj1*x10286))+(((-1.0)*cj0*sj2*x10284))+((cj3*x10292)));
evalcond[5]=(((r20*x10287))+(((-1.0)*x10280*x10289))+((r21*x10293))+((cj1*cj2))+((r21*x10282))+(((-1.0)*sj2*x10284)));
evalcond[6]=(((r20*x10288))+(((-1.0)*x10285))+(((-1.0)*cj2*x10284))+(((-1.0)*r21*x10294))+((r21*x10280))+((x10282*x10289)));
evalcond[7]=(((r11*x10282))+((sj1*x10281))+((sj0*x10285))+((r11*x10293))+((r10*x10287))+(((-1.0)*x10279*x10280*x10283)));
evalcond[8]=(((r11*x10280))+(((-1.0)*sj0*sj2*x10284))+((r10*x10279*x10282))+((cj1*x10281))+(((-1.0)*r11*x10294))+((r10*x10288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10295=((1.0)*sj0);
IkReal x10296=((1.0)*gconst5);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r10*x10295))+((cj0*gconst4*r01))+(((-1.0)*cj0*r00*x10296))+((gconst4*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x10295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
CheckValue<IkReal> x10298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10296))+(((-1.0)*gconst4*r20)))),-1);
if(!x10298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10297.value)+(((1.5707963267949)*(x10298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10299=IKcos(j4);
IkReal x10300=IKsin(j4);
IkReal x10301=(r11*sj3);
IkReal x10302=(r01*sj3);
IkReal x10303=(cj2*sj0);
IkReal x10304=((1.0)*cj3);
IkReal x10305=((1.0)*gconst5);
IkReal x10306=((1.0)*sj1);
IkReal x10307=(r21*sj3);
IkReal x10308=(cj1*sj2);
IkReal x10309=(cj0*cj2);
IkReal x10310=(gconst4*sj3);
IkReal x10311=(cj3*gconst5);
IkReal x10312=(cj3*gconst4);
IkReal x10313=(gconst4*x10300);
IkReal x10314=(gconst4*x10299);
IkReal x10315=(sj3*x10300);
IkReal x10316=(cj3*x10299);
IkReal x10317=(x10300*x10311);
IkReal x10318=((1.0)*sj3*x10299);
evalcond[0]=(((r21*x10314))+(((-1.0)*r20*x10299*x10305))+((r22*x10300)));
evalcond[1]=((((-1.0)*r10*x10299*x10305))+((r11*x10314))+cj0+((r12*x10300)));
evalcond[2]=(((r02*x10300))+(((-1.0)*sj0))+((r01*x10314))+(((-1.0)*r00*x10299*x10305)));
evalcond[3]=((((-1.0)*sj2*x10306))+((r21*x10311))+(((-1.0)*r20*x10305*x10315))+(((-1.0)*r22*x10318))+((cj1*cj2))+((r20*x10312))+((x10307*x10313)));
evalcond[4]=((((-1.0)*cj2*x10306))+(((-1.0)*x10308))+(((-1.0)*r21*x10304*x10313))+((r22*x10316))+((gconst5*x10307))+((r20*x10317))+((r20*x10310)));
evalcond[5]=((((-1.0)*r00*x10305*x10315))+((r01*x10311))+((cj0*x10308))+((x10302*x10313))+((sj1*x10309))+(((-1.0)*r02*x10318))+((r00*x10312)));
evalcond[6]=((((-1.0)*cj0*sj2*x10306))+((r02*x10316))+(((-1.0)*r01*x10304*x10313))+((gconst5*x10302))+((cj1*x10309))+((r00*x10317))+((r00*x10310)));
evalcond[7]=(((r11*x10311))+((x10301*x10313))+(((-1.0)*r10*x10305*x10315))+(((-1.0)*r12*x10318))+((sj1*x10303))+((r10*x10312))+((sj0*x10308)));
evalcond[8]=((((-1.0)*sj0*sj2*x10306))+((r12*x10316))+(((-1.0)*r11*x10304*x10313))+((r10*x10317))+((r10*x10310))+((gconst5*x10301))+((cj1*x10303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10319=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10319.valid){
continue;
}
CheckValue<IkReal> x10320 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r20*sj0))+((gconst4*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10319.value)))+(x10320.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10321=IKcos(j4);
IkReal x10322=IKsin(j4);
IkReal x10323=(r11*sj3);
IkReal x10324=(r01*sj3);
IkReal x10325=(cj2*sj0);
IkReal x10326=((1.0)*cj3);
IkReal x10327=((1.0)*gconst5);
IkReal x10328=((1.0)*sj1);
IkReal x10329=(r21*sj3);
IkReal x10330=(cj1*sj2);
IkReal x10331=(cj0*cj2);
IkReal x10332=(gconst4*sj3);
IkReal x10333=(cj3*gconst5);
IkReal x10334=(cj3*gconst4);
IkReal x10335=(gconst4*x10322);
IkReal x10336=(gconst4*x10321);
IkReal x10337=(sj3*x10322);
IkReal x10338=(cj3*x10321);
IkReal x10339=(x10322*x10333);
IkReal x10340=((1.0)*sj3*x10321);
evalcond[0]=(((r22*x10322))+((r21*x10336))+(((-1.0)*r20*x10321*x10327)));
evalcond[1]=(cj0+(((-1.0)*r10*x10321*x10327))+((r12*x10322))+((r11*x10336)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10322))+((r01*x10336))+(((-1.0)*r00*x10321*x10327)));
evalcond[3]=((((-1.0)*r20*x10327*x10337))+(((-1.0)*sj2*x10328))+((r20*x10334))+((x10329*x10335))+((r21*x10333))+((cj1*cj2))+(((-1.0)*r22*x10340)));
evalcond[4]=((((-1.0)*r21*x10326*x10335))+((r22*x10338))+(((-1.0)*x10330))+(((-1.0)*cj2*x10328))+((r20*x10339))+((r20*x10332))+((gconst5*x10329)));
evalcond[5]=(((x10324*x10335))+((cj0*x10330))+((r01*x10333))+((r00*x10334))+((sj1*x10331))+(((-1.0)*r02*x10340))+(((-1.0)*r00*x10327*x10337)));
evalcond[6]=(((r02*x10338))+(((-1.0)*cj0*sj2*x10328))+((r00*x10339))+((r00*x10332))+((gconst5*x10324))+(((-1.0)*r01*x10326*x10335))+((cj1*x10331)));
evalcond[7]=(((x10323*x10335))+(((-1.0)*r12*x10340))+(((-1.0)*r10*x10327*x10337))+((sj0*x10330))+((sj1*x10325))+((r11*x10333))+((r10*x10334)));
evalcond[8]=((((-1.0)*r11*x10326*x10335))+((r12*x10338))+((cj1*x10325))+(((-1.0)*sj0*sj2*x10328))+((gconst5*x10323))+((r10*x10339))+((r10*x10332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10341.valid){
continue;
}
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst5*r20))+((cj0*gconst4*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10341.value)))+(x10342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10343=IKcos(j4);
IkReal x10344=IKsin(j4);
IkReal x10345=(r11*sj3);
IkReal x10346=(r01*sj3);
IkReal x10347=(cj2*sj0);
IkReal x10348=((1.0)*cj3);
IkReal x10349=((1.0)*gconst5);
IkReal x10350=((1.0)*sj1);
IkReal x10351=(r21*sj3);
IkReal x10352=(cj1*sj2);
IkReal x10353=(cj0*cj2);
IkReal x10354=(gconst4*sj3);
IkReal x10355=(cj3*gconst5);
IkReal x10356=(cj3*gconst4);
IkReal x10357=(gconst4*x10344);
IkReal x10358=(gconst4*x10343);
IkReal x10359=(sj3*x10344);
IkReal x10360=(cj3*x10343);
IkReal x10361=(x10344*x10355);
IkReal x10362=((1.0)*sj3*x10343);
evalcond[0]=(((r21*x10358))+((r22*x10344))+(((-1.0)*r20*x10343*x10349)));
evalcond[1]=(cj0+((r12*x10344))+(((-1.0)*r10*x10343*x10349))+((r11*x10358)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10358))+(((-1.0)*r00*x10343*x10349))+((r02*x10344)));
evalcond[3]=(((r21*x10355))+((r20*x10356))+((x10351*x10357))+((cj1*cj2))+(((-1.0)*r20*x10349*x10359))+(((-1.0)*r22*x10362))+(((-1.0)*sj2*x10350)));
evalcond[4]=(((r22*x10360))+((r20*x10354))+(((-1.0)*cj2*x10350))+((gconst5*x10351))+((r20*x10361))+(((-1.0)*r21*x10348*x10357))+(((-1.0)*x10352)));
evalcond[5]=(((cj0*x10352))+((r00*x10356))+((r01*x10355))+(((-1.0)*r02*x10362))+((sj1*x10353))+(((-1.0)*r00*x10349*x10359))+((x10346*x10357)));
evalcond[6]=(((r00*x10361))+(((-1.0)*r01*x10348*x10357))+((r00*x10354))+(((-1.0)*cj0*sj2*x10350))+((gconst5*x10346))+((r02*x10360))+((cj1*x10353)));
evalcond[7]=(((sj1*x10347))+(((-1.0)*r10*x10349*x10359))+((x10345*x10357))+(((-1.0)*r12*x10362))+((r11*x10355))+((sj0*x10352))+((r10*x10356)));
evalcond[8]=((((-1.0)*r11*x10348*x10357))+((cj1*x10347))+((gconst5*x10345))+((r10*x10361))+(((-1.0)*sj0*sj2*x10350))+((r10*x10354))+((r12*x10360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10364 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10364)==0){
continue;
}
IkReal x10363=pow(x10364,-0.5);
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10365.value));
IkReal gconst7=((-1.0)*r11*x10363);
IkReal gconst8=(r10*x10363);
CheckValue<IkReal> x10366 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10366.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10366.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
IkReal x10367=((-1.0)*(x10369.value));
IkReal x10368=x10363;
sj5=gconst7;
cj5=gconst8;
j5=x10367;
IkReal gconst6=x10367;
IkReal gconst7=((-1.0)*r11*x10368);
IkReal gconst8=(r10*x10368);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10370=((1.0)*sj0);
IkReal x10371=((1.0)*gconst8);
CheckValue<IkReal> x10372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x10371)))),-1);
if(!x10372.valid){
continue;
}
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x10371))+((cj0*gconst7*r01))+(((-1.0)*gconst8*r10*x10370))+((gconst7*r11*sj0)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x10370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10372.value)))+(x10373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10374=IKcos(j4);
IkReal x10375=IKsin(j4);
IkReal x10376=(gconst7*sj3);
IkReal x10377=(cj3*gconst8);
IkReal x10378=(cj2*sj0);
IkReal x10379=(gconst8*sj3);
IkReal x10380=(cj0*cj2);
IkReal x10381=(cj3*gconst7);
IkReal x10382=((1.0)*sj1);
IkReal x10383=(cj1*sj2);
IkReal x10384=(r20*x10375);
IkReal x10385=(r11*x10375);
IkReal x10386=((1.0)*x10375);
IkReal x10387=(r22*x10374);
IkReal x10388=((1.0)*x10374);
IkReal x10389=(cj3*x10374);
IkReal x10390=(gconst7*x10374);
evalcond[0]=(((r22*x10375))+((r21*x10390))+(((-1.0)*gconst8*r20*x10388)));
evalcond[1]=(((r11*x10390))+(((-1.0)*gconst8*r10*x10388))+cj0+((r12*x10375)));
evalcond[2]=(((r01*x10390))+(((-1.0)*sj0))+((r02*x10375))+(((-1.0)*gconst8*r00*x10388)));
evalcond[3]=(((cj1*cj2))+(((-1.0)*sj3*x10387))+(((-1.0)*sj2*x10382))+((r21*x10375*x10376))+((r20*x10381))+((r21*x10377))+(((-1.0)*x10379*x10384)));
evalcond[4]=((((-1.0)*r21*x10381*x10386))+((cj3*x10387))+((x10377*x10384))+(((-1.0)*x10383))+((r20*x10376))+(((-1.0)*cj2*x10382))+((r21*x10379)));
evalcond[5]=(((r01*x10377))+((r01*x10375*x10376))+(((-1.0)*r00*x10379*x10386))+(((-1.0)*r02*sj3*x10388))+((cj0*x10383))+((sj1*x10380))+((r00*x10381)));
evalcond[6]=(((r01*x10379))+((r00*x10376))+((cj1*x10380))+((r00*x10375*x10377))+(((-1.0)*cj0*sj2*x10382))+((r02*x10389))+(((-1.0)*r01*x10381*x10386)));
evalcond[7]=(((x10376*x10385))+(((-1.0)*r10*x10379*x10386))+((r10*x10381))+((sj1*x10378))+(((-1.0)*r12*sj3*x10388))+((r11*x10377))+((sj0*x10383)));
evalcond[8]=(((r12*x10389))+((cj1*x10378))+(((-1.0)*sj0*sj2*x10382))+(((-1.0)*x10381*x10385))+((r10*x10376))+((r11*x10379))+((r10*x10375*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10391 = IKatan2WithCheck(IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*gconst8*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10391.valid){
continue;
}
CheckValue<IkReal> x10392=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x10392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10391.value)+(((1.5707963267949)*(x10392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10393=IKcos(j4);
IkReal x10394=IKsin(j4);
IkReal x10395=(gconst7*sj3);
IkReal x10396=(cj3*gconst8);
IkReal x10397=(cj2*sj0);
IkReal x10398=(gconst8*sj3);
IkReal x10399=(cj0*cj2);
IkReal x10400=(cj3*gconst7);
IkReal x10401=((1.0)*sj1);
IkReal x10402=(cj1*sj2);
IkReal x10403=(r20*x10394);
IkReal x10404=(r11*x10394);
IkReal x10405=((1.0)*x10394);
IkReal x10406=(r22*x10393);
IkReal x10407=((1.0)*x10393);
IkReal x10408=(cj3*x10393);
IkReal x10409=(gconst7*x10393);
evalcond[0]=(((r21*x10409))+((r22*x10394))+(((-1.0)*gconst8*r20*x10407)));
evalcond[1]=((((-1.0)*gconst8*r10*x10407))+cj0+((r12*x10394))+((r11*x10409)));
evalcond[2]=((((-1.0)*sj0))+((r01*x10409))+((r02*x10394))+(((-1.0)*gconst8*r00*x10407)));
evalcond[3]=(((r21*x10396))+(((-1.0)*sj3*x10406))+(((-1.0)*sj2*x10401))+((r21*x10394*x10395))+((r20*x10400))+(((-1.0)*x10398*x10403))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r21*x10400*x10405))+((r21*x10398))+((x10396*x10403))+((cj3*x10406))+((r20*x10395))+(((-1.0)*x10402))+(((-1.0)*cj2*x10401)));
evalcond[5]=(((r01*x10396))+((cj0*x10402))+((r00*x10400))+(((-1.0)*r00*x10398*x10405))+((r01*x10394*x10395))+((sj1*x10399))+(((-1.0)*r02*sj3*x10407)));
evalcond[6]=(((r01*x10398))+(((-1.0)*r01*x10400*x10405))+((cj1*x10399))+((r02*x10408))+((r00*x10394*x10396))+(((-1.0)*cj0*sj2*x10401))+((r00*x10395)));
evalcond[7]=(((r11*x10396))+((x10395*x10404))+(((-1.0)*r12*sj3*x10407))+((sj0*x10402))+(((-1.0)*r10*x10398*x10405))+((r10*x10400))+((sj1*x10397)));
evalcond[8]=(((r11*x10398))+(((-1.0)*x10400*x10404))+((cj1*x10397))+((r10*x10394*x10396))+((r10*x10395))+(((-1.0)*sj0*sj2*x10401))+((r12*x10408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10411 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10411)==0){
continue;
}
IkReal x10410=pow(x10411,-0.5);
CheckValue<IkReal> x10412 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10412.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10412.value))));
IkReal gconst10=((1.0)*r11*x10410);
IkReal gconst11=((-1.0)*r10*x10410);
CheckValue<IkReal> x10413 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10413.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10413.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x10416 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10416.valid){
continue;
}
IkReal x10414=((1.0)*(x10416.value));
IkReal x10415=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10414)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10414)));
IkReal gconst10=((1.0)*r11*x10415);
IkReal gconst11=((-1.0)*r10*x10415);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
CheckValue<IkReal> x10419 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10419.valid){
continue;
}
IkReal x10417=((1.0)*(x10419.value));
IkReal x10418=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10417)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10417)));
IkReal gconst10=((1.0)*r11*x10418);
IkReal gconst11=((-1.0)*r10*x10418);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=sj0;
j4eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10422 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10422.valid){
continue;
}
IkReal x10420=((1.0)*(x10422.value));
IkReal x10421=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10420)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10420)));
IkReal gconst10=((1.0)*r11*x10421);
IkReal gconst11=((-1.0)*r10*x10421);
IkReal x10423=r12*r12;
IkReal x10424=((1.0)*sj0);
IkReal x10425=(cj0*r02);
IkReal x10426=x10410;
j4eval[0]=((IKabs((((sj0*x10423*x10426))+((r12*x10425*x10426))+(((-1.0)*x10424*x10426)))))+(IKabs(((((-1.0)*r12*x10424))+(((-1.0)*x10425))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10427=(cj1*cj2);
IkReal x10428=(cj3*r02);
IkReal x10429=((2.0)*cj3);
IkReal x10430=(gconst10*r00*sj3);
IkReal x10431=(gconst11*r01*sj3);
IkReal x10432=((1.0)*sj1*sj2);
IkReal x10433=(x10431+x10430+x10427);
op[0]=(x10433+(((-1.0)*x10432))+(((-1.0)*x10428)));
op[1]=((((-1.0)*gconst10*r01*x10429))+((gconst11*r00*x10429)));
op[2]=(x10433+x10428+(((-1.0)*x10432)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x10434=(gconst11*r10);
IkReal x10435=(gconst10*r11);
op[0]=((-1.0)+(((-1.0)*x10435))+x10434);
op[1]=((2.0)*r12);
op[2]=((-1.0)+(((-1.0)*x10434))+x10435);
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10438 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10438.valid){
continue;
}
IkReal x10436=((1.0)*(x10438.value));
IkReal x10437=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10436)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10436)));
IkReal gconst10=((1.0)*r11*x10437);
IkReal gconst11=((-1.0)*r10*x10437);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10441 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10441.valid){
continue;
}
IkReal x10439=((1.0)*(x10441.value));
IkReal x10440=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10439)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10439)));
IkReal gconst10=((1.0)*r11*x10440);
IkReal gconst11=((-1.0)*r10*x10440);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10442=gconst10*gconst10;
IkReal x10443=gconst11*gconst11;
IkReal x10444=(r22*sj3);
IkReal x10445=(r00*sj3);
IkReal x10446=(cj3*r20);
IkReal x10447=(r01*sj3);
IkReal x10448=((1.0)*r00);
IkReal x10449=((1.0)*r20);
IkReal x10450=((1.0)*gconst11*r01);
IkReal x10451=(r21*x10442);
IkReal x10452=(gconst10*gconst11*r21);
CheckValue<IkReal> x10453=IKPowWithIntegerCheck(IKsign((((r00*x10443*x10446))+((cj3*r02*r22))+(((-1.0)*gconst10*x10446*x10450))+((cj3*r01*x10451))+(((-1.0)*cj3*x10448*x10452)))),-1);
if(!x10453.valid){
continue;
}
CheckValue<IkReal> x10454 = IKatan2WithCheck(IkReal(((((-1.0)*x10443*x10447*x10449))+((x10447*x10452))+(((-1.0)*gconst10*gconst11*x10445*x10449))+((x10445*x10451)))),IkReal(((((-1.0)*gconst10*x10444*x10448))+(((-1.0)*x10444*x10450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10453.value)))+(x10454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10455=IKcos(j4);
IkReal x10456=IKsin(j4);
IkReal x10457=(cj1*cj2);
IkReal x10458=(gconst10*sj3);
IkReal x10459=(cj3*gconst10);
IkReal x10460=(gconst11*r21);
IkReal x10461=(gconst11*r00);
IkReal x10462=(cj3*gconst11);
IkReal x10463=((1.0)*sj2);
IkReal x10464=(cj2*sj1);
IkReal x10465=(gconst11*sj3);
IkReal x10466=(sj1*x10463);
IkReal x10467=(gconst10*x10455);
IkReal x10468=((1.0)*x10455);
IkReal x10469=(r11*x10456);
IkReal x10470=(r21*x10456);
IkReal x10471=(cj3*x10455);
IkReal x10472=((1.0)*x10456);
evalcond[0]=((((-1.0)*gconst11*r20*x10468))+((r22*x10456))+((r21*x10467)));
evalcond[1]=((((-1.0)*gconst11*r10*x10468))+((r12*x10456))+((r11*x10467)));
evalcond[2]=((-1.0)+(((-1.0)*x10461*x10468))+((r01*x10467))+((r02*x10456)));
evalcond[3]=(((r01*x10465))+((r00*x10458))+((cj3*x10456*x10461))+(((-1.0)*r01*x10459*x10472))+((r02*x10471)));
evalcond[4]=(((r01*x10456*x10458))+((r01*x10462))+((r00*x10459))+(((-1.0)*r02*sj3*x10468))+(((-1.0)*sj3*x10461*x10472)));
evalcond[5]=(((r10*x10459))+(((-1.0)*r10*x10465*x10472))+((cj1*sj2))+((r11*x10462))+x10464+(((-1.0)*r12*sj3*x10468))+((x10458*x10469)));
evalcond[6]=(((r10*x10456*x10462))+((r10*x10458))+((r12*x10471))+((r11*x10465))+(((-1.0)*x10459*x10469))+x10457+(((-1.0)*x10466)));
evalcond[7]=(((cj3*x10460))+(((-1.0)*r22*sj3*x10468))+(((-1.0)*r20*x10465*x10472))+x10457+((r20*x10459))+(((-1.0)*x10466))+((x10458*x10470)));
evalcond[8]=((((-1.0)*x10464))+(((-1.0)*cj1*x10463))+((r22*x10471))+(((-1.0)*x10459*x10470))+((sj3*x10460))+((r20*x10458))+((r20*x10456*x10462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10473=((1.0)*gconst11);
CheckValue<IkReal> x10474 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*r10*x10473)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10474.valid){
continue;
}
CheckValue<IkReal> x10475=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x10473)))),-1);
if(!x10475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10474.value)+(((1.5707963267949)*(x10475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10476=IKcos(j4);
IkReal x10477=IKsin(j4);
IkReal x10478=(cj1*cj2);
IkReal x10479=(gconst10*sj3);
IkReal x10480=(cj3*gconst10);
IkReal x10481=(gconst11*r21);
IkReal x10482=(gconst11*r00);
IkReal x10483=(cj3*gconst11);
IkReal x10484=((1.0)*sj2);
IkReal x10485=(cj2*sj1);
IkReal x10486=(gconst11*sj3);
IkReal x10487=(sj1*x10484);
IkReal x10488=(gconst10*x10476);
IkReal x10489=((1.0)*x10476);
IkReal x10490=(r11*x10477);
IkReal x10491=(r21*x10477);
IkReal x10492=(cj3*x10476);
IkReal x10493=((1.0)*x10477);
evalcond[0]=((((-1.0)*gconst11*r20*x10489))+((r21*x10488))+((r22*x10477)));
evalcond[1]=(((r12*x10477))+((r11*x10488))+(((-1.0)*gconst11*r10*x10489)));
evalcond[2]=((-1.0)+(((-1.0)*x10482*x10489))+((r02*x10477))+((r01*x10488)));
evalcond[3]=(((r00*x10479))+((cj3*x10477*x10482))+(((-1.0)*r01*x10480*x10493))+((r02*x10492))+((r01*x10486)));
evalcond[4]=(((r00*x10480))+(((-1.0)*sj3*x10482*x10493))+((r01*x10477*x10479))+((r01*x10483))+(((-1.0)*r02*sj3*x10489)));
evalcond[5]=(((x10479*x10490))+((r10*x10480))+((cj1*sj2))+((r11*x10483))+(((-1.0)*r12*sj3*x10489))+(((-1.0)*r10*x10486*x10493))+x10485);
evalcond[6]=(((r12*x10492))+(((-1.0)*x10480*x10490))+((r11*x10486))+(((-1.0)*x10487))+((r10*x10477*x10483))+x10478+((r10*x10479)));
evalcond[7]=(((x10479*x10491))+(((-1.0)*r20*x10486*x10493))+(((-1.0)*r22*sj3*x10489))+((cj3*x10481))+(((-1.0)*x10487))+x10478+((r20*x10480)));
evalcond[8]=(((r20*x10479))+((r22*x10492))+((r20*x10477*x10483))+(((-1.0)*x10485))+((sj3*x10481))+(((-1.0)*x10480*x10491))+(((-1.0)*cj1*x10484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10494=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10494.valid){
continue;
}
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10494.value)))+(x10495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10496=IKcos(j4);
IkReal x10497=IKsin(j4);
IkReal x10498=(cj1*cj2);
IkReal x10499=(gconst10*sj3);
IkReal x10500=(cj3*gconst10);
IkReal x10501=(gconst11*r21);
IkReal x10502=(gconst11*r00);
IkReal x10503=(cj3*gconst11);
IkReal x10504=((1.0)*sj2);
IkReal x10505=(cj2*sj1);
IkReal x10506=(gconst11*sj3);
IkReal x10507=(sj1*x10504);
IkReal x10508=(gconst10*x10496);
IkReal x10509=((1.0)*x10496);
IkReal x10510=(r11*x10497);
IkReal x10511=(r21*x10497);
IkReal x10512=(cj3*x10496);
IkReal x10513=((1.0)*x10497);
evalcond[0]=(((r22*x10497))+(((-1.0)*gconst11*r20*x10509))+((r21*x10508)));
evalcond[1]=(((r12*x10497))+(((-1.0)*gconst11*r10*x10509))+((r11*x10508)));
evalcond[2]=((-1.0)+(((-1.0)*x10502*x10509))+((r01*x10508))+((r02*x10497)));
evalcond[3]=(((cj3*x10497*x10502))+((r01*x10506))+(((-1.0)*r01*x10500*x10513))+((r02*x10512))+((r00*x10499)));
evalcond[4]=(((r01*x10503))+((r00*x10500))+(((-1.0)*r02*sj3*x10509))+(((-1.0)*sj3*x10502*x10513))+((r01*x10497*x10499)));
evalcond[5]=(((cj1*sj2))+((r10*x10500))+(((-1.0)*r12*sj3*x10509))+x10505+((r11*x10503))+(((-1.0)*r10*x10506*x10513))+((x10499*x10510)));
evalcond[6]=(((r12*x10512))+((r10*x10497*x10503))+((r10*x10499))+(((-1.0)*x10507))+(((-1.0)*x10500*x10510))+x10498+((r11*x10506)));
evalcond[7]=(((r20*x10500))+(((-1.0)*r20*x10506*x10513))+(((-1.0)*r22*sj3*x10509))+(((-1.0)*x10507))+((cj3*x10501))+x10498+((x10499*x10511)));
evalcond[8]=((((-1.0)*x10500*x10511))+(((-1.0)*x10505))+((r20*x10499))+((r20*x10497*x10503))+((r22*x10512))+((sj3*x10501))+(((-1.0)*cj1*x10504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10516 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10516.valid){
continue;
}
IkReal x10514=((1.0)*(x10516.value));
IkReal x10515=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10514)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10514)));
IkReal gconst10=((1.0)*r11*x10515);
IkReal gconst11=((-1.0)*r10*x10515);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
IkReal x10517=((1.0)*(x10519.value));
IkReal x10518=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10517)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10517)));
IkReal gconst10=((1.0)*r11*x10518);
IkReal gconst11=((-1.0)*r10*x10518);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10520=gconst10*gconst10;
IkReal x10521=gconst11*gconst11;
IkReal x10522=(r22*sj3);
IkReal x10523=(r00*sj3);
IkReal x10524=(cj3*r20);
IkReal x10525=(r01*sj3);
IkReal x10526=((1.0)*r00);
IkReal x10527=((1.0)*r20);
IkReal x10528=((1.0)*gconst11*r01);
IkReal x10529=(r21*x10520);
IkReal x10530=(gconst10*gconst11*r21);
CheckValue<IkReal> x10531 = IKatan2WithCheck(IkReal(((((-1.0)*gconst10*gconst11*x10523*x10527))+((x10523*x10529))+(((-1.0)*x10521*x10525*x10527))+((x10525*x10530)))),IkReal(((((-1.0)*gconst10*x10522*x10526))+(((-1.0)*x10522*x10528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10531.valid){
continue;
}
CheckValue<IkReal> x10532=IKPowWithIntegerCheck(IKsign((((r00*x10521*x10524))+((cj3*r01*x10529))+((cj3*r02*r22))+(((-1.0)*gconst10*x10524*x10528))+(((-1.0)*cj3*x10526*x10530)))),-1);
if(!x10532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10531.value)+(((1.5707963267949)*(x10532.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10533=IKcos(j4);
IkReal x10534=IKsin(j4);
IkReal x10535=(gconst10*sj3);
IkReal x10536=(cj3*gconst10);
IkReal x10537=(sj1*sj2);
IkReal x10538=(gconst11*r21);
IkReal x10539=(gconst11*r00);
IkReal x10540=(cj3*gconst11);
IkReal x10541=(cj1*cj2);
IkReal x10542=(gconst11*sj3);
IkReal x10543=((1.0)*cj1*sj2);
IkReal x10544=((1.0)*cj2*sj1);
IkReal x10545=(gconst10*x10533);
IkReal x10546=((1.0)*x10533);
IkReal x10547=(r11*x10534);
IkReal x10548=(r21*x10534);
IkReal x10549=(cj3*x10533);
IkReal x10550=((1.0)*x10534);
IkReal x10551=(x10544+x10543);
evalcond[0]=((((-1.0)*gconst11*r20*x10546))+((r22*x10534))+((r21*x10545)));
evalcond[1]=((((-1.0)*gconst11*r10*x10546))+((r11*x10545))+((r12*x10534)));
evalcond[2]=((1.0)+((r02*x10534))+(((-1.0)*x10539*x10546))+((r01*x10545)));
evalcond[3]=(((cj3*x10534*x10539))+(((-1.0)*r01*x10536*x10550))+((r02*x10549))+((r00*x10535))+((r01*x10542)));
evalcond[4]=(((r01*x10534*x10535))+(((-1.0)*sj3*x10539*x10550))+((r00*x10536))+((r01*x10540))+(((-1.0)*r02*sj3*x10546)));
evalcond[5]=(((r10*x10535))+((r12*x10549))+(((-1.0)*x10541))+((r11*x10542))+((r10*x10534*x10540))+x10537+(((-1.0)*x10536*x10547)));
evalcond[6]=(((x10535*x10548))+((cj3*x10538))+(((-1.0)*r22*sj3*x10546))+(((-1.0)*x10537))+x10541+(((-1.0)*r20*x10542*x10550))+((r20*x10536)));
evalcond[7]=(((r22*x10549))+((r20*x10534*x10540))+((r20*x10535))+((sj3*x10538))+(((-1.0)*x10536*x10548))+(((-1.0)*x10551)));
evalcond[8]=(((x10535*x10547))+((r10*x10536))+((r11*x10540))+(((-1.0)*r10*x10542*x10550))+(((-1.0)*r12*sj3*x10546))+(((-1.0)*x10551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10552=((1.0)*gconst11);
CheckValue<IkReal> x10553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10552))+(((-1.0)*gconst10*r10)))),-1);
if(!x10553.valid){
continue;
}
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*r20*x10552)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10553.value)))+(x10554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10555=IKcos(j4);
IkReal x10556=IKsin(j4);
IkReal x10557=(gconst10*sj3);
IkReal x10558=(cj3*gconst10);
IkReal x10559=(sj1*sj2);
IkReal x10560=(gconst11*r21);
IkReal x10561=(gconst11*r00);
IkReal x10562=(cj3*gconst11);
IkReal x10563=(cj1*cj2);
IkReal x10564=(gconst11*sj3);
IkReal x10565=((1.0)*cj1*sj2);
IkReal x10566=((1.0)*cj2*sj1);
IkReal x10567=(gconst10*x10555);
IkReal x10568=((1.0)*x10555);
IkReal x10569=(r11*x10556);
IkReal x10570=(r21*x10556);
IkReal x10571=(cj3*x10555);
IkReal x10572=((1.0)*x10556);
IkReal x10573=(x10565+x10566);
evalcond[0]=(((r22*x10556))+((r21*x10567))+(((-1.0)*gconst11*r20*x10568)));
evalcond[1]=((((-1.0)*gconst11*r10*x10568))+((r12*x10556))+((r11*x10567)));
evalcond[2]=((1.0)+((r01*x10567))+((r02*x10556))+(((-1.0)*x10561*x10568)));
evalcond[3]=(((r01*x10564))+(((-1.0)*r01*x10558*x10572))+((cj3*x10556*x10561))+((r02*x10571))+((r00*x10557)));
evalcond[4]=(((r01*x10562))+(((-1.0)*r02*sj3*x10568))+((r01*x10556*x10557))+(((-1.0)*sj3*x10561*x10572))+((r00*x10558)));
evalcond[5]=(((r10*x10556*x10562))+((r10*x10557))+(((-1.0)*x10563))+x10559+((r11*x10564))+(((-1.0)*x10558*x10569))+((r12*x10571)));
evalcond[6]=((((-1.0)*r22*sj3*x10568))+((x10557*x10570))+(((-1.0)*r20*x10564*x10572))+(((-1.0)*x10559))+((r20*x10558))+x10563+((cj3*x10560)));
evalcond[7]=((((-1.0)*x10573))+((r22*x10571))+((r20*x10557))+((r20*x10556*x10562))+((sj3*x10560))+(((-1.0)*x10558*x10570)));
evalcond[8]=((((-1.0)*r10*x10564*x10572))+(((-1.0)*x10573))+(((-1.0)*r12*sj3*x10568))+((r10*x10558))+((x10557*x10569))+((r11*x10562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10574 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10574.valid){
continue;
}
CheckValue<IkReal> x10575=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x10575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10574.value)+(((1.5707963267949)*(x10575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10576=IKcos(j4);
IkReal x10577=IKsin(j4);
IkReal x10578=(gconst10*sj3);
IkReal x10579=(cj3*gconst10);
IkReal x10580=(sj1*sj2);
IkReal x10581=(gconst11*r21);
IkReal x10582=(gconst11*r00);
IkReal x10583=(cj3*gconst11);
IkReal x10584=(cj1*cj2);
IkReal x10585=(gconst11*sj3);
IkReal x10586=((1.0)*cj1*sj2);
IkReal x10587=((1.0)*cj2*sj1);
IkReal x10588=(gconst10*x10576);
IkReal x10589=((1.0)*x10576);
IkReal x10590=(r11*x10577);
IkReal x10591=(r21*x10577);
IkReal x10592=(cj3*x10576);
IkReal x10593=((1.0)*x10577);
IkReal x10594=(x10587+x10586);
evalcond[0]=(((r21*x10588))+((r22*x10577))+(((-1.0)*gconst11*r20*x10589)));
evalcond[1]=(((r11*x10588))+(((-1.0)*gconst11*r10*x10589))+((r12*x10577)));
evalcond[2]=((1.0)+(((-1.0)*x10582*x10589))+((r02*x10577))+((r01*x10588)));
evalcond[3]=(((r00*x10578))+((cj3*x10577*x10582))+(((-1.0)*r01*x10579*x10593))+((r02*x10592))+((r01*x10585)));
evalcond[4]=(((r00*x10579))+((r01*x10577*x10578))+(((-1.0)*r02*sj3*x10589))+((r01*x10583))+(((-1.0)*sj3*x10582*x10593)));
evalcond[5]=((((-1.0)*x10579*x10590))+((r12*x10592))+((r10*x10578))+((r11*x10585))+x10580+(((-1.0)*x10584))+((r10*x10577*x10583)));
evalcond[6]=(((r20*x10579))+(((-1.0)*r20*x10585*x10593))+((cj3*x10581))+(((-1.0)*r22*sj3*x10589))+x10584+(((-1.0)*x10580))+((x10578*x10591)));
evalcond[7]=((((-1.0)*x10579*x10591))+((r20*x10578))+(((-1.0)*x10594))+((sj3*x10581))+((r22*x10592))+((r20*x10577*x10583)));
evalcond[8]=((((-1.0)*x10594))+((r10*x10579))+((r11*x10583))+(((-1.0)*r12*sj3*x10589))+(((-1.0)*r10*x10585*x10593))+((x10578*x10590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10597 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10597.valid){
continue;
}
IkReal x10595=((1.0)*(x10597.value));
IkReal x10596=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10595)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10596);
rxp1_1=(px*r21);
rxp1_2=(r11*x10596);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10595)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10600 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10600.valid){
continue;
}
IkReal x10598=((1.0)*(x10600.value));
IkReal x10599=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10598)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10599);
rxp1_1=(px*r21);
rxp1_2=(r11*x10599);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10598)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x10601=((1.0)*sj3);
j4eval[0]=(((r11*r21*x10601))+((r10*r20*x10601)));
j4eval[1]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10604 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10604.valid){
continue;
}
IkReal x10602=((1.0)*(x10604.value));
IkReal x10603=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10602)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10603);
rxp1_1=(px*r21);
rxp1_2=(r11*x10603);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10602)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
IkReal x10605=((1.0)*(x10607.value));
IkReal x10606=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10605)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10606);
rxp1_1=(px*r21);
rxp1_2=(r11*x10606);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10605)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10608)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10609);
rxp1_1=(px*r21);
rxp1_2=(r11*x10609);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
IkReal x10611=((1.0)*(x10613.value));
IkReal x10612=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10611)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10612);
rxp1_1=(px*r21);
rxp1_2=(r11*x10612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10611)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10616=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x10616.valid){
continue;
}
IkReal x10614=x10616.value;
IkReal x10615=(sj0*x10614);
sj4array[0]=(((sj1*sj2*x10615))+(((-1.0)*cj1*cj2*x10615)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10617=IKcos(j4);
IkReal x10618=IKsin(j4);
IkReal x10619=(gconst11*r20);
IkReal x10620=(gconst10*x10617);
IkReal x10621=((1.0)*x10617);
evalcond[0]=(r02*x10617);
evalcond[1]=((((-1.0)*sj0))+((r02*x10618)));
evalcond[2]=(((r21*x10620))+(((-1.0)*x10619*x10621)));
evalcond[3]=((((-1.0)*gconst11*r10*x10621))+((r11*x10620)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r21*x10618))+((x10618*x10619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10623=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x10623.valid){
continue;
}
IkReal x10622=x10623.value;
sj4array[0]=(((cj2*sj1*x10622))+((cj1*sj2*x10622)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10624=IKcos(j4);
IkReal x10625=IKsin(j4);
IkReal x10626=((1.0)*sj0);
IkReal x10627=(gconst10*x10624);
IkReal x10628=((1.0)*gconst11*x10624);
evalcond[0]=(r02*x10624);
evalcond[1]=((((-1.0)*x10626))+((r02*x10625)));
evalcond[2]=(((r21*x10627))+(((-1.0)*r20*x10628)));
evalcond[3]=(((r11*x10627))+(((-1.0)*r10*x10628)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst11*r10*x10625))+(((-1.0)*sj1*sj2*x10626))+(((-1.0)*gconst10*r11*x10625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10629=IKPowWithIntegerCheck(r02,-1);
if(!x10629.valid){
continue;
}
sj4array[0]=(sj0*(x10629.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10630=IKcos(j4);
IkReal x10631=IKsin(j4);
IkReal x10632=((1.0)*sj2);
IkReal x10633=(gconst10*x10630);
IkReal x10634=(gconst11*x10631);
IkReal x10635=((1.0)*gconst11*x10630);
IkReal x10636=((1.0)*gconst10*x10631);
evalcond[0]=(r02*x10630);
evalcond[1]=((((-1.0)*r20*x10635))+((r21*x10633)));
evalcond[2]=((((-1.0)*r10*x10635))+((r11*x10633)));
evalcond[3]=(((r20*x10634))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10632))+(((-1.0)*r21*x10636)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x10634))+(((-1.0)*sj0*sj1*x10632))+(((-1.0)*r11*x10636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10639 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10639.valid){
continue;
}
IkReal x10637=((1.0)*(x10639.value));
IkReal x10638=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10637)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10638);
rxp1_1=(px*r21);
rxp1_2=(r11*x10638);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10637)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10642 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10642.valid){
continue;
}
IkReal x10640=((1.0)*(x10642.value));
IkReal x10641=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10640)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10641);
rxp1_1=(px*r21);
rxp1_2=(r11*x10641);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10640)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
IkReal x10643=((1.0)*(x10645.value));
IkReal x10644=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10643)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10644);
rxp1_1=(px*r21);
rxp1_2=(r11*x10644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10643)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10648=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10648.valid){
continue;
}
IkReal x10646=x10648.value;
IkReal x10647=(sj0*x10646);
sj4array[0]=((((-1.0)*cj1*cj2*x10647))+((sj1*sj2*x10647)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10649=IKcos(j4);
IkReal x10650=IKsin(j4);
IkReal x10651=(gconst10*r21);
IkReal x10652=((1.0)*gconst11*x10649);
evalcond[0]=((-1.0)*r02*x10649);
evalcond[1]=((((-1.0)*sj0))+((r02*x10650)));
evalcond[2]=((((-1.0)*r20*x10652))+((x10649*x10651)));
evalcond[3]=((((-1.0)*r10*x10652))+((gconst10*r11*x10649)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((x10650*x10651))+(((-1.0)*gconst11*r20*x10650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10654=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x10654.valid){
continue;
}
IkReal x10653=x10654.value;
sj4array[0]=(((cj1*sj2*x10653))+((cj2*sj1*x10653)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10655=IKcos(j4);
IkReal x10656=IKsin(j4);
IkReal x10657=((1.0)*sj0);
IkReal x10658=(gconst10*x10655);
IkReal x10659=((1.0)*gconst11*x10655);
evalcond[0]=((-1.0)*r02*x10655);
evalcond[1]=(((r02*x10656))+(((-1.0)*x10657)));
evalcond[2]=(((r21*x10658))+(((-1.0)*r20*x10659)));
evalcond[3]=((((-1.0)*r10*x10659))+((r11*x10658)));
evalcond[4]=(((cj1*cj2*sj0))+((gconst10*r11*x10656))+(((-1.0)*gconst11*r10*x10656))+(((-1.0)*sj1*sj2*x10657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(r02,-1);
if(!x10660.valid){
continue;
}
sj4array[0]=(sj0*(x10660.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10661=IKcos(j4);
IkReal x10662=IKsin(j4);
IkReal x10663=(gconst10*r21);
IkReal x10664=((1.0)*sj1);
IkReal x10665=(gconst10*r11);
IkReal x10666=((1.0)*gconst11*x10661);
IkReal x10667=((1.0)*gconst11*x10662);
evalcond[0]=((-1.0)*r02*x10661);
evalcond[1]=((((-1.0)*r20*x10666))+((x10661*x10663)));
evalcond[2]=(((x10661*x10665))+(((-1.0)*r10*x10666)));
evalcond[3]=((((-1.0)*cj2*x10664))+(((-1.0)*r20*x10667))+(((-1.0)*cj1*sj2))+((x10662*x10663)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*sj0*sj2*x10664))+(((-1.0)*r10*x10667))+((x10662*x10665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(r02,-1);
if(!x10669.valid){
continue;
}
IkReal x10668=x10669.value;
CheckValue<IkReal> x10670=IKPowWithIntegerCheck(sj3,-1);
if(!x10670.valid){
continue;
}
if( IKabs((sj0*x10668)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10668*(x10670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x10668))+IKsqr((x10668*(x10670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x10668), (x10668*(x10670.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10671=IKcos(j4);
IkReal x10672=IKsin(j4);
IkReal x10673=(cj3*gconst10);
IkReal x10674=(gconst10*r21);
IkReal x10675=(cj2*sj0);
IkReal x10676=(gconst11*r21);
IkReal x10677=(gconst10*r11);
IkReal x10678=(gconst11*r11);
IkReal x10679=((1.0)*sj2);
IkReal x10680=(gconst10*sj3);
IkReal x10681=((1.0)*gconst11);
IkReal x10682=(cj0*cj2);
IkReal x10683=(cj1*sj2);
IkReal x10684=(sj3*x10672);
IkReal x10685=((1.0)*x10672);
IkReal x10686=(r02*x10671);
IkReal x10687=(cj3*gconst11*x10672);
evalcond[0]=((((-1.0)*sj0))+((r02*x10672)));
evalcond[1]=((((-1.0)*r20*x10671*x10681))+((x10671*x10674)));
evalcond[2]=((((-1.0)*r10*x10671*x10681))+cj0+((x10671*x10677)));
evalcond[3]=(((sj1*x10682))+((cj0*x10683))+(((-1.0)*sj3*x10686)));
evalcond[4]=(((cj3*x10686))+(((-1.0)*cj0*sj1*x10679))+((cj1*x10682)));
evalcond[5]=(((x10674*x10684))+(((-1.0)*sj1*x10679))+(((-1.0)*r20*x10681*x10684))+((cj3*x10676))+((r20*x10673))+((cj1*cj2)));
evalcond[6]=((((-1.0)*r21*x10673*x10685))+((sj3*x10676))+(((-1.0)*cj2*sj1))+((r20*x10687))+((r20*x10680))+(((-1.0)*cj1*x10679)));
evalcond[7]=(((sj1*x10675))+((sj0*x10683))+((r10*x10673))+((cj3*x10678))+((x10677*x10684))+(((-1.0)*r10*x10681*x10684)));
evalcond[8]=(((sj3*x10678))+(((-1.0)*r11*x10673*x10685))+((cj1*x10675))+(((-1.0)*sj0*sj1*x10679))+((r10*x10687))+((r10*x10680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10688=((1.0)*gconst11);
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x10688))+((gconst10*r21*sj3))),-1);
if(!x10689.valid){
continue;
}
CheckValue<IkReal> x10690=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x10688))),-1);
if(!x10690.valid){
continue;
}
if( IKabs(((x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10688))+(((-1.0)*cj3*gconst10*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10688))+(((-1.0)*cj3*gconst10*r20))))))+IKsqr(((-1.0)*cj0*(x10690.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10689.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x10688))+(((-1.0)*cj3*gconst10*r20))))), ((-1.0)*cj0*(x10690.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10691=IKcos(j4);
IkReal x10692=IKsin(j4);
IkReal x10693=(cj3*gconst10);
IkReal x10694=(gconst10*r21);
IkReal x10695=(cj2*sj0);
IkReal x10696=(gconst11*r21);
IkReal x10697=(gconst10*r11);
IkReal x10698=(gconst11*r11);
IkReal x10699=((1.0)*sj2);
IkReal x10700=(gconst10*sj3);
IkReal x10701=((1.0)*gconst11);
IkReal x10702=(cj0*cj2);
IkReal x10703=(cj1*sj2);
IkReal x10704=(sj3*x10692);
IkReal x10705=((1.0)*x10692);
IkReal x10706=(r02*x10691);
IkReal x10707=(cj3*gconst11*x10692);
evalcond[0]=((((-1.0)*sj0))+((r02*x10692)));
evalcond[1]=(((x10691*x10694))+(((-1.0)*r20*x10691*x10701)));
evalcond[2]=(((x10691*x10697))+cj0+(((-1.0)*r10*x10691*x10701)));
evalcond[3]=(((sj1*x10702))+((cj0*x10703))+(((-1.0)*sj3*x10706)));
evalcond[4]=((((-1.0)*cj0*sj1*x10699))+((cj3*x10706))+((cj1*x10702)));
evalcond[5]=(((cj3*x10696))+(((-1.0)*r20*x10701*x10704))+((cj1*cj2))+((x10694*x10704))+(((-1.0)*sj1*x10699))+((r20*x10693)));
evalcond[6]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10699))+((sj3*x10696))+((r20*x10707))+((r20*x10700))+(((-1.0)*r21*x10693*x10705)));
evalcond[7]=(((r10*x10693))+((sj0*x10703))+((cj3*x10698))+((x10697*x10704))+(((-1.0)*r10*x10701*x10704))+((sj1*x10695)));
evalcond[8]=((((-1.0)*sj0*sj1*x10699))+((cj1*x10695))+((r10*x10707))+((r10*x10700))+((sj3*x10698))+(((-1.0)*r11*x10693*x10705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(r02,-1);
if(!x10708.valid){
continue;
}
CheckValue<IkReal> x10709=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x10709.valid){
continue;
}
if( IKabs((sj0*(x10708.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x10709.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x10708.value)))+IKsqr(((-1.0)*cj0*(x10709.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x10708.value)), ((-1.0)*cj0*(x10709.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10710=IKcos(j4);
IkReal x10711=IKsin(j4);
IkReal x10712=(cj3*gconst10);
IkReal x10713=(gconst10*r21);
IkReal x10714=(cj2*sj0);
IkReal x10715=(gconst11*r21);
IkReal x10716=(gconst10*r11);
IkReal x10717=(gconst11*r11);
IkReal x10718=((1.0)*sj2);
IkReal x10719=(gconst10*sj3);
IkReal x10720=((1.0)*gconst11);
IkReal x10721=(cj0*cj2);
IkReal x10722=(cj1*sj2);
IkReal x10723=(sj3*x10711);
IkReal x10724=((1.0)*x10711);
IkReal x10725=(r02*x10710);
IkReal x10726=(cj3*gconst11*x10711);
evalcond[0]=((((-1.0)*sj0))+((r02*x10711)));
evalcond[1]=((((-1.0)*r20*x10710*x10720))+((x10710*x10713)));
evalcond[2]=(cj0+(((-1.0)*r10*x10710*x10720))+((x10710*x10716)));
evalcond[3]=(((cj0*x10722))+((sj1*x10721))+(((-1.0)*sj3*x10725)));
evalcond[4]=(((cj1*x10721))+(((-1.0)*cj0*sj1*x10718))+((cj3*x10725)));
evalcond[5]=(((x10713*x10723))+((cj3*x10715))+((r20*x10712))+(((-1.0)*sj1*x10718))+((cj1*cj2))+(((-1.0)*r20*x10720*x10723)));
evalcond[6]=((((-1.0)*cj1*x10718))+(((-1.0)*cj2*sj1))+((r20*x10719))+(((-1.0)*r21*x10712*x10724))+((r20*x10726))+((sj3*x10715)));
evalcond[7]=(((x10716*x10723))+((cj3*x10717))+(((-1.0)*r10*x10720*x10723))+((sj0*x10722))+((r10*x10712))+((sj1*x10714)));
evalcond[8]=(((r10*x10726))+((cj1*x10714))+(((-1.0)*sj0*sj1*x10718))+((sj3*x10717))+((r10*x10719))+(((-1.0)*r11*x10712*x10724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10729 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10729.valid){
continue;
}
IkReal x10727=((1.0)*(x10729.value));
IkReal x10728=x10410;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x10727)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10727)));
IkReal gconst10=((1.0)*r11*x10728);
IkReal gconst11=((-1.0)*r10*x10728);
IkReal x10730=r12*r12;
IkReal x10731=((1.0)*sj0);
IkReal x10732=(cj0*r02);
IkReal x10733=x10410;
j4eval[0]=((IKabs(((((-1.0)*r12*x10731))+(((-1.0)*x10732)))))+(IKabs(((((-1.0)*x10731*x10733))+((sj0*x10730*x10733))+((r12*x10732*x10733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10734=(sj1*sj2);
IkReal x10735=(r21*sj3);
IkReal x10736=((1.0)*gconst11);
IkReal x10737=(cj3*r21);
IkReal x10738=(r20*sj3);
IkReal x10739=((1.0)*gconst10);
IkReal x10740=(cj3*r20);
IkReal x10741=(cj1*cj2);
CheckValue<IkReal> x10742=IKPowWithIntegerCheck((((gconst10*x10735))+(((-1.0)*x10736*x10738))),-1);
if(!x10742.valid){
continue;
}
CheckValue<IkReal> x10743=IKPowWithIntegerCheck((((r11*x10735*(gconst10*gconst10)))+(((-1.0)*gconst10*r10*x10735*x10736))+(((-1.0)*gconst10*r11*x10736*x10738))+((r10*x10738*(gconst11*gconst11)))),-1);
if(!x10743.valid){
continue;
}
if( IKabs(((x10742.value)*(((((-1.0)*x10741))+(((-1.0)*x10739*x10740))+x10734+(((-1.0)*x10736*x10737)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10743.value)*(((((-1.0)*cj0*x10735*x10739))+((gconst10*r12*x10740))+((gconst11*r12*x10737))+(((-1.0)*r12*x10734))+((r12*x10741))+((cj0*gconst11*x10738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10742.value)*(((((-1.0)*x10741))+(((-1.0)*x10739*x10740))+x10734+(((-1.0)*x10736*x10737))))))+IKsqr(((x10743.value)*(((((-1.0)*cj0*x10735*x10739))+((gconst10*r12*x10740))+((gconst11*r12*x10737))+(((-1.0)*r12*x10734))+((r12*x10741))+((cj0*gconst11*x10738))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10742.value)*(((((-1.0)*x10741))+(((-1.0)*x10739*x10740))+x10734+(((-1.0)*x10736*x10737))))), ((x10743.value)*(((((-1.0)*cj0*x10735*x10739))+((gconst10*r12*x10740))+((gconst11*r12*x10737))+(((-1.0)*r12*x10734))+((r12*x10741))+((cj0*gconst11*x10738))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10744=IKcos(j4);
IkReal x10745=IKsin(j4);
IkReal x10746=(gconst10*sj3);
IkReal x10747=(cj3*gconst10);
IkReal x10748=(cj3*gconst11);
IkReal x10749=(cj2*sj0);
IkReal x10750=((1.0)*gconst11);
IkReal x10751=(gconst11*sj3);
IkReal x10752=((1.0)*sj2);
IkReal x10753=(cj0*cj2);
IkReal x10754=(cj1*sj2);
IkReal x10755=(gconst10*x10744);
IkReal x10756=(r00*x10745);
IkReal x10757=(r11*x10745);
IkReal x10758=(r21*x10745);
IkReal x10759=(sj3*x10745);
IkReal x10760=(r01*x10745);
IkReal x10761=(cj3*x10744);
IkReal x10762=((1.0)*sj3*x10744);
evalcond[0]=((((-1.0)*r20*x10744*x10750))+((r21*x10755)));
evalcond[1]=(cj0+(((-1.0)*r10*x10744*x10750))+((r11*x10755))+((r12*x10745)));
evalcond[2]=((((-1.0)*r00*x10744*x10750))+(((-1.0)*sj0))+((r02*x10745))+((r01*x10755)));
evalcond[3]=(((x10746*x10758))+((r20*x10747))+((cj1*cj2))+(((-1.0)*r20*x10750*x10759))+(((-1.0)*sj1*x10752))+((r21*x10748)));
evalcond[4]=((((-1.0)*cj2*sj1))+((r20*x10746))+(((-1.0)*cj1*x10752))+((r20*x10745*x10748))+(((-1.0)*x10747*x10758))+((r21*x10751)));
evalcond[5]=((((-1.0)*sj3*x10750*x10756))+((cj0*x10754))+((x10746*x10760))+((sj1*x10753))+(((-1.0)*r02*x10762))+((r01*x10748))+((r00*x10747)));
evalcond[6]=(((x10748*x10756))+(((-1.0)*cj0*sj1*x10752))+(((-1.0)*x10747*x10760))+((r02*x10761))+((r01*x10751))+((cj1*x10753))+((r00*x10746)));
evalcond[7]=(((x10746*x10757))+((r10*x10747))+((sj0*x10754))+(((-1.0)*r12*x10762))+(((-1.0)*r10*x10750*x10759))+((sj1*x10749))+((r11*x10748)));
evalcond[8]=(((r12*x10761))+((r10*x10746))+((r10*x10745*x10748))+(((-1.0)*sj0*sj1*x10752))+((r11*x10751))+(((-1.0)*x10747*x10757))+((cj1*x10749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10763=((1.0)*sj0);
IkReal x10764=((1.0)*cj0);
CheckValue<IkReal> x10765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10765.valid){
continue;
}
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x10763))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r00*x10764)))),IkReal(((((-1.0)*r12*x10763))+(((-1.0)*r02*x10764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10765.value)))+(x10766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10767=IKcos(j4);
IkReal x10768=IKsin(j4);
IkReal x10769=(gconst10*sj3);
IkReal x10770=(cj3*gconst10);
IkReal x10771=(cj3*gconst11);
IkReal x10772=(cj2*sj0);
IkReal x10773=((1.0)*gconst11);
IkReal x10774=(gconst11*sj3);
IkReal x10775=((1.0)*sj2);
IkReal x10776=(cj0*cj2);
IkReal x10777=(cj1*sj2);
IkReal x10778=(gconst10*x10767);
IkReal x10779=(r00*x10768);
IkReal x10780=(r11*x10768);
IkReal x10781=(r21*x10768);
IkReal x10782=(sj3*x10768);
IkReal x10783=(r01*x10768);
IkReal x10784=(cj3*x10767);
IkReal x10785=((1.0)*sj3*x10767);
evalcond[0]=((((-1.0)*r20*x10767*x10773))+((r21*x10778)));
evalcond[1]=(((r12*x10768))+((r11*x10778))+(((-1.0)*r10*x10767*x10773))+cj0);
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x10767*x10773))+((r01*x10778))+((r02*x10768)));
evalcond[3]=(((x10769*x10781))+((r20*x10770))+(((-1.0)*sj1*x10775))+(((-1.0)*r20*x10773*x10782))+((r21*x10771))+((cj1*cj2)));
evalcond[4]=((((-1.0)*cj1*x10775))+((r20*x10768*x10771))+(((-1.0)*cj2*sj1))+((r20*x10769))+((r21*x10774))+(((-1.0)*x10770*x10781)));
evalcond[5]=((((-1.0)*sj3*x10773*x10779))+((sj1*x10776))+((x10769*x10783))+((r00*x10770))+((r01*x10771))+(((-1.0)*r02*x10785))+((cj0*x10777)));
evalcond[6]=(((cj1*x10776))+((r02*x10784))+((x10771*x10779))+(((-1.0)*cj0*sj1*x10775))+((r00*x10769))+((r01*x10774))+(((-1.0)*x10770*x10783)));
evalcond[7]=(((sj1*x10772))+((r11*x10771))+((sj0*x10777))+(((-1.0)*r10*x10773*x10782))+((x10769*x10780))+(((-1.0)*r12*x10785))+((r10*x10770)));
evalcond[8]=(((r11*x10774))+((cj1*x10772))+((r10*x10768*x10771))+(((-1.0)*sj0*sj1*x10775))+(((-1.0)*x10770*x10780))+((r10*x10769))+((r12*x10784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10786=((1.0)*sj0);
IkReal x10787=((1.0)*cj0);
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r00*x10787))+((gconst10*r11*sj0))+(((-1.0)*gconst11*r10*x10786))+((cj0*gconst10*r01)))),IkReal(((((-1.0)*r12*x10786))+(((-1.0)*r02*x10787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
CheckValue<IkReal> x10789=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x10789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10788.value)+(((1.5707963267949)*(x10789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10790=IKcos(j4);
IkReal x10791=IKsin(j4);
IkReal x10792=(gconst10*sj3);
IkReal x10793=(cj3*gconst10);
IkReal x10794=(cj3*gconst11);
IkReal x10795=(cj2*sj0);
IkReal x10796=((1.0)*gconst11);
IkReal x10797=(gconst11*sj3);
IkReal x10798=((1.0)*sj2);
IkReal x10799=(cj0*cj2);
IkReal x10800=(cj1*sj2);
IkReal x10801=(gconst10*x10790);
IkReal x10802=(r00*x10791);
IkReal x10803=(r11*x10791);
IkReal x10804=(r21*x10791);
IkReal x10805=(r22*x10790);
IkReal x10806=(sj3*x10791);
IkReal x10807=(r01*x10791);
IkReal x10808=(cj3*x10790);
IkReal x10809=((1.0)*sj3*x10790);
evalcond[0]=((((-1.0)*r20*x10790*x10796))+((r21*x10801))+((r22*x10791)));
evalcond[1]=(((r12*x10791))+cj0+((r11*x10801))+(((-1.0)*r10*x10790*x10796)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10791))+((r01*x10801))+(((-1.0)*r00*x10790*x10796)));
evalcond[3]=(((x10792*x10804))+((r21*x10794))+((r20*x10793))+(((-1.0)*sj3*x10805))+((cj1*cj2))+(((-1.0)*r20*x10796*x10806))+(((-1.0)*sj1*x10798)));
evalcond[4]=(((cj3*x10805))+((r20*x10791*x10794))+(((-1.0)*cj2*sj1))+((r21*x10797))+(((-1.0)*cj1*x10798))+((r20*x10792))+(((-1.0)*x10793*x10804)));
evalcond[5]=(((x10792*x10807))+((cj0*x10800))+(((-1.0)*r02*x10809))+((sj1*x10799))+((r00*x10793))+((r01*x10794))+(((-1.0)*sj3*x10796*x10802)));
evalcond[6]=((((-1.0)*cj0*sj1*x10798))+((r02*x10808))+((cj1*x10799))+((r00*x10792))+((r01*x10797))+((x10794*x10802))+(((-1.0)*x10793*x10807)));
evalcond[7]=(((r10*x10793))+((x10792*x10803))+(((-1.0)*r10*x10796*x10806))+((sj0*x10800))+((sj1*x10795))+(((-1.0)*r12*x10809))+((r11*x10794)));
evalcond[8]=(((r10*x10792))+((r10*x10791*x10794))+(((-1.0)*sj0*sj1*x10798))+((r12*x10808))+((cj1*x10795))+((r11*x10797))+(((-1.0)*x10793*x10803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
CheckValue<IkReal> x10811=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x10811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10810.value)+(((1.5707963267949)*(x10811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10812=IKcos(j4);
IkReal x10813=IKsin(j4);
IkReal x10814=(gconst10*sj3);
IkReal x10815=(cj3*gconst10);
IkReal x10816=(cj3*gconst11);
IkReal x10817=(cj2*sj0);
IkReal x10818=((1.0)*gconst11);
IkReal x10819=(gconst11*sj3);
IkReal x10820=((1.0)*sj2);
IkReal x10821=(cj0*cj2);
IkReal x10822=(cj1*sj2);
IkReal x10823=(gconst10*x10812);
IkReal x10824=(r00*x10813);
IkReal x10825=(r11*x10813);
IkReal x10826=(r21*x10813);
IkReal x10827=(r22*x10812);
IkReal x10828=(sj3*x10813);
IkReal x10829=(r01*x10813);
IkReal x10830=(cj3*x10812);
IkReal x10831=((1.0)*sj3*x10812);
evalcond[0]=(((r22*x10813))+((r21*x10823))+(((-1.0)*r20*x10812*x10818)));
evalcond[1]=(cj0+(((-1.0)*r10*x10812*x10818))+((r11*x10823))+((r12*x10813)));
evalcond[2]=((((-1.0)*sj0))+((r02*x10813))+(((-1.0)*r00*x10812*x10818))+((r01*x10823)));
evalcond[3]=((((-1.0)*sj3*x10827))+((x10814*x10826))+(((-1.0)*r20*x10818*x10828))+((r20*x10815))+(((-1.0)*sj1*x10820))+((cj1*cj2))+((r21*x10816)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*x10815*x10826))+((r20*x10814))+((cj3*x10827))+((r21*x10819))+((r20*x10813*x10816))+(((-1.0)*cj1*x10820)));
evalcond[5]=(((sj1*x10821))+((x10814*x10829))+((cj0*x10822))+((r01*x10816))+(((-1.0)*sj3*x10818*x10824))+(((-1.0)*r02*x10831))+((r00*x10815)));
evalcond[6]=((((-1.0)*cj0*sj1*x10820))+((x10816*x10824))+((r02*x10830))+(((-1.0)*x10815*x10829))+((r01*x10819))+((r00*x10814))+((cj1*x10821)));
evalcond[7]=((((-1.0)*r10*x10818*x10828))+((sj0*x10822))+((sj1*x10817))+((x10814*x10825))+(((-1.0)*r12*x10831))+((r10*x10815))+((r11*x10816)));
evalcond[8]=(((cj1*x10817))+(((-1.0)*x10815*x10825))+(((-1.0)*sj0*sj1*x10820))+((r10*x10813*x10816))+((r10*x10814))+((r12*x10830))+((r11*x10819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst11*r20))+((cj0*gconst10*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
CheckValue<IkReal> x10833=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x10833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10832.value)+(((1.5707963267949)*(x10833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10834=IKcos(j4);
IkReal x10835=IKsin(j4);
IkReal x10836=(gconst10*sj3);
IkReal x10837=(cj3*gconst10);
IkReal x10838=(cj3*gconst11);
IkReal x10839=(cj2*sj0);
IkReal x10840=((1.0)*gconst11);
IkReal x10841=(gconst11*sj3);
IkReal x10842=((1.0)*sj2);
IkReal x10843=(cj0*cj2);
IkReal x10844=(cj1*sj2);
IkReal x10845=(gconst10*x10834);
IkReal x10846=(r00*x10835);
IkReal x10847=(r11*x10835);
IkReal x10848=(r21*x10835);
IkReal x10849=(r22*x10834);
IkReal x10850=(sj3*x10835);
IkReal x10851=(r01*x10835);
IkReal x10852=(cj3*x10834);
IkReal x10853=((1.0)*sj3*x10834);
evalcond[0]=(((r22*x10835))+(((-1.0)*r20*x10834*x10840))+((r21*x10845)));
evalcond[1]=((((-1.0)*r10*x10834*x10840))+cj0+((r11*x10845))+((r12*x10835)));
evalcond[2]=(((r01*x10845))+(((-1.0)*sj0))+(((-1.0)*r00*x10834*x10840))+((r02*x10835)));
evalcond[3]=((((-1.0)*sj1*x10842))+(((-1.0)*sj3*x10849))+((r20*x10837))+(((-1.0)*r20*x10840*x10850))+((cj1*cj2))+((r21*x10838))+((x10836*x10848)));
evalcond[4]=((((-1.0)*cj1*x10842))+(((-1.0)*x10837*x10848))+(((-1.0)*cj2*sj1))+((cj3*x10849))+((r20*x10835*x10838))+((r21*x10841))+((r20*x10836)));
evalcond[5]=(((x10836*x10851))+((cj0*x10844))+((r01*x10838))+(((-1.0)*r02*x10853))+((sj1*x10843))+((r00*x10837))+(((-1.0)*sj3*x10840*x10846)));
evalcond[6]=(((r01*x10841))+((x10838*x10846))+(((-1.0)*cj0*sj1*x10842))+((cj1*x10843))+((r00*x10836))+((r02*x10852))+(((-1.0)*x10837*x10851)));
evalcond[7]=(((sj1*x10839))+(((-1.0)*r12*x10853))+((r10*x10837))+((sj0*x10844))+(((-1.0)*r10*x10840*x10850))+((x10836*x10847))+((r11*x10838)));
evalcond[8]=((((-1.0)*x10837*x10847))+((r12*x10852))+((r10*x10835*x10838))+(((-1.0)*sj0*sj1*x10842))+((r10*x10836))+((r11*x10841))+((cj1*x10839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10854=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10854;
j4eval[1]=IKsign(x10854);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10855=((1.0)*cj5);
IkReal x10856=((((-1.0)*r21*x10855))+(((-1.0)*r20*sj5)));
j4eval[0]=x10856;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10855))))));
j4eval[2]=IKsign(x10856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x10857=cj5*cj5;
IkReal x10858=(cj3*r11*r21);
IkReal x10859=((1.0)*cj3*cj5*sj5);
IkReal x10860=(((cj3*r12*r22))+(((-1.0)*r11*r20*x10859))+((cj3*r10*r20*x10857))+(((-1.0)*r10*r21*x10859))+(((-1.0)*x10857*x10858))+x10858);
j4eval[0]=x10860;
j4eval[1]=IKsign(x10860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10861=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10861;
j4eval[1]=IKsign(x10861);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10862=((1.0)*cj5);
IkReal x10863=((((-1.0)*r21*x10862))+(((-1.0)*r20*sj5)));
j4eval[0]=x10863;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10862))))));
j4eval[2]=IKsign(x10863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x10864=cj5*cj5;
IkReal x10865=r11*r11;
IkReal x10866=(cj5*r10);
IkReal x10867=(r11*sj5);
IkReal x10868=(((x10864*x10865))+(((-1.0)*x10864*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10865))+(((2.0)*x10866*x10867)));
j4eval[0]=x10868;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10866))+x10867))));
j4eval[2]=IKsign(x10868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10869=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10869);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10869);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x10870=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x10870)));
j4eval[1]=((((-1.0)*r10*x10870))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10871=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10871);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10871);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10872=((1.0)*sj2);
CheckValue<IkReal> x10873=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x10873.valid){
continue;
}
CheckValue<IkReal> x10874=IKPowWithIntegerCheck(r22,-1);
if(!x10874.valid){
continue;
}
if( IKabs(((x10873.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10874.value)*(((((-1.0)*sj1*x10872))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10873.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10872))))))+IKsqr(((x10874.value)*(((((-1.0)*sj1*x10872))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10873.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x10872))))), ((x10874.value)*(((((-1.0)*sj1*x10872))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10875=IKcos(j4);
IkReal x10876=IKsin(j4);
IkReal x10877=(cj5*r00);
IkReal x10878=(cj5*r10);
IkReal x10879=((1.0)*x10875);
IkReal x10880=((1.0)*x10876);
IkReal x10881=(sj5*x10875);
IkReal x10882=(sj5*x10876);
evalcond[0]=(r22*x10876);
evalcond[1]=((((-1.0)*x10877*x10879))+((r01*x10881)));
evalcond[2]=((((-1.0)*r22*x10879))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x10878*x10880))+((r11*x10882)));
evalcond[4]=((1.0)+(((-1.0)*x10878*x10879))+((r11*x10881)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10877*x10880))+((r01*x10882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10883=((1.0)*cj5);
CheckValue<IkReal> x10884=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x10883))),-1);
if(!x10884.valid){
continue;
}
CheckValue<IkReal> x10885=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x10883))),-1);
if(!x10885.valid){
continue;
}
if( IKabs(((x10884.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10885.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10884.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x10885.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10884.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x10885.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10886=IKcos(j4);
IkReal x10887=IKsin(j4);
IkReal x10888=(cj5*r00);
IkReal x10889=(cj5*r10);
IkReal x10890=((1.0)*x10886);
IkReal x10891=((1.0)*x10887);
IkReal x10892=(sj5*x10886);
IkReal x10893=(sj5*x10887);
evalcond[0]=(r22*x10887);
evalcond[1]=(((r01*x10892))+(((-1.0)*x10888*x10890)));
evalcond[2]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r22*x10890)));
evalcond[3]=((((-1.0)*x10889*x10891))+((r11*x10893)));
evalcond[4]=((1.0)+(((-1.0)*x10889*x10890))+((r11*x10892)));
evalcond[5]=(((cj2*sj1))+((r01*x10893))+(((-1.0)*x10888*x10891))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10894=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10894);
rxp1_1=(px*r21);
rxp1_2=(r11*x10894);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10895=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10895);
rxp1_1=(px*r21);
rxp1_2=(r11*x10895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x10896=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x10896)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x10896)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10897=((1.0)*cj5);
CheckValue<IkReal> x10898=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x10897))),-1);
if(!x10898.valid){
continue;
}
CheckValue<IkReal> x10899=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x10897))),-1);
if(!x10899.valid){
continue;
}
if( IKabs(((x10898.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10899.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10898.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x10899.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10898.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x10899.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10900=IKcos(j4);
IkReal x10901=IKsin(j4);
IkReal x10902=(r21*sj5);
IkReal x10903=(cj5*r10);
IkReal x10904=(r11*sj5);
IkReal x10905=((1.0)*cj5*r20);
IkReal x10906=((1.0)*x10900);
evalcond[0]=(r02*x10901);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10906)));
evalcond[2]=(((x10900*x10902))+(((-1.0)*x10900*x10905)));
evalcond[3]=((((-1.0)*x10901*x10903))+((x10901*x10904)));
evalcond[4]=((1.0)+((x10900*x10904))+(((-1.0)*x10903*x10906)));
evalcond[5]=(((x10901*x10902))+(((-1.0)*sj1*sj2))+(((-1.0)*x10901*x10905))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10907=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x10907.valid){
continue;
}
CheckValue<IkReal> x10908=IKPowWithIntegerCheck(r02,-1);
if(!x10908.valid){
continue;
}
if( IKabs(((x10907.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10908.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10907.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10908.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10907.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10908.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10909=IKcos(j4);
IkReal x10910=IKsin(j4);
IkReal x10911=(r21*sj5);
IkReal x10912=(cj5*r10);
IkReal x10913=(r11*sj5);
IkReal x10914=((1.0)*cj5*r20);
IkReal x10915=((1.0)*x10909);
evalcond[0]=(r02*x10910);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r02*x10915))+((cj1*sj2)));
evalcond[2]=(((x10909*x10911))+(((-1.0)*x10909*x10914)));
evalcond[3]=(((x10910*x10913))+(((-1.0)*x10910*x10912)));
evalcond[4]=((1.0)+((x10909*x10913))+(((-1.0)*x10912*x10915)));
evalcond[5]=(((x10910*x10911))+(((-1.0)*sj1*sj2))+(((-1.0)*x10910*x10914))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10916=cj5*cj5;
IkReal x10917=r11*r11;
IkReal x10918=(cj5*r10);
IkReal x10919=(r11*sj5);
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10916*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x10918*x10919))+((x10916*x10917))+(((-1.0)*x10917)))),-1);
if(!x10920.valid){
continue;
}
CheckValue<IkReal> x10921 = IKatan2WithCheck(IkReal(r12),IkReal((x10919+(((-1.0)*x10918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10920.value)))+(x10921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10922=IKcos(j4);
IkReal x10923=IKsin(j4);
IkReal x10924=(cj5*r00);
IkReal x10925=(cj5*r10);
IkReal x10926=(cj5*r20);
IkReal x10927=((1.0)*x10922);
IkReal x10928=((1.0)*x10923);
IkReal x10929=(sj5*x10922);
IkReal x10930=(sj5*x10923);
evalcond[0]=(((r21*x10929))+((r22*x10923))+(((-1.0)*x10926*x10927)));
evalcond[1]=(((r02*x10923))+(((-1.0)*x10924*x10927))+((r01*x10929)));
evalcond[2]=((1.0)+((r12*x10923))+((r11*x10929))+(((-1.0)*x10925*x10927)));
evalcond[3]=((((-1.0)*r12*x10927))+((r11*x10930))+(((-1.0)*x10925*x10928)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10927))+((cj1*sj2))+(((-1.0)*x10924*x10928))+((r01*x10930)));
evalcond[5]=((((-1.0)*r22*x10927))+(((-1.0)*sj1*sj2))+((r21*x10930))+((cj1*cj2))+(((-1.0)*x10926*x10928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10931=((1.0)*cj5);
CheckValue<IkReal> x10932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10931))+(((-1.0)*r20*sj5)))),-1);
if(!x10932.valid){
continue;
}
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x10931)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10932.value)))+(x10933.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10934=IKcos(j4);
IkReal x10935=IKsin(j4);
IkReal x10936=(cj5*r00);
IkReal x10937=(cj5*r10);
IkReal x10938=(cj5*r20);
IkReal x10939=((1.0)*x10934);
IkReal x10940=((1.0)*x10935);
IkReal x10941=(sj5*x10934);
IkReal x10942=(sj5*x10935);
evalcond[0]=(((r21*x10941))+(((-1.0)*x10938*x10939))+((r22*x10935)));
evalcond[1]=(((r02*x10935))+((r01*x10941))+(((-1.0)*x10936*x10939)));
evalcond[2]=((1.0)+((r11*x10941))+(((-1.0)*x10937*x10939))+((r12*x10935)));
evalcond[3]=((((-1.0)*r12*x10939))+((r11*x10942))+(((-1.0)*x10937*x10940)));
evalcond[4]=((((-1.0)*x10936*x10940))+((cj2*sj1))+((r01*x10942))+(((-1.0)*r02*x10939))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x10939))+((r21*x10942))+(((-1.0)*sj1*sj2))+(((-1.0)*x10938*x10940))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10943=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x10943.valid){
continue;
}
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10943.value)))+(x10944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10945=IKcos(j4);
IkReal x10946=IKsin(j4);
IkReal x10947=(cj5*r00);
IkReal x10948=(cj5*r10);
IkReal x10949=(cj5*r20);
IkReal x10950=((1.0)*x10945);
IkReal x10951=((1.0)*x10946);
IkReal x10952=(sj5*x10945);
IkReal x10953=(sj5*x10946);
evalcond[0]=((((-1.0)*x10949*x10950))+((r21*x10952))+((r22*x10946)));
evalcond[1]=((((-1.0)*x10947*x10950))+((r01*x10952))+((r02*x10946)));
evalcond[2]=((1.0)+(((-1.0)*x10948*x10950))+((r12*x10946))+((r11*x10952)));
evalcond[3]=((((-1.0)*x10948*x10951))+(((-1.0)*r12*x10950))+((r11*x10953)));
evalcond[4]=((((-1.0)*x10947*x10951))+((cj2*sj1))+((cj1*sj2))+((r01*x10953))+(((-1.0)*r02*x10950)));
evalcond[5]=((((-1.0)*x10949*x10951))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x10950))+((cj1*cj2))+((r21*x10953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10954=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x10954;
j4eval[1]=IKsign(x10954);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10955=((1.0)*cj5);
IkReal x10956=((((-1.0)*r21*x10955))+(((-1.0)*r20*sj5)));
j4eval[0]=x10956;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x10955))))));
j4eval[2]=IKsign(x10956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x10957=cj5*cj5;
IkReal x10958=r11*r11;
IkReal x10959=(cj5*r10);
IkReal x10960=(r11*sj5);
IkReal x10961=((((2.0)*x10959*x10960))+(((-1.0)*x10957*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10958))+((x10957*x10958)));
j4eval[0]=x10961;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x10959))+x10960))));
j4eval[2]=IKsign(x10961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10962=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10962);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10962);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10963=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x10963);
rxp1_0=(pz*r11);
rxp1_1=(r01*x10963);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10964=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x10964.valid){
continue;
}
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10965.valid){
continue;
}
if( IKabs(((x10964.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10965.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10964.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((-1.0)*(x10965.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10964.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((-1.0)*(x10965.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10966=IKcos(j4);
IkReal x10967=IKsin(j4);
IkReal x10968=(cj5*r00);
IkReal x10969=(cj5*r10);
IkReal x10970=((1.0)*x10966);
IkReal x10971=(sj5*x10966);
IkReal x10972=((1.0)*sj5*x10967);
evalcond[0]=(r22*x10967);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x10966))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x10968*x10970))+((r01*x10971)));
evalcond[3]=(((x10967*x10969))+(((-1.0)*r11*x10972)));
evalcond[4]=((1.0)+((r11*x10971))+(((-1.0)*x10969*x10970)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((x10967*x10968))+(((-1.0)*r01*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10973=((1.0)*cj1);
CheckValue<IkReal> x10974=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x10974.valid){
continue;
}
CheckValue<IkReal> x10975=IKPowWithIntegerCheck(r22,-1);
if(!x10975.valid){
continue;
}
if( IKabs(((x10974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10973)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10975.value)*(((((-1.0)*cj2*x10973))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10973))))))+IKsqr(((x10975.value)*(((((-1.0)*cj2*x10973))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10973))))), ((x10975.value)*(((((-1.0)*cj2*x10973))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10976=IKcos(j4);
IkReal x10977=IKsin(j4);
IkReal x10978=(cj5*r00);
IkReal x10979=(cj5*r10);
IkReal x10980=((1.0)*x10976);
IkReal x10981=(sj5*x10976);
IkReal x10982=((1.0)*sj5*x10977);
evalcond[0]=(r22*x10977);
evalcond[1]=((((-1.0)*sj1*sj2))+((r22*x10976))+((cj1*cj2)));
evalcond[2]=(((r01*x10981))+(((-1.0)*x10978*x10980)));
evalcond[3]=(((x10977*x10979))+(((-1.0)*r11*x10982)));
evalcond[4]=((1.0)+((r11*x10981))+(((-1.0)*x10979*x10980)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x10982))+((x10977*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10983=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10983);
rxp1_1=(px*r21);
rxp1_2=(r11*x10983);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10984=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10984);
rxp1_1=(px*r21);
rxp1_2=(r11*x10984);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10985=((1.0)*cj2);
CheckValue<IkReal> x10986=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10986.valid){
continue;
}
CheckValue<IkReal> x10987=IKPowWithIntegerCheck(r02,-1);
if(!x10987.valid){
continue;
}
if( IKabs(((x10986.value)*((((sj1*sj2))+(((-1.0)*cj1*x10985)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10987.value)*(((((-1.0)*sj1*x10985))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10986.value)*((((sj1*sj2))+(((-1.0)*cj1*x10985))))))+IKsqr(((x10987.value)*(((((-1.0)*sj1*x10985))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10986.value)*((((sj1*sj2))+(((-1.0)*cj1*x10985))))), ((x10987.value)*(((((-1.0)*sj1*x10985))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10988=IKcos(j4);
IkReal x10989=IKsin(j4);
IkReal x10990=(sj5*x10988);
IkReal x10991=(cj5*x10989);
IkReal x10992=((1.0)*sj5*x10989);
IkReal x10993=((1.0)*cj5*x10988);
evalcond[0]=(r02*x10989);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x10988)));
evalcond[2]=(((r21*x10990))+(((-1.0)*r20*x10993)));
evalcond[3]=((((-1.0)*r11*x10992))+((r10*x10991)));
evalcond[4]=((1.0)+((r11*x10990))+(((-1.0)*r10*x10993)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x10992))+((r20*x10991))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10994=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x10994.valid){
continue;
}
CheckValue<IkReal> x10995=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x10995.valid){
continue;
}
if( IKabs(((x10994.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x10995.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10994.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((-1.0)*(x10995.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10994.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((-1.0)*(x10995.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10996=IKcos(j4);
IkReal x10997=IKsin(j4);
IkReal x10998=(sj5*x10996);
IkReal x10999=(cj5*x10997);
IkReal x11000=((1.0)*sj5*x10997);
IkReal x11001=((1.0)*cj5*x10996);
evalcond[0]=(r02*x10997);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r02*x10996)));
evalcond[2]=(((r21*x10998))+(((-1.0)*r20*x11001)));
evalcond[3]=((((-1.0)*r11*x11000))+((r10*x10999)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11001))+((r11*x10998)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r20*x10999))+(((-1.0)*r21*x11000))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11002=cj5*cj5;
IkReal x11003=r11*r11;
IkReal x11004=(cj5*r10);
IkReal x11005=(r11*sj5);
CheckValue<IkReal> x11006=IKPowWithIntegerCheck(IKsign((((x11002*x11003))+(((2.0)*x11004*x11005))+(((-1.0)*(r12*r12)))+(((-1.0)*x11002*(r10*r10)))+(((-1.0)*x11003)))),-1);
if(!x11006.valid){
continue;
}
CheckValue<IkReal> x11007 = IKatan2WithCheck(IkReal(r12),IkReal((x11005+(((-1.0)*x11004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11006.value)))+(x11007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11008=IKcos(j4);
IkReal x11009=IKsin(j4);
IkReal x11010=(cj5*r00);
IkReal x11011=((1.0)*x11008);
IkReal x11012=(sj5*x11008);
IkReal x11013=(cj5*x11009);
IkReal x11014=((1.0)*sj5*x11009);
evalcond[0]=((((-1.0)*cj5*r20*x11011))+((r21*x11012))+((r22*x11009)));
evalcond[1]=(((r02*x11009))+(((-1.0)*x11010*x11011))+((r01*x11012)));
evalcond[2]=(((r10*x11013))+(((-1.0)*r11*x11014))+((r12*x11008)));
evalcond[3]=((1.0)+((r11*x11012))+((r12*x11009))+(((-1.0)*cj5*r10*x11011)));
evalcond[4]=(((r02*x11008))+((cj2*sj1))+(((-1.0)*r01*x11014))+((cj1*sj2))+((x11009*x11010)));
evalcond[5]=(((r20*x11013))+(((-1.0)*sj1*sj2))+((r22*x11008))+((cj1*cj2))+(((-1.0)*r21*x11014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11015=((1.0)*cj5);
CheckValue<IkReal> x11016 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11015))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11016.valid){
continue;
}
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11015))+(((-1.0)*r20*sj5)))),-1);
if(!x11017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11016.value)+(((1.5707963267949)*(x11017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11018=IKcos(j4);
IkReal x11019=IKsin(j4);
IkReal x11020=(cj5*r00);
IkReal x11021=((1.0)*x11018);
IkReal x11022=(sj5*x11018);
IkReal x11023=(cj5*x11019);
IkReal x11024=((1.0)*sj5*x11019);
evalcond[0]=(((r21*x11022))+(((-1.0)*cj5*r20*x11021))+((r22*x11019)));
evalcond[1]=(((r01*x11022))+(((-1.0)*x11020*x11021))+((r02*x11019)));
evalcond[2]=(((r10*x11023))+(((-1.0)*r11*x11024))+((r12*x11018)));
evalcond[3]=((1.0)+(((-1.0)*cj5*r10*x11021))+((r12*x11019))+((r11*x11022)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11019*x11020))+(((-1.0)*r01*x11024))+((r02*x11018)));
evalcond[5]=((((-1.0)*r21*x11024))+((r20*x11023))+(((-1.0)*sj1*sj2))+((r22*x11018))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11025=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11025.valid){
continue;
}
CheckValue<IkReal> x11026 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11025.value)))+(x11026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11027=IKcos(j4);
IkReal x11028=IKsin(j4);
IkReal x11029=(cj5*r00);
IkReal x11030=((1.0)*x11027);
IkReal x11031=(sj5*x11027);
IkReal x11032=(cj5*x11028);
IkReal x11033=((1.0)*sj5*x11028);
evalcond[0]=(((r21*x11031))+(((-1.0)*cj5*r20*x11030))+((r22*x11028)));
evalcond[1]=(((r01*x11031))+(((-1.0)*x11029*x11030))+((r02*x11028)));
evalcond[2]=(((r10*x11032))+((r12*x11027))+(((-1.0)*r11*x11033)));
evalcond[3]=((1.0)+((r12*x11028))+(((-1.0)*cj5*r10*x11030))+((r11*x11031)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*x11033))+((x11028*x11029))+((r02*x11027)));
evalcond[5]=(((r20*x11032))+(((-1.0)*r21*x11033))+(((-1.0)*sj1*sj2))+((r22*x11027))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11035 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11035)==0){
continue;
}
IkReal x11034=pow(x11035,-0.5);
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
IkReal gconst24=((-1.0)*(x11036.value));
IkReal gconst25=((-1.0)*r01*x11034);
IkReal gconst26=(r00*x11034);
CheckValue<IkReal> x11037 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11037.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11037.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11040 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11040.valid){
continue;
}
IkReal x11038=((-1.0)*(x11040.value));
IkReal x11039=x11034;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11038;
IkReal gconst24=x11038;
IkReal gconst25=((-1.0)*r01*x11039);
IkReal gconst26=(r00*x11039);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11043 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11043.valid){
continue;
}
IkReal x11041=((-1.0)*(x11043.value));
IkReal x11042=x11034;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x11041;
IkReal gconst24=x11041;
IkReal gconst25=((-1.0)*r01*x11042);
IkReal gconst26=(r00*x11042);
CheckValue<IkReal> x11051=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11051.valid){
continue;
}
IkReal x11044=x11051.value;
IkReal x11045=(cj3*x11044);
IkReal x11046=(r21*x11045);
IkReal x11047=(r10*x11045);
IkReal x11048=(r11*x11045);
IkReal x11049=(r20*x11045);
IkReal x11050=(r00*r01*x11045);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r10*x11046))+((r11*x11046*(r01*r01)))+((r20*x11047*(r00*r00)))+((r00*r01*r20*x11048))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11052=gconst25*gconst25;
IkReal x11053=gconst26*gconst26;
IkReal x11054=((1.0)*sj3);
IkReal x11055=(gconst25*r10);
IkReal x11056=(gconst26*r21);
IkReal x11057=((1.0)*cj3);
IkReal x11058=(gconst25*r11);
IkReal x11059=(gconst26*r20);
IkReal x11060=(r20*x11053);
IkReal x11061=(r21*x11052);
CheckValue<IkReal> x11062 = IKatan2WithCheck(IkReal((((cj3*r10*x11061))+(((-1.0)*r11*x11057*x11060))+((cj3*x11056*x11058))+(((-1.0)*x11055*x11057*x11059)))),IkReal(((((-1.0)*gconst26*r11*r22*x11057))+(((-1.0)*r22*x11055*x11057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11062.valid){
continue;
}
CheckValue<IkReal> x11063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x11054))+((sj3*x11055*x11056))+((sj3*x11058*x11059))+(((-1.0)*r10*x11054*x11060))+(((-1.0)*r11*x11054*x11061)))),-1);
if(!x11063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11062.value)+(((1.5707963267949)*(x11063.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11064=IKcos(j4);
IkReal x11065=IKsin(j4);
IkReal x11066=(cj1*cj2);
IkReal x11067=(r11*sj3);
IkReal x11068=((1.0)*sj2);
IkReal x11069=(gconst25*sj3);
IkReal x11070=(cj3*gconst25);
IkReal x11071=(cj2*sj1);
IkReal x11072=(gconst26*sj3);
IkReal x11073=(cj3*gconst26);
IkReal x11074=(sj1*x11068);
IkReal x11075=(gconst25*x11064);
IkReal x11076=(cj3*x11064);
IkReal x11077=((1.0)*x11065);
IkReal x11078=((1.0)*gconst26*x11064);
IkReal x11079=((1.0)*sj3*x11064);
evalcond[0]=((((-1.0)*r20*x11078))+((r21*x11075))+((r22*x11065)));
evalcond[1]=((((-1.0)*r00*x11078))+((r01*x11075))+((r02*x11065)));
evalcond[2]=((1.0)+((r11*x11075))+((r12*x11065))+(((-1.0)*r10*x11078)));
evalcond[3]=(((r12*x11076))+((r10*x11069))+((gconst26*x11067))+(((-1.0)*r11*x11070*x11077))+((r10*x11065*x11073)));
evalcond[4]=(((gconst25*x11065*x11067))+((r11*x11073))+((r10*x11070))+(((-1.0)*r10*x11072*x11077))+(((-1.0)*r12*x11079)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r02*x11079))+x11071+((r00*x11070))+((r01*x11073))+((r01*x11065*x11069))+(((-1.0)*r00*x11072*x11077)));
evalcond[6]=(((r00*x11065*x11073))+((r02*x11076))+x11066+(((-1.0)*x11074))+((r00*x11069))+((r01*x11072))+(((-1.0)*r01*x11070*x11077)));
evalcond[7]=(((r21*x11065*x11069))+((r21*x11073))+x11066+(((-1.0)*x11074))+((r20*x11070))+(((-1.0)*r20*x11072*x11077))+(((-1.0)*r22*x11079)));
evalcond[8]=((((-1.0)*cj1*x11068))+((r20*x11069))+((r21*x11072))+((r20*x11065*x11073))+(((-1.0)*r21*x11070*x11077))+((r22*x11076))+(((-1.0)*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11080=gconst25*gconst25;
IkReal x11081=gconst26*gconst26;
IkReal x11082=(cj3*r10);
IkReal x11083=(r10*sj3);
IkReal x11084=(cj3*r11);
IkReal x11085=(r11*sj3);
IkReal x11086=((1.0)*gconst25);
IkReal x11087=(gconst26*r20);
IkReal x11088=(r20*x11081);
IkReal x11089=(r21*x11080);
IkReal x11090=(gconst25*gconst26*r21);
CheckValue<IkReal> x11091 = IKatan2WithCheck(IkReal(((((-1.0)*x11085*x11088))+((x11085*x11090))+((x11083*x11089))+(((-1.0)*x11083*x11086*x11087)))),IkReal(((((-1.0)*gconst26*r22*x11085))+(((-1.0)*r22*x11083*x11086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11084*x11086*x11087))+((x11082*x11088))+((x11084*x11089))+(((-1.0)*gconst26*r21*x11082*x11086)))),-1);
if(!x11092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11091.value)+(((1.5707963267949)*(x11092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11093=IKcos(j4);
IkReal x11094=IKsin(j4);
IkReal x11095=(cj1*cj2);
IkReal x11096=(r11*sj3);
IkReal x11097=((1.0)*sj2);
IkReal x11098=(gconst25*sj3);
IkReal x11099=(cj3*gconst25);
IkReal x11100=(cj2*sj1);
IkReal x11101=(gconst26*sj3);
IkReal x11102=(cj3*gconst26);
IkReal x11103=(sj1*x11097);
IkReal x11104=(gconst25*x11093);
IkReal x11105=(cj3*x11093);
IkReal x11106=((1.0)*x11094);
IkReal x11107=((1.0)*gconst26*x11093);
IkReal x11108=((1.0)*sj3*x11093);
evalcond[0]=(((r21*x11104))+((r22*x11094))+(((-1.0)*r20*x11107)));
evalcond[1]=(((r02*x11094))+(((-1.0)*r00*x11107))+((r01*x11104)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11107))+((r12*x11094))+((r11*x11104)));
evalcond[3]=(((gconst26*x11096))+((r10*x11094*x11102))+(((-1.0)*r11*x11099*x11106))+((r10*x11098))+((r12*x11105)));
evalcond[4]=(((gconst25*x11094*x11096))+(((-1.0)*r10*x11101*x11106))+(((-1.0)*r12*x11108))+((r10*x11099))+((r11*x11102)));
evalcond[5]=(((cj1*sj2))+((r01*x11094*x11098))+((r00*x11099))+x11100+(((-1.0)*r00*x11101*x11106))+(((-1.0)*r02*x11108))+((r01*x11102)));
evalcond[6]=(((r02*x11105))+(((-1.0)*r01*x11099*x11106))+x11095+((r00*x11098))+(((-1.0)*x11103))+((r01*x11101))+((r00*x11094*x11102)));
evalcond[7]=(((r21*x11094*x11098))+((r20*x11099))+x11095+((r21*x11102))+(((-1.0)*r22*x11108))+(((-1.0)*x11103))+(((-1.0)*r20*x11101*x11106)));
evalcond[8]=((((-1.0)*x11100))+(((-1.0)*cj1*x11097))+(((-1.0)*r21*x11099*x11106))+((r20*x11098))+((r20*x11094*x11102))+((r21*x11101))+((r22*x11105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11109=((1.0)*gconst26);
CheckValue<IkReal> x11110 = IKatan2WithCheck(IkReal((((gconst25*r01))+(((-1.0)*r00*x11109)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11110.valid){
continue;
}
CheckValue<IkReal> x11111=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11109))+(((-1.0)*gconst25*r20)))),-1);
if(!x11111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11110.value)+(((1.5707963267949)*(x11111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11112=IKcos(j4);
IkReal x11113=IKsin(j4);
IkReal x11114=(cj1*cj2);
IkReal x11115=(r11*sj3);
IkReal x11116=((1.0)*sj2);
IkReal x11117=(gconst25*sj3);
IkReal x11118=(cj3*gconst25);
IkReal x11119=(cj2*sj1);
IkReal x11120=(gconst26*sj3);
IkReal x11121=(cj3*gconst26);
IkReal x11122=(sj1*x11116);
IkReal x11123=(gconst25*x11112);
IkReal x11124=(cj3*x11112);
IkReal x11125=((1.0)*x11113);
IkReal x11126=((1.0)*gconst26*x11112);
IkReal x11127=((1.0)*sj3*x11112);
evalcond[0]=(((r21*x11123))+(((-1.0)*r20*x11126))+((r22*x11113)));
evalcond[1]=(((r02*x11113))+(((-1.0)*r00*x11126))+((r01*x11123)));
evalcond[2]=((1.0)+((r11*x11123))+(((-1.0)*r10*x11126))+((r12*x11113)));
evalcond[3]=(((gconst26*x11115))+((r10*x11117))+((r12*x11124))+((r10*x11113*x11121))+(((-1.0)*r11*x11118*x11125)));
evalcond[4]=((((-1.0)*r12*x11127))+((r10*x11118))+((gconst25*x11113*x11115))+((r11*x11121))+(((-1.0)*r10*x11120*x11125)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r00*x11120*x11125))+x11119+(((-1.0)*r02*x11127))+((r00*x11118))+((r01*x11113*x11117))+((r01*x11121)));
evalcond[6]=((((-1.0)*x11122))+x11114+((r02*x11124))+((r00*x11113*x11121))+((r00*x11117))+((r01*x11120))+(((-1.0)*r01*x11118*x11125)));
evalcond[7]=((((-1.0)*r20*x11120*x11125))+(((-1.0)*x11122))+((r21*x11121))+x11114+(((-1.0)*r22*x11127))+((r21*x11113*x11117))+((r20*x11118)));
evalcond[8]=((((-1.0)*x11119))+((r21*x11120))+(((-1.0)*cj1*x11116))+(((-1.0)*r21*x11118*x11125))+((r22*x11124))+((r20*x11117))+((r20*x11113*x11121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11129 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11129)==0){
continue;
}
IkReal x11128=pow(x11129,-0.5);
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x11130.value))));
IkReal gconst28=((1.0)*r01*x11128);
IkReal gconst29=((-1.0)*r00*x11128);
CheckValue<IkReal> x11131 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11131.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11131.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11134 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11134.valid){
continue;
}
IkReal x11132=((1.0)*(x11134.value));
IkReal x11133=x11128;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11132)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11132)));
IkReal gconst28=((1.0)*r01*x11133);
IkReal gconst29=((-1.0)*r00*x11133);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11137 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11137.valid){
continue;
}
IkReal x11135=((1.0)*(x11137.value));
IkReal x11136=x11128;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x11135)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x11135)));
IkReal gconst28=((1.0)*r01*x11136);
IkReal gconst29=((-1.0)*r00*x11136);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11138=gconst28*gconst28;
IkReal x11139=gconst29*gconst29;
IkReal x11140=(r11*r21);
IkReal x11141=(gconst29*sj3);
IkReal x11142=((1.0)*r22);
IkReal x11143=(gconst28*r10);
IkReal x11144=((1.0)*r20);
IkReal x11145=((1.0)*cj3*gconst29);
CheckValue<IkReal> x11146 = IKatan2WithCheck(IkReal(((((-1.0)*x11141*x11143*x11144))+((gconst28*x11140*x11141))+(((-1.0)*r11*sj3*x11139*x11144))+((r10*r21*sj3*x11138)))),IkReal(((((-1.0)*sj3*x11142*x11143))+(((-1.0)*r11*x11141*x11142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11146.valid){
continue;
}
CheckValue<IkReal> x11147=IKPowWithIntegerCheck(IKsign((((cj3*x11138*x11140))+((cj3*r12*r22))+(((-1.0)*r21*x11143*x11145))+((cj3*r10*r20*x11139))+(((-1.0)*cj3*gconst28*gconst29*r11*x11144)))),-1);
if(!x11147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11146.value)+(((1.5707963267949)*(x11147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11148=IKcos(j4);
IkReal x11149=IKsin(j4);
IkReal x11150=(cj1*cj2);
IkReal x11151=(gconst29*sj3);
IkReal x11152=(gconst28*sj3);
IkReal x11153=(gconst28*r11);
IkReal x11154=((1.0)*sj2);
IkReal x11155=(cj3*gconst29);
IkReal x11156=(cj2*sj1);
IkReal x11157=(cj3*gconst28);
IkReal x11158=(gconst29*r20);
IkReal x11159=(gconst29*r00);
IkReal x11160=(sj1*x11154);
IkReal x11161=((1.0)*gconst29*r10);
IkReal x11162=(r21*x11149);
IkReal x11163=(cj3*x11149);
IkReal x11164=((1.0)*x11148);
IkReal x11165=(gconst28*x11148);
IkReal x11166=((1.0)*x11149);
IkReal x11167=(cj3*x11148);
evalcond[0]=((((-1.0)*x11158*x11164))+((r22*x11149))+((r21*x11165)));
evalcond[1]=(((r01*x11165))+((r02*x11149))+(((-1.0)*x11159*x11164)));
evalcond[2]=((1.0)+(((-1.0)*x11148*x11161))+((r12*x11149))+((x11148*x11153)));
evalcond[3]=(((r10*x11149*x11155))+((r12*x11167))+((r11*x11151))+((r10*x11152))+(((-1.0)*x11153*x11163)));
evalcond[4]=(((r11*x11149*x11152))+(((-1.0)*r10*x11151*x11166))+((r11*x11155))+((r10*x11157))+(((-1.0)*r12*sj3*x11164)));
evalcond[5]=(((r00*x11157))+((r01*x11155))+((cj1*sj2))+(((-1.0)*r02*sj3*x11164))+((r01*x11149*x11152))+x11156+(((-1.0)*r00*x11151*x11166)));
evalcond[6]=(((r00*x11152))+((r01*x11151))+(((-1.0)*r01*x11157*x11166))+(((-1.0)*x11160))+x11150+((r00*x11149*x11155))+((r02*x11167)));
evalcond[7]=(((r21*x11155))+(((-1.0)*x11160))+((x11152*x11162))+(((-1.0)*r20*x11151*x11166))+x11150+((r20*x11157))+(((-1.0)*r22*sj3*x11164)));
evalcond[8]=((((-1.0)*x11157*x11162))+(((-1.0)*cj1*x11154))+((r21*x11151))+(((-1.0)*x11156))+((r20*x11149*x11155))+((r22*x11167))+((r20*x11152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11168=((1.0)*gconst29);
CheckValue<IkReal> x11169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11168))+(((-1.0)*gconst28*r20)))),-1);
if(!x11169.valid){
continue;
}
CheckValue<IkReal> x11170 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11168))+((gconst28*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11169.value)))+(x11170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11171=IKcos(j4);
IkReal x11172=IKsin(j4);
IkReal x11173=(cj1*cj2);
IkReal x11174=(gconst29*sj3);
IkReal x11175=(gconst28*sj3);
IkReal x11176=(gconst28*r11);
IkReal x11177=((1.0)*sj2);
IkReal x11178=(cj3*gconst29);
IkReal x11179=(cj2*sj1);
IkReal x11180=(cj3*gconst28);
IkReal x11181=(gconst29*r20);
IkReal x11182=(gconst29*r00);
IkReal x11183=(sj1*x11177);
IkReal x11184=((1.0)*gconst29*r10);
IkReal x11185=(r21*x11172);
IkReal x11186=(cj3*x11172);
IkReal x11187=((1.0)*x11171);
IkReal x11188=(gconst28*x11171);
IkReal x11189=((1.0)*x11172);
IkReal x11190=(cj3*x11171);
evalcond[0]=((((-1.0)*x11181*x11187))+((r22*x11172))+((r21*x11188)));
evalcond[1]=((((-1.0)*x11182*x11187))+((r01*x11188))+((r02*x11172)));
evalcond[2]=((1.0)+((r12*x11172))+(((-1.0)*x11171*x11184))+((x11171*x11176)));
evalcond[3]=((((-1.0)*x11176*x11186))+((r11*x11174))+((r12*x11190))+((r10*x11172*x11178))+((r10*x11175)));
evalcond[4]=(((r11*x11178))+(((-1.0)*r10*x11174*x11189))+(((-1.0)*r12*sj3*x11187))+((r11*x11172*x11175))+((r10*x11180)));
evalcond[5]=(((r01*x11178))+(((-1.0)*r00*x11174*x11189))+((cj1*sj2))+((r00*x11180))+(((-1.0)*r02*sj3*x11187))+x11179+((r01*x11172*x11175)));
evalcond[6]=((((-1.0)*x11183))+((r00*x11175))+((r01*x11174))+((r00*x11172*x11178))+x11173+(((-1.0)*r01*x11180*x11189))+((r02*x11190)));
evalcond[7]=(((r20*x11180))+(((-1.0)*r22*sj3*x11187))+(((-1.0)*x11183))+(((-1.0)*r20*x11174*x11189))+((x11175*x11185))+x11173+((r21*x11178)));
evalcond[8]=(((r20*x11175))+(((-1.0)*cj1*x11177))+((r22*x11190))+(((-1.0)*x11179))+((r20*x11172*x11178))+(((-1.0)*x11180*x11185))+((r21*x11174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11191 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r20))+((gconst28*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11191.valid){
continue;
}
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x11192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11191.value)+(((1.5707963267949)*(x11192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11193=IKcos(j4);
IkReal x11194=IKsin(j4);
IkReal x11195=(cj1*cj2);
IkReal x11196=(gconst29*sj3);
IkReal x11197=(gconst28*sj3);
IkReal x11198=(gconst28*r11);
IkReal x11199=((1.0)*sj2);
IkReal x11200=(cj3*gconst29);
IkReal x11201=(cj2*sj1);
IkReal x11202=(cj3*gconst28);
IkReal x11203=(gconst29*r20);
IkReal x11204=(gconst29*r00);
IkReal x11205=(sj1*x11199);
IkReal x11206=((1.0)*gconst29*r10);
IkReal x11207=(r21*x11194);
IkReal x11208=(cj3*x11194);
IkReal x11209=((1.0)*x11193);
IkReal x11210=(gconst28*x11193);
IkReal x11211=((1.0)*x11194);
IkReal x11212=(cj3*x11193);
evalcond[0]=(((r21*x11210))+(((-1.0)*x11203*x11209))+((r22*x11194)));
evalcond[1]=(((r02*x11194))+((r01*x11210))+(((-1.0)*x11204*x11209)));
evalcond[2]=((1.0)+(((-1.0)*x11193*x11206))+((r12*x11194))+((x11193*x11198)));
evalcond[3]=((((-1.0)*x11198*x11208))+((r11*x11196))+((r10*x11194*x11200))+((r12*x11212))+((r10*x11197)));
evalcond[4]=(((r11*x11200))+((r10*x11202))+(((-1.0)*r10*x11196*x11211))+(((-1.0)*r12*sj3*x11209))+((r11*x11194*x11197)));
evalcond[5]=(((r01*x11194*x11197))+x11201+(((-1.0)*r00*x11196*x11211))+((cj1*sj2))+(((-1.0)*r02*sj3*x11209))+((r00*x11202))+((r01*x11200)));
evalcond[6]=(((r02*x11212))+(((-1.0)*x11205))+((r00*x11197))+((r01*x11196))+x11195+((r00*x11194*x11200))+(((-1.0)*r01*x11202*x11211)));
evalcond[7]=(((r21*x11200))+(((-1.0)*x11205))+((r20*x11202))+((x11197*x11207))+(((-1.0)*r22*sj3*x11209))+x11195+(((-1.0)*r20*x11196*x11211)));
evalcond[8]=(((r21*x11196))+(((-1.0)*x11202*x11207))+((r20*x11197))+((r20*x11194*x11200))+(((-1.0)*cj1*x11199))+(((-1.0)*x11201))+((r22*x11212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11213=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11213);
rxp1_1=(px*r21);
rxp1_2=(r11*x11213);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11214=(r11*sj5);
IkReal x11215=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*sj3*x11215))+((sj3*x11214)));
j4eval[1]=((((-1.0)*x11215))+x11214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11216=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11216);
rxp1_1=(px*r21);
rxp1_2=(r11*x11216);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11217=(cj5*r10);
IkReal x11218=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x11218))+((cj3*x11217)));
j4eval[1]=(x11218+(((-1.0)*x11217)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11219=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11219);
rxp1_1=(px*r21);
rxp1_2=(r11*x11219);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11220=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11220);
rxp1_1=(px*r21);
rxp1_2=(r11*x11220);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11221=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11221);
rxp1_1=(px*r21);
rxp1_2=(r11*x11221);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11222=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11222.valid){
continue;
}
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11223.valid){
continue;
}
if( IKabs(((x11222.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11223.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11222.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11223.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11222.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11223.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11224=IKcos(j4);
IkReal x11225=IKsin(j4);
IkReal x11226=(cj5*r10);
IkReal x11227=(cj5*r20);
IkReal x11228=((1.0)*sj2);
IkReal x11229=((1.0)*x11224);
IkReal x11230=(sj5*x11224);
IkReal x11231=((1.0)*sj5*x11225);
evalcond[0]=(r02*x11225);
evalcond[1]=((((-1.0)*sj1*x11228))+((r02*x11224))+((cj1*cj2)));
evalcond[2]=(((r21*x11230))+(((-1.0)*x11227*x11229)));
evalcond[3]=((((-1.0)*r11*x11231))+((x11225*x11226)));
evalcond[4]=((1.0)+((r11*x11230))+(((-1.0)*x11226*x11229)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x11228))+(((-1.0)*r21*x11231))+((x11225*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11232=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11232.valid){
continue;
}
CheckValue<IkReal> x11233=IKPowWithIntegerCheck(r02,-1);
if(!x11233.valid){
continue;
}
if( IKabs(((x11232.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11233.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11232.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11233.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11232.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11233.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11234=IKcos(j4);
IkReal x11235=IKsin(j4);
IkReal x11236=(cj5*r10);
IkReal x11237=(cj5*r20);
IkReal x11238=((1.0)*sj2);
IkReal x11239=((1.0)*x11234);
IkReal x11240=(sj5*x11234);
IkReal x11241=((1.0)*sj5*x11235);
evalcond[0]=(r02*x11235);
evalcond[1]=((((-1.0)*sj1*x11238))+((r02*x11234))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x11237*x11239))+((r21*x11240)));
evalcond[3]=(((x11235*x11236))+(((-1.0)*r11*x11241)));
evalcond[4]=((1.0)+((r11*x11240))+(((-1.0)*x11236*x11239)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x11235*x11237))+(((-1.0)*cj1*x11238))+(((-1.0)*r21*x11241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11242=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11242);
rxp1_1=(px*r21);
rxp1_2=(r11*x11242);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11243=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x11243)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11243)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11244=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11244);
rxp1_1=(px*r21);
rxp1_2=(r11*x11244);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11245=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11245.valid){
continue;
}
CheckValue<IkReal> x11246=IKPowWithIntegerCheck(r02,-1);
if(!x11246.valid){
continue;
}
if( IKabs(((x11245.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11246.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11245.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11246.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11245.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11246.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11247=IKcos(j4);
IkReal x11248=IKsin(j4);
IkReal x11249=((1.0)*sj1);
IkReal x11250=(r21*sj5);
IkReal x11251=(cj5*r10);
IkReal x11252=(r11*sj5);
IkReal x11253=((1.0)*cj5*r20);
IkReal x11254=((1.0)*x11247);
evalcond[0]=(r02*x11248);
evalcond[1]=(((x11247*x11250))+(((-1.0)*x11247*x11253)));
evalcond[2]=((((-1.0)*r02*x11254))+(((-1.0)*sj2*x11249))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11248*x11251))+((x11248*x11252)));
evalcond[4]=((1.0)+((x11247*x11252))+(((-1.0)*x11251*x11254)));
evalcond[5]=((((-1.0)*cj2*x11249))+(((-1.0)*cj1*sj2))+(((-1.0)*x11248*x11253))+((x11248*x11250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11255=((1.0)*cj5);
CheckValue<IkReal> x11256=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x11255))),-1);
if(!x11256.valid){
continue;
}
CheckValue<IkReal> x11257=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x11255))),-1);
if(!x11257.valid){
continue;
}
if( IKabs(((x11256.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11257.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11256.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((-1.0)*(x11257.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11256.value)*((((cj2*sj1))+((cj1*sj2))))), ((-1.0)*(x11257.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11258=IKcos(j4);
IkReal x11259=IKsin(j4);
IkReal x11260=((1.0)*sj1);
IkReal x11261=(r21*sj5);
IkReal x11262=(cj5*r10);
IkReal x11263=(r11*sj5);
IkReal x11264=((1.0)*cj5*r20);
IkReal x11265=((1.0)*x11258);
evalcond[0]=(r02*x11259);
evalcond[1]=(((x11258*x11261))+(((-1.0)*x11258*x11264)));
evalcond[2]=((((-1.0)*r02*x11265))+(((-1.0)*sj2*x11260))+((cj1*cj2)));
evalcond[3]=(((x11259*x11263))+(((-1.0)*x11259*x11262)));
evalcond[4]=((1.0)+((x11258*x11263))+(((-1.0)*x11262*x11265)));
evalcond[5]=((((-1.0)*cj2*x11260))+(((-1.0)*cj1*sj2))+((x11259*x11261))+(((-1.0)*x11259*x11264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11266=((1.0)*cj5);
CheckValue<IkReal> x11267=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x11266))),-1);
if(!x11267.valid){
continue;
}
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(r02,-1);
if(!x11268.valid){
continue;
}
CheckValue<IkReal> x11269=IKPowWithIntegerCheck(sj3,-1);
if(!x11269.valid){
continue;
}
if( IKabs(((x11267.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11266)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11268.value)*(x11269.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11267.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11266))))))+IKsqr(((x11268.value)*(x11269.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11267.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11266))))), ((x11268.value)*(x11269.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11270=IKcos(j4);
IkReal x11271=IKsin(j4);
IkReal x11272=(cj1*cj2);
IkReal x11273=(r21*sj5);
IkReal x11274=(cj5*sj3);
IkReal x11275=((1.0)*sj2);
IkReal x11276=(cj3*sj5);
IkReal x11277=(cj2*sj1);
IkReal x11278=(cj3*cj5);
IkReal x11279=(sj3*sj5);
IkReal x11280=(sj1*x11275);
IkReal x11281=((1.0)*x11271);
IkReal x11282=(r02*x11270);
IkReal x11283=((1.0)*cj5*x11270);
evalcond[0]=(r02*x11271);
evalcond[1]=((((-1.0)*r20*x11283))+((x11270*x11273)));
evalcond[2]=((((-1.0)*sj3*x11282))+x11277+((cj1*sj2)));
evalcond[3]=(x11272+(((-1.0)*x11280))+((cj3*x11282)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11283))+((r11*sj5*x11270)));
evalcond[5]=(((r10*x11276))+((r11*x11271*x11279))+(((-1.0)*r10*x11274*x11281))+((r11*x11278)));
evalcond[6]=(((r10*x11279))+((r10*x11271*x11278))+(((-1.0)*r11*x11276*x11281))+((r11*x11274)));
evalcond[7]=((((-1.0)*r20*x11274*x11281))+x11272+((sj3*x11271*x11273))+((r21*x11278))+(((-1.0)*x11280))+((r20*x11276)));
evalcond[8]=(((r20*x11271*x11278))+(((-1.0)*cj3*x11273*x11281))+(((-1.0)*x11277))+((r21*x11274))+((r20*x11279))+(((-1.0)*cj1*x11275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11284=((1.0)*sj5);
IkReal x11285=(cj5*r10);
CheckValue<IkReal> x11286=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x11284))+((cj3*x11285))),-1);
if(!x11286.valid){
continue;
}
CheckValue<IkReal> x11287=IKPowWithIntegerCheck(((((-1.0)*x11285))+((r11*sj5))),-1);
if(!x11287.valid){
continue;
}
if( IKabs(((x11286.value)*(((((-1.0)*r10*sj3*x11284))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11287.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11286.value)*(((((-1.0)*r10*sj3*x11284))+(((-1.0)*cj5*r11*sj3))))))+IKsqr(((-1.0)*(x11287.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11286.value)*(((((-1.0)*r10*sj3*x11284))+(((-1.0)*cj5*r11*sj3))))), ((-1.0)*(x11287.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11288=IKcos(j4);
IkReal x11289=IKsin(j4);
IkReal x11290=(cj1*cj2);
IkReal x11291=(r21*sj5);
IkReal x11292=(cj5*sj3);
IkReal x11293=((1.0)*sj2);
IkReal x11294=(cj3*sj5);
IkReal x11295=(cj2*sj1);
IkReal x11296=(cj3*cj5);
IkReal x11297=(sj3*sj5);
IkReal x11298=(sj1*x11293);
IkReal x11299=((1.0)*x11289);
IkReal x11300=(r02*x11288);
IkReal x11301=((1.0)*cj5*x11288);
evalcond[0]=(r02*x11289);
evalcond[1]=(((x11288*x11291))+(((-1.0)*r20*x11301)));
evalcond[2]=(x11295+((cj1*sj2))+(((-1.0)*sj3*x11300)));
evalcond[3]=(x11290+(((-1.0)*x11298))+((cj3*x11300)));
evalcond[4]=((1.0)+(((-1.0)*r10*x11301))+((r11*sj5*x11288)));
evalcond[5]=(((r10*x11294))+(((-1.0)*r10*x11292*x11299))+((r11*x11296))+((r11*x11289*x11297)));
evalcond[6]=(((r10*x11297))+((r10*x11289*x11296))+((r11*x11292))+(((-1.0)*r11*x11294*x11299)));
evalcond[7]=(((sj3*x11289*x11291))+x11290+((r21*x11296))+(((-1.0)*x11298))+((r20*x11294))+(((-1.0)*r20*x11292*x11299)));
evalcond[8]=(((r20*x11289*x11296))+(((-1.0)*cj3*x11291*x11299))+(((-1.0)*cj1*x11293))+(((-1.0)*x11295))+((r21*x11292))+((r20*x11297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11302=((1.0)*cj5);
IkReal x11303=(r11*sj5);
CheckValue<IkReal> x11304=IKPowWithIntegerCheck((((sj3*x11303))+(((-1.0)*r10*sj3*x11302))),-1);
if(!x11304.valid){
continue;
}
CheckValue<IkReal> x11305=IKPowWithIntegerCheck((x11303+(((-1.0)*r10*x11302))),-1);
if(!x11305.valid){
continue;
}
if( IKabs(((x11304.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11302)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11305.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11304.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11302))))))+IKsqr(((-1.0)*(x11305.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11304.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11302))))), ((-1.0)*(x11305.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11306=IKcos(j4);
IkReal x11307=IKsin(j4);
IkReal x11308=(cj1*cj2);
IkReal x11309=(r21*sj5);
IkReal x11310=(cj5*sj3);
IkReal x11311=((1.0)*sj2);
IkReal x11312=(cj3*sj5);
IkReal x11313=(cj2*sj1);
IkReal x11314=(cj3*cj5);
IkReal x11315=(sj3*sj5);
IkReal x11316=(sj1*x11311);
IkReal x11317=((1.0)*x11307);
IkReal x11318=(r02*x11306);
IkReal x11319=((1.0)*cj5*x11306);
evalcond[0]=(r02*x11307);
evalcond[1]=(((x11306*x11309))+(((-1.0)*r20*x11319)));
evalcond[2]=((((-1.0)*sj3*x11318))+((cj1*sj2))+x11313);
evalcond[3]=(x11308+((cj3*x11318))+(((-1.0)*x11316)));
evalcond[4]=((1.0)+((r11*sj5*x11306))+(((-1.0)*r10*x11319)));
evalcond[5]=(((r11*x11314))+((r11*x11307*x11315))+((r10*x11312))+(((-1.0)*r10*x11310*x11317)));
evalcond[6]=(((r11*x11310))+((r10*x11315))+(((-1.0)*r11*x11312*x11317))+((r10*x11307*x11314)));
evalcond[7]=((((-1.0)*r20*x11310*x11317))+((r21*x11314))+x11308+((sj3*x11307*x11309))+((r20*x11312))+(((-1.0)*x11316)));
evalcond[8]=(((r21*x11310))+((r20*x11307*x11314))+(((-1.0)*cj3*x11309*x11317))+(((-1.0)*cj1*x11311))+((r20*x11315))+(((-1.0)*x11313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11320=cj5*cj5;
IkReal x11321=((1.0)*cj5);
IkReal x11322=(r11*sj3);
IkReal x11323=(cj3*sj5);
IkReal x11324=(r10*r21);
IkReal x11325=(cj3*r11*r21);
IkReal x11326=((1.0)*x11320);
IkReal x11327=(r10*sj3*sj5);
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11322*x11326))+((sj3*x11324))+(((-1.0)*sj3*x11324*x11326))+(((-1.0)*r20*x11321*x11327))+((cj5*r21*sj5*x11322)))),IkReal(((((-1.0)*r22*x11321*x11322))+(((-1.0)*r22*x11327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
CheckValue<IkReal> x11329=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11321*x11323*x11324))+(((-1.0)*x11325*x11326))+x11325+(((-1.0)*r11*r20*x11321*x11323))+((cj3*r10*r20*x11320)))),-1);
if(!x11329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11328.value)+(((1.5707963267949)*(x11329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11330=IKcos(j4);
IkReal x11331=IKsin(j4);
IkReal x11332=(cj1*cj2);
IkReal x11333=((1.0)*cj5);
IkReal x11334=(cj5*r01);
IkReal x11335=((1.0)*sj1);
IkReal x11336=(cj3*sj5);
IkReal x11337=(cj3*cj5);
IkReal x11338=(cj5*sj3);
IkReal x11339=(sj3*sj5);
IkReal x11340=(cj1*sj2);
IkReal x11341=(sj2*x11335);
IkReal x11342=(sj5*x11330);
IkReal x11343=(sj3*x11331);
IkReal x11344=((1.0)*x11331);
IkReal x11345=(cj3*x11330);
IkReal x11346=((1.0)*sj3*x11330);
evalcond[0]=((((-1.0)*r20*x11330*x11333))+((r22*x11331))+((r21*x11342)));
evalcond[1]=((((-1.0)*r00*x11330*x11333))+((r01*x11342))+((r02*x11331)));
evalcond[2]=((1.0)+((r11*x11342))+((r12*x11331))+(((-1.0)*r10*x11330*x11333)));
evalcond[3]=(((r11*x11338))+((r12*x11345))+(((-1.0)*r11*x11336*x11344))+((r10*x11339))+((r10*x11331*x11337)));
evalcond[4]=(((r11*x11337))+((r10*x11336))+((r11*x11331*x11339))+(((-1.0)*r10*x11333*x11343))+(((-1.0)*r12*x11346)));
evalcond[5]=(((cj2*sj1))+x11340+((r01*x11331*x11339))+(((-1.0)*r00*x11333*x11343))+((cj3*x11334))+((r00*x11336))+(((-1.0)*r02*x11346)));
evalcond[6]=(((sj3*x11334))+x11332+((r00*x11331*x11337))+(((-1.0)*x11341))+(((-1.0)*r01*x11336*x11344))+((r00*x11339))+((r02*x11345)));
evalcond[7]=(((r21*x11331*x11339))+x11332+((r20*x11336))+(((-1.0)*r20*x11333*x11343))+(((-1.0)*r22*x11346))+(((-1.0)*x11341))+((r21*x11337)));
evalcond[8]=((((-1.0)*cj2*x11335))+(((-1.0)*r21*x11336*x11344))+((r20*x11331*x11337))+((r20*x11339))+(((-1.0)*x11340))+((r22*x11345))+((r21*x11338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11347=((1.0)*cj5);
CheckValue<IkReal> x11348 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x11347)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11348.valid){
continue;
}
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11347))+(((-1.0)*r20*sj5)))),-1);
if(!x11349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11348.value)+(((1.5707963267949)*(x11349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11350=IKcos(j4);
IkReal x11351=IKsin(j4);
IkReal x11352=(cj1*cj2);
IkReal x11353=((1.0)*cj5);
IkReal x11354=(cj5*r01);
IkReal x11355=((1.0)*sj1);
IkReal x11356=(cj3*sj5);
IkReal x11357=(cj3*cj5);
IkReal x11358=(cj5*sj3);
IkReal x11359=(sj3*sj5);
IkReal x11360=(cj1*sj2);
IkReal x11361=(sj2*x11355);
IkReal x11362=(sj5*x11350);
IkReal x11363=(sj3*x11351);
IkReal x11364=((1.0)*x11351);
IkReal x11365=(cj3*x11350);
IkReal x11366=((1.0)*sj3*x11350);
evalcond[0]=(((r21*x11362))+(((-1.0)*r20*x11350*x11353))+((r22*x11351)));
evalcond[1]=(((r01*x11362))+((r02*x11351))+(((-1.0)*r00*x11350*x11353)));
evalcond[2]=((1.0)+((r12*x11351))+(((-1.0)*r10*x11350*x11353))+((r11*x11362)));
evalcond[3]=(((r10*x11359))+((r11*x11358))+((r10*x11351*x11357))+((r12*x11365))+(((-1.0)*r11*x11356*x11364)));
evalcond[4]=(((r10*x11356))+((r11*x11357))+((r11*x11351*x11359))+(((-1.0)*r12*x11366))+(((-1.0)*r10*x11353*x11363)));
evalcond[5]=(((r01*x11351*x11359))+((cj2*sj1))+(((-1.0)*r02*x11366))+x11360+((r00*x11356))+((cj3*x11354))+(((-1.0)*r00*x11353*x11363)));
evalcond[6]=((((-1.0)*x11361))+((r00*x11351*x11357))+x11352+(((-1.0)*r01*x11356*x11364))+((sj3*x11354))+((r02*x11365))+((r00*x11359)));
evalcond[7]=((((-1.0)*x11361))+(((-1.0)*r22*x11366))+x11352+(((-1.0)*r20*x11353*x11363))+((r20*x11356))+((r21*x11357))+((r21*x11351*x11359)));
evalcond[8]=((((-1.0)*r21*x11356*x11364))+(((-1.0)*x11360))+(((-1.0)*cj2*x11355))+((r20*x11351*x11357))+((r22*x11365))+((r20*x11359))+((r21*x11358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11367=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x11367.valid){
continue;
}
CheckValue<IkReal> x11368 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11367.value)))+(x11368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11369=IKcos(j4);
IkReal x11370=IKsin(j4);
IkReal x11371=(cj1*cj2);
IkReal x11372=((1.0)*cj5);
IkReal x11373=(cj5*r01);
IkReal x11374=((1.0)*sj1);
IkReal x11375=(cj3*sj5);
IkReal x11376=(cj3*cj5);
IkReal x11377=(cj5*sj3);
IkReal x11378=(sj3*sj5);
IkReal x11379=(cj1*sj2);
IkReal x11380=(sj2*x11374);
IkReal x11381=(sj5*x11369);
IkReal x11382=(sj3*x11370);
IkReal x11383=((1.0)*x11370);
IkReal x11384=(cj3*x11369);
IkReal x11385=((1.0)*sj3*x11369);
evalcond[0]=(((r22*x11370))+(((-1.0)*r20*x11369*x11372))+((r21*x11381)));
evalcond[1]=(((r01*x11381))+(((-1.0)*r00*x11369*x11372))+((r02*x11370)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11369*x11372))+((r11*x11381))+((r12*x11370)));
evalcond[3]=(((r12*x11384))+(((-1.0)*r11*x11375*x11383))+((r10*x11370*x11376))+((r10*x11378))+((r11*x11377)));
evalcond[4]=(((r11*x11370*x11378))+((r10*x11375))+(((-1.0)*r12*x11385))+((r11*x11376))+(((-1.0)*r10*x11372*x11382)));
evalcond[5]=(((r00*x11375))+((cj2*sj1))+((cj3*x11373))+x11379+(((-1.0)*r02*x11385))+(((-1.0)*r00*x11372*x11382))+((r01*x11370*x11378)));
evalcond[6]=(((r02*x11384))+((r00*x11378))+((r00*x11370*x11376))+x11371+(((-1.0)*x11380))+(((-1.0)*r01*x11375*x11383))+((sj3*x11373)));
evalcond[7]=(((r20*x11375))+((r21*x11376))+x11371+(((-1.0)*x11380))+((r21*x11370*x11378))+(((-1.0)*r22*x11385))+(((-1.0)*r20*x11372*x11382)));
evalcond[8]=(((r20*x11378))+((r20*x11370*x11376))+(((-1.0)*x11379))+((r21*x11377))+(((-1.0)*cj2*x11374))+(((-1.0)*r21*x11375*x11383))+((r22*x11384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11386=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11386;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11387=((1.0)*cj5);
IkReal x11388=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11387)));
j4eval[0]=x11388;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x11387)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11389=cj5*cj5;
IkReal x11390=(cj3*r11*r21);
IkReal x11391=((1.0)*cj3*cj5*sj5);
IkReal x11392=(((cj3*r12*r22))+(((-1.0)*x11389*x11390))+x11390+(((-1.0)*r11*r20*x11391))+(((-1.0)*r10*r21*x11391))+((cj3*r10*r20*x11389)));
j4eval[0]=x11392;
j4eval[1]=IKsign(x11392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11393=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11393;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11394=((1.0)*cj5);
IkReal x11395=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11394)));
j4eval[0]=x11395;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x11394)))))+(IKabs(r22)));
j4eval[2]=IKsign(x11395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x11396=cj5*cj5;
IkReal x11397=r11*r11;
IkReal x11398=(r11*sj5);
IkReal x11399=(cj5*r10);
IkReal x11400=((r12*r12)+(((-1.0)*x11396*x11397))+x11397+(((-2.0)*x11398*x11399))+((x11396*(r10*r10))));
j4eval[0]=x11400;
j4eval[1]=((IKabs(r12))+(IKabs((x11398+(((-1.0)*x11399))))));
j4eval[2]=IKsign(x11400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11401=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11401);
rxp1_1=(px*r21);
rxp1_2=(r11*x11401);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11402=((1.0)*cj5);
j4eval[0]=(((r21*sj5))+(((-1.0)*r20*x11402)));
j4eval[1]=(((r11*sj5))+(((-1.0)*r10*x11402)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11403=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11403);
rxp1_1=(px*r21);
rxp1_2=(r11*x11403);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11404=((1.0)*cj2);
CheckValue<IkReal> x11405=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x11405.valid){
continue;
}
CheckValue<IkReal> x11406=IKPowWithIntegerCheck(r02,-1);
if(!x11406.valid){
continue;
}
if( IKabs(((x11405.value)*(((((-1.0)*cj1*x11404))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11406.value)*(((((-1.0)*sj1*x11404))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11405.value)*(((((-1.0)*cj1*x11404))+((sj1*sj2))))))+IKsqr(((x11406.value)*(((((-1.0)*sj1*x11404))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11405.value)*(((((-1.0)*cj1*x11404))+((sj1*sj2))))), ((x11406.value)*(((((-1.0)*sj1*x11404))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11407=IKcos(j4);
IkReal x11408=IKsin(j4);
IkReal x11409=((1.0)*sj1);
IkReal x11410=(r21*sj5);
IkReal x11411=(cj5*r10);
IkReal x11412=(r11*sj5);
IkReal x11413=((1.0)*cj5*r20);
IkReal x11414=((1.0)*x11407);
evalcond[0]=(r02*x11408);
evalcond[1]=((((-1.0)*x11407*x11413))+((x11407*x11410)));
evalcond[2]=(((x11408*x11412))+(((-1.0)*x11408*x11411)));
evalcond[3]=((-1.0)+((x11407*x11412))+(((-1.0)*x11411*x11414)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11409))+(((-1.0)*r02*x11414)));
evalcond[5]=((((-1.0)*x11408*x11413))+(((-1.0)*sj2*x11409))+((x11408*x11410))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11415=((1.0)*cj5);
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(((((-1.0)*r20*x11415))+((r21*sj5))),-1);
if(!x11416.valid){
continue;
}
CheckValue<IkReal> x11417=IKPowWithIntegerCheck(((((-1.0)*r10*x11415))+((r11*sj5))),-1);
if(!x11417.valid){
continue;
}
if( IKabs(((x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11417.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11417.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11416.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11417.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11418=IKcos(j4);
IkReal x11419=IKsin(j4);
IkReal x11420=((1.0)*sj1);
IkReal x11421=(r21*sj5);
IkReal x11422=(cj5*r10);
IkReal x11423=(r11*sj5);
IkReal x11424=((1.0)*cj5*r20);
IkReal x11425=((1.0)*x11418);
evalcond[0]=(r02*x11419);
evalcond[1]=(((x11418*x11421))+(((-1.0)*x11418*x11424)));
evalcond[2]=((((-1.0)*x11419*x11422))+((x11419*x11423)));
evalcond[3]=((-1.0)+((x11418*x11423))+(((-1.0)*x11422*x11425)));
evalcond[4]=((((-1.0)*r02*x11425))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11420)));
evalcond[5]=((((-1.0)*x11419*x11424))+((cj1*cj2))+((x11419*x11421))+(((-1.0)*sj2*x11420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11426=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11426);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11426);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11427=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x11427)));
j4eval[1]=((((-1.0)*r10*x11427))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11428=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11428);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11428);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r01*sj5))+(((-1.0)*cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11429=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x11429.valid){
continue;
}
CheckValue<IkReal> x11430=IKPowWithIntegerCheck(r22,-1);
if(!x11430.valid){
continue;
}
if( IKabs(((x11429.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11430.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11429.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11430.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11429.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11430.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11431=IKcos(j4);
IkReal x11432=IKsin(j4);
IkReal x11433=(cj5*r00);
IkReal x11434=((1.0)*sj1);
IkReal x11435=(cj5*r10);
IkReal x11436=((1.0)*x11431);
IkReal x11437=((1.0)*x11432);
IkReal x11438=(sj5*x11431);
IkReal x11439=(sj5*x11432);
evalcond[0]=(r22*x11432);
evalcond[1]=((((-1.0)*x11433*x11436))+((r01*x11438)));
evalcond[2]=(((cj1*cj2))+(((-1.0)*r22*x11436))+(((-1.0)*sj2*x11434)));
evalcond[3]=((((-1.0)*x11435*x11437))+((r11*x11439)));
evalcond[4]=((-1.0)+(((-1.0)*x11435*x11436))+((r11*x11438)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11434))+(((-1.0)*x11433*x11437))+((r01*x11439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11440=((1.0)*cj5);
CheckValue<IkReal> x11441=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x11440))),-1);
if(!x11441.valid){
continue;
}
CheckValue<IkReal> x11442=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x11440))),-1);
if(!x11442.valid){
continue;
}
if( IKabs(((x11441.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11442.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11441.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11442.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11441.value)*((((cj2*sj1))+((cj1*sj2))))), x11442.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11443=IKcos(j4);
IkReal x11444=IKsin(j4);
IkReal x11445=(cj5*r00);
IkReal x11446=((1.0)*sj1);
IkReal x11447=(cj5*r10);
IkReal x11448=((1.0)*x11443);
IkReal x11449=((1.0)*x11444);
IkReal x11450=(sj5*x11443);
IkReal x11451=(sj5*x11444);
evalcond[0]=(r22*x11444);
evalcond[1]=((((-1.0)*x11445*x11448))+((r01*x11450)));
evalcond[2]=((((-1.0)*sj2*x11446))+(((-1.0)*r22*x11448))+((cj1*cj2)));
evalcond[3]=((((-1.0)*x11447*x11449))+((r11*x11451)));
evalcond[4]=((-1.0)+(((-1.0)*x11447*x11448))+((r11*x11450)));
evalcond[5]=((((-1.0)*x11445*x11449))+(((-1.0)*cj2*x11446))+(((-1.0)*cj1*sj2))+((r01*x11451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11452=cj5*cj5;
IkReal x11453=r11*r11;
IkReal x11454=(cj5*r10);
IkReal x11455=(r11*sj5);
CheckValue<IkReal> x11456 = IKatan2WithCheck(IkReal(r12),IkReal((x11455+(((-1.0)*x11454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11456.valid){
continue;
}
CheckValue<IkReal> x11457=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11453+((x11452*(r10*r10)))+(((-1.0)*x11452*x11453))+(((-2.0)*x11454*x11455)))),-1);
if(!x11457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11456.value)+(((1.5707963267949)*(x11457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11458=IKcos(j4);
IkReal x11459=IKsin(j4);
IkReal x11460=(cj5*r00);
IkReal x11461=(cj5*r10);
IkReal x11462=((1.0)*sj1);
IkReal x11463=(cj5*r20);
IkReal x11464=((1.0)*x11458);
IkReal x11465=((1.0)*x11459);
IkReal x11466=(sj5*x11458);
IkReal x11467=(sj5*x11459);
evalcond[0]=((((-1.0)*x11463*x11464))+((r22*x11459))+((r21*x11466)));
evalcond[1]=(((r01*x11466))+((r02*x11459))+(((-1.0)*x11460*x11464)));
evalcond[2]=((-1.0)+((r11*x11466))+(((-1.0)*x11461*x11464))+((r12*x11459)));
evalcond[3]=((((-1.0)*r12*x11464))+((r11*x11467))+(((-1.0)*x11461*x11465)));
evalcond[4]=((((-1.0)*x11463*x11465))+(((-1.0)*sj2*x11462))+(((-1.0)*r22*x11464))+((cj1*cj2))+((r21*x11467)));
evalcond[5]=(((r01*x11467))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x11462))+(((-1.0)*x11460*x11465))+(((-1.0)*r02*x11464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11468=((1.0)*cj5);
CheckValue<IkReal> x11469 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11468))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11469.valid){
continue;
}
CheckValue<IkReal> x11470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11468)))),-1);
if(!x11470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11469.value)+(((1.5707963267949)*(x11470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11471=IKcos(j4);
IkReal x11472=IKsin(j4);
IkReal x11473=(cj5*r00);
IkReal x11474=(cj5*r10);
IkReal x11475=((1.0)*sj1);
IkReal x11476=(cj5*r20);
IkReal x11477=((1.0)*x11471);
IkReal x11478=((1.0)*x11472);
IkReal x11479=(sj5*x11471);
IkReal x11480=(sj5*x11472);
evalcond[0]=((((-1.0)*x11476*x11477))+((r22*x11472))+((r21*x11479)));
evalcond[1]=((((-1.0)*x11473*x11477))+((r02*x11472))+((r01*x11479)));
evalcond[2]=((-1.0)+((r12*x11472))+(((-1.0)*x11474*x11477))+((r11*x11479)));
evalcond[3]=((((-1.0)*r12*x11477))+(((-1.0)*x11474*x11478))+((r11*x11480)));
evalcond[4]=((((-1.0)*x11476*x11478))+(((-1.0)*sj2*x11475))+(((-1.0)*r22*x11477))+((cj1*cj2))+((r21*x11480)));
evalcond[5]=((((-1.0)*cj2*x11475))+(((-1.0)*cj1*sj2))+((r01*x11480))+(((-1.0)*x11473*x11478))+(((-1.0)*r02*x11477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11481=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11481.valid){
continue;
}
CheckValue<IkReal> x11482 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11481.value)))+(x11482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11483=IKcos(j4);
IkReal x11484=IKsin(j4);
IkReal x11485=(cj5*r00);
IkReal x11486=(cj5*r10);
IkReal x11487=((1.0)*sj1);
IkReal x11488=(cj5*r20);
IkReal x11489=((1.0)*x11483);
IkReal x11490=((1.0)*x11484);
IkReal x11491=(sj5*x11483);
IkReal x11492=(sj5*x11484);
evalcond[0]=(((r21*x11491))+((r22*x11484))+(((-1.0)*x11488*x11489)));
evalcond[1]=((((-1.0)*x11485*x11489))+((r02*x11484))+((r01*x11491)));
evalcond[2]=((-1.0)+((r11*x11491))+((r12*x11484))+(((-1.0)*x11486*x11489)));
evalcond[3]=((((-1.0)*r12*x11489))+((r11*x11492))+(((-1.0)*x11486*x11490)));
evalcond[4]=(((r21*x11492))+(((-1.0)*sj2*x11487))+(((-1.0)*r22*x11489))+(((-1.0)*x11488*x11490))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r02*x11489))+(((-1.0)*cj1*sj2))+(((-1.0)*x11485*x11490))+(((-1.0)*cj2*x11487))+((r01*x11492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11493=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x11493;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x11493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11494=((1.0)*cj5);
IkReal x11495=((((-1.0)*r00*sj5))+(((-1.0)*r01*x11494)));
j4eval[0]=x11495;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x11494))+((r21*sj5))))));
j4eval[2]=IKsign(x11495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11496=cj5*cj5;
IkReal x11497=r11*r11;
IkReal x11498=(r11*sj5);
IkReal x11499=(cj5*r10);
IkReal x11500=((r12*r12)+x11497+((x11496*(r10*r10)))+(((-2.0)*x11498*x11499))+(((-1.0)*x11496*x11497)));
j4eval[0]=x11500;
j4eval[1]=((IKabs(r12))+(IKabs((x11498+(((-1.0)*x11499))))));
j4eval[2]=IKsign(x11500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11501=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11501);
rxp1_1=(px*r21);
rxp1_2=(r11*x11501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11502=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11502);
rxp1_1=(px*r21);
rxp1_2=(r11*x11502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11503=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11503.valid){
continue;
}
CheckValue<IkReal> x11504=IKPowWithIntegerCheck(r02,-1);
if(!x11504.valid){
continue;
}
if( IKabs(((x11503.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11504.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11503.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11504.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11503.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11504.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11505=IKcos(j4);
IkReal x11506=IKsin(j4);
IkReal x11507=((1.0)*sj1);
IkReal x11508=(sj5*x11505);
IkReal x11509=(cj5*x11506);
IkReal x11510=((1.0)*sj5*x11506);
IkReal x11511=((1.0)*cj5*x11505);
evalcond[0]=(r02*x11506);
evalcond[1]=(((r21*x11508))+(((-1.0)*r20*x11511)));
evalcond[2]=((((-1.0)*cj2*x11507))+(((-1.0)*cj1*sj2))+((r02*x11505)));
evalcond[3]=(((r10*x11509))+(((-1.0)*r11*x11510)));
evalcond[4]=((-1.0)+((r11*x11508))+(((-1.0)*r10*x11511)));
evalcond[5]=((((-1.0)*r21*x11510))+((r20*x11509))+((cj1*cj2))+(((-1.0)*sj2*x11507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11512=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x11512.valid){
continue;
}
CheckValue<IkReal> x11513=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11513.valid){
continue;
}
if( IKabs(((x11512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11513.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(x11513.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11512.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), x11513.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11514=IKcos(j4);
IkReal x11515=IKsin(j4);
IkReal x11516=((1.0)*sj1);
IkReal x11517=(sj5*x11514);
IkReal x11518=(cj5*x11515);
IkReal x11519=((1.0)*sj5*x11515);
IkReal x11520=((1.0)*cj5*x11514);
evalcond[0]=(r02*x11515);
evalcond[1]=((((-1.0)*r20*x11520))+((r21*x11517)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x11514))+(((-1.0)*cj2*x11516)));
evalcond[3]=((((-1.0)*r11*x11519))+((r10*x11518)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x11520))+((r11*x11517)));
evalcond[5]=(((r20*x11518))+(((-1.0)*sj2*x11516))+(((-1.0)*r21*x11519))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11521=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11521);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11521);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11522=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11522);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11522);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*r01*sj5))+((cj5*r00)));
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11523=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11523.valid){
continue;
}
CheckValue<IkReal> x11524=IKPowWithIntegerCheck(r22,-1);
if(!x11524.valid){
continue;
}
if( IKabs(((x11523.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11524.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11523.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x11524.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11523.value)*((((cj2*sj1))+((cj1*sj2))))), ((x11524.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11525=IKcos(j4);
IkReal x11526=IKsin(j4);
IkReal x11527=(cj5*r00);
IkReal x11528=(cj5*r10);
IkReal x11529=((1.0)*sj2);
IkReal x11530=((1.0)*x11525);
IkReal x11531=(sj5*x11525);
IkReal x11532=((1.0)*sj5*x11526);
evalcond[0]=(r22*x11526);
evalcond[1]=(((cj1*cj2))+(((-1.0)*sj1*x11529))+((r22*x11525)));
evalcond[2]=((((-1.0)*x11527*x11530))+((r01*x11531)));
evalcond[3]=((((-1.0)*r11*x11532))+((x11526*x11528)));
evalcond[4]=((-1.0)+((r11*x11531))+(((-1.0)*x11528*x11530)));
evalcond[5]=((((-1.0)*cj1*x11529))+(((-1.0)*cj2*sj1))+((x11526*x11527))+(((-1.0)*r01*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11533=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x11533.valid){
continue;
}
CheckValue<IkReal> x11534=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x11534.valid){
continue;
}
if( IKabs(((x11533.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x11534.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11533.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(x11534.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11533.value)*((((cj2*sj1))+((cj1*sj2))))), x11534.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11535=IKcos(j4);
IkReal x11536=IKsin(j4);
IkReal x11537=(cj5*r00);
IkReal x11538=(cj5*r10);
IkReal x11539=((1.0)*sj2);
IkReal x11540=((1.0)*x11535);
IkReal x11541=(sj5*x11535);
IkReal x11542=((1.0)*sj5*x11536);
evalcond[0]=(r22*x11536);
evalcond[1]=(((r22*x11535))+((cj1*cj2))+(((-1.0)*sj1*x11539)));
evalcond[2]=(((r01*x11541))+(((-1.0)*x11537*x11540)));
evalcond[3]=(((x11536*x11538))+(((-1.0)*r11*x11542)));
evalcond[4]=((-1.0)+((r11*x11541))+(((-1.0)*x11538*x11540)));
evalcond[5]=((((-1.0)*cj1*x11539))+(((-1.0)*r01*x11542))+(((-1.0)*cj2*sj1))+((x11536*x11537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11543=cj5*cj5;
IkReal x11544=r11*r11;
IkReal x11545=(cj5*r10);
IkReal x11546=(r11*sj5);
CheckValue<IkReal> x11547 = IKatan2WithCheck(IkReal(r12),IkReal((x11546+(((-1.0)*x11545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11547.valid){
continue;
}
CheckValue<IkReal> x11548=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11544+((x11543*(r10*r10)))+(((-1.0)*x11543*x11544))+(((-2.0)*x11545*x11546)))),-1);
if(!x11548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11547.value)+(((1.5707963267949)*(x11548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11549=IKcos(j4);
IkReal x11550=IKsin(j4);
IkReal x11551=(cj5*r00);
IkReal x11552=((1.0)*sj2);
IkReal x11553=((1.0)*x11549);
IkReal x11554=(sj5*x11549);
IkReal x11555=(cj5*x11550);
IkReal x11556=((1.0)*sj5*x11550);
evalcond[0]=(((r21*x11554))+((r22*x11550))+(((-1.0)*cj5*r20*x11553)));
evalcond[1]=(((r02*x11550))+(((-1.0)*x11551*x11553))+((r01*x11554)));
evalcond[2]=((((-1.0)*r11*x11556))+((r12*x11549))+((r10*x11555)));
evalcond[3]=((-1.0)+((r12*x11550))+(((-1.0)*cj5*r10*x11553))+((r11*x11554)));
evalcond[4]=((((-1.0)*sj1*x11552))+(((-1.0)*r21*x11556))+((r22*x11549))+((cj1*cj2))+((r20*x11555)));
evalcond[5]=((((-1.0)*cj1*x11552))+((x11550*x11551))+(((-1.0)*cj2*sj1))+((r02*x11549))+(((-1.0)*r01*x11556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11557=((1.0)*cj5);
CheckValue<IkReal> x11558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x11557)))),-1);
if(!x11558.valid){
continue;
}
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11557))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11558.value)))+(x11559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11560=IKcos(j4);
IkReal x11561=IKsin(j4);
IkReal x11562=(cj5*r00);
IkReal x11563=((1.0)*sj2);
IkReal x11564=((1.0)*x11560);
IkReal x11565=(sj5*x11560);
IkReal x11566=(cj5*x11561);
IkReal x11567=((1.0)*sj5*x11561);
evalcond[0]=((((-1.0)*cj5*r20*x11564))+((r22*x11561))+((r21*x11565)));
evalcond[1]=(((r01*x11565))+(((-1.0)*x11562*x11564))+((r02*x11561)));
evalcond[2]=(((r10*x11566))+(((-1.0)*r11*x11567))+((r12*x11560)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*r10*x11564))+((r11*x11565))+((r12*x11561)));
evalcond[4]=(((r20*x11566))+(((-1.0)*sj1*x11563))+((r22*x11560))+(((-1.0)*r21*x11567))+((cj1*cj2)));
evalcond[5]=(((x11561*x11562))+(((-1.0)*cj2*sj1))+(((-1.0)*r01*x11567))+((r02*x11560))+(((-1.0)*cj1*x11563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11568=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x11568.valid){
continue;
}
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11568.value)))+(x11569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11570=IKcos(j4);
IkReal x11571=IKsin(j4);
IkReal x11572=(cj5*r00);
IkReal x11573=((1.0)*sj2);
IkReal x11574=((1.0)*x11570);
IkReal x11575=(sj5*x11570);
IkReal x11576=(cj5*x11571);
IkReal x11577=((1.0)*sj5*x11571);
evalcond[0]=((((-1.0)*cj5*r20*x11574))+((r21*x11575))+((r22*x11571)));
evalcond[1]=(((r01*x11575))+(((-1.0)*x11572*x11574))+((r02*x11571)));
evalcond[2]=(((r10*x11576))+((r12*x11570))+(((-1.0)*r11*x11577)));
evalcond[3]=((-1.0)+((r12*x11571))+(((-1.0)*cj5*r10*x11574))+((r11*x11575)));
evalcond[4]=(((r20*x11576))+(((-1.0)*r21*x11577))+(((-1.0)*sj1*x11573))+((cj1*cj2))+((r22*x11570)));
evalcond[5]=((((-1.0)*r01*x11577))+((x11571*x11572))+(((-1.0)*cj2*sj1))+((r02*x11570))+(((-1.0)*cj1*x11573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11578=((-1.0)*r00);
IkReal x11580 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11580)==0){
continue;
}
IkReal x11579=pow(x11580,-0.5);
CheckValue<IkReal> x11581 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11578),IKFAST_ATAN2_MAGTHRESH);
if(!x11581.valid){
continue;
}
IkReal gconst30=((-1.0)*(x11581.value));
IkReal gconst31=(r01*x11579);
IkReal gconst32=(x11578*x11579);
CheckValue<IkReal> x11582 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11583=((-1.0)*r00);
IkReal x11584=x11579;
CheckValue<IkReal> x11586 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11583),IKFAST_ATAN2_MAGTHRESH);
if(!x11586.valid){
continue;
}
IkReal x11585=((-1.0)*(x11586.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11585;
IkReal gconst30=x11585;
IkReal gconst31=(r01*x11584);
IkReal gconst32=(x11583*x11584);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11587=((-1.0)*r00);
IkReal x11588=x11579;
CheckValue<IkReal> x11590 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x11587),IKFAST_ATAN2_MAGTHRESH);
if(!x11590.valid){
continue;
}
IkReal x11589=((-1.0)*(x11590.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x11589;
IkReal gconst30=x11589;
IkReal gconst31=(r01*x11588);
IkReal gconst32=(x11587*x11588);
CheckValue<IkReal> x11598=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11598.valid){
continue;
}
IkReal x11591=x11598.value;
IkReal x11592=(cj3*x11591);
IkReal x11593=(r21*x11592);
IkReal x11594=(r10*x11592);
IkReal x11595=(r11*x11592);
IkReal x11596=(r20*x11592);
IkReal x11597=(r00*r01*x11592);
j4eval[0]=IKsign((((cj3*r12*r22))+((r00*r01*r20*x11595))+((r11*x11593*(r01*r01)))+((r00*r01*r10*x11593))+((r20*x11594*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11599=gconst31*gconst31;
IkReal x11600=gconst32*gconst32;
IkReal x11601=((1.0)*r22);
IkReal x11602=(cj3*r10);
IkReal x11603=(r11*r20);
IkReal x11604=(gconst31*gconst32);
IkReal x11605=(r10*sj3);
IkReal x11606=(cj3*r11);
IkReal x11607=(r21*x11599);
IkReal x11608=((1.0)*x11600);
CheckValue<IkReal> x11609 = IKatan2WithCheck(IkReal((((x11602*x11607))+(((-1.0)*r20*x11602*x11604))+(((-1.0)*cj3*x11603*x11608))+((r21*x11604*x11606)))),IkReal(((((-1.0)*gconst31*x11601*x11602))+(((-1.0)*gconst32*x11601*x11606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11609.valid){
continue;
}
CheckValue<IkReal> x11610=IKPowWithIntegerCheck(IKsign((((sj3*x11603*x11604))+(((-1.0)*r20*x11605*x11608))+(((-1.0)*r11*sj3*x11607))+(((-1.0)*r12*sj3*x11601))+((r21*x11604*x11605)))),-1);
if(!x11610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11609.value)+(((1.5707963267949)*(x11610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11611=IKcos(j4);
IkReal x11612=IKsin(j4);
IkReal x11613=(gconst32*r21);
IkReal x11614=(cj3*gconst32);
IkReal x11615=(gconst31*sj3);
IkReal x11616=(sj1*sj2);
IkReal x11617=((1.0)*cj2);
IkReal x11618=(cj3*gconst31);
IkReal x11619=((1.0)*sj3);
IkReal x11620=(gconst32*sj3);
IkReal x11621=((1.0)*cj1*sj2);
IkReal x11622=(sj1*x11617);
IkReal x11623=(r00*x11612);
IkReal x11624=(r20*x11612);
IkReal x11625=(gconst31*x11611);
IkReal x11626=(r22*x11611);
IkReal x11627=(r21*x11612);
IkReal x11628=(r01*x11612);
IkReal x11629=(r12*x11611);
IkReal x11630=(r11*x11612);
IkReal x11631=(r10*x11612);
IkReal x11632=(r02*x11611);
IkReal x11633=((1.0)*gconst32*x11611);
IkReal x11634=(x11621+x11622);
evalcond[0]=(((r21*x11625))+((r22*x11612))+(((-1.0)*r20*x11633)));
evalcond[1]=(((r02*x11612))+(((-1.0)*r00*x11633))+((r01*x11625)));
evalcond[2]=((-1.0)+((r12*x11612))+((r11*x11625))+(((-1.0)*r10*x11633)));
evalcond[3]=(((x11614*x11631))+((r11*x11620))+((cj3*x11629))+(((-1.0)*x11618*x11630))+((r10*x11615)));
evalcond[4]=((((-1.0)*x11619*x11629))+((r11*x11614))+(((-1.0)*gconst32*x11619*x11631))+((x11615*x11630))+((r10*x11618)));
evalcond[5]=(x11616+((cj3*x11632))+(((-1.0)*x11618*x11628))+(((-1.0)*cj1*x11617))+((r00*x11615))+((r01*x11620))+((x11614*x11623)));
evalcond[6]=(((x11615*x11627))+(((-1.0)*x11619*x11626))+(((-1.0)*x11616))+((cj3*x11613))+(((-1.0)*gconst32*x11619*x11624))+((cj1*cj2))+((r20*x11618)));
evalcond[7]=((((-1.0)*x11634))+((cj3*x11626))+(((-1.0)*x11618*x11627))+((sj3*x11613))+((r20*x11615))+((x11614*x11624)));
evalcond[8]=(((x11615*x11628))+(((-1.0)*x11634))+(((-1.0)*x11619*x11632))+(((-1.0)*gconst32*x11619*x11623))+((r00*x11618))+((r01*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11635=gconst31*gconst31;
IkReal x11636=gconst32*gconst32;
IkReal x11637=(r21*sj3);
IkReal x11638=(gconst31*gconst32);
IkReal x11639=((1.0)*r10);
IkReal x11640=(cj3*r21);
IkReal x11641=(r22*sj3);
IkReal x11642=((1.0)*r11);
IkReal x11643=(r20*sj3);
IkReal x11644=(cj3*r20);
CheckValue<IkReal> x11645=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x11638*x11642*x11644))+((r10*x11636*x11644))+(((-1.0)*x11638*x11639*x11640))+((r11*x11635*x11640)))),-1);
if(!x11645.valid){
continue;
}
CheckValue<IkReal> x11646 = IKatan2WithCheck(IkReal((((r11*x11637*x11638))+(((-1.0)*x11636*x11642*x11643))+((r10*x11635*x11637))+(((-1.0)*x11638*x11639*x11643)))),IkReal(((((-1.0)*gconst31*x11639*x11641))+(((-1.0)*gconst32*x11641*x11642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11645.value)))+(x11646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11647=IKcos(j4);
IkReal x11648=IKsin(j4);
IkReal x11649=(gconst32*r21);
IkReal x11650=(cj3*gconst32);
IkReal x11651=(gconst31*sj3);
IkReal x11652=(sj1*sj2);
IkReal x11653=((1.0)*cj2);
IkReal x11654=(cj3*gconst31);
IkReal x11655=((1.0)*sj3);
IkReal x11656=(gconst32*sj3);
IkReal x11657=((1.0)*cj1*sj2);
IkReal x11658=(sj1*x11653);
IkReal x11659=(r00*x11648);
IkReal x11660=(r20*x11648);
IkReal x11661=(gconst31*x11647);
IkReal x11662=(r22*x11647);
IkReal x11663=(r21*x11648);
IkReal x11664=(r01*x11648);
IkReal x11665=(r12*x11647);
IkReal x11666=(r11*x11648);
IkReal x11667=(r10*x11648);
IkReal x11668=(r02*x11647);
IkReal x11669=((1.0)*gconst32*x11647);
IkReal x11670=(x11658+x11657);
evalcond[0]=(((r21*x11661))+(((-1.0)*r20*x11669))+((r22*x11648)));
evalcond[1]=((((-1.0)*r00*x11669))+((r02*x11648))+((r01*x11661)));
evalcond[2]=((-1.0)+((r12*x11648))+((r11*x11661))+(((-1.0)*r10*x11669)));
evalcond[3]=(((x11650*x11667))+((r11*x11656))+((r10*x11651))+(((-1.0)*x11654*x11666))+((cj3*x11665)));
evalcond[4]=((((-1.0)*x11655*x11665))+((r11*x11650))+((r10*x11654))+(((-1.0)*gconst32*x11655*x11667))+((x11651*x11666)));
evalcond[5]=(x11652+(((-1.0)*x11654*x11664))+((x11650*x11659))+((cj3*x11668))+(((-1.0)*cj1*x11653))+((r01*x11656))+((r00*x11651)));
evalcond[6]=((((-1.0)*x11655*x11662))+((cj3*x11649))+(((-1.0)*x11652))+((r20*x11654))+(((-1.0)*gconst32*x11655*x11660))+((cj1*cj2))+((x11651*x11663)));
evalcond[7]=(((x11650*x11660))+(((-1.0)*x11654*x11663))+((r20*x11651))+((sj3*x11649))+((cj3*x11662))+(((-1.0)*x11670)));
evalcond[8]=((((-1.0)*x11655*x11668))+(((-1.0)*gconst32*x11655*x11659))+((r01*x11650))+((r00*x11654))+(((-1.0)*x11670))+((x11651*x11664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11671=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x11671.valid){
continue;
}
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11671.value)))+(x11672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11673=IKcos(j4);
IkReal x11674=IKsin(j4);
IkReal x11675=(gconst32*r21);
IkReal x11676=(cj3*gconst32);
IkReal x11677=(gconst31*sj3);
IkReal x11678=(sj1*sj2);
IkReal x11679=((1.0)*cj2);
IkReal x11680=(cj3*gconst31);
IkReal x11681=((1.0)*sj3);
IkReal x11682=(gconst32*sj3);
IkReal x11683=((1.0)*cj1*sj2);
IkReal x11684=(sj1*x11679);
IkReal x11685=(r00*x11674);
IkReal x11686=(r20*x11674);
IkReal x11687=(gconst31*x11673);
IkReal x11688=(r22*x11673);
IkReal x11689=(r21*x11674);
IkReal x11690=(r01*x11674);
IkReal x11691=(r12*x11673);
IkReal x11692=(r11*x11674);
IkReal x11693=(r10*x11674);
IkReal x11694=(r02*x11673);
IkReal x11695=((1.0)*gconst32*x11673);
IkReal x11696=(x11684+x11683);
evalcond[0]=(((r22*x11674))+(((-1.0)*r20*x11695))+((r21*x11687)));
evalcond[1]=(((r02*x11674))+(((-1.0)*r00*x11695))+((r01*x11687)));
evalcond[2]=((-1.0)+((r11*x11687))+((r12*x11674))+(((-1.0)*r10*x11695)));
evalcond[3]=(((r11*x11682))+((x11676*x11693))+((r10*x11677))+(((-1.0)*x11680*x11692))+((cj3*x11691)));
evalcond[4]=((((-1.0)*gconst32*x11681*x11693))+((r10*x11680))+((r11*x11676))+((x11677*x11692))+(((-1.0)*x11681*x11691)));
evalcond[5]=(((x11676*x11685))+x11678+(((-1.0)*cj1*x11679))+((r00*x11677))+(((-1.0)*x11680*x11690))+((r01*x11682))+((cj3*x11694)));
evalcond[6]=(((x11677*x11689))+(((-1.0)*gconst32*x11681*x11686))+(((-1.0)*x11681*x11688))+((cj3*x11675))+((cj1*cj2))+((r20*x11680))+(((-1.0)*x11678)));
evalcond[7]=(((x11676*x11686))+((sj3*x11675))+((r20*x11677))+((cj3*x11688))+(((-1.0)*x11696))+(((-1.0)*x11680*x11689)));
evalcond[8]=(((r00*x11680))+(((-1.0)*gconst32*x11681*x11685))+((x11677*x11690))+((r01*x11676))+(((-1.0)*x11696))+(((-1.0)*x11681*x11694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11697=((-1.0)*r01);
IkReal x11699 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11699)==0){
continue;
}
IkReal x11698=pow(x11699,-0.5);
CheckValue<IkReal> x11700 = IKatan2WithCheck(IkReal(x11697),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11700.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x11700.value))));
IkReal gconst34=(x11697*x11698);
IkReal gconst35=((1.0)*r00*x11698);
CheckValue<IkReal> x11701 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11701.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11701.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11702=((-1.0)*r01);
CheckValue<IkReal> x11705 = IKatan2WithCheck(IkReal(x11702),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11705.valid){
continue;
}
IkReal x11703=((1.0)*(x11705.value));
IkReal x11704=x11698;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11703)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11703)));
IkReal gconst34=(x11702*x11704);
IkReal gconst35=((1.0)*r00*x11704);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11706=((-1.0)*r01);
CheckValue<IkReal> x11709 = IKatan2WithCheck(IkReal(x11706),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x11709.valid){
continue;
}
IkReal x11707=((1.0)*(x11709.value));
IkReal x11708=x11698;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x11707)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x11707)));
IkReal gconst34=(x11706*x11708);
IkReal gconst35=((1.0)*r00*x11708);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11710=gconst35*gconst35;
IkReal x11711=gconst34*gconst34;
IkReal x11712=(r22*sj3);
IkReal x11713=(cj3*r20);
IkReal x11714=(r11*r21);
IkReal x11715=(r10*r21);
IkReal x11716=((1.0)*r10);
IkReal x11717=((1.0)*gconst35*r11);
IkReal x11718=(gconst34*gconst35*sj3);
CheckValue<IkReal> x11719=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*cj3*gconst34*gconst35*x11715))+((r10*x11710*x11713))+((cj3*x11711*x11714))+(((-1.0)*gconst34*x11713*x11717)))),-1);
if(!x11719.valid){
continue;
}
CheckValue<IkReal> x11720 = IKatan2WithCheck(IkReal((((x11714*x11718))+(((-1.0)*r11*r20*sj3*x11710))+(((-1.0)*r20*x11716*x11718))+((sj3*x11711*x11715)))),IkReal(((((-1.0)*x11712*x11717))+(((-1.0)*gconst34*x11712*x11716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11719.value)))+(x11720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11721=IKcos(j4);
IkReal x11722=IKsin(j4);
IkReal x11723=((1.0)*cj1);
IkReal x11724=(gconst35*r10);
IkReal x11725=(cj3*gconst35);
IkReal x11726=(sj1*sj2);
IkReal x11727=(cj3*gconst34);
IkReal x11728=(gconst35*sj3);
IkReal x11729=(gconst34*sj3);
IkReal x11730=(sj2*x11723);
IkReal x11731=((1.0)*cj2*sj1);
IkReal x11732=((1.0)*x11721);
IkReal x11733=(gconst34*x11721);
IkReal x11734=(r20*x11722);
IkReal x11735=(cj3*x11721);
IkReal x11736=((1.0)*x11722);
IkReal x11737=(x11722*x11729);
IkReal x11738=(x11731+x11730);
evalcond[0]=((((-1.0)*gconst35*r20*x11732))+((r21*x11733))+((r22*x11722)));
evalcond[1]=(((r01*x11733))+(((-1.0)*gconst35*r00*x11732))+((r02*x11722)));
evalcond[2]=((-1.0)+((r12*x11722))+((r11*x11733))+(((-1.0)*x11724*x11732)));
evalcond[3]=((((-1.0)*r11*x11727*x11736))+((r10*x11729))+((r12*x11735))+((r11*x11728))+((cj3*x11722*x11724)));
evalcond[4]=((((-1.0)*r12*sj3*x11732))+((r11*x11737))+(((-1.0)*sj3*x11724*x11736))+((r10*x11727))+((r11*x11725)));
evalcond[5]=(x11726+(((-1.0)*cj2*x11723))+((r00*x11729))+((r01*x11728))+(((-1.0)*r01*x11727*x11736))+((r02*x11735))+((r00*x11722*x11725)));
evalcond[6]=(((r20*x11727))+(((-1.0)*x11726))+(((-1.0)*r22*sj3*x11732))+((r21*x11737))+((cj1*cj2))+((r21*x11725))+(((-1.0)*x11728*x11734)));
evalcond[7]=((((-1.0)*x11738))+(((-1.0)*r21*x11727*x11736))+((r20*x11729))+((x11725*x11734))+((r21*x11728))+((r22*x11735)));
evalcond[8]=(((r01*x11737))+(((-1.0)*r02*sj3*x11732))+(((-1.0)*x11738))+((r00*x11727))+((r01*x11725))+(((-1.0)*r00*x11728*x11736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11739=((1.0)*gconst35);
CheckValue<IkReal> x11740 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11739))+((gconst34*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11740.valid){
continue;
}
CheckValue<IkReal> x11741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11739))+(((-1.0)*gconst34*r00)))),-1);
if(!x11741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11740.value)+(((1.5707963267949)*(x11741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11742=IKcos(j4);
IkReal x11743=IKsin(j4);
IkReal x11744=((1.0)*cj1);
IkReal x11745=(gconst35*r10);
IkReal x11746=(cj3*gconst35);
IkReal x11747=(sj1*sj2);
IkReal x11748=(cj3*gconst34);
IkReal x11749=(gconst35*sj3);
IkReal x11750=(gconst34*sj3);
IkReal x11751=(sj2*x11744);
IkReal x11752=((1.0)*cj2*sj1);
IkReal x11753=((1.0)*x11742);
IkReal x11754=(gconst34*x11742);
IkReal x11755=(r20*x11743);
IkReal x11756=(cj3*x11742);
IkReal x11757=((1.0)*x11743);
IkReal x11758=(x11743*x11750);
IkReal x11759=(x11751+x11752);
evalcond[0]=((((-1.0)*gconst35*r20*x11753))+((r21*x11754))+((r22*x11743)));
evalcond[1]=(((r02*x11743))+(((-1.0)*gconst35*r00*x11753))+((r01*x11754)));
evalcond[2]=((-1.0)+(((-1.0)*x11745*x11753))+((r11*x11754))+((r12*x11743)));
evalcond[3]=(((r10*x11750))+(((-1.0)*r11*x11748*x11757))+((r12*x11756))+((cj3*x11743*x11745))+((r11*x11749)));
evalcond[4]=(((r11*x11758))+(((-1.0)*sj3*x11745*x11757))+((r10*x11748))+(((-1.0)*r12*sj3*x11753))+((r11*x11746)));
evalcond[5]=(x11747+((r01*x11749))+((r02*x11756))+(((-1.0)*cj2*x11744))+(((-1.0)*r01*x11748*x11757))+((r00*x11750))+((r00*x11743*x11746)));
evalcond[6]=((((-1.0)*x11747))+((r20*x11748))+(((-1.0)*x11749*x11755))+((r21*x11746))+((cj1*cj2))+((r21*x11758))+(((-1.0)*r22*sj3*x11753)));
evalcond[7]=(((x11746*x11755))+(((-1.0)*x11759))+((r22*x11756))+((r21*x11749))+(((-1.0)*r21*x11748*x11757))+((r20*x11750)));
evalcond[8]=((((-1.0)*r00*x11749*x11757))+((r00*x11748))+((r01*x11746))+(((-1.0)*x11759))+(((-1.0)*r02*sj3*x11753))+((r01*x11758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11760 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r00))+((gconst34*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11760.valid){
continue;
}
CheckValue<IkReal> x11761=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x11761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11760.value)+(((1.5707963267949)*(x11761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11762=IKcos(j4);
IkReal x11763=IKsin(j4);
IkReal x11764=((1.0)*cj1);
IkReal x11765=(gconst35*r10);
IkReal x11766=(cj3*gconst35);
IkReal x11767=(sj1*sj2);
IkReal x11768=(cj3*gconst34);
IkReal x11769=(gconst35*sj3);
IkReal x11770=(gconst34*sj3);
IkReal x11771=(sj2*x11764);
IkReal x11772=((1.0)*cj2*sj1);
IkReal x11773=((1.0)*x11762);
IkReal x11774=(gconst34*x11762);
IkReal x11775=(r20*x11763);
IkReal x11776=(cj3*x11762);
IkReal x11777=((1.0)*x11763);
IkReal x11778=(x11763*x11770);
IkReal x11779=(x11772+x11771);
evalcond[0]=(((r22*x11763))+((r21*x11774))+(((-1.0)*gconst35*r20*x11773)));
evalcond[1]=(((r02*x11763))+((r01*x11774))+(((-1.0)*gconst35*r00*x11773)));
evalcond[2]=((-1.0)+((r12*x11763))+((r11*x11774))+(((-1.0)*x11765*x11773)));
evalcond[3]=((((-1.0)*r11*x11768*x11777))+((r11*x11769))+((r10*x11770))+((r12*x11776))+((cj3*x11763*x11765)));
evalcond[4]=(((r11*x11766))+(((-1.0)*sj3*x11765*x11777))+((r10*x11768))+((r11*x11778))+(((-1.0)*r12*sj3*x11773)));
evalcond[5]=(x11767+(((-1.0)*cj2*x11764))+((r02*x11776))+(((-1.0)*r01*x11768*x11777))+((r00*x11763*x11766))+((r00*x11770))+((r01*x11769)));
evalcond[6]=(((r20*x11768))+(((-1.0)*x11769*x11775))+(((-1.0)*x11767))+(((-1.0)*r22*sj3*x11773))+((r21*x11778))+((cj1*cj2))+((r21*x11766)));
evalcond[7]=(((r20*x11770))+((x11766*x11775))+(((-1.0)*r21*x11768*x11777))+(((-1.0)*x11779))+((r22*x11776))+((r21*x11769)));
evalcond[8]=((((-1.0)*r02*sj3*x11773))+((r01*x11778))+(((-1.0)*x11779))+((r00*x11768))+((r01*x11766))+(((-1.0)*r00*x11769*x11777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11781 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11781)==0){
continue;
}
IkReal x11780=pow(x11781,-0.5);
CheckValue<IkReal> x11782 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11782.valid){
continue;
}
IkReal gconst36=((-1.0)*(x11782.value));
IkReal gconst37=((-1.0)*r21*x11780);
IkReal gconst38=(r20*x11780);
CheckValue<IkReal> x11783 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11786 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11786.valid){
continue;
}
IkReal x11784=((-1.0)*(x11786.value));
IkReal x11785=x11780;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11784;
IkReal gconst36=x11784;
IkReal gconst37=((-1.0)*r21*x11785);
IkReal gconst38=(r20*x11785);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11789.valid){
continue;
}
IkReal x11787=((-1.0)*(x11789.value));
IkReal x11788=x11780;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x11787;
IkReal gconst36=x11787;
IkReal gconst37=((-1.0)*r21*x11788);
IkReal gconst38=(r20*x11788);
CheckValue<IkReal> x11797=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x11797.valid){
continue;
}
IkReal x11790=x11797.value;
IkReal x11791=(cj3*x11790);
IkReal x11792=(r11*x11791);
IkReal x11793=(r01*x11791);
IkReal x11794=(r00*x11791);
IkReal x11795=(r10*x11791);
IkReal x11796=(r20*r21*x11791);
j4eval[0]=IKsign((((cj3*r02*r12))+((r01*x11792*(r21*r21)))+((r10*x11794*(r20*r20)))+((r00*r20*r21*x11792))+((r10*r20*r21*x11793))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11798=gconst37*gconst37;
IkReal x11799=gconst38*gconst38;
IkReal x11800=(r01*r10);
IkReal x11801=(cj3*r11);
IkReal x11802=((1.0)*r02);
IkReal x11803=(gconst37*gconst38);
IkReal x11804=(r11*sj3);
IkReal x11805=(cj3*r10);
IkReal x11806=((1.0)*r00*x11799);
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal((((cj3*x11798*x11800))+((r01*x11801*x11803))+(((-1.0)*x11801*x11806))+(((-1.0)*r00*x11803*x11805)))),IkReal(((((-1.0)*gconst38*x11801*x11802))+(((-1.0)*gconst37*x11802*x11805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
CheckValue<IkReal> x11808=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11798*x11804))+((r00*x11803*x11804))+((sj3*x11800*x11803))+(((-1.0)*r10*sj3*x11806))+(((-1.0)*r12*sj3*x11802)))),-1);
if(!x11808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11807.value)+(((1.5707963267949)*(x11808.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11809=IKcos(j4);
IkReal x11810=IKsin(j4);
IkReal x11811=(gconst37*r11);
IkReal x11812=(gconst38*r21);
IkReal x11813=((1.0)*gconst38);
IkReal x11814=(cj3*gconst37);
IkReal x11815=(gconst37*r21);
IkReal x11816=(sj1*sj2);
IkReal x11817=((1.0)*cj1);
IkReal x11818=(gconst37*r01);
IkReal x11819=(gconst38*r01);
IkReal x11820=(gconst38*r11);
IkReal x11821=(gconst37*sj3);
IkReal x11822=(sj2*x11817);
IkReal x11823=((1.0)*cj2*sj1);
IkReal x11824=(sj3*x11810);
IkReal x11825=((1.0)*x11810);
IkReal x11826=(cj3*x11809);
IkReal x11827=((1.0)*sj3*x11809);
IkReal x11828=(cj3*gconst38*x11810);
IkReal x11829=(x11823+x11822);
evalcond[0]=(((r22*x11810))+((x11809*x11815))+(((-1.0)*r20*x11809*x11813)));
evalcond[1]=((((-1.0)*r00*x11809*x11813))+((x11809*x11818))+((r02*x11810)));
evalcond[2]=((-1.0)+((x11809*x11811))+((r12*x11810))+(((-1.0)*r10*x11809*x11813)));
evalcond[3]=(((r10*x11821))+((r10*x11828))+((sj3*x11820))+((r12*x11826))+(((-1.0)*cj3*x11811*x11825)));
evalcond[4]=(((cj3*x11820))+((x11811*x11824))+(((-1.0)*r12*x11827))+((r10*x11814))+(((-1.0)*r10*x11813*x11824)));
evalcond[5]=(((r02*x11826))+((sj3*x11819))+(((-1.0)*r01*x11814*x11825))+(((-1.0)*cj2*x11817))+((r00*x11821))+((r00*x11828))+x11816);
evalcond[6]=((((-1.0)*x11816))+(((-1.0)*r22*x11827))+((cj1*cj2))+(((-1.0)*r20*x11813*x11824))+((r20*x11814))+((x11815*x11824))+((cj3*x11812)));
evalcond[7]=(((r22*x11826))+(((-1.0)*r21*x11814*x11825))+(((-1.0)*x11829))+((sj3*x11812))+((r20*x11828))+((r20*x11821)));
evalcond[8]=((((-1.0)*r00*x11813*x11824))+((x11818*x11824))+((r00*x11814))+(((-1.0)*r02*x11827))+(((-1.0)*x11829))+((cj3*x11819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11830=gconst37*gconst37;
IkReal x11831=gconst38*gconst38;
IkReal x11832=((1.0)*r02);
IkReal x11833=(cj3*r10);
IkReal x11834=(cj3*r11);
IkReal x11835=(gconst37*r01);
IkReal x11836=((1.0)*gconst38);
IkReal x11837=(gconst37*r00);
IkReal x11838=(r10*sj3);
IkReal x11839=(gconst38*r11*sj3);
IkReal x11840=(r00*x11831);
IkReal x11841=(r01*x11830);
CheckValue<IkReal> x11842 = IKatan2WithCheck(IkReal((((x11838*x11841))+(((-1.0)*x11836*x11837*x11838))+((x11835*x11839))+(((-1.0)*r11*sj3*x11840)))),IkReal(((((-1.0)*gconst37*x11832*x11838))+(((-1.0)*x11832*x11839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11842.valid){
continue;
}
CheckValue<IkReal> x11843=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11834*x11836*x11837))+((cj3*r02*r12))+((x11834*x11841))+(((-1.0)*x11833*x11835*x11836))+((x11833*x11840)))),-1);
if(!x11843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11842.value)+(((1.5707963267949)*(x11843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11844=IKcos(j4);
IkReal x11845=IKsin(j4);
IkReal x11846=(gconst37*r11);
IkReal x11847=(gconst38*r21);
IkReal x11848=((1.0)*gconst38);
IkReal x11849=(cj3*gconst37);
IkReal x11850=(gconst37*r21);
IkReal x11851=(sj1*sj2);
IkReal x11852=((1.0)*cj1);
IkReal x11853=(gconst37*r01);
IkReal x11854=(gconst38*r01);
IkReal x11855=(gconst38*r11);
IkReal x11856=(gconst37*sj3);
IkReal x11857=(sj2*x11852);
IkReal x11858=((1.0)*cj2*sj1);
IkReal x11859=(sj3*x11845);
IkReal x11860=((1.0)*x11845);
IkReal x11861=(cj3*x11844);
IkReal x11862=((1.0)*sj3*x11844);
IkReal x11863=(cj3*gconst38*x11845);
IkReal x11864=(x11858+x11857);
evalcond[0]=(((r22*x11845))+(((-1.0)*r20*x11844*x11848))+((x11844*x11850)));
evalcond[1]=((((-1.0)*r00*x11844*x11848))+((x11844*x11853))+((r02*x11845)));
evalcond[2]=((-1.0)+((r12*x11845))+(((-1.0)*r10*x11844*x11848))+((x11844*x11846)));
evalcond[3]=((((-1.0)*cj3*x11846*x11860))+((r12*x11861))+((r10*x11863))+((r10*x11856))+((sj3*x11855)));
evalcond[4]=(((x11846*x11859))+((cj3*x11855))+(((-1.0)*r12*x11862))+((r10*x11849))+(((-1.0)*r10*x11848*x11859)));
evalcond[5]=(((r02*x11861))+((r00*x11863))+(((-1.0)*cj2*x11852))+(((-1.0)*r01*x11849*x11860))+((r00*x11856))+x11851+((sj3*x11854)));
evalcond[6]=((((-1.0)*r22*x11862))+((r20*x11849))+(((-1.0)*x11851))+((cj3*x11847))+(((-1.0)*r20*x11848*x11859))+((cj1*cj2))+((x11850*x11859)));
evalcond[7]=(((r20*x11856))+(((-1.0)*x11864))+((r20*x11863))+(((-1.0)*r21*x11849*x11860))+((r22*x11861))+((sj3*x11847)));
evalcond[8]=((((-1.0)*r00*x11848*x11859))+(((-1.0)*x11864))+((x11853*x11859))+((r00*x11849))+((cj3*x11854))+(((-1.0)*r02*x11862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11865=((1.0)*gconst38);
CheckValue<IkReal> x11866 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x11865)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11866.valid){
continue;
}
CheckValue<IkReal> x11867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11865))+(((-1.0)*gconst37*r00)))),-1);
if(!x11867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11866.value)+(((1.5707963267949)*(x11867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11868=IKcos(j4);
IkReal x11869=IKsin(j4);
IkReal x11870=(gconst37*r11);
IkReal x11871=(gconst38*r21);
IkReal x11872=((1.0)*gconst38);
IkReal x11873=(cj3*gconst37);
IkReal x11874=(gconst37*r21);
IkReal x11875=(sj1*sj2);
IkReal x11876=((1.0)*cj1);
IkReal x11877=(gconst37*r01);
IkReal x11878=(gconst38*r01);
IkReal x11879=(gconst38*r11);
IkReal x11880=(gconst37*sj3);
IkReal x11881=(sj2*x11876);
IkReal x11882=((1.0)*cj2*sj1);
IkReal x11883=(sj3*x11869);
IkReal x11884=((1.0)*x11869);
IkReal x11885=(cj3*x11868);
IkReal x11886=((1.0)*sj3*x11868);
IkReal x11887=(cj3*gconst38*x11869);
IkReal x11888=(x11881+x11882);
evalcond[0]=(((x11868*x11874))+((r22*x11869))+(((-1.0)*r20*x11868*x11872)));
evalcond[1]=(((r02*x11869))+((x11868*x11877))+(((-1.0)*r00*x11868*x11872)));
evalcond[2]=((-1.0)+((x11868*x11870))+((r12*x11869))+(((-1.0)*r10*x11868*x11872)));
evalcond[3]=(((sj3*x11879))+((r10*x11880))+((r10*x11887))+((r12*x11885))+(((-1.0)*cj3*x11870*x11884)));
evalcond[4]=((((-1.0)*r10*x11872*x11883))+(((-1.0)*r12*x11886))+((r10*x11873))+((cj3*x11879))+((x11870*x11883)));
evalcond[5]=(((sj3*x11878))+((r00*x11880))+((r00*x11887))+(((-1.0)*r01*x11873*x11884))+(((-1.0)*cj2*x11876))+((r02*x11885))+x11875);
evalcond[6]=((((-1.0)*r20*x11872*x11883))+((r20*x11873))+(((-1.0)*x11875))+(((-1.0)*r22*x11886))+((x11874*x11883))+((cj1*cj2))+((cj3*x11871)));
evalcond[7]=(((sj3*x11871))+(((-1.0)*r21*x11873*x11884))+((r22*x11885))+(((-1.0)*x11888))+((r20*x11880))+((r20*x11887)));
evalcond[8]=(((x11877*x11883))+((r00*x11873))+(((-1.0)*r02*x11886))+(((-1.0)*r00*x11872*x11883))+((cj3*x11878))+(((-1.0)*x11888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11890 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11890)==0){
continue;
}
IkReal x11889=pow(x11890,-0.5);
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x11891.value))));
IkReal gconst40=((1.0)*r21*x11889);
IkReal gconst41=((-1.0)*r20*x11889);
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11892.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11895 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11895.valid){
continue;
}
IkReal x11893=((1.0)*(x11895.value));
IkReal x11894=x11889;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11893)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11893)));
IkReal gconst40=((1.0)*r21*x11894);
IkReal gconst41=((-1.0)*r20*x11894);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
IkReal x11896=((1.0)*(x11898.value));
IkReal x11897=x11889;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11896)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11896)));
IkReal gconst40=((1.0)*r21*x11897);
IkReal gconst41=((-1.0)*r20*x11897);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11901 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11901.valid){
continue;
}
IkReal x11899=((1.0)*(x11901.value));
IkReal x11900=x11889;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x11899)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x11899)));
IkReal gconst40=((1.0)*r21*x11900);
IkReal gconst41=((-1.0)*r20*x11900);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11902=gconst40*gconst40;
IkReal x11903=gconst41*gconst41;
IkReal x11904=(r11*r21);
IkReal x11905=(cj3*r10);
IkReal x11906=((1.0)*r20);
IkReal x11907=(r10*sj3);
IkReal x11908=(gconst40*gconst41);
IkReal x11909=((1.0)*r11*sj3);
IkReal x11910=(r20*x11903);
IkReal x11911=(sj3*x11908);
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(((((-1.0)*x11906*x11907*x11908))+((r21*x11902*x11907))+((x11904*x11911))+(((-1.0)*r11*sj3*x11903*x11906)))),IkReal(((((-1.0)*gconst41*r22*x11909))+(((-1.0)*gconst40*r22*x11907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
CheckValue<IkReal> x11913=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r21*x11905*x11908))+((x11905*x11910))+((cj3*x11902*x11904))+(((-1.0)*cj3*r11*x11906*x11908)))),-1);
if(!x11913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11912.value)+(((1.5707963267949)*(x11913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11914=IKcos(j4);
IkReal x11915=IKsin(j4);
IkReal x11916=(gconst40*sj3);
IkReal x11917=(gconst40*r11);
IkReal x11918=(gconst41*r11);
IkReal x11919=(cj3*gconst40);
IkReal x11920=(sj1*sj2);
IkReal x11921=(gconst41*sj3);
IkReal x11922=((1.0)*cj1);
IkReal x11923=(cj3*gconst41);
IkReal x11924=(sj2*x11922);
IkReal x11925=((1.0)*cj2*sj1);
IkReal x11926=(r21*x11915);
IkReal x11927=((1.0)*x11915);
IkReal x11928=(gconst40*x11914);
IkReal x11929=(cj3*x11914);
IkReal x11930=((1.0)*gconst41*x11914);
IkReal x11931=((1.0)*sj3*x11914);
IkReal x11932=(x11924+x11925);
evalcond[0]=(((r21*x11928))+((r22*x11915))+(((-1.0)*r20*x11930)));
evalcond[1]=((((-1.0)*r00*x11930))+((r02*x11915))+((r01*x11928)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11930))+((x11914*x11917))+((r12*x11915)));
evalcond[3]=((((-1.0)*cj3*x11917*x11927))+((r10*x11916))+((sj3*x11918))+((r12*x11929))+((r10*x11915*x11923)));
evalcond[4]=((((-1.0)*r10*x11921*x11927))+((cj3*x11918))+((r11*x11915*x11916))+((r10*x11919))+(((-1.0)*r12*x11931)));
evalcond[5]=(x11920+(((-1.0)*r01*x11919*x11927))+((r02*x11929))+((r00*x11915*x11923))+((r00*x11916))+(((-1.0)*cj2*x11922))+((r01*x11921)));
evalcond[6]=(((r21*x11923))+((x11916*x11926))+(((-1.0)*r20*x11921*x11927))+(((-1.0)*r22*x11931))+((cj1*cj2))+((r20*x11919))+(((-1.0)*x11920)));
evalcond[7]=(((r21*x11921))+(((-1.0)*x11932))+((r22*x11929))+((r20*x11916))+(((-1.0)*x11919*x11926))+((r20*x11915*x11923)));
evalcond[8]=(((r01*x11915*x11916))+((r00*x11919))+(((-1.0)*x11932))+(((-1.0)*r00*x11921*x11927))+(((-1.0)*r02*x11931))+((r01*x11923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11933=((1.0)*gconst41);
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal((((gconst40*r21))+(((-1.0)*r20*x11933)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
CheckValue<IkReal> x11935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r00))+(((-1.0)*r01*x11933)))),-1);
if(!x11935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11934.value)+(((1.5707963267949)*(x11935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11936=IKcos(j4);
IkReal x11937=IKsin(j4);
IkReal x11938=(gconst40*sj3);
IkReal x11939=(gconst40*r11);
IkReal x11940=(gconst41*r11);
IkReal x11941=(cj3*gconst40);
IkReal x11942=(sj1*sj2);
IkReal x11943=(gconst41*sj3);
IkReal x11944=((1.0)*cj1);
IkReal x11945=(cj3*gconst41);
IkReal x11946=(sj2*x11944);
IkReal x11947=((1.0)*cj2*sj1);
IkReal x11948=(r21*x11937);
IkReal x11949=((1.0)*x11937);
IkReal x11950=(gconst40*x11936);
IkReal x11951=(cj3*x11936);
IkReal x11952=((1.0)*gconst41*x11936);
IkReal x11953=((1.0)*sj3*x11936);
IkReal x11954=(x11946+x11947);
evalcond[0]=((((-1.0)*r20*x11952))+((r21*x11950))+((r22*x11937)));
evalcond[1]=(((r02*x11937))+(((-1.0)*r00*x11952))+((r01*x11950)));
evalcond[2]=((-1.0)+((x11936*x11939))+((r12*x11937))+(((-1.0)*r10*x11952)));
evalcond[3]=(((r12*x11951))+((r10*x11938))+((r10*x11937*x11945))+((sj3*x11940))+(((-1.0)*cj3*x11939*x11949)));
evalcond[4]=((((-1.0)*r12*x11953))+((r10*x11941))+((cj3*x11940))+((r11*x11937*x11938))+(((-1.0)*r10*x11943*x11949)));
evalcond[5]=(x11942+((r02*x11951))+(((-1.0)*r01*x11941*x11949))+((r00*x11937*x11945))+(((-1.0)*cj2*x11944))+((r01*x11943))+((r00*x11938)));
evalcond[6]=((((-1.0)*r20*x11943*x11949))+((r20*x11941))+(((-1.0)*r22*x11953))+(((-1.0)*x11942))+((r21*x11945))+((x11938*x11948))+((cj1*cj2)));
evalcond[7]=((((-1.0)*x11954))+(((-1.0)*x11941*x11948))+((r20*x11938))+((r21*x11943))+((r20*x11937*x11945))+((r22*x11951)));
evalcond[8]=((((-1.0)*r02*x11953))+((r01*x11937*x11938))+(((-1.0)*x11954))+((r00*x11941))+((r01*x11945))+(((-1.0)*r00*x11943*x11949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x11955.valid){
continue;
}
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r00))+((gconst40*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11955.value)))+(x11956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11957=IKcos(j4);
IkReal x11958=IKsin(j4);
IkReal x11959=(gconst40*sj3);
IkReal x11960=(gconst40*r11);
IkReal x11961=(gconst41*r11);
IkReal x11962=(cj3*gconst40);
IkReal x11963=(sj1*sj2);
IkReal x11964=(gconst41*sj3);
IkReal x11965=((1.0)*cj1);
IkReal x11966=(cj3*gconst41);
IkReal x11967=(sj2*x11965);
IkReal x11968=((1.0)*cj2*sj1);
IkReal x11969=(r21*x11958);
IkReal x11970=((1.0)*x11958);
IkReal x11971=(gconst40*x11957);
IkReal x11972=(cj3*x11957);
IkReal x11973=((1.0)*gconst41*x11957);
IkReal x11974=((1.0)*sj3*x11957);
IkReal x11975=(x11967+x11968);
evalcond[0]=((((-1.0)*r20*x11973))+((r22*x11958))+((r21*x11971)));
evalcond[1]=(((r01*x11971))+((r02*x11958))+(((-1.0)*r00*x11973)));
evalcond[2]=((-1.0)+((r12*x11958))+((x11957*x11960))+(((-1.0)*r10*x11973)));
evalcond[3]=(((r10*x11958*x11966))+((sj3*x11961))+(((-1.0)*cj3*x11960*x11970))+((r12*x11972))+((r10*x11959)));
evalcond[4]=((((-1.0)*r10*x11964*x11970))+(((-1.0)*r12*x11974))+((cj3*x11961))+((r10*x11962))+((r11*x11958*x11959)));
evalcond[5]=(x11963+((r01*x11964))+(((-1.0)*r01*x11962*x11970))+((r00*x11958*x11966))+((r02*x11972))+((r00*x11959))+(((-1.0)*cj2*x11965)));
evalcond[6]=((((-1.0)*x11963))+((x11959*x11969))+((r20*x11962))+(((-1.0)*r22*x11974))+(((-1.0)*r20*x11964*x11970))+((cj1*cj2))+((r21*x11966)));
evalcond[7]=(((r20*x11959))+(((-1.0)*x11975))+(((-1.0)*x11962*x11969))+((r21*x11964))+((r22*x11972))+((r20*x11958*x11966)));
evalcond[8]=(((r01*x11966))+((r00*x11962))+((r01*x11958*x11959))+(((-1.0)*x11975))+(((-1.0)*r00*x11964*x11970))+(((-1.0)*r02*x11974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11976=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11976);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11976);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11977=(r11*sj5);
IkReal x11978=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*sj3*x11978))+((sj3*x11977)));
j4eval[1]=(x11977+(((-1.0)*x11978)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11979=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11980=(cj5*r10);
IkReal x11981=(r11*sj5);
j4eval[0]=((((-1.0)*cj3*x11981))+((cj3*x11980)));
j4eval[1]=(x11981+(((-1.0)*x11980)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11982=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11982);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11982);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((r11*sj3*sj5))+(((-1.0)*cj5*r10*sj3)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11983=((1.0)*cj5);
CheckValue<IkReal> x11984=IKPowWithIntegerCheck((((r11*sj3*sj5))+(((-1.0)*r10*sj3*x11983))),-1);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(r22,-1);
if(!x11985.valid){
continue;
}
CheckValue<IkReal> x11986=IKPowWithIntegerCheck(sj3,-1);
if(!x11986.valid){
continue;
}
if( IKabs(((x11984.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11983)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11985.value)*(x11986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11984.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11983))))))+IKsqr(((x11985.value)*(x11986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11984.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*r11*x11983))))), ((x11985.value)*(x11986.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11987=IKcos(j4);
IkReal x11988=IKsin(j4);
IkReal x11989=((1.0)*cj5);
IkReal x11990=(sj1*sj2);
IkReal x11991=(cj5*r01);
IkReal x11992=(cj3*sj5);
IkReal x11993=(cj3*cj5);
IkReal x11994=((1.0)*cj2);
IkReal x11995=(sj3*sj5);
IkReal x11996=(r01*sj5);
IkReal x11997=(r11*sj5);
IkReal x11998=((1.0)*cj1*sj2);
IkReal x11999=(sj1*x11994);
IkReal x12000=(sj3*x11988);
IkReal x12001=(r22*x11987);
IkReal x12002=((1.0)*x11988);
IkReal x12003=(x11999+x11998);
evalcond[0]=(r22*x11988);
evalcond[1]=((((-1.0)*r00*x11987*x11989))+((x11987*x11996)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x11987*x11989))+((x11987*x11997)));
evalcond[3]=((((-1.0)*sj3*x12001))+(((-1.0)*x11990))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x12003))+((cj3*x12001)));
evalcond[5]=(((r11*x11988*x11995))+((r11*x11993))+(((-1.0)*r10*x11989*x12000))+((r10*x11992)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x11988*x11993))+(((-1.0)*r11*x11992*x12002))+((r10*x11995)));
evalcond[7]=(x11990+((r00*x11988*x11993))+(((-1.0)*r01*x11992*x12002))+((r00*x11995))+((sj3*x11991))+(((-1.0)*cj1*x11994)));
evalcond[8]=((((-1.0)*x12003))+(((-1.0)*r00*x11989*x12000))+((r00*x11992))+((r01*x11988*x11995))+((cj3*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12004=((1.0)*sj5);
IkReal x12005=(cj5*r10);
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(((((-1.0)*cj3*r11*x12004))+((cj3*x12005))),-1);
if(!x12006.valid){
continue;
}
CheckValue<IkReal> x12007=IKPowWithIntegerCheck(((((-1.0)*x12005))+((r11*sj5))),-1);
if(!x12007.valid){
continue;
}
if( IKabs(((x12006.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12007.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12006.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12004))))))+IKsqr(x12007.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12006.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*r10*sj3*x12004))))), x12007.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12008=IKcos(j4);
IkReal x12009=IKsin(j4);
IkReal x12010=((1.0)*cj5);
IkReal x12011=(sj1*sj2);
IkReal x12012=(cj5*r01);
IkReal x12013=(cj3*sj5);
IkReal x12014=(cj3*cj5);
IkReal x12015=((1.0)*cj2);
IkReal x12016=(sj3*sj5);
IkReal x12017=(r01*sj5);
IkReal x12018=(r11*sj5);
IkReal x12019=((1.0)*cj1*sj2);
IkReal x12020=(sj1*x12015);
IkReal x12021=(sj3*x12009);
IkReal x12022=(r22*x12008);
IkReal x12023=((1.0)*x12009);
IkReal x12024=(x12020+x12019);
evalcond[0]=(r22*x12009);
evalcond[1]=(((x12008*x12017))+(((-1.0)*r00*x12008*x12010)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12008*x12010))+((x12008*x12018)));
evalcond[3]=((((-1.0)*x12011))+((cj1*cj2))+(((-1.0)*sj3*x12022)));
evalcond[4]=((((-1.0)*x12024))+((cj3*x12022)));
evalcond[5]=(((r11*x12009*x12016))+(((-1.0)*r10*x12010*x12021))+((r10*x12013))+((r11*x12014)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x12016))+((r10*x12009*x12014))+(((-1.0)*r11*x12013*x12023)));
evalcond[7]=(((r00*x12009*x12014))+(((-1.0)*r01*x12013*x12023))+(((-1.0)*cj1*x12015))+((sj3*x12012))+x12011+((r00*x12016)));
evalcond[8]=(((cj3*x12012))+(((-1.0)*x12024))+(((-1.0)*r00*x12010*x12021))+((r01*x12009*x12016))+((r00*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12025=((1.0)*cj5);
IkReal x12026=(r11*sj5);
CheckValue<IkReal> x12027=IKPowWithIntegerCheck(((((-1.0)*r10*sj3*x12025))+((sj3*x12026))),-1);
if(!x12027.valid){
continue;
}
CheckValue<IkReal> x12028=IKPowWithIntegerCheck((x12026+(((-1.0)*r10*x12025))),-1);
if(!x12028.valid){
continue;
}
if( IKabs(((x12027.value)*(((((-1.0)*cj3*r11*x12025))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12028.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12027.value)*(((((-1.0)*cj3*r11*x12025))+(((-1.0)*cj3*r10*sj5))))))+IKsqr(x12028.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12027.value)*(((((-1.0)*cj3*r11*x12025))+(((-1.0)*cj3*r10*sj5))))), x12028.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12029=IKcos(j4);
IkReal x12030=IKsin(j4);
IkReal x12031=((1.0)*cj5);
IkReal x12032=(sj1*sj2);
IkReal x12033=(cj5*r01);
IkReal x12034=(cj3*sj5);
IkReal x12035=(cj3*cj5);
IkReal x12036=((1.0)*cj2);
IkReal x12037=(sj3*sj5);
IkReal x12038=(r01*sj5);
IkReal x12039=(r11*sj5);
IkReal x12040=((1.0)*cj1*sj2);
IkReal x12041=(sj1*x12036);
IkReal x12042=(sj3*x12030);
IkReal x12043=(r22*x12029);
IkReal x12044=((1.0)*x12030);
IkReal x12045=(x12040+x12041);
evalcond[0]=(r22*x12030);
evalcond[1]=((((-1.0)*r00*x12029*x12031))+((x12029*x12038)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12029*x12031))+((x12029*x12039)));
evalcond[3]=((((-1.0)*x12032))+((cj1*cj2))+(((-1.0)*sj3*x12043)));
evalcond[4]=((((-1.0)*x12045))+((cj3*x12043)));
evalcond[5]=(((r11*x12030*x12037))+(((-1.0)*r10*x12031*x12042))+((r10*x12034))+((r11*x12035)));
evalcond[6]=(((cj5*r11*sj3))+((r10*x12030*x12035))+(((-1.0)*r11*x12034*x12044))+((r10*x12037)));
evalcond[7]=((((-1.0)*cj1*x12036))+((r00*x12037))+x12032+(((-1.0)*r01*x12034*x12044))+((r00*x12030*x12035))+((sj3*x12033)));
evalcond[8]=(((r00*x12034))+((r01*x12030*x12037))+(((-1.0)*x12045))+(((-1.0)*r00*x12031*x12042))+((cj3*x12033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12046=cj5*cj5;
IkReal x12047=((1.0)*cj5);
IkReal x12048=(r11*sj3);
IkReal x12049=(cj3*sj5);
IkReal x12050=(r10*r21);
IkReal x12051=(cj3*r11*r21);
IkReal x12052=((1.0)*x12046);
IkReal x12053=(r10*sj3*sj5);
CheckValue<IkReal> x12054=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x12047*x12049*x12050))+(((-1.0)*r11*r20*x12047*x12049))+((cj3*r10*r20*x12046))+x12051+(((-1.0)*x12051*x12052)))),-1);
if(!x12054.valid){
continue;
}
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x12050*x12052))+((cj5*r21*sj5*x12048))+(((-1.0)*r20*x12047*x12053))+(((-1.0)*r20*x12048*x12052))+((sj3*x12050)))),IkReal(((((-1.0)*r22*x12053))+(((-1.0)*r22*x12047*x12048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12054.value)))+(x12055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12056=IKcos(j4);
IkReal x12057=IKsin(j4);
IkReal x12058=((1.0)*cj5);
IkReal x12059=(sj1*sj2);
IkReal x12060=(cj5*r01);
IkReal x12061=((1.0)*cj1);
IkReal x12062=(cj3*sj5);
IkReal x12063=(cj3*cj5);
IkReal x12064=(cj5*sj3);
IkReal x12065=(sj3*sj5);
IkReal x12066=(sj2*x12061);
IkReal x12067=((1.0)*cj2*sj1);
IkReal x12068=(sj5*x12056);
IkReal x12069=(sj3*x12057);
IkReal x12070=((1.0)*x12057);
IkReal x12071=(cj3*x12056);
IkReal x12072=((1.0)*sj3*x12056);
IkReal x12073=(x12066+x12067);
evalcond[0]=(((r21*x12068))+(((-1.0)*r20*x12056*x12058))+((r22*x12057)));
evalcond[1]=(((r01*x12068))+((r02*x12057))+(((-1.0)*r00*x12056*x12058)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12056*x12058))+((r12*x12057))+((r11*x12068)));
evalcond[3]=(((r10*x12065))+(((-1.0)*r11*x12062*x12070))+((r10*x12057*x12063))+((r11*x12064))+((r12*x12071)));
evalcond[4]=((((-1.0)*r10*x12058*x12069))+((r10*x12062))+(((-1.0)*r12*x12072))+((r11*x12057*x12065))+((r11*x12063)));
evalcond[5]=(((r00*x12065))+((sj3*x12060))+x12059+((r00*x12057*x12063))+(((-1.0)*r01*x12062*x12070))+(((-1.0)*cj2*x12061))+((r02*x12071)));
evalcond[6]=(((r21*x12063))+((r21*x12057*x12065))+(((-1.0)*x12059))+((r20*x12062))+(((-1.0)*r20*x12058*x12069))+((cj1*cj2))+(((-1.0)*r22*x12072)));
evalcond[7]=(((r21*x12064))+((r20*x12057*x12063))+((r22*x12071))+(((-1.0)*r21*x12062*x12070))+((r20*x12065))+(((-1.0)*x12073)));
evalcond[8]=(((r00*x12062))+(((-1.0)*r02*x12072))+((r01*x12057*x12065))+(((-1.0)*r00*x12058*x12069))+((cj3*x12060))+(((-1.0)*x12073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12074=((1.0)*cj5);
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12074)))),-1);
if(!x12075.valid){
continue;
}
CheckValue<IkReal> x12076 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12074)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12075.value)))+(x12076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12077=IKcos(j4);
IkReal x12078=IKsin(j4);
IkReal x12079=((1.0)*cj5);
IkReal x12080=(sj1*sj2);
IkReal x12081=(cj5*r01);
IkReal x12082=((1.0)*cj1);
IkReal x12083=(cj3*sj5);
IkReal x12084=(cj3*cj5);
IkReal x12085=(cj5*sj3);
IkReal x12086=(sj3*sj5);
IkReal x12087=(sj2*x12082);
IkReal x12088=((1.0)*cj2*sj1);
IkReal x12089=(sj5*x12077);
IkReal x12090=(sj3*x12078);
IkReal x12091=((1.0)*x12078);
IkReal x12092=(cj3*x12077);
IkReal x12093=((1.0)*sj3*x12077);
IkReal x12094=(x12087+x12088);
evalcond[0]=(((r22*x12078))+((r21*x12089))+(((-1.0)*r20*x12077*x12079)));
evalcond[1]=(((r01*x12089))+((r02*x12078))+(((-1.0)*r00*x12077*x12079)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12077*x12079))+((r11*x12089))+((r12*x12078)));
evalcond[3]=(((r12*x12092))+(((-1.0)*r11*x12083*x12091))+((r10*x12086))+((r10*x12078*x12084))+((r11*x12085)));
evalcond[4]=((((-1.0)*r10*x12079*x12090))+((r11*x12078*x12086))+(((-1.0)*r12*x12093))+((r10*x12083))+((r11*x12084)));
evalcond[5]=(((r00*x12086))+((r00*x12078*x12084))+(((-1.0)*cj2*x12082))+x12080+((r02*x12092))+(((-1.0)*r01*x12083*x12091))+((sj3*x12081)));
evalcond[6]=(((r20*x12083))+(((-1.0)*r20*x12079*x12090))+((r21*x12078*x12086))+(((-1.0)*x12080))+(((-1.0)*r22*x12093))+((r21*x12084))+((cj1*cj2)));
evalcond[7]=(((r20*x12086))+((r22*x12092))+((r21*x12085))+(((-1.0)*x12094))+(((-1.0)*r21*x12083*x12091))+((r20*x12078*x12084)));
evalcond[8]=((((-1.0)*r00*x12079*x12090))+((r00*x12083))+((r01*x12078*x12086))+(((-1.0)*r02*x12093))+((cj3*x12081))+(((-1.0)*x12094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12095=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12095.valid){
continue;
}
CheckValue<IkReal> x12096 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12095.value)))+(x12096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12097=IKcos(j4);
IkReal x12098=IKsin(j4);
IkReal x12099=((1.0)*cj5);
IkReal x12100=(sj1*sj2);
IkReal x12101=(cj5*r01);
IkReal x12102=((1.0)*cj1);
IkReal x12103=(cj3*sj5);
IkReal x12104=(cj3*cj5);
IkReal x12105=(cj5*sj3);
IkReal x12106=(sj3*sj5);
IkReal x12107=(sj2*x12102);
IkReal x12108=((1.0)*cj2*sj1);
IkReal x12109=(sj5*x12097);
IkReal x12110=(sj3*x12098);
IkReal x12111=((1.0)*x12098);
IkReal x12112=(cj3*x12097);
IkReal x12113=((1.0)*sj3*x12097);
IkReal x12114=(x12107+x12108);
evalcond[0]=((((-1.0)*r20*x12097*x12099))+((r22*x12098))+((r21*x12109)));
evalcond[1]=(((r01*x12109))+(((-1.0)*r00*x12097*x12099))+((r02*x12098)));
evalcond[2]=((-1.0)+((r12*x12098))+((r11*x12109))+(((-1.0)*r10*x12097*x12099)));
evalcond[3]=(((r10*x12106))+(((-1.0)*r11*x12103*x12111))+((r12*x12112))+((r11*x12105))+((r10*x12098*x12104)));
evalcond[4]=(((r10*x12103))+((r11*x12098*x12106))+(((-1.0)*r12*x12113))+(((-1.0)*r10*x12099*x12110))+((r11*x12104)));
evalcond[5]=(((r02*x12112))+((r00*x12106))+x12100+((sj3*x12101))+((r00*x12098*x12104))+(((-1.0)*r01*x12103*x12111))+(((-1.0)*cj2*x12102)));
evalcond[6]=((((-1.0)*r22*x12113))+((r20*x12103))+(((-1.0)*r20*x12099*x12110))+((cj1*cj2))+((r21*x12104))+(((-1.0)*x12100))+((r21*x12098*x12106)));
evalcond[7]=(((r20*x12098*x12104))+((r20*x12106))+(((-1.0)*r21*x12103*x12111))+(((-1.0)*x12114))+((r21*x12105))+((r22*x12112)));
evalcond[8]=(((cj3*x12101))+(((-1.0)*r00*x12099*x12110))+((r00*x12103))+(((-1.0)*x12114))+((r01*x12098*x12106))+(((-1.0)*r02*x12113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12116 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12116)==0){
continue;
}
IkReal x12115=pow(x12116,-0.5);
CheckValue<IkReal> x12117 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12117.valid){
continue;
}
IkReal gconst12=((-1.0)*(x12117.value));
IkReal gconst13=((-1.0)*r01*x12115);
IkReal gconst14=(r00*x12115);
CheckValue<IkReal> x12118 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12118.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12118.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12121 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12121.valid){
continue;
}
IkReal x12119=((-1.0)*(x12121.value));
IkReal x12120=x12115;
sj5=gconst13;
cj5=gconst14;
j5=x12119;
IkReal gconst12=x12119;
IkReal gconst13=((-1.0)*r01*x12120);
IkReal gconst14=(r00*x12120);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12122=((1.0)*sj0);
IkReal x12123=((1.0)*cj0);
CheckValue<IkReal> x12124 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r00*x12123))+(((-1.0)*gconst14*r10*x12122))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IkReal(((((-1.0)*r12*x12122))+(((-1.0)*r02*x12123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12124.valid){
continue;
}
CheckValue<IkReal> x12125=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x12125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12124.value)+(((1.5707963267949)*(x12125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12126=IKcos(j4);
IkReal x12127=IKsin(j4);
IkReal x12128=(cj3*r11);
IkReal x12129=(gconst13*sj3);
IkReal x12130=(sj0*sj1);
IkReal x12131=((1.0)*sj2);
IkReal x12132=(gconst14*sj3);
IkReal x12133=(cj3*gconst14);
IkReal x12134=(cj2*sj1);
IkReal x12135=(cj3*gconst13);
IkReal x12136=(cj1*cj2);
IkReal x12137=(cj1*sj2);
IkReal x12138=((1.0)*gconst14*r00);
IkReal x12139=((1.0)*x12127);
IkReal x12140=(gconst13*x12126);
IkReal x12141=(cj3*x12126);
IkReal x12142=((1.0)*x12126);
evalcond[0]=((((-1.0)*gconst14*r20*x12142))+((r22*x12127))+((r21*x12140)));
evalcond[1]=(((r12*x12127))+cj0+((r11*x12140))+(((-1.0)*gconst14*r10*x12142)));
evalcond[2]=((((-1.0)*x12126*x12138))+(((-1.0)*sj0))+((r01*x12140))+((r02*x12127)));
evalcond[3]=(((r21*x12133))+x12136+((r21*x12127*x12129))+(((-1.0)*r22*sj3*x12142))+(((-1.0)*r20*x12132*x12139))+((r20*x12135))+(((-1.0)*sj1*x12131)));
evalcond[4]=(((r22*x12141))+(((-1.0)*cj1*x12131))+((r21*x12132))+((r20*x12127*x12133))+(((-1.0)*r21*x12135*x12139))+(((-1.0)*x12134))+((r20*x12129)));
evalcond[5]=(((cj0*x12137))+((cj0*x12134))+((r00*x12135))+((r01*x12133))+(((-1.0)*r00*x12132*x12139))+(((-1.0)*r02*sj3*x12142))+((r01*x12127*x12129)));
evalcond[6]=(((cj0*x12136))+((r00*x12129))+((r01*x12132))+((r02*x12141))+(((-1.0)*cj0*sj1*x12131))+(((-1.0)*r01*x12135*x12139))+((r00*x12127*x12133)));
evalcond[7]=((((-1.0)*r12*sj3*x12142))+((gconst14*x12128))+((r11*x12127*x12129))+((cj2*x12130))+((sj0*x12137))+(((-1.0)*r10*x12132*x12139))+((r10*x12135)));
evalcond[8]=(((r10*x12127*x12133))+(((-1.0)*gconst13*x12128*x12139))+((r12*x12141))+(((-1.0)*x12130*x12131))+((sj0*x12136))+((r10*x12129))+((r11*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12143=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x12143.valid){
continue;
}
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r20*sj0))+((gconst13*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12143.value)))+(x12144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12145=IKcos(j4);
IkReal x12146=IKsin(j4);
IkReal x12147=(cj3*r11);
IkReal x12148=(gconst13*sj3);
IkReal x12149=(sj0*sj1);
IkReal x12150=((1.0)*sj2);
IkReal x12151=(gconst14*sj3);
IkReal x12152=(cj3*gconst14);
IkReal x12153=(cj2*sj1);
IkReal x12154=(cj3*gconst13);
IkReal x12155=(cj1*cj2);
IkReal x12156=(cj1*sj2);
IkReal x12157=((1.0)*gconst14*r00);
IkReal x12158=((1.0)*x12146);
IkReal x12159=(gconst13*x12145);
IkReal x12160=(cj3*x12145);
IkReal x12161=((1.0)*x12145);
evalcond[0]=(((r22*x12146))+(((-1.0)*gconst14*r20*x12161))+((r21*x12159)));
evalcond[1]=((((-1.0)*gconst14*r10*x12161))+cj0+((r12*x12146))+((r11*x12159)));
evalcond[2]=((((-1.0)*x12145*x12157))+(((-1.0)*sj0))+((r02*x12146))+((r01*x12159)));
evalcond[3]=(((r21*x12146*x12148))+x12155+(((-1.0)*sj1*x12150))+((r20*x12154))+(((-1.0)*r22*sj3*x12161))+((r21*x12152))+(((-1.0)*r20*x12151*x12158)));
evalcond[4]=((((-1.0)*r21*x12154*x12158))+((r20*x12146*x12152))+(((-1.0)*x12153))+((r20*x12148))+((r21*x12151))+(((-1.0)*cj1*x12150))+((r22*x12160)));
evalcond[5]=((((-1.0)*r00*x12151*x12158))+((cj0*x12156))+((cj0*x12153))+((r01*x12152))+((r00*x12154))+((r01*x12146*x12148))+(((-1.0)*r02*sj3*x12161)));
evalcond[6]=(((r02*x12160))+((cj0*x12155))+((r01*x12151))+((r00*x12148))+((r00*x12146*x12152))+(((-1.0)*cj0*sj1*x12150))+(((-1.0)*r01*x12154*x12158)));
evalcond[7]=(((sj0*x12156))+(((-1.0)*r12*sj3*x12161))+(((-1.0)*r10*x12151*x12158))+((r10*x12154))+((gconst14*x12147))+((r11*x12146*x12148))+((cj2*x12149)));
evalcond[8]=(((r10*x12146*x12152))+((sj0*x12155))+(((-1.0)*gconst13*x12147*x12158))+((r10*x12148))+((r11*x12151))+(((-1.0)*x12149*x12150))+((r12*x12160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12163 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12163)==0){
continue;
}
IkReal x12162=pow(x12163,-0.5);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x12164.value))));
IkReal gconst16=((1.0)*r01*x12162);
IkReal gconst17=((-1.0)*r00*x12162);
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12165.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x12168 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12168.valid){
continue;
}
IkReal x12166=((1.0)*(x12168.value));
IkReal x12167=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12166)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12166)));
IkReal gconst16=((1.0)*r01*x12167);
IkReal gconst17=((-1.0)*r00*x12167);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
IkReal x12169=((1.0)*(x12171.value));
IkReal x12170=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12169)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12169)));
IkReal gconst16=((1.0)*r01*x12170);
IkReal gconst17=((-1.0)*r00*x12170);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12174 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12174.valid){
continue;
}
IkReal x12172=((1.0)*(x12174.value));
IkReal x12173=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12172)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12172)));
IkReal gconst16=((1.0)*r01*x12173);
IkReal gconst17=((-1.0)*r00*x12173);
IkReal x12175=r02*r02;
IkReal x12176=(r12*sj0);
IkReal x12177=((1.0)*cj0);
IkReal x12178=x12162;
j4eval[0]=((IKabs(((((-1.0)*x12177*x12178))+((cj0*x12175*x12178))+((r02*x12176*x12178)))))+(IKabs(((((-1.0)*x12176))+(((-1.0)*r02*x12177))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
IkReal x12179=((1.0)*(x12181.value));
IkReal x12180=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12179)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12179)));
IkReal gconst16=((1.0)*r01*x12180);
IkReal gconst17=((-1.0)*r00*x12180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12184 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12184.valid){
continue;
}
IkReal x12182=((1.0)*(x12184.value));
IkReal x12183=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12182)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12182)));
IkReal gconst16=((1.0)*r01*x12183);
IkReal gconst17=((-1.0)*r00*x12183);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12185=gconst16*gconst16;
IkReal x12186=gconst17*gconst17;
IkReal x12187=(cj3*r11);
IkReal x12188=((1.0)*sj3);
IkReal x12189=(gconst16*r10);
IkReal x12190=(gconst17*r20);
IkReal x12191=(gconst17*r11);
IkReal x12192=(r21*x12185);
IkReal x12193=(r20*x12186);
CheckValue<IkReal> x12194 = IKatan2WithCheck(IkReal((((r10*sj3*x12192))+(((-1.0)*x12188*x12189*x12190))+((gconst16*r21*sj3*x12191))+(((-1.0)*r11*x12188*x12193)))),IkReal(((((-1.0)*r22*x12188*x12189))+(((-1.0)*r22*x12188*x12191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12194.valid){
continue;
}
CheckValue<IkReal> x12195=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*gconst16*x12187*x12190))+((x12187*x12192))+(((-1.0)*cj3*gconst17*r21*x12189))+((cj3*r10*x12193)))),-1);
if(!x12195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12194.value)+(((1.5707963267949)*(x12195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12196=IKcos(j4);
IkReal x12197=IKsin(j4);
IkReal x12198=((1.0)*cj1);
IkReal x12199=(r21*sj3);
IkReal x12200=(cj3*gconst16);
IkReal x12201=(sj1*sj2);
IkReal x12202=(r11*sj3);
IkReal x12203=((1.0)*cj3);
IkReal x12204=(r01*sj3);
IkReal x12205=(cj3*gconst17);
IkReal x12206=(gconst17*r20);
IkReal x12207=(gconst16*sj3);
IkReal x12208=(sj2*x12198);
IkReal x12209=((1.0)*cj2*sj1);
IkReal x12210=(gconst16*x12197);
IkReal x12211=((1.0)*x12196);
IkReal x12212=(cj3*x12196);
IkReal x12213=(gconst16*x12196);
IkReal x12214=(x12197*x12205);
IkReal x12215=((1.0)*gconst17*sj3*x12197);
IkReal x12216=(x12208+x12209);
evalcond[0]=(((r22*x12197))+((r21*x12213))+(((-1.0)*x12206*x12211)));
evalcond[1]=((((-1.0)*gconst17*r00*x12211))+((r02*x12197))+((r01*x12213)));
evalcond[2]=((-1.0)+((r12*x12197))+(((-1.0)*gconst17*r10*x12211))+((r11*x12213)));
evalcond[3]=(((r12*x12212))+((gconst17*x12202))+(((-1.0)*r11*x12197*x12200))+((r10*x12214))+((r10*x12207)));
evalcond[4]=((((-1.0)*r12*sj3*x12211))+((x12202*x12210))+(((-1.0)*r10*x12215))+((r10*x12200))+((r11*x12205)));
evalcond[5]=(((r02*x12212))+((gconst17*x12204))+(((-1.0)*cj2*x12198))+x12201+(((-1.0)*r01*x12197*x12200))+((r00*x12214))+((r00*x12207)));
evalcond[6]=((((-1.0)*x12201))+(((-1.0)*r22*sj3*x12211))+((r21*x12205))+((r20*x12200))+((cj1*cj2))+(((-1.0)*sj3*x12197*x12206))+((x12199*x12210)));
evalcond[7]=((((-1.0)*x12216))+((r22*x12212))+(((-1.0)*r21*x12197*x12200))+((gconst17*x12199))+((r20*x12207))+((r20*x12214)));
evalcond[8]=((((-1.0)*x12216))+(((-1.0)*r00*x12215))+((x12204*x12210))+(((-1.0)*r02*sj3*x12211))+((r01*x12205))+((r00*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12217=((1.0)*gconst17);
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal((((gconst16*r21))+(((-1.0)*r20*x12217)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
CheckValue<IkReal> x12219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x12217)))),-1);
if(!x12219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12218.value)+(((1.5707963267949)*(x12219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12220=IKcos(j4);
IkReal x12221=IKsin(j4);
IkReal x12222=((1.0)*cj1);
IkReal x12223=(r21*sj3);
IkReal x12224=(cj3*gconst16);
IkReal x12225=(sj1*sj2);
IkReal x12226=(r11*sj3);
IkReal x12227=((1.0)*cj3);
IkReal x12228=(r01*sj3);
IkReal x12229=(cj3*gconst17);
IkReal x12230=(gconst17*r20);
IkReal x12231=(gconst16*sj3);
IkReal x12232=(sj2*x12222);
IkReal x12233=((1.0)*cj2*sj1);
IkReal x12234=(gconst16*x12221);
IkReal x12235=((1.0)*x12220);
IkReal x12236=(cj3*x12220);
IkReal x12237=(gconst16*x12220);
IkReal x12238=(x12221*x12229);
IkReal x12239=((1.0)*gconst17*sj3*x12221);
IkReal x12240=(x12233+x12232);
evalcond[0]=((((-1.0)*x12230*x12235))+((r22*x12221))+((r21*x12237)));
evalcond[1]=((((-1.0)*gconst17*r00*x12235))+((r01*x12237))+((r02*x12221)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x12235))+((r11*x12237))+((r12*x12221)));
evalcond[3]=(((r10*x12238))+((r10*x12231))+((gconst17*x12226))+((r12*x12236))+(((-1.0)*r11*x12221*x12224)));
evalcond[4]=(((r11*x12229))+(((-1.0)*r12*sj3*x12235))+((r10*x12224))+((x12226*x12234))+(((-1.0)*r10*x12239)));
evalcond[5]=(((gconst17*x12228))+((r00*x12231))+((r00*x12238))+x12225+(((-1.0)*r01*x12221*x12224))+(((-1.0)*cj2*x12222))+((r02*x12236)));
evalcond[6]=((((-1.0)*sj3*x12221*x12230))+((r21*x12229))+((x12223*x12234))+((cj1*cj2))+(((-1.0)*r22*sj3*x12235))+((r20*x12224))+(((-1.0)*x12225)));
evalcond[7]=(((gconst17*x12223))+((r20*x12238))+((r20*x12231))+(((-1.0)*x12240))+(((-1.0)*r21*x12221*x12224))+((r22*x12236)));
evalcond[8]=((((-1.0)*r02*sj3*x12235))+(((-1.0)*r00*x12239))+((x12228*x12234))+((r01*x12229))+(((-1.0)*x12240))+((r00*x12224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12241 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r00))+((gconst16*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12241.valid){
continue;
}
CheckValue<IkReal> x12242=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x12242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12241.value)+(((1.5707963267949)*(x12242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12243=IKcos(j4);
IkReal x12244=IKsin(j4);
IkReal x12245=((1.0)*cj1);
IkReal x12246=(r21*sj3);
IkReal x12247=(cj3*gconst16);
IkReal x12248=(sj1*sj2);
IkReal x12249=(r11*sj3);
IkReal x12250=((1.0)*cj3);
IkReal x12251=(r01*sj3);
IkReal x12252=(cj3*gconst17);
IkReal x12253=(gconst17*r20);
IkReal x12254=(gconst16*sj3);
IkReal x12255=(sj2*x12245);
IkReal x12256=((1.0)*cj2*sj1);
IkReal x12257=(gconst16*x12244);
IkReal x12258=((1.0)*x12243);
IkReal x12259=(cj3*x12243);
IkReal x12260=(gconst16*x12243);
IkReal x12261=(x12244*x12252);
IkReal x12262=((1.0)*gconst17*sj3*x12244);
IkReal x12263=(x12255+x12256);
evalcond[0]=((((-1.0)*x12253*x12258))+((r22*x12244))+((r21*x12260)));
evalcond[1]=((((-1.0)*gconst17*r00*x12258))+((r01*x12260))+((r02*x12244)));
evalcond[2]=((-1.0)+((r11*x12260))+((r12*x12244))+(((-1.0)*gconst17*r10*x12258)));
evalcond[3]=((((-1.0)*r11*x12244*x12247))+((r12*x12259))+((r10*x12261))+((r10*x12254))+((gconst17*x12249)));
evalcond[4]=(((r11*x12252))+((r10*x12247))+((x12249*x12257))+(((-1.0)*r12*sj3*x12258))+(((-1.0)*r10*x12262)));
evalcond[5]=(x12248+((r00*x12261))+((r00*x12254))+(((-1.0)*cj2*x12245))+((gconst17*x12251))+((r02*x12259))+(((-1.0)*r01*x12244*x12247)));
evalcond[6]=((((-1.0)*sj3*x12244*x12253))+((x12246*x12257))+((r20*x12247))+(((-1.0)*x12248))+((cj1*cj2))+((r21*x12252))+(((-1.0)*r22*sj3*x12258)));
evalcond[7]=(((r22*x12259))+(((-1.0)*r21*x12244*x12247))+((r20*x12254))+((r20*x12261))+(((-1.0)*x12263))+((gconst17*x12246)));
evalcond[8]=(((r01*x12252))+((x12251*x12257))+((r00*x12247))+(((-1.0)*r00*x12262))+(((-1.0)*x12263))+(((-1.0)*r02*sj3*x12258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12264=(gconst17*r20);
IkReal x12265=(gconst16*r21);
op[0]=(x12264+(((-1.0)*x12265)));
op[1]=((2.0)*r22);
op[2]=(x12265+(((-1.0)*x12264)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x12266=(gconst17*r20);
IkReal x12267=(gconst16*r21);
op[0]=(x12266+(((-1.0)*x12267)));
op[1]=((2.0)*r22);
op[2]=(x12267+(((-1.0)*x12266)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12270 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12270.valid){
continue;
}
IkReal x12268=((1.0)*(x12270.value));
IkReal x12269=x12162;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x12268)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x12268)));
IkReal gconst16=((1.0)*r01*x12269);
IkReal gconst17=((-1.0)*r00*x12269);
IkReal x12271=r02*r02;
IkReal x12272=(r12*sj0);
IkReal x12273=((1.0)*cj0);
IkReal x12274=x12162;
j4eval[0]=((IKabs(((((-1.0)*x12272))+(((-1.0)*r02*x12273)))))+(IKabs((((r02*x12272*x12274))+(((-1.0)*x12273*x12274))+((cj0*x12271*x12274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12275=(sj1*sj2);
IkReal x12276=((1.0)*r21);
IkReal x12277=(gconst16*sj3);
IkReal x12278=(cj3*gconst17);
IkReal x12279=(gconst17*r20);
IkReal x12280=(cj1*cj2);
IkReal x12281=(cj3*gconst16*r20);
CheckValue<IkReal> x12282=IKPowWithIntegerCheck(((((-1.0)*sj3*x12279))+((r21*x12277))),-1);
if(!x12282.valid){
continue;
}
CheckValue<IkReal> x12283=IKPowWithIntegerCheck((((gconst16*r11*r21*x12277))+((gconst17*r10*sj3*x12279))+(((-1.0)*gconst17*r10*x12276*x12277))+(((-1.0)*r11*x12277*x12279))),-1);
if(!x12283.valid){
continue;
}
if( IKabs(((x12282.value)*((x12275+(((-1.0)*x12280))+(((-1.0)*x12281))+(((-1.0)*x12276*x12278)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12283.value)*((((r12*r21*x12278))+((r12*x12280))+((r12*x12281))+(((-1.0)*cj0*x12276*x12277))+((cj0*sj3*x12279))+(((-1.0)*r12*x12275)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12282.value)*((x12275+(((-1.0)*x12280))+(((-1.0)*x12281))+(((-1.0)*x12276*x12278))))))+IKsqr(((x12283.value)*((((r12*r21*x12278))+((r12*x12280))+((r12*x12281))+(((-1.0)*cj0*x12276*x12277))+((cj0*sj3*x12279))+(((-1.0)*r12*x12275))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12282.value)*((x12275+(((-1.0)*x12280))+(((-1.0)*x12281))+(((-1.0)*x12276*x12278))))), ((x12283.value)*((((r12*r21*x12278))+((r12*x12280))+((r12*x12281))+(((-1.0)*cj0*x12276*x12277))+((cj0*sj3*x12279))+(((-1.0)*r12*x12275))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12284=IKcos(j4);
IkReal x12285=IKsin(j4);
IkReal x12286=(gconst17*sj3);
IkReal x12287=(cj3*r20);
IkReal x12288=(cj2*sj0);
IkReal x12289=((1.0)*sj0);
IkReal x12290=((1.0)*sj1);
IkReal x12291=(cj3*gconst17);
IkReal x12292=(gconst16*sj3);
IkReal x12293=(cj3*gconst16);
IkReal x12294=(cj1*sj2);
IkReal x12295=(cj0*cj2);
IkReal x12296=(gconst17*x12285);
IkReal x12297=((1.0)*x12285);
IkReal x12298=(gconst16*x12284);
IkReal x12299=((1.0)*x12284);
IkReal x12300=(cj3*x12284);
IkReal x12301=(x12285*x12292);
evalcond[0]=(((r21*x12298))+(((-1.0)*gconst17*r20*x12299)));
evalcond[1]=((((-1.0)*gconst17*r10*x12299))+cj0+((r11*x12298))+((r12*x12285)));
evalcond[2]=(((r01*x12298))+((r02*x12285))+(((-1.0)*gconst17*r00*x12299))+(((-1.0)*x12289)));
evalcond[3]=(((r21*x12291))+((r21*x12301))+(((-1.0)*sj2*x12290))+((cj1*cj2))+(((-1.0)*r20*x12286*x12297))+((gconst16*x12287)));
evalcond[4]=(((r20*x12292))+(((-1.0)*x12294))+(((-1.0)*r21*x12293*x12297))+((x12287*x12296))+((r21*x12286))+(((-1.0)*cj2*x12290)));
evalcond[5]=((((-1.0)*r02*sj3*x12299))+((r01*x12291))+((r00*x12293))+((cj0*x12294))+((sj1*x12295))+(((-1.0)*r00*x12286*x12297))+((r01*x12301)));
evalcond[6]=(((cj1*x12295))+(((-1.0)*r01*x12293*x12297))+((r00*x12292))+((r01*x12286))+((r00*x12285*x12291))+(((-1.0)*cj0*sj2*x12290))+((r02*x12300)));
evalcond[7]=((((-1.0)*r10*x12286*x12297))+((sj1*x12288))+((r10*x12293))+((r11*x12301))+((r11*x12291))+((sj0*x12294))+(((-1.0)*r12*sj3*x12299)));
evalcond[8]=(((r10*x12292))+((r10*x12285*x12291))+((r12*x12300))+(((-1.0)*sj1*sj2*x12289))+(((-1.0)*r11*x12293*x12297))+((r11*x12286))+((cj1*x12288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12302=((1.0)*sj0);
IkReal x12303=((1.0)*gconst17);
CheckValue<IkReal> x12304 = IKatan2WithCheck(IkReal((((gconst16*r11*sj0))+((cj0*gconst16*r01))+(((-1.0)*cj0*r00*x12303))+(((-1.0)*gconst17*r10*x12302)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12304.valid){
continue;
}
CheckValue<IkReal> x12305=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12303)))),-1);
if(!x12305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12304.value)+(((1.5707963267949)*(x12305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12306=IKcos(j4);
IkReal x12307=IKsin(j4);
IkReal x12308=(gconst17*sj3);
IkReal x12309=(cj3*r20);
IkReal x12310=(cj2*sj0);
IkReal x12311=((1.0)*sj0);
IkReal x12312=((1.0)*sj1);
IkReal x12313=(cj3*gconst17);
IkReal x12314=(gconst16*sj3);
IkReal x12315=(cj3*gconst16);
IkReal x12316=(cj1*sj2);
IkReal x12317=(cj0*cj2);
IkReal x12318=(gconst17*x12307);
IkReal x12319=((1.0)*x12307);
IkReal x12320=(gconst16*x12306);
IkReal x12321=((1.0)*x12306);
IkReal x12322=(cj3*x12306);
IkReal x12323=(x12307*x12314);
evalcond[0]=(((r21*x12320))+(((-1.0)*gconst17*r20*x12321)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x12321))+((r12*x12307))+((r11*x12320)));
evalcond[2]=(((r01*x12320))+(((-1.0)*gconst17*r00*x12321))+(((-1.0)*x12311))+((r02*x12307)));
evalcond[3]=((((-1.0)*sj2*x12312))+((gconst16*x12309))+((r21*x12323))+((cj1*cj2))+(((-1.0)*r20*x12308*x12319))+((r21*x12313)));
evalcond[4]=((((-1.0)*cj2*x12312))+((r21*x12308))+(((-1.0)*x12316))+((x12309*x12318))+((r20*x12314))+(((-1.0)*r21*x12315*x12319)));
evalcond[5]=((((-1.0)*r00*x12308*x12319))+((sj1*x12317))+((r01*x12323))+((cj0*x12316))+((r00*x12315))+((r01*x12313))+(((-1.0)*r02*sj3*x12321)));
evalcond[6]=(((cj1*x12317))+((r00*x12314))+(((-1.0)*cj0*sj2*x12312))+((r01*x12308))+((r02*x12322))+((r00*x12307*x12313))+(((-1.0)*r01*x12315*x12319)));
evalcond[7]=(((r10*x12315))+(((-1.0)*r10*x12308*x12319))+((r11*x12313))+((sj1*x12310))+((sj0*x12316))+(((-1.0)*r12*sj3*x12321))+((r11*x12323)));
evalcond[8]=((((-1.0)*sj1*sj2*x12311))+((cj1*x12310))+((r10*x12314))+((r11*x12308))+((r12*x12322))+((r10*x12307*x12313))+(((-1.0)*r11*x12315*x12319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12324=((1.0)*sj0);
IkReal x12325=((1.0)*gconst17);
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r00*x12325))+((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x12324))+((cj0*gconst16*r01)))),IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x12325)))),-1);
if(!x12327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12326.value)+(((1.5707963267949)*(x12327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12328=IKcos(j4);
IkReal x12329=IKsin(j4);
IkReal x12330=(gconst17*sj3);
IkReal x12331=(cj3*r20);
IkReal x12332=(cj2*sj0);
IkReal x12333=((1.0)*sj0);
IkReal x12334=((1.0)*sj1);
IkReal x12335=(cj3*gconst17);
IkReal x12336=(cj3*gconst16);
IkReal x12337=(cj1*sj2);
IkReal x12338=(cj0*cj2);
IkReal x12339=(gconst16*sj3);
IkReal x12340=(gconst17*x12329);
IkReal x12341=(r22*x12328);
IkReal x12342=((1.0)*x12329);
IkReal x12343=(gconst16*x12328);
IkReal x12344=((1.0)*x12328);
IkReal x12345=(cj3*x12328);
IkReal x12346=(x12329*x12339);
evalcond[0]=((((-1.0)*gconst17*r20*x12344))+((r22*x12329))+((r21*x12343)));
evalcond[1]=(cj0+(((-1.0)*gconst17*r10*x12344))+((r11*x12343))+((r12*x12329)));
evalcond[2]=((((-1.0)*gconst17*r00*x12344))+(((-1.0)*x12333))+((r01*x12343))+((r02*x12329)));
evalcond[3]=((((-1.0)*r20*x12330*x12342))+((r21*x12335))+(((-1.0)*sj3*x12341))+((gconst16*x12331))+((r21*x12346))+(((-1.0)*sj2*x12334))+((cj1*cj2)));
evalcond[4]=(((r20*x12339))+((cj3*x12341))+((r21*x12330))+(((-1.0)*r21*x12336*x12342))+(((-1.0)*cj2*x12334))+((x12331*x12340))+(((-1.0)*x12337)));
evalcond[5]=(((cj0*x12337))+((r01*x12335))+((r00*x12336))+((r01*x12346))+(((-1.0)*r00*x12330*x12342))+((sj1*x12338))+(((-1.0)*r02*sj3*x12344)));
evalcond[6]=(((r00*x12329*x12335))+((r01*x12330))+((r00*x12339))+(((-1.0)*r01*x12336*x12342))+((cj1*x12338))+((r02*x12345))+(((-1.0)*cj0*sj2*x12334)));
evalcond[7]=((((-1.0)*r10*x12330*x12342))+((r11*x12346))+((r10*x12336))+((sj0*x12337))+(((-1.0)*r12*sj3*x12344))+((sj1*x12332))+((r11*x12335)));
evalcond[8]=((((-1.0)*r11*x12336*x12342))+((r10*x12329*x12335))+((cj1*x12332))+((r10*x12339))+(((-1.0)*sj1*sj2*x12333))+((r11*x12330))+((r12*x12345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12347 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r20*sj0))+((gconst16*r21*sj0)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x12347.valid){
continue;
}
CheckValue<IkReal> x12348=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x12348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12347.value)+(((1.5707963267949)*(x12348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12349=IKcos(j4);
IkReal x12350=IKsin(j4);
IkReal x12351=(gconst17*sj3);
IkReal x12352=(cj3*r20);
IkReal x12353=(cj2*sj0);
IkReal x12354=((1.0)*sj0);
IkReal x12355=((1.0)*sj1);
IkReal x12356=(cj3*gconst17);
IkReal x12357=(cj3*gconst16);
IkReal x12358=(cj1*sj2);
IkReal x12359=(cj0*cj2);
IkReal x12360=(gconst16*sj3);
IkReal x12361=(gconst17*x12350);
IkReal x12362=(r22*x12349);
IkReal x12363=((1.0)*x12350);
IkReal x12364=(gconst16*x12349);
IkReal x12365=((1.0)*x12349);
IkReal x12366=(cj3*x12349);
IkReal x12367=(x12350*x12360);
evalcond[0]=(((r22*x12350))+((r21*x12364))+(((-1.0)*gconst17*r20*x12365)));
evalcond[1]=(((r11*x12364))+cj0+(((-1.0)*gconst17*r10*x12365))+((r12*x12350)));
evalcond[2]=((((-1.0)*gconst17*r00*x12365))+(((-1.0)*x12354))+((r02*x12350))+((r01*x12364)));
evalcond[3]=((((-1.0)*r20*x12351*x12363))+((gconst16*x12352))+((r21*x12367))+(((-1.0)*sj2*x12355))+((r21*x12356))+((cj1*cj2))+(((-1.0)*sj3*x12362)));
evalcond[4]=((((-1.0)*x12358))+(((-1.0)*cj2*x12355))+((r21*x12351))+((cj3*x12362))+(((-1.0)*r21*x12357*x12363))+((x12352*x12361))+((r20*x12360)));
evalcond[5]=((((-1.0)*r02*sj3*x12365))+(((-1.0)*r00*x12351*x12363))+((cj0*x12358))+((r01*x12356))+((r00*x12357))+((r01*x12367))+((sj1*x12359)));
evalcond[6]=((((-1.0)*cj0*sj2*x12355))+((r01*x12351))+((r00*x12350*x12356))+((cj1*x12359))+(((-1.0)*r01*x12357*x12363))+((r02*x12366))+((r00*x12360)));
evalcond[7]=(((r11*x12367))+(((-1.0)*r10*x12351*x12363))+((r11*x12356))+((sj0*x12358))+((r10*x12357))+(((-1.0)*r12*sj3*x12365))+((sj1*x12353)));
evalcond[8]=((((-1.0)*r11*x12357*x12363))+((r10*x12360))+((cj1*x12353))+((r11*x12351))+((r10*x12350*x12356))+(((-1.0)*sj1*sj2*x12354))+((r12*x12366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12368=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x12368.valid){
continue;
}
CheckValue<IkReal> x12369 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*gconst17*r20))+((cj0*gconst16*r21)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12368.value)))+(x12369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12370=IKcos(j4);
IkReal x12371=IKsin(j4);
IkReal x12372=(gconst17*sj3);
IkReal x12373=(cj3*r20);
IkReal x12374=(cj2*sj0);
IkReal x12375=((1.0)*sj0);
IkReal x12376=((1.0)*sj1);
IkReal x12377=(cj3*gconst17);
IkReal x12378=(cj3*gconst16);
IkReal x12379=(cj1*sj2);
IkReal x12380=(cj0*cj2);
IkReal x12381=(gconst16*sj3);
IkReal x12382=(gconst17*x12371);
IkReal x12383=(r22*x12370);
IkReal x12384=((1.0)*x12371);
IkReal x12385=(gconst16*x12370);
IkReal x12386=((1.0)*x12370);
IkReal x12387=(cj3*x12370);
IkReal x12388=(x12371*x12381);
evalcond[0]=(((r21*x12385))+((r22*x12371))+(((-1.0)*gconst17*r20*x12386)));
evalcond[1]=(((r11*x12385))+cj0+(((-1.0)*gconst17*r10*x12386))+((r12*x12371)));
evalcond[2]=((((-1.0)*x12375))+((r01*x12385))+((r02*x12371))+(((-1.0)*gconst17*r00*x12386)));
evalcond[3]=((((-1.0)*r20*x12372*x12384))+((r21*x12377))+((r21*x12388))+(((-1.0)*sj2*x12376))+((cj1*cj2))+(((-1.0)*sj3*x12383))+((gconst16*x12373)));
evalcond[4]=((((-1.0)*r21*x12378*x12384))+((cj3*x12383))+((x12373*x12382))+((r21*x12372))+((r20*x12381))+(((-1.0)*cj2*x12376))+(((-1.0)*x12379)));
evalcond[5]=(((r01*x12388))+(((-1.0)*r00*x12372*x12384))+(((-1.0)*r02*sj3*x12386))+((cj0*x12379))+((sj1*x12380))+((r01*x12377))+((r00*x12378)));
evalcond[6]=((((-1.0)*cj0*sj2*x12376))+((r02*x12387))+((cj1*x12380))+((r00*x12381))+(((-1.0)*r01*x12378*x12384))+((r00*x12371*x12377))+((r01*x12372)));
evalcond[7]=(((r11*x12388))+((r11*x12377))+((r10*x12378))+(((-1.0)*r10*x12372*x12384))+(((-1.0)*r12*sj3*x12386))+((sj0*x12379))+((sj1*x12374)));
evalcond[8]=(((r12*x12387))+((r11*x12372))+(((-1.0)*r11*x12378*x12384))+((r10*x12381))+((cj1*x12374))+(((-1.0)*sj1*sj2*x12375))+((r10*x12371*x12377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12389=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12389;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12390=((1.0)*cj5);
IkReal x12391=((((-1.0)*r21*x12390))+(((-1.0)*r20*sj5)));
j4eval[0]=x12391;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12390))))));
j4eval[2]=IKsign(x12391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x12392=cj5*cj5;
IkReal x12393=(cj3*r00);
IkReal x12394=(cj3*r01);
IkReal x12395=((1.0)*cj5*sj5);
IkReal x12396=((((-1.0)*r21*x12393*x12395))+(((-1.0)*r21*x12392*x12394))+((r20*x12392*x12393))+((r21*x12394))+(((-1.0)*r20*x12394*x12395))+((cj3*r02*r22)));
j4eval[0]=x12396;
j4eval[1]=IKsign(x12396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12397=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12397;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12398=((1.0)*cj5);
IkReal x12399=((((-1.0)*r21*x12398))+(((-1.0)*r20*sj5)));
j4eval[0]=x12399;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12398))))));
j4eval[2]=IKsign(x12399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12400=cj5*cj5;
IkReal x12401=r01*r01;
IkReal x12402=(cj5*r00);
IkReal x12403=(r01*sj5);
IkReal x12404=((((-2.0)*x12402*x12403))+((x12400*(r00*r00)))+(r02*r02)+(((-1.0)*x12400*x12401))+x12401);
j4eval[0]=x12404;
j4eval[1]=IKsign(x12404);
j4eval[2]=((IKabs((x12403+(((-1.0)*x12402)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12405=cj5*cj5;
IkReal x12406=r01*r01;
IkReal x12407=(r01*sj5);
IkReal x12408=(cj5*r00);
CheckValue<IkReal> x12409=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12405*x12406))+(((-2.0)*x12407*x12408))+((x12405*(r00*r00)))+(r02*r02)+x12406)),-1);
if(!x12409.valid){
continue;
}
CheckValue<IkReal> x12410 = IKatan2WithCheck(IkReal(r02),IkReal((x12407+(((-1.0)*x12408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12409.value)))+(x12410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12411=IKcos(j4);
IkReal x12412=IKsin(j4);
IkReal x12413=(cj5*r00);
IkReal x12414=(cj5*r10);
IkReal x12415=(cj5*r20);
IkReal x12416=((1.0)*x12411);
IkReal x12417=((1.0)*x12412);
IkReal x12418=(sj5*x12411);
IkReal x12419=(sj5*x12412);
evalcond[0]=(((r21*x12418))+(((-1.0)*x12415*x12416))+((r22*x12412)));
evalcond[1]=(((r11*x12418))+((r12*x12412))+(((-1.0)*x12414*x12416)));
evalcond[2]=((-1.0)+((r01*x12418))+((r02*x12412))+(((-1.0)*x12413*x12416)));
evalcond[3]=(((r01*x12419))+(((-1.0)*r02*x12416))+(((-1.0)*x12413*x12417)));
evalcond[4]=(((cj2*sj1))+((r11*x12419))+((cj1*sj2))+(((-1.0)*r12*x12416))+(((-1.0)*x12414*x12417)));
evalcond[5]=((((-1.0)*r22*x12416))+((r21*x12419))+(((-1.0)*x12415*x12417))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12420=((1.0)*cj5);
CheckValue<IkReal> x12421 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12420))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12421.valid){
continue;
}
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12420))+(((-1.0)*r20*sj5)))),-1);
if(!x12422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12421.value)+(((1.5707963267949)*(x12422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12423=IKcos(j4);
IkReal x12424=IKsin(j4);
IkReal x12425=(cj5*r00);
IkReal x12426=(cj5*r10);
IkReal x12427=(cj5*r20);
IkReal x12428=((1.0)*x12423);
IkReal x12429=((1.0)*x12424);
IkReal x12430=(sj5*x12423);
IkReal x12431=(sj5*x12424);
evalcond[0]=((((-1.0)*x12427*x12428))+((r21*x12430))+((r22*x12424)));
evalcond[1]=(((r12*x12424))+((r11*x12430))+(((-1.0)*x12426*x12428)));
evalcond[2]=((-1.0)+(((-1.0)*x12425*x12428))+((r02*x12424))+((r01*x12430)));
evalcond[3]=((((-1.0)*x12425*x12429))+(((-1.0)*r02*x12428))+((r01*x12431)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x12431))+(((-1.0)*r12*x12428))+(((-1.0)*x12426*x12429)));
evalcond[5]=((((-1.0)*x12427*x12429))+((r21*x12431))+(((-1.0)*sj1*sj2))+(((-1.0)*r22*x12428))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12432 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12432.valid){
continue;
}
CheckValue<IkReal> x12433=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12432.value)+(((1.5707963267949)*(x12433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12434=IKcos(j4);
IkReal x12435=IKsin(j4);
IkReal x12436=(cj5*r00);
IkReal x12437=(cj5*r10);
IkReal x12438=(cj5*r20);
IkReal x12439=((1.0)*x12434);
IkReal x12440=((1.0)*x12435);
IkReal x12441=(sj5*x12434);
IkReal x12442=(sj5*x12435);
evalcond[0]=(((r21*x12441))+((r22*x12435))+(((-1.0)*x12438*x12439)));
evalcond[1]=((((-1.0)*x12437*x12439))+((r11*x12441))+((r12*x12435)));
evalcond[2]=((-1.0)+((r01*x12441))+((r02*x12435))+(((-1.0)*x12436*x12439)));
evalcond[3]=(((r01*x12442))+(((-1.0)*x12436*x12440))+(((-1.0)*r02*x12439)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x12437*x12440))+((r11*x12442))+(((-1.0)*r12*x12439)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r21*x12442))+(((-1.0)*x12438*x12440))+(((-1.0)*r22*x12439))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12443=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12443;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12444=((1.0)*cj5);
IkReal x12445=((((-1.0)*r21*x12444))+(((-1.0)*r20*sj5)));
j4eval[0]=x12445;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12444))+((r11*sj5))))));
j4eval[2]=IKsign(x12445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12446=cj5*cj5;
IkReal x12447=r01*r01;
IkReal x12448=(cj5*r00);
IkReal x12449=(r01*sj5);
IkReal x12450=((((-1.0)*x12446*x12447))+((x12446*(r00*r00)))+(((-2.0)*x12448*x12449))+(r02*r02)+x12447);
j4eval[0]=x12450;
j4eval[1]=IKsign(x12450);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12448))+x12449))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12451=cj5*cj5;
IkReal x12452=r01*r01;
IkReal x12453=(r01*sj5);
IkReal x12454=(cj5*r00);
CheckValue<IkReal> x12455=IKPowWithIntegerCheck(IKsign((((x12451*(r00*r00)))+(((-1.0)*x12451*x12452))+(((-2.0)*x12453*x12454))+(r02*r02)+x12452)),-1);
if(!x12455.valid){
continue;
}
CheckValue<IkReal> x12456 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12454))+x12453)),IKFAST_ATAN2_MAGTHRESH);
if(!x12456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12455.value)))+(x12456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12457=IKcos(j4);
IkReal x12458=IKsin(j4);
IkReal x12459=(cj5*r00);
IkReal x12460=((1.0)*x12457);
IkReal x12461=(sj5*x12457);
IkReal x12462=(cj5*x12458);
IkReal x12463=((1.0)*sj5*x12458);
evalcond[0]=(((r22*x12458))+((r21*x12461))+(((-1.0)*cj5*r20*x12460)));
evalcond[1]=(((r11*x12461))+((r12*x12458))+(((-1.0)*cj5*r10*x12460)));
evalcond[2]=(((r02*x12457))+((x12458*x12459))+(((-1.0)*r01*x12463)));
evalcond[3]=((-1.0)+((r02*x12458))+((r01*x12461))+(((-1.0)*x12459*x12460)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12457))+((r10*x12462))+(((-1.0)*r11*x12463)));
evalcond[5]=((((-1.0)*r21*x12463))+((r22*x12457))+(((-1.0)*sj1*sj2))+((r20*x12462))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12464=((1.0)*cj5);
CheckValue<IkReal> x12465 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12464)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12465.valid){
continue;
}
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12464))+(((-1.0)*r20*sj5)))),-1);
if(!x12466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12465.value)+(((1.5707963267949)*(x12466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12467=IKcos(j4);
IkReal x12468=IKsin(j4);
IkReal x12469=(cj5*r00);
IkReal x12470=((1.0)*x12467);
IkReal x12471=(sj5*x12467);
IkReal x12472=(cj5*x12468);
IkReal x12473=((1.0)*sj5*x12468);
evalcond[0]=((((-1.0)*cj5*r20*x12470))+((r22*x12468))+((r21*x12471)));
evalcond[1]=(((r12*x12468))+((r11*x12471))+(((-1.0)*cj5*r10*x12470)));
evalcond[2]=(((r02*x12467))+((x12468*x12469))+(((-1.0)*r01*x12473)));
evalcond[3]=((-1.0)+((r01*x12471))+((r02*x12468))+(((-1.0)*x12469*x12470)));
evalcond[4]=((((-1.0)*r11*x12473))+((cj2*sj1))+((r12*x12467))+((cj1*sj2))+((r10*x12472)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r21*x12473))+((r20*x12472))+((cj1*cj2))+((r22*x12467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12474 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12474.valid){
continue;
}
CheckValue<IkReal> x12475=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12474.value)+(((1.5707963267949)*(x12475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12476=IKcos(j4);
IkReal x12477=IKsin(j4);
IkReal x12478=(cj5*r00);
IkReal x12479=((1.0)*x12476);
IkReal x12480=(sj5*x12476);
IkReal x12481=(cj5*x12477);
IkReal x12482=((1.0)*sj5*x12477);
evalcond[0]=((((-1.0)*cj5*r20*x12479))+((r22*x12477))+((r21*x12480)));
evalcond[1]=(((r12*x12477))+((r11*x12480))+(((-1.0)*cj5*r10*x12479)));
evalcond[2]=(((x12477*x12478))+(((-1.0)*r01*x12482))+((r02*x12476)));
evalcond[3]=((-1.0)+((r01*x12480))+(((-1.0)*x12478*x12479))+((r02*x12477)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*x12482))+((cj1*sj2))+((r12*x12476))+((r10*x12481)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((r20*x12481))+((r22*x12476))+(((-1.0)*r21*x12482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12483=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12483);
rxp0_2=(py*r00);
rxp1_0=(r21*x12483);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12484=(r01*sj5);
IkReal x12485=((1.0)*cj5*r00);
j4eval[0]=(((sj3*x12484))+(((-1.0)*sj3*x12485)));
j4eval[1]=((((-1.0)*x12485))+x12484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12486=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12486);
rxp0_2=(py*r00);
rxp1_0=(r21*x12486);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x12487=(cj5*r00);
IkReal x12488=(r01*sj5);
j4eval[0]=((((-1.0)*cj3*x12488))+((cj3*x12487)));
j4eval[1]=((((-1.0)*x12487))+x12488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12489=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x12489);
rxp0_2=(py*r00);
rxp1_0=(r21*x12489);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r12;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12490=((1.0)*cj3);
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x12491.valid){
continue;
}
CheckValue<IkReal> x12492=IKPowWithIntegerCheck(r12,-1);
if(!x12492.valid){
continue;
}
CheckValue<IkReal> x12493=IKPowWithIntegerCheck(sj3,-1);
if(!x12493.valid){
continue;
}
if( IKabs(((x12491.value)*(((((-1.0)*cj5*r01*x12490))+(((-1.0)*r00*sj5*x12490)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12492.value)*(x12493.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12491.value)*(((((-1.0)*cj5*r01*x12490))+(((-1.0)*r00*sj5*x12490))))))+IKsqr(((x12492.value)*(x12493.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12491.value)*(((((-1.0)*cj5*r01*x12490))+(((-1.0)*r00*sj5*x12490))))), ((x12492.value)*(x12493.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12494=IKcos(j4);
IkReal x12495=IKsin(j4);
IkReal x12496=(cj1*cj2);
IkReal x12497=(cj5*r00);
IkReal x12498=(cj5*r01);
IkReal x12499=((1.0)*sj1);
IkReal x12500=(r01*sj5);
IkReal x12501=(cj5*r20);
IkReal x12502=(cj1*sj2);
IkReal x12503=(r00*sj5);
IkReal x12504=(cj5*r21);
IkReal x12505=(r20*sj5);
IkReal x12506=(r21*sj5);
IkReal x12507=(sj2*x12499);
IkReal x12508=((1.0)*x12494);
IkReal x12509=(sj5*x12494);
IkReal x12510=(cj3*x12495);
IkReal x12511=(sj3*x12495);
evalcond[0]=(r12*x12495);
evalcond[1]=((((-1.0)*x12501*x12508))+((x12494*x12506)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12508))+x12502);
evalcond[3]=((((-1.0)*x12507))+x12496+((cj3*r12*x12494)));
evalcond[4]=((-1.0)+(((-1.0)*x12497*x12508))+((x12494*x12500)));
evalcond[5]=(((cj3*x12498))+((cj3*x12503))+((x12500*x12511))+(((-1.0)*x12497*x12511)));
evalcond[6]=(((sj3*x12503))+(((-1.0)*x12500*x12510))+((x12497*x12510))+((sj3*x12498)));
evalcond[7]=((((-1.0)*x12507))+(((-1.0)*x12501*x12511))+((cj3*x12504))+((cj3*x12505))+((x12506*x12511))+x12496);
evalcond[8]=((((-1.0)*x12506*x12510))+(((-1.0)*cj2*x12499))+((sj3*x12504))+((sj3*x12505))+(((-1.0)*x12502))+((x12501*x12510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12512=(cj5*r00);
IkReal x12513=(r01*sj5);
IkReal x12514=((1.0)*sj3);
CheckValue<IkReal> x12515=IKPowWithIntegerCheck(((((-1.0)*cj3*x12513))+((cj3*x12512))),-1);
if(!x12515.valid){
continue;
}
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(((((-1.0)*x12512))+x12513),-1);
if(!x12516.valid){
continue;
}
if( IKabs(((x12515.value)*(((((-1.0)*cj5*r01*x12514))+(((-1.0)*r00*sj5*x12514)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12516.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12515.value)*(((((-1.0)*cj5*r01*x12514))+(((-1.0)*r00*sj5*x12514))))))+IKsqr(x12516.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12515.value)*(((((-1.0)*cj5*r01*x12514))+(((-1.0)*r00*sj5*x12514))))), x12516.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12517=IKcos(j4);
IkReal x12518=IKsin(j4);
IkReal x12519=(cj1*cj2);
IkReal x12520=(cj5*r00);
IkReal x12521=(cj5*r01);
IkReal x12522=((1.0)*sj1);
IkReal x12523=(r01*sj5);
IkReal x12524=(cj5*r20);
IkReal x12525=(cj1*sj2);
IkReal x12526=(r00*sj5);
IkReal x12527=(cj5*r21);
IkReal x12528=(r20*sj5);
IkReal x12529=(r21*sj5);
IkReal x12530=(sj2*x12522);
IkReal x12531=((1.0)*x12517);
IkReal x12532=(sj5*x12517);
IkReal x12533=(cj3*x12518);
IkReal x12534=(sj3*x12518);
evalcond[0]=(r12*x12518);
evalcond[1]=(((x12517*x12529))+(((-1.0)*x12524*x12531)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12531))+x12525);
evalcond[3]=(((cj3*r12*x12517))+x12519+(((-1.0)*x12530)));
evalcond[4]=((-1.0)+(((-1.0)*x12520*x12531))+((x12517*x12523)));
evalcond[5]=((((-1.0)*x12520*x12534))+((x12523*x12534))+((cj3*x12526))+((cj3*x12521)));
evalcond[6]=(((sj3*x12526))+((sj3*x12521))+(((-1.0)*x12523*x12533))+((x12520*x12533)));
evalcond[7]=((((-1.0)*x12524*x12534))+x12519+(((-1.0)*x12530))+((cj3*x12528))+((cj3*x12527))+((x12529*x12534)));
evalcond[8]=(((sj3*x12527))+((sj3*x12528))+(((-1.0)*cj2*x12522))+(((-1.0)*x12529*x12533))+((x12524*x12533))+(((-1.0)*x12525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12535=((1.0)*cj3);
IkReal x12536=(r01*sj5);
IkReal x12537=((1.0)*cj5*r00);
CheckValue<IkReal> x12538=IKPowWithIntegerCheck(((((-1.0)*sj3*x12537))+((sj3*x12536))),-1);
if(!x12538.valid){
continue;
}
CheckValue<IkReal> x12539=IKPowWithIntegerCheck((x12536+(((-1.0)*x12537))),-1);
if(!x12539.valid){
continue;
}
if( IKabs(((x12538.value)*(((((-1.0)*r00*sj5*x12535))+(((-1.0)*cj5*r01*x12535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12539.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12538.value)*(((((-1.0)*r00*sj5*x12535))+(((-1.0)*cj5*r01*x12535))))))+IKsqr(x12539.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12538.value)*(((((-1.0)*r00*sj5*x12535))+(((-1.0)*cj5*r01*x12535))))), x12539.value);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12540=IKcos(j4);
IkReal x12541=IKsin(j4);
IkReal x12542=(cj1*cj2);
IkReal x12543=(cj5*r00);
IkReal x12544=(cj5*r01);
IkReal x12545=((1.0)*sj1);
IkReal x12546=(r01*sj5);
IkReal x12547=(cj5*r20);
IkReal x12548=(cj1*sj2);
IkReal x12549=(r00*sj5);
IkReal x12550=(cj5*r21);
IkReal x12551=(r20*sj5);
IkReal x12552=(r21*sj5);
IkReal x12553=(sj2*x12545);
IkReal x12554=((1.0)*x12540);
IkReal x12555=(sj5*x12540);
IkReal x12556=(cj3*x12541);
IkReal x12557=(sj3*x12541);
evalcond[0]=(r12*x12541);
evalcond[1]=((((-1.0)*x12547*x12554))+((x12540*x12552)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x12554))+x12548);
evalcond[3]=(((cj3*r12*x12540))+x12542+(((-1.0)*x12553)));
evalcond[4]=((-1.0)+((x12540*x12546))+(((-1.0)*x12543*x12554)));
evalcond[5]=(((x12546*x12557))+((cj3*x12544))+((cj3*x12549))+(((-1.0)*x12543*x12557)));
evalcond[6]=(((x12543*x12556))+((sj3*x12544))+((sj3*x12549))+(((-1.0)*x12546*x12556)));
evalcond[7]=((((-1.0)*x12547*x12557))+((cj3*x12550))+((cj3*x12551))+((x12552*x12557))+x12542+(((-1.0)*x12553)));
evalcond[8]=((((-1.0)*x12548))+((x12547*x12556))+(((-1.0)*x12552*x12556))+((sj3*x12551))+((sj3*x12550))+(((-1.0)*cj2*x12545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12558=cj5*cj5;
IkReal x12559=((1.0)*r00);
IkReal x12560=(r01*sj3);
IkReal x12561=(sj3*sj5);
IkReal x12562=(r21*sj3);
IkReal x12563=((1.0)*cj5);
IkReal x12564=(cj5*r21*sj5);
IkReal x12565=(cj3*r01*r21);
IkReal x12566=(r20*x12558);
CheckValue<IkReal> x12567 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*x12559*x12561))+((x12560*x12564))+((r00*x12562))+(((-1.0)*x12558*x12559*x12562))+(((-1.0)*x12560*x12566)))),IkReal(((((-1.0)*r22*x12560*x12563))+(((-1.0)*r22*x12559*x12561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12567.valid){
continue;
}
CheckValue<IkReal> x12568=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r01*r20*sj5*x12563))+(((-1.0)*cj3*x12559*x12564))+((cj3*r00*x12566))+(((-1.0)*x12558*x12565))+((cj3*r02*r22))+x12565)),-1);
if(!x12568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12567.value)+(((1.5707963267949)*(x12568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12569=IKcos(j4);
IkReal x12570=IKsin(j4);
IkReal x12571=(cj1*cj2);
IkReal x12572=((1.0)*cj5);
IkReal x12573=(cj5*r01);
IkReal x12574=((1.0)*sj1);
IkReal x12575=(cj3*sj5);
IkReal x12576=(cj3*cj5);
IkReal x12577=(cj5*sj3);
IkReal x12578=(sj3*sj5);
IkReal x12579=(cj1*sj2);
IkReal x12580=(sj2*x12574);
IkReal x12581=(sj5*x12569);
IkReal x12582=(sj3*x12570);
IkReal x12583=((1.0)*x12570);
IkReal x12584=(cj3*x12569);
IkReal x12585=((1.0)*sj3*x12569);
evalcond[0]=(((r22*x12570))+(((-1.0)*r20*x12569*x12572))+((r21*x12581)));
evalcond[1]=((((-1.0)*r10*x12569*x12572))+((r12*x12570))+((r11*x12581)));
evalcond[2]=((-1.0)+((r01*x12581))+((r02*x12570))+(((-1.0)*r00*x12569*x12572)));
evalcond[3]=(((r00*x12570*x12576))+(((-1.0)*r01*x12575*x12583))+((sj3*x12573))+((r02*x12584))+((r00*x12578)));
evalcond[4]=(((r01*x12570*x12578))+(((-1.0)*r02*x12585))+(((-1.0)*r00*x12572*x12582))+((r00*x12575))+((cj3*x12573)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x12585))+((r11*x12570*x12578))+(((-1.0)*r10*x12572*x12582))+((r11*x12576))+x12579+((r10*x12575)));
evalcond[6]=(((r12*x12584))+(((-1.0)*r11*x12575*x12583))+((r11*x12577))+x12571+(((-1.0)*x12580))+((r10*x12578))+((r10*x12570*x12576)));
evalcond[7]=((((-1.0)*r20*x12572*x12582))+((r21*x12576))+(((-1.0)*r22*x12585))+((r21*x12570*x12578))+((r20*x12575))+x12571+(((-1.0)*x12580)));
evalcond[8]=(((r20*x12570*x12576))+((r21*x12577))+(((-1.0)*cj2*x12574))+(((-1.0)*r21*x12575*x12583))+((r22*x12584))+(((-1.0)*x12579))+((r20*x12578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12586=((1.0)*cj5);
CheckValue<IkReal> x12587=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12586))+(((-1.0)*r20*sj5)))),-1);
if(!x12587.valid){
continue;
}
CheckValue<IkReal> x12588 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12586))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12588.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12587.value)))+(x12588.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12589=IKcos(j4);
IkReal x12590=IKsin(j4);
IkReal x12591=(cj1*cj2);
IkReal x12592=((1.0)*cj5);
IkReal x12593=(cj5*r01);
IkReal x12594=((1.0)*sj1);
IkReal x12595=(cj3*sj5);
IkReal x12596=(cj3*cj5);
IkReal x12597=(cj5*sj3);
IkReal x12598=(sj3*sj5);
IkReal x12599=(cj1*sj2);
IkReal x12600=(sj2*x12594);
IkReal x12601=(sj5*x12589);
IkReal x12602=(sj3*x12590);
IkReal x12603=((1.0)*x12590);
IkReal x12604=(cj3*x12589);
IkReal x12605=((1.0)*sj3*x12589);
evalcond[0]=((((-1.0)*r20*x12589*x12592))+((r22*x12590))+((r21*x12601)));
evalcond[1]=(((r12*x12590))+(((-1.0)*r10*x12589*x12592))+((r11*x12601)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x12589*x12592))+((r01*x12601))+((r02*x12590)));
evalcond[3]=(((r00*x12590*x12596))+((r00*x12598))+((sj3*x12593))+((r02*x12604))+(((-1.0)*r01*x12595*x12603)));
evalcond[4]=(((r01*x12590*x12598))+((r00*x12595))+(((-1.0)*r00*x12592*x12602))+((cj3*x12593))+(((-1.0)*r02*x12605)));
evalcond[5]=(((cj2*sj1))+((r11*x12590*x12598))+(((-1.0)*r12*x12605))+(((-1.0)*r10*x12592*x12602))+x12599+((r11*x12596))+((r10*x12595)));
evalcond[6]=((((-1.0)*x12600))+((r12*x12604))+x12591+((r10*x12590*x12596))+(((-1.0)*r11*x12595*x12603))+((r11*x12597))+((r10*x12598)));
evalcond[7]=(((r21*x12590*x12598))+(((-1.0)*x12600))+((r21*x12596))+(((-1.0)*r22*x12605))+(((-1.0)*r20*x12592*x12602))+x12591+((r20*x12595)));
evalcond[8]=((((-1.0)*cj2*x12594))+((r21*x12597))+((r22*x12604))+((r20*x12590*x12596))+(((-1.0)*r21*x12595*x12603))+(((-1.0)*x12599))+((r20*x12598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12606 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12606.valid){
continue;
}
CheckValue<IkReal> x12607=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12606.value)+(((1.5707963267949)*(x12607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12608=IKcos(j4);
IkReal x12609=IKsin(j4);
IkReal x12610=(cj1*cj2);
IkReal x12611=((1.0)*cj5);
IkReal x12612=(cj5*r01);
IkReal x12613=((1.0)*sj1);
IkReal x12614=(cj3*sj5);
IkReal x12615=(cj3*cj5);
IkReal x12616=(cj5*sj3);
IkReal x12617=(sj3*sj5);
IkReal x12618=(cj1*sj2);
IkReal x12619=(sj2*x12613);
IkReal x12620=(sj5*x12608);
IkReal x12621=(sj3*x12609);
IkReal x12622=((1.0)*x12609);
IkReal x12623=(cj3*x12608);
IkReal x12624=((1.0)*sj3*x12608);
evalcond[0]=(((r21*x12620))+((r22*x12609))+(((-1.0)*r20*x12608*x12611)));
evalcond[1]=(((r12*x12609))+(((-1.0)*r10*x12608*x12611))+((r11*x12620)));
evalcond[2]=((-1.0)+((r01*x12620))+((r02*x12609))+(((-1.0)*r00*x12608*x12611)));
evalcond[3]=(((r02*x12623))+((r00*x12609*x12615))+((sj3*x12612))+((r00*x12617))+(((-1.0)*r01*x12614*x12622)));
evalcond[4]=((((-1.0)*r02*x12624))+((cj3*x12612))+(((-1.0)*r00*x12611*x12621))+((r00*x12614))+((r01*x12609*x12617)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r12*x12624))+(((-1.0)*r10*x12611*x12621))+x12618+((r11*x12615))+((r11*x12609*x12617))+((r10*x12614)));
evalcond[6]=(((r10*x12609*x12615))+(((-1.0)*r11*x12614*x12622))+x12610+((r11*x12616))+((r12*x12623))+(((-1.0)*x12619))+((r10*x12617)));
evalcond[7]=((((-1.0)*r22*x12624))+((r21*x12615))+((r20*x12614))+x12610+((r21*x12609*x12617))+(((-1.0)*x12619))+(((-1.0)*r20*x12611*x12621)));
evalcond[8]=((((-1.0)*cj2*x12613))+((r22*x12623))+(((-1.0)*x12618))+(((-1.0)*r21*x12614*x12622))+((r21*x12616))+((r20*x12617))+((r20*x12609*x12615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12625=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12625;
j4eval[1]=IKsign(x12625);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12626=((1.0)*cj5);
IkReal x12627=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12626)));
j4eval[0]=x12627;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12626))))));
j4eval[2]=IKsign(x12627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x12628=cj5*cj5;
IkReal x12629=(cj3*r00);
IkReal x12630=(cj3*r01);
IkReal x12631=((1.0)*cj5*sj5);
IkReal x12632=((((-1.0)*r21*x12629*x12631))+(((-1.0)*r21*x12628*x12630))+((r20*x12628*x12629))+((cj3*r02*r22))+((r21*x12630))+(((-1.0)*r20*x12630*x12631)));
j4eval[0]=x12632;
j4eval[1]=IKsign(x12632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12633=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12633;
j4eval[1]=IKsign(x12633);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12634=((1.0)*cj5);
IkReal x12635=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12634)));
j4eval[0]=x12635;
j4eval[1]=((IKabs(((((-1.0)*r20*x12634))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12636=cj5*cj5;
IkReal x12637=r01*r01;
IkReal x12638=(r01*sj5);
IkReal x12639=(cj5*r00);
IkReal x12640=((((-1.0)*x12636*(r00*r00)))+(((2.0)*x12638*x12639))+(((-1.0)*x12637))+(((-1.0)*(r02*r02)))+((x12636*x12637)));
j4eval[0]=x12640;
j4eval[1]=IKsign(x12640);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x12639))+x12638))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12641=cj5*cj5;
IkReal x12642=r01*r01;
IkReal x12643=(r01*sj5);
IkReal x12644=(cj5*r00);
CheckValue<IkReal> x12645=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12642))+(((-1.0)*(r02*r02)))+(((-1.0)*x12641*(r00*r00)))+((x12641*x12642))+(((2.0)*x12643*x12644)))),-1);
if(!x12645.valid){
continue;
}
CheckValue<IkReal> x12646 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x12644))+x12643)),IKFAST_ATAN2_MAGTHRESH);
if(!x12646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12645.value)))+(x12646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12647=IKcos(j4);
IkReal x12648=IKsin(j4);
IkReal x12649=(cj5*r00);
IkReal x12650=(cj5*r10);
IkReal x12651=((1.0)*sj1);
IkReal x12652=(cj5*r20);
IkReal x12653=((1.0)*x12647);
IkReal x12654=((1.0)*x12648);
IkReal x12655=(sj5*x12647);
IkReal x12656=(sj5*x12648);
evalcond[0]=((((-1.0)*x12652*x12653))+((r21*x12655))+((r22*x12648)));
evalcond[1]=(((r12*x12648))+((r11*x12655))+(((-1.0)*x12650*x12653)));
evalcond[2]=((1.0)+(((-1.0)*x12649*x12653))+((r02*x12648))+((r01*x12655)));
evalcond[3]=((((-1.0)*x12649*x12654))+(((-1.0)*r02*x12653))+((r01*x12656)));
evalcond[4]=((((-1.0)*x12652*x12654))+((r21*x12656))+(((-1.0)*sj2*x12651))+((cj1*cj2))+(((-1.0)*r22*x12653)));
evalcond[5]=(((r11*x12656))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12653))+(((-1.0)*x12650*x12654))+(((-1.0)*cj2*x12651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12657=((1.0)*cj5);
CheckValue<IkReal> x12658 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12657)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12658.valid){
continue;
}
CheckValue<IkReal> x12659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12657)))),-1);
if(!x12659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12658.value)+(((1.5707963267949)*(x12659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12660=IKcos(j4);
IkReal x12661=IKsin(j4);
IkReal x12662=(cj5*r00);
IkReal x12663=(cj5*r10);
IkReal x12664=((1.0)*sj1);
IkReal x12665=(cj5*r20);
IkReal x12666=((1.0)*x12660);
IkReal x12667=((1.0)*x12661);
IkReal x12668=(sj5*x12660);
IkReal x12669=(sj5*x12661);
evalcond[0]=(((r21*x12668))+(((-1.0)*x12665*x12666))+((r22*x12661)));
evalcond[1]=(((r12*x12661))+((r11*x12668))+(((-1.0)*x12663*x12666)));
evalcond[2]=((1.0)+(((-1.0)*x12662*x12666))+((r02*x12661))+((r01*x12668)));
evalcond[3]=((((-1.0)*x12662*x12667))+(((-1.0)*r02*x12666))+((r01*x12669)));
evalcond[4]=((((-1.0)*r22*x12666))+((r21*x12669))+(((-1.0)*x12665*x12667))+((cj1*cj2))+(((-1.0)*sj2*x12664)));
evalcond[5]=((((-1.0)*cj2*x12664))+(((-1.0)*cj1*sj2))+((r11*x12669))+(((-1.0)*x12663*x12667))+(((-1.0)*r12*x12666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12670=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12670.valid){
continue;
}
CheckValue<IkReal> x12671 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12670.value)))+(x12671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12672=IKcos(j4);
IkReal x12673=IKsin(j4);
IkReal x12674=(cj5*r00);
IkReal x12675=(cj5*r10);
IkReal x12676=((1.0)*sj1);
IkReal x12677=(cj5*r20);
IkReal x12678=((1.0)*x12672);
IkReal x12679=((1.0)*x12673);
IkReal x12680=(sj5*x12672);
IkReal x12681=(sj5*x12673);
evalcond[0]=(((r21*x12680))+(((-1.0)*x12677*x12678))+((r22*x12673)));
evalcond[1]=((((-1.0)*x12675*x12678))+((r11*x12680))+((r12*x12673)));
evalcond[2]=((1.0)+((r01*x12680))+((r02*x12673))+(((-1.0)*x12674*x12678)));
evalcond[3]=(((r01*x12681))+(((-1.0)*r02*x12678))+(((-1.0)*x12674*x12679)));
evalcond[4]=(((r21*x12681))+(((-1.0)*x12677*x12679))+(((-1.0)*r22*x12678))+((cj1*cj2))+(((-1.0)*sj2*x12676)));
evalcond[5]=((((-1.0)*cj2*x12676))+(((-1.0)*x12675*x12679))+((r11*x12681))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x12678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12682=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12682;
j4eval[1]=IKsign(x12682);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12683=((1.0)*cj5);
IkReal x12684=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12683)));
j4eval[0]=x12684;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12683))+((r21*sj5))))));
j4eval[2]=IKsign(x12684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12685=cj5*cj5;
IkReal x12686=r01*r01;
IkReal x12687=(r01*sj5);
IkReal x12688=(cj5*r00);
IkReal x12689=((((-1.0)*(r02*r02)))+(((2.0)*x12687*x12688))+((x12685*x12686))+(((-1.0)*x12685*(r00*r00)))+(((-1.0)*x12686)));
j4eval[0]=x12689;
j4eval[1]=IKsign(x12689);
j4eval[2]=((IKabs(r02))+(IKabs((x12687+(((-1.0)*x12688))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12690=cj5*cj5;
IkReal x12691=r01*r01;
IkReal x12692=(r01*sj5);
IkReal x12693=(cj5*r00);
CheckValue<IkReal> x12694=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x12690*x12691))+(((2.0)*x12692*x12693))+(((-1.0)*x12690*(r00*r00)))+(((-1.0)*x12691)))),-1);
if(!x12694.valid){
continue;
}
CheckValue<IkReal> x12695 = IKatan2WithCheck(IkReal(r02),IkReal((x12692+(((-1.0)*x12693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12694.value)))+(x12695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12696=IKcos(j4);
IkReal x12697=IKsin(j4);
IkReal x12698=(cj5*r00);
IkReal x12699=((1.0)*sj2);
IkReal x12700=((1.0)*x12696);
IkReal x12701=(sj5*x12696);
IkReal x12702=(cj5*x12697);
IkReal x12703=((1.0)*sj5*x12697);
evalcond[0]=(((r21*x12701))+((r22*x12697))+(((-1.0)*cj5*r20*x12700)));
evalcond[1]=(((r11*x12701))+(((-1.0)*cj5*r10*x12700))+((r12*x12697)));
evalcond[2]=((((-1.0)*r01*x12703))+((r02*x12696))+((x12697*x12698)));
evalcond[3]=((1.0)+((r02*x12697))+(((-1.0)*x12698*x12700))+((r01*x12701)));
evalcond[4]=(((r22*x12696))+(((-1.0)*sj1*x12699))+((r20*x12702))+(((-1.0)*r21*x12703))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x12699))+(((-1.0)*r11*x12703))+(((-1.0)*cj2*sj1))+((r10*x12702))+((r12*x12696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12704=((1.0)*cj5);
CheckValue<IkReal> x12705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12704))+(((-1.0)*r10*sj5)))),-1);
if(!x12705.valid){
continue;
}
CheckValue<IkReal> x12706 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12704)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12705.value)))+(x12706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12707=IKcos(j4);
IkReal x12708=IKsin(j4);
IkReal x12709=(cj5*r00);
IkReal x12710=((1.0)*sj2);
IkReal x12711=((1.0)*x12707);
IkReal x12712=(sj5*x12707);
IkReal x12713=(cj5*x12708);
IkReal x12714=((1.0)*sj5*x12708);
evalcond[0]=(((r21*x12712))+((r22*x12708))+(((-1.0)*cj5*r20*x12711)));
evalcond[1]=(((r12*x12708))+((r11*x12712))+(((-1.0)*cj5*r10*x12711)));
evalcond[2]=(((x12708*x12709))+((r02*x12707))+(((-1.0)*r01*x12714)));
evalcond[3]=((1.0)+((r02*x12708))+((r01*x12712))+(((-1.0)*x12709*x12711)));
evalcond[4]=(((r22*x12707))+(((-1.0)*sj1*x12710))+((r20*x12713))+(((-1.0)*r21*x12714))+((cj1*cj2)));
evalcond[5]=(((r12*x12707))+(((-1.0)*cj2*sj1))+((r10*x12713))+(((-1.0)*cj1*x12710))+(((-1.0)*r11*x12714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12715=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12715.valid){
continue;
}
CheckValue<IkReal> x12716 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12715.value)))+(x12716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12717=IKcos(j4);
IkReal x12718=IKsin(j4);
IkReal x12719=(cj5*r00);
IkReal x12720=((1.0)*sj2);
IkReal x12721=((1.0)*x12717);
IkReal x12722=(sj5*x12717);
IkReal x12723=(cj5*x12718);
IkReal x12724=((1.0)*sj5*x12718);
evalcond[0]=(((r22*x12718))+((r21*x12722))+(((-1.0)*cj5*r20*x12721)));
evalcond[1]=(((r12*x12718))+((r11*x12722))+(((-1.0)*cj5*r10*x12721)));
evalcond[2]=((((-1.0)*r01*x12724))+((r02*x12717))+((x12718*x12719)));
evalcond[3]=((1.0)+((r02*x12718))+(((-1.0)*x12719*x12721))+((r01*x12722)));
evalcond[4]=(((r22*x12717))+(((-1.0)*sj1*x12720))+((r20*x12723))+((cj1*cj2))+(((-1.0)*r21*x12724)));
evalcond[5]=(((r12*x12717))+(((-1.0)*cj2*sj1))+((r10*x12723))+(((-1.0)*cj1*x12720))+(((-1.0)*r11*x12724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12725=((-1.0)*r10);
IkReal x12727 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12727)==0){
continue;
}
IkReal x12726=pow(x12727,-0.5);
CheckValue<IkReal> x12728 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12725),IKFAST_ATAN2_MAGTHRESH);
if(!x12728.valid){
continue;
}
IkReal gconst54=((-1.0)*(x12728.value));
IkReal gconst55=(r11*x12726);
IkReal gconst56=(x12725*x12726);
CheckValue<IkReal> x12729 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12729.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12729.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12730=((-1.0)*r10);
IkReal x12731=x12726;
CheckValue<IkReal> x12733 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12730),IKFAST_ATAN2_MAGTHRESH);
if(!x12733.valid){
continue;
}
IkReal x12732=((-1.0)*(x12733.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12732;
IkReal gconst54=x12732;
IkReal gconst55=(r11*x12731);
IkReal gconst56=(x12730*x12731);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12734=((-1.0)*r10);
IkReal x12735=x12726;
CheckValue<IkReal> x12737 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x12734),IKFAST_ATAN2_MAGTHRESH);
if(!x12737.valid){
continue;
}
IkReal x12736=((-1.0)*(x12737.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x12736;
IkReal gconst54=x12736;
IkReal gconst55=(r11*x12735);
IkReal gconst56=(x12734*x12735);
CheckValue<IkReal> x12745=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x12745.valid){
continue;
}
IkReal x12738=x12745.value;
IkReal x12739=(cj3*x12738);
IkReal x12740=(r00*x12739);
IkReal x12741=(r21*x12739);
IkReal x12742=(r20*x12739);
IkReal x12743=(r01*x12739);
IkReal x12744=(r10*r11*x12739);
j4eval[0]=IKsign((((r01*r10*r11*x12742))+((r20*x12740*(r10*r10)))+((r01*x12741*(r11*r11)))+((cj3*r02*r22))+((r10*r11*r21*x12740))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12746=gconst56*gconst56;
IkReal x12747=gconst55*gconst55;
IkReal x12748=(r01*sj3);
IkReal x12749=(cj3*r00);
IkReal x12750=((1.0)*sj3);
IkReal x12751=(cj3*r01);
IkReal x12752=((1.0)*r22);
IkReal x12753=(gconst55*gconst56*r20);
IkReal x12754=(gconst55*gconst56*r21);
IkReal x12755=(r21*x12747);
IkReal x12756=(r20*x12746);
CheckValue<IkReal> x12757 = IKatan2WithCheck(IkReal((((x12751*x12754))+(((-1.0)*x12751*x12756))+(((-1.0)*x12749*x12753))+((x12749*x12755)))),IkReal(((((-1.0)*gconst56*x12751*x12752))+(((-1.0)*gconst55*x12749*x12752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12757.valid){
continue;
}
CheckValue<IkReal> x12758=IKPowWithIntegerCheck(IKsign((((r00*sj3*x12754))+(((-1.0)*r00*x12750*x12756))+(((-1.0)*r02*r22*x12750))+((x12748*x12753))+(((-1.0)*x12748*x12755)))),-1);
if(!x12758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12757.value)+(((1.5707963267949)*(x12758.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12759=IKcos(j4);
IkReal x12760=IKsin(j4);
IkReal x12761=((1.0)*cj3);
IkReal x12762=(cj3*gconst56);
IkReal x12763=(sj1*sj2);
IkReal x12764=(gconst55*r10);
IkReal x12765=(gconst55*sj3);
IkReal x12766=((1.0)*cj1);
IkReal x12767=(gconst56*sj3);
IkReal x12768=(cj3*gconst55);
IkReal x12769=(sj2*x12766);
IkReal x12770=((1.0)*cj2*sj1);
IkReal x12771=(r00*x12760);
IkReal x12772=(gconst55*x12759);
IkReal x12773=((1.0)*x12759);
IkReal x12774=(cj3*x12759);
IkReal x12775=(r01*x12760);
IkReal x12776=(r10*x12760);
IkReal x12777=(r20*x12760);
IkReal x12778=(r11*x12760);
IkReal x12779=(gconst55*r21*x12760);
IkReal x12780=(x12769+x12770);
evalcond[0]=(((r22*x12760))+((r21*x12772))+(((-1.0)*gconst56*r20*x12773)));
evalcond[1]=(((r12*x12760))+(((-1.0)*gconst56*r10*x12773))+((r11*x12772)));
evalcond[2]=((1.0)+((r01*x12772))+((r02*x12760))+(((-1.0)*gconst56*r00*x12773)));
evalcond[3]=((((-1.0)*gconst55*x12761*x12775))+((x12762*x12771))+((r00*x12765))+((r02*x12774))+((r01*x12767)));
evalcond[4]=(((x12765*x12775))+(((-1.0)*x12767*x12771))+(((-1.0)*r02*sj3*x12773))+((r00*x12768))+((r01*x12762)));
evalcond[5]=((((-1.0)*gconst55*x12761*x12778))+((sj3*x12764))+x12763+((x12762*x12776))+((r12*x12774))+(((-1.0)*cj2*x12766))+((r11*x12767)));
evalcond[6]=(((r21*x12762))+(((-1.0)*x12767*x12777))+(((-1.0)*r22*sj3*x12773))+((r21*x12760*x12765))+(((-1.0)*x12763))+((r20*x12768))+((cj1*cj2)));
evalcond[7]=(((r21*x12767))+((r20*x12765))+((r22*x12774))+((x12762*x12777))+(((-1.0)*x12761*x12779))+(((-1.0)*x12780)));
evalcond[8]=(((x12765*x12778))+(((-1.0)*x12767*x12776))+(((-1.0)*r12*sj3*x12773))+((cj3*x12764))+((r11*x12762))+(((-1.0)*x12780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12781=gconst55*gconst55;
IkReal x12782=gconst56*gconst56;
IkReal x12783=(r01*r21);
IkReal x12784=(gconst55*gconst56);
IkReal x12785=(cj3*r00);
IkReal x12786=((1.0)*sj3);
IkReal x12787=(r20*x12782);
CheckValue<IkReal> x12788=IKPowWithIntegerCheck(IKsign((((cj3*x12781*x12783))+(((-1.0)*cj3*r01*r20*x12784))+(((-1.0)*r21*x12784*x12785))+((x12785*x12787))+((cj3*r02*r22)))),-1);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12786*x12787))+((sj3*x12783*x12784))+((r00*r21*sj3*x12781))+(((-1.0)*r00*r20*x12784*x12786)))),IkReal(((((-1.0)*gconst56*r01*r22*x12786))+(((-1.0)*gconst55*r00*r22*x12786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12788.value)))+(x12789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12790=IKcos(j4);
IkReal x12791=IKsin(j4);
IkReal x12792=((1.0)*cj3);
IkReal x12793=(cj3*gconst56);
IkReal x12794=(sj1*sj2);
IkReal x12795=(gconst55*r10);
IkReal x12796=(gconst55*sj3);
IkReal x12797=((1.0)*cj1);
IkReal x12798=(gconst56*sj3);
IkReal x12799=(cj3*gconst55);
IkReal x12800=(sj2*x12797);
IkReal x12801=((1.0)*cj2*sj1);
IkReal x12802=(r00*x12791);
IkReal x12803=(gconst55*x12790);
IkReal x12804=((1.0)*x12790);
IkReal x12805=(cj3*x12790);
IkReal x12806=(r01*x12791);
IkReal x12807=(r10*x12791);
IkReal x12808=(r20*x12791);
IkReal x12809=(r11*x12791);
IkReal x12810=(gconst55*r21*x12791);
IkReal x12811=(x12800+x12801);
evalcond[0]=((((-1.0)*gconst56*r20*x12804))+((r21*x12803))+((r22*x12791)));
evalcond[1]=(((r11*x12803))+(((-1.0)*gconst56*r10*x12804))+((r12*x12791)));
evalcond[2]=((1.0)+((r02*x12791))+((r01*x12803))+(((-1.0)*gconst56*r00*x12804)));
evalcond[3]=(((r02*x12805))+((x12793*x12802))+(((-1.0)*gconst55*x12792*x12806))+((r01*x12798))+((r00*x12796)));
evalcond[4]=((((-1.0)*r02*sj3*x12804))+((r01*x12793))+((r00*x12799))+((x12796*x12806))+(((-1.0)*x12798*x12802)));
evalcond[5]=((((-1.0)*cj2*x12797))+((r11*x12798))+((x12793*x12807))+((r12*x12805))+(((-1.0)*gconst55*x12792*x12809))+x12794+((sj3*x12795)));
evalcond[6]=(((r20*x12799))+((r21*x12791*x12796))+(((-1.0)*r22*sj3*x12804))+(((-1.0)*x12794))+((r21*x12793))+((cj1*cj2))+(((-1.0)*x12798*x12808)));
evalcond[7]=((((-1.0)*x12792*x12810))+(((-1.0)*x12811))+((r20*x12796))+((x12793*x12808))+((r21*x12798))+((r22*x12805)));
evalcond[8]=((((-1.0)*x12811))+((r11*x12793))+((cj3*x12795))+(((-1.0)*r12*sj3*x12804))+((x12796*x12809))+(((-1.0)*x12798*x12807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12812=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x12812.valid){
continue;
}
CheckValue<IkReal> x12813 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*r10))+((gconst55*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12812.value)))+(x12813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12814=IKcos(j4);
IkReal x12815=IKsin(j4);
IkReal x12816=((1.0)*cj3);
IkReal x12817=(cj3*gconst56);
IkReal x12818=(sj1*sj2);
IkReal x12819=(gconst55*r10);
IkReal x12820=(gconst55*sj3);
IkReal x12821=((1.0)*cj1);
IkReal x12822=(gconst56*sj3);
IkReal x12823=(cj3*gconst55);
IkReal x12824=(sj2*x12821);
IkReal x12825=((1.0)*cj2*sj1);
IkReal x12826=(r00*x12815);
IkReal x12827=(gconst55*x12814);
IkReal x12828=((1.0)*x12814);
IkReal x12829=(cj3*x12814);
IkReal x12830=(r01*x12815);
IkReal x12831=(r10*x12815);
IkReal x12832=(r20*x12815);
IkReal x12833=(r11*x12815);
IkReal x12834=(gconst55*r21*x12815);
IkReal x12835=(x12824+x12825);
evalcond[0]=(((r21*x12827))+(((-1.0)*gconst56*r20*x12828))+((r22*x12815)));
evalcond[1]=((((-1.0)*gconst56*r10*x12828))+((r12*x12815))+((r11*x12827)));
evalcond[2]=((1.0)+((r01*x12827))+((r02*x12815))+(((-1.0)*gconst56*r00*x12828)));
evalcond[3]=(((r01*x12822))+((r00*x12820))+((x12817*x12826))+((r02*x12829))+(((-1.0)*gconst55*x12816*x12830)));
evalcond[4]=((((-1.0)*r02*sj3*x12828))+((r00*x12823))+((r01*x12817))+((x12820*x12830))+(((-1.0)*x12822*x12826)));
evalcond[5]=(x12818+((sj3*x12819))+((x12817*x12831))+((r12*x12829))+(((-1.0)*cj2*x12821))+((r11*x12822))+(((-1.0)*gconst55*x12816*x12833)));
evalcond[6]=(((r21*x12817))+((r21*x12815*x12820))+(((-1.0)*x12818))+(((-1.0)*x12822*x12832))+(((-1.0)*r22*sj3*x12828))+((cj1*cj2))+((r20*x12823)));
evalcond[7]=(((x12817*x12832))+((r22*x12829))+((r21*x12822))+(((-1.0)*x12835))+(((-1.0)*x12816*x12834))+((r20*x12820)));
evalcond[8]=(((cj3*x12819))+(((-1.0)*x12835))+((r11*x12817))+(((-1.0)*x12822*x12831))+((x12820*x12833))+(((-1.0)*r12*sj3*x12828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12836=((-1.0)*r11);
IkReal x12838 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x12838)==0){
continue;
}
IkReal x12837=pow(x12838,-0.5);
CheckValue<IkReal> x12839 = IKatan2WithCheck(IkReal(x12836),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12839.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x12839.value))));
IkReal gconst58=(x12836*x12837);
IkReal gconst59=((1.0)*r10*x12837);
CheckValue<IkReal> x12840 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12841=((-1.0)*r11);
CheckValue<IkReal> x12844 = IKatan2WithCheck(IkReal(x12841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12844.valid){
continue;
}
IkReal x12842=((1.0)*(x12844.value));
IkReal x12843=x12837;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12842)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12842)));
IkReal gconst58=(x12841*x12843);
IkReal gconst59=((1.0)*r10*x12843);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12845=((-1.0)*r11);
CheckValue<IkReal> x12848 = IKatan2WithCheck(IkReal(x12845),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12848.valid){
continue;
}
IkReal x12846=((1.0)*(x12848.value));
IkReal x12847=x12837;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x12846)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x12846)));
IkReal gconst58=(x12845*x12847);
IkReal gconst59=((1.0)*r10*x12847);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12849=gconst58*gconst58;
IkReal x12850=gconst59*gconst59;
IkReal x12851=(cj3*r00);
IkReal x12852=(gconst59*r20);
IkReal x12853=(cj3*r01);
IkReal x12854=((1.0)*gconst58);
IkReal x12855=(gconst59*r21);
IkReal x12856=((1.0)*r01*sj3);
IkReal x12857=(r20*x12850);
IkReal x12858=(r21*x12849);
IkReal x12859=(r00*sj3*x12854);
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign((((x12853*x12858))+(((-1.0)*x12851*x12854*x12855))+((cj3*r02*r22))+((x12851*x12857))+(((-1.0)*x12852*x12853*x12854)))),-1);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal(((((-1.0)*x12856*x12857))+((gconst58*r01*sj3*x12855))+(((-1.0)*x12852*x12859))+((r00*sj3*x12858)))),IkReal(((((-1.0)*r22*x12859))+(((-1.0)*gconst59*r22*x12856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12860.value)))+(x12861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=((1.0)*r00);
IkReal x12865=(cj3*r10);
IkReal x12866=(sj1*sj2);
IkReal x12867=(cj3*gconst58);
IkReal x12868=((1.0)*r20);
IkReal x12869=((1.0)*cj2);
IkReal x12870=(gconst58*sj3);
IkReal x12871=((1.0)*sj3);
IkReal x12872=(cj3*gconst59);
IkReal x12873=(gconst59*sj3);
IkReal x12874=((1.0)*cj1*sj2);
IkReal x12875=(sj1*x12869);
IkReal x12876=(gconst59*x12863);
IkReal x12877=(gconst59*x12862);
IkReal x12878=(gconst58*x12862);
IkReal x12879=(r22*x12862);
IkReal x12880=(r21*x12863);
IkReal x12881=((1.0)*x12863);
IkReal x12882=(r12*x12862);
IkReal x12883=(r02*x12862);
IkReal x12884=(x12875+x12874);
evalcond[0]=((((-1.0)*x12868*x12877))+((r21*x12878))+((r22*x12863)));
evalcond[1]=(((r12*x12863))+((r11*x12878))+(((-1.0)*r10*x12877)));
evalcond[2]=((1.0)+(((-1.0)*x12864*x12877))+((r01*x12878))+((r02*x12863)));
evalcond[3]=(((r00*x12863*x12872))+(((-1.0)*r01*x12867*x12881))+((r01*x12873))+((r00*x12870))+((cj3*x12883)));
evalcond[4]=(((r01*x12872))+((r01*x12863*x12870))+(((-1.0)*x12871*x12883))+(((-1.0)*x12863*x12864*x12873))+((r00*x12867)));
evalcond[5]=(x12866+((r10*x12870))+((r11*x12873))+((cj3*x12882))+((x12865*x12876))+(((-1.0)*cj1*x12869))+(((-1.0)*r11*x12867*x12881)));
evalcond[6]=((((-1.0)*x12866))+((x12870*x12880))+(((-1.0)*x12871*x12879))+((r20*x12867))+((r21*x12872))+(((-1.0)*x12863*x12868*x12873))+((cj1*cj2)));
evalcond[7]=(((cj3*x12879))+(((-1.0)*x12867*x12880))+(((-1.0)*x12884))+((r21*x12873))+((r20*x12870))+((r20*x12863*x12872)));
evalcond[8]=(((r11*x12863*x12870))+(((-1.0)*x12884))+(((-1.0)*x12871*x12882))+((r11*x12872))+((gconst58*x12865))+(((-1.0)*r10*x12871*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12885=((1.0)*gconst59);
CheckValue<IkReal> x12886=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r10))+(((-1.0)*r11*x12885)))),-1);
if(!x12886.valid){
continue;
}
CheckValue<IkReal> x12887 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12885))+((gconst58*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12886.value)))+(x12887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12888=IKcos(j4);
IkReal x12889=IKsin(j4);
IkReal x12890=((1.0)*r00);
IkReal x12891=(cj3*r10);
IkReal x12892=(sj1*sj2);
IkReal x12893=(cj3*gconst58);
IkReal x12894=((1.0)*r20);
IkReal x12895=((1.0)*cj2);
IkReal x12896=(gconst58*sj3);
IkReal x12897=((1.0)*sj3);
IkReal x12898=(cj3*gconst59);
IkReal x12899=(gconst59*sj3);
IkReal x12900=((1.0)*cj1*sj2);
IkReal x12901=(sj1*x12895);
IkReal x12902=(gconst59*x12889);
IkReal x12903=(gconst59*x12888);
IkReal x12904=(gconst58*x12888);
IkReal x12905=(r22*x12888);
IkReal x12906=(r21*x12889);
IkReal x12907=((1.0)*x12889);
IkReal x12908=(r12*x12888);
IkReal x12909=(r02*x12888);
IkReal x12910=(x12901+x12900);
evalcond[0]=((((-1.0)*x12894*x12903))+((r22*x12889))+((r21*x12904)));
evalcond[1]=(((r12*x12889))+((r11*x12904))+(((-1.0)*r10*x12903)));
evalcond[2]=((1.0)+((r01*x12904))+(((-1.0)*x12890*x12903))+((r02*x12889)));
evalcond[3]=(((r01*x12899))+((r00*x12896))+((r00*x12889*x12898))+((cj3*x12909))+(((-1.0)*r01*x12893*x12907)));
evalcond[4]=(((r01*x12898))+((r00*x12893))+(((-1.0)*x12897*x12909))+((r01*x12889*x12896))+(((-1.0)*x12889*x12890*x12899)));
evalcond[5]=(((x12891*x12902))+x12892+((cj3*x12908))+(((-1.0)*r11*x12893*x12907))+(((-1.0)*cj1*x12895))+((r10*x12896))+((r11*x12899)));
evalcond[6]=((((-1.0)*x12892))+((r21*x12898))+(((-1.0)*x12897*x12905))+((x12896*x12906))+((cj1*cj2))+(((-1.0)*x12889*x12894*x12899))+((r20*x12893)));
evalcond[7]=((((-1.0)*x12893*x12906))+((r21*x12899))+(((-1.0)*x12910))+((cj3*x12905))+((r20*x12889*x12898))+((r20*x12896)));
evalcond[8]=((((-1.0)*x12910))+(((-1.0)*x12897*x12908))+(((-1.0)*r10*x12897*x12902))+((gconst58*x12891))+((r11*x12889*x12896))+((r11*x12898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12911=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x12911.valid){
continue;
}
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal((((gconst58*r11))+(((-1.0)*gconst59*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12911.value)))+(x12912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12913=IKcos(j4);
IkReal x12914=IKsin(j4);
IkReal x12915=((1.0)*r00);
IkReal x12916=(cj3*r10);
IkReal x12917=(sj1*sj2);
IkReal x12918=(cj3*gconst58);
IkReal x12919=((1.0)*r20);
IkReal x12920=((1.0)*cj2);
IkReal x12921=(gconst58*sj3);
IkReal x12922=((1.0)*sj3);
IkReal x12923=(cj3*gconst59);
IkReal x12924=(gconst59*sj3);
IkReal x12925=((1.0)*cj1*sj2);
IkReal x12926=(sj1*x12920);
IkReal x12927=(gconst59*x12914);
IkReal x12928=(gconst59*x12913);
IkReal x12929=(gconst58*x12913);
IkReal x12930=(r22*x12913);
IkReal x12931=(r21*x12914);
IkReal x12932=((1.0)*x12914);
IkReal x12933=(r12*x12913);
IkReal x12934=(r02*x12913);
IkReal x12935=(x12926+x12925);
evalcond[0]=((((-1.0)*x12919*x12928))+((r21*x12929))+((r22*x12914)));
evalcond[1]=(((r11*x12929))+(((-1.0)*r10*x12928))+((r12*x12914)));
evalcond[2]=((1.0)+(((-1.0)*x12915*x12928))+((r02*x12914))+((r01*x12929)));
evalcond[3]=(((cj3*x12934))+(((-1.0)*r01*x12918*x12932))+((r01*x12924))+((r00*x12921))+((r00*x12914*x12923)));
evalcond[4]=(((r00*x12918))+((r01*x12914*x12921))+((r01*x12923))+(((-1.0)*x12914*x12915*x12924))+(((-1.0)*x12922*x12934)));
evalcond[5]=(x12917+((r11*x12924))+((cj3*x12933))+(((-1.0)*r11*x12918*x12932))+((x12916*x12927))+((r10*x12921))+(((-1.0)*cj1*x12920)));
evalcond[6]=(((x12921*x12931))+(((-1.0)*x12914*x12919*x12924))+(((-1.0)*x12917))+((r20*x12918))+((cj1*cj2))+((r21*x12923))+(((-1.0)*x12922*x12930)));
evalcond[7]=(((r20*x12921))+((cj3*x12930))+(((-1.0)*x12918*x12931))+(((-1.0)*x12935))+((r21*x12924))+((r20*x12914*x12923)));
evalcond[8]=(((r11*x12923))+(((-1.0)*r10*x12922*x12927))+((gconst58*x12916))+(((-1.0)*x12935))+(((-1.0)*x12922*x12933))+((r11*x12914*x12921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12937 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12937)==0){
continue;
}
IkReal x12936=pow(x12937,-0.5);
CheckValue<IkReal> x12938 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12938.valid){
continue;
}
IkReal gconst60=((-1.0)*(x12938.value));
IkReal gconst61=((-1.0)*r21*x12936);
IkReal gconst62=(r20*x12936);
CheckValue<IkReal> x12939 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12942 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12942.valid){
continue;
}
IkReal x12940=((-1.0)*(x12942.value));
IkReal x12941=x12936;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12940;
IkReal gconst60=x12940;
IkReal gconst61=((-1.0)*r21*x12941);
IkReal gconst62=(r20*x12941);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
IkReal x12943=((-1.0)*(x12945.value));
IkReal x12944=x12936;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x12943;
IkReal gconst60=x12943;
IkReal gconst61=((-1.0)*r21*x12944);
IkReal gconst62=(r20*x12944);
CheckValue<IkReal> x12953=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12953.valid){
continue;
}
IkReal x12946=x12953.value;
IkReal x12947=(cj3*x12946);
IkReal x12948=(r11*x12947);
IkReal x12949=(r01*x12947);
IkReal x12950=(r00*x12947);
IkReal x12951=(r10*x12947);
IkReal x12952=(r20*r21*x12947);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x12950*(r20*r20)))+((r00*r20*r21*x12948))+((r10*r20*r21*x12949))+((r01*x12948*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12954=gconst62*gconst62;
IkReal x12955=gconst61*gconst61;
IkReal x12956=((1.0)*sj3);
IkReal x12957=(r01*r11);
IkReal x12958=(gconst62*r01);
IkReal x12959=(gconst61*r10);
IkReal x12960=((1.0)*cj3);
IkReal x12961=(gconst61*gconst62);
IkReal x12962=(r00*r11);
IkReal x12963=(r10*x12954);
CheckValue<IkReal> x12964=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12955*x12956*x12957))+(((-1.0)*r02*r12*x12956))+(((-1.0)*r00*x12956*x12963))+((sj3*x12961*x12962))+((sj3*x12958*x12959)))),-1);
if(!x12964.valid){
continue;
}
CheckValue<IkReal> x12965 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12960*x12963))+((cj3*x12957*x12961))+((cj3*x12955*x12962))+(((-1.0)*gconst62*r00*x12959*x12960)))),IkReal(((((-1.0)*r12*x12958*x12960))+(((-1.0)*gconst61*r00*r12*x12960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12964.value)))+(x12965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12966=IKcos(j4);
IkReal x12967=IKsin(j4);
IkReal x12968=(gconst62*r00);
IkReal x12969=(cj3*r20);
IkReal x12970=(gconst61*sj3);
IkReal x12971=(cj3*gconst62);
IkReal x12972=(sj1*sj2);
IkReal x12973=(cj1*cj2);
IkReal x12974=((1.0)*sj3);
IkReal x12975=(cj3*gconst61);
IkReal x12976=(gconst62*sj3);
IkReal x12977=((1.0)*cj1*sj2);
IkReal x12978=((1.0)*cj2*sj1);
IkReal x12979=((1.0)*x12966);
IkReal x12980=(gconst62*x12967);
IkReal x12981=(r21*x12967);
IkReal x12982=(cj3*x12966);
IkReal x12983=(gconst61*x12966);
IkReal x12984=((1.0)*x12967);
IkReal x12985=(x12978+x12977);
evalcond[0]=((((-1.0)*gconst62*r20*x12979))+((r21*x12983))+((r22*x12967)));
evalcond[1]=((((-1.0)*gconst62*r10*x12979))+((r11*x12983))+((r12*x12967)));
evalcond[2]=((1.0)+((r01*x12983))+((r02*x12967))+(((-1.0)*x12968*x12979)));
evalcond[3]=(((r01*x12976))+((r00*x12970))+(((-1.0)*r01*x12975*x12984))+((r02*x12982))+((cj3*x12967*x12968)));
evalcond[4]=(((r01*x12967*x12970))+((r01*x12971))+((r00*x12975))+(((-1.0)*x12967*x12968*x12974))+(((-1.0)*r02*x12966*x12974)));
evalcond[5]=(x12972+(((-1.0)*x12973))+((r10*x12967*x12971))+((r12*x12982))+(((-1.0)*r11*x12975*x12984))+((r11*x12976))+((r10*x12970)));
evalcond[6]=(((x12970*x12981))+x12973+((gconst61*x12969))+(((-1.0)*r22*x12966*x12974))+(((-1.0)*x12972))+(((-1.0)*r20*x12974*x12980))+((r21*x12971)));
evalcond[7]=(((r22*x12982))+(((-1.0)*x12985))+((r20*x12970))+(((-1.0)*x12975*x12981))+((x12969*x12980))+((r21*x12976)));
evalcond[8]=((((-1.0)*x12985))+(((-1.0)*r12*x12966*x12974))+((r11*x12971))+((r11*x12967*x12970))+(((-1.0)*r10*x12974*x12980))+((r10*x12975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12986=gconst61*gconst61;
IkReal x12987=gconst62*gconst62;
IkReal x12988=(gconst62*r11);
IkReal x12989=(r12*sj3);
IkReal x12990=((1.0)*r01);
IkReal x12991=(r10*sj3);
IkReal x12992=(cj3*r10);
IkReal x12993=((1.0)*gconst61*r00);
IkReal x12994=(r11*x12986);
CheckValue<IkReal> x12995=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*cj3*x12988*x12993))+((cj3*r01*x12994))+((r00*x12987*x12992))+(((-1.0)*gconst61*gconst62*x12990*x12992)))),-1);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996 = IKatan2WithCheck(IkReal((((r00*sj3*x12994))+(((-1.0)*x12987*x12990*x12991))+((gconst61*r01*sj3*x12988))+(((-1.0)*gconst62*x12991*x12993)))),IkReal(((((-1.0)*gconst62*x12989*x12990))+(((-1.0)*x12989*x12993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12995.value)))+(x12996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12997=IKcos(j4);
IkReal x12998=IKsin(j4);
IkReal x12999=(gconst62*r00);
IkReal x13000=(cj3*r20);
IkReal x13001=(gconst61*sj3);
IkReal x13002=(cj3*gconst62);
IkReal x13003=(sj1*sj2);
IkReal x13004=(cj1*cj2);
IkReal x13005=((1.0)*sj3);
IkReal x13006=(cj3*gconst61);
IkReal x13007=(gconst62*sj3);
IkReal x13008=((1.0)*cj1*sj2);
IkReal x13009=((1.0)*cj2*sj1);
IkReal x13010=((1.0)*x12997);
IkReal x13011=(gconst62*x12998);
IkReal x13012=(r21*x12998);
IkReal x13013=(cj3*x12997);
IkReal x13014=(gconst61*x12997);
IkReal x13015=((1.0)*x12998);
IkReal x13016=(x13009+x13008);
evalcond[0]=(((r22*x12998))+((r21*x13014))+(((-1.0)*gconst62*r20*x13010)));
evalcond[1]=(((r11*x13014))+((r12*x12998))+(((-1.0)*gconst62*r10*x13010)));
evalcond[2]=((1.0)+((r01*x13014))+(((-1.0)*x12999*x13010))+((r02*x12998)));
evalcond[3]=(((r00*x13001))+((cj3*x12998*x12999))+((r02*x13013))+(((-1.0)*r01*x13006*x13015))+((r01*x13007)));
evalcond[4]=(((r00*x13006))+(((-1.0)*r02*x12997*x13005))+(((-1.0)*x12998*x12999*x13005))+((r01*x12998*x13001))+((r01*x13002)));
evalcond[5]=((((-1.0)*r11*x13006*x13015))+(((-1.0)*x13004))+x13003+((r10*x12998*x13002))+((r12*x13013))+((r11*x13007))+((r10*x13001)));
evalcond[6]=((((-1.0)*r20*x13005*x13011))+(((-1.0)*x13003))+(((-1.0)*r22*x12997*x13005))+((x13001*x13012))+x13004+((r21*x13002))+((gconst61*x13000)));
evalcond[7]=((((-1.0)*x13006*x13012))+(((-1.0)*x13016))+((r20*x13001))+((r22*x13013))+((x13000*x13011))+((r21*x13007)));
evalcond[8]=((((-1.0)*r10*x13005*x13011))+(((-1.0)*x13016))+((r11*x13002))+((r10*x13006))+(((-1.0)*r12*x12997*x13005))+((r11*x12998*x13001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13017=((1.0)*gconst62);
CheckValue<IkReal> x13018 = IKatan2WithCheck(IkReal((((gconst61*r21))+(((-1.0)*r20*x13017)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13018.valid){
continue;
}
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r10))+(((-1.0)*r11*x13017)))),-1);
if(!x13019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13018.value)+(((1.5707963267949)*(x13019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13020=IKcos(j4);
IkReal x13021=IKsin(j4);
IkReal x13022=(gconst62*r00);
IkReal x13023=(cj3*r20);
IkReal x13024=(gconst61*sj3);
IkReal x13025=(cj3*gconst62);
IkReal x13026=(sj1*sj2);
IkReal x13027=(cj1*cj2);
IkReal x13028=((1.0)*sj3);
IkReal x13029=(cj3*gconst61);
IkReal x13030=(gconst62*sj3);
IkReal x13031=((1.0)*cj1*sj2);
IkReal x13032=((1.0)*cj2*sj1);
IkReal x13033=((1.0)*x13020);
IkReal x13034=(gconst62*x13021);
IkReal x13035=(r21*x13021);
IkReal x13036=(cj3*x13020);
IkReal x13037=(gconst61*x13020);
IkReal x13038=((1.0)*x13021);
IkReal x13039=(x13032+x13031);
evalcond[0]=(((r21*x13037))+((r22*x13021))+(((-1.0)*gconst62*r20*x13033)));
evalcond[1]=(((r11*x13037))+(((-1.0)*gconst62*r10*x13033))+((r12*x13021)));
evalcond[2]=((1.0)+(((-1.0)*x13022*x13033))+((r02*x13021))+((r01*x13037)));
evalcond[3]=(((r00*x13024))+((cj3*x13021*x13022))+((r01*x13030))+(((-1.0)*r01*x13029*x13038))+((r02*x13036)));
evalcond[4]=(((r01*x13025))+((r00*x13029))+(((-1.0)*x13021*x13022*x13028))+(((-1.0)*r02*x13020*x13028))+((r01*x13021*x13024)));
evalcond[5]=(((r11*x13030))+((r12*x13036))+(((-1.0)*x13027))+((r10*x13021*x13025))+x13026+(((-1.0)*r11*x13029*x13038))+((r10*x13024)));
evalcond[6]=(((r21*x13025))+((x13024*x13035))+((gconst61*x13023))+(((-1.0)*x13026))+x13027+(((-1.0)*r20*x13028*x13034))+(((-1.0)*r22*x13020*x13028)));
evalcond[7]=(((x13023*x13034))+((r22*x13036))+((r20*x13024))+(((-1.0)*x13029*x13035))+((r21*x13030))+(((-1.0)*x13039)));
evalcond[8]=((((-1.0)*r10*x13028*x13034))+((r11*x13021*x13024))+((r11*x13025))+(((-1.0)*x13039))+(((-1.0)*r12*x13020*x13028))+((r10*x13029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13041 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13041)==0){
continue;
}
IkReal x13040=pow(x13041,-0.5);
CheckValue<IkReal> x13042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13042.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x13042.value))));
IkReal gconst64=((1.0)*r21*x13040);
IkReal gconst65=((-1.0)*r20*x13040);
CheckValue<IkReal> x13043 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13043.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13043.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13046 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13046.valid){
continue;
}
IkReal x13044=((1.0)*(x13046.value));
IkReal x13045=x13040;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13044)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13044)));
IkReal gconst64=((1.0)*r21*x13045);
IkReal gconst65=((-1.0)*r20*x13045);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13049 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13049.valid){
continue;
}
IkReal x13047=((1.0)*(x13049.value));
IkReal x13048=x13040;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13047)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13047)));
IkReal gconst64=((1.0)*r21*x13048);
IkReal gconst65=((-1.0)*r20*x13048);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13052 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13052.valid){
continue;
}
IkReal x13050=((1.0)*(x13052.value));
IkReal x13051=x13040;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x13050)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x13050)));
IkReal gconst64=((1.0)*r21*x13051);
IkReal gconst65=((-1.0)*r20*x13051);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13053=gconst64*gconst64;
IkReal x13054=gconst65*gconst65;
IkReal x13055=((1.0)*gconst64);
IkReal x13056=(gconst65*r01);
IkReal x13057=(cj3*r20);
IkReal x13058=(r22*sj3);
IkReal x13059=(r21*sj3);
IkReal x13060=(gconst65*r00);
IkReal x13061=(cj3*r21);
IkReal x13062=(r20*sj3);
CheckValue<IkReal> x13063=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13055*x13060*x13061))+((r00*x13054*x13057))+((cj3*r02*r22))+(((-1.0)*x13055*x13056*x13057))+((r01*x13053*x13061)))),-1);
if(!x13063.valid){
continue;
}
CheckValue<IkReal> x13064 = IKatan2WithCheck(IkReal((((gconst64*x13056*x13059))+(((-1.0)*r01*x13054*x13062))+(((-1.0)*x13055*x13060*x13062))+((r00*x13053*x13059)))),IkReal(((((-1.0)*x13056*x13058))+(((-1.0)*r00*x13055*x13058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13063.value)))+(x13064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13065=IKcos(j4);
IkReal x13066=IKsin(j4);
IkReal x13067=(cj3*r00);
IkReal x13068=(gconst64*sj3);
IkReal x13069=(cj3*gconst64);
IkReal x13070=((1.0)*sj3);
IkReal x13071=(sj1*sj2);
IkReal x13072=(gconst65*r11);
IkReal x13073=((1.0)*cj2);
IkReal x13074=(gconst65*r21);
IkReal x13075=(gconst65*r01);
IkReal x13076=((1.0)*cj1*sj2);
IkReal x13077=(sj1*x13073);
IkReal x13078=(gconst65*x13066);
IkReal x13079=(r01*x13066);
IkReal x13080=(r12*x13065);
IkReal x13081=(r22*x13065);
IkReal x13082=((1.0)*x13066);
IkReal x13083=(gconst64*x13065);
IkReal x13084=(r02*x13065);
IkReal x13085=((1.0)*gconst65*x13065);
IkReal x13086=(x13076+x13077);
evalcond[0]=(((r22*x13066))+(((-1.0)*r20*x13085))+((r21*x13083)));
evalcond[1]=(((r12*x13066))+((r11*x13083))+(((-1.0)*r10*x13085)));
evalcond[2]=((1.0)+((r02*x13066))+(((-1.0)*r00*x13085))+((r01*x13083)));
evalcond[3]=(((cj3*x13084))+((x13067*x13078))+(((-1.0)*x13069*x13079))+((r00*x13068))+((sj3*x13075)));
evalcond[4]=((((-1.0)*r00*x13070*x13078))+(((-1.0)*x13070*x13084))+((x13068*x13079))+((cj3*x13075))+((gconst64*x13067)));
evalcond[5]=(((cj3*x13080))+(((-1.0)*cj1*x13073))+(((-1.0)*r11*x13069*x13082))+((r10*x13068))+x13071+((cj3*r10*x13078))+((sj3*x13072)));
evalcond[6]=(((r21*x13066*x13068))+((r20*x13069))+(((-1.0)*r20*x13070*x13078))+(((-1.0)*x13070*x13081))+(((-1.0)*x13071))+((cj1*cj2))+((cj3*x13074)));
evalcond[7]=((((-1.0)*x13086))+((r20*x13068))+((cj3*x13081))+((cj3*r20*x13078))+(((-1.0)*r21*x13069*x13082))+((sj3*x13074)));
evalcond[8]=((((-1.0)*x13086))+(((-1.0)*r10*x13070*x13078))+(((-1.0)*x13070*x13080))+((r10*x13069))+((r11*x13066*x13068))+((cj3*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13087=((1.0)*gconst65);
CheckValue<IkReal> x13088 = IKatan2WithCheck(IkReal((((gconst64*r21))+(((-1.0)*r20*x13087)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13088.valid){
continue;
}
CheckValue<IkReal> x13089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13087))+(((-1.0)*gconst64*r10)))),-1);
if(!x13089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13088.value)+(((1.5707963267949)*(x13089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13090=IKcos(j4);
IkReal x13091=IKsin(j4);
IkReal x13092=(cj3*r00);
IkReal x13093=(gconst64*sj3);
IkReal x13094=(cj3*gconst64);
IkReal x13095=((1.0)*sj3);
IkReal x13096=(sj1*sj2);
IkReal x13097=(gconst65*r11);
IkReal x13098=((1.0)*cj2);
IkReal x13099=(gconst65*r21);
IkReal x13100=(gconst65*r01);
IkReal x13101=((1.0)*cj1*sj2);
IkReal x13102=(sj1*x13098);
IkReal x13103=(gconst65*x13091);
IkReal x13104=(r01*x13091);
IkReal x13105=(r12*x13090);
IkReal x13106=(r22*x13090);
IkReal x13107=((1.0)*x13091);
IkReal x13108=(gconst64*x13090);
IkReal x13109=(r02*x13090);
IkReal x13110=((1.0)*gconst65*x13090);
IkReal x13111=(x13102+x13101);
evalcond[0]=(((r22*x13091))+(((-1.0)*r20*x13110))+((r21*x13108)));
evalcond[1]=((((-1.0)*r10*x13110))+((r12*x13091))+((r11*x13108)));
evalcond[2]=((1.0)+((r02*x13091))+((r01*x13108))+(((-1.0)*r00*x13110)));
evalcond[3]=((((-1.0)*x13094*x13104))+((x13092*x13103))+((sj3*x13100))+((cj3*x13109))+((r00*x13093)));
evalcond[4]=(((gconst64*x13092))+((x13093*x13104))+(((-1.0)*r00*x13095*x13103))+((cj3*x13100))+(((-1.0)*x13095*x13109)));
evalcond[5]=((((-1.0)*cj1*x13098))+(((-1.0)*r11*x13094*x13107))+((cj3*x13105))+((sj3*x13097))+x13096+((cj3*r10*x13103))+((r10*x13093)));
evalcond[6]=(((r21*x13091*x13093))+(((-1.0)*r20*x13095*x13103))+((cj3*x13099))+((cj1*cj2))+(((-1.0)*x13095*x13106))+(((-1.0)*x13096))+((r20*x13094)));
evalcond[7]=(((cj3*r20*x13103))+(((-1.0)*x13111))+((cj3*x13106))+((sj3*x13099))+((r20*x13093))+(((-1.0)*r21*x13094*x13107)));
evalcond[8]=(((cj3*x13097))+(((-1.0)*x13111))+(((-1.0)*r10*x13095*x13103))+(((-1.0)*x13095*x13105))+((r11*x13091*x13093))+((r10*x13094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal((((gconst64*r11))+(((-1.0)*gconst65*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x13113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13112.value)+(((1.5707963267949)*(x13113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13114=IKcos(j4);
IkReal x13115=IKsin(j4);
IkReal x13116=(cj3*r00);
IkReal x13117=(gconst64*sj3);
IkReal x13118=(cj3*gconst64);
IkReal x13119=((1.0)*sj3);
IkReal x13120=(sj1*sj2);
IkReal x13121=(gconst65*r11);
IkReal x13122=((1.0)*cj2);
IkReal x13123=(gconst65*r21);
IkReal x13124=(gconst65*r01);
IkReal x13125=((1.0)*cj1*sj2);
IkReal x13126=(sj1*x13122);
IkReal x13127=(gconst65*x13115);
IkReal x13128=(r01*x13115);
IkReal x13129=(r12*x13114);
IkReal x13130=(r22*x13114);
IkReal x13131=((1.0)*x13115);
IkReal x13132=(gconst64*x13114);
IkReal x13133=(r02*x13114);
IkReal x13134=((1.0)*gconst65*x13114);
IkReal x13135=(x13125+x13126);
evalcond[0]=(((r22*x13115))+(((-1.0)*r20*x13134))+((r21*x13132)));
evalcond[1]=(((r12*x13115))+(((-1.0)*r10*x13134))+((r11*x13132)));
evalcond[2]=((1.0)+((r02*x13115))+((r01*x13132))+(((-1.0)*r00*x13134)));
evalcond[3]=((((-1.0)*x13118*x13128))+((x13116*x13127))+((cj3*x13133))+((sj3*x13124))+((r00*x13117)));
evalcond[4]=(((cj3*x13124))+((x13117*x13128))+(((-1.0)*r00*x13119*x13127))+((gconst64*x13116))+(((-1.0)*x13119*x13133)));
evalcond[5]=(((cj3*r10*x13127))+((cj3*x13129))+(((-1.0)*cj1*x13122))+((sj3*x13121))+(((-1.0)*r11*x13118*x13131))+((r10*x13117))+x13120);
evalcond[6]=(((cj3*x13123))+((r21*x13115*x13117))+((cj1*cj2))+((r20*x13118))+(((-1.0)*x13119*x13130))+(((-1.0)*r20*x13119*x13127))+(((-1.0)*x13120)));
evalcond[7]=(((cj3*x13130))+((cj3*r20*x13127))+((sj3*x13123))+(((-1.0)*x13135))+((r20*x13117))+(((-1.0)*r21*x13118*x13131)));
evalcond[8]=((((-1.0)*r10*x13119*x13127))+((cj3*x13121))+((r11*x13115*x13117))+((r10*x13118))+(((-1.0)*x13119*x13129))+(((-1.0)*x13135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13136=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13136);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13136);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13137=(r01*sj5);
IkReal x13138=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*sj3*x13138))+((sj3*x13137)));
j4eval[1]=((((-1.0)*x13138))+x13137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13139=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13139);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13139);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13140=(cj5*r00);
IkReal x13141=(r01*sj5);
j4eval[0]=((((-1.0)*cj3*x13141))+((cj3*x13140)));
j4eval[1]=(x13141+(((-1.0)*x13140)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13142=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5)));
j4eval[1]=r22;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13143=((1.0)*cj3);
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(((((-1.0)*cj5*r00*sj3))+((r01*sj3*sj5))),-1);
if(!x13144.valid){
continue;
}
CheckValue<IkReal> x13145=IKPowWithIntegerCheck(r22,-1);
if(!x13145.valid){
continue;
}
CheckValue<IkReal> x13146=IKPowWithIntegerCheck(sj3,-1);
if(!x13146.valid){
continue;
}
if( IKabs(((x13144.value)*(((((-1.0)*cj5*r01*x13143))+(((-1.0)*r00*sj5*x13143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13145.value)*(x13146.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13144.value)*(((((-1.0)*cj5*r01*x13143))+(((-1.0)*r00*sj5*x13143))))))+IKsqr(((x13145.value)*(x13146.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13144.value)*(((((-1.0)*cj5*r01*x13143))+(((-1.0)*r00*sj5*x13143))))), ((x13145.value)*(x13146.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13147=IKcos(j4);
IkReal x13148=IKsin(j4);
IkReal x13149=((1.0)*cj5);
IkReal x13150=(sj1*sj2);
IkReal x13151=(cj5*r01);
IkReal x13152=(cj3*sj5);
IkReal x13153=(cj3*cj5);
IkReal x13154=((1.0)*cj2);
IkReal x13155=(sj3*sj5);
IkReal x13156=(r01*sj5);
IkReal x13157=(r11*sj5);
IkReal x13158=((1.0)*cj1*sj2);
IkReal x13159=(sj1*x13154);
IkReal x13160=(sj3*x13148);
IkReal x13161=(r22*x13147);
IkReal x13162=((1.0)*x13148);
IkReal x13163=(x13159+x13158);
evalcond[0]=(r22*x13148);
evalcond[1]=((((-1.0)*r10*x13147*x13149))+((x13147*x13157)));
evalcond[2]=((1.0)+((x13147*x13156))+(((-1.0)*r00*x13147*x13149)));
evalcond[3]=((((-1.0)*sj3*x13161))+((cj1*cj2))+(((-1.0)*x13150)));
evalcond[4]=(((cj3*x13161))+(((-1.0)*x13163)));
evalcond[5]=((((-1.0)*r00*x13149*x13160))+((cj3*x13151))+((r01*x13148*x13155))+((r00*x13152)));
evalcond[6]=(((sj3*x13151))+(((-1.0)*r01*x13152*x13162))+((r00*x13148*x13153))+((r00*x13155)));
evalcond[7]=(((r10*x13148*x13153))+((cj5*r11*sj3))+((r10*x13155))+(((-1.0)*r11*x13152*x13162))+x13150+(((-1.0)*cj1*x13154)));
evalcond[8]=((((-1.0)*r10*x13149*x13160))+((r11*x13148*x13155))+(((-1.0)*x13163))+((r11*x13153))+((r10*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13164=(cj5*r00);
IkReal x13165=(r01*sj5);
IkReal x13166=((1.0)*sj3);
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(((((-1.0)*cj3*x13165))+((cj3*x13164))),-1);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(((((-1.0)*x13164))+x13165),-1);
if(!x13168.valid){
continue;
}
if( IKabs(((x13167.value)*(((((-1.0)*r00*sj5*x13166))+(((-1.0)*cj5*r01*x13166)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13168.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13167.value)*(((((-1.0)*r00*sj5*x13166))+(((-1.0)*cj5*r01*x13166))))))+IKsqr(((-1.0)*(x13168.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13167.value)*(((((-1.0)*r00*sj5*x13166))+(((-1.0)*cj5*r01*x13166))))), ((-1.0)*(x13168.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13169=IKcos(j4);
IkReal x13170=IKsin(j4);
IkReal x13171=((1.0)*cj5);
IkReal x13172=(sj1*sj2);
IkReal x13173=(cj5*r01);
IkReal x13174=(cj3*sj5);
IkReal x13175=(cj3*cj5);
IkReal x13176=((1.0)*cj2);
IkReal x13177=(sj3*sj5);
IkReal x13178=(r01*sj5);
IkReal x13179=(r11*sj5);
IkReal x13180=((1.0)*cj1*sj2);
IkReal x13181=(sj1*x13176);
IkReal x13182=(sj3*x13170);
IkReal x13183=(r22*x13169);
IkReal x13184=((1.0)*x13170);
IkReal x13185=(x13180+x13181);
evalcond[0]=(r22*x13170);
evalcond[1]=((((-1.0)*r10*x13169*x13171))+((x13169*x13179)));
evalcond[2]=((1.0)+(((-1.0)*r00*x13169*x13171))+((x13169*x13178)));
evalcond[3]=((((-1.0)*x13172))+((cj1*cj2))+(((-1.0)*sj3*x13183)));
evalcond[4]=(((cj3*x13183))+(((-1.0)*x13185)));
evalcond[5]=(((r00*x13174))+(((-1.0)*r00*x13171*x13182))+((r01*x13170*x13177))+((cj3*x13173)));
evalcond[6]=(((r00*x13177))+((r00*x13170*x13175))+((sj3*x13173))+(((-1.0)*r01*x13174*x13184)));
evalcond[7]=((((-1.0)*cj1*x13176))+((cj5*r11*sj3))+(((-1.0)*r11*x13174*x13184))+x13172+((r10*x13170*x13175))+((r10*x13177)));
evalcond[8]=((((-1.0)*x13185))+(((-1.0)*r10*x13171*x13182))+((r11*x13170*x13177))+((r11*x13175))+((r10*x13174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13186=((1.0)*cj3);
IkReal x13187=(r01*sj5);
IkReal x13188=((1.0)*cj5*r00);
CheckValue<IkReal> x13189=IKPowWithIntegerCheck(((((-1.0)*sj3*x13188))+((sj3*x13187))),-1);
if(!x13189.valid){
continue;
}
CheckValue<IkReal> x13190=IKPowWithIntegerCheck(((((-1.0)*x13188))+x13187),-1);
if(!x13190.valid){
continue;
}
if( IKabs(((x13189.value)*(((((-1.0)*r00*sj5*x13186))+(((-1.0)*cj5*r01*x13186)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13190.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13189.value)*(((((-1.0)*r00*sj5*x13186))+(((-1.0)*cj5*r01*x13186))))))+IKsqr(((-1.0)*(x13190.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13189.value)*(((((-1.0)*r00*sj5*x13186))+(((-1.0)*cj5*r01*x13186))))), ((-1.0)*(x13190.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13191=IKcos(j4);
IkReal x13192=IKsin(j4);
IkReal x13193=((1.0)*cj5);
IkReal x13194=(sj1*sj2);
IkReal x13195=(cj5*r01);
IkReal x13196=(cj3*sj5);
IkReal x13197=(cj3*cj5);
IkReal x13198=((1.0)*cj2);
IkReal x13199=(sj3*sj5);
IkReal x13200=(r01*sj5);
IkReal x13201=(r11*sj5);
IkReal x13202=((1.0)*cj1*sj2);
IkReal x13203=(sj1*x13198);
IkReal x13204=(sj3*x13192);
IkReal x13205=(r22*x13191);
IkReal x13206=((1.0)*x13192);
IkReal x13207=(x13203+x13202);
evalcond[0]=(r22*x13192);
evalcond[1]=(((x13191*x13201))+(((-1.0)*r10*x13191*x13193)));
evalcond[2]=((1.0)+((x13191*x13200))+(((-1.0)*r00*x13191*x13193)));
evalcond[3]=((((-1.0)*x13194))+((cj1*cj2))+(((-1.0)*sj3*x13205)));
evalcond[4]=((((-1.0)*x13207))+((cj3*x13205)));
evalcond[5]=((((-1.0)*r00*x13193*x13204))+((r00*x13196))+((r01*x13192*x13199))+((cj3*x13195)));
evalcond[6]=((((-1.0)*r01*x13196*x13206))+((r00*x13199))+((r00*x13192*x13197))+((sj3*x13195)));
evalcond[7]=(((r10*x13192*x13197))+((cj5*r11*sj3))+((r10*x13199))+(((-1.0)*cj1*x13198))+(((-1.0)*r11*x13196*x13206))+x13194);
evalcond[8]=(((r11*x13192*x13199))+(((-1.0)*r10*x13193*x13204))+((r11*x13197))+((r10*x13196))+(((-1.0)*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13208=cj5*cj5;
IkReal x13209=((1.0)*r00);
IkReal x13210=(r01*sj3);
IkReal x13211=(sj3*sj5);
IkReal x13212=(r21*sj3);
IkReal x13213=((1.0)*cj5);
IkReal x13214=(cj5*r21*sj5);
IkReal x13215=(cj3*r01*r21);
IkReal x13216=(r20*x13208);
CheckValue<IkReal> x13217=IKPowWithIntegerCheck(IKsign((((cj3*r00*x13216))+(((-1.0)*x13208*x13215))+(((-1.0)*cj3*r01*r20*sj5*x13213))+(((-1.0)*cj3*x13209*x13214))+((cj3*r02*r22))+x13215)),-1);
if(!x13217.valid){
continue;
}
CheckValue<IkReal> x13218 = IKatan2WithCheck(IkReal((((x13210*x13214))+((r00*x13212))+(((-1.0)*x13210*x13216))+(((-1.0)*x13208*x13209*x13212))+(((-1.0)*cj5*r20*x13209*x13211)))),IkReal(((((-1.0)*r22*x13209*x13211))+(((-1.0)*r22*x13210*x13213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13217.value)))+(x13218.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13219=IKcos(j4);
IkReal x13220=IKsin(j4);
IkReal x13221=(cj5*r00);
IkReal x13222=(sj1*sj2);
IkReal x13223=(cj5*r01);
IkReal x13224=((1.0)*cj1);
IkReal x13225=(cj3*sj5);
IkReal x13226=(cj5*sj3);
IkReal x13227=(sj3*sj5);
IkReal x13228=(cj3*cj5);
IkReal x13229=(cj5*r10);
IkReal x13230=(cj5*r20);
IkReal x13231=(sj2*x13224);
IkReal x13232=((1.0)*cj2*sj1);
IkReal x13233=((1.0)*x13219);
IkReal x13234=(sj5*x13219);
IkReal x13235=(cj3*x13220);
IkReal x13236=(cj3*x13219);
IkReal x13237=((1.0)*x13220);
IkReal x13238=(x13231+x13232);
evalcond[0]=(((r22*x13220))+((r21*x13234))+(((-1.0)*x13230*x13233)));
evalcond[1]=((((-1.0)*x13229*x13233))+((r11*x13234))+((r12*x13220)));
evalcond[2]=((1.0)+((r01*x13234))+((r02*x13220))+(((-1.0)*x13221*x13233)));
evalcond[3]=((((-1.0)*r01*x13225*x13237))+((r02*x13236))+((x13221*x13235))+((r00*x13227))+((sj3*x13223)));
evalcond[4]=(((r01*x13220*x13227))+(((-1.0)*sj3*x13221*x13237))+((r00*x13225))+(((-1.0)*r02*sj3*x13233))+((cj3*x13223)));
evalcond[5]=((((-1.0)*r11*x13225*x13237))+((r10*x13227))+((r11*x13226))+((r10*x13220*x13228))+((r12*x13236))+(((-1.0)*cj2*x13224))+x13222);
evalcond[6]=((((-1.0)*r20*x13226*x13237))+(((-1.0)*r22*sj3*x13233))+(((-1.0)*x13222))+((r21*x13228))+((r21*x13220*x13227))+((cj1*cj2))+((r20*x13225)));
evalcond[7]=(((r21*x13226))+(((-1.0)*r21*x13225*x13237))+((r22*x13236))+((r20*x13220*x13228))+((r20*x13227))+(((-1.0)*x13238)));
evalcond[8]=(((r10*x13225))+((r11*x13228))+(((-1.0)*r12*sj3*x13233))+(((-1.0)*r10*x13226*x13237))+((r11*x13220*x13227))+(((-1.0)*x13238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13239=((1.0)*cj5);
CheckValue<IkReal> x13240 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13239)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13240.valid){
continue;
}
CheckValue<IkReal> x13241=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13239)))),-1);
if(!x13241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13240.value)+(((1.5707963267949)*(x13241.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13242=IKcos(j4);
IkReal x13243=IKsin(j4);
IkReal x13244=(cj5*r00);
IkReal x13245=(sj1*sj2);
IkReal x13246=(cj5*r01);
IkReal x13247=((1.0)*cj1);
IkReal x13248=(cj3*sj5);
IkReal x13249=(cj5*sj3);
IkReal x13250=(sj3*sj5);
IkReal x13251=(cj3*cj5);
IkReal x13252=(cj5*r10);
IkReal x13253=(cj5*r20);
IkReal x13254=(sj2*x13247);
IkReal x13255=((1.0)*cj2*sj1);
IkReal x13256=((1.0)*x13242);
IkReal x13257=(sj5*x13242);
IkReal x13258=(cj3*x13243);
IkReal x13259=(cj3*x13242);
IkReal x13260=((1.0)*x13243);
IkReal x13261=(x13254+x13255);
evalcond[0]=(((r21*x13257))+((r22*x13243))+(((-1.0)*x13253*x13256)));
evalcond[1]=(((r12*x13243))+((r11*x13257))+(((-1.0)*x13252*x13256)));
evalcond[2]=((1.0)+((r02*x13243))+((r01*x13257))+(((-1.0)*x13244*x13256)));
evalcond[3]=((((-1.0)*r01*x13248*x13260))+((r02*x13259))+((x13244*x13258))+((r00*x13250))+((sj3*x13246)));
evalcond[4]=((((-1.0)*sj3*x13244*x13260))+((cj3*x13246))+(((-1.0)*r02*sj3*x13256))+((r00*x13248))+((r01*x13243*x13250)));
evalcond[5]=(((r10*x13243*x13251))+((r10*x13250))+((r12*x13259))+((r11*x13249))+(((-1.0)*r11*x13248*x13260))+(((-1.0)*cj2*x13247))+x13245);
evalcond[6]=(((r21*x13251))+(((-1.0)*r22*sj3*x13256))+(((-1.0)*x13245))+((r21*x13243*x13250))+(((-1.0)*r20*x13249*x13260))+((cj1*cj2))+((r20*x13248)));
evalcond[7]=(((r21*x13249))+(((-1.0)*x13261))+(((-1.0)*r21*x13248*x13260))+((r20*x13243*x13251))+((r22*x13259))+((r20*x13250)));
evalcond[8]=((((-1.0)*x13261))+((r10*x13248))+(((-1.0)*r12*sj3*x13256))+((r11*x13251))+(((-1.0)*r10*x13249*x13260))+((r11*x13243*x13250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13262=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13262.valid){
continue;
}
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13262.value)))+(x13263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13264=IKcos(j4);
IkReal x13265=IKsin(j4);
IkReal x13266=(cj5*r00);
IkReal x13267=(sj1*sj2);
IkReal x13268=(cj5*r01);
IkReal x13269=((1.0)*cj1);
IkReal x13270=(cj3*sj5);
IkReal x13271=(cj5*sj3);
IkReal x13272=(sj3*sj5);
IkReal x13273=(cj3*cj5);
IkReal x13274=(cj5*r10);
IkReal x13275=(cj5*r20);
IkReal x13276=(sj2*x13269);
IkReal x13277=((1.0)*cj2*sj1);
IkReal x13278=((1.0)*x13264);
IkReal x13279=(sj5*x13264);
IkReal x13280=(cj3*x13265);
IkReal x13281=(cj3*x13264);
IkReal x13282=((1.0)*x13265);
IkReal x13283=(x13276+x13277);
evalcond[0]=((((-1.0)*x13275*x13278))+((r21*x13279))+((r22*x13265)));
evalcond[1]=(((r11*x13279))+(((-1.0)*x13274*x13278))+((r12*x13265)));
evalcond[2]=((1.0)+(((-1.0)*x13266*x13278))+((r01*x13279))+((r02*x13265)));
evalcond[3]=(((r00*x13272))+((sj3*x13268))+((r02*x13281))+((x13266*x13280))+(((-1.0)*r01*x13270*x13282)));
evalcond[4]=((((-1.0)*sj3*x13266*x13282))+((r00*x13270))+((cj3*x13268))+(((-1.0)*r02*sj3*x13278))+((r01*x13265*x13272)));
evalcond[5]=(((r12*x13281))+((r11*x13271))+((r10*x13272))+((r10*x13265*x13273))+(((-1.0)*cj2*x13269))+x13267+(((-1.0)*r11*x13270*x13282)));
evalcond[6]=(((r21*x13273))+(((-1.0)*x13267))+((r20*x13270))+(((-1.0)*r20*x13271*x13282))+(((-1.0)*r22*sj3*x13278))+((r21*x13265*x13272))+((cj1*cj2)));
evalcond[7]=(((r21*x13271))+((r20*x13272))+((r20*x13265*x13273))+((r22*x13281))+(((-1.0)*r21*x13270*x13282))+(((-1.0)*x13283)));
evalcond[8]=((((-1.0)*r10*x13271*x13282))+((r11*x13273))+((r11*x13265*x13272))+((r10*x13270))+(((-1.0)*x13283))+(((-1.0)*r12*sj3*x13278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13284=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13284);
rxp1_1=(px*r21);
rxp1_2=(r11*x13284);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13285=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13285);
rxp1_1=(px*r21);
rxp1_2=(r11*x13285);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13286=((1.0)*cj5);
j4eval[0]=(((r21*sj3*sj5))+(((-1.0)*r20*sj3*x13286)));
j4eval[1]=((((-1.0)*r10*x13286))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13287=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13287);
rxp1_1=(px*r21);
rxp1_2=(r11*x13287);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13288=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13288);
rxp1_1=(px*r21);
rxp1_2=(r11*x13288);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13289=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13289);
rxp1_1=(px*r21);
rxp1_2=(r11*x13289);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13290=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13290);
rxp1_1=(px*r21);
rxp1_2=(r11*x13290);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13293=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x13293.valid){
continue;
}
IkReal x13291=x13293.value;
IkReal x13292=(sj0*x13291);
sj4array[0]=((((-1.0)*cj1*cj2*x13292))+((sj1*sj2*x13292)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13294=IKcos(j4);
IkReal x13295=IKsin(j4);
IkReal x13296=(r21*sj5);
IkReal x13297=((1.0)*cj5*x13294);
evalcond[0]=(r02*x13294);
evalcond[1]=((((-1.0)*sj0))+((r02*x13295)));
evalcond[2]=((((-1.0)*r20*x13297))+((x13294*x13296)));
evalcond[3]=(((r11*sj5*x13294))+(((-1.0)*r10*x13297)));
evalcond[4]=((((-1.0)*cj2*sj1))+((cj5*r20*x13295))+(((-1.0)*cj1*sj2))+(((-1.0)*x13295*x13296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13299=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x13299.valid){
continue;
}
IkReal x13298=x13299.value;
sj4array[0]=(((cj1*sj2*x13298))+((cj2*sj1*x13298)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13300=IKcos(j4);
IkReal x13301=IKsin(j4);
IkReal x13302=((1.0)*sj0);
IkReal x13303=(r11*sj5);
IkReal x13304=((1.0)*cj5*x13300);
evalcond[0]=(r02*x13300);
evalcond[1]=((((-1.0)*x13302))+((r02*x13301)));
evalcond[2]=((((-1.0)*r20*x13304))+((r21*sj5*x13300)));
evalcond[3]=((((-1.0)*r10*x13304))+((x13300*x13303)));
evalcond[4]=(((cj1*cj2*sj0))+((cj5*r10*x13301))+(((-1.0)*sj1*sj2*x13302))+(((-1.0)*x13301*x13303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13305=IKPowWithIntegerCheck(r02,-1);
if(!x13305.valid){
continue;
}
sj4array[0]=(sj0*(x13305.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13306=IKcos(j4);
IkReal x13307=IKsin(j4);
IkReal x13308=((1.0)*sj1);
IkReal x13309=(sj5*x13306);
IkReal x13310=(cj5*x13307);
IkReal x13311=((1.0)*sj5*x13307);
IkReal x13312=((1.0)*cj5*x13306);
evalcond[0]=(r02*x13306);
evalcond[1]=(((r21*x13309))+(((-1.0)*r20*x13312)));
evalcond[2]=((((-1.0)*r10*x13312))+((r11*x13309)));
evalcond[3]=((((-1.0)*r21*x13311))+((r20*x13310))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13308)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x13310))+(((-1.0)*r11*x13311))+(((-1.0)*sj0*sj2*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13313=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13313);
rxp1_1=(px*r21);
rxp1_2=(r11*x13313);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13314=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13314);
rxp1_1=(px*r21);
rxp1_2=(r11*x13314);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13315=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13315);
rxp1_1=(px*r21);
rxp1_2=(r11*x13315);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13318=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13318.valid){
continue;
}
IkReal x13316=x13318.value;
IkReal x13317=(sj0*x13316);
sj4array[0]=(((sj1*sj2*x13317))+(((-1.0)*cj1*cj2*x13317)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13319=IKcos(j4);
IkReal x13320=IKsin(j4);
IkReal x13321=(r21*sj5);
IkReal x13322=((1.0)*cj5*r20);
evalcond[0]=((-1.0)*r02*x13319);
evalcond[1]=((((-1.0)*sj0))+((r02*x13320)));
evalcond[2]=((((-1.0)*x13319*x13322))+((x13319*x13321)));
evalcond[3]=(((r11*sj5*x13319))+(((-1.0)*cj5*r10*x13319)));
evalcond[4]=((((-1.0)*x13320*x13322))+(((-1.0)*cj2*sj1))+((x13320*x13321))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13324=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x13324.valid){
continue;
}
IkReal x13323=x13324.value;
sj4array[0]=(((cj1*sj2*x13323))+((cj2*sj1*x13323)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13325=IKcos(j4);
IkReal x13326=IKsin(j4);
IkReal x13327=((1.0)*sj0);
IkReal x13328=((1.0)*cj5);
IkReal x13329=(sj5*x13325);
evalcond[0]=((-1.0)*r02*x13325);
evalcond[1]=(((r02*x13326))+(((-1.0)*x13327)));
evalcond[2]=(((r21*x13329))+(((-1.0)*r20*x13325*x13328)));
evalcond[3]=((((-1.0)*r10*x13325*x13328))+((r11*x13329)));
evalcond[4]=((((-1.0)*sj1*sj2*x13327))+((cj1*cj2*sj0))+((r11*sj5*x13326))+(((-1.0)*r10*x13326*x13328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x13330=IKPowWithIntegerCheck(r02,-1);
if(!x13330.valid){
continue;
}
sj4array[0]=(sj0*(x13330.value));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x13331=IKcos(j4);
IkReal x13332=IKsin(j4);
IkReal x13333=((1.0)*sj1);
IkReal x13334=(r21*sj5);
IkReal x13335=(r11*sj5);
IkReal x13336=((1.0)*cj5*x13332);
IkReal x13337=((1.0)*cj5*x13331);
evalcond[0]=((-1.0)*r02*x13331);
evalcond[1]=((((-1.0)*r20*x13337))+((x13331*x13334)));
evalcond[2]=((((-1.0)*r10*x13337))+((x13331*x13335)));
evalcond[3]=((((-1.0)*cj1*sj2))+((x13332*x13334))+(((-1.0)*cj2*x13333))+(((-1.0)*r20*x13336)));
evalcond[4]=(((cj1*cj2*sj0))+((x13332*x13335))+(((-1.0)*sj0*sj2*x13333))+(((-1.0)*r10*x13336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x13338 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13338.valid){
continue;
}
IkReal gconst66=((-1.0)*(x13338.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13339.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13340=((-1.0)*r10);
CheckValue<IkReal> x13342 = IKatan2WithCheck(IkReal(x13340),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13342.valid){
continue;
}
IkReal x13341=((-1.0)*(x13342.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13340);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13341;
IkReal gconst66=x13341;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13343=((-1.0)*r10);
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal(x13343),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
IkReal x13344=((-1.0)*(x13345.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13343);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13344;
IkReal gconst66=x13344;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13346=((-1.0)*r10);
CheckValue<IkReal> x13348 = IKatan2WithCheck(IkReal(x13346),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13348.valid){
continue;
}
IkReal x13347=((-1.0)*(x13348.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13346);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x13347;
IkReal gconst66=x13347;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=((((-1.0)*r11*r20*sj3))+((r10*r21*sj3)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=((1.0)*cj3);
CheckValue<IkReal> x13350=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x13350.valid){
continue;
}
CheckValue<IkReal> x13351=IKPowWithIntegerCheck(r02,-1);
if(!x13351.valid){
continue;
}
CheckValue<IkReal> x13352=IKPowWithIntegerCheck(sj3,-1);
if(!x13352.valid){
continue;
}
if( IKabs(((x13350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13349))+(((-1.0)*gconst68*r21*x13349)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13351.value)*(x13352.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13349))+(((-1.0)*gconst68*r21*x13349))))))+IKsqr(((x13351.value)*(x13352.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst67*r20*x13349))+(((-1.0)*gconst68*r21*x13349))))), ((x13351.value)*(x13352.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13353=IKcos(j4);
IkReal x13354=IKsin(j4);
IkReal x13355=(cj2*sj0);
IkReal x13356=(gconst68*sj3);
IkReal x13357=(cj0*cj2);
IkReal x13358=(gconst67*sj3);
IkReal x13359=(cj1*sj2);
IkReal x13360=(cj3*r20);
IkReal x13361=(cj3*gconst68);
IkReal x13362=(cj3*r10);
IkReal x13363=((1.0)*sj1*sj2);
IkReal x13364=(gconst67*x13353);
IkReal x13365=(gconst68*x13354);
IkReal x13366=(r02*x13353);
IkReal x13367=((1.0)*x13354);
IkReal x13368=((1.0)*gconst68*x13353);
IkReal x13369=(cj3*gconst67*x13367);
evalcond[0]=((((-1.0)*sj0))+((r02*x13354)));
evalcond[1]=((((-1.0)*r20*x13368))+((r21*x13364)));
evalcond[2]=((((-1.0)*r10*x13368))+cj0+((r11*x13364)));
evalcond[3]=(((sj1*x13357))+((cj0*x13359))+(((-1.0)*sj3*x13366)));
evalcond[4]=(((cj3*x13366))+((cj1*x13357))+(((-1.0)*cj0*x13363)));
evalcond[5]=((((-1.0)*r20*x13356*x13367))+((r21*x13354*x13358))+((cj1*cj2))+(((-1.0)*x13363))+((gconst67*x13360))+((r21*x13361)));
evalcond[6]=((((-1.0)*cj2*sj1))+((r20*x13358))+(((-1.0)*x13359))+(((-1.0)*r21*x13369))+((x13360*x13365))+((r21*x13356)));
evalcond[7]=(((sj1*x13355))+(((-1.0)*r10*x13356*x13367))+((r11*x13361))+((r11*x13354*x13358))+((gconst67*x13362))+((sj0*x13359)));
evalcond[8]=(((r10*x13354*x13361))+((r10*x13358))+(((-1.0)*sj0*x13363))+((cj1*x13355))+((r11*x13356))+(((-1.0)*r11*x13369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13371=IKPowWithIntegerCheck(r02,-1);
if(!x13371.valid){
continue;
}
IkReal x13370=x13371.value;
CheckValue<IkReal> x13372=IKPowWithIntegerCheck(cj3,-1);
if(!x13372.valid){
continue;
}
if( IKabs((sj0*x13370)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13370*(x13372.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13370))+IKsqr((x13370*(x13372.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13370), (x13370*(x13372.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13373=IKcos(j4);
IkReal x13374=IKsin(j4);
IkReal x13375=(cj2*sj0);
IkReal x13376=(gconst68*sj3);
IkReal x13377=(cj0*cj2);
IkReal x13378=(gconst67*sj3);
IkReal x13379=(cj1*sj2);
IkReal x13380=(cj3*r20);
IkReal x13381=(cj3*gconst68);
IkReal x13382=(cj3*r10);
IkReal x13383=((1.0)*sj1*sj2);
IkReal x13384=(gconst67*x13373);
IkReal x13385=(gconst68*x13374);
IkReal x13386=(r02*x13373);
IkReal x13387=((1.0)*x13374);
IkReal x13388=((1.0)*gconst68*x13373);
IkReal x13389=(cj3*gconst67*x13387);
evalcond[0]=(((r02*x13374))+(((-1.0)*sj0)));
evalcond[1]=((((-1.0)*r20*x13388))+((r21*x13384)));
evalcond[2]=(((r11*x13384))+cj0+(((-1.0)*r10*x13388)));
evalcond[3]=((((-1.0)*sj3*x13386))+((cj0*x13379))+((sj1*x13377)));
evalcond[4]=((((-1.0)*cj0*x13383))+((cj1*x13377))+((cj3*x13386)));
evalcond[5]=(((r21*x13374*x13378))+(((-1.0)*x13383))+((gconst67*x13380))+((cj1*cj2))+(((-1.0)*r20*x13376*x13387))+((r21*x13381)));
evalcond[6]=((((-1.0)*cj2*sj1))+((r20*x13378))+((x13380*x13385))+(((-1.0)*r21*x13389))+((r21*x13376))+(((-1.0)*x13379)));
evalcond[7]=(((sj0*x13379))+((r11*x13381))+(((-1.0)*r10*x13376*x13387))+((gconst67*x13382))+((r11*x13374*x13378))+((sj1*x13375)));
evalcond[8]=(((r10*x13378))+((r10*x13374*x13381))+((r11*x13376))+((cj1*x13375))+(((-1.0)*sj0*x13383))+(((-1.0)*r11*x13389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13391=IKPowWithIntegerCheck(r02,-1);
if(!x13391.valid){
continue;
}
IkReal x13390=x13391.value;
CheckValue<IkReal> x13392=IKPowWithIntegerCheck(sj3,-1);
if(!x13392.valid){
continue;
}
if( IKabs((sj0*x13390)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13390*(x13392.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13390))+IKsqr((x13390*(x13392.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13390), (x13390*(x13392.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13393=IKcos(j4);
IkReal x13394=IKsin(j4);
IkReal x13395=(cj2*sj0);
IkReal x13396=(gconst68*sj3);
IkReal x13397=(cj0*cj2);
IkReal x13398=(gconst67*sj3);
IkReal x13399=(cj1*sj2);
IkReal x13400=(cj3*r20);
IkReal x13401=(cj3*gconst68);
IkReal x13402=(cj3*r10);
IkReal x13403=((1.0)*sj1*sj2);
IkReal x13404=(gconst67*x13393);
IkReal x13405=(gconst68*x13394);
IkReal x13406=(r02*x13393);
IkReal x13407=((1.0)*x13394);
IkReal x13408=((1.0)*gconst68*x13393);
IkReal x13409=(cj3*gconst67*x13407);
evalcond[0]=((((-1.0)*sj0))+((r02*x13394)));
evalcond[1]=(((r21*x13404))+(((-1.0)*r20*x13408)));
evalcond[2]=(cj0+((r11*x13404))+(((-1.0)*r10*x13408)));
evalcond[3]=(((sj1*x13397))+(((-1.0)*sj3*x13406))+((cj0*x13399)));
evalcond[4]=(((cj1*x13397))+(((-1.0)*cj0*x13403))+((cj3*x13406)));
evalcond[5]=(((r21*x13401))+(((-1.0)*x13403))+((r21*x13394*x13398))+(((-1.0)*r20*x13396*x13407))+((cj1*cj2))+((gconst67*x13400)));
evalcond[6]=((((-1.0)*x13399))+((r21*x13396))+((r20*x13398))+((x13400*x13405))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*x13409)));
evalcond[7]=(((sj1*x13395))+((sj0*x13399))+(((-1.0)*r10*x13396*x13407))+((r11*x13401))+((r11*x13394*x13398))+((gconst67*x13402)));
evalcond[8]=(((r11*x13396))+((r10*x13398))+((cj1*x13395))+((r10*x13394*x13401))+(((-1.0)*r11*x13409))+(((-1.0)*sj0*x13403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13410=((-1.0)*r10);
CheckValue<IkReal> x13411 = IKatan2WithCheck(IkReal(x13410),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13411.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x13411.value))));
IkReal gconst70=x13410;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x13412 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13412.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13412.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13413=((-1.0)*r10);
IkReal x13414=((-1.0)*r11);
CheckValue<IkReal> x13416 = IKatan2WithCheck(IkReal(x13413),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13416.valid){
continue;
}
IkReal x13415=((1.0)*(x13416.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13413);
rxp1_1=(px*r21);
rxp1_2=(px*x13414);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13415)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13415)));
IkReal gconst70=x13413;
IkReal gconst71=x13414;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13417=((-1.0)*r10);
IkReal x13418=((-1.0)*r11);
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal(x13417),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
IkReal x13419=((1.0)*(x13420.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13417);
rxp1_1=(px*r21);
rxp1_2=(px*x13418);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13419)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13419)));
IkReal gconst70=x13417;
IkReal gconst71=x13418;
j4eval[0]=r02;
j4eval[1]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13421=((-1.0)*r10);
IkReal x13422=((-1.0)*r11);
CheckValue<IkReal> x13424 = IKatan2WithCheck(IkReal(x13421),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x13424.valid){
continue;
}
IkReal x13423=((1.0)*(x13424.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x13421);
rxp1_1=(px*r21);
rxp1_2=(px*x13422);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x13423)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x13423)));
IkReal gconst70=x13421;
IkReal gconst71=x13422;
IkReal x13425=((1.0)*sj3);
j4eval[0]=(((r11*r20*x13425))+(((-1.0)*r10*r21*x13425)));
j4eval[1]=r02;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13426=((1.0)*r20);
CheckValue<IkReal> x13427=IKPowWithIntegerCheck((((gconst70*r21*sj3))+(((-1.0)*gconst71*sj3*x13426))),-1);
if(!x13427.valid){
continue;
}
CheckValue<IkReal> x13428=IKPowWithIntegerCheck(r02,-1);
if(!x13428.valid){
continue;
}
CheckValue<IkReal> x13429=IKPowWithIntegerCheck(sj3,-1);
if(!x13429.valid){
continue;
}
if( IKabs(((x13427.value)*(((((-1.0)*cj3*gconst70*x13426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13428.value)*(x13429.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13427.value)*(((((-1.0)*cj3*gconst70*x13426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst71*r21))))))+IKsqr(((x13428.value)*(x13429.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13427.value)*(((((-1.0)*cj3*gconst70*x13426))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*gconst71*r21))))), ((x13428.value)*(x13429.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13430=IKcos(j4);
IkReal x13431=IKsin(j4);
IkReal x13432=(cj2*sj0);
IkReal x13433=(cj3*r20);
IkReal x13434=((1.0)*sj0);
IkReal x13435=((1.0)*sj1);
IkReal x13436=(gconst71*r21);
IkReal x13437=(gconst70*sj3);
IkReal x13438=(cj3*gconst70);
IkReal x13439=(cj1*sj2);
IkReal x13440=(gconst71*r11);
IkReal x13441=(cj0*cj2);
IkReal x13442=((1.0)*sj3);
IkReal x13443=(gconst71*x13431);
IkReal x13444=((1.0)*x13431);
IkReal x13445=(gconst70*x13430);
IkReal x13446=(r02*x13430);
IkReal x13447=(x13431*x13437);
IkReal x13448=((1.0)*gconst71*x13430);
evalcond[0]=((((-1.0)*x13434))+((r02*x13431)));
evalcond[1]=((((-1.0)*r20*x13448))+((r21*x13445)));
evalcond[2]=(cj0+(((-1.0)*r10*x13448))+((r11*x13445)));
evalcond[3]=(((cj0*x13439))+((sj1*x13441))+(((-1.0)*x13442*x13446)));
evalcond[4]=((((-1.0)*cj0*sj2*x13435))+((cj1*x13441))+((cj3*x13446)));
evalcond[5]=((((-1.0)*r20*x13442*x13443))+(((-1.0)*sj2*x13435))+((gconst70*x13433))+((cj1*cj2))+((r21*x13447))+((cj3*x13436)));
evalcond[6]=((((-1.0)*cj2*x13435))+(((-1.0)*r21*x13438*x13444))+(((-1.0)*x13439))+((x13433*x13443))+((sj3*x13436))+((r20*x13437)));
evalcond[7]=(((cj3*x13440))+((sj1*x13432))+((sj0*x13439))+((r11*x13447))+(((-1.0)*r10*x13442*x13443))+((r10*x13438)));
evalcond[8]=(((cj1*x13432))+((cj3*r10*x13443))+((sj3*x13440))+(((-1.0)*r11*x13438*x13444))+(((-1.0)*sj1*sj2*x13434))+((r10*x13437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13450=IKPowWithIntegerCheck(r02,-1);
if(!x13450.valid){
continue;
}
IkReal x13449=x13450.value;
CheckValue<IkReal> x13451=IKPowWithIntegerCheck(cj3,-1);
if(!x13451.valid){
continue;
}
if( IKabs((sj0*x13449)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13449*(x13451.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13449))+IKsqr((x13449*(x13451.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13449), (x13449*(x13451.value)*(((((-1.0)*cj0*cj1*cj2))+((cj0*sj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13452=IKcos(j4);
IkReal x13453=IKsin(j4);
IkReal x13454=(cj2*sj0);
IkReal x13455=(cj3*r20);
IkReal x13456=((1.0)*sj0);
IkReal x13457=((1.0)*sj1);
IkReal x13458=(gconst71*r21);
IkReal x13459=(gconst70*sj3);
IkReal x13460=(cj3*gconst70);
IkReal x13461=(cj1*sj2);
IkReal x13462=(gconst71*r11);
IkReal x13463=(cj0*cj2);
IkReal x13464=((1.0)*sj3);
IkReal x13465=(gconst71*x13453);
IkReal x13466=((1.0)*x13453);
IkReal x13467=(gconst70*x13452);
IkReal x13468=(r02*x13452);
IkReal x13469=(x13453*x13459);
IkReal x13470=((1.0)*gconst71*x13452);
evalcond[0]=((((-1.0)*x13456))+((r02*x13453)));
evalcond[1]=(((r21*x13467))+(((-1.0)*r20*x13470)));
evalcond[2]=(cj0+((r11*x13467))+(((-1.0)*r10*x13470)));
evalcond[3]=(((sj1*x13463))+((cj0*x13461))+(((-1.0)*x13464*x13468)));
evalcond[4]=((((-1.0)*cj0*sj2*x13457))+((cj1*x13463))+((cj3*x13468)));
evalcond[5]=(((r21*x13469))+(((-1.0)*r20*x13464*x13465))+(((-1.0)*sj2*x13457))+((cj1*cj2))+((gconst70*x13455))+((cj3*x13458)));
evalcond[6]=((((-1.0)*cj2*x13457))+((r20*x13459))+((sj3*x13458))+(((-1.0)*r21*x13460*x13466))+(((-1.0)*x13461))+((x13455*x13465)));
evalcond[7]=(((r10*x13460))+((sj0*x13461))+((sj1*x13454))+((r11*x13469))+(((-1.0)*r10*x13464*x13465))+((cj3*x13462)));
evalcond[8]=(((r10*x13459))+((cj1*x13454))+(((-1.0)*r11*x13460*x13466))+((sj3*x13462))+(((-1.0)*sj1*sj2*x13456))+((cj3*r10*x13465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13472=IKPowWithIntegerCheck(r02,-1);
if(!x13472.valid){
continue;
}
IkReal x13471=x13472.value;
CheckValue<IkReal> x13473=IKPowWithIntegerCheck(sj3,-1);
if(!x13473.valid){
continue;
}
if( IKabs((sj0*x13471)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13471*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13471))+IKsqr((x13471*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13471), (x13471*(x13473.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13474=IKcos(j4);
IkReal x13475=IKsin(j4);
IkReal x13476=(cj2*sj0);
IkReal x13477=(cj3*r20);
IkReal x13478=((1.0)*sj0);
IkReal x13479=((1.0)*sj1);
IkReal x13480=(gconst71*r21);
IkReal x13481=(gconst70*sj3);
IkReal x13482=(cj3*gconst70);
IkReal x13483=(cj1*sj2);
IkReal x13484=(gconst71*r11);
IkReal x13485=(cj0*cj2);
IkReal x13486=((1.0)*sj3);
IkReal x13487=(gconst71*x13475);
IkReal x13488=((1.0)*x13475);
IkReal x13489=(gconst70*x13474);
IkReal x13490=(r02*x13474);
IkReal x13491=(x13475*x13481);
IkReal x13492=((1.0)*gconst71*x13474);
evalcond[0]=((((-1.0)*x13478))+((r02*x13475)));
evalcond[1]=((((-1.0)*r20*x13492))+((r21*x13489)));
evalcond[2]=((((-1.0)*r10*x13492))+cj0+((r11*x13489)));
evalcond[3]=(((cj0*x13483))+(((-1.0)*x13486*x13490))+((sj1*x13485)));
evalcond[4]=((((-1.0)*cj0*sj2*x13479))+((cj3*x13490))+((cj1*x13485)));
evalcond[5]=(((cj3*x13480))+(((-1.0)*sj2*x13479))+(((-1.0)*r20*x13486*x13487))+((cj1*cj2))+((gconst70*x13477))+((r21*x13491)));
evalcond[6]=((((-1.0)*x13483))+(((-1.0)*r21*x13482*x13488))+((x13477*x13487))+((sj3*x13480))+((r20*x13481))+(((-1.0)*cj2*x13479)));
evalcond[7]=(((cj3*x13484))+((sj1*x13476))+((r10*x13482))+((r11*x13491))+((sj0*x13483))+(((-1.0)*r10*x13486*x13487)));
evalcond[8]=(((cj1*x13476))+((sj3*x13484))+(((-1.0)*sj1*sj2*x13478))+(((-1.0)*r11*x13482*x13488))+((r10*x13481))+((cj3*r10*x13487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(r02,-1);
if(!x13494.valid){
continue;
}
IkReal x13493=x13494.value;
CheckValue<IkReal> x13495=IKPowWithIntegerCheck(sj3,-1);
if(!x13495.valid){
continue;
}
if( IKabs((sj0*x13493)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13493*(x13495.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*x13493))+IKsqr((x13493*(x13495.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*x13493), (x13493*(x13495.value)*((((cj0*cj2*sj1))+((cj0*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13496=IKcos(j4);
IkReal x13497=IKsin(j4);
IkReal x13498=(cj2*sj0);
IkReal x13499=(cj3*cj5);
IkReal x13500=(cj0*cj2);
IkReal x13501=((1.0)*sj1);
IkReal x13502=(cj3*sj5);
IkReal x13503=(cj1*sj2);
IkReal x13504=(sj3*sj5);
IkReal x13505=(cj5*sj3);
IkReal x13506=(sj5*x13496);
IkReal x13507=(r02*x13496);
IkReal x13508=(r11*x13497);
IkReal x13509=(r21*x13497);
IkReal x13510=((1.0)*cj5*x13496);
IkReal x13511=((1.0)*x13497*x13505);
evalcond[0]=(((r02*x13497))+(((-1.0)*sj0)));
evalcond[1]=((((-1.0)*r20*x13510))+((r21*x13506)));
evalcond[2]=(cj0+(((-1.0)*r10*x13510))+((r11*x13506)));
evalcond[3]=(((cj0*x13503))+(((-1.0)*sj3*x13507))+((sj1*x13500)));
evalcond[4]=(((cj1*x13500))+(((-1.0)*cj0*sj2*x13501))+((cj3*x13507)));
evalcond[5]=(((r20*x13502))+(((-1.0)*sj2*x13501))+(((-1.0)*r20*x13511))+((cj1*cj2))+((x13504*x13509))+((r21*x13499)));
evalcond[6]=(((r20*x13504))+(((-1.0)*cj2*x13501))+(((-1.0)*x13503))+(((-1.0)*x13502*x13509))+((r20*x13497*x13499))+((r21*x13505)));
evalcond[7]=(((r10*x13502))+(((-1.0)*r10*x13511))+((sj0*x13503))+((x13504*x13508))+((r11*x13499))+((sj1*x13498)));
evalcond[8]=(((r10*x13504))+(((-1.0)*sj0*sj2*x13501))+((r11*x13505))+(((-1.0)*x13502*x13508))+((cj1*x13498))+((r10*x13497*x13499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13512=((1.0)*cj5);
CheckValue<IkReal> x13513=IKPowWithIntegerCheck(((((-1.0)*r20*sj3*x13512))+((r21*sj3*sj5))),-1);
if(!x13513.valid){
continue;
}
CheckValue<IkReal> x13514=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13512))),-1);
if(!x13514.valid){
continue;
}
if( IKabs(((x13513.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13512))+(((-1.0)*cj3*r20*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13514.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13513.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13512))+(((-1.0)*cj3*r20*sj5))))))+IKsqr(((-1.0)*cj0*(x13514.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13513.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj3*r21*x13512))+(((-1.0)*cj3*r20*sj5))))), ((-1.0)*cj0*(x13514.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13515=IKcos(j4);
IkReal x13516=IKsin(j4);
IkReal x13517=(cj2*sj0);
IkReal x13518=(cj3*cj5);
IkReal x13519=(cj0*cj2);
IkReal x13520=((1.0)*sj1);
IkReal x13521=(cj3*sj5);
IkReal x13522=(cj1*sj2);
IkReal x13523=(sj3*sj5);
IkReal x13524=(cj5*sj3);
IkReal x13525=(sj5*x13515);
IkReal x13526=(r02*x13515);
IkReal x13527=(r11*x13516);
IkReal x13528=(r21*x13516);
IkReal x13529=((1.0)*cj5*x13515);
IkReal x13530=((1.0)*x13516*x13524);
evalcond[0]=((((-1.0)*sj0))+((r02*x13516)));
evalcond[1]=(((r21*x13525))+(((-1.0)*r20*x13529)));
evalcond[2]=(cj0+(((-1.0)*r10*x13529))+((r11*x13525)));
evalcond[3]=(((cj0*x13522))+(((-1.0)*sj3*x13526))+((sj1*x13519)));
evalcond[4]=(((cj1*x13519))+((cj3*x13526))+(((-1.0)*cj0*sj2*x13520)));
evalcond[5]=(((r21*x13518))+(((-1.0)*sj2*x13520))+((r20*x13521))+(((-1.0)*r20*x13530))+((x13523*x13528))+((cj1*cj2)));
evalcond[6]=(((r21*x13524))+(((-1.0)*x13521*x13528))+((r20*x13523))+(((-1.0)*x13522))+(((-1.0)*cj2*x13520))+((r20*x13516*x13518)));
evalcond[7]=((((-1.0)*r10*x13530))+((x13523*x13527))+((r11*x13518))+((sj1*x13517))+((sj0*x13522))+((r10*x13521)));
evalcond[8]=((((-1.0)*x13521*x13527))+(((-1.0)*sj0*sj2*x13520))+((cj1*x13517))+((r11*x13524))+((r10*x13516*x13518))+((r10*x13523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13531=IKPowWithIntegerCheck(r02,-1);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13532.valid){
continue;
}
if( IKabs((sj0*(x13531.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*(x13532.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj0*(x13531.value)))+IKsqr(((-1.0)*cj0*(x13532.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((sj0*(x13531.value)), ((-1.0)*cj0*(x13532.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13533=IKcos(j4);
IkReal x13534=IKsin(j4);
IkReal x13535=(cj2*sj0);
IkReal x13536=(cj3*cj5);
IkReal x13537=(cj0*cj2);
IkReal x13538=((1.0)*sj1);
IkReal x13539=(cj3*sj5);
IkReal x13540=(cj1*sj2);
IkReal x13541=(sj3*sj5);
IkReal x13542=(cj5*sj3);
IkReal x13543=(sj5*x13533);
IkReal x13544=(r02*x13533);
IkReal x13545=(r11*x13534);
IkReal x13546=(r21*x13534);
IkReal x13547=((1.0)*cj5*x13533);
IkReal x13548=((1.0)*x13534*x13542);
evalcond[0]=((((-1.0)*sj0))+((r02*x13534)));
evalcond[1]=(((r21*x13543))+(((-1.0)*r20*x13547)));
evalcond[2]=(cj0+((r11*x13543))+(((-1.0)*r10*x13547)));
evalcond[3]=(((cj0*x13540))+((sj1*x13537))+(((-1.0)*sj3*x13544)));
evalcond[4]=(((cj3*x13544))+((cj1*x13537))+(((-1.0)*cj0*sj2*x13538)));
evalcond[5]=(((r20*x13539))+(((-1.0)*sj2*x13538))+((x13541*x13546))+((cj1*cj2))+((r21*x13536))+(((-1.0)*r20*x13548)));
evalcond[6]=(((r21*x13542))+(((-1.0)*x13539*x13546))+((r20*x13534*x13536))+(((-1.0)*cj2*x13538))+((r20*x13541))+(((-1.0)*x13540)));
evalcond[7]=(((sj0*x13540))+((sj1*x13535))+((x13541*x13545))+(((-1.0)*r10*x13548))+((r10*x13539))+((r11*x13536)));
evalcond[8]=((((-1.0)*x13539*x13545))+((r10*x13541))+((r11*x13542))+(((-1.0)*sj0*sj2*x13538))+((cj1*x13535))+((r10*x13534*x13536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13549=((1.0)*sj0);
IkReal x13550=((1.0)*cj0);
CheckValue<IkReal> x13551 = IKatan2WithCheck(IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x13549))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x13550)))),IkReal(((((-1.0)*r02*x13550))+(((-1.0)*r12*x13549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13551.valid){
continue;
}
CheckValue<IkReal> x13552=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x13552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13551.value)+(((1.5707963267949)*(x13552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13553=IKcos(j4);
IkReal x13554=IKsin(j4);
IkReal x13555=((1.0)*cj5);
IkReal x13556=(cj2*sj0);
IkReal x13557=(cj5*r01);
IkReal x13558=((1.0)*sj0);
IkReal x13559=((1.0)*sj1);
IkReal x13560=(cj3*sj5);
IkReal x13561=(cj3*cj5);
IkReal x13562=(cj1*sj2);
IkReal x13563=(sj3*sj5);
IkReal x13564=(cj0*cj2);
IkReal x13565=(cj5*sj3);
IkReal x13566=(sj5*x13553);
IkReal x13567=(sj3*x13554);
IkReal x13568=(cj3*x13553);
IkReal x13569=((1.0)*x13554);
IkReal x13570=((1.0)*sj3*x13553);
evalcond[0]=(((r22*x13554))+((r21*x13566))+(((-1.0)*r20*x13553*x13555)));
evalcond[1]=(((r12*x13554))+cj0+((r11*x13566))+(((-1.0)*r10*x13553*x13555)));
evalcond[2]=(((r01*x13566))+(((-1.0)*x13558))+(((-1.0)*r00*x13553*x13555))+((r02*x13554)));
evalcond[3]=((((-1.0)*r22*x13570))+((r20*x13560))+(((-1.0)*r20*x13555*x13567))+(((-1.0)*sj2*x13559))+((r21*x13554*x13563))+((cj1*cj2))+((r21*x13561)));
evalcond[4]=((((-1.0)*cj2*x13559))+((r20*x13554*x13561))+((r20*x13563))+(((-1.0)*x13562))+((r22*x13568))+((r21*x13565))+(((-1.0)*r21*x13560*x13569)));
evalcond[5]=((((-1.0)*r02*x13570))+((r00*x13560))+((cj3*x13557))+((cj0*x13562))+((sj1*x13564))+((r01*x13554*x13563))+(((-1.0)*r00*x13555*x13567)));
evalcond[6]=(((r00*x13563))+(((-1.0)*cj0*sj2*x13559))+(((-1.0)*r01*x13560*x13569))+((r02*x13568))+((sj3*x13557))+((cj1*x13564))+((r00*x13554*x13561)));
evalcond[7]=(((sj1*x13556))+((r10*x13560))+((r11*x13561))+(((-1.0)*r10*x13555*x13567))+((r11*x13554*x13563))+(((-1.0)*r12*x13570))+((sj0*x13562)));
evalcond[8]=(((r10*x13554*x13561))+((r10*x13563))+(((-1.0)*sj1*sj2*x13558))+((r11*x13565))+(((-1.0)*r11*x13560*x13569))+((r12*x13568))+((cj1*x13556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13571 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x13571.valid){
continue;
}
CheckValue<IkReal> x13572=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13571.value)+(((1.5707963267949)*(x13572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13573=IKcos(j4);
IkReal x13574=IKsin(j4);
IkReal x13575=((1.0)*cj5);
IkReal x13576=(cj2*sj0);
IkReal x13577=(cj5*r01);
IkReal x13578=((1.0)*sj0);
IkReal x13579=((1.0)*sj1);
IkReal x13580=(cj3*sj5);
IkReal x13581=(cj3*cj5);
IkReal x13582=(cj1*sj2);
IkReal x13583=(sj3*sj5);
IkReal x13584=(cj0*cj2);
IkReal x13585=(cj5*sj3);
IkReal x13586=(sj5*x13573);
IkReal x13587=(sj3*x13574);
IkReal x13588=(cj3*x13573);
IkReal x13589=((1.0)*x13574);
IkReal x13590=((1.0)*sj3*x13573);
evalcond[0]=(((r21*x13586))+((r22*x13574))+(((-1.0)*r20*x13573*x13575)));
evalcond[1]=(cj0+((r12*x13574))+(((-1.0)*r10*x13573*x13575))+((r11*x13586)));
evalcond[2]=(((r01*x13586))+((r02*x13574))+(((-1.0)*r00*x13573*x13575))+(((-1.0)*x13578)));
evalcond[3]=((((-1.0)*r20*x13575*x13587))+(((-1.0)*sj2*x13579))+((r21*x13574*x13583))+((r21*x13581))+((r20*x13580))+((cj1*cj2))+(((-1.0)*r22*x13590)));
evalcond[4]=(((r20*x13574*x13581))+(((-1.0)*r21*x13580*x13589))+(((-1.0)*cj2*x13579))+(((-1.0)*x13582))+((r21*x13585))+((r20*x13583))+((r22*x13588)));
evalcond[5]=(((cj0*x13582))+((sj1*x13584))+((r00*x13580))+((cj3*x13577))+(((-1.0)*r00*x13575*x13587))+(((-1.0)*r02*x13590))+((r01*x13574*x13583)));
evalcond[6]=((((-1.0)*r01*x13580*x13589))+((cj1*x13584))+((sj3*x13577))+((r00*x13583))+(((-1.0)*cj0*sj2*x13579))+((r02*x13588))+((r00*x13574*x13581)));
evalcond[7]=(((r10*x13580))+((sj0*x13582))+((sj1*x13576))+(((-1.0)*r12*x13590))+(((-1.0)*r10*x13575*x13587))+((r11*x13574*x13583))+((r11*x13581)));
evalcond[8]=(((r10*x13574*x13581))+((r12*x13588))+((r10*x13583))+(((-1.0)*r11*x13580*x13589))+(((-1.0)*sj1*sj2*x13578))+((cj1*x13576))+((r11*x13585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13591 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13591.valid){
continue;
}
CheckValue<IkReal> x13592=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13591.value)+(((1.5707963267949)*(x13592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13593=IKcos(j4);
IkReal x13594=IKsin(j4);
IkReal x13595=((1.0)*cj5);
IkReal x13596=(cj2*sj0);
IkReal x13597=(cj5*r01);
IkReal x13598=((1.0)*sj0);
IkReal x13599=((1.0)*sj1);
IkReal x13600=(cj3*sj5);
IkReal x13601=(cj3*cj5);
IkReal x13602=(cj1*sj2);
IkReal x13603=(sj3*sj5);
IkReal x13604=(cj0*cj2);
IkReal x13605=(cj5*sj3);
IkReal x13606=(sj5*x13593);
IkReal x13607=(sj3*x13594);
IkReal x13608=(cj3*x13593);
IkReal x13609=((1.0)*x13594);
IkReal x13610=((1.0)*sj3*x13593);
evalcond[0]=(((r22*x13594))+(((-1.0)*r20*x13593*x13595))+((r21*x13606)));
evalcond[1]=(((r11*x13606))+cj0+(((-1.0)*r10*x13593*x13595))+((r12*x13594)));
evalcond[2]=((((-1.0)*r00*x13593*x13595))+((r02*x13594))+(((-1.0)*x13598))+((r01*x13606)));
evalcond[3]=((((-1.0)*r20*x13595*x13607))+(((-1.0)*sj2*x13599))+((r21*x13601))+((cj1*cj2))+((r20*x13600))+(((-1.0)*r22*x13610))+((r21*x13594*x13603)));
evalcond[4]=((((-1.0)*x13602))+((r22*x13608))+((r20*x13594*x13601))+(((-1.0)*r21*x13600*x13609))+((r21*x13605))+(((-1.0)*cj2*x13599))+((r20*x13603)));
evalcond[5]=(((r01*x13594*x13603))+((cj0*x13602))+(((-1.0)*r00*x13595*x13607))+(((-1.0)*r02*x13610))+((sj1*x13604))+((cj3*x13597))+((r00*x13600)));
evalcond[6]=(((r02*x13608))+(((-1.0)*r01*x13600*x13609))+((sj3*x13597))+((cj1*x13604))+((r00*x13603))+(((-1.0)*cj0*sj2*x13599))+((r00*x13594*x13601)));
evalcond[7]=(((r11*x13601))+((r10*x13600))+((sj1*x13596))+((r11*x13594*x13603))+(((-1.0)*r10*x13595*x13607))+((sj0*x13602))+(((-1.0)*r12*x13610)));
evalcond[8]=(((r11*x13605))+((r10*x13603))+(((-1.0)*r11*x13600*x13609))+((cj1*x13596))+((r12*x13608))+((r10*x13594*x13601))+(((-1.0)*sj1*sj2*x13598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13611=r21*r21;
IkReal x13612=cj5*cj5;
IkReal x13613=r20*r20;
IkReal x13614=(cj3*r20);
IkReal x13615=((1.0)*sj5);
IkReal x13616=(sj1*sj2);
IkReal x13617=((1.0)*sj3);
IkReal x13618=(cj3*cj5);
IkReal x13619=(cj1*cj2);
IkReal x13620=(cj5*r20);
IkReal x13621=(r21*sj5);
IkReal x13622=((1.0)*r22);
IkReal x13623=(sj3*x13611);
CheckValue<IkReal> x13624 = IKatan2WithCheck(IkReal((((r21*x13614))+((x13616*x13620))+(((-2.0)*r21*x13612*x13614))+((sj5*x13611*x13618))+(((-1.0)*x13619*x13620))+((x13619*x13621))+(((-1.0)*r21*x13615*x13616))+(((-1.0)*x13613*x13615*x13618)))),IkReal(((((-1.0)*x13619*x13622))+(((-1.0)*r21*x13618*x13622))+(((-1.0)*r22*x13614*x13615))+((r22*x13616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13624.valid){
continue;
}
CheckValue<IkReal> x13625=IKPowWithIntegerCheck(IKsign((((x13612*x13623))+(((2.0)*sj3*x13620*x13621))+(((-1.0)*x13612*x13613*x13617))+(((-1.0)*x13611*x13617))+(((-1.0)*x13617*(r22*r22))))),-1);
if(!x13625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13624.value)+(((1.5707963267949)*(x13625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13626=IKcos(j4);
IkReal x13627=IKsin(j4);
IkReal x13628=(cj5*r21);
IkReal x13629=((1.0)*sj2);
IkReal x13630=(r20*sj5);
IkReal x13631=(r21*sj5);
IkReal x13632=(cj5*r20);
IkReal x13633=(r22*x13626);
IkReal x13634=(sj3*x13627);
IkReal x13635=(cj3*x13627);
evalcond[0]=((((-1.0)*x13626*x13632))+((r22*x13627))+((x13626*x13631)));
evalcond[1]=((((-1.0)*sj3*x13633))+(((-1.0)*sj1*x13629))+(((-1.0)*x13632*x13634))+((x13631*x13634))+((cj3*x13630))+((cj1*cj2))+((cj3*x13628)));
evalcond[2]=(((x13632*x13635))+(((-1.0)*cj1*x13629))+(((-1.0)*cj2*sj1))+((cj3*x13633))+((sj3*x13630))+((sj3*x13628))+(((-1.0)*x13631*x13635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13636=(cj4*cj5);
IkReal x13637=(cj4*sj5);
if( IKabs(((((-1.0)*r00*x13636))+((r02*sj4))+((r01*x13637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13636))+(((-1.0)*r11*x13637))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x13636))+((r02*sj4))+((r01*x13637))))+IKsqr((((r10*x13636))+(((-1.0)*r11*x13637))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x13636))+((r02*sj4))+((r01*x13637))), (((r10*x13636))+(((-1.0)*r11*x13637))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13638=IKcos(j0);
IkReal x13639=IKsin(j0);
IkReal x13640=((1.0)*cj4);
IkReal x13641=(cj3*cj4);
IkReal x13642=((1.0)*sj2);
IkReal x13643=(cj5*r01);
IkReal x13644=(cj1*cj2);
IkReal x13645=((0.24)*cj2);
IkReal x13646=(cj5*r00);
IkReal x13647=(sj3*sj4);
IkReal x13648=(r01*sj5);
IkReal x13649=(cj5*r11);
IkReal x13650=(r00*sj5);
IkReal x13651=(r11*sj5);
IkReal x13652=(cj3*r10);
IkReal x13653=(cj3*sj4);
IkReal x13654=(r10*sj5);
IkReal x13655=(cj5*r10);
IkReal x13656=(sj1*x13639);
IkReal x13657=(sj1*x13638);
IkReal x13658=(cj1*sj2*x13638);
IkReal x13659=(cj1*sj2*x13639);
evalcond[0]=(x13638+((cj4*x13651))+((r12*sj4))+(((-1.0)*x13640*x13655)));
evalcond[1]=((((-1.0)*x13639))+(((-1.0)*x13640*x13646))+((r02*sj4))+((cj4*x13648)));
evalcond[2]=(((x13645*x13657))+(((-0.095)*x13650))+(((0.24)*x13658))+(((-1.0)*px))+(((0.265)*x13657))+(((-0.095)*x13643))+(((-0.115)*x13639)));
evalcond[3]=((((0.115)*x13638))+((x13645*x13656))+(((-0.095)*x13654))+(((0.24)*x13659))+(((-1.0)*py))+(((0.265)*x13656))+(((-0.095)*x13649)));
evalcond[4]=(x13658+((x13647*x13648))+(((-1.0)*x13646*x13647))+((cj3*x13650))+(((-1.0)*r02*sj3*x13640))+((cj2*x13657))+((cj3*x13643)));
evalcond[5]=((((-1.0)*x13648*x13653))+((r02*x13641))+(((-1.0)*x13642*x13657))+((sj3*x13643))+((x13646*x13653))+((sj3*x13650))+((x13638*x13644)));
evalcond[6]=(((sj5*x13652))+x13659+((cj2*x13656))+(((-1.0)*x13647*x13655))+((x13647*x13651))+((cj3*x13649))+(((-1.0)*r12*sj3*x13640)));
evalcond[7]=(((x13639*x13644))+(((-1.0)*x13642*x13656))+((sj3*x13649))+((r12*x13641))+((sj3*x13654))+(((-1.0)*x13651*x13653))+((cj5*sj4*x13652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13660=r21*r21;
IkReal x13661=cj5*cj5;
IkReal x13662=r20*r20;
IkReal x13663=(r20*r21);
IkReal x13664=(cj5*sj5);
IkReal x13665=((1.0)*sj3);
IkReal x13666=(cj1*sj2);
IkReal x13667=(cj5*r20);
IkReal x13668=(cj2*sj1);
IkReal x13669=(cj3*x13661);
IkReal x13670=((1.0)*r21*sj5);
CheckValue<IkReal> x13671=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x13663*x13664))+((cj3*x13660))+((cj3*(r22*r22)))+((x13662*x13669))+(((-1.0)*x13660*x13669)))),-1);
if(!x13671.valid){
continue;
}
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(((((-1.0)*x13668*x13670))+(((-2.0)*sj3*x13661*x13663))+(((-1.0)*x13666*x13670))+((sj3*x13660*x13664))+((sj3*x13663))+(((-1.0)*x13662*x13664*x13665))+((x13667*x13668))+((x13666*x13667)))),IkReal((((r22*x13668))+((r22*x13666))+(((-1.0)*cj5*r21*r22*x13665))+(((-1.0)*r20*r22*sj5*x13665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13671.value)))+(x13672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13673=IKcos(j4);
IkReal x13674=IKsin(j4);
IkReal x13675=(cj5*r21);
IkReal x13676=((1.0)*sj2);
IkReal x13677=(r20*sj5);
IkReal x13678=(r21*sj5);
IkReal x13679=(cj5*r20);
IkReal x13680=(r22*x13673);
IkReal x13681=(sj3*x13674);
IkReal x13682=(cj3*x13674);
evalcond[0]=(((r22*x13674))+(((-1.0)*x13673*x13679))+((x13673*x13678)));
evalcond[1]=(((cj3*x13675))+((cj3*x13677))+(((-1.0)*sj1*x13676))+(((-1.0)*sj3*x13680))+(((-1.0)*x13679*x13681))+((cj1*cj2))+((x13678*x13681)));
evalcond[2]=(((x13679*x13682))+((cj3*x13680))+(((-1.0)*cj2*sj1))+(((-1.0)*x13678*x13682))+((sj3*x13677))+((sj3*x13675))+(((-1.0)*cj1*x13676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13683=(cj4*cj5);
IkReal x13684=(cj4*sj5);
if( IKabs((((r02*sj4))+((r01*x13684))+(((-1.0)*r00*x13683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x13684))+((r10*x13683))+(((-1.0)*r12*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*sj4))+((r01*x13684))+(((-1.0)*r00*x13683))))+IKsqr(((((-1.0)*r11*x13684))+((r10*x13683))+(((-1.0)*r12*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*sj4))+((r01*x13684))+(((-1.0)*r00*x13683))), ((((-1.0)*r11*x13684))+((r10*x13683))+(((-1.0)*r12*sj4))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13685=IKcos(j0);
IkReal x13686=IKsin(j0);
IkReal x13687=((1.0)*cj4);
IkReal x13688=(cj3*cj4);
IkReal x13689=((1.0)*sj2);
IkReal x13690=(cj5*r01);
IkReal x13691=(cj1*cj2);
IkReal x13692=((0.24)*cj2);
IkReal x13693=(cj5*r00);
IkReal x13694=(sj3*sj4);
IkReal x13695=(r01*sj5);
IkReal x13696=(cj5*r11);
IkReal x13697=(r00*sj5);
IkReal x13698=(r11*sj5);
IkReal x13699=(cj3*r10);
IkReal x13700=(cj3*sj4);
IkReal x13701=(r10*sj5);
IkReal x13702=(cj5*r10);
IkReal x13703=(sj1*x13686);
IkReal x13704=(sj1*x13685);
IkReal x13705=(cj1*sj2*x13685);
IkReal x13706=(cj1*sj2*x13686);
evalcond[0]=(x13685+((cj4*x13698))+(((-1.0)*x13687*x13702))+((r12*sj4)));
evalcond[1]=((((-1.0)*x13687*x13693))+((cj4*x13695))+((r02*sj4))+(((-1.0)*x13686)));
evalcond[2]=((((-0.095)*x13697))+(((-0.095)*x13690))+(((0.265)*x13704))+((x13692*x13704))+(((-1.0)*px))+(((-0.115)*x13686))+(((0.24)*x13705)));
evalcond[3]=((((-0.095)*x13696))+(((0.265)*x13703))+(((0.115)*x13685))+((x13692*x13703))+(((-1.0)*py))+(((-0.095)*x13701))+(((0.24)*x13706)));
evalcond[4]=((((-1.0)*r02*sj3*x13687))+x13705+(((-1.0)*x13693*x13694))+((cj2*x13704))+((cj3*x13697))+((cj3*x13690))+((x13694*x13695)));
evalcond[5]=(((x13685*x13691))+(((-1.0)*x13695*x13700))+((sj3*x13690))+((sj3*x13697))+((r02*x13688))+((x13693*x13700))+(((-1.0)*x13689*x13704)));
evalcond[6]=(((sj5*x13699))+(((-1.0)*x13694*x13702))+(((-1.0)*r12*sj3*x13687))+x13706+((cj2*x13703))+((cj3*x13696))+((x13694*x13698)));
evalcond[7]=(((sj3*x13696))+((sj3*x13701))+((r12*x13688))+(((-1.0)*x13689*x13703))+(((-1.0)*x13698*x13700))+((x13686*x13691))+((cj5*sj4*x13699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - elerobot (0e40e3d078cf89db4ed820a394f7b9ec)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
